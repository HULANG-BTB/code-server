{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/extensionsViewlet\");\nvar nls_1 = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar extensions_2 = require(\"../common/extensions\");\nvar extensionsActions_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsActions\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensionsInput_1 = require(\"vs/workbench/contrib/extensions/common/extensionsInput\");\nvar extensionsViews_1 = require(\"./extensionsViews\");\nvar preferencesActions_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesActions\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar viewsViewlet_1 = require(\"vs/workbench/browser/parts/views/viewsViewlet\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar extensionQuery_1 = require(\"vs/workbench/contrib/extensions/common/extensionQuery\");\nvar suggestEnabledInput_1 = require(\"vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput\");\nvar aria_1 = require(\"vs/base/browser/ui/aria/aria\");\nvar errorsWithActions_1 = require(\"vs/base/common/errorsWithActions\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar extensions_3 = require(\"vs/platform/extensions/common/extensions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar NonEmptyWorkspaceContext = new contextkey_1.RawContextKey('nonEmptyWorkspace', false);\nvar SearchExtensionsContext = new contextkey_1.RawContextKey('searchExtensions', false);\nvar HasInstalledExtensionsContext = new contextkey_1.RawContextKey('hasInstalledExtensions', true);\nvar SearchBuiltInExtensionsContext = new contextkey_1.RawContextKey('searchBuiltInExtensions', false);\nvar RecommendedExtensionsContext = new contextkey_1.RawContextKey('recommendedExtensions', false);\nvar DefaultRecommendedExtensionsContext = new contextkey_1.RawContextKey('defaultRecommendedExtensions', false);\nvar GroupByServersContext = new contextkey_1.RawContextKey('groupByServersContext', false);\nvar viewIdNameMappings = {\n    'extensions.listView': nls_1.localize('marketPlace', \"Marketplace\"),\n    'extensions.enabledExtensionList': nls_1.localize('enabledExtensions', \"Enabled\"),\n    'extensions.disabledExtensionList': nls_1.localize('disabledExtensions', \"Disabled\"),\n    'extensions.popularExtensionsList': nls_1.localize('popularExtensions', \"Popular\"),\n    'extensions.recommendedList': nls_1.localize('recommendedExtensions', \"Recommended\"),\n    'extensions.otherrecommendedList': nls_1.localize('otherRecommendedExtensions', \"Other Recommendations\"),\n    'extensions.workspaceRecommendedList': nls_1.localize('workspaceRecommendedExtensions', \"Workspace Recommendations\"),\n    'extensions.builtInExtensionsList': nls_1.localize('builtInExtensions', \"Features\"),\n    'extensions.builtInThemesExtensionsList': nls_1.localize('builtInThemesExtensions', \"Themes\"),\n    'extensions.builtInBasicsExtensionsList': nls_1.localize('builtInBasicsExtensions', \"Programming Languages\"),\n};\nvar ExtensionsViewletViewsContribution = /** @class */ (function () {\n    function ExtensionsViewletViewsContribution(extensionManagementServerService) {\n        this.extensionManagementServerService = extensionManagementServerService;\n        this.registerViews();\n    }\n    ExtensionsViewletViewsContribution.prototype.registerViews = function () {\n        var viewDescriptors = [];\n        viewDescriptors.push(this.createMarketPlaceExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createEnabledExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createDisabledExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createPopularExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createBuiltInExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createBuiltInBasicsExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createBuiltInThemesExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createDefaultRecommendedExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createOtherRecommendedExtensionsListViewDescriptor());\n        viewDescriptors.push(this.createWorkspaceRecommendedExtensionsListViewDescriptor());\n        if (this.extensionManagementServerService.remoteExtensionManagementServer) {\n            viewDescriptors.push.apply(viewDescriptors, this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.localExtensionManagementServer));\n            viewDescriptors.push.apply(viewDescriptors, this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.remoteExtensionManagementServer));\n        }\n        platform_1.Registry.as(views_1.Extensions.ViewsRegistry).registerViews(viewDescriptors, extensions_2.VIEW_CONTAINER);\n    };\n    // View used for any kind of searching\n    ExtensionsViewletViewsContribution.prototype.createMarketPlaceExtensionsListViewDescriptor = function () {\n        var id = 'extensions.listView';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.ExtensionsListView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has('searchExtensions'), contextkey_1.ContextKeyExpr.not('searchInstalledExtensions'), contextkey_1.ContextKeyExpr.not('searchBuiltInExtensions'), contextkey_1.ContextKeyExpr.not('recommendedExtensions'), contextkey_1.ContextKeyExpr.not('groupByServersContext')),\n            weight: 100\n        };\n    };\n    // Separate view for enabled extensions required as we need to show enabled, disabled and recommended sections\n    // in the default view when there is no search text, but user has installed extensions.\n    ExtensionsViewletViewsContribution.prototype.createEnabledExtensionsListViewDescriptor = function () {\n        var id = 'extensions.enabledExtensionList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.EnabledExtensionsView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('hasInstalledExtensions')),\n            weight: 40,\n            canToggleVisibility: true,\n            order: 1\n        };\n    };\n    // Separate view for disabled extensions required as we need to show enabled, disabled and recommended sections\n    // in the default view when there is no search text, but user has installed extensions.\n    ExtensionsViewletViewsContribution.prototype.createDisabledExtensionsListViewDescriptor = function () {\n        var id = 'extensions.disabledExtensionList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.DisabledExtensionsView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('hasInstalledExtensions')),\n            weight: 10,\n            canToggleVisibility: true,\n            order: 3,\n            collapsed: true\n        };\n    };\n    // Separate view for popular extensions required as we need to show popular and recommended sections\n    // in the default view when there is no search text, and user has no installed extensions.\n    ExtensionsViewletViewsContribution.prototype.createPopularExtensionsListViewDescriptor = function () {\n        var id = 'extensions.popularExtensionsList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.ExtensionsListView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.not('hasInstalledExtensions')),\n            weight: 60,\n            order: 1\n        };\n    };\n    ExtensionsViewletViewsContribution.prototype.createExtensionsViewDescriptorsForServer = function (server) {\n        return [{\n                id: \"server.extensionsList.\" + server.authority,\n                name: server.label,\n                ctorDescriptor: { ctor: extensionsViews_1.GroupByServerExtensionsView },\n                when: contextkey_1.ContextKeyExpr.has('groupByServersContext'),\n                weight: 100\n            }];\n    };\n    // Separate view for recommended extensions required as we need to show it along with other views when there is no search text.\n    // When user has installed extensions, this is shown along with the views for enabled & disabled extensions\n    // When user has no installed extensions, this is shown along with the view for popular extensions\n    ExtensionsViewletViewsContribution.prototype.createDefaultRecommendedExtensionsListViewDescriptor = function () {\n        var id = 'extensions.recommendedList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.DefaultRecommendedExtensionsView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('defaultRecommendedExtensions')),\n            weight: 40,\n            order: 2,\n            canToggleVisibility: true\n        };\n    };\n    // Separate view for recommedations that are not workspace recommendations.\n    // Shown along with view for workspace recommendations, when using the command that shows recommendations\n    ExtensionsViewletViewsContribution.prototype.createOtherRecommendedExtensionsListViewDescriptor = function () {\n        var id = 'extensions.otherrecommendedList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.RecommendedExtensionsView },\n            when: contextkey_1.ContextKeyExpr.has('recommendedExtensions'),\n            weight: 50,\n            canToggleVisibility: true,\n            order: 2\n        };\n    };\n    // Separate view for workspace recommendations.\n    // Shown along with view for other recommendations, when using the command that shows recommendations\n    ExtensionsViewletViewsContribution.prototype.createWorkspaceRecommendedExtensionsListViewDescriptor = function () {\n        var id = 'extensions.workspaceRecommendedList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.WorkspaceRecommendedExtensionsView },\n            when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has('recommendedExtensions'), contextkey_1.ContextKeyExpr.has('nonEmptyWorkspace')),\n            weight: 50,\n            canToggleVisibility: true,\n            order: 1\n        };\n    };\n    ExtensionsViewletViewsContribution.prototype.createBuiltInExtensionsListViewDescriptor = function () {\n        var id = 'extensions.builtInExtensionsList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.BuiltInExtensionsView },\n            when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n            weight: 100,\n            canToggleVisibility: true\n        };\n    };\n    ExtensionsViewletViewsContribution.prototype.createBuiltInThemesExtensionsListViewDescriptor = function () {\n        var id = 'extensions.builtInThemesExtensionsList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.BuiltInThemesExtensionsView },\n            when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n            weight: 100,\n            canToggleVisibility: true\n        };\n    };\n    ExtensionsViewletViewsContribution.prototype.createBuiltInBasicsExtensionsListViewDescriptor = function () {\n        var id = 'extensions.builtInBasicsExtensionsList';\n        return {\n            id: id,\n            name: viewIdNameMappings[id],\n            ctorDescriptor: { ctor: extensionsViews_1.BuiltInBasicsExtensionsView },\n            when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n            weight: 100,\n            canToggleVisibility: true\n        };\n    };\n    ExtensionsViewletViewsContribution = tslib_1.__decorate([\n        tslib_1.__param(0, extensionManagement_1.IExtensionManagementServerService)\n    ], ExtensionsViewletViewsContribution);\n    return ExtensionsViewletViewsContribution;\n}());\nexports.ExtensionsViewletViewsContribution = ExtensionsViewletViewsContribution;\nvar ExtensionsViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionsViewlet, _super);\n    function ExtensionsViewlet(layoutService, telemetryService, progressService, instantiationService, editorGroupService, extensionManagementService, notificationService, viewletService, themeService, configurationService, storageService, contextService, contextKeyService, contextMenuService, extensionService) {\n        var _this = _super.call(this, extensions_2.VIEWLET_ID, extensions_2.VIEWLET_ID + \".state\", true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) || this;\n        _this.progressService = progressService;\n        _this.editorGroupService = editorGroupService;\n        _this.extensionManagementService = extensionManagementService;\n        _this.notificationService = notificationService;\n        _this.viewletService = viewletService;\n        _this.disposables = [];\n        _this.searchDelayer = new async_1.Delayer(500);\n        _this.nonEmptyWorkspaceContextKey = NonEmptyWorkspaceContext.bindTo(contextKeyService);\n        _this.searchExtensionsContextKey = SearchExtensionsContext.bindTo(contextKeyService);\n        _this.hasInstalledExtensionsContextKey = HasInstalledExtensionsContext.bindTo(contextKeyService);\n        _this.searchBuiltInExtensionsContextKey = SearchBuiltInExtensionsContext.bindTo(contextKeyService);\n        _this.recommendedExtensionsContextKey = RecommendedExtensionsContext.bindTo(contextKeyService);\n        _this.groupByServersContextKey = GroupByServersContext.bindTo(contextKeyService);\n        _this.defaultRecommendedExtensionsContextKey = DefaultRecommendedExtensionsContext.bindTo(contextKeyService);\n        _this.defaultRecommendedExtensionsContextKey.set(!_this.configurationService.getValue(extensions_2.ShowRecommendationsOnlyOnDemandKey));\n        _this.disposables.push(_this.viewletService.onDidViewletOpen(_this.onViewletOpen, _this, _this.disposables));\n        _this.searchViewletState = _this.getMemento(storage_1.StorageScope.WORKSPACE);\n        _this.extensionManagementService.getInstalled(extensions_3.ExtensionType.User).then(function (result) {\n            _this.hasInstalledExtensionsContextKey.set(result.length > 0);\n        });\n        _this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(extensions_2.AutoUpdateConfigurationKey)) {\n                _this.secondaryActions = null;\n                _this.updateTitleArea();\n            }\n            if (e.affectedKeys.indexOf(extensions_2.ShowRecommendationsOnlyOnDemandKey) > -1) {\n                _this.defaultRecommendedExtensionsContextKey.set(!_this.configurationService.getValue(extensions_2.ShowRecommendationsOnlyOnDemandKey));\n            }\n        }, _this, _this.disposables);\n        return _this;\n    }\n    ExtensionsViewlet.prototype.create = function (parent) {\n        var _this = this;\n        dom_1.addClass(parent, 'extensions-viewlet');\n        this.root = parent;\n        var header = dom_1.append(this.root, dom_1.$('.header'));\n        var placeholder = nls_1.localize('searchExtensions', \"Search Extensions in Marketplace\");\n        var searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';\n        this.searchBox = this.instantiationService.createInstance(suggestEnabledInput_1.SuggestEnabledInput, extensions_2.VIEWLET_ID + \".searchbox\", header, {\n            triggerCharacters: ['@'],\n            sortKey: function (item) {\n                if (item.indexOf(':') === -1) {\n                    return 'a';\n                }\n                else if (/ext:/.test(item) || /tag:/.test(item)) {\n                    return 'b';\n                }\n                else if (/sort:/.test(item)) {\n                    return 'c';\n                }\n                else {\n                    return 'd';\n                }\n            },\n            provideResults: function (query) { return extensionQuery_1.Query.suggestions(query); }\n        }, placeholder, 'extensions:searchinput', { placeholderText: placeholder, value: searchValue });\n        if (this.searchBox.getValue()) {\n            this.triggerSearch();\n        }\n        this.disposables.push(suggestEnabledInput_1.attachSuggestEnabledInputBoxStyler(this.searchBox, this.themeService));\n        this.disposables.push(this.searchBox);\n        var _searchChange = new event_1.Emitter();\n        this.onSearchChange = _searchChange.event;\n        this.searchBox.onInputDidChange(function () {\n            _this.triggerSearch();\n            _searchChange.fire(_this.searchBox.getValue());\n        }, this, this.disposables);\n        this.searchBox.onShouldFocusResults(function () { return _this.focusListView(); }, this, this.disposables);\n        this._register(this.onDidChangeVisibility(function (visible) {\n            if (visible) {\n                _this.searchBox.focus();\n            }\n        }));\n        this.extensionsBox = dom_1.append(this.root, dom_1.$('.extensions'));\n        _super.prototype.create.call(this, this.extensionsBox);\n    };\n    ExtensionsViewlet.prototype.focus = function () {\n        this.searchBox.focus();\n    };\n    ExtensionsViewlet.prototype.layout = function (dimension) {\n        dom_1.toggleClass(this.root, 'narrow', dimension.width <= 300);\n        this.searchBox.layout({ height: 20, width: dimension.width - 34 });\n        _super.prototype.layout.call(this, new dom_1.Dimension(dimension.width, dimension.height - 38));\n    };\n    ExtensionsViewlet.prototype.getOptimalWidth = function () {\n        return 400;\n    };\n    ExtensionsViewlet.prototype.getActions = function () {\n        if (!this.primaryActions) {\n            this.primaryActions = [\n                this.instantiationService.createInstance(extensionsActions_1.ClearExtensionsInputAction, extensionsActions_1.ClearExtensionsInputAction.ID, extensionsActions_1.ClearExtensionsInputAction.LABEL, this.onSearchChange)\n            ];\n        }\n        return this.primaryActions;\n    };\n    ExtensionsViewlet.prototype.getSecondaryActions = function () {\n        if (!this.secondaryActions) {\n            this.secondaryActions = [\n                this.instantiationService.createInstance(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowEnabledExtensionsAction, extensionsActions_1.ShowEnabledExtensionsAction.ID, extensionsActions_1.ShowEnabledExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowDisabledExtensionsAction, extensionsActions_1.ShowDisabledExtensionsAction.ID, extensionsActions_1.ShowDisabledExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowBuiltInExtensionsAction, extensionsActions_1.ShowBuiltInExtensionsAction.ID, extensionsActions_1.ShowBuiltInExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL),\n                new actionbar_1.Separator(),\n                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.install', nls_1.localize('sort by installs', \"Sort By: Install Count\"), this.onSearchChange, 'installs'),\n                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.rating', nls_1.localize('sort by rating', \"Sort By: Rating\"), this.onSearchChange, 'rating'),\n                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.name', nls_1.localize('sort by name', \"Sort By: Name\"), this.onSearchChange, 'name'),\n                new actionbar_1.Separator(),\n                this.instantiationService.createInstance(extensionsActions_1.CheckForUpdatesAction, extensionsActions_1.CheckForUpdatesAction.ID, extensionsActions_1.CheckForUpdatesAction.LABEL)\n            ].concat((this.configurationService.getValue(extensions_2.AutoUpdateConfigurationKey) ? [this.instantiationService.createInstance(extensionsActions_1.DisableAutoUpdateAction, extensionsActions_1.DisableAutoUpdateAction.ID, extensionsActions_1.DisableAutoUpdateAction.LABEL)] : [this.instantiationService.createInstance(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL), this.instantiationService.createInstance(extensionsActions_1.EnableAutoUpdateAction, extensionsActions_1.EnableAutoUpdateAction.ID, extensionsActions_1.EnableAutoUpdateAction.LABEL)]), [\n                this.instantiationService.createInstance(extensionsActions_1.InstallVSIXAction, extensionsActions_1.InstallVSIXAction.ID, extensionsActions_1.InstallVSIXAction.LABEL),\n                new actionbar_1.Separator(),\n                this.instantiationService.createInstance(extensionsActions_1.DisableAllAction, extensionsActions_1.DisableAllAction.ID, extensionsActions_1.DisableAllAction.LABEL),\n                this.instantiationService.createInstance(extensionsActions_1.EnableAllAction, extensionsActions_1.EnableAllAction.ID, extensionsActions_1.EnableAllAction.LABEL)\n            ]);\n        }\n        return this.secondaryActions;\n    };\n    ExtensionsViewlet.prototype.search = function (value) {\n        var event = new Event('input', { bubbles: true });\n        event.immediate = true;\n        this.searchBox.setValue(value);\n    };\n    ExtensionsViewlet.prototype.triggerSearch = function (immediate) {\n        var _this = this;\n        if (immediate === void 0) { immediate = false; }\n        this.searchDelayer.trigger(function () { return _this.doSearch(); }, immediate || !this.searchBox.getValue() ? 0 : 500).then(undefined, function (err) { return _this.onError(err); });\n    };\n    ExtensionsViewlet.prototype.normalizedQuery = function () {\n        return this.searchBox.getValue().replace(/@category/g, 'category').replace(/@tag:/g, 'tag:').replace(/@ext:/g, 'ext:');\n    };\n    ExtensionsViewlet.prototype.saveState = function () {\n        var value = this.searchBox.getValue();\n        if (extensionsViews_1.ExtensionsListView.isInstalledExtensionsQuery(value)) {\n            this.searchViewletState['query.value'] = value;\n        }\n        else {\n            this.searchViewletState['query.value'] = '';\n        }\n        _super.prototype.saveState.call(this);\n    };\n    ExtensionsViewlet.prototype.doSearch = function () {\n        var _this = this;\n        var value = this.normalizedQuery();\n        this.searchExtensionsContextKey.set(!!value);\n        this.searchBuiltInExtensionsContextKey.set(extensionsViews_1.ExtensionsListView.isBuiltInExtensionsQuery(value));\n        this.groupByServersContextKey.set(extensionsViews_1.ExtensionsListView.isGroupByServersExtensionsQuery(value));\n        this.recommendedExtensionsContextKey.set(extensionsViews_1.ExtensionsListView.isRecommendedExtensionsQuery(value));\n        this.nonEmptyWorkspaceContextKey.set(this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY);\n        if (value) {\n            return this.progress(Promise.all(this.panels.map(function (view) {\n                return view.show(_this.normalizedQuery())\n                    .then(function (model) { return _this.alertSearchResult(model.length, view.id); });\n            }))).then(function () { return undefined; });\n        }\n        return Promise.resolve();\n    };\n    ExtensionsViewlet.prototype.onDidAddViews = function (added) {\n        var _this = this;\n        var addedViews = _super.prototype.onDidAddViews.call(this, added);\n        this.progress(Promise.all(addedViews.map(function (addedView) {\n            return addedView.show(_this.normalizedQuery())\n                .then(function (model) { return _this.alertSearchResult(model.length, addedView.id); });\n        })));\n        return addedViews;\n    };\n    ExtensionsViewlet.prototype.alertSearchResult = function (count, viewId) {\n        switch (count) {\n            case 0:\n                break;\n            case 1:\n                if (viewIdNameMappings[viewId]) {\n                    aria_1.alert(nls_1.localize('extensionFoundInSection', \"1 extension found in the {0} section.\", viewIdNameMappings[viewId]));\n                }\n                else {\n                    aria_1.alert(nls_1.localize('extensionFound', \"1 extension found.\"));\n                }\n                break;\n            default:\n                if (viewIdNameMappings[viewId]) {\n                    aria_1.alert(nls_1.localize('extensionsFoundInSection', \"{0} extensions found in the {1} section.\", count, viewIdNameMappings[viewId]));\n                }\n                else {\n                    aria_1.alert(nls_1.localize('extensionsFound', \"{0} extensions found.\", count));\n                }\n                break;\n        }\n    };\n    ExtensionsViewlet.prototype.count = function () {\n        return this.panels.reduce(function (count, view) { return view.count() + count; }, 0);\n    };\n    ExtensionsViewlet.prototype.focusListView = function () {\n        if (this.count() > 0) {\n            this.panels[0].focus();\n        }\n    };\n    ExtensionsViewlet.prototype.onViewletOpen = function (viewlet) {\n        if (!viewlet || viewlet.getId() === extensions_2.VIEWLET_ID) {\n            return;\n        }\n        if (this.configurationService.getValue(extensions_2.CloseExtensionDetailsOnViewChangeKey)) {\n            var promises = this.editorGroupService.groups.map(function (group) {\n                var editors = group.editors.filter(function (input) { return input instanceof extensionsInput_1.ExtensionsInput; });\n                var promises = editors.map(function (editor) { return group.closeEditor(editor); });\n                return Promise.all(promises);\n            });\n            Promise.all(promises);\n        }\n    };\n    ExtensionsViewlet.prototype.progress = function (promise) {\n        return this.progressService.withProgress({ location: progress_1.ProgressLocation.Extensions }, function () { return promise; });\n    };\n    ExtensionsViewlet.prototype.onError = function (err) {\n        if (errors_1.isPromiseCanceledError(err)) {\n            return;\n        }\n        var message = err && err.message || '';\n        if (/ECONNREFUSED/.test(message)) {\n            var error = errorsWithActions_1.createErrorWithActions(nls_1.localize('suggestProxyError', \"Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting.\"), {\n                actions: [\n                    this.instantiationService.createInstance(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL)\n                ]\n            });\n            this.notificationService.error(error);\n            return;\n        }\n        this.notificationService.error(err);\n    };\n    ExtensionsViewlet.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n        _super.prototype.dispose.call(this);\n    };\n    ExtensionsViewlet = tslib_1.__decorate([\n        tslib_1.__param(0, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, progress_1.IProgressService2),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(5, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(6, notification_1.INotificationService),\n        tslib_1.__param(7, viewlet_1.IViewletService),\n        tslib_1.__param(8, themeService_1.IThemeService),\n        tslib_1.__param(9, configuration_1.IConfigurationService),\n        tslib_1.__param(10, storage_1.IStorageService),\n        tslib_1.__param(11, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(12, contextkey_1.IContextKeyService),\n        tslib_1.__param(13, contextView_1.IContextMenuService),\n        tslib_1.__param(14, extensions_1.IExtensionService)\n    ], ExtensionsViewlet);\n    return ExtensionsViewlet;\n}(viewsViewlet_1.ViewContainerViewlet));\nexports.ExtensionsViewlet = ExtensionsViewlet;\nvar StatusUpdater = /** @class */ (function () {\n    function StatusUpdater(activityService, extensionsWorkbenchService) {\n        this.activityService = activityService;\n        this.extensionsWorkbenchService = extensionsWorkbenchService;\n        extensionsWorkbenchService.onChange(this.onServiceChange, this, this.disposables);\n    }\n    StatusUpdater.prototype.onServiceChange = function () {\n        lifecycle_1.dispose(this.badgeHandle);\n        if (this.extensionsWorkbenchService.local.some(function (e) { return e.state === extensions_2.ExtensionState.Installing; })) {\n            this.badgeHandle = this.activityService.showActivity(extensions_2.VIEWLET_ID, new activity_1.ProgressBadge(function () { return nls_1.localize('extensions', \"Extensions\"); }), 'extensions-badge progress-badge');\n            return;\n        }\n        var outdated = this.extensionsWorkbenchService.local.reduce(function (r, e) { return r + (e.outdated && e.enablementState !== extensionManagement_1.EnablementState.Disabled && e.enablementState !== extensionManagement_1.EnablementState.WorkspaceDisabled ? 1 : 0); }, 0);\n        if (outdated > 0) {\n            var badge = new activity_1.NumberBadge(outdated, function (n) { return nls_1.localize('outdatedExtensions', '{0} Outdated Extensions', n); });\n            this.badgeHandle = this.activityService.showActivity(extensions_2.VIEWLET_ID, badge, 'extensions-badge count-badge');\n        }\n    };\n    StatusUpdater.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n        lifecycle_1.dispose(this.badgeHandle);\n    };\n    StatusUpdater = tslib_1.__decorate([\n        tslib_1.__param(0, activity_1.IActivityService),\n        tslib_1.__param(1, extensions_2.IExtensionsWorkbenchService)\n    ], StatusUpdater);\n    return StatusUpdater;\n}());\nexports.StatusUpdater = StatusUpdater;\nvar MaliciousExtensionChecker = /** @class */ (function () {\n    function MaliciousExtensionChecker(extensionsManagementService, windowService, logService, notificationService, environmentService) {\n        this.extensionsManagementService = extensionsManagementService;\n        this.windowService = windowService;\n        this.logService = logService;\n        this.notificationService = notificationService;\n        this.environmentService = environmentService;\n        if (!this.environmentService.disableExtensions) {\n            this.loopCheckForMaliciousExtensions();\n        }\n    }\n    MaliciousExtensionChecker.prototype.loopCheckForMaliciousExtensions = function () {\n        var _this = this;\n        this.checkForMaliciousExtensions()\n            .then(function () { return async_1.timeout(1000 * 60 * 5); }) // every five minutes\n            .then(function () { return _this.loopCheckForMaliciousExtensions(); });\n    };\n    MaliciousExtensionChecker.prototype.checkForMaliciousExtensions = function () {\n        var _this = this;\n        return this.extensionsManagementService.getExtensionsReport().then(function (report) {\n            var maliciousSet = extensionManagementUtil_1.getMaliciousExtensionsSet(report);\n            return _this.extensionsManagementService.getInstalled(extensions_3.ExtensionType.User).then(function (installed) {\n                var maliciousExtensions = installed\n                    .filter(function (e) { return maliciousSet.has(e.identifier.id); });\n                if (maliciousExtensions.length) {\n                    return Promise.all(maliciousExtensions.map(function (e) { return _this.extensionsManagementService.uninstall(e, true).then(function () {\n                        _this.notificationService.prompt(severity_1.default.Warning, nls_1.localize('malicious warning', \"We have uninstalled '{0}' which was reported to be problematic.\", e.identifier.id), [{\n                                label: nls_1.localize('reloadNow', \"Reload Now\"),\n                                run: function () { return _this.windowService.reloadWindow(); }\n                            }], { sticky: true });\n                    }); }));\n                }\n                else {\n                    return Promise.resolve(undefined);\n                }\n            }).then(function () { return undefined; });\n        }, function (err) { return _this.logService.error(err); });\n    };\n    MaliciousExtensionChecker.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    MaliciousExtensionChecker = tslib_1.__decorate([\n        tslib_1.__param(0, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(1, windows_1.IWindowService),\n        tslib_1.__param(2, log_1.ILogService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, environment_1.IEnvironmentService)\n    ], MaliciousExtensionChecker);\n    return MaliciousExtensionChecker;\n}());\nexports.MaliciousExtensionChecker = MaliciousExtensionChecker;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/extensionsViewlet';\nimport { localize } from 'vs/nls';\nimport { timeout, Delayer } from 'vs/base/common/async';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { Event as EventOf, Emitter } from 'vs/base/common/event';\nimport { IAction } from 'vs/base/common/actions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { append, $, addClass, toggleClass, Dimension } from 'vs/base/browser/dom';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IExtensionsWorkbenchService, IExtensionsViewlet, VIEWLET_ID, ExtensionState, AutoUpdateConfigurationKey, ShowRecommendationsOnlyOnDemandKey, CloseExtensionDetailsOnViewChangeKey, VIEW_CONTAINER } from '../common/extensions';\nimport {\n\tShowEnabledExtensionsAction, ShowInstalledExtensionsAction, ShowRecommendedExtensionsAction, ShowPopularExtensionsAction, ShowDisabledExtensionsAction,\n\tShowOutdatedExtensionsAction, ClearExtensionsInputAction, ChangeSortAction, UpdateAllAction, CheckForUpdatesAction, DisableAllAction, EnableAllAction,\n\tEnableAutoUpdateAction, DisableAutoUpdateAction, ShowBuiltInExtensionsAction, InstallVSIXAction\n} from 'vs/workbench/contrib/extensions/electron-browser/extensionsActions';\nimport { IExtensionManagementService, IExtensionManagementServerService, IExtensionManagementServer, EnablementState } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionsInput } from 'vs/workbench/contrib/extensions/common/extensionsInput';\nimport { ExtensionsListView, EnabledExtensionsView, DisabledExtensionsView, RecommendedExtensionsView, WorkspaceRecommendedExtensionsView, BuiltInExtensionsView, BuiltInThemesExtensionsView, BuiltInBasicsExtensionsView, GroupByServerExtensionsView, DefaultRecommendedExtensionsView } from './extensionsViews';\nimport { OpenGlobalSettingsAction } from 'vs/workbench/contrib/preferences/browser/preferencesActions';\nimport { IProgressService2, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport Severity from 'vs/base/common/severity';\nimport { IActivityService, ProgressBadge, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IViewsRegistry, IViewDescriptor, Extensions } from 'vs/workbench/common/views';\nimport { ViewContainerViewlet } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IContextKeyService, ContextKeyExpr, RawContextKey, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { getMaliciousExtensionsSet } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IAddedViewDescriptorRef } from 'vs/workbench/browser/parts/views/views';\nimport { ViewletPanel } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { Query } from 'vs/workbench/contrib/extensions/common/extensionQuery';\nimport { SuggestEnabledInput, attachSuggestEnabledInputBoxStyler } from 'vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput';\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { createErrorWithActions } from 'vs/base/common/errorsWithActions';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\ninterface SearchInputEvent extends Event {\n\ttarget: HTMLInputElement;\n\timmediate?: boolean;\n}\n\nconst NonEmptyWorkspaceContext = new RawContextKey<boolean>('nonEmptyWorkspace', false);\nconst SearchExtensionsContext = new RawContextKey<boolean>('searchExtensions', false);\nconst HasInstalledExtensionsContext = new RawContextKey<boolean>('hasInstalledExtensions', true);\nconst SearchBuiltInExtensionsContext = new RawContextKey<boolean>('searchBuiltInExtensions', false);\nconst RecommendedExtensionsContext = new RawContextKey<boolean>('recommendedExtensions', false);\nconst DefaultRecommendedExtensionsContext = new RawContextKey<boolean>('defaultRecommendedExtensions', false);\nconst GroupByServersContext = new RawContextKey<boolean>('groupByServersContext', false);\nconst viewIdNameMappings: { [id: string]: string } = {\n\t'extensions.listView': localize('marketPlace', \"Marketplace\"),\n\t'extensions.enabledExtensionList': localize('enabledExtensions', \"Enabled\"),\n\t'extensions.disabledExtensionList': localize('disabledExtensions', \"Disabled\"),\n\t'extensions.popularExtensionsList': localize('popularExtensions', \"Popular\"),\n\t'extensions.recommendedList': localize('recommendedExtensions', \"Recommended\"),\n\t'extensions.otherrecommendedList': localize('otherRecommendedExtensions', \"Other Recommendations\"),\n\t'extensions.workspaceRecommendedList': localize('workspaceRecommendedExtensions', \"Workspace Recommendations\"),\n\t'extensions.builtInExtensionsList': localize('builtInExtensions', \"Features\"),\n\t'extensions.builtInThemesExtensionsList': localize('builtInThemesExtensions', \"Themes\"),\n\t'extensions.builtInBasicsExtensionsList': localize('builtInBasicsExtensions', \"Programming Languages\"),\n};\n\nexport class ExtensionsViewletViewsContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService\n\t) {\n\t\tthis.registerViews();\n\t}\n\n\tprivate registerViews(): void {\n\t\tlet viewDescriptors: IViewDescriptor[] = [];\n\t\tviewDescriptors.push(this.createMarketPlaceExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createEnabledExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createDisabledExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createPopularExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createBuiltInExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createBuiltInBasicsExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createBuiltInThemesExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createDefaultRecommendedExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createOtherRecommendedExtensionsListViewDescriptor());\n\t\tviewDescriptors.push(this.createWorkspaceRecommendedExtensionsListViewDescriptor());\n\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tviewDescriptors.push(...this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.localExtensionManagementServer));\n\t\t\tviewDescriptors.push(...this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.remoteExtensionManagementServer));\n\t\t}\n\n\t\tRegistry.as<IViewsRegistry>(Extensions.ViewsRegistry).registerViews(viewDescriptors, VIEW_CONTAINER);\n\t}\n\n\t// View used for any kind of searching\n\tprivate createMarketPlaceExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.listView';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: ExtensionsListView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.has('searchExtensions'), ContextKeyExpr.not('searchInstalledExtensions'), ContextKeyExpr.not('searchBuiltInExtensions'), ContextKeyExpr.not('recommendedExtensions'), ContextKeyExpr.not('groupByServersContext')),\n\t\t\tweight: 100\n\t\t};\n\t}\n\n\t// Separate view for enabled extensions required as we need to show enabled, disabled and recommended sections\n\t// in the default view when there is no search text, but user has installed extensions.\n\tprivate createEnabledExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.enabledExtensionList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: EnabledExtensionsView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.not('searchExtensions'), ContextKeyExpr.has('hasInstalledExtensions')),\n\t\t\tweight: 40,\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 1\n\t\t};\n\t}\n\n\t// Separate view for disabled extensions required as we need to show enabled, disabled and recommended sections\n\t// in the default view when there is no search text, but user has installed extensions.\n\tprivate createDisabledExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.disabledExtensionList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: DisabledExtensionsView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.not('searchExtensions'), ContextKeyExpr.has('hasInstalledExtensions')),\n\t\t\tweight: 10,\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 3,\n\t\t\tcollapsed: true\n\t\t};\n\t}\n\n\t// Separate view for popular extensions required as we need to show popular and recommended sections\n\t// in the default view when there is no search text, and user has no installed extensions.\n\tprivate createPopularExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.popularExtensionsList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: ExtensionsListView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.not('searchExtensions'), ContextKeyExpr.not('hasInstalledExtensions')),\n\t\t\tweight: 60,\n\t\t\torder: 1\n\t\t};\n\t}\n\n\tprivate createExtensionsViewDescriptorsForServer(server: IExtensionManagementServer): IViewDescriptor[] {\n\t\treturn [{\n\t\t\tid: `server.extensionsList.${server.authority}`,\n\t\t\tname: server.label,\n\t\t\tctorDescriptor: { ctor: GroupByServerExtensionsView },\n\t\t\twhen: ContextKeyExpr.has('groupByServersContext'),\n\t\t\tweight: 100\n\t\t}];\n\t}\n\n\t// Separate view for recommended extensions required as we need to show it along with other views when there is no search text.\n\t// When user has installed extensions, this is shown along with the views for enabled & disabled extensions\n\t// When user has no installed extensions, this is shown along with the view for popular extensions\n\tprivate createDefaultRecommendedExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.recommendedList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: DefaultRecommendedExtensionsView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.not('searchExtensions'), ContextKeyExpr.has('defaultRecommendedExtensions')),\n\t\t\tweight: 40,\n\t\t\torder: 2,\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t}\n\n\t// Separate view for recommedations that are not workspace recommendations.\n\t// Shown along with view for workspace recommendations, when using the command that shows recommendations\n\tprivate createOtherRecommendedExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.otherrecommendedList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: RecommendedExtensionsView },\n\t\t\twhen: ContextKeyExpr.has('recommendedExtensions'),\n\t\t\tweight: 50,\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 2\n\t\t};\n\t}\n\n\t// Separate view for workspace recommendations.\n\t// Shown along with view for other recommendations, when using the command that shows recommendations\n\tprivate createWorkspaceRecommendedExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.workspaceRecommendedList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: WorkspaceRecommendedExtensionsView },\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.has('recommendedExtensions'), ContextKeyExpr.has('nonEmptyWorkspace')),\n\t\t\tweight: 50,\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 1\n\t\t};\n\t}\n\n\tprivate createBuiltInExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.builtInExtensionsList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: BuiltInExtensionsView },\n\t\t\twhen: ContextKeyExpr.has('searchBuiltInExtensions'),\n\t\t\tweight: 100,\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t}\n\n\tprivate createBuiltInThemesExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.builtInThemesExtensionsList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: BuiltInThemesExtensionsView },\n\t\t\twhen: ContextKeyExpr.has('searchBuiltInExtensions'),\n\t\t\tweight: 100,\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t}\n\n\tprivate createBuiltInBasicsExtensionsListViewDescriptor(): IViewDescriptor {\n\t\tconst id = 'extensions.builtInBasicsExtensionsList';\n\t\treturn {\n\t\t\tid,\n\t\t\tname: viewIdNameMappings[id],\n\t\t\tctorDescriptor: { ctor: BuiltInBasicsExtensionsView },\n\t\t\twhen: ContextKeyExpr.has('searchBuiltInExtensions'),\n\t\t\tweight: 100,\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t}\n}\n\nexport class ExtensionsViewlet extends ViewContainerViewlet implements IExtensionsViewlet {\n\n\tprivate onSearchChange: EventOf<string>;\n\tprivate nonEmptyWorkspaceContextKey: IContextKey<boolean>;\n\tprivate searchExtensionsContextKey: IContextKey<boolean>;\n\tprivate hasInstalledExtensionsContextKey: IContextKey<boolean>;\n\tprivate searchBuiltInExtensionsContextKey: IContextKey<boolean>;\n\tprivate groupByServersContextKey: IContextKey<boolean>;\n\tprivate recommendedExtensionsContextKey: IContextKey<boolean>;\n\tprivate defaultRecommendedExtensionsContextKey: IContextKey<boolean>;\n\n\tprivate searchDelayer: Delayer<void>;\n\tprivate root: HTMLElement;\n\n\tprivate searchBox: SuggestEnabledInput;\n\tprivate extensionsBox: HTMLElement;\n\tprivate primaryActions: IAction[];\n\tprivate secondaryActions: IAction[] | null;\n\tprivate disposables: IDisposable[] = [];\n\tprivate searchViewletState: object;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IProgressService2 private readonly progressService: IProgressService2,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tsuper(VIEWLET_ID, `${VIEWLET_ID}.state`, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\n\t\tthis.searchDelayer = new Delayer(500);\n\t\tthis.nonEmptyWorkspaceContextKey = NonEmptyWorkspaceContext.bindTo(contextKeyService);\n\t\tthis.searchExtensionsContextKey = SearchExtensionsContext.bindTo(contextKeyService);\n\t\tthis.hasInstalledExtensionsContextKey = HasInstalledExtensionsContext.bindTo(contextKeyService);\n\t\tthis.searchBuiltInExtensionsContextKey = SearchBuiltInExtensionsContext.bindTo(contextKeyService);\n\t\tthis.recommendedExtensionsContextKey = RecommendedExtensionsContext.bindTo(contextKeyService);\n\t\tthis.groupByServersContextKey = GroupByServersContext.bindTo(contextKeyService);\n\t\tthis.defaultRecommendedExtensionsContextKey = DefaultRecommendedExtensionsContext.bindTo(contextKeyService);\n\t\tthis.defaultRecommendedExtensionsContextKey.set(!this.configurationService.getValue<boolean>(ShowRecommendationsOnlyOnDemandKey));\n\t\tthis.disposables.push(this.viewletService.onDidViewletOpen(this.onViewletOpen, this, this.disposables));\n\t\tthis.searchViewletState = this.getMemento(StorageScope.WORKSPACE);\n\n\t\tthis.extensionManagementService.getInstalled(ExtensionType.User).then(result => {\n\t\t\tthis.hasInstalledExtensionsContextKey.set(result.length > 0);\n\t\t});\n\n\t\tthis.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(AutoUpdateConfigurationKey)) {\n\t\t\t\tthis.secondaryActions = null;\n\t\t\t\tthis.updateTitleArea();\n\t\t\t}\n\t\t\tif (e.affectedKeys.indexOf(ShowRecommendationsOnlyOnDemandKey) > -1) {\n\t\t\t\tthis.defaultRecommendedExtensionsContextKey.set(!this.configurationService.getValue<boolean>(ShowRecommendationsOnlyOnDemandKey));\n\t\t\t}\n\t\t}, this, this.disposables);\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\taddClass(parent, 'extensions-viewlet');\n\t\tthis.root = parent;\n\n\t\tconst header = append(this.root, $('.header'));\n\n\t\tconst placeholder = localize('searchExtensions', \"Search Extensions in Marketplace\");\n\t\tconst searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';\n\n\t\tthis.searchBox = this.instantiationService.createInstance(SuggestEnabledInput, `${VIEWLET_ID}.searchbox`, header, {\n\t\t\ttriggerCharacters: ['@'],\n\t\t\tsortKey: (item: string) => {\n\t\t\t\tif (item.indexOf(':') === -1) { return 'a'; }\n\t\t\t\telse if (/ext:/.test(item) || /tag:/.test(item)) { return 'b'; }\n\t\t\t\telse if (/sort:/.test(item)) { return 'c'; }\n\t\t\t\telse { return 'd'; }\n\t\t\t},\n\t\t\tprovideResults: (query: string) => Query.suggestions(query)\n\t\t}, placeholder, 'extensions:searchinput', { placeholderText: placeholder, value: searchValue });\n\n\t\tif (this.searchBox.getValue()) {\n\t\t\tthis.triggerSearch();\n\t\t}\n\n\t\tthis.disposables.push(attachSuggestEnabledInputBoxStyler(this.searchBox, this.themeService));\n\n\t\tthis.disposables.push(this.searchBox);\n\n\t\tconst _searchChange = new Emitter<string>();\n\t\tthis.onSearchChange = _searchChange.event;\n\t\tthis.searchBox.onInputDidChange(() => {\n\t\t\tthis.triggerSearch();\n\t\t\t_searchChange.fire(this.searchBox.getValue());\n\t\t}, this, this.disposables);\n\n\t\tthis.searchBox.onShouldFocusResults(() => this.focusListView(), this, this.disposables);\n\n\t\tthis._register(this.onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tthis.searchBox.focus();\n\t\t\t}\n\t\t}));\n\n\t\tthis.extensionsBox = append(this.root, $('.extensions'));\n\t\tsuper.create(this.extensionsBox);\n\t}\n\n\tfocus(): void {\n\t\tthis.searchBox.focus();\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\ttoggleClass(this.root, 'narrow', dimension.width <= 300);\n\t\tthis.searchBox.layout({ height: 20, width: dimension.width - 34 });\n\t\tsuper.layout(new Dimension(dimension.width, dimension.height - 38));\n\t}\n\n\tgetOptimalWidth(): number {\n\t\treturn 400;\n\t}\n\n\tgetActions(): IAction[] {\n\t\tif (!this.primaryActions) {\n\t\t\tthis.primaryActions = [\n\t\t\t\tthis.instantiationService.createInstance(ClearExtensionsInputAction, ClearExtensionsInputAction.ID, ClearExtensionsInputAction.LABEL, this.onSearchChange)\n\t\t\t];\n\t\t}\n\t\treturn this.primaryActions;\n\t}\n\n\tgetSecondaryActions(): IAction[] {\n\t\tif (!this.secondaryActions) {\n\t\t\tthis.secondaryActions = [\n\t\t\t\tthis.instantiationService.createInstance(ShowInstalledExtensionsAction, ShowInstalledExtensionsAction.ID, ShowInstalledExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowOutdatedExtensionsAction, ShowOutdatedExtensionsAction.ID, ShowOutdatedExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowEnabledExtensionsAction, ShowEnabledExtensionsAction.ID, ShowEnabledExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowDisabledExtensionsAction, ShowDisabledExtensionsAction.ID, ShowDisabledExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowBuiltInExtensionsAction, ShowBuiltInExtensionsAction.ID, ShowBuiltInExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowRecommendedExtensionsAction, ShowRecommendedExtensionsAction.ID, ShowRecommendedExtensionsAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ShowPopularExtensionsAction, ShowPopularExtensionsAction.ID, ShowPopularExtensionsAction.LABEL),\n\t\t\t\tnew Separator(),\n\t\t\t\tthis.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.install', localize('sort by installs', \"Sort By: Install Count\"), this.onSearchChange, 'installs'),\n\t\t\t\tthis.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.rating', localize('sort by rating', \"Sort By: Rating\"), this.onSearchChange, 'rating'),\n\t\t\t\tthis.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.name', localize('sort by name', \"Sort By: Name\"), this.onSearchChange, 'name'),\n\t\t\t\tnew Separator(),\n\t\t\t\tthis.instantiationService.createInstance(CheckForUpdatesAction, CheckForUpdatesAction.ID, CheckForUpdatesAction.LABEL),\n\t\t\t\t...(this.configurationService.getValue(AutoUpdateConfigurationKey) ? [this.instantiationService.createInstance(DisableAutoUpdateAction, DisableAutoUpdateAction.ID, DisableAutoUpdateAction.LABEL)] : [this.instantiationService.createInstance(UpdateAllAction, UpdateAllAction.ID, UpdateAllAction.LABEL), this.instantiationService.createInstance(EnableAutoUpdateAction, EnableAutoUpdateAction.ID, EnableAutoUpdateAction.LABEL)]),\n\t\t\t\tthis.instantiationService.createInstance(InstallVSIXAction, InstallVSIXAction.ID, InstallVSIXAction.LABEL),\n\t\t\t\tnew Separator(),\n\t\t\t\tthis.instantiationService.createInstance(DisableAllAction, DisableAllAction.ID, DisableAllAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(EnableAllAction, EnableAllAction.ID, EnableAllAction.LABEL)\n\t\t\t];\n\t\t}\n\n\t\treturn this.secondaryActions;\n\t}\n\n\tsearch(value: string): void {\n\t\tconst event = new Event('input', { bubbles: true }) as SearchInputEvent;\n\t\tevent.immediate = true;\n\n\t\tthis.searchBox.setValue(value);\n\t}\n\n\tprivate triggerSearch(immediate = false): void {\n\t\tthis.searchDelayer.trigger(() => this.doSearch(), immediate || !this.searchBox.getValue() ? 0 : 500).then(undefined, err => this.onError(err));\n\t}\n\n\tprivate normalizedQuery(): string {\n\t\treturn this.searchBox.getValue().replace(/@category/g, 'category').replace(/@tag:/g, 'tag:').replace(/@ext:/g, 'ext:');\n\t}\n\n\tprotected saveState(): void {\n\t\tconst value = this.searchBox.getValue();\n\t\tif (ExtensionsListView.isInstalledExtensionsQuery(value)) {\n\t\t\tthis.searchViewletState['query.value'] = value;\n\t\t} else {\n\t\t\tthis.searchViewletState['query.value'] = '';\n\t\t}\n\t\tsuper.saveState();\n\t}\n\n\tprivate doSearch(): Promise<void> {\n\t\tconst value = this.normalizedQuery();\n\t\tthis.searchExtensionsContextKey.set(!!value);\n\t\tthis.searchBuiltInExtensionsContextKey.set(ExtensionsListView.isBuiltInExtensionsQuery(value));\n\t\tthis.groupByServersContextKey.set(ExtensionsListView.isGroupByServersExtensionsQuery(value));\n\t\tthis.recommendedExtensionsContextKey.set(ExtensionsListView.isRecommendedExtensionsQuery(value));\n\t\tthis.nonEmptyWorkspaceContextKey.set(this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY);\n\n\t\tif (value) {\n\t\t\treturn this.progress(Promise.all(this.panels.map(view =>\n\t\t\t\t(<ExtensionsListView>view).show(this.normalizedQuery())\n\t\t\t\t\t.then(model => this.alertSearchResult(model.length, view.id))\n\t\t\t))).then(() => undefined);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected onDidAddViews(added: IAddedViewDescriptorRef[]): ViewletPanel[] {\n\t\tconst addedViews = super.onDidAddViews(added);\n\t\tthis.progress(Promise.all(addedViews.map(addedView =>\n\t\t\t(<ExtensionsListView>addedView).show(this.normalizedQuery())\n\t\t\t\t.then(model => this.alertSearchResult(model.length, addedView.id))\n\t\t)));\n\t\treturn addedViews;\n\t}\n\n\tprivate alertSearchResult(count: number, viewId: string): void {\n\t\tswitch (count) {\n\t\t\tcase 0:\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (viewIdNameMappings[viewId]) {\n\t\t\t\t\talert(localize('extensionFoundInSection', \"1 extension found in the {0} section.\", viewIdNameMappings[viewId]));\n\t\t\t\t} else {\n\t\t\t\t\talert(localize('extensionFound', \"1 extension found.\"));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (viewIdNameMappings[viewId]) {\n\t\t\t\t\talert(localize('extensionsFoundInSection', \"{0} extensions found in the {1} section.\", count, viewIdNameMappings[viewId]));\n\t\t\t\t} else {\n\t\t\t\t\talert(localize('extensionsFound', \"{0} extensions found.\", count));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate count(): number {\n\t\treturn this.panels.reduce((count, view) => (<ExtensionsListView>view).count() + count, 0);\n\t}\n\n\tprivate focusListView(): void {\n\t\tif (this.count() > 0) {\n\t\t\tthis.panels[0].focus();\n\t\t}\n\t}\n\n\tprivate onViewletOpen(viewlet: IViewlet): void {\n\t\tif (!viewlet || viewlet.getId() === VIEWLET_ID) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue<boolean>(CloseExtensionDetailsOnViewChangeKey)) {\n\t\t\tconst promises = this.editorGroupService.groups.map(group => {\n\t\t\t\tconst editors = group.editors.filter(input => input instanceof ExtensionsInput);\n\t\t\t\tconst promises = editors.map(editor => group.closeEditor(editor));\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t});\n\n\t\t\tPromise.all(promises);\n\t\t}\n\t}\n\n\tprivate progress<T>(promise: Promise<T>): Promise<T> {\n\t\treturn this.progressService.withProgress({ location: ProgressLocation.Extensions }, () => promise);\n\t}\n\n\tprivate onError(err: Error): void {\n\t\tif (isPromiseCanceledError(err)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = err && err.message || '';\n\n\t\tif (/ECONNREFUSED/.test(message)) {\n\t\t\tconst error = createErrorWithActions(localize('suggestProxyError', \"Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting.\"), {\n\t\t\t\tactions: [\n\t\t\t\t\tthis.instantiationService.createInstance(OpenGlobalSettingsAction, OpenGlobalSettingsAction.ID, OpenGlobalSettingsAction.LABEL)\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.notificationService.error(error);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.error(err);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tsuper.dispose();\n\t}\n}\n\nexport class StatusUpdater implements IWorkbenchContribution {\n\n\tprivate disposables: IDisposable[];\n\tprivate badgeHandle: IDisposable;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService\n\t) {\n\t\textensionsWorkbenchService.onChange(this.onServiceChange, this, this.disposables);\n\t}\n\n\tprivate onServiceChange(): void {\n\n\t\tdispose(this.badgeHandle);\n\n\t\tif (this.extensionsWorkbenchService.local.some(e => e.state === ExtensionState.Installing)) {\n\t\t\tthis.badgeHandle = this.activityService.showActivity(VIEWLET_ID, new ProgressBadge(() => localize('extensions', \"Extensions\")), 'extensions-badge progress-badge');\n\t\t\treturn;\n\t\t}\n\n\t\tconst outdated = this.extensionsWorkbenchService.local.reduce((r, e) => r + (e.outdated && e.enablementState !== EnablementState.Disabled && e.enablementState !== EnablementState.WorkspaceDisabled ? 1 : 0), 0);\n\t\tif (outdated > 0) {\n\t\t\tconst badge = new NumberBadge(outdated, n => localize('outdatedExtensions', '{0} Outdated Extensions', n));\n\t\t\tthis.badgeHandle = this.activityService.showActivity(VIEWLET_ID, badge, 'extensions-badge count-badge');\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tdispose(this.badgeHandle);\n\t}\n}\n\nexport class MaliciousExtensionChecker implements IWorkbenchContribution {\n\n\tprivate disposables: IDisposable[];\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionsManagementService: IExtensionManagementService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService\n\t) {\n\t\tif (!this.environmentService.disableExtensions) {\n\t\t\tthis.loopCheckForMaliciousExtensions();\n\t\t}\n\t}\n\n\tprivate loopCheckForMaliciousExtensions(): void {\n\t\tthis.checkForMaliciousExtensions()\n\t\t\t.then(() => timeout(1000 * 60 * 5)) // every five minutes\n\t\t\t.then(() => this.loopCheckForMaliciousExtensions());\n\t}\n\n\tprivate checkForMaliciousExtensions(): Promise<void> {\n\t\treturn this.extensionsManagementService.getExtensionsReport().then(report => {\n\t\t\tconst maliciousSet = getMaliciousExtensionsSet(report);\n\n\t\t\treturn this.extensionsManagementService.getInstalled(ExtensionType.User).then(installed => {\n\t\t\t\tconst maliciousExtensions = installed\n\t\t\t\t\t.filter(e => maliciousSet.has(e.identifier.id));\n\n\t\t\t\tif (maliciousExtensions.length) {\n\t\t\t\t\treturn Promise.all(maliciousExtensions.map(e => this.extensionsManagementService.uninstall(e, true).then(() => {\n\t\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\t\t\tlocalize('malicious warning', \"We have uninstalled '{0}' which was reported to be problematic.\", e.identifier.id),\n\t\t\t\t\t\t\t[{\n\t\t\t\t\t\t\t\tlabel: localize('reloadNow', \"Reload Now\"),\n\t\t\t\t\t\t\t\trun: () => this.windowService.reloadWindow()\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t\t);\n\t\t\t\t\t})));\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t}).then(() => undefined);\n\t\t}, err => this.logService.error(err));\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n"]}]}