{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar nls = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar keybindingsEditorModel_1 = require(\"vs/workbench/services/preferences/common/keybindingsEditorModel\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar PreferencesEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesEditorInput, _super);\n    function PreferencesEditorInput() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PreferencesEditorInput.prototype.getTypeId = function () {\n        return PreferencesEditorInput.ID;\n    };\n    PreferencesEditorInput.prototype.getTitle = function (verbosity) {\n        return this.master.getTitle(verbosity);\n    };\n    PreferencesEditorInput.ID = 'workbench.editorinputs.preferencesEditorInput';\n    return PreferencesEditorInput;\n}(editor_1.SideBySideEditorInput));\nexports.PreferencesEditorInput = PreferencesEditorInput;\nvar DefaultPreferencesEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultPreferencesEditorInput, _super);\n    function DefaultPreferencesEditorInput(defaultSettingsResource, textModelResolverService) {\n        return _super.call(this, nls.localize('settingsEditorName', \"Default Settings\"), '', defaultSettingsResource, textModelResolverService) || this;\n    }\n    DefaultPreferencesEditorInput.prototype.getTypeId = function () {\n        return DefaultPreferencesEditorInput.ID;\n    };\n    DefaultPreferencesEditorInput.prototype.matches = function (other) {\n        if (other instanceof DefaultPreferencesEditorInput) {\n            return true;\n        }\n        if (!_super.prototype.matches.call(this, other)) {\n            return false;\n        }\n        return true;\n    };\n    DefaultPreferencesEditorInput.ID = 'workbench.editorinputs.defaultpreferences';\n    DefaultPreferencesEditorInput = tslib_1.__decorate([\n        tslib_1.__param(1, resolverService_1.ITextModelService)\n    ], DefaultPreferencesEditorInput);\n    return DefaultPreferencesEditorInput;\n}(resourceEditorInput_1.ResourceEditorInput));\nexports.DefaultPreferencesEditorInput = DefaultPreferencesEditorInput;\nvar KeybindingsEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(KeybindingsEditorInput, _super);\n    function KeybindingsEditorInput(instantiationService) {\n        var _this = _super.call(this) || this;\n        _this.keybindingsModel = instantiationService.createInstance(keybindingsEditorModel_1.KeybindingsEditorModel, platform_1.OS);\n        return _this;\n    }\n    KeybindingsEditorInput.prototype.getTypeId = function () {\n        return KeybindingsEditorInput.ID;\n    };\n    KeybindingsEditorInput.prototype.getName = function () {\n        return nls.localize('keybindingsInputName', \"Keyboard Shortcuts\");\n    };\n    KeybindingsEditorInput.prototype.resolve = function () {\n        return Promise.resolve(this.keybindingsModel);\n    };\n    KeybindingsEditorInput.prototype.matches = function (otherInput) {\n        return otherInput instanceof KeybindingsEditorInput;\n    };\n    KeybindingsEditorInput.ID = 'workbench.input.keybindings';\n    KeybindingsEditorInput = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService)\n    ], KeybindingsEditorInput);\n    return KeybindingsEditorInput;\n}(editor_1.EditorInput));\nexports.KeybindingsEditorInput = KeybindingsEditorInput;\nvar SettingsEditor2Input = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsEditor2Input, _super);\n    function SettingsEditor2Input(_preferencesService) {\n        var _this = _super.call(this) || this;\n        _this.resource = uri_1.URI.from({\n            scheme: 'vscode-settings',\n            path: \"settingseditor\"\n        });\n        _this._settingsModel = _preferencesService.createSettings2EditorModel();\n        return _this;\n    }\n    SettingsEditor2Input.prototype.matches = function (otherInput) {\n        return otherInput instanceof SettingsEditor2Input;\n    };\n    SettingsEditor2Input.prototype.getTypeId = function () {\n        return SettingsEditor2Input.ID;\n    };\n    SettingsEditor2Input.prototype.getName = function () {\n        return nls.localize('settingsEditor2InputName', \"Settings\");\n    };\n    SettingsEditor2Input.prototype.resolve = function () {\n        return Promise.resolve(this._settingsModel);\n    };\n    SettingsEditor2Input.prototype.getResource = function () {\n        return this.resource;\n    };\n    SettingsEditor2Input.ID = 'workbench.input.settings2';\n    SettingsEditor2Input = tslib_1.__decorate([\n        tslib_1.__param(0, preferences_1.IPreferencesService)\n    ], SettingsEditor2Input);\n    return SettingsEditor2Input;\n}(editor_1.EditorInput));\nexports.SettingsEditor2Input = SettingsEditor2Input;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { EditorInput, SideBySideEditorInput, Verbosity } from 'vs/workbench/common/editor';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { KeybindingsEditorModel } from 'vs/workbench/services/preferences/common/keybindingsEditorModel';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\n\nexport class PreferencesEditorInput extends SideBySideEditorInput {\n\tstatic readonly ID: string = 'workbench.editorinputs.preferencesEditorInput';\n\n\tgetTypeId(): string {\n\t\treturn PreferencesEditorInput.ID;\n\t}\n\n\tgetTitle(verbosity: Verbosity): string | null {\n\t\treturn this.master.getTitle(verbosity);\n\t}\n}\n\nexport class DefaultPreferencesEditorInput extends ResourceEditorInput {\n\tstatic readonly ID = 'workbench.editorinputs.defaultpreferences';\n\tconstructor(defaultSettingsResource: URI,\n\t\t@ITextModelService textModelResolverService: ITextModelService\n\t) {\n\t\tsuper(nls.localize('settingsEditorName', \"Default Settings\"), '', defaultSettingsResource, textModelResolverService);\n\t}\n\n\tgetTypeId(): string {\n\t\treturn DefaultPreferencesEditorInput.ID;\n\t}\n\n\tmatches(other: any): boolean {\n\t\tif (other instanceof DefaultPreferencesEditorInput) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!super.matches(other)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class KeybindingsEditorInput extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.input.keybindings';\n\treadonly keybindingsModel: KeybindingsEditorModel;\n\n\tconstructor(@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis.keybindingsModel = instantiationService.createInstance(KeybindingsEditorModel, OS);\n\t}\n\n\tgetTypeId(): string {\n\t\treturn KeybindingsEditorInput.ID;\n\t}\n\n\tgetName(): string {\n\t\treturn nls.localize('keybindingsInputName', \"Keyboard Shortcuts\");\n\t}\n\n\tresolve(): Promise<KeybindingsEditorModel> {\n\t\treturn Promise.resolve(this.keybindingsModel);\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\treturn otherInput instanceof KeybindingsEditorInput;\n\t}\n}\n\nexport class SettingsEditor2Input extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.input.settings2';\n\tprivate readonly _settingsModel: Settings2EditorModel;\n\tprivate resource: URI = URI.from({\n\t\tscheme: 'vscode-settings',\n\t\tpath: `settingseditor`\n\t});\n\n\tconstructor(\n\t\t@IPreferencesService _preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\n\t\tthis._settingsModel = _preferencesService.createSettings2EditorModel();\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\treturn otherInput instanceof SettingsEditor2Input;\n\t}\n\n\tgetTypeId(): string {\n\t\treturn SettingsEditor2Input.ID;\n\t}\n\n\tgetName(): string {\n\t\treturn nls.localize('settingsEditor2InputName', \"Settings\");\n\t}\n\n\tresolve(): Promise<Settings2EditorModel> {\n\t\treturn Promise.resolve(this._settingsModel);\n\t}\n\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n}\n"]}]}