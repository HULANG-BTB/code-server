{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/event\", \"vs/platform/log/common/log\", \"vs/base/common/arrays\"], function (require, exports, lifecycle_1, event_1, log_1, arrays_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class SCMInput {\n        constructor() {\n            this._value = '';\n            this._onDidChange = new event_1.Emitter();\n            this._placeholder = '';\n            this._onDidChangePlaceholder = new event_1.Emitter();\n            this._visible = true;\n            this._onDidChangeVisibility = new event_1.Emitter();\n            this._validateInput = () => Promise.resolve(undefined);\n            this._onDidChangeValidateInput = new event_1.Emitter();\n        }\n        get value() {\n            return this._value;\n        }\n        set value(value) {\n            this._value = value;\n            this._onDidChange.fire(value);\n        }\n        get onDidChange() { return this._onDidChange.event; }\n        get placeholder() {\n            return this._placeholder;\n        }\n        set placeholder(placeholder) {\n            this._placeholder = placeholder;\n            this._onDidChangePlaceholder.fire(placeholder);\n        }\n        get onDidChangePlaceholder() { return this._onDidChangePlaceholder.event; }\n        get visible() {\n            return this._visible;\n        }\n        set visible(visible) {\n            this._visible = visible;\n            this._onDidChangeVisibility.fire(visible);\n        }\n        get onDidChangeVisibility() { return this._onDidChangeVisibility.event; }\n        get validateInput() {\n            return this._validateInput;\n        }\n        set validateInput(validateInput) {\n            this._validateInput = validateInput;\n            this._onDidChangeValidateInput.fire();\n        }\n        get onDidChangeValidateInput() { return this._onDidChangeValidateInput.event; }\n    }\n    class SCMRepository {\n        constructor(provider, disposable) {\n            this.provider = provider;\n            this.disposable = disposable;\n            this._onDidFocus = new event_1.Emitter();\n            this.onDidFocus = this._onDidFocus.event;\n            this._selected = false;\n            this._onDidChangeSelection = new event_1.Emitter();\n            this.onDidChangeSelection = this._onDidChangeSelection.event;\n            this.input = new SCMInput();\n        }\n        get selected() {\n            return this._selected;\n        }\n        focus() {\n            this._onDidFocus.fire();\n        }\n        setSelected(selected) {\n            this._selected = selected;\n            this._onDidChangeSelection.fire(selected);\n        }\n        dispose() {\n            this.disposable.dispose();\n            this.provider.dispose();\n        }\n    }\n    let SCMService = class SCMService {\n        constructor(logService) {\n            this.logService = logService;\n            this._providerIds = new Set();\n            this._repositories = [];\n            this._selectedRepositories = [];\n            this._onDidChangeSelectedRepositories = new event_1.Emitter();\n            this.onDidChangeSelectedRepositories = this._onDidChangeSelectedRepositories.event;\n            this._onDidAddProvider = new event_1.Emitter();\n            this._onDidRemoveProvider = new event_1.Emitter();\n        }\n        get repositories() { return [...this._repositories]; }\n        get selectedRepositories() { return [...this._selectedRepositories]; }\n        get onDidAddRepository() { return this._onDidAddProvider.event; }\n        get onDidRemoveRepository() { return this._onDidRemoveProvider.event; }\n        registerSCMProvider(provider) {\n            this.logService.trace('SCMService#registerSCMProvider');\n            if (this._providerIds.has(provider.id)) {\n                throw new Error(`SCM Provider ${provider.id} already exists.`);\n            }\n            this._providerIds.add(provider.id);\n            const disposable = lifecycle_1.toDisposable(() => {\n                const index = this._repositories.indexOf(repository);\n                if (index < 0) {\n                    return;\n                }\n                selectedDisposable.dispose();\n                this._providerIds.delete(provider.id);\n                this._repositories.splice(index, 1);\n                this._onDidRemoveProvider.fire(repository);\n                this.onDidChangeSelection();\n            });\n            const repository = new SCMRepository(provider, disposable);\n            const selectedDisposable = repository.onDidChangeSelection(this.onDidChangeSelection, this);\n            this._repositories.push(repository);\n            this._onDidAddProvider.fire(repository);\n            // automatically select the first repository\n            if (this._repositories.length === 1) {\n                repository.setSelected(true);\n            }\n            return repository;\n        }\n        onDidChangeSelection() {\n            const selectedRepositories = this._repositories.filter(r => r.selected);\n            if (arrays_1.equals(this._selectedRepositories, selectedRepositories)) {\n                return;\n            }\n            this._selectedRepositories = this._repositories.filter(r => r.selected);\n            this._onDidChangeSelectedRepositories.fire(this.selectedRepositories);\n        }\n    };\n    SCMService = __decorate([\n        __param(0, log_1.ILogService)\n    ], SCMService);\n    exports.SCMService = SCMService;\n});\n",null]}