{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textResourceEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textResourceEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar textEditorModel_1 = require(\"vs/workbench/common/editor/textEditorModel\");\nvar untitledEditorInput_1 = require(\"vs/workbench/common/editor/untitledEditorInput\");\nvar textEditor_1 = require(\"vs/workbench/browser/parts/editor/textEditor\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar event_1 = require(\"vs/base/common/event\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nvar AbstractTextResourceEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractTextResourceEditor, _super);\n    function AbstractTextResourceEditor(id, telemetryService, instantiationService, storageService, configurationService, themeService, editorGroupService, textFileService, editorService, windowService) {\n        return _super.call(this, id, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService) || this;\n    }\n    AbstractTextResourceEditor.prototype.getTitle = function () {\n        if (this.input) {\n            return this.input.getName();\n        }\n        return nls.localize('textEditor', \"Text Editor\");\n    };\n    AbstractTextResourceEditor.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        // Remember view settings if input changes\n        this.saveTextResourceEditorViewState(this.input);\n        // Set input and resolve\n        return _super.prototype.setInput.call(this, input, options, token).then(function () {\n            return input.resolve().then(function (resolvedModel) {\n                // Check for cancellation\n                if (token.isCancellationRequested) {\n                    return undefined;\n                }\n                // Assert Model instance\n                if (!(resolvedModel instanceof textEditorModel_1.BaseTextEditorModel)) {\n                    return Promise.reject(new Error('Unable to open file as text'));\n                }\n                // Set Editor Model\n                var textEditor = _this.getControl();\n                var textEditorModel = resolvedModel.textEditorModel;\n                textEditor.setModel(textEditorModel);\n                // Apply Options from TextOptions\n                var optionsGotApplied = false;\n                var textOptions = options;\n                if (textOptions && types.isFunction(textOptions.apply)) {\n                    optionsGotApplied = textOptions.apply(textEditor, editorCommon_1.ScrollType.Immediate);\n                }\n                // Otherwise restore View State\n                if (!optionsGotApplied) {\n                    _this.restoreTextResourceEditorViewState(input);\n                }\n                return undefined;\n            });\n        });\n    };\n    AbstractTextResourceEditor.prototype.restoreTextResourceEditorViewState = function (input) {\n        if (input instanceof untitledEditorInput_1.UntitledEditorInput || input instanceof resourceEditorInput_1.ResourceEditorInput) {\n            var viewState = this.loadTextEditorViewState(input.getResource());\n            if (viewState) {\n                this.getControl().restoreViewState(viewState);\n            }\n        }\n    };\n    AbstractTextResourceEditor.prototype.setOptions = function (options) {\n        var textOptions = options;\n        if (textOptions && types.isFunction(textOptions.apply)) {\n            textOptions.apply(this.getControl(), editorCommon_1.ScrollType.Smooth);\n        }\n    };\n    AbstractTextResourceEditor.prototype.getConfigurationOverrides = function () {\n        var options = _super.prototype.getConfigurationOverrides.call(this);\n        options.readOnly = !(this.input instanceof untitledEditorInput_1.UntitledEditorInput); // all resource editors are readonly except for the untitled one;\n        return options;\n    };\n    AbstractTextResourceEditor.prototype.getAriaLabel = function () {\n        var input = this.input;\n        var isReadonly = !(this.input instanceof untitledEditorInput_1.UntitledEditorInput);\n        var ariaLabel;\n        var inputName = input && input.getName();\n        if (isReadonly) {\n            ariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text editor.\");\n        }\n        else {\n            ariaLabel = inputName ? nls.localize('untitledFileEditorWithInputAriaLabel', \"{0}. Untitled file text editor.\", inputName) : nls.localize('untitledFileEditorAriaLabel', \"Untitled file text editor.\");\n        }\n        return ariaLabel;\n    };\n    /**\n     * Reveals the last line of this editor if it has a model set.\n     */\n    AbstractTextResourceEditor.prototype.revealLastLine = function () {\n        var codeEditor = this.getControl();\n        var model = codeEditor.getModel();\n        if (model) {\n            var lastLine = model.getLineCount();\n            codeEditor.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, editorCommon_1.ScrollType.Smooth);\n        }\n    };\n    AbstractTextResourceEditor.prototype.clearInput = function () {\n        // Keep editor view state in settings to restore when coming back\n        this.saveTextResourceEditorViewState(this.input);\n        // Clear Model\n        this.getControl().setModel(null);\n        _super.prototype.clearInput.call(this);\n    };\n    AbstractTextResourceEditor.prototype.saveState = function () {\n        // Save View State (only for untitled)\n        if (this.input instanceof untitledEditorInput_1.UntitledEditorInput) {\n            this.saveTextResourceEditorViewState(this.input);\n        }\n        _super.prototype.saveState.call(this);\n    };\n    AbstractTextResourceEditor.prototype.saveTextResourceEditorViewState = function (input) {\n        var _this = this;\n        if (!(input instanceof untitledEditorInput_1.UntitledEditorInput) && !(input instanceof resourceEditorInput_1.ResourceEditorInput)) {\n            return; // only enabled for untitled and resource inputs\n        }\n        var resource = input.getResource();\n        // Clear view state if input is disposed\n        if (input.isDisposed()) {\n            _super.prototype.clearTextEditorViewState.call(this, [resource]);\n        }\n        // Otherwise save it\n        else {\n            _super.prototype.saveTextEditorViewState.call(this, resource);\n            // Make sure to clean up when the input gets disposed\n            event_1.Event.once(input.onDispose)(function () {\n                _super.prototype.clearTextEditorViewState.call(_this, [resource]);\n            });\n        }\n    };\n    AbstractTextResourceEditor = tslib_1.__decorate([\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, textfiles_1.ITextFileService),\n        tslib_1.__param(8, editorService_1.IEditorService),\n        tslib_1.__param(9, windows_1.IWindowService)\n    ], AbstractTextResourceEditor);\n    return AbstractTextResourceEditor;\n}(textEditor_1.BaseTextEditor));\nexports.AbstractTextResourceEditor = AbstractTextResourceEditor;\nvar TextResourceEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(TextResourceEditor, _super);\n    function TextResourceEditor(telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService) {\n        return _super.call(this, TextResourceEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, editorGroupService, textFileService, editorService, windowService) || this;\n    }\n    TextResourceEditor.ID = 'workbench.editors.textResourceEditor';\n    TextResourceEditor = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, editorService_1.IEditorService),\n        tslib_1.__param(7, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(8, windows_1.IWindowService)\n    ], TextResourceEditor);\n    return TextResourceEditor;\n}(AbstractTextResourceEditor));\nexports.TextResourceEditor = TextResourceEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textResourceEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textResourceEditor.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,4CAA8C;AAI9C,sFAAqF;AACrF,8EAAiF;AACjF,sFAAqF;AACrF,2EAA8E;AAC9E,oEAA2E;AAC3E,8DAAqE;AACrE,yFAAoG;AACpG,gFAAuF;AACvF,sEAAsE;AACtE,6EAAmF;AACnF,8CAA6C;AAC7C,8DAA2D;AAC3D,+FAA+F;AAE/F,mFAAmF;AACnF,8DAAoE;AAEpE;;;GAGG;AACH;IAAgD,sDAAc;IAE7D,oCACC,EAAU,EACS,gBAAmC,EAC/B,oBAA2C,EACjD,cAA+B,EACb,oBAAuD,EAC3E,YAA2B,EACpB,kBAAwC,EAC5C,eAAiC,EACnC,aAA6B,EAC7B,aAA6B;eAE7C,kBAAM,EAAE,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,cAAc,EAAE,oBAAoB,EAAE,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,kBAAkB,EAAE,aAAa,CAAC;IACzK,CAAC;IAED,6CAAQ,GAAR;QACC,IAAI,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,OAAO,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,6CAAQ,GAAR,UAAS,KAAkB,EAAE,OAAsB,EAAE,KAAwB;QAA7E,iBAuCC;QArCA,0CAA0C;QAC1C,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjD,wBAAwB;QACxB,OAAO,iBAAM,QAAQ,YAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC;YACjD,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,aAA0B;gBAEtD,yBAAyB;gBACzB,IAAI,KAAK,CAAC,uBAAuB,EAAE;oBAClC,OAAO,SAAS,CAAC;iBACjB;gBAED,wBAAwB;gBACxB,IAAI,CAAC,CAAC,aAAa,YAAY,qCAAmB,CAAC,EAAE;oBACpD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;iBAChE;gBAED,mBAAmB;gBACnB,IAAM,UAAU,GAAG,KAAI,CAAC,UAAU,EAAE,CAAC;gBACrC,IAAM,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC;gBACtD,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;gBAErC,iCAAiC;gBACjC,IAAI,iBAAiB,GAAG,KAAK,CAAC;gBAC9B,IAAM,WAAW,GAAsB,OAAO,CAAC;gBAC/C,IAAI,WAAW,IAAI,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;oBACvD,iBAAiB,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,yBAAU,CAAC,SAAS,CAAC,CAAC;iBACxE;gBAED,+BAA+B;gBAC/B,IAAI,CAAC,iBAAiB,EAAE;oBACvB,KAAI,CAAC,kCAAkC,CAAC,KAAK,CAAC,CAAC;iBAC/C;gBAED,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,uEAAkC,GAA1C,UAA2C,KAAkB;QAC5D,IAAI,KAAK,YAAY,yCAAmB,IAAI,KAAK,YAAY,yCAAmB,EAAE;YACjF,IAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YACpE,IAAI,SAAS,EAAE;gBACd,IAAI,CAAC,UAAU,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;aAC9C;SACD;IACF,CAAC;IAED,+CAAU,GAAV,UAAW,OAAsB;QAChC,IAAM,WAAW,GAAsB,OAAO,CAAC;QAC/C,IAAI,WAAW,IAAI,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACvD,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,yBAAU,CAAC,MAAM,CAAC,CAAC;SACxD;IACF,CAAC;IAES,8DAAyB,GAAnC;QACC,IAAM,OAAO,GAAG,iBAAM,yBAAyB,WAAE,CAAC;QAElD,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,yCAAmB,CAAC,CAAC,CAAC,iEAAiE;QAElI,OAAO,OAAO,CAAC;IAChB,CAAC;IAES,iDAAY,GAAtB;QACC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,yCAAmB,CAAC,CAAC;QAEhE,IAAI,SAAiB,CAAC;QACtB,IAAM,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAC3C,IAAI,UAAU,EAAE;YACf,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,kCAAkC,EAAE,4BAA4B,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,uBAAuB,CAAC,CAAC;SACrL;aAAM;YACN,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,sCAAsC,EAAE,iCAAiC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,4BAA4B,CAAC,CAAC;SACvM;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,mDAAc,GAAd;QACC,IAAM,UAAU,GAAgB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClD,IAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QAEpC,IAAI,KAAK,EAAE;YACV,IAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YACtC,UAAU,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,EAAE,yBAAU,CAAC,MAAM,CAAC,CAAC;SACjH;IACF,CAAC;IAED,+CAAU,GAAV;QAEC,iEAAiE;QACjE,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjD,cAAc;QACd,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEjC,iBAAM,UAAU,WAAE,CAAC;IACpB,CAAC;IAES,8CAAS,GAAnB;QAEC,sCAAsC;QACtC,IAAI,IAAI,CAAC,KAAK,YAAY,yCAAmB,EAAE;YAC9C,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjD;QAED,iBAAM,SAAS,WAAE,CAAC;IACnB,CAAC;IAEO,oEAA+B,GAAvC,UAAwC,KAAyB;QAAjE,iBAqBC;QApBA,IAAI,CAAC,CAAC,KAAK,YAAY,yCAAmB,CAAC,IAAI,CAAC,CAAC,KAAK,YAAY,yCAAmB,CAAC,EAAE;YACvF,OAAO,CAAC,gDAAgD;SACxD;QAED,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAErC,wCAAwC;QACxC,IAAI,KAAK,CAAC,UAAU,EAAE,EAAE;YACvB,iBAAM,wBAAwB,YAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3C;QAED,oBAAoB;aACf;YACJ,iBAAM,uBAAuB,YAAC,QAAQ,CAAC,CAAC;YAExC,qDAAqD;YACrD,aAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC3B,iBAAM,wBAAwB,aAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;SACH;IACF,CAAC;IAhKW,0BAA0B;QAIpC,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,yBAAe,CAAA;QACf,mBAAA,yDAAiC,CAAA;QACjC,mBAAA,4BAAa,CAAA;QACb,mBAAA,0CAAoB,CAAA;QACpB,mBAAA,4BAAgB,CAAA;QAChB,mBAAA,8BAAc,CAAA;QACd,mBAAA,wBAAc,CAAA;OAZJ,0BAA0B,CAiKtC;IAAD,iCAAC;CAAA,AAjKD,CAAgD,2BAAc,GAiK7D;AAjKY,gEAA0B;AAmKvC;IAAwC,8CAA0B;IAIjE,4BACoB,gBAAmC,EAC/B,oBAA2C,EACjD,cAA+B,EACb,oBAAuD,EAC3E,YAA2B,EACxB,eAAiC,EACnC,aAA6B,EACvB,kBAAwC,EAC9C,aAA6B;eAE7C,kBAAM,kBAAkB,CAAC,EAAE,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,cAAc,EAAE,oBAAoB,EAAE,YAAY,EAAE,kBAAkB,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,CAAC;IAC5L,CAAC;IAde,qBAAE,GAAG,sCAAsC,CAAC;IAFhD,kBAAkB;QAK5B,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,yBAAe,CAAA;QACf,mBAAA,yDAAiC,CAAA;QACjC,mBAAA,4BAAa,CAAA;QACb,mBAAA,4BAAgB,CAAA;QAChB,mBAAA,8BAAc,CAAA;QACd,mBAAA,0CAAoB,CAAA;QACpB,mBAAA,wBAAc,CAAA;OAbJ,kBAAkB,CAiB9B;IAAD,yBAAC;CAAA,AAjBD,CAAwC,0BAA0B,GAiBjE;AAjBY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { TextEditorOptions, EditorModel, EditorInput, EditorOptions } from 'vs/workbench/common/editor';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { UntitledEditorInput } from 'vs/workbench/common/editor/untitledEditorInput';\nimport { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { Event } from 'vs/base/common/event';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\n\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nexport class AbstractTextResourceEditor extends BaseTextEditor {\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(id, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService);\n\t}\n\n\tgetTitle(): string | null {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn nls.localize('textEditor', \"Text Editor\");\n\t}\n\n\tsetInput(input: EditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\n\t\t// Remember view settings if input changes\n\t\tthis.saveTextResourceEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\treturn super.setInput(input, options, token).then(() => {\n\t\t\treturn input.resolve().then((resolvedModel: EditorModel) => {\n\n\t\t\t\t// Check for cancellation\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Assert Model instance\n\t\t\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\t\t\treturn Promise.reject(new Error('Unable to open file as text'));\n\t\t\t\t}\n\n\t\t\t\t// Set Editor Model\n\t\t\t\tconst textEditor = this.getControl();\n\t\t\t\tconst textEditorModel = resolvedModel.textEditorModel;\n\t\t\t\ttextEditor.setModel(textEditorModel);\n\n\t\t\t\t// Apply Options from TextOptions\n\t\t\t\tlet optionsGotApplied = false;\n\t\t\t\tconst textOptions = <TextEditorOptions>options;\n\t\t\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\t\t\toptionsGotApplied = textOptions.apply(textEditor, ScrollType.Immediate);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise restore View State\n\t\t\t\tif (!optionsGotApplied) {\n\t\t\t\t\tthis.restoreTextResourceEditorViewState(input);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate restoreTextResourceEditorViewState(input: EditorInput) {\n\t\tif (input instanceof UntitledEditorInput || input instanceof ResourceEditorInput) {\n\t\t\tconst viewState = this.loadTextEditorViewState(input.getResource());\n\t\t\tif (viewState) {\n\t\t\t\tthis.getControl().restoreViewState(viewState);\n\t\t\t}\n\t\t}\n\t}\n\n\tsetOptions(options: EditorOptions): void {\n\t\tconst textOptions = <TextEditorOptions>options;\n\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\ttextOptions.apply(this.getControl(), ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\tconst options = super.getConfigurationOverrides();\n\n\t\toptions.readOnly = !(this.input instanceof UntitledEditorInput); // all resource editors are readonly except for the untitled one;\n\n\t\treturn options;\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\tconst input = this.input;\n\t\tconst isReadonly = !(this.input instanceof UntitledEditorInput);\n\n\t\tlet ariaLabel: string;\n\t\tconst inputName = input && input.getName();\n\t\tif (isReadonly) {\n\t\t\tariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text editor.\");\n\t\t} else {\n\t\t\tariaLabel = inputName ? nls.localize('untitledFileEditorWithInputAriaLabel', \"{0}. Untitled file text editor.\", inputName) : nls.localize('untitledFileEditorAriaLabel', \"Untitled file text editor.\");\n\t\t}\n\n\t\treturn ariaLabel;\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\trevealLastLine(): void {\n\t\tconst codeEditor = <ICodeEditor>this.getControl();\n\t\tconst model = codeEditor.getModel();\n\n\t\tif (model) {\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tcodeEditor.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, ScrollType.Smooth);\n\t\t}\n\t}\n\n\tclearInput(): void {\n\n\t\t// Keep editor view state in settings to restore when coming back\n\t\tthis.saveTextResourceEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\tsuper.clearInput();\n\t}\n\n\tprotected saveState(): void {\n\n\t\t// Save View State (only for untitled)\n\t\tif (this.input instanceof UntitledEditorInput) {\n\t\t\tthis.saveTextResourceEditorViewState(this.input);\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate saveTextResourceEditorViewState(input: EditorInput | null): void {\n\t\tif (!(input instanceof UntitledEditorInput) && !(input instanceof ResourceEditorInput)) {\n\t\t\treturn; // only enabled for untitled and resource inputs\n\t\t}\n\n\t\tconst resource = input.getResource();\n\n\t\t// Clear view state if input is disposed\n\t\tif (input.isDisposed()) {\n\t\t\tsuper.clearTextEditorViewState([resource]);\n\t\t}\n\n\t\t// Otherwise save it\n\t\telse {\n\t\t\tsuper.saveTextEditorViewState(resource);\n\n\t\t\t// Make sure to clean up when the input gets disposed\n\t\t\tEvent.once(input.onDispose)(() => {\n\t\t\t\tsuper.clearTextEditorViewState([resource]);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class TextResourceEditor extends AbstractTextResourceEditor {\n\n\tstatic readonly ID = 'workbench.editors.textResourceEditor';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(TextResourceEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, editorGroupService, textFileService, editorService, windowService);\n\t}\n}\n"]}]}