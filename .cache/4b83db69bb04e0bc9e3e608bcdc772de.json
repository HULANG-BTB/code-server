{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar async_1 = require(\"vs/base/common/async\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar performance_1 = require(\"vs/base/common/performance\");\nvar AbstractLifecycleService = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractLifecycleService, _super);\n    function AbstractLifecycleService(logService) {\n        var _this = _super.call(this) || this;\n        _this.logService = logService;\n        _this._onBeforeShutdown = _this._register(new event_1.Emitter());\n        _this._onWillShutdown = _this._register(new event_1.Emitter());\n        _this._onShutdown = _this._register(new event_1.Emitter());\n        _this._phase = lifecycle_2.LifecyclePhase.Starting;\n        _this.phaseWhen = new Map();\n        return _this;\n    }\n    Object.defineProperty(AbstractLifecycleService.prototype, \"onBeforeShutdown\", {\n        get: function () { return this._onBeforeShutdown.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractLifecycleService.prototype, \"onWillShutdown\", {\n        get: function () { return this._onWillShutdown.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractLifecycleService.prototype, \"onShutdown\", {\n        get: function () { return this._onShutdown.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractLifecycleService.prototype, \"startupKind\", {\n        get: function () { return this._startupKind; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractLifecycleService.prototype, \"phase\", {\n        get: function () { return this._phase; },\n        set: function (value) {\n            if (value < this.phase) {\n                throw new Error('Lifecycle cannot go backwards');\n            }\n            if (this._phase === value) {\n                return;\n            }\n            this.logService.trace(\"lifecycle: phase changed (value: \" + value + \")\");\n            this._phase = value;\n            performance_1.mark(\"LifecyclePhase/\" + lifecycle_2.LifecyclePhaseToString(value));\n            var barrier = this.phaseWhen.get(this._phase);\n            if (barrier) {\n                barrier.open();\n                this.phaseWhen.delete(this._phase);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractLifecycleService.prototype.when = function (phase) {\n        if (phase <= this._phase) {\n            return Promise.resolve();\n        }\n        var barrier = this.phaseWhen.get(phase);\n        if (!barrier) {\n            barrier = new async_1.Barrier();\n            this.phaseWhen.set(phase, barrier);\n        }\n        return barrier.wait();\n    };\n    AbstractLifecycleService = tslib_1.__decorate([\n        tslib_1.__param(0, log_1.ILogService)\n    ], AbstractLifecycleService);\n    return AbstractLifecycleService;\n}(lifecycle_1.Disposable));\nexports.AbstractLifecycleService = AbstractLifecycleService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAAsD;AACtD,8CAA+C;AAC/C,sDAAsD;AACtD,oEAAwK;AACxK,kDAAyD;AACzD,0DAAkD;AAElD;IAAuD,oDAAU;IAqBhE,kCACiC,UAAuB;QADxD,YAGC,iBAAO,SACP;QAHgC,gBAAU,GAAV,UAAU,CAAa;QAlBrC,uBAAiB,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAuB,CAAC,CAAC;QAGvE,qBAAe,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAqB,CAAC,CAAC;QAGnE,iBAAW,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAM7D,YAAM,GAAmB,0BAAc,CAAC,QAAQ,CAAC;QAGjD,eAAS,GAAG,IAAI,GAAG,EAA2B,CAAC;;IAMvD,CAAC;IApBD,sBAAI,sDAAgB;aAApB,cAAqD,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAG3F,sBAAI,oDAAc;aAAlB,cAAiD,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGrF,sBAAI,gDAAU;aAAd,cAAgC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGhE,sBAAI,iDAAW;aAAf,cAAiC,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;;;OAAA;IAG5D,sBAAI,2CAAK;aAAT,cAA8B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAUnD,UAAU,KAAqB;YAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACjD;YAED,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;gBAC1B,OAAO;aACP;YAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,sCAAoC,KAAK,MAAG,CAAC,CAAC;YAEpE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,kBAAI,CAAC,oBAAkB,kCAAsB,CAAC,KAAK,CAAG,CAAC,CAAC;YAExD,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,OAAO,EAAE;gBACZ,OAAO,CAAC,IAAI,EAAE,CAAC;gBACf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACnC;QACF,CAAC;;;OA7BkD;IA+BnD,uCAAI,GAAJ,UAAK,KAAqB;QACzB,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YACzB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SACzB;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,EAAE;YACb,OAAO,GAAG,IAAI,eAAO,EAAE,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACnC;QAED,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IA5DoB,wBAAwB;QAsB3C,mBAAA,iBAAW,CAAA;OAtBQ,wBAAwB,CA6D7C;IAAD,+BAAC;CAAA,AA7DD,CAAuD,sBAAU,GA6DhE;AA7DqB,4DAAwB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Barrier } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleService, BeforeShutdownEvent, WillShutdownEvent, StartupKind, LifecyclePhase, LifecyclePhaseToString } from 'vs/platform/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { mark } from 'vs/base/common/performance';\n\nexport abstract class AbstractLifecycleService extends Disposable implements ILifecycleService {\n\n\t_serviceBrand: any;\n\n\tprotected readonly _onBeforeShutdown = this._register(new Emitter<BeforeShutdownEvent>());\n\tget onBeforeShutdown(): Event<BeforeShutdownEvent> { return this._onBeforeShutdown.event; }\n\n\tprotected readonly _onWillShutdown = this._register(new Emitter<WillShutdownEvent>());\n\tget onWillShutdown(): Event<WillShutdownEvent> { return this._onWillShutdown.event; }\n\n\tprotected readonly _onShutdown = this._register(new Emitter<void>());\n\tget onShutdown(): Event<void> { return this._onShutdown.event; }\n\n\tprotected _startupKind: StartupKind;\n\tget startupKind(): StartupKind { return this._startupKind; }\n\n\tprivate _phase: LifecyclePhase = LifecyclePhase.Starting;\n\tget phase(): LifecyclePhase { return this._phase; }\n\n\tprivate phaseWhen = new Map<LifecyclePhase, Barrier>();\n\n\tconstructor(\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tset phase(value: LifecyclePhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error('Lifecycle cannot go backwards');\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\t\tmark(`LifecyclePhase/${LifecyclePhaseToString(value)}`);\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\twhen(phase: LifecyclePhase): Promise<any> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\treturn barrier.wait();\n\t}\n}"]}]}