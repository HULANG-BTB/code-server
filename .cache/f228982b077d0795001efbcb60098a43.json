{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/currentLineMarginHighlight/currentLineMarginHighlight.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/currentLineMarginHighlight/currentLineMarginHighlight.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./currentLineMarginHighlight\");\nvar dynamicViewOverlay_1 = require(\"vs/editor/browser/view/dynamicViewOverlay\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar CurrentLineMarginHighlightOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(CurrentLineMarginHighlightOverlay, _super);\n    function CurrentLineMarginHighlightOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._lineHeight = _this._context.configuration.editor.lineHeight;\n        _this._renderLineHighlight = _this._context.configuration.editor.viewInfo.renderLineHighlight;\n        _this._selectionIsEmpty = true;\n        _this._primaryCursorLineNumber = 1;\n        _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    CurrentLineMarginHighlightOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    CurrentLineMarginHighlightOverlay.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._lineHeight = this._context.configuration.editor.lineHeight;\n        }\n        if (e.viewInfo) {\n            this._renderLineHighlight = this._context.configuration.editor.viewInfo.renderLineHighlight;\n        }\n        if (e.layoutInfo) {\n            this._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n        }\n        return true;\n    };\n    CurrentLineMarginHighlightOverlay.prototype.onCursorStateChanged = function (e) {\n        var hasChanged = false;\n        var primaryCursorLineNumber = e.selections[0].positionLineNumber;\n        if (this._primaryCursorLineNumber !== primaryCursorLineNumber) {\n            this._primaryCursorLineNumber = primaryCursorLineNumber;\n            hasChanged = true;\n        }\n        var selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            return true;\n        }\n        return hasChanged;\n    };\n    CurrentLineMarginHighlightOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    CurrentLineMarginHighlightOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    CurrentLineMarginHighlightOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    CurrentLineMarginHighlightOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    CurrentLineMarginHighlightOverlay.prototype.prepareRender = function (ctx) {\n    };\n    CurrentLineMarginHighlightOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (lineNumber === this._primaryCursorLineNumber) {\n            var className = 'current-line';\n            if (this._shouldShowCurrentLine()) {\n                var paintedInContent = this._willRenderContentCurrentLine();\n                className = 'current-line current-line-margin' + (paintedInContent ? ' current-line-margin-both' : '');\n            }\n            return ('<div class=\"'\n                + className\n                + '\" style=\"width:'\n                + String(this._contentLeft)\n                + 'px; height:'\n                + String(this._lineHeight)\n                + 'px;\"></div>');\n        }\n        return '';\n    };\n    CurrentLineMarginHighlightOverlay.prototype._shouldShowCurrentLine = function () {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all'));\n    };\n    CurrentLineMarginHighlightOverlay.prototype._willRenderContentCurrentLine = function () {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty);\n    };\n    return CurrentLineMarginHighlightOverlay;\n}(dynamicViewOverlay_1.DynamicViewOverlay));\nexports.CurrentLineMarginHighlightOverlay = CurrentLineMarginHighlightOverlay;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var lineHighlight = theme.getColor(editorColorRegistry_1.editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { background-color: \" + lineHighlight + \"; border: none; }\");\n    }\n    else {\n        var lineHighlightBorder = theme.getColor(editorColorRegistry_1.editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid \" + lineHighlightBorder + \"; }\");\n        }\n        if (theme.type === 'hc') {\n            collector.addRule(\".monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }\");\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/currentLineMarginHighlight/currentLineMarginHighlight.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/currentLineMarginHighlight/currentLineMarginHighlight.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./currentLineMarginHighlight';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { editorLineHighlight, editorLineHighlightBorder } from 'vs/editor/common/view/editorColorRegistry';\nimport { RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\n\nexport class CurrentLineMarginHighlightOverlay extends DynamicViewOverlay {\n\tprivate readonly _context: ViewContext;\n\tprivate _lineHeight: number;\n\tprivate _renderLineHighlight: 'none' | 'gutter' | 'line' | 'all';\n\tprivate _selectionIsEmpty: boolean;\n\tprivate _primaryCursorLineNumber: number;\n\tprivate _contentLeft: number;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\tthis._renderLineHighlight = this._context.configuration.editor.viewInfo.renderLineHighlight;\n\n\t\tthis._selectionIsEmpty = true;\n\t\tthis._primaryCursorLineNumber = 1;\n\t\tthis._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\t}\n\t\tif (e.viewInfo) {\n\t\t\tthis._renderLineHighlight = this._context.configuration.editor.viewInfo.renderLineHighlight;\n\t\t}\n\t\tif (e.layoutInfo) {\n\t\t\tthis._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tlet hasChanged = false;\n\n\t\tconst primaryCursorLineNumber = e.selections[0].positionLineNumber;\n\t\tif (this._primaryCursorLineNumber !== primaryCursorLineNumber) {\n\t\t\tthis._primaryCursorLineNumber = primaryCursorLineNumber;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst selectionIsEmpty = e.selections[0].isEmpty();\n\t\tif (this._selectionIsEmpty !== selectionIsEmpty) {\n\t\t\tthis._selectionIsEmpty = selectionIsEmpty;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn hasChanged;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (lineNumber === this._primaryCursorLineNumber) {\n\t\t\tlet className = 'current-line';\n\t\t\tif (this._shouldShowCurrentLine()) {\n\t\t\t\tconst paintedInContent = this._willRenderContentCurrentLine();\n\t\t\t\tclassName = 'current-line current-line-margin' + (paintedInContent ? ' current-line-margin-both' : '');\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t'<div class=\"'\n\t\t\t\t+ className\n\t\t\t\t+ '\" style=\"width:'\n\t\t\t\t+ String(this._contentLeft)\n\t\t\t\t+ 'px; height:'\n\t\t\t\t+ String(this._lineHeight)\n\t\t\t\t+ 'px;\"></div>'\n\t\t\t);\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate _shouldShowCurrentLine(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n\t\t);\n\t}\n\n\tprivate _willRenderContentCurrentLine(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n\t\t\t&& this._selectionIsEmpty\n\t\t);\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst lineHighlight = theme.getColor(editorLineHighlight);\n\tif (lineHighlight) {\n\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n\t} else {\n\t\tconst lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\t\tif (lineHighlightBorder) {\n\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t}\n\t\tif (theme.type === 'hc') {\n\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n\t\t}\n\t}\n});\n"]}]}