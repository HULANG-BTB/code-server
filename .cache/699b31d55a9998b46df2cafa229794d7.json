{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _a;\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"Dollar\"] = 0] = \"Dollar\";\n    TokenType[TokenType[\"Colon\"] = 1] = \"Colon\";\n    TokenType[TokenType[\"Comma\"] = 2] = \"Comma\";\n    TokenType[TokenType[\"CurlyOpen\"] = 3] = \"CurlyOpen\";\n    TokenType[TokenType[\"CurlyClose\"] = 4] = \"CurlyClose\";\n    TokenType[TokenType[\"Backslash\"] = 5] = \"Backslash\";\n    TokenType[TokenType[\"Forwardslash\"] = 6] = \"Forwardslash\";\n    TokenType[TokenType[\"Pipe\"] = 7] = \"Pipe\";\n    TokenType[TokenType[\"Int\"] = 8] = \"Int\";\n    TokenType[TokenType[\"VariableName\"] = 9] = \"VariableName\";\n    TokenType[TokenType[\"Format\"] = 10] = \"Format\";\n    TokenType[TokenType[\"Plus\"] = 11] = \"Plus\";\n    TokenType[TokenType[\"Dash\"] = 12] = \"Dash\";\n    TokenType[TokenType[\"QuestionMark\"] = 13] = \"QuestionMark\";\n    TokenType[TokenType[\"EOF\"] = 14] = \"EOF\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\nvar Scanner = /** @class */ (function () {\n    function Scanner() {\n        this.text('');\n    }\n    Scanner.isDigitCharacter = function (ch) {\n        return ch >= charCode_1.CharCode.Digit0 && ch <= charCode_1.CharCode.Digit9;\n    };\n    Scanner.isVariableCharacter = function (ch) {\n        return ch === charCode_1.CharCode.Underline\n            || (ch >= charCode_1.CharCode.a && ch <= charCode_1.CharCode.z)\n            || (ch >= charCode_1.CharCode.A && ch <= charCode_1.CharCode.Z);\n    };\n    Scanner.prototype.text = function (value) {\n        this.value = value;\n        this.pos = 0;\n    };\n    Scanner.prototype.tokenText = function (token) {\n        return this.value.substr(token.pos, token.len);\n    };\n    Scanner.prototype.next = function () {\n        if (this.pos >= this.value.length) {\n            return { type: TokenType.EOF, pos: this.pos, len: 0 };\n        }\n        var pos = this.pos;\n        var len = 0;\n        var ch = this.value.charCodeAt(pos);\n        var type;\n        // static types\n        type = Scanner._table[ch];\n        if (typeof type === 'number') {\n            this.pos += 1;\n            return { type: type, pos: pos, len: 1 };\n        }\n        // number\n        if (Scanner.isDigitCharacter(ch)) {\n            type = TokenType.Int;\n            do {\n                len += 1;\n                ch = this.value.charCodeAt(pos + len);\n            } while (Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type: type, pos: pos, len: len };\n        }\n        // variable name\n        if (Scanner.isVariableCharacter(ch)) {\n            type = TokenType.VariableName;\n            do {\n                ch = this.value.charCodeAt(pos + (++len));\n            } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type: type, pos: pos, len: len };\n        }\n        // format\n        type = TokenType.Format;\n        do {\n            len += 1;\n            ch = this.value.charCodeAt(pos + len);\n        } while (!isNaN(ch)\n            && typeof Scanner._table[ch] === 'undefined' // not static token\n            && !Scanner.isDigitCharacter(ch) // not number\n            && !Scanner.isVariableCharacter(ch) // not variable\n        );\n        this.pos += len;\n        return { type: type, pos: pos, len: len };\n    };\n    Scanner._table = (_a = {},\n        _a[charCode_1.CharCode.DollarSign] = TokenType.Dollar,\n        _a[charCode_1.CharCode.Colon] = TokenType.Colon,\n        _a[charCode_1.CharCode.Comma] = TokenType.Comma,\n        _a[charCode_1.CharCode.OpenCurlyBrace] = TokenType.CurlyOpen,\n        _a[charCode_1.CharCode.CloseCurlyBrace] = TokenType.CurlyClose,\n        _a[charCode_1.CharCode.Backslash] = TokenType.Backslash,\n        _a[charCode_1.CharCode.Slash] = TokenType.Forwardslash,\n        _a[charCode_1.CharCode.Pipe] = TokenType.Pipe,\n        _a[charCode_1.CharCode.Plus] = TokenType.Plus,\n        _a[charCode_1.CharCode.Dash] = TokenType.Dash,\n        _a[charCode_1.CharCode.QuestionMark] = TokenType.QuestionMark,\n        _a);\n    return Scanner;\n}());\nexports.Scanner = Scanner;\nvar Marker = /** @class */ (function () {\n    function Marker() {\n        this._children = [];\n    }\n    Marker.prototype.appendChild = function (child) {\n        if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n            // this and previous child are text -> merge them\n            this._children[this._children.length - 1].value += child.value;\n        }\n        else {\n            // normal adoption of child\n            child.parent = this;\n            this._children.push(child);\n        }\n        return this;\n    };\n    Marker.prototype.replace = function (child, others) {\n        var parent = child.parent;\n        var idx = parent.children.indexOf(child);\n        var newChildren = parent.children.slice(0);\n        newChildren.splice.apply(newChildren, [idx, 1].concat(others));\n        parent._children = newChildren;\n        (function _fixParent(children, parent) {\n            for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                var child_1 = children_1[_i];\n                child_1.parent = parent;\n                _fixParent(child_1.children, child_1);\n            }\n        })(others, parent);\n    };\n    Object.defineProperty(Marker.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Marker.prototype, \"snippet\", {\n        get: function () {\n            var candidate = this;\n            while (true) {\n                if (!candidate) {\n                    return undefined;\n                }\n                if (candidate instanceof TextmateSnippet) {\n                    return candidate;\n                }\n                candidate = candidate.parent;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Marker.prototype.toString = function () {\n        return this.children.reduce(function (prev, cur) { return prev + cur.toString(); }, '');\n    };\n    Marker.prototype.len = function () {\n        return 0;\n    };\n    return Marker;\n}());\nexports.Marker = Marker;\nvar Text = /** @class */ (function (_super) {\n    tslib_1.__extends(Text, _super);\n    function Text(value) {\n        var _this_1 = _super.call(this) || this;\n        _this_1.value = value;\n        return _this_1;\n    }\n    Text.escape = function (value) {\n        return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    };\n    Text.prototype.toString = function () {\n        return this.value;\n    };\n    Text.prototype.toTextmateString = function () {\n        return Text.escape(this.value);\n    };\n    Text.prototype.len = function () {\n        return this.value.length;\n    };\n    Text.prototype.clone = function () {\n        return new Text(this.value);\n    };\n    return Text;\n}(Marker));\nexports.Text = Text;\nvar TransformableMarker = /** @class */ (function (_super) {\n    tslib_1.__extends(TransformableMarker, _super);\n    function TransformableMarker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TransformableMarker;\n}(Marker));\nexports.TransformableMarker = TransformableMarker;\nvar Placeholder = /** @class */ (function (_super) {\n    tslib_1.__extends(Placeholder, _super);\n    function Placeholder(index) {\n        var _this_1 = _super.call(this) || this;\n        _this_1.index = index;\n        return _this_1;\n    }\n    Placeholder.compareByIndex = function (a, b) {\n        if (a.index === b.index) {\n            return 0;\n        }\n        else if (a.isFinalTabstop) {\n            return 1;\n        }\n        else if (b.isFinalTabstop) {\n            return -1;\n        }\n        else if (a.index < b.index) {\n            return -1;\n        }\n        else if (a.index > b.index) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    Object.defineProperty(Placeholder.prototype, \"isFinalTabstop\", {\n        get: function () {\n            return this.index === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Placeholder.prototype, \"choice\", {\n        get: function () {\n            return this._children.length === 1 && this._children[0] instanceof Choice\n                ? this._children[0]\n                : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Placeholder.prototype.toTextmateString = function () {\n        var transformString = '';\n        if (this.transform) {\n            transformString = this.transform.toTextmateString();\n        }\n        if (this.children.length === 0 && !this.transform) {\n            return \"$\" + this.index;\n        }\n        else if (this.children.length === 0) {\n            return \"${\" + this.index + transformString + \"}\";\n        }\n        else if (this.choice) {\n            return \"${\" + this.index + \"|\" + this.choice.toTextmateString() + \"|\" + transformString + \"}\";\n        }\n        else {\n            return \"${\" + this.index + \":\" + this.children.map(function (child) { return child.toTextmateString(); }).join('') + transformString + \"}\";\n        }\n    };\n    Placeholder.prototype.clone = function () {\n        var ret = new Placeholder(this.index);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(function (child) { return child.clone(); });\n        return ret;\n    };\n    return Placeholder;\n}(TransformableMarker));\nexports.Placeholder = Placeholder;\nvar Choice = /** @class */ (function (_super) {\n    tslib_1.__extends(Choice, _super);\n    function Choice() {\n        var _this_1 = _super !== null && _super.apply(this, arguments) || this;\n        _this_1.options = [];\n        return _this_1;\n    }\n    Choice.prototype.appendChild = function (marker) {\n        if (marker instanceof Text) {\n            marker.parent = this;\n            this.options.push(marker);\n        }\n        return this;\n    };\n    Choice.prototype.toString = function () {\n        return this.options[0].value;\n    };\n    Choice.prototype.toTextmateString = function () {\n        return this.options\n            .map(function (option) { return option.value.replace(/\\||,/g, '\\\\$&'); })\n            .join(',');\n    };\n    Choice.prototype.len = function () {\n        return this.options[0].len();\n    };\n    Choice.prototype.clone = function () {\n        var ret = new Choice();\n        this.options.forEach(ret.appendChild, ret);\n        return ret;\n    };\n    return Choice;\n}(Marker));\nexports.Choice = Choice;\nvar Transform = /** @class */ (function (_super) {\n    tslib_1.__extends(Transform, _super);\n    function Transform() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Transform.prototype.resolve = function (value) {\n        var _this = this;\n        var didMatch = false;\n        var ret = value.replace(this.regexp, function () {\n            didMatch = true;\n            return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n        });\n        // when the regex didn't match and when the transform has\n        // else branches, then run those\n        if (!didMatch && this._children.some(function (child) { return child instanceof FormatString && Boolean(child.elseValue); })) {\n            ret = this._replace([]);\n        }\n        return ret;\n    };\n    Transform.prototype._replace = function (groups) {\n        var ret = '';\n        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n            var marker = _a[_i];\n            if (marker instanceof FormatString) {\n                var value = groups[marker.index] || '';\n                value = marker.resolve(value);\n                ret += value;\n            }\n            else {\n                ret += marker.toString();\n            }\n        }\n        return ret;\n    };\n    Transform.prototype.toString = function () {\n        return '';\n    };\n    Transform.prototype.toTextmateString = function () {\n        return \"/\" + this.regexp.source + \"/\" + this.children.map(function (c) { return c.toTextmateString(); }) + \"/\" + ((this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n    };\n    Transform.prototype.clone = function () {\n        var ret = new Transform();\n        ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n        ret._children = this.children.map(function (child) { return child.clone(); });\n        return ret;\n    };\n    return Transform;\n}(Marker));\nexports.Transform = Transform;\nvar FormatString = /** @class */ (function (_super) {\n    tslib_1.__extends(FormatString, _super);\n    function FormatString(index, shorthandName, ifValue, elseValue) {\n        var _this_1 = _super.call(this) || this;\n        _this_1.index = index;\n        _this_1.shorthandName = shorthandName;\n        _this_1.ifValue = ifValue;\n        _this_1.elseValue = elseValue;\n        return _this_1;\n    }\n    FormatString.prototype.resolve = function (value) {\n        if (this.shorthandName === 'upcase') {\n            return !value ? '' : value.toLocaleUpperCase();\n        }\n        else if (this.shorthandName === 'downcase') {\n            return !value ? '' : value.toLocaleLowerCase();\n        }\n        else if (this.shorthandName === 'capitalize') {\n            return !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n        }\n        else if (this.shorthandName === 'pascalcase') {\n            return !value ? '' : this._toPascalCase(value);\n        }\n        else if (Boolean(value) && typeof this.ifValue === 'string') {\n            return this.ifValue;\n        }\n        else if (!Boolean(value) && typeof this.elseValue === 'string') {\n            return this.elseValue;\n        }\n        else {\n            return value || '';\n        }\n    };\n    FormatString.prototype._toPascalCase = function (value) {\n        var match = value.match(/[a-z]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map(function (word) {\n            return word.charAt(0).toUpperCase()\n                + word.substr(1).toLowerCase();\n        })\n            .join('');\n    };\n    FormatString.prototype.toTextmateString = function () {\n        var value = '${';\n        value += this.index;\n        if (this.shorthandName) {\n            value += \":/\" + this.shorthandName;\n        }\n        else if (this.ifValue && this.elseValue) {\n            value += \":?\" + this.ifValue + \":\" + this.elseValue;\n        }\n        else if (this.ifValue) {\n            value += \":+\" + this.ifValue;\n        }\n        else if (this.elseValue) {\n            value += \":-\" + this.elseValue;\n        }\n        value += '}';\n        return value;\n    };\n    FormatString.prototype.clone = function () {\n        var ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n        return ret;\n    };\n    return FormatString;\n}(Marker));\nexports.FormatString = FormatString;\nvar Variable = /** @class */ (function (_super) {\n    tslib_1.__extends(Variable, _super);\n    function Variable(name) {\n        var _this_1 = _super.call(this) || this;\n        _this_1.name = name;\n        return _this_1;\n    }\n    Variable.prototype.resolve = function (resolver) {\n        var value = resolver.resolve(this);\n        if (this.transform) {\n            value = this.transform.resolve(value || '');\n        }\n        if (value !== undefined) {\n            this._children = [new Text(value)];\n            return true;\n        }\n        return false;\n    };\n    Variable.prototype.toTextmateString = function () {\n        var transformString = '';\n        if (this.transform) {\n            transformString = this.transform.toTextmateString();\n        }\n        if (this.children.length === 0) {\n            return \"${\" + this.name + transformString + \"}\";\n        }\n        else {\n            return \"${\" + this.name + \":\" + this.children.map(function (child) { return child.toTextmateString(); }).join('') + transformString + \"}\";\n        }\n    };\n    Variable.prototype.clone = function () {\n        var ret = new Variable(this.name);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(function (child) { return child.clone(); });\n        return ret;\n    };\n    return Variable;\n}(TransformableMarker));\nexports.Variable = Variable;\nfunction walk(marker, visitor) {\n    var stack = marker.slice();\n    while (stack.length > 0) {\n        var marker_1 = stack.shift();\n        var recurse = visitor(marker_1);\n        if (!recurse) {\n            break;\n        }\n        stack.unshift.apply(stack, marker_1.children);\n    }\n}\nvar TextmateSnippet = /** @class */ (function (_super) {\n    tslib_1.__extends(TextmateSnippet, _super);\n    function TextmateSnippet() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TextmateSnippet.prototype, \"placeholderInfo\", {\n        get: function () {\n            if (!this._placeholders) {\n                // fill in placeholders\n                var all_1 = [];\n                var last_1;\n                this.walk(function (candidate) {\n                    if (candidate instanceof Placeholder) {\n                        all_1.push(candidate);\n                        last_1 = !last_1 || last_1.index < candidate.index ? candidate : last_1;\n                    }\n                    return true;\n                });\n                this._placeholders = { all: all_1, last: last_1 };\n            }\n            return this._placeholders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextmateSnippet.prototype, \"placeholders\", {\n        get: function () {\n            var all = this.placeholderInfo.all;\n            return all;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextmateSnippet.prototype.offset = function (marker) {\n        var pos = 0;\n        var found = false;\n        this.walk(function (candidate) {\n            if (candidate === marker) {\n                found = true;\n                return false;\n            }\n            pos += candidate.len();\n            return true;\n        });\n        if (!found) {\n            return -1;\n        }\n        return pos;\n    };\n    TextmateSnippet.prototype.fullLen = function (marker) {\n        var ret = 0;\n        walk([marker], function (marker) {\n            ret += marker.len();\n            return true;\n        });\n        return ret;\n    };\n    TextmateSnippet.prototype.enclosingPlaceholders = function (placeholder) {\n        var ret = [];\n        var parent = placeholder.parent;\n        while (parent) {\n            if (parent instanceof Placeholder) {\n                ret.push(parent);\n            }\n            parent = parent.parent;\n        }\n        return ret;\n    };\n    TextmateSnippet.prototype.resolveVariables = function (resolver) {\n        var _this_1 = this;\n        this.walk(function (candidate) {\n            if (candidate instanceof Variable) {\n                if (candidate.resolve(resolver)) {\n                    _this_1._placeholders = undefined;\n                }\n            }\n            return true;\n        });\n        return this;\n    };\n    TextmateSnippet.prototype.appendChild = function (child) {\n        this._placeholders = undefined;\n        return _super.prototype.appendChild.call(this, child);\n    };\n    TextmateSnippet.prototype.replace = function (child, others) {\n        this._placeholders = undefined;\n        return _super.prototype.replace.call(this, child, others);\n    };\n    TextmateSnippet.prototype.toTextmateString = function () {\n        return this.children.reduce(function (prev, cur) { return prev + cur.toTextmateString(); }, '');\n    };\n    TextmateSnippet.prototype.clone = function () {\n        var ret = new TextmateSnippet();\n        this._children = this.children.map(function (child) { return child.clone(); });\n        return ret;\n    };\n    TextmateSnippet.prototype.walk = function (visitor) {\n        walk(this.children, visitor);\n    };\n    return TextmateSnippet;\n}(Marker));\nexports.TextmateSnippet = TextmateSnippet;\nvar SnippetParser = /** @class */ (function () {\n    function SnippetParser() {\n        this._scanner = new Scanner();\n    }\n    SnippetParser.escape = function (value) {\n        return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    };\n    SnippetParser.prototype.text = function (value) {\n        return this.parse(value).toString();\n    };\n    SnippetParser.prototype.parse = function (value, insertFinalTabstop, enforceFinalTabstop) {\n        this._scanner.text(value);\n        this._token = this._scanner.next();\n        var snippet = new TextmateSnippet();\n        while (this._parse(snippet)) {\n            // nothing\n        }\n        // fill in values for placeholders. the first placeholder of an index\n        // that has a value defines the value for all placeholders with that index\n        var placeholderDefaultValues = new Map();\n        var incompletePlaceholders = [];\n        var placeholderCount = 0;\n        snippet.walk(function (marker) {\n            if (marker instanceof Placeholder) {\n                placeholderCount += 1;\n                if (marker.isFinalTabstop) {\n                    placeholderDefaultValues.set(0, undefined);\n                }\n                else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n                    placeholderDefaultValues.set(marker.index, marker.children);\n                }\n                else {\n                    incompletePlaceholders.push(marker);\n                }\n            }\n            return true;\n        });\n        for (var _i = 0, incompletePlaceholders_1 = incompletePlaceholders; _i < incompletePlaceholders_1.length; _i++) {\n            var placeholder = incompletePlaceholders_1[_i];\n            var defaultValues = placeholderDefaultValues.get(placeholder.index);\n            if (defaultValues) {\n                var clone = new Placeholder(placeholder.index);\n                clone.transform = placeholder.transform;\n                for (var _a = 0, defaultValues_1 = defaultValues; _a < defaultValues_1.length; _a++) {\n                    var child = defaultValues_1[_a];\n                    clone.appendChild(child.clone());\n                }\n                snippet.replace(placeholder, [clone]);\n            }\n        }\n        if (!enforceFinalTabstop) {\n            enforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;\n        }\n        if (!placeholderDefaultValues.has(0) && enforceFinalTabstop) {\n            // the snippet uses placeholders but has no\n            // final tabstop defined -> insert at the end\n            snippet.appendChild(new Placeholder(0));\n        }\n        return snippet;\n    };\n    SnippetParser.prototype._accept = function (type, value) {\n        if (type === undefined || this._token.type === type) {\n            var ret = !value ? true : this._scanner.tokenText(this._token);\n            this._token = this._scanner.next();\n            return ret;\n        }\n        return false;\n    };\n    SnippetParser.prototype._backTo = function (token) {\n        this._scanner.pos = token.pos + token.len;\n        this._token = token;\n        return false;\n    };\n    SnippetParser.prototype._until = function (type) {\n        if (this._token.type === TokenType.EOF) {\n            return false;\n        }\n        var start = this._token;\n        while (this._token.type !== type) {\n            this._token = this._scanner.next();\n            if (this._token.type === TokenType.EOF) {\n                return false;\n            }\n        }\n        var value = this._scanner.value.substring(start.pos, this._token.pos);\n        this._token = this._scanner.next();\n        return value;\n    };\n    SnippetParser.prototype._parse = function (marker) {\n        return this._parseEscaped(marker)\n            || this._parseTabstopOrVariableName(marker)\n            || this._parseComplexPlaceholder(marker)\n            || this._parseComplexVariable(marker)\n            || this._parseAnything(marker);\n    };\n    // \\$, \\\\, \\} -> just text\n    SnippetParser.prototype._parseEscaped = function (marker) {\n        var value;\n        if (value = this._accept(TokenType.Backslash, true)) {\n            // saw a backslash, append escaped token or that backslash\n            value = this._accept(TokenType.Dollar, true)\n                || this._accept(TokenType.CurlyClose, true)\n                || this._accept(TokenType.Backslash, true)\n                || value;\n            marker.appendChild(new Text(value));\n            return true;\n        }\n        return false;\n    };\n    // $foo -> variable, $1 -> tabstop\n    SnippetParser.prototype._parseTabstopOrVariableName = function (parent) {\n        var value;\n        var token = this._token;\n        var match = this._accept(TokenType.Dollar)\n            && (value = this._accept(TokenType.VariableName, true) || this._accept(TokenType.Int, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        parent.appendChild(/^\\d+$/.test(value)\n            ? new Placeholder(Number(value))\n            : new Variable(value));\n        return true;\n    };\n    // ${1:<children>}, ${1} -> placeholder\n    SnippetParser.prototype._parseComplexPlaceholder = function (parent) {\n        var index;\n        var token = this._token;\n        var match = this._accept(TokenType.Dollar)\n            && this._accept(TokenType.CurlyOpen)\n            && (index = this._accept(TokenType.Int, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        var placeholder = new Placeholder(Number(index));\n        if (this._accept(TokenType.Colon)) {\n            // ${1:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(TokenType.CurlyClose)) {\n                    parent.appendChild(placeholder);\n                    return true;\n                }\n                if (this._parse(placeholder)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + index + ':'));\n                placeholder.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (placeholder.index > 0 && this._accept(TokenType.Pipe)) {\n            // ${1|one,two,three|}\n            var choice = new Choice();\n            while (true) {\n                if (this._parseChoiceElement(choice)) {\n                    if (this._accept(TokenType.Comma)) {\n                        // opt, -> more\n                        continue;\n                    }\n                    if (this._accept(TokenType.Pipe)) {\n                        placeholder.appendChild(choice);\n                        if (this._accept(TokenType.CurlyClose)) {\n                            // ..|} -> done\n                            parent.appendChild(placeholder);\n                            return true;\n                        }\n                    }\n                }\n                this._backTo(token);\n                return false;\n            }\n        }\n        else if (this._accept(TokenType.Forwardslash)) {\n            // ${1/<regex>/<format>/<options>}\n            if (this._parseTransform(placeholder)) {\n                parent.appendChild(placeholder);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(TokenType.CurlyClose)) {\n            // ${1}\n            parent.appendChild(placeholder);\n            return true;\n        }\n        else {\n            // ${1 <- missing curly or colon\n            return this._backTo(token);\n        }\n    };\n    SnippetParser.prototype._parseChoiceElement = function (parent) {\n        var token = this._token;\n        var values = [];\n        while (true) {\n            if (this._token.type === TokenType.Comma || this._token.type === TokenType.Pipe) {\n                break;\n            }\n            var value = void 0;\n            if (value = this._accept(TokenType.Backslash, true)) {\n                // \\, \\|, or \\\\\n                value = this._accept(TokenType.Comma, true)\n                    || this._accept(TokenType.Pipe, true)\n                    || this._accept(TokenType.Backslash, true)\n                    || value;\n            }\n            else {\n                value = this._accept(undefined, true);\n            }\n            if (!value) {\n                // EOF\n                this._backTo(token);\n                return false;\n            }\n            values.push(value);\n        }\n        if (values.length === 0) {\n            this._backTo(token);\n            return false;\n        }\n        parent.appendChild(new Text(values.join('')));\n        return true;\n    };\n    // ${foo:<children>}, ${foo} -> variable\n    SnippetParser.prototype._parseComplexVariable = function (parent) {\n        var name;\n        var token = this._token;\n        var match = this._accept(TokenType.Dollar)\n            && this._accept(TokenType.CurlyOpen)\n            && (name = this._accept(TokenType.VariableName, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        var variable = new Variable(name);\n        if (this._accept(TokenType.Colon)) {\n            // ${foo:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(TokenType.CurlyClose)) {\n                    parent.appendChild(variable);\n                    return true;\n                }\n                if (this._parse(variable)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + name + ':'));\n                variable.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (this._accept(TokenType.Forwardslash)) {\n            // ${foo/<regex>/<format>/<options>}\n            if (this._parseTransform(variable)) {\n                parent.appendChild(variable);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(TokenType.CurlyClose)) {\n            // ${foo}\n            parent.appendChild(variable);\n            return true;\n        }\n        else {\n            // ${foo <- missing curly or colon\n            return this._backTo(token);\n        }\n    };\n    SnippetParser.prototype._parseTransform = function (parent) {\n        // ...<regex>/<format>/<options>}\n        var transform = new Transform();\n        var regexValue = '';\n        var regexOptions = '';\n        // (1) /regex\n        while (true) {\n            if (this._accept(TokenType.Forwardslash)) {\n                break;\n            }\n            var escaped = void 0;\n            if (escaped = this._accept(TokenType.Backslash, true)) {\n                escaped = this._accept(TokenType.Forwardslash, true) || escaped;\n                regexValue += escaped;\n                continue;\n            }\n            if (this._token.type !== TokenType.EOF) {\n                regexValue += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        // (2) /format\n        while (true) {\n            if (this._accept(TokenType.Forwardslash)) {\n                break;\n            }\n            var escaped = void 0;\n            if (escaped = this._accept(TokenType.Backslash, true)) {\n                escaped = this._accept(TokenType.Backslash, true) || this._accept(TokenType.Forwardslash, true) || escaped;\n                transform.appendChild(new Text(escaped));\n                continue;\n            }\n            if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n                continue;\n            }\n            return false;\n        }\n        // (3) /option\n        while (true) {\n            if (this._accept(TokenType.CurlyClose)) {\n                break;\n            }\n            if (this._token.type !== TokenType.EOF) {\n                regexOptions += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        try {\n            transform.regexp = new RegExp(regexValue, regexOptions);\n        }\n        catch (e) {\n            // invalid regexp\n            return false;\n        }\n        parent.transform = transform;\n        return true;\n    };\n    SnippetParser.prototype._parseFormatString = function (parent) {\n        var token = this._token;\n        if (!this._accept(TokenType.Dollar)) {\n            return false;\n        }\n        var complex = false;\n        if (this._accept(TokenType.CurlyOpen)) {\n            complex = true;\n        }\n        var index = this._accept(TokenType.Int, true);\n        if (!index) {\n            this._backTo(token);\n            return false;\n        }\n        else if (!complex) {\n            // $1\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (this._accept(TokenType.CurlyClose)) {\n            // ${1}\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (!this._accept(TokenType.Colon)) {\n            this._backTo(token);\n            return false;\n        }\n        if (this._accept(TokenType.Forwardslash)) {\n            // ${1:/upcase}\n            var shorthand = this._accept(TokenType.VariableName, true);\n            if (!shorthand || !this._accept(TokenType.CurlyClose)) {\n                this._backTo(token);\n                return false;\n            }\n            else {\n                parent.appendChild(new FormatString(Number(index), shorthand));\n                return true;\n            }\n        }\n        else if (this._accept(TokenType.Plus)) {\n            // ${1:+<if>}\n            var ifValue = this._until(TokenType.CurlyClose);\n            if (ifValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n                return true;\n            }\n        }\n        else if (this._accept(TokenType.Dash)) {\n            // ${2:-<else>}\n            var elseValue = this._until(TokenType.CurlyClose);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        else if (this._accept(TokenType.QuestionMark)) {\n            // ${2:?<if>:<else>}\n            var ifValue = this._until(TokenType.Colon);\n            if (ifValue) {\n                var elseValue = this._until(TokenType.CurlyClose);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n                    return true;\n                }\n            }\n        }\n        else {\n            // ${1:<else>}\n            var elseValue = this._until(TokenType.CurlyClose);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        this._backTo(token);\n        return false;\n    };\n    SnippetParser.prototype._parseAnything = function (marker) {\n        if (this._token.type !== TokenType.EOF) {\n            marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n            this._accept(undefined);\n            return true;\n        }\n        return false;\n    };\n    return SnippetParser;\n}());\nexports.SnippetParser = SnippetParser;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\n\nexport const enum TokenType {\n\tDollar,\n\tColon,\n\tComma,\n\tCurlyOpen,\n\tCurlyClose,\n\tBackslash,\n\tForwardslash,\n\tPipe,\n\tInt,\n\tVariableName,\n\tFormat,\n\tPlus,\n\tDash,\n\tQuestionMark,\n\tEOF\n}\n\nexport interface Token {\n\ttype: TokenType;\n\tpos: number;\n\tlen: number;\n}\n\n\nexport class Scanner {\n\n\tprivate static _table: { [ch: number]: TokenType } = {\n\t\t[CharCode.DollarSign]: TokenType.Dollar,\n\t\t[CharCode.Colon]: TokenType.Colon,\n\t\t[CharCode.Comma]: TokenType.Comma,\n\t\t[CharCode.OpenCurlyBrace]: TokenType.CurlyOpen,\n\t\t[CharCode.CloseCurlyBrace]: TokenType.CurlyClose,\n\t\t[CharCode.Backslash]: TokenType.Backslash,\n\t\t[CharCode.Slash]: TokenType.Forwardslash,\n\t\t[CharCode.Pipe]: TokenType.Pipe,\n\t\t[CharCode.Plus]: TokenType.Plus,\n\t\t[CharCode.Dash]: TokenType.Dash,\n\t\t[CharCode.QuestionMark]: TokenType.QuestionMark,\n\t};\n\n\tstatic isDigitCharacter(ch: number): boolean {\n\t\treturn ch >= CharCode.Digit0 && ch <= CharCode.Digit9;\n\t}\n\n\tstatic isVariableCharacter(ch: number): boolean {\n\t\treturn ch === CharCode.Underline\n\t\t\t|| (ch >= CharCode.a && ch <= CharCode.z)\n\t\t\t|| (ch >= CharCode.A && ch <= CharCode.Z);\n\t}\n\n\tvalue: string;\n\tpos: number;\n\n\tconstructor() {\n\t\tthis.text('');\n\t}\n\n\ttext(value: string) {\n\t\tthis.value = value;\n\t\tthis.pos = 0;\n\t}\n\n\ttokenText(token: Token): string {\n\t\treturn this.value.substr(token.pos, token.len);\n\t}\n\n\tnext(): Token {\n\n\t\tif (this.pos >= this.value.length) {\n\t\t\treturn { type: TokenType.EOF, pos: this.pos, len: 0 };\n\t\t}\n\n\t\tlet pos = this.pos;\n\t\tlet len = 0;\n\t\tlet ch = this.value.charCodeAt(pos);\n\t\tlet type: TokenType;\n\n\t\t// static types\n\t\ttype = Scanner._table[ch];\n\t\tif (typeof type === 'number') {\n\t\t\tthis.pos += 1;\n\t\t\treturn { type, pos, len: 1 };\n\t\t}\n\n\t\t// number\n\t\tif (Scanner.isDigitCharacter(ch)) {\n\t\t\ttype = TokenType.Int;\n\t\t\tdo {\n\t\t\t\tlen += 1;\n\t\t\t\tch = this.value.charCodeAt(pos + len);\n\t\t\t} while (Scanner.isDigitCharacter(ch));\n\n\t\t\tthis.pos += len;\n\t\t\treturn { type, pos, len };\n\t\t}\n\n\t\t// variable name\n\t\tif (Scanner.isVariableCharacter(ch)) {\n\t\t\ttype = TokenType.VariableName;\n\t\t\tdo {\n\t\t\t\tch = this.value.charCodeAt(pos + (++len));\n\t\t\t} while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n\n\t\t\tthis.pos += len;\n\t\t\treturn { type, pos, len };\n\t\t}\n\n\n\t\t// format\n\t\ttype = TokenType.Format;\n\t\tdo {\n\t\t\tlen += 1;\n\t\t\tch = this.value.charCodeAt(pos + len);\n\t\t} while (\n\t\t\t!isNaN(ch)\n\t\t\t&& typeof Scanner._table[ch] === 'undefined' // not static token\n\t\t\t&& !Scanner.isDigitCharacter(ch) // not number\n\t\t\t&& !Scanner.isVariableCharacter(ch) // not variable\n\t\t);\n\n\t\tthis.pos += len;\n\t\treturn { type, pos, len };\n\t}\n}\n\nexport abstract class Marker {\n\n\treadonly _markerBrand: any;\n\n\tpublic parent: Marker;\n\tprotected _children: Marker[] = [];\n\n\tappendChild(child: Marker): this {\n\t\tif (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n\t\t\t// this and previous child are text -> merge them\n\t\t\t(<Text>this._children[this._children.length - 1]).value += child.value;\n\t\t} else {\n\t\t\t// normal adoption of child\n\t\t\tchild.parent = this;\n\t\t\tthis._children.push(child);\n\t\t}\n\t\treturn this;\n\t}\n\n\treplace(child: Marker, others: Marker[]): void {\n\t\tconst { parent } = child;\n\t\tconst idx = parent.children.indexOf(child);\n\t\tconst newChildren = parent.children.slice(0);\n\t\tnewChildren.splice(idx, 1, ...others);\n\t\tparent._children = newChildren;\n\n\t\t(function _fixParent(children: Marker[], parent: Marker) {\n\t\t\tfor (const child of children) {\n\t\t\t\tchild.parent = parent;\n\t\t\t\t_fixParent(child.children, child);\n\t\t\t}\n\t\t})(others, parent);\n\t}\n\n\tget children(): Marker[] {\n\t\treturn this._children;\n\t}\n\n\tget snippet(): TextmateSnippet | undefined {\n\t\tlet candidate: Marker = this;\n\t\twhile (true) {\n\t\t\tif (!candidate) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (candidate instanceof TextmateSnippet) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\tcandidate = candidate.parent;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn this.children.reduce((prev, cur) => prev + cur.toString(), '');\n\t}\n\n\tabstract toTextmateString(): string;\n\n\tlen(): number {\n\t\treturn 0;\n\t}\n\n\tabstract clone(): Marker;\n}\n\nexport class Text extends Marker {\n\n\tstatic escape(value: string): string {\n\t\treturn value.replace(/\\$|}|\\\\/g, '\\\\$&');\n\t}\n\n\tconstructor(public value: string) {\n\t\tsuper();\n\t}\n\ttoString() {\n\t\treturn this.value;\n\t}\n\ttoTextmateString(): string {\n\t\treturn Text.escape(this.value);\n\t}\n\tlen(): number {\n\t\treturn this.value.length;\n\t}\n\tclone(): Text {\n\t\treturn new Text(this.value);\n\t}\n}\n\nexport abstract class TransformableMarker extends Marker {\n\tpublic transform: Transform;\n}\n\nexport class Placeholder extends TransformableMarker {\n\tstatic compareByIndex(a: Placeholder, b: Placeholder): number {\n\t\tif (a.index === b.index) {\n\t\t\treturn 0;\n\t\t} else if (a.isFinalTabstop) {\n\t\t\treturn 1;\n\t\t} else if (b.isFinalTabstop) {\n\t\t\treturn -1;\n\t\t} else if (a.index < b.index) {\n\t\t\treturn -1;\n\t\t} else if (a.index > b.index) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tconstructor(public index: number) {\n\t\tsuper();\n\t}\n\n\tget isFinalTabstop() {\n\t\treturn this.index === 0;\n\t}\n\n\tget choice(): Choice | undefined {\n\t\treturn this._children.length === 1 && this._children[0] instanceof Choice\n\t\t\t? this._children[0] as Choice\n\t\t\t: undefined;\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet transformString = '';\n\t\tif (this.transform) {\n\t\t\ttransformString = this.transform.toTextmateString();\n\t\t}\n\t\tif (this.children.length === 0 && !this.transform) {\n\t\t\treturn `\\$${this.index}`;\n\t\t} else if (this.children.length === 0) {\n\t\t\treturn `\\${${this.index}${transformString}}`;\n\t\t} else if (this.choice) {\n\t\t\treturn `\\${${this.index}|${this.choice.toTextmateString()}|${transformString}}`;\n\t\t} else {\n\t\t\treturn `\\${${this.index}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n\t\t}\n\t}\n\n\tclone(): Placeholder {\n\t\tlet ret = new Placeholder(this.index);\n\t\tif (this.transform) {\n\t\t\tret.transform = this.transform.clone();\n\t\t}\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n}\n\nexport class Choice extends Marker {\n\n\treadonly options: Text[] = [];\n\n\tappendChild(marker: Marker): this {\n\t\tif (marker instanceof Text) {\n\t\t\tmarker.parent = this;\n\t\t\tthis.options.push(marker);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\treturn this.options[0].value;\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn this.options\n\t\t\t.map(option => option.value.replace(/\\||,/g, '\\\\$&'))\n\t\t\t.join(',');\n\t}\n\n\tlen(): number {\n\t\treturn this.options[0].len();\n\t}\n\n\tclone(): Choice {\n\t\tlet ret = new Choice();\n\t\tthis.options.forEach(ret.appendChild, ret);\n\t\treturn ret;\n\t}\n}\n\nexport class Transform extends Marker {\n\n\tregexp: RegExp;\n\n\tresolve(value: string): string {\n\t\tconst _this = this;\n\t\tlet didMatch = false;\n\t\tlet ret = value.replace(this.regexp, function () {\n\t\t\tdidMatch = true;\n\t\t\treturn _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n\t\t});\n\t\t// when the regex didn't match and when the transform has\n\t\t// else branches, then run those\n\t\tif (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n\t\t\tret = this._replace([]);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _replace(groups: string[]): string {\n\t\tlet ret = '';\n\t\tfor (const marker of this._children) {\n\t\t\tif (marker instanceof FormatString) {\n\t\t\t\tlet value = groups[marker.index] || '';\n\t\t\t\tvalue = marker.resolve(value);\n\t\t\t\tret += value;\n\t\t\t} else {\n\t\t\t\tret += marker.toString();\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\ttoString(): string {\n\t\treturn '';\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn `/${this.regexp.source}/${this.children.map(c => c.toTextmateString())}/${(this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : '')}`;\n\t}\n\n\tclone(): Transform {\n\t\tlet ret = new Transform();\n\t\tret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n\n}\n\nexport class FormatString extends Marker {\n\n\tconstructor(\n\t\treadonly index: number,\n\t\treadonly shorthandName?: string,\n\t\treadonly ifValue?: string,\n\t\treadonly elseValue?: string,\n\t) {\n\t\tsuper();\n\t}\n\n\tresolve(value?: string): string {\n\t\tif (this.shorthandName === 'upcase') {\n\t\t\treturn !value ? '' : value.toLocaleUpperCase();\n\t\t} else if (this.shorthandName === 'downcase') {\n\t\t\treturn !value ? '' : value.toLocaleLowerCase();\n\t\t} else if (this.shorthandName === 'capitalize') {\n\t\t\treturn !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n\t\t} else if (this.shorthandName === 'pascalcase') {\n\t\t\treturn !value ? '' : this._toPascalCase(value);\n\t\t} else if (Boolean(value) && typeof this.ifValue === 'string') {\n\t\t\treturn this.ifValue;\n\t\t} else if (!Boolean(value) && typeof this.elseValue === 'string') {\n\t\t\treturn this.elseValue;\n\t\t} else {\n\t\t\treturn value || '';\n\t\t}\n\t}\n\n\tprivate _toPascalCase(value: string): string {\n\t\tconst match = value.match(/[a-z]+/gi);\n\t\tif (!match) {\n\t\t\treturn value;\n\t\t}\n\t\treturn match.map(function (word) {\n\t\t\treturn word.charAt(0).toUpperCase()\n\t\t\t\t+ word.substr(1).toLowerCase();\n\t\t})\n\t\t\t.join('');\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet value = '${';\n\t\tvalue += this.index;\n\t\tif (this.shorthandName) {\n\t\t\tvalue += `:/${this.shorthandName}`;\n\n\t\t} else if (this.ifValue && this.elseValue) {\n\t\t\tvalue += `:?${this.ifValue}:${this.elseValue}`;\n\t\t} else if (this.ifValue) {\n\t\t\tvalue += `:+${this.ifValue}`;\n\t\t} else if (this.elseValue) {\n\t\t\tvalue += `:-${this.elseValue}`;\n\t\t}\n\t\tvalue += '}';\n\t\treturn value;\n\t}\n\n\tclone(): FormatString {\n\t\tlet ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n\t\treturn ret;\n\t}\n}\n\nexport class Variable extends TransformableMarker {\n\n\tconstructor(public name: string) {\n\t\tsuper();\n\t}\n\n\tresolve(resolver: VariableResolver): boolean {\n\t\tlet value = resolver.resolve(this);\n\t\tif (this.transform) {\n\t\t\tvalue = this.transform.resolve(value || '');\n\t\t}\n\t\tif (value !== undefined) {\n\t\t\tthis._children = [new Text(value)];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet transformString = '';\n\t\tif (this.transform) {\n\t\t\ttransformString = this.transform.toTextmateString();\n\t\t}\n\t\tif (this.children.length === 0) {\n\t\t\treturn `\\${${this.name}${transformString}}`;\n\t\t} else {\n\t\t\treturn `\\${${this.name}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n\t\t}\n\t}\n\n\tclone(): Variable {\n\t\tconst ret = new Variable(this.name);\n\t\tif (this.transform) {\n\t\t\tret.transform = this.transform.clone();\n\t\t}\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n}\n\nexport interface VariableResolver {\n\tresolve(variable: Variable): string | undefined;\n}\n\nfunction walk(marker: Marker[], visitor: (marker: Marker) => boolean): void {\n\tconst stack = [...marker];\n\twhile (stack.length > 0) {\n\t\tconst marker = stack.shift()!;\n\t\tconst recurse = visitor(marker);\n\t\tif (!recurse) {\n\t\t\tbreak;\n\t\t}\n\t\tstack.unshift(...marker.children);\n\t}\n}\n\nexport class TextmateSnippet extends Marker {\n\n\tprivate _placeholders?: { all: Placeholder[], last?: Placeholder };\n\n\tget placeholderInfo() {\n\t\tif (!this._placeholders) {\n\t\t\t// fill in placeholders\n\t\t\tlet all: Placeholder[] = [];\n\t\t\tlet last: Placeholder | undefined;\n\t\t\tthis.walk(function (candidate) {\n\t\t\t\tif (candidate instanceof Placeholder) {\n\t\t\t\t\tall.push(candidate);\n\t\t\t\t\tlast = !last || last.index < candidate.index ? candidate : last;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tthis._placeholders = { all, last };\n\t\t}\n\t\treturn this._placeholders;\n\t}\n\n\tget placeholders(): Placeholder[] {\n\t\tconst { all } = this.placeholderInfo;\n\t\treturn all;\n\t}\n\n\toffset(marker: Marker): number {\n\t\tlet pos = 0;\n\t\tlet found = false;\n\t\tthis.walk(candidate => {\n\t\t\tif (candidate === marker) {\n\t\t\t\tfound = true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpos += candidate.len();\n\t\t\treturn true;\n\t\t});\n\n\t\tif (!found) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn pos;\n\t}\n\n\tfullLen(marker: Marker): number {\n\t\tlet ret = 0;\n\t\twalk([marker], marker => {\n\t\t\tret += marker.len();\n\t\t\treturn true;\n\t\t});\n\t\treturn ret;\n\t}\n\n\tenclosingPlaceholders(placeholder: Placeholder): Placeholder[] {\n\t\tlet ret: Placeholder[] = [];\n\t\tlet { parent } = placeholder;\n\t\twhile (parent) {\n\t\t\tif (parent instanceof Placeholder) {\n\t\t\t\tret.push(parent);\n\t\t\t}\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tresolveVariables(resolver: VariableResolver): this {\n\t\tthis.walk(candidate => {\n\t\t\tif (candidate instanceof Variable) {\n\t\t\t\tif (candidate.resolve(resolver)) {\n\t\t\t\t\tthis._placeholders = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\treturn this;\n\t}\n\n\tappendChild(child: Marker) {\n\t\tthis._placeholders = undefined;\n\t\treturn super.appendChild(child);\n\t}\n\n\treplace(child: Marker, others: Marker[]): void {\n\t\tthis._placeholders = undefined;\n\t\treturn super.replace(child, others);\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn this.children.reduce((prev, cur) => prev + cur.toTextmateString(), '');\n\t}\n\n\tclone(): TextmateSnippet {\n\t\tlet ret = new TextmateSnippet();\n\t\tthis._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n\n\twalk(visitor: (marker: Marker) => boolean): void {\n\t\twalk(this.children, visitor);\n\t}\n}\n\nexport class SnippetParser {\n\n\tstatic escape(value: string): string {\n\t\treturn value.replace(/\\$|}|\\\\/g, '\\\\$&');\n\t}\n\n\tprivate _scanner = new Scanner();\n\tprivate _token: Token;\n\n\ttext(value: string): string {\n\t\treturn this.parse(value).toString();\n\t}\n\n\tparse(value: string, insertFinalTabstop?: boolean, enforceFinalTabstop?: boolean): TextmateSnippet {\n\n\t\tthis._scanner.text(value);\n\t\tthis._token = this._scanner.next();\n\n\t\tconst snippet = new TextmateSnippet();\n\t\twhile (this._parse(snippet)) {\n\t\t\t// nothing\n\t\t}\n\n\t\t// fill in values for placeholders. the first placeholder of an index\n\t\t// that has a value defines the value for all placeholders with that index\n\t\tconst placeholderDefaultValues = new Map<number, Marker[]>();\n\t\tconst incompletePlaceholders: Placeholder[] = [];\n\t\tlet placeholderCount = 0;\n\t\tsnippet.walk(marker => {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tplaceholderCount += 1;\n\t\t\t\tif (marker.isFinalTabstop) {\n\t\t\t\t\tplaceholderDefaultValues.set(0, undefined);\n\t\t\t\t} else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n\t\t\t\t\tplaceholderDefaultValues.set(marker.index, marker.children);\n\t\t\t\t} else {\n\t\t\t\t\tincompletePlaceholders.push(marker);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tfor (const placeholder of incompletePlaceholders) {\n\t\t\tconst defaultValues = placeholderDefaultValues.get(placeholder.index);\n\t\t\tif (defaultValues) {\n\t\t\t\tconst clone = new Placeholder(placeholder.index);\n\t\t\t\tclone.transform = placeholder.transform;\n\t\t\t\tfor (const child of defaultValues) {\n\t\t\t\t\tclone.appendChild(child.clone());\n\t\t\t\t}\n\t\t\t\tsnippet.replace(placeholder, [clone]);\n\t\t\t}\n\t\t}\n\n\t\tif (!enforceFinalTabstop) {\n\t\t\tenforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;\n\t\t}\n\n\t\tif (!placeholderDefaultValues.has(0) && enforceFinalTabstop) {\n\t\t\t// the snippet uses placeholders but has no\n\t\t\t// final tabstop defined -> insert at the end\n\t\t\tsnippet.appendChild(new Placeholder(0));\n\t\t}\n\n\t\treturn snippet;\n\t}\n\n\tprivate _accept(type?: TokenType): boolean;\n\tprivate _accept(type: TokenType | undefined, value: true): string;\n\tprivate _accept(type: TokenType, value?: boolean): boolean | string {\n\t\tif (type === undefined || this._token.type === type) {\n\t\t\tlet ret = !value ? true : this._scanner.tokenText(this._token);\n\t\t\tthis._token = this._scanner.next();\n\t\t\treturn ret;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _backTo(token: Token): false {\n\t\tthis._scanner.pos = token.pos + token.len;\n\t\tthis._token = token;\n\t\treturn false;\n\t}\n\n\tprivate _until(type: TokenType): false | string {\n\t\tif (this._token.type === TokenType.EOF) {\n\t\t\treturn false;\n\t\t}\n\t\tlet start = this._token;\n\t\twhile (this._token.type !== type) {\n\t\t\tthis._token = this._scanner.next();\n\t\t\tif (this._token.type === TokenType.EOF) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tlet value = this._scanner.value.substring(start.pos, this._token.pos);\n\t\tthis._token = this._scanner.next();\n\t\treturn value;\n\t}\n\n\tprivate _parse(marker: Marker): boolean {\n\t\treturn this._parseEscaped(marker)\n\t\t\t|| this._parseTabstopOrVariableName(marker)\n\t\t\t|| this._parseComplexPlaceholder(marker)\n\t\t\t|| this._parseComplexVariable(marker)\n\t\t\t|| this._parseAnything(marker);\n\t}\n\n\t// \\$, \\\\, \\} -> just text\n\tprivate _parseEscaped(marker: Marker): boolean {\n\t\tlet value: string;\n\t\tif (value = this._accept(TokenType.Backslash, true)) {\n\t\t\t// saw a backslash, append escaped token or that backslash\n\t\t\tvalue = this._accept(TokenType.Dollar, true)\n\t\t\t\t|| this._accept(TokenType.CurlyClose, true)\n\t\t\t\t|| this._accept(TokenType.Backslash, true)\n\t\t\t\t|| value;\n\n\t\t\tmarker.appendChild(new Text(value));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// $foo -> variable, $1 -> tabstop\n\tprivate _parseTabstopOrVariableName(parent: Marker): boolean {\n\t\tlet value: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& (value = this._accept(TokenType.VariableName, true) || this._accept(TokenType.Int, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tparent.appendChild(/^\\d+$/.test(value!)\n\t\t\t? new Placeholder(Number(value!))\n\t\t\t: new Variable(value!)\n\t\t);\n\t\treturn true;\n\t}\n\n\t// ${1:<children>}, ${1} -> placeholder\n\tprivate _parseComplexPlaceholder(parent: Marker): boolean {\n\t\tlet index: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& this._accept(TokenType.CurlyOpen)\n\t\t\t&& (index = this._accept(TokenType.Int, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tconst placeholder = new Placeholder(Number(index!));\n\n\t\tif (this._accept(TokenType.Colon)) {\n\t\t\t// ${1:<children>}\n\t\t\twhile (true) {\n\n\t\t\t\t// ...} -> done\n\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._parse(placeholder)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// fallback\n\t\t\t\tparent.appendChild(new Text('${' + index! + ':'));\n\t\t\t\tplaceholder.children.forEach(parent.appendChild, parent);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (placeholder.index > 0 && this._accept(TokenType.Pipe)) {\n\t\t\t// ${1|one,two,three|}\n\t\t\tconst choice = new Choice();\n\n\t\t\twhile (true) {\n\t\t\t\tif (this._parseChoiceElement(choice)) {\n\n\t\t\t\t\tif (this._accept(TokenType.Comma)) {\n\t\t\t\t\t\t// opt, -> more\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._accept(TokenType.Pipe)) {\n\t\t\t\t\t\tplaceholder.appendChild(choice);\n\t\t\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\t\t\t// ..|} -> done\n\t\t\t\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${1/<regex>/<format>/<options>}\n\t\t\tif (this._parseTransform(placeholder)) {\n\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${1}\n\t\t\tparent.appendChild(placeholder);\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\t// ${1 <- missing curly or colon\n\t\t\treturn this._backTo(token);\n\t\t}\n\t}\n\n\tprivate _parseChoiceElement(parent: Choice): boolean {\n\t\tconst token = this._token;\n\t\tconst values: string[] = [];\n\n\t\twhile (true) {\n\t\t\tif (this._token.type === TokenType.Comma || this._token.type === TokenType.Pipe) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet value: string;\n\t\t\tif (value = this._accept(TokenType.Backslash, true)) {\n\t\t\t\t// \\, \\|, or \\\\\n\t\t\t\tvalue = this._accept(TokenType.Comma, true)\n\t\t\t\t\t|| this._accept(TokenType.Pipe, true)\n\t\t\t\t\t|| this._accept(TokenType.Backslash, true)\n\t\t\t\t\t|| value;\n\t\t\t} else {\n\t\t\t\tvalue = this._accept(undefined, true);\n\t\t\t}\n\t\t\tif (!value) {\n\t\t\t\t// EOF\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvalues.push(value);\n\t\t}\n\n\t\tif (values.length === 0) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\t\t}\n\n\t\tparent.appendChild(new Text(values.join('')));\n\t\treturn true;\n\t}\n\n\t// ${foo:<children>}, ${foo} -> variable\n\tprivate _parseComplexVariable(parent: Marker): boolean {\n\t\tlet name: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& this._accept(TokenType.CurlyOpen)\n\t\t\t&& (name = this._accept(TokenType.VariableName, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tconst variable = new Variable(name!);\n\n\t\tif (this._accept(TokenType.Colon)) {\n\t\t\t// ${foo:<children>}\n\t\t\twhile (true) {\n\n\t\t\t\t// ...} -> done\n\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\tparent.appendChild(variable);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._parse(variable)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// fallback\n\t\t\t\tparent.appendChild(new Text('${' + name! + ':'));\n\t\t\t\tvariable.children.forEach(parent.appendChild, parent);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${foo/<regex>/<format>/<options>}\n\t\t\tif (this._parseTransform(variable)) {\n\t\t\t\tparent.appendChild(variable);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${foo}\n\t\t\tparent.appendChild(variable);\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\t// ${foo <- missing curly or colon\n\t\t\treturn this._backTo(token);\n\t\t}\n\t}\n\n\tprivate _parseTransform(parent: TransformableMarker): boolean {\n\t\t// ...<regex>/<format>/<options>}\n\n\t\tlet transform = new Transform();\n\t\tlet regexValue = '';\n\t\tlet regexOptions = '';\n\n\t\t// (1) /regex\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet escaped: string;\n\t\t\tif (escaped = this._accept(TokenType.Backslash, true)) {\n\t\t\t\tescaped = this._accept(TokenType.Forwardslash, true) || escaped;\n\t\t\t\tregexValue += escaped;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\t\tregexValue += this._accept(undefined, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// (2) /format\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet escaped: string;\n\t\t\tif (escaped = this._accept(TokenType.Backslash, true)) {\n\t\t\t\tescaped = this._accept(TokenType.Backslash, true) || this._accept(TokenType.Forwardslash, true) || escaped;\n\t\t\t\ttransform.appendChild(new Text(escaped));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this._parseFormatString(transform) || this._parseAnything(transform)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// (3) /option\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\t\tregexOptions += this._accept(undefined, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\ttransform.regexp = new RegExp(regexValue, regexOptions);\n\t\t} catch (e) {\n\t\t\t// invalid regexp\n\t\t\treturn false;\n\t\t}\n\n\t\tparent.transform = transform;\n\t\treturn true;\n\t}\n\n\tprivate _parseFormatString(parent: Transform): boolean {\n\n\t\tconst token = this._token;\n\t\tif (!this._accept(TokenType.Dollar)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet complex = false;\n\t\tif (this._accept(TokenType.CurlyOpen)) {\n\t\t\tcomplex = true;\n\t\t}\n\n\t\tlet index = this._accept(TokenType.Int, true);\n\n\t\tif (!index) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (!complex) {\n\t\t\t// $1\n\t\t\tparent.appendChild(new FormatString(Number(index)));\n\t\t\treturn true;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${1}\n\t\t\tparent.appendChild(new FormatString(Number(index)));\n\t\t\treturn true;\n\n\t\t} else if (!this._accept(TokenType.Colon)) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${1:/upcase}\n\t\t\tlet shorthand = this._accept(TokenType.VariableName, true);\n\t\t\tif (!shorthand || !this._accept(TokenType.CurlyClose)) {\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), shorthand));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Plus)) {\n\t\t\t// ${1:+<if>}\n\t\t\tlet ifValue = this._until(TokenType.CurlyClose);\n\t\t\tif (ifValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Dash)) {\n\t\t\t// ${2:-<else>}\n\t\t\tlet elseValue = this._until(TokenType.CurlyClose);\n\t\t\tif (elseValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.QuestionMark)) {\n\t\t\t// ${2:?<if>:<else>}\n\t\t\tlet ifValue = this._until(TokenType.Colon);\n\t\t\tif (ifValue) {\n\t\t\t\tlet elseValue = this._until(TokenType.CurlyClose);\n\t\t\t\tif (elseValue) {\n\t\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\t// ${1:<else>}\n\t\t\tlet elseValue = this._until(TokenType.CurlyClose);\n\t\t\tif (elseValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tthis._backTo(token);\n\t\treturn false;\n\t}\n\n\tprivate _parseAnything(marker: Marker): boolean {\n\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\tmarker.appendChild(new Text(this._scanner.tokenText(this._token)));\n\t\t\tthis._accept(undefined);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}]}