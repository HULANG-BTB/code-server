{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/backup/common/backup.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/backup/common/backup.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IBackupFileService = instantiation_1.createDecorator('backupFileService');\nexports.BACKUP_FILE_RESOLVE_OPTIONS = { acceptTextOnly: true, encoding: 'utf8' };\nexports.BACKUP_FILE_UPDATE_OPTIONS = { encoding: 'utf8' };\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/backup/common/backup.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/backup/common/backup.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAIpE,QAAA,kBAAkB,GAAG,+BAAe,CAAqB,mBAAmB,CAAC,CAAC;AAE9E,QAAA,2BAA2B,GAA2B,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AACjG,QAAA,0BAA0B,GAA0B,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as Uri } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IResolveContentOptions, IUpdateContentOptions, ITextSnapshot } from 'vs/platform/files/common/files';\nimport { ITextBufferFactory } from 'vs/editor/common/model';\n\nexport const IBackupFileService = createDecorator<IBackupFileService>('backupFileService');\n\nexport const BACKUP_FILE_RESOLVE_OPTIONS: IResolveContentOptions = { acceptTextOnly: true, encoding: 'utf8' };\nexport const BACKUP_FILE_UPDATE_OPTIONS: IUpdateContentOptions = { encoding: 'utf8' };\n\n/**\n * A service that handles any I/O and state associated with the backup system.\n */\nexport interface IBackupFileService {\n\t_serviceBrand: any;\n\n\t/**\n\t * Finds out if there are any backups stored.\n\t */\n\thasBackups(): Promise<boolean>;\n\n\t/**\n\t * Loads the backup resource for a particular resource within the current workspace.\n\t *\n\t * @param resource The resource that is backed up.\n\t * @return The backup resource if any.\n\t */\n\tloadBackupResource(resource: Uri): Promise<Uri | undefined>;\n\n\t/**\n\t * Given a resource, returns the associated backup resource.\n\t *\n\t * @param resource The resource to get the backup resource for.\n\t * @return The backup resource.\n\t */\n\ttoBackupResource(resource: Uri): Uri;\n\n\t/**\n\t * Backs up a resource.\n\t *\n\t * @param resource The resource to back up.\n\t * @param content The content of the resource as snapshot.\n\t * @param versionId The version id of the resource to backup.\n\t */\n\tbackupResource(resource: Uri, content: ITextSnapshot, versionId?: number): Promise<void>;\n\n\t/**\n\t * Gets a list of file backups for the current workspace.\n\t *\n\t * @return The list of backups.\n\t */\n\tgetWorkspaceFileBackups(): Promise<Uri[]>;\n\n\t/**\n\t * Resolves the backup for the given resource.\n\t *\n\t * @param value The contents from a backup resource as stream.\n\t * @return The backup file's backed up content as text buffer factory.\n\t */\n\tresolveBackupContent(backup: Uri): Promise<ITextBufferFactory | undefined>;\n\n\t/**\n\t * Discards the backup associated with a resource if it exists..\n\t *\n\t * @param resource The resource whose backup is being discarded discard to back up.\n\t */\n\tdiscardResourceBackup(resource: Uri): Promise<void>;\n\n\t/**\n\t * Discards all backups associated with the current workspace and prevents further backups from\n\t * being made.\n\t */\n\tdiscardAllWorkspaceBackups(): Promise<void>;\n}\n"]}]}