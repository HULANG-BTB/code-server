{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/gridview.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/gridview.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"vs/css!./gridview\");\nvar event_1 = require(\"vs/base/common/event\");\nvar sash_1 = require(\"vs/base/browser/ui/sash/sash\");\nvar splitview_1 = require(\"vs/base/browser/ui/splitview/splitview\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar color_1 = require(\"vs/base/common/color\");\nvar splitview_2 = require(\"vs/base/browser/ui/splitview/splitview\");\nexports.Sizing = splitview_2.Sizing;\nexports.LayoutPriority = splitview_2.LayoutPriority;\nvar sash_2 = require(\"vs/base/browser/ui/sash/sash\");\nexports.Orientation = sash_2.Orientation;\nfunction orthogonal(orientation) {\n    return orientation === sash_1.Orientation.VERTICAL ? sash_1.Orientation.HORIZONTAL : sash_1.Orientation.VERTICAL;\n}\nexports.orthogonal = orthogonal;\nfunction isGridBranchNode(node) {\n    return !!node.children;\n}\nexports.isGridBranchNode = isGridBranchNode;\nvar defaultStyles = {\n    separatorBorder: color_1.Color.transparent\n};\nvar BranchNode = /** @class */ (function () {\n    function BranchNode(orientation, styles, proportionalLayout, size, orthogonalSize) {\n        if (size === void 0) { size = 0; }\n        if (orthogonalSize === void 0) { orthogonalSize = 0; }\n        this.orientation = orientation;\n        this.proportionalLayout = proportionalLayout;\n        this.children = [];\n        this._onDidChange = new event_1.Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.childrenChangeDisposable = lifecycle_1.Disposable.None;\n        this._onDidSashReset = new event_1.Emitter();\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.splitviewSashResetDisposable = lifecycle_1.Disposable.None;\n        this.childrenSashResetDisposable = lifecycle_1.Disposable.None;\n        this._styles = styles;\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        this.element = dom_1.$('.monaco-grid-branch-node');\n        this.splitview = new splitview_1.SplitView(this.element, { orientation: orientation, styles: styles, proportionalLayout: proportionalLayout });\n        this.splitview.layout(size);\n        var onDidSashReset = event_1.Event.map(this.splitview.onDidSashReset, function (i) { return [i]; });\n        this.splitviewSashResetDisposable = onDidSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n    }\n    Object.defineProperty(BranchNode.prototype, \"size\", {\n        get: function () { return this._size; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"orthogonalSize\", {\n        get: function () { return this._orthogonalSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"styles\", {\n        get: function () { return this._styles; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"width\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"height\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"minimumSize\", {\n        get: function () {\n            return this.children.length === 0 ? 0 : Math.max.apply(Math, this.children.map(function (c) { return c.minimumOrthogonalSize; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"maximumSize\", {\n        get: function () {\n            return Math.min.apply(Math, this.children.map(function (c) { return c.maximumOrthogonalSize; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"minimumOrthogonalSize\", {\n        get: function () {\n            return this.splitview.minimumSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"maximumOrthogonalSize\", {\n        get: function () {\n            return this.splitview.maximumSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"minimumWidth\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"minimumHeight\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"maximumWidth\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"maximumHeight\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"orthogonalStartSash\", {\n        get: function () { return this.splitview.orthogonalStartSash; },\n        set: function (sash) { this.splitview.orthogonalStartSash = sash; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BranchNode.prototype, \"orthogonalEndSash\", {\n        get: function () { return this.splitview.orthogonalEndSash; },\n        set: function (sash) { this.splitview.orthogonalEndSash = sash; },\n        enumerable: true,\n        configurable: true\n    });\n    BranchNode.prototype.style = function (styles) {\n        this._styles = styles;\n        this.splitview.style(styles);\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (child instanceof BranchNode) {\n                child.style(styles);\n            }\n        }\n    };\n    BranchNode.prototype.layout = function (size) {\n        this._orthogonalSize = size;\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.orthogonalLayout(size);\n        }\n    };\n    BranchNode.prototype.orthogonalLayout = function (size) {\n        this._size = size;\n        this.splitview.layout(size);\n    };\n    BranchNode.prototype.addChild = function (node, size, index) {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.addView(node, size, index);\n        this._addChild(node, index);\n        this.onDidChildrenChange();\n    };\n    BranchNode.prototype._addChild = function (node, index) {\n        var first = index === 0;\n        var last = index === this.children.length;\n        this.children.splice(index, 0, node);\n        node.orthogonalStartSash = this.splitview.sashes[index - 1];\n        node.orthogonalEndSash = this.splitview.sashes[index];\n        if (!first) {\n            this.children[index - 1].orthogonalEndSash = this.splitview.sashes[index - 1];\n        }\n        if (!last) {\n            this.children[index + 1].orthogonalStartSash = this.splitview.sashes[index];\n        }\n    };\n    BranchNode.prototype.removeChild = function (index, sizing) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.removeView(index, sizing);\n        this._removeChild(index);\n        this.onDidChildrenChange();\n    };\n    BranchNode.prototype._removeChild = function (index) {\n        var first = index === 0;\n        var last = index === this.children.length - 1;\n        var child = this.children.splice(index, 1)[0];\n        if (!first) {\n            this.children[index - 1].orthogonalEndSash = this.splitview.sashes[index - 1];\n        }\n        if (!last) { // [0,1,2,3] (2) => [0,1,3]\n            this.children[index].orthogonalStartSash = this.splitview.sashes[Math.max(index - 1, 0)];\n        }\n        return child;\n    };\n    BranchNode.prototype.moveChild = function (from, to) {\n        if (from === to) {\n            return;\n        }\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n        if (to < 0 || to > this.children.length) {\n            throw new Error('Invalid to index');\n        }\n        if (from < to) {\n            to--;\n        }\n        this.splitview.moveView(from, to);\n        var child = this._removeChild(from);\n        this._addChild(child, to);\n    };\n    BranchNode.prototype.swapChildren = function (from, to) {\n        var _a, _b;\n        if (from === to) {\n            return;\n        }\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n        if (to < 0 || to >= this.children.length) {\n            throw new Error('Invalid to index');\n        }\n        this.splitview.swapViews(from, to);\n        _a = [this.children[to].orthogonalStartSash, this.children[to].orthogonalEndSash, this.children[from].orthogonalStartSash, this.children[from].orthogonalEndSash], this.children[from].orthogonalStartSash = _a[0], this.children[from].orthogonalEndSash = _a[1], this.children[to].orthogonalStartSash = _a[2], this.children[to].orthogonalEndSash = _a[3];\n        _b = [this.children[to], this.children[from]], this.children[from] = _b[0], this.children[to] = _b[1];\n    };\n    BranchNode.prototype.resizeChild = function (index, size) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.resizeView(index, size);\n    };\n    BranchNode.prototype.distributeViewSizes = function (recursive) {\n        if (recursive === void 0) { recursive = false; }\n        this.splitview.distributeViewSizes();\n        if (recursive) {\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child instanceof BranchNode) {\n                    child.distributeViewSizes(true);\n                }\n            }\n        }\n    };\n    BranchNode.prototype.getChildSize = function (index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        return this.splitview.getViewSize(index);\n    };\n    BranchNode.prototype.onDidChildrenChange = function () {\n        var onDidChildrenChange = event_1.Event.map(event_1.Event.any.apply(event_1.Event, this.children.map(function (c) { return c.onDidChange; })), function () { return undefined; });\n        this.childrenChangeDisposable.dispose();\n        this.childrenChangeDisposable = onDidChildrenChange(this._onDidChange.fire, this._onDidChange);\n        var onDidChildrenSashReset = event_1.Event.any.apply(event_1.Event, this.children.map(function (c, i) { return event_1.Event.map(c.onDidSashReset, function (location) { return [i].concat(location); }); }));\n        this.childrenSashResetDisposable.dispose();\n        this.childrenSashResetDisposable = onDidChildrenSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n        this._onDidChange.fire(undefined);\n    };\n    BranchNode.prototype.trySet2x2 = function (other) {\n        if (this.children.length !== 2 || other.children.length !== 2) {\n            return lifecycle_1.Disposable.None;\n        }\n        if (this.getChildSize(0) !== other.getChildSize(0)) {\n            return lifecycle_1.Disposable.None;\n        }\n        var _a = this.children, firstChild = _a[0], secondChild = _a[1];\n        var _b = other.children, otherFirstChild = _b[0], otherSecondChild = _b[1];\n        if (!(firstChild instanceof LeafNode) || !(secondChild instanceof LeafNode)) {\n            return lifecycle_1.Disposable.None;\n        }\n        if (!(otherFirstChild instanceof LeafNode) || !(otherSecondChild instanceof LeafNode)) {\n            return lifecycle_1.Disposable.None;\n        }\n        if (this.orientation === sash_1.Orientation.VERTICAL) {\n            secondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = firstChild;\n            firstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = secondChild;\n            otherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = otherFirstChild;\n            otherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = otherSecondChild;\n        }\n        else {\n            otherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = firstChild;\n            otherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = secondChild;\n            firstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = otherFirstChild;\n            secondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = otherSecondChild;\n        }\n        var mySash = this.splitview.sashes[0];\n        var otherSash = other.splitview.sashes[0];\n        mySash.linkedSash = otherSash;\n        otherSash.linkedSash = mySash;\n        this._onDidChange.fire(undefined);\n        other._onDidChange.fire(undefined);\n        return lifecycle_1.toDisposable(function () {\n            mySash.linkedSash = otherSash.linkedSash = undefined;\n            firstChild.linkedHeightNode = firstChild.linkedWidthNode = undefined;\n            secondChild.linkedHeightNode = secondChild.linkedWidthNode = undefined;\n            otherFirstChild.linkedHeightNode = otherFirstChild.linkedWidthNode = undefined;\n            otherSecondChild.linkedHeightNode = otherSecondChild.linkedWidthNode = undefined;\n        });\n    };\n    BranchNode.prototype.dispose = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.dispose();\n        }\n        this._onDidChange.dispose();\n        this._onDidSashReset.dispose();\n        this.splitviewSashResetDisposable.dispose();\n        this.childrenSashResetDisposable.dispose();\n        this.childrenChangeDisposable.dispose();\n        this.splitview.dispose();\n    };\n    return BranchNode;\n}());\nvar LeafNode = /** @class */ (function () {\n    function LeafNode(view, orientation, orthogonalSize) {\n        if (orthogonalSize === void 0) { orthogonalSize = 0; }\n        var _this = this;\n        this.view = view;\n        this.orientation = orientation;\n        this._size = 0;\n        this.onDidSashReset = event_1.Event.None;\n        this._onDidLinkedWidthNodeChange = new event_1.Relay();\n        this._linkedWidthNode = undefined;\n        this._onDidLinkedHeightNodeChange = new event_1.Relay();\n        this._linkedHeightNode = undefined;\n        this._onDidSetLinkedNode = new event_1.Emitter();\n        this._orthogonalSize = orthogonalSize;\n        this._onDidViewChange = event_1.Event.map(this.view.onDidChange, function (e) { return e && (_this.orientation === sash_1.Orientation.VERTICAL ? e.width : e.height); });\n        this.onDidChange = event_1.Event.any(this._onDidViewChange, this._onDidSetLinkedNode.event, this._onDidLinkedWidthNodeChange.event, this._onDidLinkedHeightNodeChange.event);\n    }\n    Object.defineProperty(LeafNode.prototype, \"size\", {\n        get: function () { return this._size; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"orthogonalSize\", {\n        get: function () { return this._orthogonalSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"linkedWidthNode\", {\n        get: function () { return this._linkedWidthNode; },\n        set: function (node) {\n            this._onDidLinkedWidthNodeChange.input = node ? node._onDidViewChange : event_1.Event.None;\n            this._linkedWidthNode = node;\n            this._onDidSetLinkedNode.fire(undefined);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"linkedHeightNode\", {\n        get: function () { return this._linkedHeightNode; },\n        set: function (node) {\n            this._onDidLinkedHeightNodeChange.input = node ? node._onDidViewChange : event_1.Event.None;\n            this._linkedHeightNode = node;\n            this._onDidSetLinkedNode.fire(undefined);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"width\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"height\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"element\", {\n        get: function () {\n            return this.view.element;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"minimumWidth\", {\n        get: function () {\n            return this.linkedWidthNode ? Math.max(this.linkedWidthNode.view.minimumWidth, this.view.minimumWidth) : this.view.minimumWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"maximumWidth\", {\n        get: function () {\n            return this.linkedWidthNode ? Math.min(this.linkedWidthNode.view.maximumWidth, this.view.maximumWidth) : this.view.maximumWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"minimumHeight\", {\n        get: function () {\n            return this.linkedHeightNode ? Math.max(this.linkedHeightNode.view.minimumHeight, this.view.minimumHeight) : this.view.minimumHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"maximumHeight\", {\n        get: function () {\n            return this.linkedHeightNode ? Math.min(this.linkedHeightNode.view.maximumHeight, this.view.maximumHeight) : this.view.maximumHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"minimumSize\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"maximumSize\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"priority\", {\n        get: function () {\n            return this.view.priority;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"snapSize\", {\n        get: function () {\n            return this.view.snapSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"minimumOrthogonalSize\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"maximumOrthogonalSize\", {\n        get: function () {\n            return this.orientation === sash_1.Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"orthogonalStartSash\", {\n        set: function (sash) {\n            // noop\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LeafNode.prototype, \"orthogonalEndSash\", {\n        set: function (sash) {\n            // noop\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafNode.prototype.layout = function (size) {\n        this._size = size;\n        return this.view.layout(this.width, this.height, orthogonal(this.orientation));\n    };\n    LeafNode.prototype.orthogonalLayout = function (size) {\n        this._orthogonalSize = size;\n        return this.view.layout(this.width, this.height, orthogonal(this.orientation));\n    };\n    LeafNode.prototype.dispose = function () { };\n    return LeafNode;\n}());\nfunction flipNode(node, size, orthogonalSize) {\n    if (node instanceof BranchNode) {\n        var result = new BranchNode(orthogonal(node.orientation), node.styles, node.proportionalLayout, size, orthogonalSize);\n        var totalSize = 0;\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            var child = node.children[i];\n            var childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;\n            var newSize = node.size === 0 ? 0 : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n            result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0);\n        }\n        return result;\n    }\n    else {\n        return new LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);\n    }\n}\nvar GridView = /** @class */ (function () {\n    function GridView(options) {\n        if (options === void 0) { options = {}; }\n        this.onDidSashResetRelay = new event_1.Relay();\n        this.onDidSashReset = this.onDidSashResetRelay.event;\n        this.disposable2x2 = lifecycle_1.Disposable.None;\n        this._onDidChange = new event_1.Relay();\n        this.onDidChange = this._onDidChange.event;\n        this.element = dom_1.$('.monaco-grid-view');\n        this.styles = options.styles || defaultStyles;\n        this.proportionalLayout = typeof options.proportionalLayout !== 'undefined' ? !!options.proportionalLayout : true;\n        this.root = new BranchNode(sash_1.Orientation.VERTICAL, this.styles, this.proportionalLayout);\n    }\n    Object.defineProperty(GridView.prototype, \"root\", {\n        get: function () {\n            return this._root;\n        },\n        set: function (root) {\n            var oldRoot = this._root;\n            if (oldRoot) {\n                this.element.removeChild(oldRoot.element);\n                oldRoot.dispose();\n            }\n            this._root = root;\n            this.element.appendChild(root.element);\n            this.onDidSashResetRelay.input = root.onDidSashReset;\n            this._onDidChange.input = event_1.Event.map(root.onDidChange, function () { return undefined; }); // TODO\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"orientation\", {\n        get: function () {\n            return this._root.orientation;\n        },\n        set: function (orientation) {\n            if (this._root.orientation === orientation) {\n                return;\n            }\n            var _a = this._root, size = _a.size, orthogonalSize = _a.orthogonalSize;\n            this.root = flipNode(this._root, orthogonalSize, size);\n            this.root.layout(size);\n            this.root.orthogonalLayout(orthogonalSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"width\", {\n        get: function () { return this.root.width; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"height\", {\n        get: function () { return this.root.height; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"minimumWidth\", {\n        get: function () { return this.root.minimumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"minimumHeight\", {\n        get: function () { return this.root.minimumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"maximumWidth\", {\n        get: function () { return this.root.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridView.prototype, \"maximumHeight\", {\n        get: function () { return this.root.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    GridView.prototype.style = function (styles) {\n        this.styles = styles;\n        this.root.style(styles);\n    };\n    GridView.prototype.layout = function (width, height) {\n        var _a = this.root.orientation === sash_1.Orientation.HORIZONTAL ? [height, width] : [width, height], size = _a[0], orthogonalSize = _a[1];\n        this.root.layout(size);\n        this.root.orthogonalLayout(orthogonalSize);\n    };\n    GridView.prototype.addView = function (view, size, location) {\n        this.disposable2x2.dispose();\n        this.disposable2x2 = lifecycle_1.Disposable.None;\n        var _a = arrays_1.tail2(location), rest = _a[0], index = _a[1];\n        var _b = this.getNode(rest), pathToParent = _b[0], parent = _b[1];\n        if (parent instanceof BranchNode) {\n            var node = new LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);\n            parent.addChild(node, size, index);\n        }\n        else {\n            var _c = arrays_1.tail2(pathToParent), grandParent = _c[1];\n            var _d = arrays_1.tail2(rest), parentIndex = _d[1];\n            grandParent.removeChild(parentIndex);\n            var newParent = new BranchNode(parent.orientation, this.styles, this.proportionalLayout, parent.size, parent.orthogonalSize);\n            grandParent.addChild(newParent, parent.size, parentIndex);\n            newParent.orthogonalLayout(parent.orthogonalSize);\n            var newSibling = new LeafNode(parent.view, grandParent.orientation, parent.size);\n            newParent.addChild(newSibling, 0, 0);\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = splitview_1.Sizing.Split(0);\n            }\n            var node = new LeafNode(view, grandParent.orientation, parent.size);\n            newParent.addChild(node, size, index);\n        }\n    };\n    GridView.prototype.removeView = function (location, sizing) {\n        this.disposable2x2.dispose();\n        this.disposable2x2 = lifecycle_1.Disposable.None;\n        var _a = arrays_1.tail2(location), rest = _a[0], index = _a[1];\n        var _b = this.getNode(rest), pathToParent = _b[0], parent = _b[1];\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n        var node = parent.children[index];\n        if (!(node instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n        parent.removeChild(index, sizing);\n        if (parent.children.length === 0) {\n            throw new Error('Invalid grid state');\n        }\n        if (parent.children.length > 1) {\n            return node.view;\n        }\n        if (pathToParent.length === 0) { // parent is root\n            var sibling_1 = parent.children[0];\n            if (sibling_1 instanceof LeafNode) {\n                return node.view;\n            }\n            // we must promote sibling to be the new root\n            parent.removeChild(0);\n            this.root = sibling_1;\n            return node.view;\n        }\n        var _c = arrays_1.tail2(pathToParent), grandParent = _c[1];\n        var _d = arrays_1.tail2(rest), parentIndex = _d[1];\n        var sibling = parent.children[0];\n        parent.removeChild(0);\n        var sizes = grandParent.children.map(function (_, i) { return grandParent.getChildSize(i); });\n        grandParent.removeChild(parentIndex, sizing);\n        if (sibling instanceof BranchNode) {\n            sizes.splice.apply(sizes, [parentIndex, 1].concat(sibling.children.map(function (c) { return c.size; })));\n            for (var i = 0; i < sibling.children.length; i++) {\n                var child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n        }\n        else {\n            var newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);\n            grandParent.addChild(newSibling, sibling.orthogonalSize, parentIndex);\n        }\n        for (var i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n        return node.view;\n    };\n    GridView.prototype.moveView = function (parentLocation, from, to) {\n        var _a = this.getNode(parentLocation), parent = _a[1];\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n        parent.moveChild(from, to);\n    };\n    GridView.prototype.swapViews = function (from, to) {\n        var _a = arrays_1.tail2(from), fromRest = _a[0], fromIndex = _a[1];\n        var _b = this.getNode(fromRest), fromParent = _b[1];\n        if (!(fromParent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n        var fromSize = fromParent.getChildSize(fromIndex);\n        var fromNode = fromParent.children[fromIndex];\n        if (!(fromNode instanceof LeafNode)) {\n            throw new Error('Invalid from location');\n        }\n        var _c = arrays_1.tail2(to), toRest = _c[0], toIndex = _c[1];\n        var _d = this.getNode(toRest), toParent = _d[1];\n        if (!(toParent instanceof BranchNode)) {\n            throw new Error('Invalid to location');\n        }\n        var toSize = toParent.getChildSize(toIndex);\n        var toNode = toParent.children[toIndex];\n        if (!(toNode instanceof LeafNode)) {\n            throw new Error('Invalid to location');\n        }\n        if (fromParent === toParent) {\n            fromParent.swapChildren(fromIndex, toIndex);\n        }\n        else {\n            fromParent.removeChild(fromIndex);\n            toParent.removeChild(toIndex);\n            fromParent.addChild(toNode, fromSize, fromIndex);\n            toParent.addChild(fromNode, toSize, toIndex);\n            fromParent.layout(fromParent.orthogonalSize);\n            toParent.layout(toParent.orthogonalSize);\n        }\n    };\n    GridView.prototype.resizeView = function (location, size) {\n        var _a = arrays_1.tail2(location), rest = _a[0], index = _a[1];\n        var _b = this.getNode(rest), parent = _b[1];\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n        parent.resizeChild(index, size);\n    };\n    GridView.prototype.getViewSize = function (location) {\n        var _a = this.getNode(location), node = _a[1];\n        return { width: node.width, height: node.height };\n    };\n    GridView.prototype.maximizeViewSize = function (location) {\n        var _a = this.getNode(location), ancestors = _a[0], node = _a[1];\n        if (!(node instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n        for (var i = 0; i < ancestors.length; i++) {\n            ancestors[i].resizeChild(location[i], Number.POSITIVE_INFINITY);\n        }\n    };\n    GridView.prototype.distributeViewSizes = function (location) {\n        if (!location) {\n            this.root.distributeViewSizes(true);\n            return;\n        }\n        var _a = this.getNode(location), node = _a[1];\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n        node.distributeViewSizes();\n    };\n    GridView.prototype.getViews = function () {\n        return this._getViews(this.root, this.orientation, { top: 0, left: 0, width: this.width, height: this.height });\n    };\n    GridView.prototype._getViews = function (node, orientation, box) {\n        if (node instanceof LeafNode) {\n            return { view: node.view, box: box };\n        }\n        var children = [];\n        var offset = 0;\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childOrientation = orthogonal(orientation);\n            var childBox = orientation === sash_1.Orientation.HORIZONTAL\n                ? { top: box.top, left: box.left + offset, width: child.width, height: box.height }\n                : { top: box.top + offset, left: box.left, width: box.width, height: child.height };\n            children.push(this._getViews(child, childOrientation, childBox));\n            offset += orientation === sash_1.Orientation.HORIZONTAL ? child.width : child.height;\n        }\n        return { children: children, box: box };\n    };\n    GridView.prototype.getNode = function (location, node, path) {\n        if (node === void 0) { node = this.root; }\n        if (path === void 0) { path = []; }\n        if (location.length === 0) {\n            return [path, node];\n        }\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n        var index = location[0], rest = location.slice(1);\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n        var child = node.children[index];\n        path.push(node);\n        return this.getNode(rest, child, path);\n    };\n    GridView.prototype.trySet2x2 = function () {\n        this.disposable2x2.dispose();\n        this.disposable2x2 = lifecycle_1.Disposable.None;\n        if (this.root.children.length !== 2) {\n            return;\n        }\n        var _a = this.root.children, first = _a[0], second = _a[1];\n        if (!(first instanceof BranchNode) || !(second instanceof BranchNode)) {\n            return;\n        }\n        this.disposable2x2 = first.trySet2x2(second);\n    };\n    GridView.prototype.dispose = function () {\n        this.onDidSashResetRelay.dispose();\n        this.root.dispose();\n        if (this.element && this.element.parentElement) {\n            this.element.parentElement.removeChild(this.element);\n        }\n    };\n    return GridView;\n}());\nexports.GridView = GridView;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/gridview.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/gridview.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./gridview';\nimport { Event, Emitter, Relay } from 'vs/base/common/event';\nimport { Orientation, Sash } from 'vs/base/browser/ui/sash/sash';\nimport { SplitView, IView as ISplitView, Sizing, LayoutPriority, ISplitViewStyles } from 'vs/base/browser/ui/splitview/splitview';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { $ } from 'vs/base/browser/dom';\nimport { tail2 as tail } from 'vs/base/common/arrays';\nimport { Color } from 'vs/base/common/color';\n\nexport { Sizing, LayoutPriority } from 'vs/base/browser/ui/splitview/splitview';\nexport { Orientation } from 'vs/base/browser/ui/sash/sash';\n\nexport interface IView {\n\treadonly element: HTMLElement;\n\treadonly minimumWidth: number;\n\treadonly maximumWidth: number;\n\treadonly minimumHeight: number;\n\treadonly maximumHeight: number;\n\treadonly onDidChange: Event<{ width: number; height: number; } | undefined>;\n\treadonly priority?: LayoutPriority;\n\treadonly snapSize?: number;\n\tlayout(width: number, height: number, orientation: Orientation): void;\n}\n\nexport function orthogonal(orientation: Orientation): Orientation {\n\treturn orientation === Orientation.VERTICAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n}\n\nexport interface Box {\n\ttop: number;\n\tleft: number;\n\twidth: number;\n\theight: number;\n}\n\nexport interface GridLeafNode {\n\treadonly view: IView;\n\treadonly box: Box;\n}\n\nexport interface GridBranchNode {\n\treadonly children: GridNode[];\n\treadonly box: Box;\n}\n\nexport type GridNode = GridLeafNode | GridBranchNode;\n\nexport function isGridBranchNode(node: GridNode): node is GridBranchNode {\n\treturn !!(node as any).children;\n}\n\nexport interface IGridViewStyles extends ISplitViewStyles { }\n\nconst defaultStyles: IGridViewStyles = {\n\tseparatorBorder: Color.transparent\n};\n\nexport interface IGridViewOptions {\n\tstyles?: IGridViewStyles;\n\tproportionalLayout?: boolean; // default true\n}\n\nclass BranchNode implements ISplitView, IDisposable {\n\n\treadonly element: HTMLElement;\n\treadonly children: Node[] = [];\n\tprivate splitview: SplitView;\n\n\tprivate _size: number;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\tprivate _styles: IGridViewStyles;\n\tget styles(): IGridViewStyles { return this._styles; }\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.children.length === 0 ? 0 : Math.max(...this.children.map(c => c.minimumOrthogonalSize));\n\t}\n\n\tget maximumSize(): number {\n\t\treturn Math.min(...this.children.map(c => c.maximumOrthogonalSize));\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.splitview.minimumSize;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.splitview.maximumSize;\n\t}\n\n\tget minimumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;\n\t}\n\n\tget minimumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;\n\t}\n\n\tget maximumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;\n\t}\n\n\tget maximumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;\n\t}\n\n\tprivate _onDidChange = new Emitter<number | undefined>();\n\treadonly onDidChange: Event<number | undefined> = this._onDidChange.event;\n\n\tprivate childrenChangeDisposable: IDisposable = Disposable.None;\n\n\tprivate _onDidSashReset = new Emitter<number[]>();\n\treadonly onDidSashReset: Event<number[]> = this._onDidSashReset.event;\n\tprivate splitviewSashResetDisposable: IDisposable = Disposable.None;\n\tprivate childrenSashResetDisposable: IDisposable = Disposable.None;\n\n\tget orthogonalStartSash(): Sash | undefined { return this.splitview.orthogonalStartSash; }\n\tset orthogonalStartSash(sash: Sash | undefined) { this.splitview.orthogonalStartSash = sash; }\n\tget orthogonalEndSash(): Sash | undefined { return this.splitview.orthogonalEndSash; }\n\tset orthogonalEndSash(sash: Sash | undefined) { this.splitview.orthogonalEndSash = sash; }\n\n\tconstructor(\n\t\treadonly orientation: Orientation,\n\t\tstyles: IGridViewStyles,\n\t\treadonly proportionalLayout: boolean,\n\t\tsize: number = 0,\n\t\torthogonalSize: number = 0\n\t) {\n\t\tthis._styles = styles;\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = orthogonalSize;\n\n\t\tthis.element = $('.monaco-grid-branch-node');\n\t\tthis.splitview = new SplitView(this.element, { orientation, styles, proportionalLayout });\n\t\tthis.splitview.layout(size);\n\n\t\tconst onDidSashReset = Event.map(this.splitview.onDidSashReset, i => [i]);\n\t\tthis.splitviewSashResetDisposable = onDidSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis._styles = styles;\n\t\tthis.splitview.style(styles);\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.style(styles);\n\t\t\t}\n\t\t}\n\t}\n\n\tlayout(size: number): void {\n\t\tthis._orthogonalSize = size;\n\n\t\tfor (const child of this.children) {\n\t\t\tchild.orthogonalLayout(size);\n\t\t}\n\t}\n\n\torthogonalLayout(size: number): void {\n\t\tthis._size = size;\n\t\tthis.splitview.layout(size);\n\t}\n\n\taddChild(node: Node, size: number | Sizing, index: number): void {\n\t\tif (index < 0 || index > this.children.length) {\n\t\t\tthrow new Error('Invalid index');\n\t\t}\n\n\t\tthis.splitview.addView(node, size, index);\n\t\tthis._addChild(node, index);\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tprivate _addChild(node: Node, index: number): void {\n\t\tconst first = index === 0;\n\t\tconst last = index === this.children.length;\n\t\tthis.children.splice(index, 0, node);\n\t\tnode.orthogonalStartSash = this.splitview.sashes[index - 1];\n\t\tnode.orthogonalEndSash = this.splitview.sashes[index];\n\n\t\tif (!first) {\n\t\t\tthis.children[index - 1].orthogonalEndSash = this.splitview.sashes[index - 1];\n\t\t}\n\n\t\tif (!last) {\n\t\t\tthis.children[index + 1].orthogonalStartSash = this.splitview.sashes[index];\n\t\t}\n\t}\n\n\tremoveChild(index: number, sizing?: Sizing): void {\n\t\tif (index < 0 || index >= this.children.length) {\n\t\t\tthrow new Error('Invalid index');\n\t\t}\n\n\t\tthis.splitview.removeView(index, sizing);\n\t\tthis._removeChild(index);\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tprivate _removeChild(index: number): Node {\n\t\tconst first = index === 0;\n\t\tconst last = index === this.children.length - 1;\n\t\tconst [child] = this.children.splice(index, 1);\n\n\t\tif (!first) {\n\t\t\tthis.children[index - 1].orthogonalEndSash = this.splitview.sashes[index - 1];\n\t\t}\n\n\t\tif (!last) { // [0,1,2,3] (2) => [0,1,3]\n\t\t\tthis.children[index].orthogonalStartSash = this.splitview.sashes[Math.max(index - 1, 0)];\n\t\t}\n\n\t\treturn child;\n\t}\n\n\tmoveChild(from: number, to: number): void {\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (from < 0 || from >= this.children.length) {\n\t\t\tthrow new Error('Invalid from index');\n\t\t}\n\n\t\tif (to < 0 || to > this.children.length) {\n\t\t\tthrow new Error('Invalid to index');\n\t\t}\n\n\t\tif (from < to) {\n\t\t\tto--;\n\t\t}\n\n\t\tthis.splitview.moveView(from, to);\n\n\t\tconst child = this._removeChild(from);\n\t\tthis._addChild(child, to);\n\t}\n\n\tswapChildren(from: number, to: number): void {\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (from < 0 || from >= this.children.length) {\n\t\t\tthrow new Error('Invalid from index');\n\t\t}\n\n\t\tif (to < 0 || to >= this.children.length) {\n\t\t\tthrow new Error('Invalid to index');\n\t\t}\n\n\t\tthis.splitview.swapViews(from, to);\n\t\t[this.children[from].orthogonalStartSash, this.children[from].orthogonalEndSash, this.children[to].orthogonalStartSash, this.children[to].orthogonalEndSash] = [this.children[to].orthogonalStartSash, this.children[to].orthogonalEndSash, this.children[from].orthogonalStartSash, this.children[from].orthogonalEndSash];\n\t\t[this.children[from], this.children[to]] = [this.children[to], this.children[from]];\n\t}\n\n\tresizeChild(index: number, size: number): void {\n\t\tif (index < 0 || index >= this.children.length) {\n\t\t\tthrow new Error('Invalid index');\n\t\t}\n\n\t\tthis.splitview.resizeView(index, size);\n\t}\n\n\tdistributeViewSizes(recursive = false): void {\n\t\tthis.splitview.distributeViewSizes();\n\n\t\tif (recursive) {\n\t\t\tfor (const child of this.children) {\n\t\t\t\tif (child instanceof BranchNode) {\n\t\t\t\t\tchild.distributeViewSizes(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetChildSize(index: number): number {\n\t\tif (index < 0 || index >= this.children.length) {\n\t\t\tthrow new Error('Invalid index');\n\t\t}\n\n\t\treturn this.splitview.getViewSize(index);\n\t}\n\n\tprivate onDidChildrenChange(): void {\n\t\tconst onDidChildrenChange = Event.map(Event.any(...this.children.map(c => c.onDidChange)), () => undefined);\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.childrenChangeDisposable = onDidChildrenChange(this._onDidChange.fire, this._onDidChange);\n\n\t\tconst onDidChildrenSashReset = Event.any(...this.children.map((c, i) => Event.map(c.onDidSashReset, location => [i, ...location])));\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable = onDidChildrenSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\ttrySet2x2(other: BranchNode): IDisposable {\n\t\tif (this.children.length !== 2 || other.children.length !== 2) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.getChildSize(0) !== other.getChildSize(0)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst [firstChild, secondChild] = this.children;\n\t\tconst [otherFirstChild, otherSecondChild] = other.children;\n\n\t\tif (!(firstChild instanceof LeafNode) || !(secondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (!(otherFirstChild instanceof LeafNode) || !(otherSecondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = firstChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = secondChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = otherFirstChild;\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = otherSecondChild;\n\t\t} else {\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = firstChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = secondChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = otherFirstChild;\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = otherSecondChild;\n\t\t}\n\n\t\tconst mySash = this.splitview.sashes[0];\n\t\tconst otherSash = other.splitview.sashes[0];\n\t\tmySash.linkedSash = otherSash;\n\t\totherSash.linkedSash = mySash;\n\n\t\tthis._onDidChange.fire(undefined);\n\t\tother._onDidChange.fire(undefined);\n\n\t\treturn toDisposable(() => {\n\t\t\tmySash.linkedSash = otherSash.linkedSash = undefined;\n\t\t\tfirstChild.linkedHeightNode = firstChild.linkedWidthNode = undefined;\n\t\t\tsecondChild.linkedHeightNode = secondChild.linkedWidthNode = undefined;\n\t\t\totherFirstChild.linkedHeightNode = otherFirstChild.linkedWidthNode = undefined;\n\t\t\totherSecondChild.linkedHeightNode = otherSecondChild.linkedWidthNode = undefined;\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.dispose();\n\t\t}\n\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidSashReset.dispose();\n\n\t\tthis.splitviewSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.splitview.dispose();\n\t}\n}\n\nclass LeafNode implements ISplitView, IDisposable {\n\n\tprivate _size: number = 0;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\treadonly onDidSashReset: Event<number[]> = Event.None;\n\n\tprivate _onDidLinkedWidthNodeChange = new Relay<number | undefined>();\n\tprivate _linkedWidthNode: LeafNode | undefined = undefined;\n\tget linkedWidthNode(): LeafNode | undefined { return this._linkedWidthNode; }\n\tset linkedWidthNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedWidthNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedWidthNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate _onDidLinkedHeightNodeChange = new Relay<number | undefined>();\n\tprivate _linkedHeightNode: LeafNode | undefined = undefined;\n\tget linkedHeightNode(): LeafNode | undefined { return this._linkedHeightNode; }\n\tset linkedHeightNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedHeightNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedHeightNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate _onDidSetLinkedNode = new Emitter<number | undefined>();\n\tprivate _onDidViewChange: Event<number | undefined>;\n\treadonly onDidChange: Event<number | undefined>;\n\n\tconstructor(\n\t\treadonly view: IView,\n\t\treadonly orientation: Orientation,\n\t\torthogonalSize: number = 0\n\t) {\n\t\tthis._orthogonalSize = orthogonalSize;\n\n\t\tthis._onDidViewChange = Event.map(this.view.onDidChange, e => e && (this.orientation === Orientation.VERTICAL ? e.width : e.height));\n\t\tthis.onDidChange = Event.any(this._onDidViewChange, this._onDidSetLinkedNode.event, this._onDidLinkedWidthNodeChange.event, this._onDidLinkedHeightNodeChange.event);\n\t}\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget element(): HTMLElement {\n\t\treturn this.view.element;\n\t}\n\n\tprivate get minimumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.max(this.linkedWidthNode.view.minimumWidth, this.view.minimumWidth) : this.view.minimumWidth;\n\t}\n\n\tprivate get maximumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.min(this.linkedWidthNode.view.maximumWidth, this.view.maximumWidth) : this.view.maximumWidth;\n\t}\n\n\tprivate get minimumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.max(this.linkedHeightNode.view.minimumHeight, this.view.minimumHeight) : this.view.minimumHeight;\n\t}\n\n\tprivate get maximumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.min(this.linkedHeightNode.view.maximumHeight, this.view.maximumHeight) : this.view.maximumHeight;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;\n\t}\n\n\tget maximumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;\n\t}\n\n\tget priority(): LayoutPriority | undefined {\n\t\treturn this.view.priority;\n\t}\n\n\tget snapSize(): number | undefined {\n\t\treturn this.view.snapSize;\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;\n\t}\n\n\tset orthogonalStartSash(sash: Sash) {\n\t\t// noop\n\t}\n\n\tset orthogonalEndSash(sash: Sash) {\n\t\t// noop\n\t}\n\n\tlayout(size: number): void {\n\t\tthis._size = size;\n\t\treturn this.view.layout(this.width, this.height, orthogonal(this.orientation));\n\t}\n\n\torthogonalLayout(size: number): void {\n\t\tthis._orthogonalSize = size;\n\t\treturn this.view.layout(this.width, this.height, orthogonal(this.orientation));\n\t}\n\n\tdispose(): void { }\n}\n\ntype Node = BranchNode | LeafNode;\n\nfunction flipNode<T extends Node>(node: T, size: number, orthogonalSize: number): T {\n\tif (node instanceof BranchNode) {\n\t\tconst result = new BranchNode(orthogonal(node.orientation), node.styles, node.proportionalLayout, size, orthogonalSize);\n\n\t\tlet totalSize = 0;\n\n\t\tfor (let i = node.children.length - 1; i >= 0; i--) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n\t\t\tlet newSize = node.size === 0 ? 0 : Math.round((size * childSize) / node.size);\n\t\t\ttotalSize += newSize;\n\n\t\t\t// The last view to add should adjust to rounding errors\n\t\t\tif (i === 0) {\n\t\t\t\tnewSize += size - totalSize;\n\t\t\t}\n\n\t\t\tresult.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0);\n\t\t}\n\n\t\treturn result as T;\n\t} else {\n\t\treturn new LeafNode((node as LeafNode).view, orthogonal(node.orientation), orthogonalSize) as T;\n\t}\n}\n\nexport class GridView implements IDisposable {\n\n\treadonly element: HTMLElement;\n\tprivate styles: IGridViewStyles;\n\tprivate proportionalLayout: boolean;\n\n\tprivate _root: BranchNode;\n\tprivate onDidSashResetRelay = new Relay<number[]>();\n\treadonly onDidSashReset: Event<number[]> = this.onDidSashResetRelay.event;\n\n\tprivate disposable2x2: IDisposable = Disposable.None;\n\n\tprivate get root(): BranchNode {\n\t\treturn this._root;\n\t}\n\n\tprivate set root(root: BranchNode) {\n\t\tconst oldRoot = this._root;\n\n\t\tif (oldRoot) {\n\t\t\tthis.element.removeChild(oldRoot.element);\n\t\t\toldRoot.dispose();\n\t\t}\n\n\t\tthis._root = root;\n\t\tthis.element.appendChild(root.element);\n\t\tthis.onDidSashResetRelay.input = root.onDidSashReset;\n\t\tthis._onDidChange.input = Event.map(root.onDidChange, () => undefined); // TODO\n\t}\n\n\tget orientation(): Orientation {\n\t\treturn this._root.orientation;\n\t}\n\n\tset orientation(orientation: Orientation) {\n\t\tif (this._root.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { size, orthogonalSize } = this._root;\n\t\tthis.root = flipNode(this._root, orthogonalSize, size);\n\t\tthis.root.layout(size);\n\t\tthis.root.orthogonalLayout(orthogonalSize);\n\t}\n\n\tget width(): number { return this.root.width; }\n\tget height(): number { return this.root.height; }\n\n\tget minimumWidth(): number { return this.root.minimumWidth; }\n\tget minimumHeight(): number { return this.root.minimumHeight; }\n\tget maximumWidth(): number { return this.root.maximumHeight; }\n\tget maximumHeight(): number { return this.root.maximumHeight; }\n\n\tprivate _onDidChange = new Relay<{ width: number; height: number; } | undefined>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor(options: IGridViewOptions = {}) {\n\t\tthis.element = $('.monaco-grid-view');\n\t\tthis.styles = options.styles || defaultStyles;\n\t\tthis.proportionalLayout = typeof options.proportionalLayout !== 'undefined' ? !!options.proportionalLayout : true;\n\t\tthis.root = new BranchNode(Orientation.VERTICAL, this.styles, this.proportionalLayout);\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis.styles = styles;\n\t\tthis.root.style(styles);\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tconst [size, orthogonalSize] = this.root.orientation === Orientation.HORIZONTAL ? [height, width] : [width, height];\n\t\tthis.root.layout(size);\n\t\tthis.root.orthogonalLayout(orthogonalSize);\n\t}\n\n\taddView(view: IView, size: number | Sizing, location: number[]): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (parent instanceof BranchNode) {\n\t\t\tconst node = new LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);\n\t\t\tparent.addChild(node, size, index);\n\n\t\t} else {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\t\t\tgrandParent.removeChild(parentIndex);\n\n\t\t\tconst newParent = new BranchNode(parent.orientation, this.styles, this.proportionalLayout, parent.size, parent.orthogonalSize);\n\t\t\tgrandParent.addChild(newParent, parent.size, parentIndex);\n\t\t\tnewParent.orthogonalLayout(parent.orthogonalSize);\n\n\t\t\tconst newSibling = new LeafNode(parent.view, grandParent.orientation, parent.size);\n\t\t\tnewParent.addChild(newSibling, 0, 0);\n\n\t\t\tif (typeof size !== 'number' && size.type === 'split') {\n\t\t\t\tsize = Sizing.Split(0);\n\t\t\t}\n\n\t\t\tconst node = new LeafNode(view, grandParent.orientation, parent.size);\n\t\t\tnewParent.addChild(node, size, index);\n\t\t}\n\t}\n\n\tremoveView(location: number[], sizing?: Sizing): IView {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst node = parent.children[index];\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.removeChild(index, sizing);\n\n\t\tif (parent.children.length === 0) {\n\t\t\tthrow new Error('Invalid grid state');\n\t\t}\n\n\t\tif (parent.children.length > 1) {\n\t\t\treturn node.view;\n\t\t}\n\n\t\tif (pathToParent.length === 0) { // parent is root\n\t\t\tconst sibling = parent.children[0];\n\n\t\t\tif (sibling instanceof LeafNode) {\n\t\t\t\treturn node.view;\n\t\t\t}\n\n\t\t\t// we must promote sibling to be the new root\n\t\t\tparent.removeChild(0);\n\t\t\tthis.root = sibling;\n\t\t\treturn node.view;\n\t\t}\n\n\t\tconst [, grandParent] = tail(pathToParent);\n\t\tconst [, parentIndex] = tail(rest);\n\n\t\tconst sibling = parent.children[0];\n\t\tparent.removeChild(0);\n\n\t\tconst sizes = grandParent.children.map((_, i) => grandParent.getChildSize(i));\n\t\tgrandParent.removeChild(parentIndex, sizing);\n\n\t\tif (sibling instanceof BranchNode) {\n\t\t\tsizes.splice(parentIndex, 1, ...sibling.children.map(c => c.size));\n\n\t\t\tfor (let i = 0; i < sibling.children.length; i++) {\n\t\t\t\tconst child = sibling.children[i];\n\t\t\t\tgrandParent.addChild(child, child.size, parentIndex + i);\n\t\t\t}\n\t\t} else {\n\t\t\tconst newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);\n\t\t\tgrandParent.addChild(newSibling, sibling.orthogonalSize, parentIndex);\n\t\t}\n\n\t\tfor (let i = 0; i < sizes.length; i++) {\n\t\t\tgrandParent.resizeChild(i, sizes[i]);\n\t\t}\n\n\t\treturn node.view;\n\t}\n\n\tmoveView(parentLocation: number[], from: number, to: number): void {\n\t\tconst [, parent] = this.getNode(parentLocation);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.moveChild(from, to);\n\t}\n\n\tswapViews(from: number[], to: number[]): void {\n\t\tconst [fromRest, fromIndex] = tail(from);\n\t\tconst [, fromParent] = this.getNode(fromRest);\n\n\t\tif (!(fromParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst fromSize = fromParent.getChildSize(fromIndex);\n\t\tconst fromNode = fromParent.children[fromIndex];\n\n\t\tif (!(fromNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst [toRest, toIndex] = tail(to);\n\t\tconst [, toParent] = this.getNode(toRest);\n\n\t\tif (!(toParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tconst toSize = toParent.getChildSize(toIndex);\n\t\tconst toNode = toParent.children[toIndex];\n\n\t\tif (!(toNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tif (fromParent === toParent) {\n\t\t\tfromParent.swapChildren(fromIndex, toIndex);\n\t\t} else {\n\t\t\tfromParent.removeChild(fromIndex);\n\t\t\ttoParent.removeChild(toIndex);\n\n\t\t\tfromParent.addChild(toNode, fromSize, fromIndex);\n\t\t\ttoParent.addChild(fromNode, toSize, toIndex);\n\n\t\t\tfromParent.layout(fromParent.orthogonalSize);\n\t\t\ttoParent.layout(toParent.orthogonalSize);\n\t\t}\n\t}\n\n\tresizeView(location: number[], size: number): void {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.resizeChild(index, size);\n\t}\n\n\tgetViewSize(location: number[]): { width: number; height: number; } {\n\t\tconst [, node] = this.getNode(location);\n\t\treturn { width: node.width, height: node.height };\n\t}\n\n\tmaximizeViewSize(location: number[]): void {\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tancestors[i].resizeChild(location[i], Number.POSITIVE_INFINITY);\n\t\t}\n\t}\n\n\tdistributeViewSizes(location?: number[]): void {\n\t\tif (!location) {\n\t\t\tthis.root.distributeViewSizes(true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tnode.distributeViewSizes();\n\t}\n\n\tgetViews(): GridBranchNode {\n\t\treturn this._getViews(this.root, this.orientation, { top: 0, left: 0, width: this.width, height: this.height }) as GridBranchNode;\n\t}\n\n\tprivate _getViews(node: Node, orientation: Orientation, box: Box): GridNode {\n\t\tif (node instanceof LeafNode) {\n\t\t\treturn { view: node.view, box };\n\t\t}\n\n\t\tconst children: GridNode[] = [];\n\t\tlet offset = 0;\n\n\t\tfor (const child of node.children) {\n\t\t\tconst childOrientation = orthogonal(orientation);\n\t\t\tconst childBox: Box = orientation === Orientation.HORIZONTAL\n\t\t\t\t? { top: box.top, left: box.left + offset, width: child.width, height: box.height }\n\t\t\t\t: { top: box.top + offset, left: box.left, width: box.width, height: child.height };\n\n\t\t\tchildren.push(this._getViews(child, childOrientation, childBox));\n\t\t\toffset += orientation === Orientation.HORIZONTAL ? child.width : child.height;\n\t\t}\n\n\t\treturn { children, box };\n\t}\n\n\tprivate getNode(location: number[], node: Node = this.root, path: BranchNode[] = []): [BranchNode[], Node] {\n\t\tif (location.length === 0) {\n\t\t\treturn [path, node];\n\t\t}\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst [index, ...rest] = location;\n\n\t\tif (index < 0 || index >= node.children.length) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst child = node.children[index];\n\t\tpath.push(node);\n\n\t\treturn this.getNode(rest, child, path);\n\t}\n\n\ttrySet2x2(): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tif (this.root.children.length !== 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [first, second] = this.root.children;\n\n\t\tif (!(first instanceof BranchNode) || !(second instanceof BranchNode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.disposable2x2 = first.trySet2x2(second);\n\t}\n\n\tdispose(): void {\n\t\tthis.onDidSashResetRelay.dispose();\n\t\tthis.root.dispose();\n\n\t\tif (this.element && this.element.parentElement) {\n\t\t\tthis.element.parentElement.removeChild(this.element);\n\t\t}\n\t}\n}\n"]}]}