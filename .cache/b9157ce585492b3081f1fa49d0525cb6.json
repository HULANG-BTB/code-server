{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/workbench/contrib/feedback/electron-browser/feedback\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/product/node/product\", \"vs/workbench/common/theme\", \"vs/platform/theme/common/themeService\", \"vs/platform/workspace/common/workspace\", \"vs/platform/configuration/common/configuration\", \"vs/base/browser/dom\", \"vs/nls\", \"vs/base/common/actions\"], function (require, exports, lifecycle_1, feedback_1, contextView_1, instantiation_1, product_1, theme_1, themeService_1, workspace_1, configuration_1, dom_1, nls_1, actions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TwitterFeedbackService {\n        combineHashTagsAsString() {\n            return TwitterFeedbackService.HASHTAGS.join(',');\n        }\n        submitFeedback(feedback) {\n            const queryString = `?${feedback.sentiment === 1 ? `hashtags=${this.combineHashTagsAsString()}&` : null}ref_src=twsrc%5Etfw&related=twitterapi%2Ctwitter&text=${encodeURIComponent(feedback.feedback)}&tw_p=tweetbutton&via=${TwitterFeedbackService.VIA_NAME}`;\n            const url = TwitterFeedbackService.TWITTER_URL + queryString;\n            window.open(url);\n        }\n        getCharacterLimit(sentiment) {\n            let length = 0;\n            if (sentiment === 1) {\n                TwitterFeedbackService.HASHTAGS.forEach(element => {\n                    length += element.length + 2;\n                });\n            }\n            if (TwitterFeedbackService.VIA_NAME) {\n                length += ` via @${TwitterFeedbackService.VIA_NAME}`.length;\n            }\n            return 280 - length;\n        }\n    }\n    TwitterFeedbackService.TWITTER_URL = 'https://twitter.com/intent/tweet';\n    TwitterFeedbackService.VIA_NAME = 'code';\n    TwitterFeedbackService.HASHTAGS = ['HappyCoding'];\n    let FeedbackStatusbarItem = class FeedbackStatusbarItem extends theme_1.Themable {\n        constructor(instantiationService, contextViewService, contextService, contextMenuService, configurationService, themeService) {\n            super(themeService);\n            this.instantiationService = instantiationService;\n            this.contextViewService = contextViewService;\n            this.contextService = contextService;\n            this.contextMenuService = contextMenuService;\n            this.configurationService = configurationService;\n            this.enabled = this.configurationService.getValue(feedback_1.FEEDBACK_VISIBLE_CONFIG);\n            this.hideAction = this._register(this.instantiationService.createInstance(HideAction));\n            this.registerListeners();\n        }\n        registerListeners() {\n            this._register(this.contextService.onDidChangeWorkbenchState(() => this.updateStyles()));\n            this._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n        }\n        onConfigurationUpdated(event) {\n            if (event.affectsConfiguration(feedback_1.FEEDBACK_VISIBLE_CONFIG)) {\n                this.enabled = this.configurationService.getValue(feedback_1.FEEDBACK_VISIBLE_CONFIG);\n                this.update();\n            }\n        }\n        updateStyles() {\n            super.updateStyles();\n            if (this.dropdown && this.dropdown.label) {\n                this.dropdown.label.style.backgroundColor = (this.getColor(this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY ? theme_1.STATUS_BAR_FOREGROUND : theme_1.STATUS_BAR_NO_FOLDER_FOREGROUND));\n            }\n        }\n        render(element) {\n            this.container = element;\n            // Prevent showing dropdown on anything but left click\n            this.toDispose.push(dom_1.addDisposableListener(this.container, 'mousedown', (e) => {\n                if (e.button !== 0) {\n                    dom_1.EventHelper.stop(e, true);\n                }\n            }, true));\n            // Offer context menu to hide status bar entry\n            this.toDispose.push(dom_1.addDisposableListener(this.container, 'contextmenu', e => {\n                dom_1.EventHelper.stop(e, true);\n                this.contextMenuService.showContextMenu({\n                    getAnchor: () => this.container,\n                    getActions: () => [this.hideAction]\n                });\n            }));\n            return this.update();\n        }\n        update() {\n            const enabled = product_1.default.sendASmile && this.enabled;\n            // Create\n            if (enabled) {\n                if (!this.dropdown) {\n                    this.dropdown = this._register(this.instantiationService.createInstance(feedback_1.FeedbackDropdown, this.container, {\n                        contextViewProvider: this.contextViewService,\n                        feedbackService: this.instantiationService.createInstance(TwitterFeedbackService),\n                        onFeedbackVisibilityChange: visible => {\n                            if (visible) {\n                                dom_1.addClass(this.container, 'has-beak');\n                            }\n                            else {\n                                dom_1.removeClass(this.container, 'has-beak');\n                            }\n                        }\n                    }));\n                    this.updateStyles();\n                    return this.dropdown;\n                }\n            }\n            // Dispose\n            else {\n                lifecycle_1.dispose(this.dropdown);\n                this.dropdown = undefined;\n                dom_1.clearNode(this.container);\n            }\n            return lifecycle_1.Disposable.None;\n        }\n    };\n    FeedbackStatusbarItem = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, contextView_1.IContextViewService),\n        __param(2, workspace_1.IWorkspaceContextService),\n        __param(3, contextView_1.IContextMenuService),\n        __param(4, configuration_1.IConfigurationService),\n        __param(5, themeService_1.IThemeService)\n    ], FeedbackStatusbarItem);\n    exports.FeedbackStatusbarItem = FeedbackStatusbarItem;\n    let HideAction = class HideAction extends actions_1.Action {\n        constructor(configurationService) {\n            super('feedback.hide', nls_1.localize('hide', \"Hide\"));\n            this.configurationService = configurationService;\n        }\n        run(extensionId) {\n            return this.configurationService.updateValue(feedback_1.FEEDBACK_VISIBLE_CONFIG, false);\n        }\n    };\n    HideAction = __decorate([\n        __param(0, configuration_1.IConfigurationService)\n    ], HideAction);\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const statusBarItemHoverBackground = theme.getColor(theme_1.STATUS_BAR_ITEM_HOVER_BACKGROUND);\n        if (statusBarItemHoverBackground) {\n            collector.addRule(`.monaco-workbench .part.statusbar > .statusbar-item .monaco-dropdown.send-feedback:hover { background-color: ${statusBarItemHoverBackground}; }`);\n        }\n    });\n});\n",null]}