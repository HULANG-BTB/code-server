{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"fs\", \"vs/base/common/async\", \"vs/base/common/errors\", \"vs/editor/browser/editorBrowser\", \"vs/platform/environment/common/environment\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/product/node/product\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/update/common/update\", \"vs/platform/windows/common/windows\", \"vs/workbench/contrib/files/common/files\", \"vs/workbench/services/editor/common/editorService\", \"vs/workbench/services/panel/common/panelService\", \"vs/workbench/services/timer/electron-browser/timerService\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/base/common/performance\"], function (require, exports, fs_1, async_1, errors_1, editorBrowser_1, environment_1, lifecycle_1, product_1, telemetry_1, update_1, windows_1, files, editorService_1, panelService_1, timerService_1, viewlet_1, performance_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let StartupTimings = class StartupTimings {\n        constructor(_timerService, _windowsService, _editorService, _viewletService, _panelService, _telemetryService, _lifecycleService, _updateService, _envService) {\n            this._timerService = _timerService;\n            this._windowsService = _windowsService;\n            this._editorService = _editorService;\n            this._viewletService = _viewletService;\n            this._panelService = _panelService;\n            this._telemetryService = _telemetryService;\n            this._lifecycleService = _lifecycleService;\n            this._updateService = _updateService;\n            this._envService = _envService;\n            //\n            this._report().catch(errors_1.onUnexpectedError);\n        }\n        _report() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const isStandardStartup = yield this._isStandardStartup();\n                this._reportStartupTimes().catch(errors_1.onUnexpectedError);\n                this._appendStartupTimes(isStandardStartup).catch(errors_1.onUnexpectedError);\n                this._reportPerfTicks();\n            });\n        }\n        _reportStartupTimes() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const metrics = yield this._timerService.startupMetrics;\n                /* __GDPR__\n                    \"startupTimeVaried\" : {\n                        \"${include}\": [\n                            \"${IStartupMetrics}\"\n                        ]\n                    }\n                */\n                this._telemetryService.publicLog('startupTimeVaried', metrics);\n            });\n        }\n        _appendStartupTimes(isStandardStartup) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let appendTo = this._envService.args['prof-append-timers'];\n                if (!appendTo) {\n                    // nothing to do\n                    return;\n                }\n                const { sessionId } = yield this._telemetryService.getTelemetryInfo();\n                Promise.all([\n                    this._timerService.startupMetrics,\n                    async_1.timeout(15000),\n                ]).then(([startupMetrics]) => {\n                    return async_1.nfcall(fs_1.appendFile, appendTo, `${startupMetrics.ellapsed}\\t${product_1.default.nameShort}\\t${(product_1.default.commit || '').slice(0, 10) || '0000000000'}\\t${sessionId}\\t${isStandardStartup ? 'standard_start' : 'NO_standard_start'}\\n`);\n                }).then(() => {\n                    this._windowsService.quit();\n                }).catch(err => {\n                    console.error(err);\n                    this._windowsService.quit();\n                });\n            });\n        }\n        _isStandardStartup() {\n            return __awaiter(this, void 0, void 0, function* () {\n                // check for standard startup:\n                // * new window (no reload)\n                // * just one window\n                // * explorer viewlet visible\n                // * one text editor (not multiple, not webview, welcome etc...)\n                // * cached data present (not rejected, not created)\n                if (this._lifecycleService.startupKind !== lifecycle_1.StartupKind.NewWindow) {\n                    return false;\n                }\n                if ((yield this._windowsService.getWindowCount()) !== 1) {\n                    return false;\n                }\n                const activeViewlet = this._viewletService.getActiveViewlet();\n                if (!activeViewlet || activeViewlet.getId() !== files.VIEWLET_ID) {\n                    return false;\n                }\n                const visibleControls = this._editorService.visibleControls;\n                if (visibleControls.length !== 1 || !editorBrowser_1.isCodeEditor(visibleControls[0].getControl())) {\n                    return false;\n                }\n                if (this._panelService.getActivePanel()) {\n                    return false;\n                }\n                if (!timerService_1.didUseCachedData()) {\n                    return false;\n                }\n                if (!(yield this._updateService.isLatestVersion())) {\n                    return false;\n                }\n                return true;\n            });\n        }\n        _reportPerfTicks() {\n            const entries = Object.create(null);\n            for (const entry of performance_1.getEntries()) {\n                entries[entry.name] = entry.timestamp;\n            }\n            /* __GDPR__\n                \"startupRawTimers\" : {\n                    \"entries\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                }\n            */\n            this._telemetryService.publicLog('startupRawTimers', { entries });\n        }\n    };\n    StartupTimings = __decorate([\n        __param(0, timerService_1.ITimerService),\n        __param(1, windows_1.IWindowsService),\n        __param(2, editorService_1.IEditorService),\n        __param(3, viewlet_1.IViewletService),\n        __param(4, panelService_1.IPanelService),\n        __param(5, telemetry_1.ITelemetryService),\n        __param(6, lifecycle_1.ILifecycleService),\n        __param(7, update_1.IUpdateService),\n        __param(8, environment_1.IEnvironmentService)\n    ], StartupTimings);\n    exports.StartupTimings = StartupTimings;\n});\n",null]}