{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar ipc_1 = require(\"vs/base/parts/ipc/common/ipc\");\nvar ipc_electron_1 = require(\"vs/base/parts/ipc/node/ipc.electron\");\nvar electron_1 = require(\"electron\");\nvar buffer_1 = require(\"vs/base/common/buffer\");\nvar Client = /** @class */ (function (_super) {\n    tslib_1.__extends(Client, _super);\n    function Client(id) {\n        var _this = this;\n        var protocol = Client.createProtocol();\n        _this = _super.call(this, protocol, id) || this;\n        _this.protocol = protocol;\n        return _this;\n    }\n    Client.createProtocol = function () {\n        var onMessage = event_1.Event.fromNodeEventEmitter(electron_1.ipcRenderer, 'ipc:message', function (_, message) { return buffer_1.VSBuffer.wrap(message); });\n        electron_1.ipcRenderer.send('ipc:hello');\n        return new ipc_electron_1.Protocol(electron_1.ipcRenderer, onMessage);\n    };\n    Client.prototype.dispose = function () {\n        this.protocol.dispose();\n    };\n    return Client;\n}(ipc_1.IPCClient));\nexports.Client = Client;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAA6C;AAC7C,oDAAyD;AACzD,oEAA+D;AAC/D,qCAAuC;AAEvC,gDAAiD;AAEjD;IAA4B,kCAAS;IAUpC,gBAAY,EAAU;QAAtB,iBAIC;QAHA,IAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;QACzC,QAAA,kBAAM,QAAQ,EAAE,EAAE,CAAC,SAAC;QACpB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAC1B,CAAC;IAVc,qBAAc,GAA7B;QACC,IAAM,SAAS,GAAG,aAAK,CAAC,oBAAoB,CAAW,sBAAW,EAAE,aAAa,EAAE,UAAC,CAAC,EAAE,OAAe,IAAK,OAAA,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACnI,sBAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9B,OAAO,IAAI,uBAAQ,CAAC,sBAAW,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAQD,wBAAO,GAAP;QACC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IACF,aAAC;AAAD,CAAC,AAnBD,CAA4B,eAAS,GAmBpC;AAnBY,wBAAM","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IPCClient } from 'vs/base/parts/ipc/common/ipc';\nimport { Protocol } from 'vs/base/parts/ipc/node/ipc.electron';\nimport { ipcRenderer } from 'electron';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport class Client extends IPCClient implements IDisposable {\n\n\tprivate protocol: Protocol;\n\n\tprivate static createProtocol(): Protocol {\n\t\tconst onMessage = Event.fromNodeEventEmitter<VSBuffer>(ipcRenderer, 'ipc:message', (_, message: Buffer) => VSBuffer.wrap(message));\n\t\tipcRenderer.send('ipc:hello');\n\t\treturn new Protocol(ipcRenderer, onMessage);\n\t}\n\n\tconstructor(id: string) {\n\t\tconst protocol = Client.createProtocol();\n\t\tsuper(protocol, id);\n\t\tthis.protocol = protocol;\n\t}\n\n\tdispose(): void {\n\t\tthis.protocol.dispose();\n\t}\n}"]}]}