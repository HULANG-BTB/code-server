{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar diffEditorModel_1 = require(\"vs/workbench/common/editor/diffEditorModel\");\n/**\n * The base text editor model for the diff editor. It is made up of two text editor models, the original version\n * and the modified version.\n */\nvar TextDiffEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(TextDiffEditorModel, _super);\n    function TextDiffEditorModel(originalModel, modifiedModel) {\n        var _this = _super.call(this, originalModel, modifiedModel) || this;\n        _this.updateTextDiffEditorModel();\n        return _this;\n    }\n    Object.defineProperty(TextDiffEditorModel.prototype, \"originalModel\", {\n        get: function () {\n            return this._originalModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextDiffEditorModel.prototype, \"modifiedModel\", {\n        get: function () {\n            return this._modifiedModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextDiffEditorModel.prototype.load = function () {\n        var _this = this;\n        return _super.prototype.load.call(this).then(function () {\n            _this.updateTextDiffEditorModel();\n            return _this;\n        });\n    };\n    TextDiffEditorModel.prototype.updateTextDiffEditorModel = function () {\n        if (this.originalModel.isResolved() && this.modifiedModel.isResolved()) {\n            // Create new\n            if (!this._textDiffEditorModel) {\n                this._textDiffEditorModel = {\n                    original: this.originalModel.textEditorModel,\n                    modified: this.modifiedModel.textEditorModel\n                };\n            }\n            // Update existing\n            else {\n                this._textDiffEditorModel.original = this.originalModel.textEditorModel;\n                this._textDiffEditorModel.modified = this.modifiedModel.textEditorModel;\n            }\n        }\n    };\n    Object.defineProperty(TextDiffEditorModel.prototype, \"textDiffEditorModel\", {\n        get: function () {\n            return this._textDiffEditorModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextDiffEditorModel.prototype.isResolved = function () {\n        return !!this._textDiffEditorModel;\n    };\n    TextDiffEditorModel.prototype.isReadonly = function () {\n        return this.modifiedModel.isReadonly();\n    };\n    TextDiffEditorModel.prototype.dispose = function () {\n        // Free the diff editor model but do not propagate the dispose() call to the two models\n        // inside. We never created the two models (original and modified) so we can not dispose\n        // them without sideeffects. Rather rely on the models getting disposed when their related\n        // inputs get disposed from the diffEditorInput.\n        this._textDiffEditorModel = null;\n        _super.prototype.dispose.call(this);\n    };\n    return TextDiffEditorModel;\n}(diffEditorModel_1.DiffEditorModel));\nexports.TextDiffEditorModel = TextDiffEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAKhG,8EAA6E;AAE7E;;;GAGG;AACH;IAAyC,+CAAe;IAGvD,6BAAY,aAAkC,EAAE,aAAkC;QAAlF,YACC,kBAAM,aAAa,EAAE,aAAa,CAAC,SAGnC;QADA,KAAI,CAAC,yBAAyB,EAAE,CAAC;;IAClC,CAAC;IAED,sBAAI,8CAAa;aAAjB;YACC,OAAO,IAAI,CAAC,cAAqC,CAAC;QACnD,CAAC;;;OAAA;IAED,sBAAI,8CAAa;aAAjB;YACC,OAAO,IAAI,CAAC,cAAqC,CAAC;QACnD,CAAC;;;OAAA;IAED,kCAAI,GAAJ;QAAA,iBAMC;QALA,OAAO,iBAAM,IAAI,WAAE,CAAC,IAAI,CAAC;YACxB,KAAI,CAAC,yBAAyB,EAAE,CAAC;YAEjC,OAAO,KAAI,CAAC;QACb,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,uDAAyB,GAAjC;QACC,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE;YAEvE,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC/B,IAAI,CAAC,oBAAoB,GAAG;oBAC3B,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;oBAC5C,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;iBAC5C,CAAC;aACF;YAED,kBAAkB;iBACb;gBACJ,IAAI,CAAC,oBAAoB,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;gBACxE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;aACxE;SACD;IACF,CAAC;IAED,sBAAI,oDAAmB;aAAvB;YACC,OAAO,IAAI,CAAC,oBAAoB,CAAC;QAClC,CAAC;;;OAAA;IAED,wCAAU,GAAV;QACC,OAAO,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC;IACpC,CAAC;IAED,wCAAU,GAAV;QACC,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;IACxC,CAAC;IAED,qCAAO,GAAP;QAEC,uFAAuF;QACvF,wFAAwF;QACxF,0FAA0F;QAC1F,gDAAgD;QAChD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAEjC,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IACF,0BAAC;AAAD,CAAC,AAlED,CAAyC,iCAAe,GAkEvD;AAlEY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDiffEditorModel } from 'vs/editor/common/editorCommon';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { DiffEditorModel } from 'vs/workbench/common/editor/diffEditorModel';\n\n/**\n * The base text editor model for the diff editor. It is made up of two text editor models, the original version\n * and the modified version.\n */\nexport class TextDiffEditorModel extends DiffEditorModel {\n\tprivate _textDiffEditorModel: IDiffEditorModel | null;\n\n\tconstructor(originalModel: BaseTextEditorModel, modifiedModel: BaseTextEditorModel) {\n\t\tsuper(originalModel, modifiedModel);\n\n\t\tthis.updateTextDiffEditorModel();\n\t}\n\n\tget originalModel(): BaseTextEditorModel {\n\t\treturn this._originalModel as BaseTextEditorModel;\n\t}\n\n\tget modifiedModel(): BaseTextEditorModel {\n\t\treturn this._modifiedModel as BaseTextEditorModel;\n\t}\n\n\tload(): Promise<EditorModel> {\n\t\treturn super.load().then(() => {\n\t\t\tthis.updateTextDiffEditorModel();\n\n\t\t\treturn this;\n\t\t});\n\t}\n\n\tprivate updateTextDiffEditorModel(): void {\n\t\tif (this.originalModel.isResolved() && this.modifiedModel.isResolved()) {\n\n\t\t\t// Create new\n\t\t\tif (!this._textDiffEditorModel) {\n\t\t\t\tthis._textDiffEditorModel = {\n\t\t\t\t\toriginal: this.originalModel.textEditorModel,\n\t\t\t\t\tmodified: this.modifiedModel.textEditorModel\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Update existing\n\t\t\telse {\n\t\t\t\tthis._textDiffEditorModel.original = this.originalModel.textEditorModel;\n\t\t\t\tthis._textDiffEditorModel.modified = this.modifiedModel.textEditorModel;\n\t\t\t}\n\t\t}\n\t}\n\n\tget textDiffEditorModel(): IDiffEditorModel | null {\n\t\treturn this._textDiffEditorModel;\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this._textDiffEditorModel;\n\t}\n\n\tisReadonly(): boolean {\n\t\treturn this.modifiedModel.isReadonly();\n\t}\n\n\tdispose(): void {\n\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two models\n\t\t// inside. We never created the two models (original and modified) so we can not dispose\n\t\t// them without sideeffects. Rather rely on the models getting disposed when their related\n\t\t// inputs get disposed from the diffEditorInput.\n\t\tthis._textDiffEditorModel = null;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}