{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom = require(\"vs/base/browser/dom\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar globalMouseMoveMonitor_1 = require(\"vs/base/browser/globalMouseMoveMonitor\");\nvar scrollbarArrow_1 = require(\"vs/base/browser/ui/scrollbar/scrollbarArrow\");\nvar scrollbarVisibilityController_1 = require(\"vs/base/browser/ui/scrollbar/scrollbarVisibilityController\");\nvar widget_1 = require(\"vs/base/browser/ui/widget\");\nvar platform = require(\"vs/base/common/platform\");\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nvar MOUSE_DRAG_RESET_DISTANCE = 140;\nvar AbstractScrollbar = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractScrollbar, _super);\n    function AbstractScrollbar(opts) {\n        var _this = _super.call(this) || this;\n        _this._lazyRender = opts.lazyRender;\n        _this._host = opts.host;\n        _this._scrollable = opts.scrollable;\n        _this._scrollbarState = opts.scrollbarState;\n        _this._visibilityController = _this._register(new scrollbarVisibilityController_1.ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n        _this._mouseMoveMonitor = _this._register(new globalMouseMoveMonitor_1.GlobalMouseMoveMonitor());\n        _this._shouldRender = true;\n        _this.domNode = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this.domNode.setAttribute('role', 'presentation');\n        _this.domNode.setAttribute('aria-hidden', 'true');\n        _this._visibilityController.setDomNode(_this.domNode);\n        _this.domNode.setPosition('absolute');\n        _this.onmousedown(_this.domNode.domNode, function (e) { return _this._domNodeMouseDown(e); });\n        return _this;\n    }\n    // ----------------- creation\n    /**\n     * Creates the dom node for an arrow & adds it to the container\n     */\n    AbstractScrollbar.prototype._createArrow = function (opts) {\n        var arrow = this._register(new scrollbarArrow_1.ScrollbarArrow(opts));\n        this.domNode.domNode.appendChild(arrow.bgDomNode);\n        this.domNode.domNode.appendChild(arrow.domNode);\n    };\n    /**\n     * Creates the slider dom node, adds it to the container & hooks up the events\n     */\n    AbstractScrollbar.prototype._createSlider = function (top, left, width, height) {\n        var _this = this;\n        this.slider = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        this.slider.setClassName('slider');\n        this.slider.setPosition('absolute');\n        this.slider.setTop(top);\n        this.slider.setLeft(left);\n        if (typeof width === 'number') {\n            this.slider.setWidth(width);\n        }\n        if (typeof height === 'number') {\n            this.slider.setHeight(height);\n        }\n        this.slider.setLayerHinting(true);\n        this.domNode.domNode.appendChild(this.slider.domNode);\n        this.onmousedown(this.slider.domNode, function (e) {\n            if (e.leftButton) {\n                e.preventDefault();\n                _this._sliderMouseDown(e, function () { });\n            }\n        });\n    };\n    // ----------------- Update state\n    AbstractScrollbar.prototype._onElementSize = function (visibleSize) {\n        if (this._scrollbarState.setVisibleSize(visibleSize)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    };\n    AbstractScrollbar.prototype._onElementScrollSize = function (elementScrollSize) {\n        if (this._scrollbarState.setScrollSize(elementScrollSize)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    };\n    AbstractScrollbar.prototype._onElementScrollPosition = function (elementScrollPosition) {\n        if (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    };\n    // ----------------- rendering\n    AbstractScrollbar.prototype.beginReveal = function () {\n        this._visibilityController.setShouldBeVisible(true);\n    };\n    AbstractScrollbar.prototype.beginHide = function () {\n        this._visibilityController.setShouldBeVisible(false);\n    };\n    AbstractScrollbar.prototype.render = function () {\n        if (!this._shouldRender) {\n            return;\n        }\n        this._shouldRender = false;\n        this._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n        this._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n    };\n    // ----------------- DOM events\n    AbstractScrollbar.prototype._domNodeMouseDown = function (e) {\n        if (e.target !== this.domNode.domNode) {\n            return;\n        }\n        this._onMouseDown(e);\n    };\n    AbstractScrollbar.prototype.delegateMouseDown = function (e) {\n        var domTop = this.domNode.domNode.getClientRects()[0].top;\n        var sliderStart = domTop + this._scrollbarState.getSliderPosition();\n        var sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n        var mousePos = this._sliderMousePosition(e);\n        if (sliderStart <= mousePos && mousePos <= sliderStop) {\n            // Act as if it was a mouse down on the slider\n            if (e.leftButton) {\n                e.preventDefault();\n                this._sliderMouseDown(e, function () { });\n            }\n        }\n        else {\n            // Act as if it was a mouse down on the scrollbar\n            this._onMouseDown(e);\n        }\n    };\n    AbstractScrollbar.prototype._onMouseDown = function (e) {\n        var offsetX;\n        var offsetY;\n        if (e.target === this.domNode.domNode && typeof e.browserEvent.offsetX === 'number' && typeof e.browserEvent.offsetY === 'number') {\n            offsetX = e.browserEvent.offsetX;\n            offsetY = e.browserEvent.offsetY;\n        }\n        else {\n            var domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n            offsetX = e.posx - domNodePosition.left;\n            offsetY = e.posy - domNodePosition.top;\n        }\n        this._setDesiredScrollPositionNow(this._scrollbarState.getDesiredScrollPositionFromOffset(this._mouseDownRelativePosition(offsetX, offsetY)));\n        if (e.leftButton) {\n            e.preventDefault();\n            this._sliderMouseDown(e, function () { });\n        }\n    };\n    AbstractScrollbar.prototype._sliderMouseDown = function (e, onDragFinished) {\n        var _this = this;\n        var initialMousePosition = this._sliderMousePosition(e);\n        var initialMouseOrthogonalPosition = this._sliderOrthogonalMousePosition(e);\n        var initialScrollbarState = this._scrollbarState.clone();\n        this.slider.toggleClassName('active', true);\n        this._mouseMoveMonitor.startMonitoring(globalMouseMoveMonitor_1.standardMouseMoveMerger, function (mouseMoveData) {\n            var mouseOrthogonalPosition = _this._sliderOrthogonalMousePosition(mouseMoveData);\n            var mouseOrthogonalDelta = Math.abs(mouseOrthogonalPosition - initialMouseOrthogonalPosition);\n            if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n                // The mouse has wondered away from the scrollbar => reset dragging\n                _this._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n                return;\n            }\n            var mousePosition = _this._sliderMousePosition(mouseMoveData);\n            var mouseDelta = mousePosition - initialMousePosition;\n            _this._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(mouseDelta));\n        }, function () {\n            _this.slider.toggleClassName('active', false);\n            _this._host.onDragEnd();\n            onDragFinished();\n        });\n        this._host.onDragStart();\n    };\n    AbstractScrollbar.prototype._setDesiredScrollPositionNow = function (_desiredScrollPosition) {\n        var desiredScrollPosition = {};\n        this.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n        this._scrollable.setScrollPositionNow(desiredScrollPosition);\n    };\n    return AbstractScrollbar;\n}(widget_1.Widget));\nexports.AbstractScrollbar = AbstractScrollbar;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { GlobalMouseMoveMonitor, IStandardMouseMoveEventData, standardMouseMoveMerger } from 'vs/base/browser/globalMouseMoveMonitor';\nimport { IMouseEvent, StandardWheelEvent } from 'vs/base/browser/mouseEvent';\nimport { ScrollbarArrow, ScrollbarArrowOptions } from 'vs/base/browser/ui/scrollbar/scrollbarArrow';\nimport { ScrollbarState } from 'vs/base/browser/ui/scrollbar/scrollbarState';\nimport { ScrollbarVisibilityController } from 'vs/base/browser/ui/scrollbar/scrollbarVisibilityController';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport * as platform from 'vs/base/common/platform';\nimport { INewScrollPosition, Scrollable, ScrollbarVisibility } from 'vs/base/common/scrollable';\n\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\n\nexport interface ISimplifiedMouseEvent {\n\tposx: number;\n\tposy: number;\n}\n\nexport interface ScrollbarHost {\n\tonMouseWheel(mouseWheelEvent: StandardWheelEvent): void;\n\tonDragStart(): void;\n\tonDragEnd(): void;\n}\n\nexport interface AbstractScrollbarOptions {\n\tlazyRender: boolean;\n\thost: ScrollbarHost;\n\tscrollbarState: ScrollbarState;\n\tvisibility: ScrollbarVisibility;\n\textraScrollbarClassName: string;\n\tscrollable: Scrollable;\n}\n\nexport abstract class AbstractScrollbar extends Widget {\n\n\tprotected _host: ScrollbarHost;\n\tprotected _scrollable: Scrollable;\n\tprivate _lazyRender: boolean;\n\tprotected _scrollbarState: ScrollbarState;\n\tprivate _visibilityController: ScrollbarVisibilityController;\n\tprivate _mouseMoveMonitor: GlobalMouseMoveMonitor<IStandardMouseMoveEventData>;\n\n\tpublic domNode: FastDomNode<HTMLElement>;\n\tpublic slider: FastDomNode<HTMLElement>;\n\n\tprotected _shouldRender: boolean;\n\n\tconstructor(opts: AbstractScrollbarOptions) {\n\t\tsuper();\n\t\tthis._lazyRender = opts.lazyRender;\n\t\tthis._host = opts.host;\n\t\tthis._scrollable = opts.scrollable;\n\t\tthis._scrollbarState = opts.scrollbarState;\n\t\tthis._visibilityController = this._register(new ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n\t\tthis._mouseMoveMonitor = this._register(new GlobalMouseMoveMonitor<IStandardMouseMoveEventData>());\n\t\tthis._shouldRender = true;\n\t\tthis.domNode = createFastDomNode(document.createElement('div'));\n\t\tthis.domNode.setAttribute('role', 'presentation');\n\t\tthis.domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._visibilityController.setDomNode(this.domNode);\n\t\tthis.domNode.setPosition('absolute');\n\n\t\tthis.onmousedown(this.domNode.domNode, (e) => this._domNodeMouseDown(e));\n\t}\n\n\t// ----------------- creation\n\n\t/**\n\t * Creates the dom node for an arrow & adds it to the container\n\t */\n\tprotected _createArrow(opts: ScrollbarArrowOptions): void {\n\t\tlet arrow = this._register(new ScrollbarArrow(opts));\n\t\tthis.domNode.domNode.appendChild(arrow.bgDomNode);\n\t\tthis.domNode.domNode.appendChild(arrow.domNode);\n\t}\n\n\t/**\n\t * Creates the slider dom node, adds it to the container & hooks up the events\n\t */\n\tprotected _createSlider(top: number, left: number, width: number | undefined, height: number | undefined): void {\n\t\tthis.slider = createFastDomNode(document.createElement('div'));\n\t\tthis.slider.setClassName('slider');\n\t\tthis.slider.setPosition('absolute');\n\t\tthis.slider.setTop(top);\n\t\tthis.slider.setLeft(left);\n\t\tif (typeof width === 'number') {\n\t\t\tthis.slider.setWidth(width);\n\t\t}\n\t\tif (typeof height === 'number') {\n\t\t\tthis.slider.setHeight(height);\n\t\t}\n\t\tthis.slider.setLayerHinting(true);\n\n\t\tthis.domNode.domNode.appendChild(this.slider.domNode);\n\n\t\tthis.onmousedown(this.slider.domNode, (e) => {\n\t\t\tif (e.leftButton) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis._sliderMouseDown(e, () => { /*nothing to do*/ });\n\t\t\t}\n\t\t});\n\t}\n\n\t// ----------------- Update state\n\n\tprotected _onElementSize(visibleSize: number): boolean {\n\t\tif (this._scrollbarState.setVisibleSize(visibleSize)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\tprotected _onElementScrollSize(elementScrollSize: number): boolean {\n\t\tif (this._scrollbarState.setScrollSize(elementScrollSize)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\tprotected _onElementScrollPosition(elementScrollPosition: number): boolean {\n\t\tif (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\t// ----------------- rendering\n\n\tpublic beginReveal(): void {\n\t\tthis._visibilityController.setShouldBeVisible(true);\n\t}\n\n\tpublic beginHide(): void {\n\t\tthis._visibilityController.setShouldBeVisible(false);\n\t}\n\n\tpublic render(): void {\n\t\tif (!this._shouldRender) {\n\t\t\treturn;\n\t\t}\n\t\tthis._shouldRender = false;\n\n\t\tthis._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n\t\tthis._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n\t}\n\t// ----------------- DOM events\n\n\tprivate _domNodeMouseDown(e: IMouseEvent): void {\n\t\tif (e.target !== this.domNode.domNode) {\n\t\t\treturn;\n\t\t}\n\t\tthis._onMouseDown(e);\n\t}\n\n\tpublic delegateMouseDown(e: IMouseEvent): void {\n\t\tlet domTop = this.domNode.domNode.getClientRects()[0].top;\n\t\tlet sliderStart = domTop + this._scrollbarState.getSliderPosition();\n\t\tlet sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n\t\tlet mousePos = this._sliderMousePosition(e);\n\t\tif (sliderStart <= mousePos && mousePos <= sliderStop) {\n\t\t\t// Act as if it was a mouse down on the slider\n\t\t\tif (e.leftButton) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis._sliderMouseDown(e, () => { /*nothing to do*/ });\n\t\t\t}\n\t\t} else {\n\t\t\t// Act as if it was a mouse down on the scrollbar\n\t\t\tthis._onMouseDown(e);\n\t\t}\n\t}\n\n\tprivate _onMouseDown(e: IMouseEvent): void {\n\t\tlet offsetX: number;\n\t\tlet offsetY: number;\n\t\tif (e.target === this.domNode.domNode && typeof e.browserEvent.offsetX === 'number' && typeof e.browserEvent.offsetY === 'number') {\n\t\t\toffsetX = e.browserEvent.offsetX;\n\t\t\toffsetY = e.browserEvent.offsetY;\n\t\t} else {\n\t\t\tconst domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n\t\t\toffsetX = e.posx - domNodePosition.left;\n\t\t\toffsetY = e.posy - domNodePosition.top;\n\t\t}\n\t\tthis._setDesiredScrollPositionNow(this._scrollbarState.getDesiredScrollPositionFromOffset(this._mouseDownRelativePosition(offsetX, offsetY)));\n\t\tif (e.leftButton) {\n\t\t\te.preventDefault();\n\t\t\tthis._sliderMouseDown(e, () => { /*nothing to do*/ });\n\t\t}\n\t}\n\n\tprivate _sliderMouseDown(e: ISimplifiedMouseEvent, onDragFinished: () => void): void {\n\t\tconst initialMousePosition = this._sliderMousePosition(e);\n\t\tconst initialMouseOrthogonalPosition = this._sliderOrthogonalMousePosition(e);\n\t\tconst initialScrollbarState = this._scrollbarState.clone();\n\t\tthis.slider.toggleClassName('active', true);\n\n\t\tthis._mouseMoveMonitor.startMonitoring(\n\t\t\tstandardMouseMoveMerger,\n\t\t\t(mouseMoveData: IStandardMouseMoveEventData) => {\n\t\t\t\tconst mouseOrthogonalPosition = this._sliderOrthogonalMousePosition(mouseMoveData);\n\t\t\t\tconst mouseOrthogonalDelta = Math.abs(mouseOrthogonalPosition - initialMouseOrthogonalPosition);\n\n\t\t\t\tif (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n\t\t\t\t\t// The mouse has wondered away from the scrollbar => reset dragging\n\t\t\t\t\tthis._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mousePosition = this._sliderMousePosition(mouseMoveData);\n\t\t\t\tconst mouseDelta = mousePosition - initialMousePosition;\n\t\t\t\tthis._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(mouseDelta));\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.slider.toggleClassName('active', false);\n\t\t\t\tthis._host.onDragEnd();\n\t\t\t\tonDragFinished();\n\t\t\t}\n\t\t);\n\n\t\tthis._host.onDragStart();\n\t}\n\n\tprivate _setDesiredScrollPositionNow(_desiredScrollPosition: number): void {\n\n\t\tlet desiredScrollPosition: INewScrollPosition = {};\n\t\tthis.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n\n\t\tthis._scrollable.setScrollPositionNow(desiredScrollPosition);\n\t}\n\n\t// ----------------- Overwrite these\n\n\tprotected abstract _renderDomNode(largeSize: number, smallSize: number): void;\n\tprotected abstract _updateSlider(sliderSize: number, sliderPosition: number): void;\n\n\tprotected abstract _mouseDownRelativePosition(offsetX: number, offsetY: number): number;\n\tprotected abstract _sliderMousePosition(e: ISimplifiedMouseEvent): number;\n\tprotected abstract _sliderOrthogonalMousePosition(e: ISimplifiedMouseEvent): number;\n\n\tpublic abstract writeScrollPosition(target: INewScrollPosition, scrollPosition: number): void;\n}\n"]}]}