{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/registry/common/platform\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/commands/common/commands\", \"vs/platform/actions/common/actions\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/lifecycle\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/notification/common/notification\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, platform_1, keybindingsRegistry_1, commands_1, actions_1, instantiation_1, lifecycle_1, lifecycle_2, notification_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Extensions = {\n        WorkbenchActions: 'workbench.contributions.actions'\n    };\n    platform_1.Registry.add(exports.Extensions.WorkbenchActions, new class {\n        registerWorkbenchAction(descriptor, alias, category, when) {\n            return this.registerWorkbenchCommandFromAction(descriptor, alias, category, when);\n        }\n        registerWorkbenchCommandFromAction(descriptor, alias, category, when) {\n            let registrations = [];\n            // command\n            registrations.push(commands_1.CommandsRegistry.registerCommand(descriptor.id, this.createCommandHandler(descriptor)));\n            // keybinding\n            const weight = (typeof descriptor.keybindingWeight === 'undefined' ? keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib : descriptor.keybindingWeight);\n            const keybindings = descriptor.keybindings;\n            keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({\n                id: descriptor.id,\n                weight: weight,\n                when: (descriptor.keybindingContext || when ? contextkey_1.ContextKeyExpr.and(descriptor.keybindingContext, when) : null),\n                primary: keybindings ? keybindings.primary : 0,\n                secondary: keybindings && keybindings.secondary,\n                win: keybindings && keybindings.win,\n                mac: keybindings && keybindings.mac,\n                linux: keybindings && keybindings.linux\n            });\n            // menu item\n            // TODO@Rob slightly weird if-check required because of\n            // https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/contrib/search/electron-browser/search.contribution.ts#L266\n            if (descriptor.label) {\n                let idx = alias.indexOf(': ');\n                let categoryOriginal = '';\n                if (idx > 0) {\n                    categoryOriginal = alias.substr(0, idx);\n                    alias = alias.substr(idx + 2);\n                }\n                const command = {\n                    id: descriptor.id,\n                    title: { value: descriptor.label, original: alias },\n                    category: category ? { value: category, original: categoryOriginal } : undefined\n                };\n                actions_1.MenuRegistry.addCommand(command);\n                registrations.push(actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, { command, when }));\n            }\n            // TODO@alex,joh\n            // support removal of keybinding rule\n            // support removal of command-ui\n            return lifecycle_1.combinedDisposable(registrations);\n        }\n        createCommandHandler(descriptor) {\n            return (accessor, args) => {\n                const notificationService = accessor.get(notification_1.INotificationService);\n                const instantiationService = accessor.get(instantiation_1.IInstantiationService);\n                const lifecycleService = accessor.get(lifecycle_2.ILifecycleService);\n                Promise.resolve(this.triggerAndDisposeAction(instantiationService, lifecycleService, descriptor, args)).then(undefined, err => {\n                    notificationService.error(err);\n                });\n            };\n        }\n        triggerAndDisposeAction(instantiationService, lifecycleService, descriptor, args) {\n            // run action when workbench is created\n            return lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(() => {\n                const actionInstance = instantiationService.createInstance(descriptor.syncDescriptor);\n                try {\n                    actionInstance.label = descriptor.label || actionInstance.label;\n                    // don't run the action when not enabled\n                    if (!actionInstance.enabled) {\n                        actionInstance.dispose();\n                        return undefined;\n                    }\n                    const from = args && args.from || 'keybinding';\n                    return Promise.resolve(actionInstance.run(undefined, { from })).then(() => {\n                        actionInstance.dispose();\n                    }, err => {\n                        actionInstance.dispose();\n                        return Promise.reject(err);\n                    });\n                }\n                catch (err) {\n                    actionInstance.dispose();\n                    return Promise.reject(err);\n                }\n            });\n        }\n    });\n});\n",null]}