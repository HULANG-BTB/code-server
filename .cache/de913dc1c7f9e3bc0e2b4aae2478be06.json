{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/activity.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/activity.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nexports.GlobalActivityExtensions = 'workbench.contributions.globalActivities';\nvar GlobalActivityRegistry = /** @class */ (function () {\n    function GlobalActivityRegistry() {\n        this.activityDescriptors = new Set();\n    }\n    GlobalActivityRegistry.prototype.registerActivity = function (descriptor) {\n        this.activityDescriptors.add(descriptor);\n    };\n    GlobalActivityRegistry.prototype.getActivities = function () {\n        var result = [];\n        this.activityDescriptors.forEach(function (d) { return result.push(d); });\n        return result;\n    };\n    return GlobalActivityRegistry;\n}());\nexports.GlobalActivityRegistry = GlobalActivityRegistry;\nplatform_1.Registry.add(exports.GlobalActivityExtensions, new GlobalActivityRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/activity.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/activity.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iEAAgE;AAenD,QAAA,wBAAwB,GAAG,0CAA0C,CAAC;AAOnF;IAAA;QAEkB,wBAAmB,GAAG,IAAI,GAAG,EAA2C,CAAC;IAY3F,CAAC;IAVA,iDAAgB,GAAhB,UAAiB,UAAmD;QACnE,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED,8CAAa,GAAb;QACC,IAAM,MAAM,GAA8C,EAAE,CAAC;QAC7D,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,CAAC;QAEtD,OAAO,MAAM,CAAC;IACf,CAAC;IACF,6BAAC;AAAD,CAAC,AAdD,IAcC;AAdY,wDAAsB;AAgBnC,mBAAQ,CAAC,GAAG,CAAC,gCAAwB,EAAE,IAAI,sBAAsB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IAction } from 'vs/base/common/actions';\nimport { IConstructorSignature0 } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IActivity {\n\tid: string;\n\tname: string;\n\tkeybindingId?: string;\n\tcssClass?: string;\n}\n\nexport interface IGlobalActivity extends IActivity {\n\tgetActions(): IAction[];\n}\n\nexport const GlobalActivityExtensions = 'workbench.contributions.globalActivities';\n\nexport interface IGlobalActivityRegistry {\n\tregisterActivity(descriptor: IConstructorSignature0<IGlobalActivity>): void;\n\tgetActivities(): IConstructorSignature0<IGlobalActivity>[];\n}\n\nexport class GlobalActivityRegistry implements IGlobalActivityRegistry {\n\n\tprivate readonly activityDescriptors = new Set<IConstructorSignature0<IGlobalActivity>>();\n\n\tregisterActivity(descriptor: IConstructorSignature0<IGlobalActivity>): void {\n\t\tthis.activityDescriptors.add(descriptor);\n\t}\n\n\tgetActivities(): IConstructorSignature0<IGlobalActivity>[] {\n\t\tconst result: IConstructorSignature0<IGlobalActivity>[] = [];\n\t\tthis.activityDescriptors.forEach(d => result.push(d));\n\n\t\treturn result;\n\t}\n}\n\nRegistry.add(GlobalActivityExtensions, new GlobalActivityRegistry());"]}]}