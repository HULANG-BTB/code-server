{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaHandler.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./textAreaHandler\");\nvar browser = require(\"vs/base/browser/browser\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar platform = require(\"vs/base/common/platform\");\nvar strings = require(\"vs/base/common/strings\");\nvar configuration_1 = require(\"vs/editor/browser/config/configuration\");\nvar textAreaInput_1 = require(\"vs/editor/browser/controller/textAreaInput\");\nvar textAreaState_1 = require(\"vs/editor/browser/controller/textAreaState\");\nvar viewPart_1 = require(\"vs/editor/browser/view/viewPart\");\nvar lineNumbers_1 = require(\"vs/editor/browser/viewParts/lineNumbers/lineNumbers\");\nvar margin_1 = require(\"vs/editor/browser/viewParts/margin/margin\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar wordCharacterClassifier_1 = require(\"vs/editor/common/controller/wordCharacterClassifier\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar viewEvents = require(\"vs/editor/common/view/viewEvents\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar VisibleTextAreaData = /** @class */ (function () {\n    function VisibleTextAreaData(top, left, width) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n    }\n    VisibleTextAreaData.prototype.setWidth = function (width) {\n        return new VisibleTextAreaData(this.top, this.left, width);\n    };\n    return VisibleTextAreaData;\n}());\nvar canUseZeroSizeTextarea = (browser.isEdgeOrIE || browser.isFirefox);\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nvar LocalClipboardMetadataManager = /** @class */ (function () {\n    function LocalClipboardMetadataManager() {\n        this._lastState = null;\n    }\n    LocalClipboardMetadataManager.prototype.set = function (state) {\n        this._lastState = state;\n    };\n    LocalClipboardMetadataManager.prototype.get = function (pastedText) {\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n            // match!\n            return this._lastState;\n        }\n        this._lastState = null;\n        return null;\n    };\n    LocalClipboardMetadataManager.INSTANCE = new LocalClipboardMetadataManager();\n    return LocalClipboardMetadataManager;\n}());\nvar TextAreaHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(TextAreaHandler, _super);\n    function TextAreaHandler(context, viewController, viewHelper) {\n        var _this = _super.call(this, context) || this;\n        // --- end view API\n        _this._primaryCursorVisibleRange = null;\n        _this._viewController = viewController;\n        _this._viewHelper = viewHelper;\n        var conf = _this._context.configuration.editor;\n        _this._accessibilitySupport = conf.accessibilitySupport;\n        _this._contentLeft = conf.layoutInfo.contentLeft;\n        _this._contentWidth = conf.layoutInfo.contentWidth;\n        _this._contentHeight = conf.layoutInfo.contentHeight;\n        _this._scrollLeft = 0;\n        _this._scrollTop = 0;\n        _this._fontInfo = conf.fontInfo;\n        _this._lineHeight = conf.lineHeight;\n        _this._emptySelectionClipboard = conf.emptySelectionClipboard;\n        _this._copyWithSyntaxHighlighting = conf.copyWithSyntaxHighlighting;\n        _this._visibleTextArea = null;\n        _this._selections = [new selection_1.Selection(1, 1, 1, 1)];\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        _this.textArea = fastDomNode_1.createFastDomNode(document.createElement('textarea'));\n        viewPart_1.PartFingerprints.write(_this.textArea, viewPart_1.PartFingerprint.TextArea);\n        _this.textArea.setClassName('inputarea');\n        _this.textArea.setAttribute('wrap', 'off');\n        _this.textArea.setAttribute('autocorrect', 'off');\n        _this.textArea.setAttribute('autocapitalize', 'off');\n        _this.textArea.setAttribute('autocomplete', 'off');\n        _this.textArea.setAttribute('spellcheck', 'false');\n        _this.textArea.setAttribute('aria-label', conf.viewInfo.ariaLabel);\n        _this.textArea.setAttribute('role', 'textbox');\n        _this.textArea.setAttribute('aria-multiline', 'true');\n        _this.textArea.setAttribute('aria-haspopup', 'false');\n        _this.textArea.setAttribute('aria-autocomplete', 'both');\n        _this.textAreaCover = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this.textAreaCover.setPosition('absolute');\n        var simpleModel = {\n            getLineCount: function () {\n                return _this._context.model.getLineCount();\n            },\n            getLineMaxColumn: function (lineNumber) {\n                return _this._context.model.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: function (range, eol) {\n                return _this._context.model.getValueInRange(range, eol);\n            }\n        };\n        var textAreaInputHost = {\n            getPlainTextToCopy: function () {\n                var rawWhatToCopy = _this._context.model.getPlainTextToCopy(_this._selections, _this._emptySelectionClipboard, platform.isWindows);\n                var newLineCharacter = _this._context.model.getEOL();\n                var isFromEmptySelection = (_this._emptySelectionClipboard && _this._selections.length === 1 && _this._selections[0].isEmpty());\n                var multicursorText = (Array.isArray(rawWhatToCopy) ? rawWhatToCopy : null);\n                var whatToCopy = (Array.isArray(rawWhatToCopy) ? rawWhatToCopy.join(newLineCharacter) : rawWhatToCopy);\n                var metadata = null;\n                if (isFromEmptySelection || multicursorText) {\n                    // Only store the non-default metadata\n                    // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n                    // Firefox pastes \"LINE\\n\", so let's work around this quirk\n                    var lastCopiedValue = (browser.isFirefox ? whatToCopy.replace(/\\r\\n/g, '\\n') : whatToCopy);\n                    metadata = {\n                        lastCopiedValue: lastCopiedValue,\n                        isFromEmptySelection: (_this._emptySelectionClipboard && _this._selections.length === 1 && _this._selections[0].isEmpty()),\n                        multicursorText: multicursorText\n                    };\n                }\n                LocalClipboardMetadataManager.INSTANCE.set(metadata);\n                return whatToCopy;\n            },\n            getHTMLToCopy: function () {\n                if (!_this._copyWithSyntaxHighlighting && !textAreaInput_1.CopyOptions.forceCopyWithSyntaxHighlighting) {\n                    return null;\n                }\n                return _this._context.model.getHTMLToCopy(_this._selections, _this._emptySelectionClipboard);\n            },\n            getScreenReaderContent: function (currentState) {\n                if (browser.isIPad) {\n                    // Do not place anything in the textarea for the iPad\n                    return textAreaState_1.TextAreaState.EMPTY;\n                }\n                if (_this._accessibilitySupport === accessibility_1.AccessibilitySupport.Disabled) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    if (browser.isMacintosh) {\n                        var selection = _this._selections[0];\n                        if (selection.isEmpty()) {\n                            var position = selection.getStartPosition();\n                            var textBefore = _this._getWordBeforePosition(position);\n                            if (textBefore.length === 0) {\n                                textBefore = _this._getCharacterBeforePosition(position);\n                            }\n                            if (textBefore.length > 0) {\n                                return new textAreaState_1.TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n                            }\n                        }\n                    }\n                    return textAreaState_1.TextAreaState.EMPTY;\n                }\n                return textAreaState_1.PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, _this._selections[0], _this._accessibilitySupport === accessibility_1.AccessibilitySupport.Unknown);\n            },\n            deduceModelPosition: function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\n                return _this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        _this._textAreaInput = _this._register(new textAreaInput_1.TextAreaInput(textAreaInputHost, _this.textArea));\n        _this._register(_this._textAreaInput.onKeyDown(function (e) {\n            _this._viewController.emitKeyDown(e);\n        }));\n        _this._register(_this._textAreaInput.onKeyUp(function (e) {\n            _this._viewController.emitKeyUp(e);\n        }));\n        _this._register(_this._textAreaInput.onPaste(function (e) {\n            var metadata = LocalClipboardMetadataManager.INSTANCE.get(e.text);\n            var pasteOnNewLine = false;\n            var multicursorText = null;\n            if (metadata) {\n                pasteOnNewLine = (_this._emptySelectionClipboard && metadata.isFromEmptySelection);\n                multicursorText = metadata.multicursorText;\n            }\n            _this._viewController.paste('keyboard', e.text, pasteOnNewLine, multicursorText);\n        }));\n        _this._register(_this._textAreaInput.onCut(function () {\n            _this._viewController.cut('keyboard');\n        }));\n        _this._register(_this._textAreaInput.onType(function (e) {\n            if (e.replaceCharCnt) {\n                _this._viewController.replacePreviousChar('keyboard', e.text, e.replaceCharCnt);\n            }\n            else {\n                _this._viewController.type('keyboard', e.text);\n            }\n        }));\n        _this._register(_this._textAreaInput.onSelectionChangeRequest(function (modelSelection) {\n            _this._viewController.setSelection('keyboard', modelSelection);\n        }));\n        _this._register(_this._textAreaInput.onCompositionStart(function () {\n            var lineNumber = _this._selections[0].startLineNumber;\n            var column = _this._selections[0].startColumn;\n            _this._context.privateViewEventBus.emit(new viewEvents.ViewRevealRangeRequestEvent(new range_1.Range(lineNumber, column, lineNumber, column), viewEvents.VerticalRevealType.Simple, true, editorCommon_1.ScrollType.Immediate));\n            // Find range pixel position\n            var visibleRange = _this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n            if (visibleRange) {\n                _this._visibleTextArea = new VisibleTextAreaData(_this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\n                _this._render();\n            }\n            // Show the textarea\n            _this.textArea.setClassName('inputarea ime-input');\n            _this._viewController.compositionStart('keyboard');\n        }));\n        _this._register(_this._textAreaInput.onCompositionUpdate(function (e) {\n            if (browser.isEdgeOrIE) {\n                // Due to isEdgeOrIE (where the textarea was not cleared initially)\n                // we cannot assume the text consists only of the composited text\n                _this._visibleTextArea = _this._visibleTextArea.setWidth(0);\n            }\n            else {\n                // adjust width by its size\n                _this._visibleTextArea = _this._visibleTextArea.setWidth(measureText(e.data, _this._fontInfo));\n            }\n            _this._render();\n        }));\n        _this._register(_this._textAreaInput.onCompositionEnd(function () {\n            _this._visibleTextArea = null;\n            _this._render();\n            _this.textArea.setClassName('inputarea');\n            _this._viewController.compositionEnd('keyboard');\n        }));\n        _this._register(_this._textAreaInput.onFocus(function () {\n            _this._context.privateViewEventBus.emit(new viewEvents.ViewFocusChangedEvent(true));\n        }));\n        _this._register(_this._textAreaInput.onBlur(function () {\n            _this._context.privateViewEventBus.emit(new viewEvents.ViewFocusChangedEvent(false));\n        }));\n        return _this;\n    }\n    TextAreaHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    TextAreaHandler.prototype._getWordBeforePosition = function (position) {\n        var lineContent = this._context.model.getLineContent(position.lineNumber);\n        var wordSeparators = wordCharacterClassifier_1.getMapForWordSeparators(this._context.configuration.editor.wordSeparators);\n        var column = position.column;\n        var distance = 0;\n        while (column > 1) {\n            var charCode = lineContent.charCodeAt(column - 2);\n            var charClass = wordSeparators.get(charCode);\n            if (charClass !== wordCharacterClassifier_1.WordCharacterClass.Regular || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    };\n    TextAreaHandler.prototype._getCharacterBeforePosition = function (position) {\n        if (position.column > 1) {\n            var lineContent = this._context.model.getLineContent(position.lineNumber);\n            var charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    };\n    // --- begin event handlers\n    TextAreaHandler.prototype.onConfigurationChanged = function (e) {\n        var conf = this._context.configuration.editor;\n        if (e.fontInfo) {\n            this._fontInfo = conf.fontInfo;\n        }\n        if (e.viewInfo) {\n            this.textArea.setAttribute('aria-label', conf.viewInfo.ariaLabel);\n        }\n        if (e.layoutInfo) {\n            this._contentLeft = conf.layoutInfo.contentLeft;\n            this._contentWidth = conf.layoutInfo.contentWidth;\n            this._contentHeight = conf.layoutInfo.contentHeight;\n        }\n        if (e.lineHeight) {\n            this._lineHeight = conf.lineHeight;\n        }\n        if (e.accessibilitySupport) {\n            this._accessibilitySupport = conf.accessibilitySupport;\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\n        }\n        if (e.emptySelectionClipboard) {\n            this._emptySelectionClipboard = conf.emptySelectionClipboard;\n        }\n        if (e.copyWithSyntaxHighlighting) {\n            this._copyWithSyntaxHighlighting = conf.copyWithSyntaxHighlighting;\n        }\n        return true;\n    };\n    TextAreaHandler.prototype.onCursorStateChanged = function (e) {\n        this._selections = e.selections.slice(0);\n        this._textAreaInput.writeScreenReaderContent('selection changed');\n        return true;\n    };\n    TextAreaHandler.prototype.onDecorationsChanged = function (e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    };\n    TextAreaHandler.prototype.onFlushed = function (e) {\n        return true;\n    };\n    TextAreaHandler.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    TextAreaHandler.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    TextAreaHandler.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    TextAreaHandler.prototype.onScrollChanged = function (e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    };\n    TextAreaHandler.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    // --- begin view API\n    TextAreaHandler.prototype.isFocused = function () {\n        return this._textAreaInput.isFocused();\n    };\n    TextAreaHandler.prototype.focusTextArea = function () {\n        this._textAreaInput.focusTextArea();\n    };\n    TextAreaHandler.prototype.prepareRender = function (ctx) {\n        if (this._accessibilitySupport === accessibility_1.AccessibilitySupport.Enabled) {\n            // Do not move the textarea with the cursor, as this generates accessibility events that might confuse screen readers\n            // See https://github.com/Microsoft/vscode/issues/26730\n            this._primaryCursorVisibleRange = null;\n        }\n        else {\n            var primaryCursorPosition = new position_1.Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n            this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(primaryCursorPosition);\n        }\n    };\n    TextAreaHandler.prototype.render = function (ctx) {\n        this._textAreaInput.writeScreenReaderContent('render');\n        this._render();\n    };\n    TextAreaHandler.prototype._render = function () {\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            this._renderInsideEditor(this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight, true);\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        var left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        var top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        this._renderInsideEditor(top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1, false);\n    };\n    TextAreaHandler.prototype._renderInsideEditor = function (top, left, width, height, useEditorFont) {\n        var ta = this.textArea;\n        var tac = this.textAreaCover;\n        if (useEditorFont) {\n            configuration_1.Configuration.applyFontInfo(ta, this._fontInfo);\n        }\n        else {\n            ta.setFontSize(1);\n            ta.setLineHeight(this._fontInfo.lineHeight);\n        }\n        ta.setTop(top);\n        ta.setLeft(left);\n        ta.setWidth(width);\n        ta.setHeight(height);\n        tac.setTop(0);\n        tac.setLeft(0);\n        tac.setWidth(0);\n        tac.setHeight(0);\n    };\n    TextAreaHandler.prototype._renderAtTopLeft = function () {\n        var ta = this.textArea;\n        var tac = this.textAreaCover;\n        configuration_1.Configuration.applyFontInfo(ta, this._fontInfo);\n        ta.setTop(0);\n        ta.setLeft(0);\n        tac.setTop(0);\n        tac.setLeft(0);\n        if (canUseZeroSizeTextarea) {\n            ta.setWidth(0);\n            ta.setHeight(0);\n            tac.setWidth(0);\n            tac.setHeight(0);\n            return;\n        }\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textare to 0x0 breaks IME badly.\n        ta.setWidth(1);\n        ta.setHeight(1);\n        tac.setWidth(1);\n        tac.setHeight(1);\n        if (this._context.configuration.editor.viewInfo.glyphMargin) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + margin_1.Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (this._context.configuration.editor.viewInfo.renderLineNumbers !== editorOptions_1.RenderLineNumbersType.Off) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + lineNumbers_1.LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    };\n    return TextAreaHandler;\n}(viewPart_1.ViewPart));\nexports.TextAreaHandler = TextAreaHandler;\nfunction measureText(text, fontInfo) {\n    // adjust width by its size\n    var canvasElem = document.createElement('canvas');\n    var context = canvasElem.getContext('2d');\n    context.font = createFontString(fontInfo);\n    var metrics = context.measureText(text);\n    if (browser.isFirefox) {\n        return metrics.width + 2; // +2 for Japanese...\n    }\n    else {\n        return metrics.width;\n    }\n}\nfunction createFontString(bareFontInfo) {\n    return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\n    // The full font syntax is:\n    // style | variant | weight | stretch | size/line-height | fontFamily\n    // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n    // But it appears Edge and IE11 cannot properly parse `stretch`.\n    return fontStyle + \" normal \" + fontWeight + \" \" + fontSize + \"px / \" + lineHeight + \"px \" + fontFamily;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./textAreaHandler';\nimport * as browser from 'vs/base/browser/browser';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport * as platform from 'vs/base/common/platform';\nimport * as strings from 'vs/base/common/strings';\nimport { Configuration } from 'vs/editor/browser/config/configuration';\nimport { CopyOptions, ICompositionData, IPasteData, ITextAreaInputHost, TextAreaInput } from 'vs/editor/browser/controller/textAreaInput';\nimport { ISimpleModel, ITypeData, PagedScreenReaderStrategy, TextAreaState } from 'vs/editor/browser/controller/textAreaState';\nimport { ViewController } from 'vs/editor/browser/view/viewController';\nimport { PartFingerprint, PartFingerprints, ViewPart } from 'vs/editor/browser/view/viewPart';\nimport { LineNumbersOverlay } from 'vs/editor/browser/viewParts/lineNumbers/lineNumbers';\nimport { Margin } from 'vs/editor/browser/viewParts/margin/margin';\nimport { RenderLineNumbersType } from 'vs/editor/common/config/editorOptions';\nimport { BareFontInfo } from 'vs/editor/common/config/fontInfo';\nimport { WordCharacterClass, getMapForWordSeparators } from 'vs/editor/common/controller/wordCharacterClassifier';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference } from 'vs/editor/common/model';\nimport { HorizontalRange, RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\n\nexport interface ITextAreaHandlerHelper {\n\tvisibleRangeForPositionRelativeToEditor(lineNumber: number, column: number): HorizontalRange | null;\n}\n\nclass VisibleTextAreaData {\n\t_visibleTextAreaBrand: void;\n\n\tpublic readonly top: number;\n\tpublic readonly left: number;\n\tpublic readonly width: number;\n\n\tconstructor(top: number, left: number, width: number) {\n\t\tthis.top = top;\n\t\tthis.left = left;\n\t\tthis.width = width;\n\t}\n\n\tpublic setWidth(width: number): VisibleTextAreaData {\n\t\treturn new VisibleTextAreaData(this.top, this.left, width);\n\t}\n}\n\nconst canUseZeroSizeTextarea = (browser.isEdgeOrIE || browser.isFirefox);\n\ninterface LocalClipboardMetadata {\n\tlastCopiedValue: string;\n\tisFromEmptySelection: boolean;\n\tmulticursorText: string[] | null;\n}\n\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nclass LocalClipboardMetadataManager {\n\tpublic static INSTANCE = new LocalClipboardMetadataManager();\n\n\tprivate _lastState: LocalClipboardMetadata | null;\n\n\tconstructor() {\n\t\tthis._lastState = null;\n\t}\n\n\tpublic set(state: LocalClipboardMetadata | null): void {\n\t\tthis._lastState = state;\n\t}\n\n\tpublic get(pastedText: string): LocalClipboardMetadata | null {\n\t\tif (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n\t\t\t// match!\n\t\t\treturn this._lastState;\n\t\t}\n\t\tthis._lastState = null;\n\t\treturn null;\n\t}\n}\n\nexport class TextAreaHandler extends ViewPart {\n\n\tprivate readonly _viewController: ViewController;\n\tprivate readonly _viewHelper: ITextAreaHandlerHelper;\n\tprivate _accessibilitySupport: AccessibilitySupport;\n\tprivate _contentLeft: number;\n\tprivate _contentWidth: number;\n\tprivate _contentHeight: number;\n\tprivate _scrollLeft: number;\n\tprivate _scrollTop: number;\n\tprivate _fontInfo: BareFontInfo;\n\tprivate _lineHeight: number;\n\tprivate _emptySelectionClipboard: boolean;\n\tprivate _copyWithSyntaxHighlighting: boolean;\n\n\t/**\n\t * Defined only when the text area is visible (composition case).\n\t */\n\tprivate _visibleTextArea: VisibleTextAreaData | null;\n\tprivate _selections: Selection[];\n\n\tpublic readonly textArea: FastDomNode<HTMLTextAreaElement>;\n\tpublic readonly textAreaCover: FastDomNode<HTMLElement>;\n\tprivate readonly _textAreaInput: TextAreaInput;\n\n\tconstructor(context: ViewContext, viewController: ViewController, viewHelper: ITextAreaHandlerHelper) {\n\t\tsuper(context);\n\n\t\tthis._viewController = viewController;\n\t\tthis._viewHelper = viewHelper;\n\n\t\tconst conf = this._context.configuration.editor;\n\n\t\tthis._accessibilitySupport = conf.accessibilitySupport;\n\t\tthis._contentLeft = conf.layoutInfo.contentLeft;\n\t\tthis._contentWidth = conf.layoutInfo.contentWidth;\n\t\tthis._contentHeight = conf.layoutInfo.contentHeight;\n\t\tthis._scrollLeft = 0;\n\t\tthis._scrollTop = 0;\n\t\tthis._fontInfo = conf.fontInfo;\n\t\tthis._lineHeight = conf.lineHeight;\n\t\tthis._emptySelectionClipboard = conf.emptySelectionClipboard;\n\t\tthis._copyWithSyntaxHighlighting = conf.copyWithSyntaxHighlighting;\n\n\t\tthis._visibleTextArea = null;\n\t\tthis._selections = [new Selection(1, 1, 1, 1)];\n\n\t\t// Text Area (The focus will always be in the textarea when the cursor is blinking)\n\t\tthis.textArea = createFastDomNode(document.createElement('textarea'));\n\t\tPartFingerprints.write(this.textArea, PartFingerprint.TextArea);\n\t\tthis.textArea.setClassName('inputarea');\n\t\tthis.textArea.setAttribute('wrap', 'off');\n\t\tthis.textArea.setAttribute('autocorrect', 'off');\n\t\tthis.textArea.setAttribute('autocapitalize', 'off');\n\t\tthis.textArea.setAttribute('autocomplete', 'off');\n\t\tthis.textArea.setAttribute('spellcheck', 'false');\n\t\tthis.textArea.setAttribute('aria-label', conf.viewInfo.ariaLabel);\n\t\tthis.textArea.setAttribute('role', 'textbox');\n\t\tthis.textArea.setAttribute('aria-multiline', 'true');\n\t\tthis.textArea.setAttribute('aria-haspopup', 'false');\n\t\tthis.textArea.setAttribute('aria-autocomplete', 'both');\n\n\t\tthis.textAreaCover = createFastDomNode(document.createElement('div'));\n\t\tthis.textAreaCover.setPosition('absolute');\n\n\t\tconst simpleModel: ISimpleModel = {\n\t\t\tgetLineCount: (): number => {\n\t\t\t\treturn this._context.model.getLineCount();\n\t\t\t},\n\t\t\tgetLineMaxColumn: (lineNumber: number): number => {\n\t\t\t\treturn this._context.model.getLineMaxColumn(lineNumber);\n\t\t\t},\n\t\t\tgetValueInRange: (range: Range, eol: EndOfLinePreference): string => {\n\t\t\t\treturn this._context.model.getValueInRange(range, eol);\n\t\t\t}\n\t\t};\n\n\t\tconst textAreaInputHost: ITextAreaInputHost = {\n\t\t\tgetPlainTextToCopy: (): string => {\n\t\t\t\tconst rawWhatToCopy = this._context.model.getPlainTextToCopy(this._selections, this._emptySelectionClipboard, platform.isWindows);\n\t\t\t\tconst newLineCharacter = this._context.model.getEOL();\n\n\t\t\t\tconst isFromEmptySelection = (this._emptySelectionClipboard && this._selections.length === 1 && this._selections[0].isEmpty());\n\t\t\t\tconst multicursorText = (Array.isArray(rawWhatToCopy) ? rawWhatToCopy : null);\n\t\t\t\tconst whatToCopy = (Array.isArray(rawWhatToCopy) ? rawWhatToCopy.join(newLineCharacter) : rawWhatToCopy);\n\n\t\t\t\tlet metadata: LocalClipboardMetadata | null = null;\n\t\t\t\tif (isFromEmptySelection || multicursorText) {\n\t\t\t\t\t// Only store the non-default metadata\n\n\t\t\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t\t\tconst lastCopiedValue = (browser.isFirefox ? whatToCopy.replace(/\\r\\n/g, '\\n') : whatToCopy);\n\t\t\t\t\tmetadata = {\n\t\t\t\t\t\tlastCopiedValue: lastCopiedValue,\n\t\t\t\t\t\tisFromEmptySelection: (this._emptySelectionClipboard && this._selections.length === 1 && this._selections[0].isEmpty()),\n\t\t\t\t\t\tmulticursorText: multicursorText\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tLocalClipboardMetadataManager.INSTANCE.set(metadata);\n\n\t\t\t\treturn whatToCopy;\n\t\t\t},\n\n\t\t\tgetHTMLToCopy: (): string | null => {\n\t\t\t\tif (!this._copyWithSyntaxHighlighting && !CopyOptions.forceCopyWithSyntaxHighlighting) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn this._context.model.getHTMLToCopy(this._selections, this._emptySelectionClipboard);\n\t\t\t},\n\n\t\t\tgetScreenReaderContent: (currentState: TextAreaState): TextAreaState => {\n\n\t\t\t\tif (browser.isIPad) {\n\t\t\t\t\t// Do not place anything in the textarea for the iPad\n\t\t\t\t\treturn TextAreaState.EMPTY;\n\t\t\t\t}\n\n\t\t\t\tif (this._accessibilitySupport === AccessibilitySupport.Disabled) {\n\t\t\t\t\t// We know for a fact that a screen reader is not attached\n\t\t\t\t\t// On OSX, we write the character before the cursor to allow for \"long-press\" composition\n\t\t\t\t\t// Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n\t\t\t\t\tif (browser.isMacintosh) {\n\t\t\t\t\t\tconst selection = this._selections[0];\n\t\t\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\t\t\tconst position = selection.getStartPosition();\n\n\t\t\t\t\t\t\tlet textBefore = this._getWordBeforePosition(position);\n\t\t\t\t\t\t\tif (textBefore.length === 0) {\n\t\t\t\t\t\t\t\ttextBefore = this._getCharacterBeforePosition(position);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (textBefore.length > 0) {\n\t\t\t\t\t\t\t\treturn new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn TextAreaState.EMPTY;\n\t\t\t\t}\n\n\t\t\t\treturn PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilitySupport === AccessibilitySupport.Unknown);\n\t\t\t},\n\n\t\t\tdeduceModelPosition: (viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position => {\n\t\t\t\treturn this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n\t\t\t}\n\t\t};\n\n\t\tthis._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\n\n\t\tthis._register(this._textAreaInput.onKeyDown((e: IKeyboardEvent) => {\n\t\t\tthis._viewController.emitKeyDown(e);\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onKeyUp((e: IKeyboardEvent) => {\n\t\t\tthis._viewController.emitKeyUp(e);\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onPaste((e: IPasteData) => {\n\t\t\tconst metadata = LocalClipboardMetadataManager.INSTANCE.get(e.text);\n\n\t\t\tlet pasteOnNewLine = false;\n\t\t\tlet multicursorText: string[] | null = null;\n\t\t\tif (metadata) {\n\t\t\t\tpasteOnNewLine = (this._emptySelectionClipboard && metadata.isFromEmptySelection);\n\t\t\t\tmulticursorText = metadata.multicursorText;\n\t\t\t}\n\t\t\tthis._viewController.paste('keyboard', e.text, pasteOnNewLine, multicursorText);\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onCut(() => {\n\t\t\tthis._viewController.cut('keyboard');\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onType((e: ITypeData) => {\n\t\t\tif (e.replaceCharCnt) {\n\t\t\t\tthis._viewController.replacePreviousChar('keyboard', e.text, e.replaceCharCnt);\n\t\t\t} else {\n\t\t\t\tthis._viewController.type('keyboard', e.text);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onSelectionChangeRequest((modelSelection: Selection) => {\n\t\t\tthis._viewController.setSelection('keyboard', modelSelection);\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onCompositionStart(() => {\n\t\t\tconst lineNumber = this._selections[0].startLineNumber;\n\t\t\tconst column = this._selections[0].startColumn;\n\n\t\t\tthis._context.privateViewEventBus.emit(new viewEvents.ViewRevealRangeRequestEvent(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tviewEvents.VerticalRevealType.Simple,\n\t\t\t\ttrue,\n\t\t\t\tScrollType.Immediate\n\t\t\t));\n\n\t\t\t// Find range pixel position\n\t\t\tconst visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n\n\t\t\tif (visibleRange) {\n\t\t\t\tthis._visibleTextArea = new VisibleTextAreaData(\n\t\t\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber),\n\t\t\t\t\tvisibleRange.left,\n\t\t\t\t\tcanUseZeroSizeTextarea ? 0 : 1\n\t\t\t\t);\n\t\t\t\tthis._render();\n\t\t\t}\n\n\t\t\t// Show the textarea\n\t\t\tthis.textArea.setClassName('inputarea ime-input');\n\n\t\t\tthis._viewController.compositionStart('keyboard');\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onCompositionUpdate((e: ICompositionData) => {\n\t\t\tif (browser.isEdgeOrIE) {\n\t\t\t\t// Due to isEdgeOrIE (where the textarea was not cleared initially)\n\t\t\t\t// we cannot assume the text consists only of the composited text\n\t\t\t\tthis._visibleTextArea = this._visibleTextArea!.setWidth(0);\n\t\t\t} else {\n\t\t\t\t// adjust width by its size\n\t\t\t\tthis._visibleTextArea = this._visibleTextArea!.setWidth(measureText(e.data, this._fontInfo));\n\t\t\t}\n\t\t\tthis._render();\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onCompositionEnd(() => {\n\n\t\t\tthis._visibleTextArea = null;\n\t\t\tthis._render();\n\n\t\t\tthis.textArea.setClassName('inputarea');\n\t\t\tthis._viewController.compositionEnd('keyboard');\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onFocus(() => {\n\t\t\tthis._context.privateViewEventBus.emit(new viewEvents.ViewFocusChangedEvent(true));\n\t\t}));\n\n\t\tthis._register(this._textAreaInput.onBlur(() => {\n\t\t\tthis._context.privateViewEventBus.emit(new viewEvents.ViewFocusChangedEvent(false));\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprivate _getWordBeforePosition(position: Position): string {\n\t\tconst lineContent = this._context.model.getLineContent(position.lineNumber);\n\t\tconst wordSeparators = getMapForWordSeparators(this._context.configuration.editor.wordSeparators);\n\n\t\tlet column = position.column;\n\t\tlet distance = 0;\n\t\twhile (column > 1) {\n\t\t\tconst charCode = lineContent.charCodeAt(column - 2);\n\t\t\tconst charClass = wordSeparators.get(charCode);\n\t\t\tif (charClass !== WordCharacterClass.Regular || distance > 50) {\n\t\t\t\treturn lineContent.substring(column - 1, position.column - 1);\n\t\t\t}\n\t\t\tdistance++;\n\t\t\tcolumn--;\n\t\t}\n\t\treturn lineContent.substring(0, position.column - 1);\n\t}\n\n\tprivate _getCharacterBeforePosition(position: Position): string {\n\t\tif (position.column > 1) {\n\t\t\tconst lineContent = this._context.model.getLineContent(position.lineNumber);\n\t\t\tconst charBefore = lineContent.charAt(position.column - 2);\n\t\t\tif (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n\t\t\t\treturn charBefore;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst conf = this._context.configuration.editor;\n\n\t\tif (e.fontInfo) {\n\t\t\tthis._fontInfo = conf.fontInfo;\n\t\t}\n\t\tif (e.viewInfo) {\n\t\t\tthis.textArea.setAttribute('aria-label', conf.viewInfo.ariaLabel);\n\t\t}\n\t\tif (e.layoutInfo) {\n\t\t\tthis._contentLeft = conf.layoutInfo.contentLeft;\n\t\t\tthis._contentWidth = conf.layoutInfo.contentWidth;\n\t\t\tthis._contentHeight = conf.layoutInfo.contentHeight;\n\t\t}\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = conf.lineHeight;\n\t\t}\n\t\tif (e.accessibilitySupport) {\n\t\t\tthis._accessibilitySupport = conf.accessibilitySupport;\n\t\t\tthis._textAreaInput.writeScreenReaderContent('strategy changed');\n\t\t}\n\t\tif (e.emptySelectionClipboard) {\n\t\t\tthis._emptySelectionClipboard = conf.emptySelectionClipboard;\n\t\t}\n\t\tif (e.copyWithSyntaxHighlighting) {\n\t\t\tthis._copyWithSyntaxHighlighting = conf.copyWithSyntaxHighlighting;\n\t\t}\n\n\t\treturn true;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections.slice(0);\n\t\tthis._textAreaInput.writeScreenReaderContent('selection changed');\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\tthis._scrollLeft = e.scrollLeft;\n\t\tthis._scrollTop = e.scrollTop;\n\t\treturn true;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\t// --- begin view API\n\n\tpublic isFocused(): boolean {\n\t\treturn this._textAreaInput.isFocused();\n\t}\n\n\tpublic focusTextArea(): void {\n\t\tthis._textAreaInput.focusTextArea();\n\t}\n\n\t// --- end view API\n\n\tprivate _primaryCursorVisibleRange: HorizontalRange | null = null;\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (this._accessibilitySupport === AccessibilitySupport.Enabled) {\n\t\t\t// Do not move the textarea with the cursor, as this generates accessibility events that might confuse screen readers\n\t\t\t// See https://github.com/Microsoft/vscode/issues/26730\n\t\t\tthis._primaryCursorVisibleRange = null;\n\t\t} else {\n\t\t\tconst primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n\t\t\tthis._primaryCursorVisibleRange = ctx.visibleRangeForPosition(primaryCursorPosition);\n\t\t}\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._textAreaInput.writeScreenReaderContent('render');\n\t\tthis._render();\n\t}\n\n\tprivate _render(): void {\n\t\tif (this._visibleTextArea) {\n\t\t\t// The text area is visible for composition reasons\n\t\t\tthis._renderInsideEditor(\n\t\t\t\tthis._visibleTextArea.top - this._scrollTop,\n\t\t\t\tthis._contentLeft + this._visibleTextArea.left - this._scrollLeft,\n\t\t\t\tthis._visibleTextArea.width,\n\t\t\t\tthis._lineHeight,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._primaryCursorVisibleRange) {\n\t\t\t// The primary cursor is outside the viewport => place textarea to the top left\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\tconst left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n\t\tif (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n\t\t\t// cursor is outside the viewport\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\tconst top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n\t\tif (top < 0 || top > this._contentHeight) {\n\t\t\t// cursor is outside the viewport\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\t// The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n\t\tthis._renderInsideEditor(\n\t\t\ttop, left,\n\t\t\tcanUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1,\n\t\t\tfalse\n\t\t);\n\t}\n\n\tprivate _renderInsideEditor(top: number, left: number, width: number, height: number, useEditorFont: boolean): void {\n\t\tconst ta = this.textArea;\n\t\tconst tac = this.textAreaCover;\n\n\t\tif (useEditorFont) {\n\t\t\tConfiguration.applyFontInfo(ta, this._fontInfo);\n\t\t} else {\n\t\t\tta.setFontSize(1);\n\t\t\tta.setLineHeight(this._fontInfo.lineHeight);\n\t\t}\n\n\t\tta.setTop(top);\n\t\tta.setLeft(left);\n\t\tta.setWidth(width);\n\t\tta.setHeight(height);\n\n\t\ttac.setTop(0);\n\t\ttac.setLeft(0);\n\t\ttac.setWidth(0);\n\t\ttac.setHeight(0);\n\t}\n\n\tprivate _renderAtTopLeft(): void {\n\t\tconst ta = this.textArea;\n\t\tconst tac = this.textAreaCover;\n\n\t\tConfiguration.applyFontInfo(ta, this._fontInfo);\n\t\tta.setTop(0);\n\t\tta.setLeft(0);\n\t\ttac.setTop(0);\n\t\ttac.setLeft(0);\n\n\t\tif (canUseZeroSizeTextarea) {\n\t\t\tta.setWidth(0);\n\t\t\tta.setHeight(0);\n\t\t\ttac.setWidth(0);\n\t\t\ttac.setHeight(0);\n\t\t\treturn;\n\t\t}\n\n\t\t// (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n\t\t// specifically, when doing Korean IME, setting the textare to 0x0 breaks IME badly.\n\n\t\tta.setWidth(1);\n\t\tta.setHeight(1);\n\t\ttac.setWidth(1);\n\t\ttac.setHeight(1);\n\n\t\tif (this._context.configuration.editor.viewInfo.glyphMargin) {\n\t\t\ttac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n\t\t} else {\n\t\t\tif (this._context.configuration.editor.viewInfo.renderLineNumbers !== RenderLineNumbersType.Off) {\n\t\t\t\ttac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n\t\t\t} else {\n\t\t\t\ttac.setClassName('monaco-editor-background textAreaCover');\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction measureText(text: string, fontInfo: BareFontInfo): number {\n\t// adjust width by its size\n\tconst canvasElem = <HTMLCanvasElement>document.createElement('canvas');\n\tconst context = canvasElem.getContext('2d')!;\n\tcontext.font = createFontString(fontInfo);\n\tconst metrics = context.measureText(text);\n\n\tif (browser.isFirefox) {\n\t\treturn metrics.width + 2; // +2 for Japanese...\n\t} else {\n\t\treturn metrics.width;\n\t}\n}\n\nfunction createFontString(bareFontInfo: BareFontInfo): string {\n\treturn doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\n\nfunction doCreateFontString(fontStyle: string, fontWeight: string, fontSize: number, lineHeight: number, fontFamily: string): string {\n\t// The full font syntax is:\n\t// style | variant | weight | stretch | size/line-height | fontFamily\n\t// (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n\t// But it appears Edge and IE11 cannot properly parse `stretch`.\n\treturn `${fontStyle} normal ${fontWeight} ${fontSize}px / ${lineHeight}px ${fontFamily}`;\n}\n"]}]}