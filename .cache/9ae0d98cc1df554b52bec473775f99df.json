{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configuration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configuration.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar crypto_1 = require(\"crypto\");\nvar resources = require(\"vs/base/common/resources\");\nvar event_1 = require(\"vs/base/common/event\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar errors = require(\"vs/base/common/errors\");\nvar collections = require(\"vs/base/common/collections\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar configurationModels_1 = require(\"vs/platform/configuration/common/configurationModels\");\nvar configurationModels_2 = require(\"vs/workbench/services/configuration/common/configurationModels\");\nvar configuration_1 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar extfs = require(\"vs/base/node/extfs\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar path_1 = require(\"vs/base/common/path\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar network_1 = require(\"vs/base/common/network\");\nvar configuration_2 = require(\"vs/platform/configuration/common/configuration\");\nvar configuration_3 = require(\"vs/platform/configuration/node/configuration\");\nvar LocalUserConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(LocalUserConfiguration, _super);\n    function LocalUserConfiguration(environmentService) {\n        var _this = _super.call(this) || this;\n        _this._onDidChangeConfiguration = _this._register(new event_1.Emitter());\n        _this.onDidChangeConfiguration = _this._onDidChangeConfiguration.event;\n        _this.userConfiguration = _this._register(new configuration_3.NodeBasedUserConfiguration(environmentService.appSettingsPath));\n        _this._register(_this.userConfiguration.onDidChangeConfiguration(function (configurationModel) { return _this._onDidChangeConfiguration.fire(configurationModel); }));\n        return _this;\n    }\n    LocalUserConfiguration.prototype.initialize = function () {\n        return this.userConfiguration.initialize();\n    };\n    LocalUserConfiguration.prototype.reload = function () {\n        return this.userConfiguration.reload();\n    };\n    LocalUserConfiguration.prototype.adopt = function (fileService) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, null];\n            });\n        });\n    };\n    return LocalUserConfiguration;\n}(lifecycle_1.Disposable));\nexports.LocalUserConfiguration = LocalUserConfiguration;\nvar RemoteUserConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoteUserConfiguration, _super);\n    function RemoteUserConfiguration(remoteAuthority, environmentService) {\n        var _this = _super.call(this) || this;\n        _this._onDidChangeConfiguration = _this._register(new event_1.Emitter());\n        _this.onDidChangeConfiguration = _this._onDidChangeConfiguration.event;\n        _this._userConfiguration = _this._cachedConfiguration = new CachedUserConfiguration(remoteAuthority, environmentService);\n        return _this;\n    }\n    RemoteUserConfiguration.prototype.initialize = function () {\n        return this._userConfiguration.initialize();\n    };\n    RemoteUserConfiguration.prototype.reload = function () {\n        return this._userConfiguration.reload();\n    };\n    RemoteUserConfiguration.prototype.adopt = function (configurationResource, fileService) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var oldConfigurationModel, newConfigurationModel, _a, added, updated, removed;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this._userConfiguration instanceof CachedUserConfiguration)) return [3 /*break*/, 3];\n                        oldConfigurationModel = this._userConfiguration.getConfigurationModel();\n                        newConfigurationModel = new configurationModels_1.ConfigurationModel();\n                        if (!configurationResource) return [3 /*break*/, 2];\n                        this._userConfiguration = new configuration_3.FileServiceBasedUserConfiguration(configurationResource, fileService);\n                        this._register(this._userConfiguration.onDidChangeConfiguration(function (configurationModel) { return _this.onDidUserConfigurationChange(configurationModel); }));\n                        return [4 /*yield*/, this._userConfiguration.initialize()];\n                    case 1:\n                        newConfigurationModel = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        _a = configuration_2.compare(oldConfigurationModel, newConfigurationModel), added = _a.added, updated = _a.updated, removed = _a.removed;\n                        if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n                            this.updateCache(newConfigurationModel);\n                            return [2 /*return*/, newConfigurationModel];\n                        }\n                        _b.label = 3;\n                    case 3: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    RemoteUserConfiguration.prototype.onDidUserConfigurationChange = function (configurationModel) {\n        this.updateCache(configurationModel);\n        this._onDidChangeConfiguration.fire(configurationModel);\n    };\n    RemoteUserConfiguration.prototype.updateCache = function (configurationModel) {\n        return this._cachedConfiguration.updateConfiguration(configurationModel);\n    };\n    return RemoteUserConfiguration;\n}(lifecycle_1.Disposable));\nexports.RemoteUserConfiguration = RemoteUserConfiguration;\nvar CachedUserConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(CachedUserConfiguration, _super);\n    function CachedUserConfiguration(remoteAuthority, environmentService) {\n        var _this = _super.call(this) || this;\n        _this.environmentService = environmentService;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this.cachedFolderPath = path_1.join(_this.environmentService.userDataPath, 'CachedConfigurations', 'user', remoteAuthority);\n        _this.cachedConfigurationPath = path_1.join(_this.cachedFolderPath, 'configuration.json');\n        _this.configurationModel = new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    CachedUserConfiguration.prototype.getConfigurationModel = function () {\n        return this.configurationModel;\n    };\n    CachedUserConfiguration.prototype.initialize = function () {\n        return this.reload();\n    };\n    CachedUserConfiguration.prototype.reload = function () {\n        var _this = this;\n        return pfs.readFile(this.cachedConfigurationPath)\n            .then(function (content) { return content.toString(); }, function () { return ''; })\n            .then(function (content) {\n            try {\n                var parsed = JSON.parse(content);\n                _this.configurationModel = new configurationModels_1.ConfigurationModel(parsed.contents, parsed.keys, parsed.overrides);\n            }\n            catch (e) {\n            }\n            return _this.configurationModel;\n        });\n    };\n    CachedUserConfiguration.prototype.updateConfiguration = function (configurationModel) {\n        var _this = this;\n        var raw = JSON.stringify(configurationModel.toJSON());\n        return this.createCachedFolder().then(function (created) {\n            if (created) {\n                return configurationModel.keys.length ? pfs.writeFile(_this.cachedConfigurationPath, raw) : pfs.rimraf(_this.cachedFolderPath);\n            }\n            return undefined;\n        });\n    };\n    CachedUserConfiguration.prototype.createCachedFolder = function () {\n        var _this = this;\n        return Promise.resolve(pfs.exists(this.cachedFolderPath))\n            .then(undefined, function () { return false; })\n            .then(function (exists) { return exists ? exists : pfs.mkdirp(_this.cachedFolderPath).then(function () { return true; }, function () { return false; }); });\n    };\n    return CachedUserConfiguration;\n}(lifecycle_1.Disposable));\nvar WorkspaceConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceConfiguration, _super);\n    function WorkspaceConfiguration(environmentService) {\n        var _this = _super.call(this) || this;\n        _this._workspaceIdentifier = null;\n        _this._fileService = null;\n        _this._onDidUpdateConfiguration = _this._register(new event_1.Emitter());\n        _this.onDidUpdateConfiguration = _this._onDidUpdateConfiguration.event;\n        _this._cachedConfiguration = new CachedWorkspaceConfiguration(environmentService);\n        _this._workspaceConfiguration = _this._cachedConfiguration;\n        return _this;\n    }\n    WorkspaceConfiguration.prototype.adopt = function (fileService) {\n        if (!this._fileService) {\n            this._fileService = fileService;\n            if (this.adoptWorkspaceConfiguration()) {\n                if (this._workspaceIdentifier) {\n                    return this._workspaceConfiguration.load(this._workspaceIdentifier).then(function () { return true; });\n                }\n            }\n        }\n        return Promise.resolve(false);\n    };\n    WorkspaceConfiguration.prototype.load = function (workspaceIdentifier) {\n        this._workspaceIdentifier = workspaceIdentifier;\n        this.adoptWorkspaceConfiguration();\n        return this._workspaceConfiguration.load(this._workspaceIdentifier);\n    };\n    WorkspaceConfiguration.prototype.reload = function () {\n        return this._workspaceIdentifier ? this.load(this._workspaceIdentifier) : Promise.resolve();\n    };\n    WorkspaceConfiguration.prototype.getFolders = function () {\n        return this._workspaceConfiguration.getFolders();\n    };\n    WorkspaceConfiguration.prototype.setFolders = function (folders, jsonEditingService) {\n        var _this = this;\n        if (this._workspaceIdentifier) {\n            return jsonEditingService.write(this._workspaceIdentifier.configPath, { key: 'folders', value: folders }, true)\n                .then(function () { return _this.reload(); });\n        }\n        return Promise.resolve();\n    };\n    WorkspaceConfiguration.prototype.getConfiguration = function () {\n        return this._workspaceConfiguration.getWorkspaceSettings();\n    };\n    WorkspaceConfiguration.prototype.reprocessWorkspaceSettings = function () {\n        this._workspaceConfiguration.reprocessWorkspaceSettings();\n        return this.getConfiguration();\n    };\n    WorkspaceConfiguration.prototype.adoptWorkspaceConfiguration = function () {\n        var _this = this;\n        if (this._workspaceIdentifier) {\n            if (this._fileService) {\n                if (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {\n                    var oldWorkspaceConfiguration = this._workspaceConfiguration;\n                    this._workspaceConfiguration = new FileServiceBasedWorkspaceConfiguration(this._fileService, oldWorkspaceConfiguration);\n                    this._register(this._workspaceConfiguration.onDidChange(function (e) { return _this.onDidWorkspaceConfigurationChange(); }));\n                    if (oldWorkspaceConfiguration instanceof CachedWorkspaceConfiguration) {\n                        this.updateCache();\n                        return true;\n                    }\n                    else {\n                        lifecycle_1.dispose(oldWorkspaceConfiguration);\n                        return false;\n                    }\n                }\n                return false;\n            }\n            if (this._workspaceIdentifier.configPath.scheme === network_1.Schemas.file) {\n                if (!(this._workspaceConfiguration instanceof NodeBasedWorkspaceConfiguration)) {\n                    lifecycle_1.dispose(this._workspaceConfiguration);\n                    this._workspaceConfiguration = new NodeBasedWorkspaceConfiguration();\n                    return true;\n                }\n                return false;\n            }\n        }\n        return false;\n    };\n    WorkspaceConfiguration.prototype.onDidWorkspaceConfigurationChange = function () {\n        var _this = this;\n        this.updateCache();\n        this.reload().then(function () { return _this._onDidUpdateConfiguration.fire(); });\n    };\n    WorkspaceConfiguration.prototype.updateCache = function () {\n        var _this = this;\n        if (this._workspaceIdentifier && this._workspaceIdentifier.configPath.scheme !== network_1.Schemas.file && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {\n            return this._workspaceConfiguration.load(this._workspaceIdentifier)\n                .then(function () { return _this._cachedConfiguration.updateWorkspace(_this._workspaceIdentifier, _this._workspaceConfiguration.getConfigurationModel()); });\n        }\n        return Promise.resolve(undefined);\n    };\n    return WorkspaceConfiguration;\n}(lifecycle_1.Disposable));\nexports.WorkspaceConfiguration = WorkspaceConfiguration;\nvar AbstractWorkspaceConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractWorkspaceConfiguration, _super);\n    function AbstractWorkspaceConfiguration(from) {\n        var _this = _super.call(this) || this;\n        _this._workspaceIdentifier = null;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this.workspaceConfigurationModelParser = from ? from.workspaceConfigurationModelParser : new configurationModels_2.WorkspaceConfigurationModelParser('');\n        _this.workspaceSettings = from ? from.workspaceSettings : new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    Object.defineProperty(AbstractWorkspaceConfiguration.prototype, \"workspaceIdentifier\", {\n        get: function () {\n            return this._workspaceIdentifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractWorkspaceConfiguration.prototype.load = function (workspaceIdentifier) {\n        var _this = this;\n        this._workspaceIdentifier = workspaceIdentifier;\n        return this.loadWorkspaceConfigurationContents(workspaceIdentifier)\n            .then(function (contents) {\n            _this.workspaceConfigurationModelParser = new configurationModels_2.WorkspaceConfigurationModelParser(workspaceIdentifier.id);\n            _this.workspaceConfigurationModelParser.parse(contents);\n            _this.consolidate();\n        });\n    };\n    AbstractWorkspaceConfiguration.prototype.getConfigurationModel = function () {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    };\n    AbstractWorkspaceConfiguration.prototype.getFolders = function () {\n        return this.workspaceConfigurationModelParser.folders;\n    };\n    AbstractWorkspaceConfiguration.prototype.getWorkspaceSettings = function () {\n        return this.workspaceSettings;\n    };\n    AbstractWorkspaceConfiguration.prototype.reprocessWorkspaceSettings = function () {\n        this.workspaceConfigurationModelParser.reprocessWorkspaceSettings();\n        this.consolidate();\n        return this.getWorkspaceSettings();\n    };\n    AbstractWorkspaceConfiguration.prototype.consolidate = function () {\n        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel);\n    };\n    return AbstractWorkspaceConfiguration;\n}(lifecycle_1.Disposable));\nvar NodeBasedWorkspaceConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(NodeBasedWorkspaceConfiguration, _super);\n    function NodeBasedWorkspaceConfiguration() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NodeBasedWorkspaceConfiguration.prototype.loadWorkspaceConfigurationContents = function (workspaceIdentifier) {\n        return pfs.readFile(workspaceIdentifier.configPath.fsPath)\n            .then(function (contents) { return contents.toString(); }, function (e) {\n            errors.onUnexpectedError(e);\n            return '';\n        });\n    };\n    return NodeBasedWorkspaceConfiguration;\n}(AbstractWorkspaceConfiguration));\nvar FileServiceBasedWorkspaceConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(FileServiceBasedWorkspaceConfiguration, _super);\n    function FileServiceBasedWorkspaceConfiguration(fileService, from) {\n        var _this = _super.call(this, from) || this;\n        _this.fileService = fileService;\n        _this.workspaceConfig = null;\n        _this.workspaceConfig = from && from.workspaceIdentifier ? from.workspaceIdentifier.configPath : null;\n        _this._register(fileService.onFileChanges(function (e) { return _this.handleWorkspaceFileEvents(e); }));\n        _this.reloadConfigurationScheduler = _this._register(new async_1.RunOnceScheduler(function () { return _this._onDidChange.fire(); }, 50));\n        _this.watchWorkspaceConfigurationFile();\n        _this._register(lifecycle_1.toDisposable(function () { return _this.unWatchWorkspaceConfigurtionFile(); }));\n        return _this;\n    }\n    FileServiceBasedWorkspaceConfiguration.prototype.watchWorkspaceConfigurationFile = function () {\n        if (this.workspaceConfig) {\n            this.fileService.watchFileChanges(this.workspaceConfig);\n        }\n    };\n    FileServiceBasedWorkspaceConfiguration.prototype.unWatchWorkspaceConfigurtionFile = function () {\n        if (this.workspaceConfig) {\n            this.fileService.unwatchFileChanges(this.workspaceConfig);\n        }\n    };\n    FileServiceBasedWorkspaceConfiguration.prototype.loadWorkspaceConfigurationContents = function (workspaceIdentifier) {\n        if (!(this.workspaceConfig && resources.isEqual(this.workspaceConfig, workspaceIdentifier.configPath))) {\n            this.unWatchWorkspaceConfigurtionFile();\n            this.workspaceConfig = workspaceIdentifier.configPath;\n            this.watchWorkspaceConfigurationFile();\n        }\n        return this.fileService.resolveContent(this.workspaceConfig)\n            .then(function (content) { return content.value; }, function (e) {\n            errors.onUnexpectedError(e);\n            return '';\n        });\n    };\n    FileServiceBasedWorkspaceConfiguration.prototype.handleWorkspaceFileEvents = function (event) {\n        if (this.workspaceConfig) {\n            var events = event.changes;\n            var affectedByChanges = false;\n            // Find changes that affect workspace file\n            for (var i = 0, len = events.length; i < len && !affectedByChanges; i++) {\n                affectedByChanges = resources.isEqual(this.workspaceConfig, events[i].resource);\n            }\n            if (affectedByChanges) {\n                this.reloadConfigurationScheduler.schedule();\n            }\n        }\n    };\n    return FileServiceBasedWorkspaceConfiguration;\n}(AbstractWorkspaceConfiguration));\nvar CachedWorkspaceConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(CachedWorkspaceConfiguration, _super);\n    function CachedWorkspaceConfiguration(environmentService) {\n        var _this = _super.call(this) || this;\n        _this.environmentService = environmentService;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this.workspaceConfigurationModelParser = new configurationModels_2.WorkspaceConfigurationModelParser('');\n        _this.workspaceSettings = new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    CachedWorkspaceConfiguration.prototype.load = function (workspaceIdentifier) {\n        var _this = this;\n        this.createPaths(workspaceIdentifier);\n        return pfs.readFile(this.cachedConfigurationPath)\n            .then(function (contents) {\n            _this.workspaceConfigurationModelParser = new configurationModels_2.WorkspaceConfigurationModelParser(_this.cachedConfigurationPath);\n            _this.workspaceConfigurationModelParser.parse(contents.toString());\n            _this.workspaceSettings = _this.workspaceConfigurationModelParser.settingsModel.merge(_this.workspaceConfigurationModelParser.launchModel);\n        }, function () { });\n    };\n    Object.defineProperty(CachedWorkspaceConfiguration.prototype, \"workspaceIdentifier\", {\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CachedWorkspaceConfiguration.prototype.getConfigurationModel = function () {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    };\n    CachedWorkspaceConfiguration.prototype.getFolders = function () {\n        return this.workspaceConfigurationModelParser.folders;\n    };\n    CachedWorkspaceConfiguration.prototype.getWorkspaceSettings = function () {\n        return this.workspaceSettings;\n    };\n    CachedWorkspaceConfiguration.prototype.reprocessWorkspaceSettings = function () {\n        return this.workspaceSettings;\n    };\n    CachedWorkspaceConfiguration.prototype.updateWorkspace = function (workspaceIdentifier, configurationModel) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var exists, raw, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 7, , 8]);\n                        this.createPaths(workspaceIdentifier);\n                        if (!configurationModel.keys.length) return [3 /*break*/, 5];\n                        return [4 /*yield*/, pfs.exists(this.cachedWorkspacePath)];\n                    case 1:\n                        exists = _a.sent();\n                        if (!!exists) return [3 /*break*/, 3];\n                        return [4 /*yield*/, pfs.mkdirp(this.cachedWorkspacePath)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        raw = JSON.stringify(configurationModel.toJSON().contents);\n                        return [4 /*yield*/, pfs.writeFile(this.cachedConfigurationPath, raw)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        pfs.rimraf(this.cachedWorkspacePath);\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        errors.onUnexpectedError(error_1);\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CachedWorkspaceConfiguration.prototype.createPaths = function (workspaceIdentifier) {\n        this.cachedWorkspacePath = path_1.join(this.environmentService.userDataPath, 'CachedConfigurations', 'workspaces', workspaceIdentifier.id);\n        this.cachedConfigurationPath = path_1.join(this.cachedWorkspacePath, 'workspace.json');\n    };\n    return CachedWorkspaceConfiguration;\n}(lifecycle_1.Disposable));\nfunction isFolderConfigurationFile(resource) {\n    var configurationNameResource = uri_1.URI.from({ scheme: resource.scheme, path: resources.basename(resource) });\n    return [configuration_1.FOLDER_SETTINGS_NAME + \".json\", configuration_1.TASKS_CONFIGURATION_KEY + \".json\", configuration_1.LAUNCH_CONFIGURATION_KEY + \".json\"].some(function (configurationFileName) {\n        return resources.isEqual(configurationNameResource, uri_1.URI.from({ scheme: resource.scheme, path: configurationFileName }));\n    }); // only workspace config files\n}\nfunction isFolderSettingsConfigurationFile(resource) {\n    return resources.isEqual(uri_1.URI.from({ scheme: resource.scheme, path: resources.basename(resource) }), uri_1.URI.from({ scheme: resource.scheme, path: configuration_1.FOLDER_SETTINGS_NAME + \".json\" }));\n}\nvar AbstractFolderConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractFolderConfiguration, _super);\n    function AbstractFolderConfiguration(folder, workbenchState, from) {\n        var _this = _super.call(this) || this;\n        _this.folder = folder;\n        _this._loaded = false;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this._folderSettingsModelParser = from ? from._folderSettingsModelParser : new configurationModels_2.FolderSettingsModelParser(configuration_1.FOLDER_SETTINGS_PATH, workspace_1.WorkbenchState.WORKSPACE === workbenchState ? [configurationRegistry_1.ConfigurationScope.RESOURCE] : [configurationRegistry_1.ConfigurationScope.WINDOW, configurationRegistry_1.ConfigurationScope.RESOURCE]);\n        _this._standAloneConfigurations = from ? from._standAloneConfigurations : [];\n        _this._cache = from ? from._cache : new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    Object.defineProperty(AbstractFolderConfiguration.prototype, \"loaded\", {\n        get: function () {\n            return this._loaded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractFolderConfiguration.prototype.loadConfiguration = function () {\n        var _this = this;\n        return this.loadFolderConfigurationContents()\n            .then(function (contents) {\n            // reset\n            _this._standAloneConfigurations = [];\n            _this._folderSettingsModelParser.parse('');\n            // parse\n            _this.parseContents(contents);\n            // Consolidate (support *.json files in the workspace settings folder)\n            _this.consolidate();\n            _this._loaded = true;\n            return _this._cache;\n        });\n    };\n    AbstractFolderConfiguration.prototype.reprocess = function () {\n        var oldContents = this._folderSettingsModelParser.configurationModel.contents;\n        this._folderSettingsModelParser.reprocess();\n        if (!objects_1.equals(oldContents, this._folderSettingsModelParser.configurationModel.contents)) {\n            this.consolidate();\n        }\n        return this._cache;\n    };\n    AbstractFolderConfiguration.prototype.consolidate = function () {\n        var _a;\n        this._cache = (_a = this._folderSettingsModelParser.configurationModel).merge.apply(_a, this._standAloneConfigurations);\n    };\n    AbstractFolderConfiguration.prototype.parseContents = function (contents) {\n        for (var _i = 0, contents_1 = contents; _i < contents_1.length; _i++) {\n            var content = contents_1[_i];\n            if (isFolderSettingsConfigurationFile(content.resource)) {\n                this._folderSettingsModelParser.parse(content.value);\n            }\n            else {\n                var name = resources.basename(content.resource);\n                var matches = /([^\\.]*)*\\.json/.exec(name);\n                if (matches && matches[1]) {\n                    var standAloneConfigurationModelParser = new configurationModels_2.StandaloneConfigurationModelParser(content.resource.toString(), matches[1]);\n                    standAloneConfigurationModelParser.parse(content.value);\n                    this._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n                }\n            }\n        }\n    };\n    return AbstractFolderConfiguration;\n}(lifecycle_1.Disposable));\nexports.AbstractFolderConfiguration = AbstractFolderConfiguration;\nvar NodeBasedFolderConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(NodeBasedFolderConfiguration, _super);\n    function NodeBasedFolderConfiguration(folder, configFolderRelativePath, workbenchState) {\n        var _this = _super.call(this, folder, workbenchState) || this;\n        _this.folderConfigurationPath = resources.joinPath(folder, configFolderRelativePath);\n        return _this;\n    }\n    NodeBasedFolderConfiguration.prototype.loadFolderConfigurationContents = function () {\n        var _this = this;\n        return this.resolveStat(this.folderConfigurationPath).then(function (stat) {\n            if (!stat.isDirectory || !stat.children) {\n                return Promise.resolve([]);\n            }\n            return _this.resolveContents(stat.children.filter(function (stat) { return isFolderConfigurationFile(stat.resource); })\n                .map(function (stat) { return stat.resource; }));\n        }, function (err) { return []; } /* never fail this call */)\n            .then(undefined, function (e) {\n            errors.onUnexpectedError(e);\n            return [];\n        });\n    };\n    NodeBasedFolderConfiguration.prototype.resolveContents = function (resources) {\n        return Promise.all(resources.map(function (resource) {\n            return pfs.readFile(resource.fsPath)\n                .then(function (contents) { return ({ resource: resource, value: contents.toString() }); });\n        }));\n    };\n    NodeBasedFolderConfiguration.prototype.resolveStat = function (resource) {\n        return new Promise(function (c, e) {\n            extfs.readdir(resource.fsPath, function (error, children) {\n                if (error) {\n                    if (error.code === 'ENOTDIR') {\n                        c({ resource: resource });\n                    }\n                    else {\n                        e(error);\n                    }\n                }\n                else {\n                    c({\n                        resource: resource,\n                        isDirectory: true,\n                        children: children.map(function (child) { return { resource: resources.joinPath(resource, child) }; })\n                    });\n                }\n            });\n        });\n    };\n    return NodeBasedFolderConfiguration;\n}(AbstractFolderConfiguration));\nexports.NodeBasedFolderConfiguration = NodeBasedFolderConfiguration;\nvar FileServiceBasedFolderConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(FileServiceBasedFolderConfiguration, _super);\n    function FileServiceBasedFolderConfiguration(folder, configFolderRelativePath, workbenchState, fileService, from) {\n        var _this = _super.call(this, folder, workbenchState, from) || this;\n        _this.configFolderRelativePath = configFolderRelativePath;\n        _this.fileService = fileService;\n        _this.loadConfigurationDelayer = new async_1.Delayer(50);\n        _this.folderConfigurationPath = resources.joinPath(folder, configFolderRelativePath);\n        _this.reloadConfigurationScheduler = _this._register(new async_1.RunOnceScheduler(function () { return _this._onDidChange.fire(); }, 50));\n        _this._register(fileService.onFileChanges(function (e) { return _this.handleWorkspaceFileEvents(e); }));\n        return _this;\n    }\n    FileServiceBasedFolderConfiguration.prototype.loadFolderConfigurationContents = function () {\n        var _this = this;\n        return Promise.resolve(this.loadConfigurationDelayer.trigger(function () { return _this.doLoadFolderConfigurationContents(); }));\n    };\n    FileServiceBasedFolderConfiguration.prototype.doLoadFolderConfigurationContents = function () {\n        var _this = this;\n        var workspaceFilePathToConfiguration = Object.create(null);\n        var bulkContentFetchromise = Promise.resolve(this.fileService.resolveFile(this.folderConfigurationPath))\n            .then(function (stat) {\n            if (stat.isDirectory && stat.children) {\n                stat.children\n                    .filter(function (child) { return isFolderConfigurationFile(child.resource); })\n                    .forEach(function (child) {\n                    var folderRelativePath = _this.toFolderRelativePath(child.resource);\n                    if (folderRelativePath) {\n                        workspaceFilePathToConfiguration[folderRelativePath] = Promise.resolve(_this.fileService.resolveContent(child.resource)).then(undefined, errors.onUnexpectedError);\n                    }\n                });\n            }\n        }).then(undefined, function (err) { return []; } /* never fail this call */);\n        return bulkContentFetchromise.then(function () { return Promise.all(collections.values(workspaceFilePathToConfiguration)); }).then(function (contents) { return contents.filter(function (content) { return content !== undefined; }); });\n    };\n    FileServiceBasedFolderConfiguration.prototype.handleWorkspaceFileEvents = function (event) {\n        var events = event.changes;\n        var affectedByChanges = false;\n        // Find changes that affect workspace configuration files\n        for (var i = 0, len = events.length; i < len; i++) {\n            var resource = events[i].resource;\n            var basename = resources.basename(resource);\n            var isJson = path_1.extname(basename) === '.json';\n            var isDeletedSettingsFolder = (events[i].type === files_1.FileChangeType.DELETED && basename === this.configFolderRelativePath);\n            if (!isJson && !isDeletedSettingsFolder) {\n                continue; // only JSON files or the actual settings folder\n            }\n            var folderRelativePath = this.toFolderRelativePath(resource);\n            if (!folderRelativePath) {\n                continue; // event is not inside folder\n            }\n            // Handle case where \".vscode\" got deleted\n            if (isDeletedSettingsFolder) {\n                affectedByChanges = true;\n                break;\n            }\n            // only valid workspace config files\n            if (!isFolderConfigurationFile(resource)) {\n                continue;\n            }\n            affectedByChanges = true;\n            break;\n        }\n        if (affectedByChanges) {\n            this.reloadConfigurationScheduler.schedule();\n        }\n    };\n    FileServiceBasedFolderConfiguration.prototype.toFolderRelativePath = function (resource) {\n        if (resources.isEqualOrParent(resource, this.folderConfigurationPath)) {\n            return resources.relativePath(this.folderConfigurationPath, resource);\n        }\n        return undefined;\n    };\n    return FileServiceBasedFolderConfiguration;\n}(AbstractFolderConfiguration));\nexports.FileServiceBasedFolderConfiguration = FileServiceBasedFolderConfiguration;\nvar CachedFolderConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(CachedFolderConfiguration, _super);\n    function CachedFolderConfiguration(folder, configFolderRelativePath, environmentService) {\n        var _this = _super.call(this) || this;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this.loaded = false;\n        _this.cachedFolderPath = path_1.join(environmentService.userDataPath, 'CachedConfigurations', 'folders', crypto_1.createHash('md5').update(path_1.join(folder.path, configFolderRelativePath)).digest('hex'));\n        _this.cachedConfigurationPath = path_1.join(_this.cachedFolderPath, 'configuration.json');\n        _this.configurationModel = new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    CachedFolderConfiguration.prototype.loadConfiguration = function () {\n        var _this = this;\n        return pfs.readFile(this.cachedConfigurationPath)\n            .then(function (contents) {\n            var parsed = JSON.parse(contents.toString());\n            _this.configurationModel = new configurationModels_1.ConfigurationModel(parsed.contents, parsed.keys, parsed.overrides);\n            _this.loaded = true;\n            return _this.configurationModel;\n        }, function () { return _this.configurationModel; });\n    };\n    CachedFolderConfiguration.prototype.updateConfiguration = function (configurationModel) {\n        var _this = this;\n        var raw = JSON.stringify(configurationModel.toJSON());\n        return this.createCachedFolder().then(function (created) {\n            if (created) {\n                return configurationModel.keys.length ? pfs.writeFile(_this.cachedConfigurationPath, raw) : pfs.rimraf(_this.cachedFolderPath);\n            }\n            return undefined;\n        });\n    };\n    CachedFolderConfiguration.prototype.reprocess = function () {\n        return this.configurationModel;\n    };\n    CachedFolderConfiguration.prototype.getUnsupportedKeys = function () {\n        return [];\n    };\n    CachedFolderConfiguration.prototype.createCachedFolder = function () {\n        var _this = this;\n        return Promise.resolve(pfs.exists(this.cachedFolderPath))\n            .then(undefined, function () { return false; })\n            .then(function (exists) { return exists ? exists : pfs.mkdirp(_this.cachedFolderPath).then(function () { return true; }, function () { return false; }); });\n    };\n    return CachedFolderConfiguration;\n}(lifecycle_1.Disposable));\nexports.CachedFolderConfiguration = CachedFolderConfiguration;\nvar FolderConfiguration = /** @class */ (function (_super) {\n    tslib_1.__extends(FolderConfiguration, _super);\n    function FolderConfiguration(workspaceFolder, configFolderRelativePath, workbenchState, environmentService, fileService) {\n        var _this = _super.call(this) || this;\n        _this.workspaceFolder = workspaceFolder;\n        _this.configFolderRelativePath = configFolderRelativePath;\n        _this.workbenchState = workbenchState;\n        _this.environmentService = environmentService;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this._loaded = false;\n        _this.cachedFolderConfiguration = new CachedFolderConfiguration(_this.workspaceFolder.uri, _this.configFolderRelativePath, _this.environmentService);\n        _this.folderConfiguration = _this.cachedFolderConfiguration;\n        if (fileService) {\n            _this.folderConfiguration = new FileServiceBasedFolderConfiguration(_this.workspaceFolder.uri, _this.configFolderRelativePath, _this.workbenchState, fileService);\n        }\n        else if (_this.workspaceFolder.uri.scheme === network_1.Schemas.file) {\n            _this.folderConfiguration = new NodeBasedFolderConfiguration(_this.workspaceFolder.uri, _this.configFolderRelativePath, _this.workbenchState);\n        }\n        _this._register(_this.folderConfiguration.onDidChange(function (e) { return _this.onDidFolderConfigurationChange(); }));\n        return _this;\n    }\n    FolderConfiguration.prototype.loadConfiguration = function () {\n        var _this = this;\n        return this.folderConfiguration.loadConfiguration()\n            .then(function (model) {\n            _this._loaded = _this.folderConfiguration.loaded;\n            return model;\n        });\n    };\n    FolderConfiguration.prototype.reprocess = function () {\n        return this.folderConfiguration.reprocess();\n    };\n    Object.defineProperty(FolderConfiguration.prototype, \"loaded\", {\n        get: function () {\n            return this._loaded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FolderConfiguration.prototype.adopt = function (fileService) {\n        if (fileService) {\n            if (this.folderConfiguration instanceof CachedFolderConfiguration) {\n                return this.adoptFromCachedConfiguration(fileService);\n            }\n            if (this.folderConfiguration instanceof NodeBasedFolderConfiguration) {\n                return this.adoptFromNodeBasedConfiguration(fileService);\n            }\n        }\n        return Promise.resolve(false);\n    };\n    FolderConfiguration.prototype.adoptFromCachedConfiguration = function (fileService) {\n        var _this = this;\n        var folderConfiguration = new FileServiceBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState, fileService);\n        return folderConfiguration.loadConfiguration()\n            .then(function () {\n            _this.folderConfiguration = folderConfiguration;\n            _this._register(_this.folderConfiguration.onDidChange(function (e) { return _this.onDidFolderConfigurationChange(); }));\n            _this.updateCache();\n            return true;\n        });\n    };\n    FolderConfiguration.prototype.adoptFromNodeBasedConfiguration = function (fileService) {\n        var _this = this;\n        var oldFolderConfiguration = this.folderConfiguration;\n        this.folderConfiguration = new FileServiceBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState, fileService, oldFolderConfiguration);\n        oldFolderConfiguration.dispose();\n        this._register(this.folderConfiguration.onDidChange(function (e) { return _this.onDidFolderConfigurationChange(); }));\n        return Promise.resolve(false);\n    };\n    FolderConfiguration.prototype.onDidFolderConfigurationChange = function () {\n        this.updateCache();\n        this._onDidChange.fire();\n    };\n    FolderConfiguration.prototype.updateCache = function () {\n        var _this = this;\n        if (this.workspaceFolder.uri.scheme !== network_1.Schemas.file && this.folderConfiguration instanceof FileServiceBasedFolderConfiguration) {\n            return this.folderConfiguration.loadConfiguration()\n                .then(function (configurationModel) { return _this.cachedFolderConfiguration.updateConfiguration(configurationModel); });\n        }\n        return Promise.resolve(undefined);\n    };\n    return FolderConfiguration;\n}(lifecycle_1.Disposable));\nexports.FolderConfiguration = FolderConfiguration;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configuration.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configuration.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createHash } from 'crypto';\nimport * as resources from 'vs/base/common/resources';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as errors from 'vs/base/common/errors';\nimport * as collections from 'vs/base/common/collections';\nimport { Disposable, IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { RunOnceScheduler, Delayer } from 'vs/base/common/async';\nimport { FileChangeType, FileChangesEvent, IContent, IFileService } from 'vs/platform/files/common/files';\nimport { ConfigurationModel } from 'vs/platform/configuration/common/configurationModels';\nimport { WorkspaceConfigurationModelParser, FolderSettingsModelParser, StandaloneConfigurationModelParser } from 'vs/workbench/services/configuration/common/configurationModels';\nimport { FOLDER_SETTINGS_PATH, TASKS_CONFIGURATION_KEY, FOLDER_SETTINGS_NAME, LAUNCH_CONFIGURATION_KEY } from 'vs/workbench/services/configuration/common/configuration';\nimport { IStoredWorkspaceFolder } from 'vs/platform/workspaces/common/workspaces';\nimport * as extfs from 'vs/base/node/extfs';\nimport { JSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditingService';\nimport { WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { extname, join } from 'vs/base/common/path';\nimport { equals } from 'vs/base/common/objects';\nimport { Schemas } from 'vs/base/common/network';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IConfigurationModel, compare } from 'vs/platform/configuration/common/configuration';\nimport { FileServiceBasedUserConfiguration, NodeBasedUserConfiguration } from 'vs/platform/configuration/node/configuration';\n\nexport class LocalUserConfiguration extends Disposable {\n\n\tprivate userConfiguration: NodeBasedUserConfiguration | FileServiceBasedUserConfiguration;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\tpublic readonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tconstructor(\n\t\tenvironmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis.userConfiguration = this._register(new NodeBasedUserConfiguration(environmentService.appSettingsPath));\n\t\tthis._register(this.userConfiguration.onDidChangeConfiguration(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)));\n\t}\n\n\tinitialize(): Promise<ConfigurationModel> {\n\t\treturn this.userConfiguration.initialize();\n\t}\n\n\treload(): Promise<ConfigurationModel> {\n\t\treturn this.userConfiguration.reload();\n\t}\n\n\tasync adopt(fileService: IFileService): Promise<ConfigurationModel | null> {\n\t\treturn null;\n\t}\n}\n\nexport class RemoteUserConfiguration extends Disposable {\n\n\tprivate readonly _cachedConfiguration: CachedUserConfiguration;\n\tprivate _userConfiguration: FileServiceBasedUserConfiguration | CachedUserConfiguration;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\tpublic readonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tenvironmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis._userConfiguration = this._cachedConfiguration = new CachedUserConfiguration(remoteAuthority, environmentService);\n\t}\n\n\tinitialize(): Promise<ConfigurationModel> {\n\t\treturn this._userConfiguration.initialize();\n\t}\n\n\treload(): Promise<ConfigurationModel> {\n\t\treturn this._userConfiguration.reload();\n\t}\n\n\tasync adopt(configurationResource: URI | null, fileService: IFileService): Promise<ConfigurationModel | null> {\n\t\tif (this._userConfiguration instanceof CachedUserConfiguration) {\n\t\t\tconst oldConfigurationModel = this._userConfiguration.getConfigurationModel();\n\t\t\tlet newConfigurationModel = new ConfigurationModel();\n\t\t\tif (configurationResource) {\n\t\t\t\tthis._userConfiguration = new FileServiceBasedUserConfiguration(configurationResource, fileService);\n\t\t\t\tthis._register(this._userConfiguration.onDidChangeConfiguration(configurationModel => this.onDidUserConfigurationChange(configurationModel)));\n\t\t\t\tnewConfigurationModel = await this._userConfiguration.initialize();\n\t\t\t}\n\t\t\tconst { added, updated, removed } = compare(oldConfigurationModel, newConfigurationModel);\n\t\t\tif (added.length > 0 || updated.length > 0 || removed.length > 0) {\n\t\t\t\tthis.updateCache(newConfigurationModel);\n\t\t\t\treturn newConfigurationModel;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate onDidUserConfigurationChange(configurationModel: ConfigurationModel): void {\n\t\tthis.updateCache(configurationModel);\n\t\tthis._onDidChangeConfiguration.fire(configurationModel);\n\t}\n\n\tprivate updateCache(configurationModel: ConfigurationModel): Promise<void> {\n\t\treturn this._cachedConfiguration.updateConfiguration(configurationModel);\n\t}\n}\n\nclass CachedUserConfiguration extends Disposable {\n\n\tprivate readonly _onDidChange: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChange: Event<ConfigurationModel> = this._onDidChange.event;\n\n\tprivate readonly cachedFolderPath: string;\n\tprivate readonly cachedConfigurationPath: string;\n\tprivate configurationModel: ConfigurationModel;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis.cachedFolderPath = join(this.environmentService.userDataPath, 'CachedConfigurations', 'user', remoteAuthority);\n\t\tthis.cachedConfigurationPath = join(this.cachedFolderPath, 'configuration.json');\n\t\tthis.configurationModel = new ConfigurationModel();\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.configurationModel;\n\t}\n\n\tinitialize(): Promise<ConfigurationModel> {\n\t\treturn this.reload();\n\t}\n\n\treload(): Promise<ConfigurationModel> {\n\t\treturn pfs.readFile(this.cachedConfigurationPath)\n\t\t\t.then(content => content.toString(), () => '')\n\t\t\t.then(content => {\n\t\t\t\ttry {\n\t\t\t\t\tconst parsed: IConfigurationModel = JSON.parse(content);\n\t\t\t\t\tthis.configurationModel = new ConfigurationModel(parsed.contents, parsed.keys, parsed.overrides);\n\t\t\t\t} catch (e) {\n\t\t\t\t}\n\t\t\t\treturn this.configurationModel;\n\t\t\t});\n\t}\n\n\tupdateConfiguration(configurationModel: ConfigurationModel): Promise<void> {\n\t\tconst raw = JSON.stringify(configurationModel.toJSON());\n\t\treturn this.createCachedFolder().then(created => {\n\t\t\tif (created) {\n\t\t\t\treturn configurationModel.keys.length ? pfs.writeFile(this.cachedConfigurationPath, raw) : pfs.rimraf(this.cachedFolderPath);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate createCachedFolder(): Promise<boolean> {\n\t\treturn Promise.resolve(pfs.exists(this.cachedFolderPath))\n\t\t\t.then(undefined, () => false)\n\t\t\t.then(exists => exists ? exists : pfs.mkdirp(this.cachedFolderPath).then(() => true, () => false));\n\t}\n}\n\nexport interface IWorkspaceIdentifier {\n\tid: string;\n\tconfigPath: URI;\n}\n\nexport class WorkspaceConfiguration extends Disposable {\n\n\tprivate readonly _cachedConfiguration: CachedWorkspaceConfiguration;\n\tprivate _workspaceConfiguration: IWorkspaceConfiguration;\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\tprivate _fileService: IFileService | null = null;\n\n\tprivate readonly _onDidUpdateConfiguration: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidUpdateConfiguration: Event<void> = this._onDidUpdateConfiguration.event;\n\n\tconstructor(\n\t\tenvironmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis._cachedConfiguration = new CachedWorkspaceConfiguration(environmentService);\n\t\tthis._workspaceConfiguration = this._cachedConfiguration;\n\t}\n\n\tadopt(fileService: IFileService): Promise<boolean> {\n\t\tif (!this._fileService) {\n\t\t\tthis._fileService = fileService;\n\t\t\tif (this.adoptWorkspaceConfiguration()) {\n\t\t\t\tif (this._workspaceIdentifier) {\n\t\t\t\t\treturn this._workspaceConfiguration.load(this._workspaceIdentifier).then(() => true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(false);\n\t}\n\n\tload(workspaceIdentifier: IWorkspaceIdentifier): Promise<void> {\n\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\tthis.adoptWorkspaceConfiguration();\n\t\treturn this._workspaceConfiguration.load(this._workspaceIdentifier);\n\t}\n\n\treload(): Promise<void> {\n\t\treturn this._workspaceIdentifier ? this.load(this._workspaceIdentifier) : Promise.resolve();\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this._workspaceConfiguration.getFolders();\n\t}\n\n\tsetFolders(folders: IStoredWorkspaceFolder[], jsonEditingService: JSONEditingService): Promise<void> {\n\t\tif (this._workspaceIdentifier) {\n\t\t\treturn jsonEditingService.write(this._workspaceIdentifier.configPath, { key: 'folders', value: folders }, true)\n\t\t\t\t.then(() => this.reload());\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tgetConfiguration(): ConfigurationModel {\n\t\treturn this._workspaceConfiguration.getWorkspaceSettings();\n\t}\n\n\treprocessWorkspaceSettings(): ConfigurationModel {\n\t\tthis._workspaceConfiguration.reprocessWorkspaceSettings();\n\t\treturn this.getConfiguration();\n\t}\n\n\tprivate adoptWorkspaceConfiguration(): boolean {\n\t\tif (this._workspaceIdentifier) {\n\t\t\tif (this._fileService) {\n\t\t\t\tif (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {\n\t\t\t\t\tconst oldWorkspaceConfiguration = this._workspaceConfiguration;\n\t\t\t\t\tthis._workspaceConfiguration = new FileServiceBasedWorkspaceConfiguration(this._fileService, oldWorkspaceConfiguration);\n\t\t\t\t\tthis._register(this._workspaceConfiguration.onDidChange(e => this.onDidWorkspaceConfigurationChange()));\n\t\t\t\t\tif (oldWorkspaceConfiguration instanceof CachedWorkspaceConfiguration) {\n\t\t\t\t\t\tthis.updateCache();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispose(oldWorkspaceConfiguration);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this._workspaceIdentifier.configPath.scheme === Schemas.file) {\n\t\t\t\tif (!(this._workspaceConfiguration instanceof NodeBasedWorkspaceConfiguration)) {\n\t\t\t\t\tdispose(this._workspaceConfiguration);\n\t\t\t\t\tthis._workspaceConfiguration = new NodeBasedWorkspaceConfiguration();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate onDidWorkspaceConfigurationChange(): void {\n\t\tthis.updateCache();\n\t\tthis.reload().then(() => this._onDidUpdateConfiguration.fire());\n\t}\n\n\tprivate updateCache(): Promise<void> {\n\t\tif (this._workspaceIdentifier && this._workspaceIdentifier.configPath.scheme !== Schemas.file && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {\n\t\t\treturn this._workspaceConfiguration.load(this._workspaceIdentifier)\n\t\t\t\t.then(() => this._cachedConfiguration.updateWorkspace(this._workspaceIdentifier!, this._workspaceConfiguration.getConfigurationModel()));\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\ninterface IWorkspaceConfiguration extends IDisposable {\n\treadonly onDidChange: Event<void>;\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\tworkspaceIdentifier: IWorkspaceIdentifier | null;\n\tload(workspaceIdentifier: IWorkspaceIdentifier): Promise<void>;\n\tgetConfigurationModel(): ConfigurationModel;\n\tgetFolders(): IStoredWorkspaceFolder[];\n\tgetWorkspaceSettings(): ConfigurationModel;\n\treprocessWorkspaceSettings(): ConfigurationModel;\n}\n\nabstract class AbstractWorkspaceConfiguration extends Disposable implements IWorkspaceConfiguration {\n\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(from?: IWorkspaceConfiguration) {\n\t\tsuper();\n\n\t\tthis.workspaceConfigurationModelParser = from ? from.workspaceConfigurationModelParser : new WorkspaceConfigurationModelParser('');\n\t\tthis.workspaceSettings = from ? from.workspaceSettings : new ConfigurationModel();\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn this._workspaceIdentifier;\n\t}\n\n\tload(workspaceIdentifier: IWorkspaceIdentifier): Promise<void> {\n\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\treturn this.loadWorkspaceConfigurationContents(workspaceIdentifier)\n\t\t\t.then(contents => {\n\t\t\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser(workspaceIdentifier.id);\n\t\t\t\tthis.workspaceConfigurationModelParser.parse(contents);\n\t\t\t\tthis.consolidate();\n\t\t\t});\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treprocessWorkspaceSettings(): ConfigurationModel {\n\t\tthis.workspaceConfigurationModelParser.reprocessWorkspaceSettings();\n\t\tthis.consolidate();\n\t\treturn this.getWorkspaceSettings();\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel);\n\t}\n\n\tprotected abstract loadWorkspaceConfigurationContents(workspaceIdentifier: IWorkspaceIdentifier): Promise<string>;\n}\n\nclass NodeBasedWorkspaceConfiguration extends AbstractWorkspaceConfiguration {\n\n\tprotected loadWorkspaceConfigurationContents(workspaceIdentifier: IWorkspaceIdentifier): Promise<string> {\n\t\treturn pfs.readFile(workspaceIdentifier.configPath.fsPath)\n\t\t\t.then(contents => contents.toString(), e => {\n\t\t\t\terrors.onUnexpectedError(e);\n\t\t\t\treturn '';\n\t\t\t});\n\t}\n\n}\n\nclass FileServiceBasedWorkspaceConfiguration extends AbstractWorkspaceConfiguration {\n\n\tprivate workspaceConfig: URI | null = null;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tconstructor(private fileService: IFileService, from?: IWorkspaceConfiguration) {\n\t\tsuper(from);\n\t\tthis.workspaceConfig = from && from.workspaceIdentifier ? from.workspaceIdentifier.configPath : null;\n\t\tthis._register(fileService.onFileChanges(e => this.handleWorkspaceFileEvents(e)));\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this._onDidChange.fire(), 50));\n\t\tthis.watchWorkspaceConfigurationFile();\n\t\tthis._register(toDisposable(() => this.unWatchWorkspaceConfigurtionFile()));\n\t}\n\n\tprivate watchWorkspaceConfigurationFile(): void {\n\t\tif (this.workspaceConfig) {\n\t\t\tthis.fileService.watchFileChanges(this.workspaceConfig);\n\t\t}\n\t}\n\n\tprivate unWatchWorkspaceConfigurtionFile(): void {\n\t\tif (this.workspaceConfig) {\n\t\t\tthis.fileService.unwatchFileChanges(this.workspaceConfig);\n\t\t}\n\t}\n\n\tprotected loadWorkspaceConfigurationContents(workspaceIdentifier: IWorkspaceIdentifier): Promise<string> {\n\t\tif (!(this.workspaceConfig && resources.isEqual(this.workspaceConfig, workspaceIdentifier.configPath))) {\n\t\t\tthis.unWatchWorkspaceConfigurtionFile();\n\t\t\tthis.workspaceConfig = workspaceIdentifier.configPath;\n\t\t\tthis.watchWorkspaceConfigurationFile();\n\t\t}\n\t\treturn this.fileService.resolveContent(this.workspaceConfig)\n\t\t\t.then(content => content.value, e => {\n\t\t\t\terrors.onUnexpectedError(e);\n\t\t\t\treturn '';\n\t\t\t});\n\t}\n\n\tprivate handleWorkspaceFileEvents(event: FileChangesEvent): void {\n\t\tif (this.workspaceConfig) {\n\t\t\tconst events = event.changes;\n\n\t\t\tlet affectedByChanges = false;\n\t\t\t// Find changes that affect workspace file\n\t\t\tfor (let i = 0, len = events.length; i < len && !affectedByChanges; i++) {\n\t\t\t\taffectedByChanges = resources.isEqual(this.workspaceConfig, events[i].resource);\n\t\t\t}\n\n\t\t\tif (affectedByChanges) {\n\t\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass CachedWorkspaceConfiguration extends Disposable implements IWorkspaceConfiguration {\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate cachedWorkspacePath: string;\n\tprivate cachedConfigurationPath: string;\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\n\tconstructor(private environmentService: IEnvironmentService) {\n\t\tsuper();\n\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser('');\n\t\tthis.workspaceSettings = new ConfigurationModel();\n\t}\n\n\tload(workspaceIdentifier: IWorkspaceIdentifier): Promise<void> {\n\t\tthis.createPaths(workspaceIdentifier);\n\t\treturn pfs.readFile(this.cachedConfigurationPath)\n\t\t\t.then(contents => {\n\t\t\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser(this.cachedConfigurationPath);\n\t\t\t\tthis.workspaceConfigurationModelParser.parse(contents.toString());\n\t\t\t\tthis.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel);\n\t\t\t}, () => { });\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn null;\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treprocessWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\tasync updateWorkspace(workspaceIdentifier: IWorkspaceIdentifier, configurationModel: ConfigurationModel): Promise<void> {\n\t\ttry {\n\t\t\tthis.createPaths(workspaceIdentifier);\n\t\t\tif (configurationModel.keys.length) {\n\t\t\t\tconst exists = await pfs.exists(this.cachedWorkspacePath);\n\t\t\t\tif (!exists) {\n\t\t\t\t\tawait pfs.mkdirp(this.cachedWorkspacePath);\n\t\t\t\t}\n\t\t\t\tconst raw = JSON.stringify(configurationModel.toJSON().contents);\n\t\t\t\tawait pfs.writeFile(this.cachedConfigurationPath, raw);\n\t\t\t} else {\n\t\t\t\tpfs.rimraf(this.cachedWorkspacePath);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terrors.onUnexpectedError(error);\n\t\t}\n\t}\n\n\tprivate createPaths(workspaceIdentifier: IWorkspaceIdentifier) {\n\t\tthis.cachedWorkspacePath = join(this.environmentService.userDataPath, 'CachedConfigurations', 'workspaces', workspaceIdentifier.id);\n\t\tthis.cachedConfigurationPath = join(this.cachedWorkspacePath, 'workspace.json');\n\t}\n}\n\nfunction isFolderConfigurationFile(resource: URI): boolean {\n\tconst configurationNameResource = URI.from({ scheme: resource.scheme, path: resources.basename(resource) });\n\treturn [`${FOLDER_SETTINGS_NAME}.json`, `${TASKS_CONFIGURATION_KEY}.json`, `${LAUNCH_CONFIGURATION_KEY}.json`].some(configurationFileName =>\n\t\tresources.isEqual(configurationNameResource, URI.from({ scheme: resource.scheme, path: configurationFileName })));  // only workspace config files\n}\n\nfunction isFolderSettingsConfigurationFile(resource: URI): boolean {\n\treturn resources.isEqual(URI.from({ scheme: resource.scheme, path: resources.basename(resource) }), URI.from({ scheme: resource.scheme, path: `${FOLDER_SETTINGS_NAME}.json` }));\n}\n\nexport interface IFolderConfiguration extends IDisposable {\n\treadonly onDidChange: Event<void>;\n\treadonly loaded: boolean;\n\tloadConfiguration(): Promise<ConfigurationModel>;\n\treprocess(): ConfigurationModel;\n}\n\nexport abstract class AbstractFolderConfiguration extends Disposable implements IFolderConfiguration {\n\n\tprivate _folderSettingsModelParser: FolderSettingsModelParser;\n\tprivate _standAloneConfigurations: ConfigurationModel[];\n\tprivate _cache: ConfigurationModel;\n\tprivate _loaded: boolean = false;\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(protected readonly folder: URI, workbenchState: WorkbenchState, from?: AbstractFolderConfiguration) {\n\t\tsuper();\n\n\t\tthis._folderSettingsModelParser = from ? from._folderSettingsModelParser : new FolderSettingsModelParser(FOLDER_SETTINGS_PATH, WorkbenchState.WORKSPACE === workbenchState ? [ConfigurationScope.RESOURCE] : [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE]);\n\t\tthis._standAloneConfigurations = from ? from._standAloneConfigurations : [];\n\t\tthis._cache = from ? from._cache : new ConfigurationModel();\n\t}\n\n\tget loaded(): boolean {\n\t\treturn this._loaded;\n\t}\n\n\tloadConfiguration(): Promise<ConfigurationModel> {\n\t\treturn this.loadFolderConfigurationContents()\n\t\t\t.then((contents) => {\n\n\t\t\t\t// reset\n\t\t\t\tthis._standAloneConfigurations = [];\n\t\t\t\tthis._folderSettingsModelParser.parse('');\n\n\t\t\t\t// parse\n\t\t\t\tthis.parseContents(contents);\n\n\t\t\t\t// Consolidate (support *.json files in the workspace settings folder)\n\t\t\t\tthis.consolidate();\n\n\t\t\t\tthis._loaded = true;\n\t\t\t\treturn this._cache;\n\t\t\t});\n\t}\n\n\treprocess(): ConfigurationModel {\n\t\tconst oldContents = this._folderSettingsModelParser.configurationModel.contents;\n\t\tthis._folderSettingsModelParser.reprocess();\n\t\tif (!equals(oldContents, this._folderSettingsModelParser.configurationModel.contents)) {\n\t\t\tthis.consolidate();\n\t\t}\n\t\treturn this._cache;\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis._cache = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n\t}\n\n\tprivate parseContents(contents: { resource: URI, value: string }[]): void {\n\t\tfor (const content of contents) {\n\t\t\tif (isFolderSettingsConfigurationFile(content.resource)) {\n\t\t\t\tthis._folderSettingsModelParser.parse(content.value);\n\t\t\t} else {\n\t\t\t\tconst name = resources.basename(content.resource);\n\t\t\t\tconst matches = /([^\\.]*)*\\.json/.exec(name);\n\t\t\t\tif (matches && matches[1]) {\n\t\t\t\t\tconst standAloneConfigurationModelParser = new StandaloneConfigurationModelParser(content.resource.toString(), matches[1]);\n\t\t\t\t\tstandAloneConfigurationModelParser.parse(content.value);\n\t\t\t\t\tthis._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract loadFolderConfigurationContents(): Promise<{ resource: URI, value: string }[]>;\n}\n\nexport class NodeBasedFolderConfiguration extends AbstractFolderConfiguration {\n\n\tprivate readonly folderConfigurationPath: URI;\n\n\tconstructor(folder: URI, configFolderRelativePath: string, workbenchState: WorkbenchState) {\n\t\tsuper(folder, workbenchState);\n\t\tthis.folderConfigurationPath = resources.joinPath(folder, configFolderRelativePath);\n\t}\n\n\tprotected loadFolderConfigurationContents(): Promise<{ resource: URI, value: string }[]> {\n\t\treturn this.resolveStat(this.folderConfigurationPath).then(stat => {\n\t\t\tif (!stat.isDirectory || !stat.children) {\n\t\t\t\treturn Promise.resolve([]);\n\t\t\t}\n\t\t\treturn this.resolveContents(stat.children.filter(stat => isFolderConfigurationFile(stat.resource))\n\t\t\t\t.map(stat => stat.resource));\n\t\t}, err => [] /* never fail this call */)\n\t\t\t.then(undefined, e => {\n\t\t\t\terrors.onUnexpectedError(e);\n\t\t\t\treturn [];\n\t\t\t});\n\t}\n\n\tprivate resolveContents(resources: URI[]): Promise<{ resource: URI, value: string }[]> {\n\t\treturn Promise.all(resources.map(resource =>\n\t\t\tpfs.readFile(resource.fsPath)\n\t\t\t\t.then(contents => ({ resource, value: contents.toString() }))));\n\t}\n\n\tprivate resolveStat(resource: URI): Promise<{ resource: URI, isDirectory?: boolean, children?: { resource: URI; }[] }> {\n\t\treturn new Promise<{ resource: URI, isDirectory?: boolean, children?: { resource: URI; }[] }>((c, e) => {\n\t\t\textfs.readdir(resource.fsPath, (error, children) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif ((<any>error).code === 'ENOTDIR') {\n\t\t\t\t\t\tc({ resource });\n\t\t\t\t\t} else {\n\t\t\t\t\t\te(error);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tc({\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tisDirectory: true,\n\t\t\t\t\t\tchildren: children.map(child => { return { resource: resources.joinPath(resource, child) }; })\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport class FileServiceBasedFolderConfiguration extends AbstractFolderConfiguration {\n\n\tprivate reloadConfigurationScheduler: RunOnceScheduler;\n\tprivate readonly folderConfigurationPath: URI;\n\tprivate readonly loadConfigurationDelayer = new Delayer<Array<{ resource: URI, value: string }>>(50);\n\n\tconstructor(folder: URI, private configFolderRelativePath: string, workbenchState: WorkbenchState, private fileService: IFileService, from?: AbstractFolderConfiguration) {\n\t\tsuper(folder, workbenchState, from);\n\t\tthis.folderConfigurationPath = resources.joinPath(folder, configFolderRelativePath);\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this._onDidChange.fire(), 50));\n\t\tthis._register(fileService.onFileChanges(e => this.handleWorkspaceFileEvents(e)));\n\t}\n\n\tprotected loadFolderConfigurationContents(): Promise<Array<{ resource: URI, value: string }>> {\n\t\treturn Promise.resolve(this.loadConfigurationDelayer.trigger(() => this.doLoadFolderConfigurationContents()));\n\t}\n\n\tprivate doLoadFolderConfigurationContents(): Promise<Array<{ resource: URI, value: string }>> {\n\t\tconst workspaceFilePathToConfiguration: { [relativeWorkspacePath: string]: Promise<IContent | undefined> } = Object.create(null);\n\t\tconst bulkContentFetchromise = Promise.resolve(this.fileService.resolveFile(this.folderConfigurationPath))\n\t\t\t.then(stat => {\n\t\t\t\tif (stat.isDirectory && stat.children) {\n\t\t\t\t\tstat.children\n\t\t\t\t\t\t.filter(child => isFolderConfigurationFile(child.resource))\n\t\t\t\t\t\t.forEach(child => {\n\t\t\t\t\t\t\tconst folderRelativePath = this.toFolderRelativePath(child.resource);\n\t\t\t\t\t\t\tif (folderRelativePath) {\n\t\t\t\t\t\t\t\tworkspaceFilePathToConfiguration[folderRelativePath] = Promise.resolve(this.fileService.resolveContent(child.resource)).then(undefined, errors.onUnexpectedError);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).then(undefined, err => [] /* never fail this call */);\n\n\t\treturn bulkContentFetchromise.then(() => Promise.all<IContent>(collections.values(workspaceFilePathToConfiguration))).then(contents => contents.filter(content => content !== undefined));\n\t}\n\n\tprivate handleWorkspaceFileEvents(event: FileChangesEvent): void {\n\t\tconst events = event.changes;\n\t\tlet affectedByChanges = false;\n\n\t\t// Find changes that affect workspace configuration files\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst resource = events[i].resource;\n\t\t\tconst basename = resources.basename(resource);\n\t\t\tconst isJson = extname(basename) === '.json';\n\t\t\tconst isDeletedSettingsFolder = (events[i].type === FileChangeType.DELETED && basename === this.configFolderRelativePath);\n\n\t\t\tif (!isJson && !isDeletedSettingsFolder) {\n\t\t\t\tcontinue; // only JSON files or the actual settings folder\n\t\t\t}\n\n\t\t\tconst folderRelativePath = this.toFolderRelativePath(resource);\n\t\t\tif (!folderRelativePath) {\n\t\t\t\tcontinue; // event is not inside folder\n\t\t\t}\n\n\t\t\t// Handle case where \".vscode\" got deleted\n\t\t\tif (isDeletedSettingsFolder) {\n\t\t\t\taffectedByChanges = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// only valid workspace config files\n\t\t\tif (!isFolderConfigurationFile(resource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taffectedByChanges = true;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (affectedByChanges) {\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate toFolderRelativePath(resource: URI): string | undefined {\n\t\tif (resources.isEqualOrParent(resource, this.folderConfigurationPath)) {\n\t\t\treturn resources.relativePath(this.folderConfigurationPath, resource);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class CachedFolderConfiguration extends Disposable implements IFolderConfiguration {\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly cachedFolderPath: string;\n\tprivate readonly cachedConfigurationPath: string;\n\tprivate configurationModel: ConfigurationModel;\n\n\tloaded: boolean = false;\n\n\tconstructor(\n\t\tfolder: URI,\n\t\tconfigFolderRelativePath: string,\n\t\tenvironmentService: IEnvironmentService) {\n\t\tsuper();\n\t\tthis.cachedFolderPath = join(environmentService.userDataPath, 'CachedConfigurations', 'folders', createHash('md5').update(join(folder.path, configFolderRelativePath)).digest('hex'));\n\t\tthis.cachedConfigurationPath = join(this.cachedFolderPath, 'configuration.json');\n\t\tthis.configurationModel = new ConfigurationModel();\n\t}\n\n\tloadConfiguration(): Promise<ConfigurationModel> {\n\t\treturn pfs.readFile(this.cachedConfigurationPath)\n\t\t\t.then(contents => {\n\t\t\t\tconst parsed: IConfigurationModel = JSON.parse(contents.toString());\n\t\t\t\tthis.configurationModel = new ConfigurationModel(parsed.contents, parsed.keys, parsed.overrides);\n\t\t\t\tthis.loaded = true;\n\t\t\t\treturn this.configurationModel;\n\t\t\t}, () => this.configurationModel);\n\t}\n\n\tupdateConfiguration(configurationModel: ConfigurationModel): Promise<void> {\n\t\tconst raw = JSON.stringify(configurationModel.toJSON());\n\t\treturn this.createCachedFolder().then(created => {\n\t\t\tif (created) {\n\t\t\t\treturn configurationModel.keys.length ? pfs.writeFile(this.cachedConfigurationPath, raw) : pfs.rimraf(this.cachedFolderPath);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\treprocess(): ConfigurationModel {\n\t\treturn this.configurationModel;\n\t}\n\n\tgetUnsupportedKeys(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate createCachedFolder(): Promise<boolean> {\n\t\treturn Promise.resolve(pfs.exists(this.cachedFolderPath))\n\t\t\t.then(undefined, () => false)\n\t\t\t.then(exists => exists ? exists : pfs.mkdirp(this.cachedFolderPath).then(() => true, () => false));\n\t}\n}\n\nexport class FolderConfiguration extends Disposable implements IFolderConfiguration {\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate folderConfiguration: IFolderConfiguration;\n\tprivate cachedFolderConfiguration: CachedFolderConfiguration;\n\tprivate _loaded: boolean = false;\n\n\tconstructor(\n\t\treadonly workspaceFolder: IWorkspaceFolder,\n\t\tprivate readonly configFolderRelativePath: string,\n\t\tprivate readonly workbenchState: WorkbenchState,\n\t\tprivate environmentService: IEnvironmentService,\n\t\tfileService?: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.cachedFolderConfiguration = new CachedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.environmentService);\n\t\tthis.folderConfiguration = this.cachedFolderConfiguration;\n\t\tif (fileService) {\n\t\t\tthis.folderConfiguration = new FileServiceBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState, fileService);\n\t\t} else if (this.workspaceFolder.uri.scheme === Schemas.file) {\n\t\t\tthis.folderConfiguration = new NodeBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState);\n\t\t}\n\t\tthis._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n\t}\n\n\tloadConfiguration(): Promise<ConfigurationModel> {\n\t\treturn this.folderConfiguration.loadConfiguration()\n\t\t\t.then(model => {\n\t\t\t\tthis._loaded = this.folderConfiguration.loaded;\n\t\t\t\treturn model;\n\t\t\t});\n\t}\n\n\treprocess(): ConfigurationModel {\n\t\treturn this.folderConfiguration.reprocess();\n\t}\n\n\tget loaded(): boolean {\n\t\treturn this._loaded;\n\t}\n\n\tadopt(fileService: IFileService): Promise<boolean> {\n\t\tif (fileService) {\n\t\t\tif (this.folderConfiguration instanceof CachedFolderConfiguration) {\n\t\t\t\treturn this.adoptFromCachedConfiguration(fileService);\n\t\t\t}\n\n\t\t\tif (this.folderConfiguration instanceof NodeBasedFolderConfiguration) {\n\t\t\t\treturn this.adoptFromNodeBasedConfiguration(fileService);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(false);\n\t}\n\n\tprivate adoptFromCachedConfiguration(fileService: IFileService): Promise<boolean> {\n\t\tconst folderConfiguration = new FileServiceBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState, fileService);\n\t\treturn folderConfiguration.loadConfiguration()\n\t\t\t.then(() => {\n\t\t\t\tthis.folderConfiguration = folderConfiguration;\n\t\t\t\tthis._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n\t\t\t\tthis.updateCache();\n\t\t\t\treturn true;\n\t\t\t});\n\t}\n\n\tprivate adoptFromNodeBasedConfiguration(fileService: IFileService): Promise<boolean> {\n\t\tconst oldFolderConfiguration = this.folderConfiguration;\n\t\tthis.folderConfiguration = new FileServiceBasedFolderConfiguration(this.workspaceFolder.uri, this.configFolderRelativePath, this.workbenchState, fileService, <AbstractFolderConfiguration>oldFolderConfiguration);\n\t\toldFolderConfiguration.dispose();\n\t\tthis._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n\t\treturn Promise.resolve(false);\n\t}\n\n\tprivate onDidFolderConfigurationChange(): void {\n\t\tthis.updateCache();\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate updateCache(): Promise<void> {\n\t\tif (this.workspaceFolder.uri.scheme !== Schemas.file && this.folderConfiguration instanceof FileServiceBasedFolderConfiguration) {\n\t\t\treturn this.folderConfiguration.loadConfiguration()\n\t\t\t\t.then(configurationModel => this.cachedFolderConfiguration.updateConfiguration(configurationModel));\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}