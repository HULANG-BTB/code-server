{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/server/src/cli.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/cli.ts","mtime":1555841535690},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"@coder/logger\");\nconst proto_1 = require(\"@coder/protocol/src/proto\");\nconst child_process_1 = require(\"child_process\");\nconst crypto_1 = require(\"crypto\");\nconst fs = require(\"fs\");\nconst fse = require(\"fs-extra\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst constants_1 = require(\"./constants\");\nconst server_1 = require(\"./server\");\nconst bootstrapFork_1 = require(\"./vscode/bootstrapFork\");\nconst sharedProcess_1 = require(\"./vscode/sharedProcess\");\nconst opn = require(\"opn\");\nconst commander = require(\"commander\");\ncommander.version(process.env.VERSION || \"development\")\n    .name(\"code-server\")\n    .description(\"Run VS Code on a remote server.\")\n    .option(\"--cert <value>\")\n    .option(\"--cert-key <value>\")\n    .option(\"-e, --extensions-dir <dir>\", \"Set the root path for extensions.\")\n    .option(\"-d --user-data-dir <dir>\", \"\tSpecifies the directory that user data is kept in, useful when running as root.\")\n    .option(\"--data-dir <value>\", \"DEPRECATED: Use '--user-data-dir' instead. Customize where user-data is stored.\")\n    .option(\"-h, --host <value>\", \"Customize the hostname.\", \"0.0.0.0\")\n    .option(\"-o, --open\", \"Open in the browser on startup.\", false)\n    .option(\"-p, --port <number>\", \"Port to bind on.\", parseInt(process.env.PORT, 10) || 8443)\n    .option(\"-N, --no-auth\", \"Start without requiring authentication.\", undefined)\n    .option(\"-H, --allow-http\", \"Allow http connections.\", false)\n    .option(\"-P, --password <value>\", \"DEPRECATED: Use the PASSWORD environment variable instead. Specify a password for authentication.\")\n    .option(\"--disable-telemetry\", \"Disables ALL telemetry.\", false)\n    .option(\"--install-extension <value>\", \"Install an extension by its ID.\")\n    .option(\"--bootstrap-fork <name>\", \"Used for development. Never set.\")\n    .option(\"--extra-args <args>\", \"Used for development. Never set.\")\n    .arguments(\"Specify working directory.\")\n    .parse(process.argv);\nError.stackTraceLimit = Infinity;\nif (constants_1.isCli) {\n    require(\"nbin\").shimNativeFs(constants_1.buildDir);\n    require(\"nbin\").shimNativeFs(\"/node_modules\");\n}\n// Makes strings or numbers bold in stdout\nconst bold = (text) => {\n    return `\\u001B[1m${text}\\u001B[0m`;\n};\n(async () => {\n    const args = commander.args;\n    const options = commander.opts();\n    if (options.disableTelemetry) {\n        process.env.DISABLE_TELEMETRY = \"true\";\n    }\n    // Commander has an exception for `--no` prefixes. Here we'll adjust that.\n    // tslint:disable-next-line:no-any\n    const noAuthValue = commander.auth;\n    options.noAuth = !noAuthValue;\n    const dataDir = path.resolve(options.userDataDir || options.dataDir || path.join(constants_1.dataHome, \"code-server\"));\n    const extensionsDir = options.extensionsDir ? path.resolve(options.extensionsDir) : path.resolve(dataDir, \"extensions\");\n    const workingDir = path.resolve(args[0] || process.cwd());\n    const dependenciesDir = path.join(os.tmpdir(), \"code-server/dependencies\");\n    if (!fs.existsSync(dataDir)) {\n        const oldDataDir = path.resolve(path.join(os.homedir(), \".code-server\"));\n        if (fs.existsSync(oldDataDir)) {\n            await fse.move(oldDataDir, dataDir);\n            logger_1.logger.info(`Moved data directory from ${oldDataDir} to ${dataDir}`);\n        }\n    }\n    await Promise.all([\n        fse.mkdirp(constants_1.cacheHome),\n        fse.mkdirp(dataDir),\n        fse.mkdirp(extensionsDir),\n        fse.mkdirp(workingDir),\n        fse.mkdirp(dependenciesDir),\n    ]);\n    const unpackExecutable = (binaryName) => {\n        const memFile = path.join(constants_1.isCli ? constants_1.buildDir : path.join(__dirname, \"..\"), \"build/dependencies\", binaryName);\n        const diskFile = path.join(dependenciesDir, binaryName);\n        if (!fse.existsSync(diskFile)) {\n            fse.writeFileSync(diskFile, fse.readFileSync(memFile));\n        }\n        fse.chmodSync(diskFile, \"755\");\n    };\n    unpackExecutable(\"rg\");\n    // tslint:disable-next-line no-any\n    global.RIPGREP_LOCATION = path.join(dependenciesDir, \"rg\");\n    const builtInExtensionsDir = path.resolve(constants_1.buildDir || path.join(__dirname, \"..\"), \"build/extensions\");\n    if (options.bootstrapFork) {\n        const modulePath = options.bootstrapFork;\n        if (!modulePath) {\n            logger_1.logger.error(\"No module path specified to fork!\");\n            process.exit(1);\n        }\n        process.argv = [\n            process.argv[0],\n            process.argv[1],\n            ...(options.extraArgs ? JSON.parse(options.extraArgs) : []),\n        ];\n        return bootstrapFork_1.requireModule(modulePath, builtInExtensionsDir);\n    }\n    const logDir = path.join(constants_1.cacheHome, \"code-server/logs\", new Date().toISOString().replace(/[-:.TZ]/g, \"\"));\n    process.env.VSCODE_LOGS = logDir;\n    const certPath = options.cert ? path.resolve(options.cert) : undefined;\n    const certKeyPath = options.certKey ? path.resolve(options.certKey) : undefined;\n    if (certPath && !certKeyPath) {\n        logger_1.logger.error(\"'--cert-key' flag is required when specifying a certificate!\");\n        process.exit(1);\n    }\n    if (!certPath && certKeyPath) {\n        logger_1.logger.error(\"'--cert' flag is required when specifying certificate key!\");\n        process.exit(1);\n    }\n    let certData;\n    let certKeyData;\n    if (typeof certPath !== \"undefined\" && typeof certKeyPath !== \"undefined\") {\n        try {\n            certData = fs.readFileSync(certPath);\n        }\n        catch (ex) {\n            logger_1.logger.error(`Failed to read certificate: ${ex.message}`);\n            process.exit(1);\n        }\n        try {\n            certKeyData = fs.readFileSync(certKeyPath);\n        }\n        catch (ex) {\n            logger_1.logger.error(`Failed to read certificate key: ${ex.message}`);\n            process.exit(1);\n        }\n    }\n    logger_1.logger.info(`\\u001B[1mcode-server ${process.env.VERSION ? `v${process.env.VERSION}` : \"development\"}`);\n    if (options.dataDir) {\n        logger_1.logger.warn('\"--data-dir\" is deprecated. Use \"--user-data-dir\" instead.');\n    }\n    if (options.installExtension) {\n        const fork = bootstrapFork_1.forkModule(\"vs/code/node/cli\", [\n            \"--user-data-dir\", dataDir,\n            \"--builtin-extensions-dir\", builtInExtensionsDir,\n            \"--extensions-dir\", extensionsDir,\n            \"--install-extension\", options.installExtension,\n        ], {\n            env: {\n                VSCODE_ALLOW_IO: \"true\",\n                VSCODE_LOGS: process.env.VSCODE_LOGS,\n            },\n        }, dataDir);\n        fork.stdout.on(\"data\", (d) => d.toString().split(\"\\n\").forEach((l) => logger_1.logger.info(l)));\n        fork.stderr.on(\"data\", (d) => d.toString().split(\"\\n\").forEach((l) => logger_1.logger.error(l)));\n        fork.on(\"exit\", () => process.exit());\n        return;\n    }\n    // TODO: fill in appropriate doc url\n    logger_1.logger.info(\"Additional documentation: http://github.com/codercom/code-server\");\n    logger_1.logger.info(\"Initializing\", logger_1.field(\"data-dir\", dataDir), logger_1.field(\"extensions-dir\", extensionsDir), logger_1.field(\"working-dir\", workingDir), logger_1.field(\"log-dir\", logDir));\n    const sharedProcess = new sharedProcess_1.SharedProcess(dataDir, extensionsDir, builtInExtensionsDir);\n    const sendSharedProcessReady = (socket) => {\n        const active = new proto_1.SharedProcessActive();\n        active.setSocketPath(sharedProcess.socketPath);\n        active.setLogPath(logDir);\n        const serverMessage = new proto_1.ServerMessage();\n        serverMessage.setSharedProcessActive(active);\n        socket.send(serverMessage.serializeBinary());\n    };\n    sharedProcess.onState((event) => {\n        if (event.state === sharedProcess_1.SharedProcessState.Ready) {\n            app.wss.clients.forEach((c) => sendSharedProcessReady(c));\n        }\n    });\n    if (options.password) {\n        logger_1.logger.warn('\"--password\" is deprecated. Use the PASSWORD environment variable instead.');\n    }\n    let password = options.password || process.env.PASSWORD;\n    if (!password) {\n        // Generate a random password with a length of 24.\n        const buffer = Buffer.alloc(12);\n        crypto_1.randomFillSync(buffer);\n        password = buffer.toString(\"hex\");\n    }\n    const hasCustomHttps = certData && certKeyData;\n    const app = await server_1.createApp({\n        allowHttp: options.allowHttp,\n        bypassAuth: options.noAuth,\n        registerMiddleware: (app) => {\n            // If we're not running from the binary and we aren't serving the static\n            // pre-built version, use webpack to serve the web files.\n            if (!constants_1.isCli && !constants_1.serveStatic) {\n                const webpackConfig = require(path.resolve(__dirname, \"..\", \"..\", \"web\", \"webpack.config.js\"));\n                const compiler = require(\"webpack\")(webpackConfig);\n                app.use(require(\"webpack-dev-middleware\")(compiler, {\n                    logger: {\n                        trace: (m) => logger_1.logger.trace(\"webpack\", logger_1.field(\"message\", m)),\n                        debug: (m) => logger_1.logger.debug(\"webpack\", logger_1.field(\"message\", m)),\n                        info: (m) => logger_1.logger.info(\"webpack\", logger_1.field(\"message\", m)),\n                        warn: (m) => logger_1.logger.warn(\"webpack\", logger_1.field(\"message\", m)),\n                        error: (m) => logger_1.logger.error(\"webpack\", logger_1.field(\"message\", m)),\n                    },\n                    publicPath: webpackConfig.output.publicPath,\n                    stats: webpackConfig.stats,\n                }));\n                app.use(require(\"webpack-hot-middleware\")(compiler));\n            }\n        },\n        serverOptions: {\n            extensionsDirectory: extensionsDir,\n            builtInExtensionsDirectory: builtInExtensionsDir,\n            dataDirectory: dataDir,\n            workingDirectory: workingDir,\n            cacheDirectory: constants_1.cacheHome,\n            fork: (modulePath, args, options) => {\n                if (options && options.env && options.env.AMD_ENTRYPOINT) {\n                    return bootstrapFork_1.forkModule(options.env.AMD_ENTRYPOINT, args, options, dataDir);\n                }\n                return child_process_1.fork(modulePath, args, options);\n            },\n        },\n        password,\n        httpsOptions: hasCustomHttps ? {\n            key: certKeyData,\n            cert: certData,\n        } : undefined,\n    });\n    logger_1.logger.info(\"Starting webserver...\", logger_1.field(\"host\", options.host), logger_1.field(\"port\", options.port));\n    app.server.listen(options.port, options.host);\n    let clientId = 1;\n    app.wss.on(\"connection\", (ws, req) => {\n        const id = clientId++;\n        if (sharedProcess.state === sharedProcess_1.SharedProcessState.Ready) {\n            sendSharedProcessReady(ws);\n        }\n        logger_1.logger.info(`WebSocket opened \\u001B[0m${req.url}`, logger_1.field(\"client\", id), logger_1.field(\"ip\", req.socket.remoteAddress));\n        ws.on(\"close\", (code) => {\n            logger_1.logger.info(`WebSocket closed \\u001B[0m${req.url}`, logger_1.field(\"client\", id), logger_1.field(\"code\", code));\n        });\n    });\n    app.wss.on(\"error\", (err) => {\n        if (err.code === \"EADDRINUSE\") {\n            logger_1.logger.error(`Port ${bold(options.port)} is in use. Please free up port ${options.port} or specify a different port with the -p flag`);\n            process.exit(1);\n        }\n    });\n    if (!options.certKey && !options.cert) {\n        logger_1.logger.warn(\"No certificate specified. \\u001B[1mThis could be insecure.\");\n        // TODO: fill in appropriate doc url\n        logger_1.logger.warn(\"Documentation on securing your setup: https://github.com/codercom/code-server/blob/master/doc/security/ssl.md\");\n    }\n    if (!options.noAuth) {\n        logger_1.logger.info(\" \");\n        logger_1.logger.info(`Password:\\u001B[1m ${password}`);\n    }\n    else {\n        logger_1.logger.warn(\"Launched without authentication.\");\n    }\n    const url = `http://localhost:${options.port}/`;\n    logger_1.logger.info(\" \");\n    logger_1.logger.info(\"Started (click the link below to open):\");\n    logger_1.logger.info(url);\n    logger_1.logger.info(\" \");\n    if (options.open) {\n        try {\n            await opn(url);\n        }\n        catch (e) {\n            logger_1.logger.warn(\"Url couldn't be opened automatically.\", logger_1.field(\"url\", url), logger_1.field(\"exception\", e));\n        }\n    }\n})().catch((ex) => {\n    logger_1.logger.error(ex);\n});\n",{"version":3,"file":"/home/coding/workspace/packages/server/src/cli.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/server/src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import { field, logger } from \"@coder/logger\";\nimport { ServerMessage, SharedProcessActive } from \"@coder/protocol/src/proto\";\nimport { ChildProcess, fork, ForkOptions } from \"child_process\";\nimport { randomFillSync } from \"crypto\";\nimport * as fs from \"fs\";\nimport * as fse from \"fs-extra\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport * as WebSocket from \"ws\";\nimport { buildDir, cacheHome, dataHome, isCli, serveStatic } from \"./constants\";\nimport { createApp } from \"./server\";\nimport { forkModule, requireModule } from \"./vscode/bootstrapFork\";\nimport { SharedProcess, SharedProcessState } from \"./vscode/sharedProcess\";\nimport opn = require(\"opn\");\n\nimport * as commander from \"commander\";\n\ncommander.version(process.env.VERSION || \"development\")\n\t.name(\"code-server\")\n\t.description(\"Run VS Code on a remote server.\")\n\t.option(\"--cert <value>\")\n\t.option(\"--cert-key <value>\")\n\t.option(\"-e, --extensions-dir <dir>\", \"Set the root path for extensions.\")\n\t.option(\"-d --user-data-dir <dir>\", \"\tSpecifies the directory that user data is kept in, useful when running as root.\")\n\t.option(\"--data-dir <value>\", \"DEPRECATED: Use '--user-data-dir' instead. Customize where user-data is stored.\")\n\t.option(\"-h, --host <value>\", \"Customize the hostname.\", \"0.0.0.0\")\n\t.option(\"-o, --open\", \"Open in the browser on startup.\", false)\n\t.option(\"-p, --port <number>\", \"Port to bind on.\", parseInt(process.env.PORT!, 10) || 8443)\n\t.option(\"-N, --no-auth\", \"Start without requiring authentication.\", undefined)\n\t.option(\"-H, --allow-http\", \"Allow http connections.\", false)\n\t.option(\"-P, --password <value>\", \"DEPRECATED: Use the PASSWORD environment variable instead. Specify a password for authentication.\")\n\t.option(\"--disable-telemetry\", \"Disables ALL telemetry.\", false)\n\t.option(\"--install-extension <value>\", \"Install an extension by its ID.\")\n\t.option(\"--bootstrap-fork <name>\", \"Used for development. Never set.\")\n\t.option(\"--extra-args <args>\", \"Used for development. Never set.\")\n\t.arguments(\"Specify working directory.\")\n\t.parse(process.argv);\n\nError.stackTraceLimit = Infinity;\nif (isCli) {\n\trequire(\"nbin\").shimNativeFs(buildDir);\n\trequire(\"nbin\").shimNativeFs(\"/node_modules\");\n}\n// Makes strings or numbers bold in stdout\nconst bold = (text: string | number): string | number => {\n\treturn `\\u001B[1m${text}\\u001B[0m`;\n};\n\n(async (): Promise<void> => {\n\tconst args = commander.args;\n\tconst options = commander.opts() as {\n\t\tnoAuth: boolean;\n\t\treadonly allowHttp: boolean;\n\t\treadonly host: string;\n\t\treadonly port: number;\n\t\treadonly disableTelemetry: boolean;\n\n\t\treadonly userDataDir?: string;\n\t\treadonly extensionsDir?: string;\n\n\t\treadonly dataDir?: string;\n\t\treadonly password?: string;\n\t\treadonly open?: boolean;\n\t\treadonly cert?: string;\n\t\treadonly certKey?: string;\n\n\t\treadonly installExtension?: string;\n\n\t\treadonly bootstrapFork?: string;\n\t\treadonly extraArgs?: string;\n\t};\n\n\tif (options.disableTelemetry) {\n\t\tprocess.env.DISABLE_TELEMETRY = \"true\";\n\t}\n\n\t// Commander has an exception for `--no` prefixes. Here we'll adjust that.\n\t// tslint:disable-next-line:no-any\n\tconst noAuthValue = (commander as any).auth;\n\toptions.noAuth = !noAuthValue;\n\n\tconst dataDir = path.resolve(options.userDataDir || options.dataDir || path.join(dataHome, \"code-server\"));\n\tconst extensionsDir = options.extensionsDir ? path.resolve(options.extensionsDir) : path.resolve(dataDir, \"extensions\");\n\tconst workingDir = path.resolve(args[0] || process.cwd());\n\tconst dependenciesDir = path.join(os.tmpdir(), \"code-server/dependencies\");\n\n\tif (!fs.existsSync(dataDir)) {\n\t\tconst oldDataDir = path.resolve(path.join(os.homedir(), \".code-server\"));\n\t\tif (fs.existsSync(oldDataDir)) {\n\t\t\tawait fse.move(oldDataDir, dataDir);\n\t\t\tlogger.info(`Moved data directory from ${oldDataDir} to ${dataDir}`);\n\t\t}\n\t}\n\n\tawait Promise.all([\n\t\tfse.mkdirp(cacheHome),\n\t\tfse.mkdirp(dataDir),\n\t\tfse.mkdirp(extensionsDir),\n\t\tfse.mkdirp(workingDir),\n\t\tfse.mkdirp(dependenciesDir),\n\t]);\n\n\tconst unpackExecutable = (binaryName: string): void => {\n\t\tconst memFile = path.join(isCli ? buildDir! : path.join(__dirname, \"..\"), \"build/dependencies\", binaryName);\n\t\tconst diskFile = path.join(dependenciesDir, binaryName);\n\t\tif (!fse.existsSync(diskFile)) {\n\t\t\tfse.writeFileSync(diskFile, fse.readFileSync(memFile));\n\t\t}\n\t\tfse.chmodSync(diskFile, \"755\");\n\t};\n\n\tunpackExecutable(\"rg\");\n\t// tslint:disable-next-line no-any\n\t(<any>global).RIPGREP_LOCATION = path.join(dependenciesDir, \"rg\");\n\n\tconst builtInExtensionsDir = path.resolve(buildDir || path.join(__dirname, \"..\"), \"build/extensions\");\n\tif (options.bootstrapFork) {\n\t\tconst modulePath = options.bootstrapFork;\n\t\tif (!modulePath) {\n\t\t\tlogger.error(\"No module path specified to fork!\");\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tprocess.argv = [\n\t\t\tprocess.argv[0],\n\t\t\tprocess.argv[1],\n\t\t\t...(options.extraArgs ? JSON.parse(options.extraArgs) : []),\n\t\t];\n\n\t\treturn requireModule(modulePath, builtInExtensionsDir);\n\t}\n\n\tconst logDir = path.join(cacheHome, \"code-server/logs\", new Date().toISOString().replace(/[-:.TZ]/g, \"\"));\n\tprocess.env.VSCODE_LOGS = logDir;\n\n\tconst certPath = options.cert ? path.resolve(options.cert) : undefined;\n\tconst certKeyPath = options.certKey ? path.resolve(options.certKey) : undefined;\n\n\tif (certPath && !certKeyPath) {\n\t\tlogger.error(\"'--cert-key' flag is required when specifying a certificate!\");\n\t\tprocess.exit(1);\n\t}\n\n\tif (!certPath && certKeyPath) {\n\t\tlogger.error(\"'--cert' flag is required when specifying certificate key!\");\n\t\tprocess.exit(1);\n\t}\n\n\tlet certData: Buffer | undefined;\n\tlet certKeyData: Buffer | undefined;\n\n\tif (typeof certPath !== \"undefined\" && typeof certKeyPath !== \"undefined\") {\n\t\ttry {\n\t\t\tcertData = fs.readFileSync(certPath);\n\t\t} catch (ex) {\n\t\t\tlogger.error(`Failed to read certificate: ${ex.message}`);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tcertKeyData = fs.readFileSync(certKeyPath);\n\t\t} catch (ex) {\n\t\t\tlogger.error(`Failed to read certificate key: ${ex.message}`);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\n\tlogger.info(`\\u001B[1mcode-server ${process.env.VERSION ? `v${process.env.VERSION}` : \"development\"}`);\n\n\tif (options.dataDir) {\n\t\tlogger.warn('\"--data-dir\" is deprecated. Use \"--user-data-dir\" instead.');\n\t}\n\n\tif (options.installExtension) {\n\t\tconst fork = forkModule(\"vs/code/node/cli\", [\n\t\t\t\"--user-data-dir\", dataDir,\n\t\t\t\"--builtin-extensions-dir\", builtInExtensionsDir,\n\t\t\t\"--extensions-dir\", extensionsDir,\n\t\t\t\"--install-extension\", options.installExtension,\n\t\t], {\n\t\t\tenv: {\n\t\t\t\tVSCODE_ALLOW_IO: \"true\",\n\t\t\t\tVSCODE_LOGS: process.env.VSCODE_LOGS,\n\t\t\t},\n\t\t}, dataDir);\n\n\t\tfork.stdout.on(\"data\", (d: Buffer) => d.toString().split(\"\\n\").forEach((l) => logger.info(l)));\n\t\tfork.stderr.on(\"data\", (d: Buffer) => d.toString().split(\"\\n\").forEach((l) => logger.error(l)));\n\t\tfork.on(\"exit\", () => process.exit());\n\n\t\treturn;\n\t}\n\n\t// TODO: fill in appropriate doc url\n\tlogger.info(\"Additional documentation: http://github.com/codercom/code-server\");\n\tlogger.info(\"Initializing\", field(\"data-dir\", dataDir), field(\"extensions-dir\", extensionsDir), field(\"working-dir\", workingDir), field(\"log-dir\", logDir));\n\tconst sharedProcess = new SharedProcess(dataDir, extensionsDir, builtInExtensionsDir);\n\tconst sendSharedProcessReady = (socket: WebSocket): void => {\n\t\tconst active = new SharedProcessActive();\n\t\tactive.setSocketPath(sharedProcess.socketPath);\n\t\tactive.setLogPath(logDir);\n\t\tconst serverMessage = new ServerMessage();\n\t\tserverMessage.setSharedProcessActive(active);\n\t\tsocket.send(serverMessage.serializeBinary());\n\t};\n\tsharedProcess.onState((event) => {\n\t\tif (event.state === SharedProcessState.Ready) {\n\t\t\tapp.wss.clients.forEach((c) => sendSharedProcessReady(c));\n\t\t}\n\t});\n\n\tif (options.password) {\n\t\tlogger.warn('\"--password\" is deprecated. Use the PASSWORD environment variable instead.');\n\t}\n\n\tlet password = options.password || process.env.PASSWORD;\n\tif (!password) {\n\t\t// Generate a random password with a length of 24.\n\t\tconst buffer = Buffer.alloc(12);\n\t\trandomFillSync(buffer);\n\t\tpassword = buffer.toString(\"hex\");\n\t}\n\n\tconst hasCustomHttps = certData && certKeyData;\n\tconst app = await createApp({\n\t\tallowHttp: options.allowHttp,\n\t\tbypassAuth: options.noAuth,\n\t\tregisterMiddleware: (app): void => {\n\t\t\t// If we're not running from the binary and we aren't serving the static\n\t\t\t// pre-built version, use webpack to serve the web files.\n\t\t\tif (!isCli && !serveStatic) {\n\t\t\t\tconst webpackConfig = require(path.resolve(__dirname, \"..\", \"..\", \"web\", \"webpack.config.js\"));\n\t\t\t\tconst compiler = require(\"webpack\")(webpackConfig);\n\t\t\t\tapp.use(require(\"webpack-dev-middleware\")(compiler, {\n\t\t\t\t\tlogger: {\n\t\t\t\t\t\ttrace: (m: string): void => logger.trace(\"webpack\", field(\"message\", m)),\n\t\t\t\t\t\tdebug: (m: string): void => logger.debug(\"webpack\", field(\"message\", m)),\n\t\t\t\t\t\tinfo: (m: string): void => logger.info(\"webpack\", field(\"message\", m)),\n\t\t\t\t\t\twarn: (m: string): void => logger.warn(\"webpack\", field(\"message\", m)),\n\t\t\t\t\t\terror: (m: string): void => logger.error(\"webpack\", field(\"message\", m)),\n\t\t\t\t\t},\n\t\t\t\t\tpublicPath: webpackConfig.output.publicPath,\n\t\t\t\t\tstats: webpackConfig.stats,\n\t\t\t\t}));\n\t\t\t\tapp.use(require(\"webpack-hot-middleware\")(compiler));\n\t\t\t}\n\t\t},\n\t\tserverOptions: {\n\t\t\textensionsDirectory: extensionsDir,\n\t\t\tbuiltInExtensionsDirectory: builtInExtensionsDir,\n\t\t\tdataDirectory: dataDir,\n\t\t\tworkingDirectory: workingDir,\n\t\t\tcacheDirectory: cacheHome,\n\t\t\tfork: (modulePath: string, args?: string[], options?: ForkOptions): ChildProcess => {\n\t\t\t\tif (options && options.env && options.env.AMD_ENTRYPOINT) {\n\t\t\t\t\treturn forkModule(options.env.AMD_ENTRYPOINT, args, options, dataDir);\n\t\t\t\t}\n\n\t\t\t\treturn fork(modulePath, args, options);\n\t\t\t},\n\t\t},\n\t\tpassword,\n\t\thttpsOptions: hasCustomHttps ? {\n\t\t\tkey: certKeyData,\n\t\t\tcert: certData,\n\t\t} : undefined,\n\t});\n\n\tlogger.info(\"Starting webserver...\", field(\"host\", options.host), field(\"port\", options.port));\n\tapp.server.listen(options.port, options.host);\n\tlet clientId = 1;\n\tapp.wss.on(\"connection\", (ws, req) => {\n\t\tconst id = clientId++;\n\n\t\tif (sharedProcess.state === SharedProcessState.Ready) {\n\t\t\tsendSharedProcessReady(ws);\n\t\t}\n\n\t\tlogger.info(`WebSocket opened \\u001B[0m${req.url}`, field(\"client\", id), field(\"ip\", req.socket.remoteAddress));\n\n\t\tws.on(\"close\", (code) => {\n\t\t\tlogger.info(`WebSocket closed \\u001B[0m${req.url}`, field(\"client\", id), field(\"code\", code));\n\t\t});\n\t});\n\tapp.wss.on(\"error\", (err: NodeJS.ErrnoException) => {\n\t\tif (err.code === \"EADDRINUSE\") {\n\t\t\tlogger.error(`Port ${bold(options.port)} is in use. Please free up port ${options.port} or specify a different port with the -p flag`);\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\tif (!options.certKey && !options.cert) {\n\t\tlogger.warn(\"No certificate specified. \\u001B[1mThis could be insecure.\");\n\t\t// TODO: fill in appropriate doc url\n\t\tlogger.warn(\"Documentation on securing your setup: https://github.com/codercom/code-server/blob/master/doc/security/ssl.md\");\n\t}\n\n\tif (!options.noAuth) {\n\t\tlogger.info(\" \");\n\t\tlogger.info(`Password:\\u001B[1m ${password}`);\n\t} else {\n\t\tlogger.warn(\"Launched without authentication.\");\n\t}\n\n\tconst url = `http://localhost:${options.port}/`;\n\tlogger.info(\" \");\n\tlogger.info(\"Started (click the link below to open):\");\n\tlogger.info(url);\n\tlogger.info(\" \");\n\n\tif (options.open) {\n\t\ttry {\n\t\t\tawait opn(url);\n\t\t} catch (e) {\n\t\t\tlogger.warn(\"Url couldn't be opened automatically.\", field(\"url\", url), field(\"exception\", e));\n\t\t}\n\t}\n})().catch((ex) => {\n\tlogger.error(ex);\n});\n"]}]}