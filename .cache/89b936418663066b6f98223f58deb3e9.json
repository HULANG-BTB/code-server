{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar nls = require(\"vs/nls\");\nvar Paths = require(\"vs/base/common/path\");\nvar resources = require(\"vs/base/common/resources\");\nvar Json = require(\"vs/base/common/json\");\nvar jsonErrorMessages_1 = require(\"vs/base/common/jsonErrorMessages\");\nvar FileIconThemeData = /** @class */ (function () {\n    function FileIconThemeData(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    FileIconThemeData.prototype.ensureLoaded = function (fileService) {\n        return !this.isLoaded ? this.load(fileService) : Promise.resolve(this.styleSheetContent);\n    };\n    FileIconThemeData.prototype.reload = function (fileService) {\n        return this.load(fileService);\n    };\n    FileIconThemeData.prototype.load = function (fileService) {\n        var _this = this;\n        if (!this.location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        return _loadIconThemeDocument(fileService, this.location).then(function (iconThemeDocument) {\n            var result = _processIconThemeDocument(_this.id, _this.location, iconThemeDocument);\n            _this.styleSheetContent = result.content;\n            _this.hasFileIcons = result.hasFileIcons;\n            _this.hasFolderIcons = result.hasFolderIcons;\n            _this.hidesExplorerArrows = result.hidesExplorerArrows;\n            _this.isLoaded = true;\n            return _this.styleSheetContent;\n        });\n    };\n    FileIconThemeData.fromExtensionTheme = function (iconTheme, iconThemeLocation, extensionData) {\n        var id = extensionData.extensionId + '-' + iconTheme.id;\n        var label = iconTheme.label || Paths.basename(iconTheme.path);\n        var settingsId = iconTheme.id;\n        var themeData = new FileIconThemeData(id, label, settingsId);\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    };\n    FileIconThemeData.noIconTheme = function () {\n        var themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = new FileIconThemeData('', '', null);\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    };\n    FileIconThemeData.createUnloadedTheme = function (id) {\n        var themeData = new FileIconThemeData(id, '', '__' + id);\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    };\n    FileIconThemeData.fromStorageData = function (input) {\n        try {\n            var data = JSON.parse(input);\n            var theme = new FileIconThemeData('', '', null);\n            for (var key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'extensionData':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        theme.location = uri_1.URI.revive(data.location);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    FileIconThemeData.prototype.toStorageData = function () {\n        return JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            location: this.location,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            watch: this.watch\n        });\n    };\n    FileIconThemeData._noIconTheme = null;\n    return FileIconThemeData;\n}());\nexports.FileIconThemeData = FileIconThemeData;\nfunction _loadIconThemeDocument(fileService, location) {\n    return fileService.resolveContent(location, { encoding: 'utf8' }).then(function (content) {\n        var errors = [];\n        var contentValue = Json.parse(content.value.toString(), errors);\n        if (errors.length > 0 || !contentValue) {\n            return Promise.reject(new Error(nls.localize('error.cannotparseicontheme', \"Problems parsing file icons file: {0}\", errors.map(function (e) { return jsonErrorMessages_1.getParseErrorMessage(e.error); }).join(', '))));\n        }\n        return Promise.resolve(contentValue);\n    });\n}\nfunction _processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n    var result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n    if (!iconThemeDocument.iconDefinitions) {\n        return result;\n    }\n    var selectorByDefinitionId = {};\n    var iconThemeDocumentLocationDirname = resources.dirname(iconThemeDocumentLocation);\n    function resolvePath(path) {\n        return resources.joinPath(iconThemeDocumentLocationDirname, path);\n    }\n    function collectSelectors(associations, baseThemeClassName) {\n        function addSelector(selector, defId) {\n            if (defId) {\n                var list = selectorByDefinitionId[defId];\n                if (!list) {\n                    list = selectorByDefinitionId[defId] = [];\n                }\n                list.push(selector);\n            }\n        }\n        if (associations) {\n            var qualifier = '.show-file-icons';\n            if (baseThemeClassName) {\n                qualifier = baseThemeClassName + ' ' + qualifier;\n            }\n            var expanded = '.monaco-tree-row.expanded'; // workaround for #11453\n            var expanded2 = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents'; // new tree\n            if (associations.folder) {\n                addSelector(qualifier + \" .folder-icon::before\", associations.folder);\n                result.hasFolderIcons = true;\n            }\n            if (associations.folderExpanded) {\n                addSelector(qualifier + \" \" + expanded + \" .folder-icon::before\", associations.folderExpanded);\n                addSelector(qualifier + \" \" + expanded2 + \" .folder-icon::before\", associations.folderExpanded);\n                result.hasFolderIcons = true;\n            }\n            var rootFolder = associations.rootFolder || associations.folder;\n            var rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n            if (rootFolder) {\n                addSelector(qualifier + \" .rootfolder-icon::before\", rootFolder);\n                result.hasFolderIcons = true;\n            }\n            if (rootFolderExpanded) {\n                addSelector(qualifier + \" \" + expanded + \" .rootfolder-icon::before\", rootFolderExpanded);\n                addSelector(qualifier + \" \" + expanded2 + \" .rootfolder-icon::before\", rootFolderExpanded);\n                result.hasFolderIcons = true;\n            }\n            if (associations.file) {\n                addSelector(qualifier + \" .file-icon::before\", associations.file);\n                result.hasFileIcons = true;\n            }\n            var folderNames = associations.folderNames;\n            if (folderNames) {\n                for (var folderName in folderNames) {\n                    addSelector(qualifier + \" .\" + escapeCSS(folderName.toLowerCase()) + \"-name-folder-icon.folder-icon::before\", folderNames[folderName]);\n                    result.hasFolderIcons = true;\n                }\n            }\n            var folderNamesExpanded = associations.folderNamesExpanded;\n            if (folderNamesExpanded) {\n                for (var folderName in folderNamesExpanded) {\n                    addSelector(qualifier + \" \" + expanded + \" .\" + escapeCSS(folderName.toLowerCase()) + \"-name-folder-icon.folder-icon::before\", folderNamesExpanded[folderName]);\n                    addSelector(qualifier + \" \" + expanded2 + \" .\" + escapeCSS(folderName.toLowerCase()) + \"-name-folder-icon.folder-icon::before\", folderNamesExpanded[folderName]);\n                    result.hasFolderIcons = true;\n                }\n            }\n            var languageIds = associations.languageIds;\n            if (languageIds) {\n                if (!languageIds.jsonc && languageIds.json) {\n                    languageIds.jsonc = languageIds.json;\n                }\n                for (var languageId in languageIds) {\n                    addSelector(qualifier + \" .\" + escapeCSS(languageId) + \"-lang-file-icon.file-icon::before\", languageIds[languageId]);\n                    result.hasFileIcons = true;\n                }\n            }\n            var fileExtensions = associations.fileExtensions;\n            if (fileExtensions) {\n                for (var fileExtension in fileExtensions) {\n                    var selectors = [];\n                    var segments = fileExtension.toLowerCase().split('.');\n                    if (segments.length) {\n                        for (var i = 0; i < segments.length; i++) {\n                            selectors.push(\".\" + escapeCSS(segments.slice(i).join('.')) + \"-ext-file-icon\");\n                        }\n                        selectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n                    }\n                    addSelector(qualifier + \" \" + selectors.join('') + \".file-icon::before\", fileExtensions[fileExtension]);\n                    result.hasFileIcons = true;\n                }\n            }\n            var fileNames = associations.fileNames;\n            if (fileNames) {\n                for (var fileName in fileNames) {\n                    var selectors = [];\n                    fileName = fileName.toLowerCase();\n                    selectors.push(\".\" + escapeCSS(fileName) + \"-name-file-icon\");\n                    var segments = fileName.split('.');\n                    if (segments.length) {\n                        for (var i = 1; i < segments.length; i++) {\n                            selectors.push(\".\" + escapeCSS(segments.slice(i).join('.')) + \"-ext-file-icon\");\n                        }\n                        selectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n                    }\n                    addSelector(qualifier + \" \" + selectors.join('') + \".file-icon::before\", fileNames[fileName]);\n                    result.hasFileIcons = true;\n                }\n            }\n        }\n    }\n    collectSelectors(iconThemeDocument);\n    collectSelectors(iconThemeDocument.light, '.vs');\n    collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n    if (!result.hasFileIcons && !result.hasFolderIcons) {\n        return result;\n    }\n    var cssRules = [];\n    var fonts = iconThemeDocument.fonts;\n    if (Array.isArray(fonts)) {\n        fonts.forEach(function (font) {\n            var src = font.src.map(function (l) { return \"url('\" + resolvePath(l.path) + \"') format('\" + l.format + \"')\"; }).join(', ');\n            cssRules.push(\"@font-face { src: \" + src + \"; font-family: '\" + font.id + \"'; font-weight: \" + font.weight + \"; font-style: \" + font.style + \"; }\");\n        });\n        cssRules.push(\".show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '\" + fonts[0].id + \"'; font-size: \" + (fonts[0].size || '150%') + \"}\");\n    }\n    for (var defId in selectorByDefinitionId) {\n        var selectors = selectorByDefinitionId[defId];\n        var definition = iconThemeDocument.iconDefinitions[defId];\n        if (definition) {\n            if (definition.iconPath) {\n                cssRules.push(selectors.join(', ') + \" { content: ' '; background-image: url(\\\"\" + resolvePath(definition.iconPath) + \"\\\"); }\");\n            }\n            if (definition.fontCharacter || definition.fontColor) {\n                var body = '';\n                if (definition.fontColor) {\n                    body += \" color: \" + definition.fontColor + \";\";\n                }\n                if (definition.fontCharacter) {\n                    body += \" content: '\" + definition.fontCharacter + \"';\";\n                }\n                if (definition.fontSize) {\n                    body += \" font-size: \" + definition.fontSize + \";\";\n                }\n                if (definition.fontId) {\n                    body += \" font-family: \" + definition.fontId + \";\";\n                }\n                cssRules.push(selectors.join(', ') + \" { \" + body + \" }\");\n            }\n        }\n    }\n    result.content = cssRules.join('\\n');\n    return result;\n}\nfunction escapeCSS(str) {\n    return window['CSS'].escape(str);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport * as Paths from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport * as Json from 'vs/base/common/json';\nimport { ExtensionData, IThemeExtensionPoint, IFileIconTheme } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { getParseErrorMessage } from 'vs/base/common/jsonErrorMessages';\n\nexport class FileIconThemeData implements IFileIconTheme {\n\tid: string;\n\tlabel: string;\n\tsettingsId: string | null;\n\tdescription?: string;\n\thasFileIcons: boolean;\n\thasFolderIcons: boolean;\n\thidesExplorerArrows: boolean;\n\tisLoaded: boolean;\n\tlocation?: URI;\n\textensionData?: ExtensionData;\n\twatch?: boolean;\n\n\tstyleSheetContent?: string;\n\n\tprivate constructor(id: string, label: string, settingsId: string | null) {\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tthis.settingsId = settingsId;\n\t\tthis.isLoaded = false;\n\t\tthis.hasFileIcons = false;\n\t\tthis.hasFolderIcons = false;\n\t\tthis.hidesExplorerArrows = false;\n\t}\n\n\tpublic ensureLoaded(fileService: IFileService): Promise<string | undefined> {\n\t\treturn !this.isLoaded ? this.load(fileService) : Promise.resolve(this.styleSheetContent);\n\t}\n\n\tpublic reload(fileService: IFileService): Promise<string | undefined> {\n\t\treturn this.load(fileService);\n\t}\n\n\tprivate load(fileService: IFileService): Promise<string | undefined> {\n\t\tif (!this.location) {\n\t\t\treturn Promise.resolve(this.styleSheetContent);\n\t\t}\n\t\treturn _loadIconThemeDocument(fileService, this.location).then(iconThemeDocument => {\n\t\t\tconst result = _processIconThemeDocument(this.id, this.location!, iconThemeDocument);\n\t\t\tthis.styleSheetContent = result.content;\n\t\t\tthis.hasFileIcons = result.hasFileIcons;\n\t\t\tthis.hasFolderIcons = result.hasFolderIcons;\n\t\t\tthis.hidesExplorerArrows = result.hidesExplorerArrows;\n\t\t\tthis.isLoaded = true;\n\t\t\treturn this.styleSheetContent;\n\t\t});\n\t}\n\n\tstatic fromExtensionTheme(iconTheme: IThemeExtensionPoint, iconThemeLocation: URI, extensionData: ExtensionData): FileIconThemeData {\n\t\tconst id = extensionData.extensionId + '-' + iconTheme.id;\n\t\tconst label = iconTheme.label || Paths.basename(iconTheme.path);\n\t\tconst settingsId = iconTheme.id;\n\n\t\tconst themeData = new FileIconThemeData(id, label, settingsId);\n\n\t\tthemeData.description = iconTheme.description;\n\t\tthemeData.location = iconThemeLocation;\n\t\tthemeData.extensionData = extensionData;\n\t\tthemeData.watch = iconTheme._watch;\n\t\tthemeData.isLoaded = false;\n\t\treturn themeData;\n\t}\n\n\tprivate static _noIconTheme: FileIconThemeData | null = null;\n\n\tstatic noIconTheme(): FileIconThemeData {\n\t\tlet themeData = FileIconThemeData._noIconTheme;\n\t\tif (!themeData) {\n\t\t\tthemeData = FileIconThemeData._noIconTheme = new FileIconThemeData('', '', null);\n\t\t\tthemeData.hasFileIcons = false;\n\t\t\tthemeData.hasFolderIcons = false;\n\t\t\tthemeData.hidesExplorerArrows = false;\n\t\t\tthemeData.isLoaded = true;\n\t\t\tthemeData.extensionData = undefined;\n\t\t\tthemeData.watch = false;\n\t\t}\n\t\treturn themeData;\n\t}\n\n\tstatic createUnloadedTheme(id: string): FileIconThemeData {\n\t\tconst themeData = new FileIconThemeData(id, '', '__' + id);\n\t\tthemeData.isLoaded = false;\n\t\tthemeData.hasFileIcons = false;\n\t\tthemeData.hasFolderIcons = false;\n\t\tthemeData.hidesExplorerArrows = false;\n\t\tthemeData.extensionData = undefined;\n\t\tthemeData.watch = false;\n\t\treturn themeData;\n\t}\n\n\tstatic fromStorageData(input: string): FileIconThemeData | null {\n\t\ttry {\n\t\t\tlet data = JSON.parse(input);\n\t\t\tconst theme = new FileIconThemeData('', '', null);\n\t\t\tfor (let key in data) {\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase 'id':\n\t\t\t\t\tcase 'label':\n\t\t\t\t\tcase 'description':\n\t\t\t\t\tcase 'settingsId':\n\t\t\t\t\tcase 'extensionData':\n\t\t\t\t\tcase 'styleSheetContent':\n\t\t\t\t\tcase 'hasFileIcons':\n\t\t\t\t\tcase 'hidesExplorerArrows':\n\t\t\t\t\tcase 'hasFolderIcons':\n\t\t\t\t\tcase 'watch':\n\t\t\t\t\t\ttheme[key] = data[key];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'location':\n\t\t\t\t\t\ttheme.location = URI.revive(data.location);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn theme;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\ttoStorageData() {\n\t\treturn JSON.stringify({\n\t\t\tid: this.id,\n\t\t\tlabel: this.label,\n\t\t\tdescription: this.description,\n\t\t\tsettingsId: this.settingsId,\n\t\t\tlocation: this.location,\n\t\t\tstyleSheetContent: this.styleSheetContent,\n\t\t\thasFileIcons: this.hasFileIcons,\n\t\t\thasFolderIcons: this.hasFolderIcons,\n\t\t\thidesExplorerArrows: this.hidesExplorerArrows,\n\t\t\twatch: this.watch\n\t\t});\n\t}\n}\n\ninterface IconDefinition {\n\ticonPath: string;\n\tfontColor: string;\n\tfontCharacter: string;\n\tfontSize: string;\n\tfontId: string;\n}\n\ninterface FontDefinition {\n\tid: string;\n\tweight: string;\n\tstyle: string;\n\tsize: string;\n\tsrc: { path: string; format: string; }[];\n}\n\ninterface IconsAssociation {\n\tfolder?: string;\n\tfile?: string;\n\tfolderExpanded?: string;\n\trootFolder?: string;\n\trootFolderExpanded?: string;\n\tfolderNames?: { [folderName: string]: string; };\n\tfolderNamesExpanded?: { [folderName: string]: string; };\n\tfileExtensions?: { [extension: string]: string; };\n\tfileNames?: { [fileName: string]: string; };\n\tlanguageIds?: { [languageId: string]: string; };\n}\n\ninterface IconThemeDocument extends IconsAssociation {\n\ticonDefinitions: { [key: string]: IconDefinition };\n\tfonts: FontDefinition[];\n\tlight?: IconsAssociation;\n\thighContrast?: IconsAssociation;\n\thidesExplorerArrows?: boolean;\n}\n\nfunction _loadIconThemeDocument(fileService: IFileService, location: URI): Promise<IconThemeDocument> {\n\treturn fileService.resolveContent(location, { encoding: 'utf8' }).then((content) => {\n\t\tlet errors: Json.ParseError[] = [];\n\t\tlet contentValue = Json.parse(content.value.toString(), errors);\n\t\tif (errors.length > 0 || !contentValue) {\n\t\t\treturn Promise.reject(new Error(nls.localize('error.cannotparseicontheme', \"Problems parsing file icons file: {0}\", errors.map(e => getParseErrorMessage(e.error)).join(', '))));\n\t\t}\n\t\treturn Promise.resolve(contentValue);\n\t});\n}\n\nfunction _processIconThemeDocument(id: string, iconThemeDocumentLocation: URI, iconThemeDocument: IconThemeDocument): { content: string; hasFileIcons: boolean; hasFolderIcons: boolean; hidesExplorerArrows: boolean; } {\n\n\tconst result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n\n\tif (!iconThemeDocument.iconDefinitions) {\n\t\treturn result;\n\t}\n\tlet selectorByDefinitionId: { [def: string]: string[] } = {};\n\n\tconst iconThemeDocumentLocationDirname = resources.dirname(iconThemeDocumentLocation);\n\tfunction resolvePath(path: string) {\n\t\treturn resources.joinPath(iconThemeDocumentLocationDirname, path);\n\t}\n\n\tfunction collectSelectors(associations: IconsAssociation | undefined, baseThemeClassName?: string) {\n\t\tfunction addSelector(selector: string, defId: string) {\n\t\t\tif (defId) {\n\t\t\t\tlet list = selectorByDefinitionId[defId];\n\t\t\t\tif (!list) {\n\t\t\t\t\tlist = selectorByDefinitionId[defId] = [];\n\t\t\t\t}\n\t\t\t\tlist.push(selector);\n\t\t\t}\n\t\t}\n\t\tif (associations) {\n\t\t\tlet qualifier = '.show-file-icons';\n\t\t\tif (baseThemeClassName) {\n\t\t\t\tqualifier = baseThemeClassName + ' ' + qualifier;\n\t\t\t}\n\n\t\t\tconst expanded = '.monaco-tree-row.expanded'; // workaround for #11453\n\t\t\tconst expanded2 = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents'; // new tree\n\n\t\t\tif (associations.folder) {\n\t\t\t\taddSelector(`${qualifier} .folder-icon::before`, associations.folder);\n\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t}\n\n\t\t\tif (associations.folderExpanded) {\n\t\t\t\taddSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n\t\t\t\taddSelector(`${qualifier} ${expanded2} .folder-icon::before`, associations.folderExpanded);\n\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t}\n\n\t\t\tlet rootFolder = associations.rootFolder || associations.folder;\n\t\t\tlet rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n\n\t\t\tif (rootFolder) {\n\t\t\t\taddSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t}\n\n\t\t\tif (rootFolderExpanded) {\n\t\t\t\taddSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n\t\t\t\taddSelector(`${qualifier} ${expanded2} .rootfolder-icon::before`, rootFolderExpanded);\n\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t}\n\n\t\t\tif (associations.file) {\n\t\t\t\taddSelector(`${qualifier} .file-icon::before`, associations.file);\n\t\t\t\tresult.hasFileIcons = true;\n\t\t\t}\n\n\t\t\tlet folderNames = associations.folderNames;\n\t\t\tif (folderNames) {\n\t\t\t\tfor (let folderName in folderNames) {\n\t\t\t\t\taddSelector(`${qualifier} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNames[folderName]);\n\t\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet folderNamesExpanded = associations.folderNamesExpanded;\n\t\t\tif (folderNamesExpanded) {\n\t\t\t\tfor (let folderName in folderNamesExpanded) {\n\t\t\t\t\taddSelector(`${qualifier} ${expanded} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNamesExpanded[folderName]);\n\t\t\t\t\taddSelector(`${qualifier} ${expanded2} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNamesExpanded[folderName]);\n\t\t\t\t\tresult.hasFolderIcons = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet languageIds = associations.languageIds;\n\t\t\tif (languageIds) {\n\t\t\t\tif (!languageIds.jsonc && languageIds.json) {\n\t\t\t\t\tlanguageIds.jsonc = languageIds.json;\n\t\t\t\t}\n\t\t\t\tfor (let languageId in languageIds) {\n\t\t\t\t\taddSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n\t\t\t\t\tresult.hasFileIcons = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet fileExtensions = associations.fileExtensions;\n\t\t\tif (fileExtensions) {\n\t\t\t\tfor (let fileExtension in fileExtensions) {\n\t\t\t\t\tlet selectors: string[] = [];\n\t\t\t\t\tlet segments = fileExtension.toLowerCase().split('.');\n\t\t\t\t\tif (segments.length) {\n\t\t\t\t\t\tfor (let i = 0; i < segments.length; i++) {\n\t\t\t\t\t\t\tselectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n\t\t\t\t\t}\n\t\t\t\t\taddSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[fileExtension]);\n\t\t\t\t\tresult.hasFileIcons = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet fileNames = associations.fileNames;\n\t\t\tif (fileNames) {\n\t\t\t\tfor (let fileName in fileNames) {\n\t\t\t\t\tlet selectors: string[] = [];\n\t\t\t\t\tfileName = fileName.toLowerCase();\n\t\t\t\t\tselectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n\t\t\t\t\tlet segments = fileName.split('.');\n\t\t\t\t\tif (segments.length) {\n\t\t\t\t\t\tfor (let i = 1; i < segments.length; i++) {\n\t\t\t\t\t\t\tselectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n\t\t\t\t\t}\n\t\t\t\t\taddSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[fileName]);\n\t\t\t\t\tresult.hasFileIcons = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcollectSelectors(iconThemeDocument);\n\tcollectSelectors(iconThemeDocument.light, '.vs');\n\tcollectSelectors(iconThemeDocument.highContrast, '.hc-black');\n\n\tif (!result.hasFileIcons && !result.hasFolderIcons) {\n\t\treturn result;\n\t}\n\n\tlet cssRules: string[] = [];\n\n\tlet fonts = iconThemeDocument.fonts;\n\tif (Array.isArray(fonts)) {\n\t\tfonts.forEach(font => {\n\t\t\tlet src = font.src.map(l => `url('${resolvePath(l.path)}') format('${l.format}')`).join(', ');\n\t\t\tcssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; }`);\n\t\t});\n\t\tcssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${fonts[0].size || '150%'}}`);\n\t}\n\n\tfor (let defId in selectorByDefinitionId) {\n\t\tlet selectors = selectorByDefinitionId[defId];\n\t\tlet definition = iconThemeDocument.iconDefinitions[defId];\n\t\tif (definition) {\n\t\t\tif (definition.iconPath) {\n\t\t\t\tcssRules.push(`${selectors.join(', ')} { content: ' '; background-image: url(\"${resolvePath(definition.iconPath)}\"); }`);\n\t\t\t}\n\t\t\tif (definition.fontCharacter || definition.fontColor) {\n\t\t\t\tlet body = '';\n\t\t\t\tif (definition.fontColor) {\n\t\t\t\t\tbody += ` color: ${definition.fontColor};`;\n\t\t\t\t}\n\t\t\t\tif (definition.fontCharacter) {\n\t\t\t\t\tbody += ` content: '${definition.fontCharacter}';`;\n\t\t\t\t}\n\t\t\t\tif (definition.fontSize) {\n\t\t\t\t\tbody += ` font-size: ${definition.fontSize};`;\n\t\t\t\t}\n\t\t\t\tif (definition.fontId) {\n\t\t\t\t\tbody += ` font-family: ${definition.fontId};`;\n\t\t\t\t}\n\t\t\t\tcssRules.push(`${selectors.join(', ')} { ${body} }`);\n\t\t\t}\n\t\t}\n\t}\n\tresult.content = cssRules.join('\\n');\n\treturn result;\n}\nfunction escapeCSS(str: string) {\n\treturn window['CSS'].escape(str);\n}\n"]}]}