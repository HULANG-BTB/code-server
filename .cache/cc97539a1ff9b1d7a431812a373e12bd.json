{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/common/views\", \"vs/platform/registry/common/platform\", \"vs/base/common/lifecycle\", \"vs/platform/extensionManagement/common/extensionManagementUtil\"], function (require, exports, instantiation_1, views_1, platform_1, lifecycle_1, extensionManagementUtil_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.VIEWLET_ID = 'workbench.view.extensions';\n    exports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\n    exports.EXTENSIONS_CONFIG = '.vscode/extensions.json';\n    var ExtensionState;\n    (function (ExtensionState) {\n        ExtensionState[ExtensionState[\"Installing\"] = 0] = \"Installing\";\n        ExtensionState[ExtensionState[\"Installed\"] = 1] = \"Installed\";\n        ExtensionState[ExtensionState[\"Uninstalling\"] = 2] = \"Uninstalling\";\n        ExtensionState[ExtensionState[\"Uninstalled\"] = 3] = \"Uninstalled\";\n    })(ExtensionState = exports.ExtensionState || (exports.ExtensionState = {}));\n    exports.SERVICE_ID = 'extensionsWorkbenchService';\n    exports.IExtensionsWorkbenchService = instantiation_1.createDecorator(exports.SERVICE_ID);\n    exports.ConfigurationKey = 'extensions';\n    exports.AutoUpdateConfigurationKey = 'extensions.autoUpdate';\n    exports.AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';\n    exports.ShowRecommendationsOnlyOnDemandKey = 'extensions.showRecommendationsOnlyOnDemand';\n    exports.CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';\n    let ExtensionContainers = class ExtensionContainers extends lifecycle_1.Disposable {\n        constructor(containers, extensionsWorkbenchService) {\n            super();\n            this.containers = containers;\n            this._register(extensionsWorkbenchService.onChange(this.update, this));\n        }\n        set extension(extension) {\n            this.containers.forEach(c => c.extension = extension);\n        }\n        update(extension) {\n            for (const container of this.containers) {\n                if (extension && container.extension) {\n                    if (extensionManagementUtil_1.areSameExtensions(container.extension.identifier, extension.identifier)) {\n                        container.extension = extension;\n                    }\n                }\n                else {\n                    container.update();\n                }\n            }\n        }\n    };\n    ExtensionContainers = __decorate([\n        __param(1, exports.IExtensionsWorkbenchService)\n    ], ExtensionContainers);\n    exports.ExtensionContainers = ExtensionContainers;\n});\n",null]}