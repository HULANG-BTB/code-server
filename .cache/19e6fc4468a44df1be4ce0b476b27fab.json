{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"electron\", \"vs/workbench/services/files2/node/diskFileSystemProvider\", \"vs/platform/files/common/files\", \"vs/base/common/platform\", \"vs/nls\", \"vs/base/common/path\"], function (require, exports, electron_1, diskFileSystemProvider_1, files_1, platform_1, nls_1, path_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class DiskFileSystemProvider extends diskFileSystemProvider_1.DiskFileSystemProvider {\n        constructor(logService) {\n            super(logService);\n        }\n        get capabilities() {\n            if (!this._capabilities) {\n                this._capabilities = super.capabilities | files_1.FileSystemProviderCapabilities.Trash;\n            }\n            return this._capabilities;\n        }\n        doDelete(filePath, opts) {\n            const _super = Object.create(null, {\n                doDelete: { get: () => super.doDelete }\n            });\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!opts.useTrash) {\n                    return _super.doDelete.call(this, filePath, opts);\n                }\n                const result = electron_1.shell.moveItemToTrash(filePath);\n                if (!result) {\n                    throw new Error(platform_1.isWindows ? nls_1.localize('binFailed', \"Failed to move '{0}' to the recycle bin\", path_1.basename(filePath)) : nls_1.localize('trashFailed', \"Failed to move '{0}' to the trash\", path_1.basename(filePath)));\n                }\n            });\n        }\n    }\n    exports.DiskFileSystemProvider = DiskFileSystemProvider;\n});\n",null]}