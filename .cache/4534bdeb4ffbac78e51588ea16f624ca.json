{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/node/textResourcePropertiesService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/node/textResourcePropertiesService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar network_1 = require(\"vs/base/common/network\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar TextResourcePropertiesService = /** @class */ (function () {\n    function TextResourcePropertiesService(configurationService, remoteAgentService, windowService, storageService) {\n        var _this = this;\n        this.configurationService = configurationService;\n        this.windowService = windowService;\n        this.storageService = storageService;\n        this.remoteEnvironment = null;\n        remoteAgentService.getEnvironment().then(function (remoteEnv) { return _this.remoteEnvironment = remoteEnv; });\n    }\n    TextResourcePropertiesService.prototype.getEOL = function (resource, language) {\n        var filesConfiguration = this.configurationService.getValue('files', { overrideIdentifier: language, resource: resource });\n        if (filesConfiguration && filesConfiguration.eol && filesConfiguration.eol !== 'auto') {\n            return filesConfiguration.eol;\n        }\n        var os = this.getOS(resource);\n        return os === platform_1.OperatingSystem.Linux || os === platform_1.OperatingSystem.Macintosh ? '\\n' : '\\r\\n';\n    };\n    TextResourcePropertiesService.prototype.getOS = function (resource) {\n        var os = platform_1.OS;\n        var remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n        if (remoteAuthority) {\n            if (resource.scheme !== network_1.Schemas.file) {\n                var osCacheKey = \"resource.authority.os.\" + remoteAuthority;\n                os = this.remoteEnvironment ? this.remoteEnvironment.os : /* Get it from cache */ this.storageService.getNumber(osCacheKey, storage_1.StorageScope.WORKSPACE, platform_1.OS);\n                this.storageService.store(osCacheKey, os, storage_1.StorageScope.WORKSPACE);\n            }\n        }\n        return os;\n    };\n    TextResourcePropertiesService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, remoteAgentService_1.IRemoteAgentService),\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, storage_1.IStorageService)\n    ], TextResourcePropertiesService);\n    return TextResourcePropertiesService;\n}());\nexports.TextResourcePropertiesService = TextResourcePropertiesService;\nextensions_1.registerSingleton(resourceConfiguration_1.ITextResourcePropertiesService, TextResourcePropertiesService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/node/textResourcePropertiesService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/node/textResourcePropertiesService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,gFAAuF;AACvF,yFAAiG;AACjG,oDAA8D;AAC9D,kDAAiD;AACjD,8DAAmF;AACnF,8DAAoE;AACpE,0EAAgF;AAEhF,6FAA6F;AAE7F;IAMC,uCACyC,oBAA2C,EAC9D,kBAAuC,EAC3B,aAA6B,EAC5B,cAA+B;QAJlE,iBAOC;QANwC,yBAAoB,GAApB,oBAAoB,CAAuB;QAElD,kBAAa,GAAb,aAAa,CAAgB;QAC5B,mBAAc,GAAd,cAAc,CAAiB;QAN1D,sBAAiB,GAAmC,IAAI,CAAC;QAQhE,kBAAkB,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,iBAAiB,GAAG,SAAS,EAAlC,CAAkC,CAAC,CAAC;IAC3F,CAAC;IAED,8CAAM,GAAN,UAAO,QAAa,EAAE,QAAiB;QACtC,IAAM,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAkB,OAAO,EAAE,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QACpI,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,GAAG,IAAI,kBAAkB,CAAC,GAAG,KAAK,MAAM,EAAE;YACtF,OAAO,kBAAkB,CAAC,GAAG,CAAC;SAC9B;QACD,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,EAAE,KAAK,0BAAe,CAAC,KAAK,IAAI,EAAE,KAAK,0BAAe,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;IACzF,CAAC;IAEO,6CAAK,GAAb,UAAc,QAAa;QAC1B,IAAI,EAAE,GAAG,aAAE,CAAC;QACZ,IAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC;QAC9E,IAAI,eAAe,EAAE;YACpB,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACrC,IAAM,UAAU,GAAG,2BAAyB,eAAiB,CAAC;gBAC9D,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,sBAAY,CAAC,SAAS,EAAE,aAAE,CAAC,CAAC;gBACxJ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,EAAE,sBAAY,CAAC,SAAS,CAAC,CAAC;aAClE;SACD;QACD,OAAO,EAAE,CAAC;IACX,CAAC;IAnCW,6BAA6B;QAOvC,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,wCAAmB,CAAA;QACnB,mBAAA,wBAAc,CAAA;QACd,mBAAA,yBAAe,CAAA;OAVL,6BAA6B,CAoCzC;IAAD,oCAAC;CAAA,AApCD,IAoCC;AApCY,sEAA6B;AAsC1C,8BAAiB,CAAC,sDAA8B,EAAE,6BAA6B,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/resourceConfiguration';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class TextResourcePropertiesService implements ITextResourcePropertiesService {\n\n\t_serviceBrand: any;\n\n\tprivate remoteEnvironment: IRemoteAgentEnvironment | null = null;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tremoteAgentService.getEnvironment().then(remoteEnv => this.remoteEnvironment = remoteEnv);\n\t}\n\n\tgetEOL(resource: URI, language?: string): string {\n\t\tconst filesConfiguration = this.configurationService.getValue<{ eol: string }>('files', { overrideIdentifier: language, resource });\n\t\tif (filesConfiguration && filesConfiguration.eol && filesConfiguration.eol !== 'auto') {\n\t\t\treturn filesConfiguration.eol;\n\t\t}\n\t\tconst os = this.getOS(resource);\n\t\treturn os === OperatingSystem.Linux || os === OperatingSystem.Macintosh ? '\\n' : '\\r\\n';\n\t}\n\n\tprivate getOS(resource: URI): OperatingSystem {\n\t\tlet os = OS;\n\t\tconst remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\tif (resource.scheme !== Schemas.file) {\n\t\t\t\tconst osCacheKey = `resource.authority.os.${remoteAuthority}`;\n\t\t\t\tos = this.remoteEnvironment ? this.remoteEnvironment.os : /* Get it from cache */ this.storageService.getNumber(osCacheKey, StorageScope.WORKSPACE, OS);\n\t\t\t\tthis.storageService.store(osCacheKey, os, StorageScope.WORKSPACE);\n\t\t\t}\n\t\t}\n\t\treturn os;\n\t}\n}\n\nregisterSingleton(ITextResourcePropertiesService, TextResourcePropertiesService, true);"]}]}