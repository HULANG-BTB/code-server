{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMHelper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMHelper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function findMatchingThemeRule(theme, scopes, onlyColorRules = true) {\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            let parentScopes = scopes.slice(0, i);\n            let scope = scopes[i];\n            let r = findMatchingThemeRule2(theme, scope, parentScopes, onlyColorRules);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    exports.findMatchingThemeRule = findMatchingThemeRule;\n    function findMatchingThemeRule2(theme, scope, parentScopes, onlyColorRules) {\n        let result = null;\n        // Loop backwards, to ensure the last most specific rule wins\n        for (let i = theme.tokenColors.length - 1; i >= 0; i--) {\n            let rule = theme.tokenColors[i];\n            if (onlyColorRules && !rule.settings.foreground) {\n                continue;\n            }\n            let selectors;\n            if (typeof rule.scope === 'string') {\n                selectors = rule.scope.split(/,/).map(scope => scope.trim());\n            }\n            else if (Array.isArray(rule.scope)) {\n                selectors = rule.scope;\n            }\n            else {\n                continue;\n            }\n            for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {\n                let rawSelector = selectors[j];\n                let themeRule = new ThemeRule(rawSelector, rule.settings);\n                if (themeRule.matches(scope, parentScopes)) {\n                    if (themeRule.isMoreSpecific(result)) {\n                        result = themeRule;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    class ThemeRule {\n        constructor(rawSelector, settings) {\n            this.rawSelector = rawSelector;\n            this.settings = settings;\n            let rawSelectorPieces = this.rawSelector.split(/ /);\n            this.scope = rawSelectorPieces[rawSelectorPieces.length - 1];\n            this.parentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);\n        }\n        matches(scope, parentScopes) {\n            return ThemeRule._matches(this.scope, this.parentScopes, scope, parentScopes);\n        }\n        static _cmp(a, b) {\n            if (a === null && b === null) {\n                return 0;\n            }\n            if (a === null) {\n                // b > a\n                return -1;\n            }\n            if (b === null) {\n                // a > b\n                return 1;\n            }\n            if (a.scope.length !== b.scope.length) {\n                // longer scope length > shorter scope length\n                return a.scope.length - b.scope.length;\n            }\n            const aParentScopesLen = a.parentScopes.length;\n            const bParentScopesLen = b.parentScopes.length;\n            if (aParentScopesLen !== bParentScopesLen) {\n                // more parents > less parents\n                return aParentScopesLen - bParentScopesLen;\n            }\n            for (let i = 0; i < aParentScopesLen; i++) {\n                const aLen = a.parentScopes[i].length;\n                const bLen = b.parentScopes[i].length;\n                if (aLen !== bLen) {\n                    return aLen - bLen;\n                }\n            }\n            return 0;\n        }\n        isMoreSpecific(other) {\n            return (ThemeRule._cmp(this, other) > 0);\n        }\n        static _matchesOne(selectorScope, scope) {\n            let selectorPrefix = selectorScope + '.';\n            if (selectorScope === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {\n                return true;\n            }\n            return false;\n        }\n        static _matches(selectorScope, selectorParentScopes, scope, parentScopes) {\n            if (!this._matchesOne(selectorScope, scope)) {\n                return false;\n            }\n            let selectorParentIndex = selectorParentScopes.length - 1;\n            let parentIndex = parentScopes.length - 1;\n            while (selectorParentIndex >= 0 && parentIndex >= 0) {\n                if (this._matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {\n                    selectorParentIndex--;\n                }\n                parentIndex--;\n            }\n            if (selectorParentIndex === -1) {\n                return true;\n            }\n            return false;\n        }\n    }\n    exports.ThemeRule = ThemeRule;\n});\n",null]}