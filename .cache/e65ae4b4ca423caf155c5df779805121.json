{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/scrollbarVisibilityController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/scrollbarVisibilityController.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar scrollable_1 = require(\"vs/base/common/scrollable\");\nvar ScrollbarVisibilityController = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollbarVisibilityController, _super);\n    function ScrollbarVisibilityController(visibility, visibleClassName, invisibleClassName) {\n        var _this = _super.call(this) || this;\n        _this._visibility = visibility;\n        _this._visibleClassName = visibleClassName;\n        _this._invisibleClassName = invisibleClassName;\n        _this._domNode = null;\n        _this._isVisible = false;\n        _this._isNeeded = false;\n        _this._shouldBeVisible = false;\n        _this._revealTimer = _this._register(new async_1.TimeoutTimer());\n        return _this;\n    }\n    // ----------------- Hide / Reveal\n    ScrollbarVisibilityController.prototype.applyVisibilitySetting = function (shouldBeVisible) {\n        if (this._visibility === scrollable_1.ScrollbarVisibility.Hidden) {\n            return false;\n        }\n        if (this._visibility === scrollable_1.ScrollbarVisibility.Visible) {\n            return true;\n        }\n        return shouldBeVisible;\n    };\n    ScrollbarVisibilityController.prototype.setShouldBeVisible = function (rawShouldBeVisible) {\n        var shouldBeVisible = this.applyVisibilitySetting(rawShouldBeVisible);\n        if (this._shouldBeVisible !== shouldBeVisible) {\n            this._shouldBeVisible = shouldBeVisible;\n            this.ensureVisibility();\n        }\n    };\n    ScrollbarVisibilityController.prototype.setIsNeeded = function (isNeeded) {\n        if (this._isNeeded !== isNeeded) {\n            this._isNeeded = isNeeded;\n            this.ensureVisibility();\n        }\n    };\n    ScrollbarVisibilityController.prototype.setDomNode = function (domNode) {\n        this._domNode = domNode;\n        this._domNode.setClassName(this._invisibleClassName);\n        // Now that the flags & the dom node are in a consistent state, ensure the Hidden/Visible configuration\n        this.setShouldBeVisible(false);\n    };\n    ScrollbarVisibilityController.prototype.ensureVisibility = function () {\n        if (!this._isNeeded) {\n            // Nothing to be rendered\n            this._hide(false);\n            return;\n        }\n        if (this._shouldBeVisible) {\n            this._reveal();\n        }\n        else {\n            this._hide(true);\n        }\n    };\n    ScrollbarVisibilityController.prototype._reveal = function () {\n        var _this = this;\n        if (this._isVisible) {\n            return;\n        }\n        this._isVisible = true;\n        // The CSS animation doesn't play otherwise\n        this._revealTimer.setIfNotSet(function () {\n            if (_this._domNode) {\n                _this._domNode.setClassName(_this._visibleClassName);\n            }\n        }, 0);\n    };\n    ScrollbarVisibilityController.prototype._hide = function (withFadeAway) {\n        this._revealTimer.cancel();\n        if (!this._isVisible) {\n            return;\n        }\n        this._isVisible = false;\n        if (this._domNode) {\n            this._domNode.setClassName(this._invisibleClassName + (withFadeAway ? ' fade' : ''));\n        }\n    };\n    return ScrollbarVisibilityController;\n}(lifecycle_1.Disposable));\nexports.ScrollbarVisibilityController = ScrollbarVisibilityController;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/scrollbarVisibilityController.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/scrollbar/scrollbarVisibilityController.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode } from 'vs/base/browser/fastDomNode';\nimport { TimeoutTimer } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ScrollbarVisibility } from 'vs/base/common/scrollable';\n\nexport class ScrollbarVisibilityController extends Disposable {\n\tprivate _visibility: ScrollbarVisibility;\n\tprivate _visibleClassName: string;\n\tprivate _invisibleClassName: string;\n\tprivate _domNode: FastDomNode<HTMLElement> | null;\n\tprivate _shouldBeVisible: boolean;\n\tprivate _isNeeded: boolean;\n\tprivate _isVisible: boolean;\n\tprivate _revealTimer: TimeoutTimer;\n\n\tconstructor(visibility: ScrollbarVisibility, visibleClassName: string, invisibleClassName: string) {\n\t\tsuper();\n\t\tthis._visibility = visibility;\n\t\tthis._visibleClassName = visibleClassName;\n\t\tthis._invisibleClassName = invisibleClassName;\n\t\tthis._domNode = null;\n\t\tthis._isVisible = false;\n\t\tthis._isNeeded = false;\n\t\tthis._shouldBeVisible = false;\n\t\tthis._revealTimer = this._register(new TimeoutTimer());\n\t}\n\n\t// ----------------- Hide / Reveal\n\n\tprivate applyVisibilitySetting(shouldBeVisible: boolean): boolean {\n\t\tif (this._visibility === ScrollbarVisibility.Hidden) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._visibility === ScrollbarVisibility.Visible) {\n\t\t\treturn true;\n\t\t}\n\t\treturn shouldBeVisible;\n\t}\n\n\tpublic setShouldBeVisible(rawShouldBeVisible: boolean): void {\n\t\tlet shouldBeVisible = this.applyVisibilitySetting(rawShouldBeVisible);\n\n\t\tif (this._shouldBeVisible !== shouldBeVisible) {\n\t\t\tthis._shouldBeVisible = shouldBeVisible;\n\t\t\tthis.ensureVisibility();\n\t\t}\n\t}\n\n\tpublic setIsNeeded(isNeeded: boolean): void {\n\t\tif (this._isNeeded !== isNeeded) {\n\t\t\tthis._isNeeded = isNeeded;\n\t\t\tthis.ensureVisibility();\n\t\t}\n\t}\n\n\tpublic setDomNode(domNode: FastDomNode<HTMLElement>): void {\n\t\tthis._domNode = domNode;\n\t\tthis._domNode.setClassName(this._invisibleClassName);\n\n\t\t// Now that the flags & the dom node are in a consistent state, ensure the Hidden/Visible configuration\n\t\tthis.setShouldBeVisible(false);\n\t}\n\n\tpublic ensureVisibility(): void {\n\n\t\tif (!this._isNeeded) {\n\t\t\t// Nothing to be rendered\n\t\t\tthis._hide(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._shouldBeVisible) {\n\t\t\tthis._reveal();\n\t\t} else {\n\t\t\tthis._hide(true);\n\t\t}\n\t}\n\n\tprivate _reveal(): void {\n\t\tif (this._isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isVisible = true;\n\n\t\t// The CSS animation doesn't play otherwise\n\t\tthis._revealTimer.setIfNotSet(() => {\n\t\t\tif (this._domNode) {\n\t\t\t\tthis._domNode.setClassName(this._visibleClassName);\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\tprivate _hide(withFadeAway: boolean): void {\n\t\tthis._revealTimer.cancel();\n\t\tif (!this._isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isVisible = false;\n\t\tif (this._domNode) {\n\t\t\tthis._domNode.setClassName(this._invisibleClassName + (withFadeAway ? ' fade' : ''));\n\t\t}\n\t}\n}"]}]}