{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/inplaceReplaceSupport.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/inplaceReplaceSupport.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class BasicInplaceReplace {\n        constructor() {\n            this._defaultValueSet = [\n                ['true', 'false'],\n                ['True', 'False'],\n                ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n                ['public', 'protected', 'private'],\n            ];\n        }\n        navigateValueSet(range1, text1, range2, text2, up) {\n            if (range1 && text1) {\n                let result = this.doNavigateValueSet(text1, up);\n                if (result) {\n                    return {\n                        range: range1,\n                        value: result\n                    };\n                }\n            }\n            if (range2 && text2) {\n                let result = this.doNavigateValueSet(text2, up);\n                if (result) {\n                    return {\n                        range: range2,\n                        value: result\n                    };\n                }\n            }\n            return null;\n        }\n        doNavigateValueSet(text, up) {\n            let numberResult = this.numberReplace(text, up);\n            if (numberResult !== null) {\n                return numberResult;\n            }\n            return this.textReplace(text, up);\n        }\n        numberReplace(value, up) {\n            let precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n            let n1 = Number(value);\n            let n2 = parseFloat(value);\n            if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n                if (n1 === 0 && !up) {\n                    return null; // don't do negative\n                    //\t\t\t} else if(n1 === 9 && up) {\n                    //\t\t\t\treturn null; // don't insert 10 into a number\n                }\n                else {\n                    n1 = Math.floor(n1 * precision);\n                    n1 += up ? precision : -precision;\n                    return String(n1 / precision);\n                }\n            }\n            return null;\n        }\n        textReplace(value, up) {\n            return this.valueSetsReplace(this._defaultValueSet, value, up);\n        }\n        valueSetsReplace(valueSets, value, up) {\n            let result = null;\n            for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n                result = this.valueSetReplace(valueSets[i], value, up);\n            }\n            return result;\n        }\n        valueSetReplace(valueSet, value, up) {\n            let idx = valueSet.indexOf(value);\n            if (idx >= 0) {\n                idx += up ? +1 : -1;\n                if (idx < 0) {\n                    idx = valueSet.length - 1;\n                }\n                else {\n                    idx %= valueSet.length;\n                }\n                return valueSet[idx];\n            }\n            return null;\n        }\n    }\n    BasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n    exports.BasicInplaceReplace = BasicInplaceReplace;\n});\n",null]}