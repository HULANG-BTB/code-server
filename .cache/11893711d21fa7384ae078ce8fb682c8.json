{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/history/common/history.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/history/common/history.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IHistoryMainService = instantiation_1.createDecorator('historyMainService');\nfunction isRecentWorkspace(curr) {\n    return !!curr['workspace'];\n}\nexports.isRecentWorkspace = isRecentWorkspace;\nfunction isRecentFolder(curr) {\n    return !!curr['folderUri'];\n}\nexports.isRecentFolder = isRecentFolder;\nfunction isRecentFile(curr) {\n    return !!curr['fileUri'];\n}\nexports.isRecentFile = isRecentFile;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/history/common/history.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/history/common/history.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAKpE,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;AAwB9F,SAAgB,iBAAiB,CAAC,IAAa;IAC9C,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC5B,CAAC;AAFD,8CAEC;AAED,SAAgB,cAAc,CAAC,IAAa;IAC3C,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC5B,CAAC;AAFD,wCAEC;AAED,SAAgB,YAAY,CAAC,IAAa;IACzC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1B,CAAC;AAFD,oCAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event as CommonEvent } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { URI } from 'vs/base/common/uri';\nimport { IPath } from 'vs/platform/windows/common/windows';\n\nexport const IHistoryMainService = createDecorator<IHistoryMainService>('historyMainService');\n\nexport interface IRecentlyOpened {\n\tworkspaces: Array<IRecentWorkspace | IRecentFolder>;\n\tfiles: IRecentFile[];\n}\n\nexport type IRecent = IRecentWorkspace | IRecentFolder | IRecentFile;\n\nexport interface IRecentWorkspace {\n\tworkspace: IWorkspaceIdentifier;\n\tlabel?: string;\n}\n\nexport interface IRecentFolder {\n\tfolderUri: ISingleFolderWorkspaceIdentifier;\n\tlabel?: string;\n}\n\nexport interface IRecentFile {\n\tfileUri: URI;\n\tlabel?: string;\n}\n\nexport function isRecentWorkspace(curr: IRecent): curr is IRecentWorkspace {\n\treturn !!curr['workspace'];\n}\n\nexport function isRecentFolder(curr: IRecent): curr is IRecentFolder {\n\treturn !!curr['folderUri'];\n}\n\nexport function isRecentFile(curr: IRecent): curr is IRecentFile {\n\treturn !!curr['fileUri'];\n}\n\n\nexport interface IHistoryMainService {\n\t_serviceBrand: any;\n\n\tonRecentlyOpenedChange: CommonEvent<void>;\n\n\taddRecentlyOpened(recents: IRecent[]): void;\n\tgetRecentlyOpened(currentWorkspace?: IWorkspaceIdentifier, currentFolder?: ISingleFolderWorkspaceIdentifier, currentFiles?: IPath[]): IRecentlyOpened;\n\tremoveFromRecentlyOpened(paths: URI[]): void;\n\tclearRecentlyOpened(): void;\n\n\tupdateWindowsJumpList(): void;\n}"]}]}