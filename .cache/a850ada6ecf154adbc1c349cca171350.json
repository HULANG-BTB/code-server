{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagement.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagement.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls_1 = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9\\-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9\\-A-Z]*)$';\nexports.EXTENSION_IDENTIFIER_REGEX = new RegExp(exports.EXTENSION_IDENTIFIER_PATTERN);\nfunction isIExtensionIdentifier(thing) {\n    return thing\n        && typeof thing === 'object'\n        && typeof thing.id === 'string'\n        && (!thing.uuid || typeof thing.uuid === 'string');\n}\nexports.isIExtensionIdentifier = isIExtensionIdentifier;\nexports.IExtensionManagementService = instantiation_1.createDecorator('extensionManagementService');\nexports.IExtensionGalleryService = instantiation_1.createDecorator('extensionGalleryService');\nvar SortBy;\n(function (SortBy) {\n    SortBy[SortBy[\"NoneOrRelevance\"] = 0] = \"NoneOrRelevance\";\n    SortBy[SortBy[\"LastUpdatedDate\"] = 1] = \"LastUpdatedDate\";\n    SortBy[SortBy[\"Title\"] = 2] = \"Title\";\n    SortBy[SortBy[\"PublisherName\"] = 3] = \"PublisherName\";\n    SortBy[SortBy[\"InstallCount\"] = 4] = \"InstallCount\";\n    SortBy[SortBy[\"PublishedDate\"] = 5] = \"PublishedDate\";\n    SortBy[SortBy[\"AverageRating\"] = 6] = \"AverageRating\";\n    SortBy[SortBy[\"WeightedRating\"] = 12] = \"WeightedRating\";\n})(SortBy = exports.SortBy || (exports.SortBy = {}));\nvar SortOrder;\n(function (SortOrder) {\n    SortOrder[SortOrder[\"Default\"] = 0] = \"Default\";\n    SortOrder[SortOrder[\"Ascending\"] = 1] = \"Ascending\";\n    SortOrder[SortOrder[\"Descending\"] = 2] = \"Descending\";\n})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));\nvar StatisticType;\n(function (StatisticType) {\n    StatisticType[\"Uninstall\"] = \"uninstall\";\n})(StatisticType = exports.StatisticType || (exports.StatisticType = {}));\nvar InstallOperation;\n(function (InstallOperation) {\n    InstallOperation[InstallOperation[\"None\"] = 0] = \"None\";\n    InstallOperation[InstallOperation[\"Install\"] = 1] = \"Install\";\n    InstallOperation[InstallOperation[\"Update\"] = 2] = \"Update\";\n})(InstallOperation = exports.InstallOperation || (exports.InstallOperation = {}));\nexports.INSTALL_ERROR_MALICIOUS = 'malicious';\nexports.INSTALL_ERROR_INCOMPATIBLE = 'incompatible';\nexports.IExtensionManagementServerService = instantiation_1.createDecorator('extensionManagementServerService');\nvar EnablementState;\n(function (EnablementState) {\n    EnablementState[EnablementState[\"Disabled\"] = 0] = \"Disabled\";\n    EnablementState[EnablementState[\"WorkspaceDisabled\"] = 1] = \"WorkspaceDisabled\";\n    EnablementState[EnablementState[\"Enabled\"] = 2] = \"Enabled\";\n    EnablementState[EnablementState[\"WorkspaceEnabled\"] = 3] = \"WorkspaceEnabled\";\n})(EnablementState = exports.EnablementState || (exports.EnablementState = {}));\nexports.IExtensionEnablementService = instantiation_1.createDecorator('extensionEnablementService');\nexports.IExtensionTipsService = instantiation_1.createDecorator('extensionTipsService');\nvar ExtensionRecommendationReason;\n(function (ExtensionRecommendationReason) {\n    ExtensionRecommendationReason[ExtensionRecommendationReason[\"Workspace\"] = 0] = \"Workspace\";\n    ExtensionRecommendationReason[ExtensionRecommendationReason[\"File\"] = 1] = \"File\";\n    ExtensionRecommendationReason[ExtensionRecommendationReason[\"Executable\"] = 2] = \"Executable\";\n    ExtensionRecommendationReason[ExtensionRecommendationReason[\"DynamicWorkspace\"] = 3] = \"DynamicWorkspace\";\n    ExtensionRecommendationReason[ExtensionRecommendationReason[\"Experimental\"] = 4] = \"Experimental\";\n})(ExtensionRecommendationReason = exports.ExtensionRecommendationReason || (exports.ExtensionRecommendationReason = {}));\nexports.ExtensionsLabel = nls_1.localize('extensions', \"Extensions\");\nexports.ExtensionsChannelId = 'extensions';\nexports.PreferencesLabel = nls_1.localize('preferences', \"Preferences\");\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagement.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagement.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8BAAkC;AAGlC,gFAAiF;AAMpE,QAAA,4BAA4B,GAAG,6DAA6D,CAAC;AAC7F,QAAA,0BAA0B,GAAG,IAAI,MAAM,CAAC,oCAA4B,CAAC,CAAC;AAyBnF,SAAgB,sBAAsB,CAAC,KAAU;IAChD,OAAO,KAAK;WACR,OAAO,KAAK,KAAK,QAAQ;WACzB,OAAO,KAAK,CAAC,EAAE,KAAK,QAAQ;WAC5B,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;AACrD,CAAC;AALD,wDAKC;AAsDY,QAAA,2BAA2B,GAAG,+BAAe,CAA8B,4BAA4B,CAAC,CAAC;AACzG,QAAA,wBAAwB,GAAG,+BAAe,CAA2B,yBAAyB,CAAC,CAAC;AAE7G,IAAkB,MASjB;AATD,WAAkB,MAAM;IACvB,yDAAmB,CAAA;IACnB,yDAAmB,CAAA;IACnB,qCAAS,CAAA;IACT,qDAAiB,CAAA;IACjB,mDAAgB,CAAA;IAChB,qDAAiB,CAAA;IACjB,qDAAiB,CAAA;IACjB,wDAAmB,CAAA;AACpB,CAAC,EATiB,MAAM,GAAN,cAAM,KAAN,cAAM,QASvB;AAED,IAAkB,SAIjB;AAJD,WAAkB,SAAS;IAC1B,+CAAW,CAAA;IACX,mDAAa,CAAA;IACb,qDAAc,CAAA;AACf,CAAC,EAJiB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAI1B;AAYD,IAAkB,aAEjB;AAFD,WAAkB,aAAa;IAC9B,wCAAuB,CAAA;AACxB,CAAC,EAFiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAE9B;AAOD,IAAkB,gBAIjB;AAJD,WAAkB,gBAAgB;IACjC,uDAAQ,CAAA;IACR,6DAAO,CAAA;IACP,2DAAM,CAAA;AACP,CAAC,EAJiB,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAIjC;AA4CY,QAAA,uBAAuB,GAAG,WAAW,CAAC;AACtC,QAAA,0BAA0B,GAAG,cAAc,CAAC;AAsB5C,QAAA,iCAAiC,GAAG,+BAAe,CAAoC,kCAAkC,CAAC,CAAC;AAexI,IAAkB,eAKjB;AALD,WAAkB,eAAe;IAChC,6DAAQ,CAAA;IACR,+EAAiB,CAAA;IACjB,2DAAO,CAAA;IACP,6EAAgB,CAAA;AACjB,CAAC,EALiB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAKhC;AAEY,QAAA,2BAA2B,GAAG,+BAAe,CAA8B,4BAA4B,CAAC,CAAC;AAkEzG,QAAA,qBAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;AAcpG,IAAkB,6BAMjB;AAND,WAAkB,6BAA6B;IAC9C,2FAAS,CAAA;IACT,iFAAI,CAAA;IACJ,6FAAU,CAAA;IACV,yGAAgB,CAAA;IAChB,iGAAY,CAAA;AACb,CAAC,EANiB,6BAA6B,GAA7B,qCAA6B,KAA7B,qCAA6B,QAM9C;AAEY,QAAA,eAAe,GAAG,cAAQ,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;AACvD,QAAA,mBAAmB,GAAG,YAAY,CAAC;AACnC,QAAA,gBAAgB,GAAG,cAAQ,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { IPager } from 'vs/base/common/paging';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceFolder, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IExtensionManifest, IExtension, ExtensionType } from 'vs/platform/extensions/common/extensions';\n\nexport const EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9\\-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9\\-A-Z]*)$';\nexport const EXTENSION_IDENTIFIER_REGEX = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\n\nexport interface IGalleryExtensionProperties {\n\tdependencies?: string[];\n\textensionPack?: string[];\n\tengine?: string;\n\tlocalizedLanguages?: string[];\n}\n\nexport interface IGalleryExtensionAsset {\n\turi: string;\n\tfallbackUri: string;\n}\n\nexport interface IGalleryExtensionAssets {\n\tmanifest: IGalleryExtensionAsset | null;\n\treadme: IGalleryExtensionAsset | null;\n\tchangelog: IGalleryExtensionAsset | null;\n\tlicense: IGalleryExtensionAsset | null;\n\trepository: IGalleryExtensionAsset | null;\n\tdownload: IGalleryExtensionAsset;\n\ticon: IGalleryExtensionAsset;\n\tcoreTranslations: { [languageId: string]: IGalleryExtensionAsset };\n}\n\nexport function isIExtensionIdentifier(thing: any): thing is IExtensionIdentifier {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& typeof thing.id === 'string'\n\t\t&& (!thing.uuid || typeof thing.uuid === 'string');\n}\n\n/* __GDPR__FRAGMENT__\n\t\"ExtensionIdentifier\" : {\n\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"uuid\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t}\n */\nexport interface IExtensionIdentifier {\n\tid: string;\n\tuuid?: string;\n}\n\nexport interface IGalleryExtensionIdentifier extends IExtensionIdentifier {\n\tuuid: string;\n}\n\nexport interface IGalleryExtensionVersion {\n\tversion: string;\n\tdate: string;\n}\n\nexport interface IGalleryExtension {\n\tname: string;\n\tidentifier: IGalleryExtensionIdentifier;\n\tversion: string;\n\tdate: string;\n\tdisplayName: string;\n\tpublisherId: string;\n\tpublisher: string;\n\tpublisherDisplayName: string;\n\tdescription: string;\n\tinstallCount: number;\n\trating: number;\n\tratingCount: number;\n\tassets: IGalleryExtensionAssets;\n\tproperties: IGalleryExtensionProperties;\n\ttelemetryData: any;\n\tpreview: boolean;\n}\n\nexport interface IGalleryMetadata {\n\tid: string;\n\tpublisherId: string;\n\tpublisherDisplayName: string;\n}\n\nexport interface ILocalExtension extends IExtension {\n\treadonly manifest: IExtensionManifest;\n\tmetadata: IGalleryMetadata;\n\treadmeUrl: URI | null;\n\tchangelogUrl: URI | null;\n}\n\nexport const IExtensionManagementService = createDecorator<IExtensionManagementService>('extensionManagementService');\nexport const IExtensionGalleryService = createDecorator<IExtensionGalleryService>('extensionGalleryService');\n\nexport const enum SortBy {\n\tNoneOrRelevance = 0,\n\tLastUpdatedDate = 1,\n\tTitle = 2,\n\tPublisherName = 3,\n\tInstallCount = 4,\n\tPublishedDate = 5,\n\tAverageRating = 6,\n\tWeightedRating = 12\n}\n\nexport const enum SortOrder {\n\tDefault = 0,\n\tAscending = 1,\n\tDescending = 2\n}\n\nexport interface IQueryOptions {\n\ttext?: string;\n\tids?: string[];\n\tnames?: string[];\n\tpageSize?: number;\n\tsortBy?: SortBy;\n\tsortOrder?: SortOrder;\n\tsource?: string;\n}\n\nexport const enum StatisticType {\n\tUninstall = 'uninstall'\n}\n\nexport interface IReportedExtension {\n\tid: IExtensionIdentifier;\n\tmalicious: boolean;\n}\n\nexport const enum InstallOperation {\n\tNone = 0,\n\tInstall,\n\tUpdate\n}\n\nexport interface ITranslation {\n\tcontents: { [key: string]: {} };\n}\n\nexport interface IExtensionGalleryService {\n\t_serviceBrand: any;\n\tisEnabled(): boolean;\n\tquery(token: CancellationToken): Promise<IPager<IGalleryExtension>>;\n\tquery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IGalleryExtension>>;\n\tdownload(extension: IGalleryExtension, operation: InstallOperation): Promise<string>;\n\treportStatistic(publisher: string, name: string, version: string, type: StatisticType): Promise<void>;\n\tgetReadme(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetManifest(extension: IGalleryExtension, token: CancellationToken): Promise<IExtensionManifest | null>;\n\tgetChangelog(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetCoreTranslation(extension: IGalleryExtension, languageId: string): Promise<ITranslation | null>;\n\tgetAllVersions(extension: IGalleryExtension, compatible: boolean): Promise<IGalleryExtensionVersion[]>;\n\tloadAllDependencies(dependencies: IExtensionIdentifier[], token: CancellationToken): Promise<IGalleryExtension[]>;\n\tgetExtensionsReport(): Promise<IReportedExtension[]>;\n\tgetCompatibleExtension(extension: IGalleryExtension): Promise<IGalleryExtension | null>;\n\tgetCompatibleExtension(id: IExtensionIdentifier, version?: string): Promise<IGalleryExtension | null>;\n}\n\nexport interface InstallExtensionEvent {\n\tidentifier: IExtensionIdentifier;\n\tzipPath?: string;\n\tgallery?: IGalleryExtension;\n}\n\nexport interface DidInstallExtensionEvent {\n\tidentifier: IExtensionIdentifier;\n\toperation: InstallOperation;\n\tzipPath?: string;\n\tgallery?: IGalleryExtension;\n\tlocal?: ILocalExtension;\n\terror?: string;\n}\n\nexport interface DidUninstallExtensionEvent {\n\tidentifier: IExtensionIdentifier;\n\terror?: string;\n}\n\nexport const INSTALL_ERROR_MALICIOUS = 'malicious';\nexport const INSTALL_ERROR_INCOMPATIBLE = 'incompatible';\n\nexport interface IExtensionManagementService {\n\t_serviceBrand: any;\n\n\tonInstallExtension: Event<InstallExtensionEvent>;\n\tonDidInstallExtension: Event<DidInstallExtensionEvent>;\n\tonUninstallExtension: Event<IExtensionIdentifier>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\n\tzip(extension: ILocalExtension): Promise<URI>;\n\tunzip(zipLocation: URI, type: ExtensionType): Promise<IExtensionIdentifier>;\n\tinstall(vsix: URI): Promise<IExtensionIdentifier>;\n\tinstallFromGallery(extension: IGalleryExtension): Promise<void>;\n\tuninstall(extension: ILocalExtension, force?: boolean): Promise<void>;\n\treinstallFromGallery(extension: ILocalExtension): Promise<void>;\n\tgetInstalled(type?: ExtensionType): Promise<ILocalExtension[]>;\n\tgetExtensionsReport(): Promise<IReportedExtension[]>;\n\n\tupdateMetadata(local: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension>;\n}\n\nexport const IExtensionManagementServerService = createDecorator<IExtensionManagementServerService>('extensionManagementServerService');\n\nexport interface IExtensionManagementServer {\n\textensionManagementService: IExtensionManagementService;\n\tauthority: string;\n\tlabel: string;\n}\n\nexport interface IExtensionManagementServerService {\n\t_serviceBrand: any;\n\treadonly localExtensionManagementServer: IExtensionManagementServer;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null;\n\tgetExtensionManagementServer(location: URI): IExtensionManagementServer | null;\n}\n\nexport const enum EnablementState {\n\tDisabled,\n\tWorkspaceDisabled,\n\tEnabled,\n\tWorkspaceEnabled\n}\n\nexport const IExtensionEnablementService = createDecorator<IExtensionEnablementService>('extensionEnablementService');\n\nexport interface IExtensionEnablementService {\n\t_serviceBrand: any;\n\n\treadonly allUserExtensionsDisabled: boolean;\n\n\t/**\n\t * Event to listen on for extension enablement changes\n\t */\n\tonEnablementChanged: Event<IExtension[]>;\n\n\t/**\n\t * Returns all disabled extension identifiers for current workspace\n\t * Returns an empty array if none exist\n\t */\n\tgetDisabledExtensions(): Promise<IExtensionIdentifier[]>;\n\n\t/**\n\t * Returns the enablement state for the given extension\n\t */\n\tgetEnablementState(extension: IExtension): EnablementState;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is enabled.\n\t */\n\tisEnabled(extension: IExtension): boolean;\n\n\t/**\n\t * Enable or disable the given extension.\n\t * if `workspace` is `true` then enablement is done for workspace, otherwise globally.\n\t *\n\t * Returns a promise that resolves to boolean value.\n\t * if resolves to `true` then requires restart for the change to take effect.\n\t *\n\t * Throws error if enablement is requested for workspace and there is no workspace\n\t */\n\tsetEnablement(extensions: IExtension[], state: EnablementState): Promise<boolean[]>;\n}\n\nexport interface IExtensionsConfigContent {\n\trecommendations: string[];\n\tunwantedRecommendations: string[];\n}\n\nexport type RecommendationChangeNotification = {\n\textensionId: string,\n\tisRecommended: boolean\n};\n\nexport type DynamicRecommendation = 'dynamic';\nexport type ExecutableRecommendation = 'executable';\nexport type CachedRecommendation = 'cached';\nexport type ApplicationRecommendation = 'application';\nexport type ExtensionRecommendationSource = IWorkspace | IWorkspaceFolder | URI | DynamicRecommendation | ExecutableRecommendation | CachedRecommendation | ApplicationRecommendation;\n\nexport interface IExtensionRecommendation {\n\textensionId: string;\n\tsources: ExtensionRecommendationSource[];\n}\n\nexport const IExtensionTipsService = createDecorator<IExtensionTipsService>('extensionTipsService');\n\nexport interface IExtensionTipsService {\n\t_serviceBrand: any;\n\tgetAllRecommendationsWithReason(): { [id: string]: { reasonId: ExtensionRecommendationReason, reasonText: string }; };\n\tgetFileBasedRecommendations(): IExtensionRecommendation[];\n\tgetOtherRecommendations(): Promise<IExtensionRecommendation[]>;\n\tgetWorkspaceRecommendations(): Promise<IExtensionRecommendation[]>;\n\tgetKeymapRecommendations(): IExtensionRecommendation[];\n\ttoggleIgnoredRecommendation(extensionId: string, shouldIgnore: boolean): void;\n\tgetAllIgnoredRecommendations(): { global: string[], workspace: string[] };\n\tonRecommendationChange: Event<RecommendationChangeNotification>;\n}\n\nexport const enum ExtensionRecommendationReason {\n\tWorkspace,\n\tFile,\n\tExecutable,\n\tDynamicWorkspace,\n\tExperimental\n}\n\nexport const ExtensionsLabel = localize('extensions', \"Extensions\");\nexport const ExtensionsChannelId = 'extensions';\nexport const PreferencesLabel = localize('preferences', \"Preferences\");\n"]}]}