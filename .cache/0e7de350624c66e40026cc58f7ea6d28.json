{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextViewService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextViewService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar contextview_1 = require(\"vs/base/browser/ui/contextview/contextview\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar layoutService_1 = require(\"vs/platform/layout/browser/layoutService\");\nvar ContextViewService = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextViewService, _super);\n    function ContextViewService(layoutService) {\n        var _this = _super.call(this) || this;\n        _this.layoutService = layoutService;\n        _this.contextView = _this._register(new contextview_1.ContextView(layoutService.container));\n        _this.layout();\n        _this._register(layoutService.onLayout(function () { return _this.layout(); }));\n        return _this;\n    }\n    // ContextView\n    ContextViewService.prototype.setContainer = function (container) {\n        this.contextView.setContainer(container);\n    };\n    ContextViewService.prototype.showContextView = function (delegate) {\n        this.contextView.show(delegate);\n    };\n    ContextViewService.prototype.layout = function () {\n        this.contextView.layout();\n    };\n    ContextViewService.prototype.hideContextView = function (data) {\n        this.contextView.hide(data);\n    };\n    ContextViewService = tslib_1.__decorate([\n        tslib_1.__param(0, layoutService_1.ILayoutService)\n    ], ContextViewService);\n    return ContextViewService;\n}(lifecycle_1.Disposable));\nexports.ContextViewService = ContextViewService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextViewService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextViewService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,0EAAyE;AACzE,sDAAsD;AACtD,0EAA0E;AAE1E;IAAwC,8CAAU;IAKjD,4BAC0B,aAA6B;QADvD,YAGC,iBAAO,SAMP;QARyB,mBAAa,GAAb,aAAa,CAAgB;QAItD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,yBAAW,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5E,KAAI,CAAC,MAAM,EAAE,CAAC;QAEd,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAC,CAAC;;IAC7D,CAAC;IAED,cAAc;IAEd,yCAAY,GAAZ,UAAa,SAAsB;QAClC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED,4CAAe,GAAf,UAAgB,QAA8B;QAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,mCAAM,GAAN;QACC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAED,4CAAe,GAAf,UAAgB,IAAU;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAhCW,kBAAkB;QAM5B,mBAAA,8BAAc,CAAA;OANJ,kBAAkB,CAiC9B;IAAD,yBAAC;CAAA,AAjCD,CAAwC,sBAAU,GAiCjD;AAjCY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContextViewService, IContextViewDelegate } from './contextView';\nimport { ContextView } from 'vs/base/browser/ui/contextview/contextview';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\n\nexport class ContextViewService extends Disposable implements IContextViewService {\n\t_serviceBrand: any;\n\n\tprivate contextView: ContextView;\n\n\tconstructor(\n\t\t@ILayoutService readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.contextView = this._register(new ContextView(layoutService.container));\n\t\tthis.layout();\n\n\t\tthis._register(layoutService.onLayout(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tsetContainer(container: HTMLElement): void {\n\t\tthis.contextView.setContainer(container);\n\t}\n\n\tshowContextView(delegate: IContextViewDelegate): void {\n\t\tthis.contextView.show(delegate);\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t}\n}"]}]}