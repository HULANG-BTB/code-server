{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/browser/preferencesService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/browser/preferencesService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar json_1 = require(\"vs/base/common/json\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar network = require(\"vs/base/common/network\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar strings = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar nls = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar jsonEditing_1 = require(\"vs/workbench/services/configuration/common/jsonEditing\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar preferencesEditorInput_1 = require(\"vs/workbench/services/preferences/common/preferencesEditorInput\");\nvar preferencesModels_1 = require(\"vs/workbench/services/preferences/common/preferencesModels\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar emptyEditableSettingsContent = '{\\n}';\nvar PreferencesService = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesService, _super);\n    function PreferencesService(editorService, editorGroupService, fileService, configurationService, notificationService, contextService, instantiationService, environmentService, telemetryService, textModelResolverService, keybindingService, modelService, jsonEditingService, modeService, labelService, remoteAgentService) {\n        var _this = _super.call(this) || this;\n        _this.editorService = editorService;\n        _this.editorGroupService = editorGroupService;\n        _this.fileService = fileService;\n        _this.configurationService = configurationService;\n        _this.notificationService = notificationService;\n        _this.contextService = contextService;\n        _this.instantiationService = instantiationService;\n        _this.environmentService = environmentService;\n        _this.telemetryService = telemetryService;\n        _this.textModelResolverService = textModelResolverService;\n        _this.modelService = modelService;\n        _this.jsonEditingService = jsonEditingService;\n        _this.modeService = modeService;\n        _this.labelService = labelService;\n        _this.remoteAgentService = remoteAgentService;\n        _this.lastOpenedSettingsInput = null;\n        _this._onDispose = _this._register(new event_1.Emitter());\n        _this._defaultUserSettingsUriCounter = 0;\n        _this._defaultWorkspaceSettingsUriCounter = 0;\n        _this._defaultFolderSettingsUriCounter = 0;\n        _this.defaultKeybindingsResource = uri_1.URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });\n        _this.defaultSettingsRawResource = uri_1.URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' });\n        // The default keybindings.json updates based on keyboard layouts, so here we make sure\n        // if a model has been given out we update it accordingly.\n        _this._register(keybindingService.onDidUpdateKeybindings(function () {\n            var model = modelService.getModel(_this.defaultKeybindingsResource);\n            if (!model) {\n                // model has not been given out => nothing to do\n                return;\n            }\n            modelService.updateModel(model, preferencesModels_1.defaultKeybindingsContents(keybindingService));\n        }));\n        return _this;\n    }\n    Object.defineProperty(PreferencesService.prototype, \"userSettingsResource\", {\n        get: function () {\n            return this.getEditableSettingsURI(configuration_1.ConfigurationTarget.USER);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesService.prototype, \"workspaceSettingsResource\", {\n        get: function () {\n            return this.getEditableSettingsURI(configuration_1.ConfigurationTarget.WORKSPACE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesService.prototype, \"settingsEditor2Input\", {\n        get: function () {\n            return this.instantiationService.createInstance(preferencesEditorInput_1.SettingsEditor2Input);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PreferencesService.prototype.getFolderSettingsResource = function (resource) {\n        return this.getEditableSettingsURI(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, resource);\n    };\n    PreferencesService.prototype.resolveModel = function (uri) {\n        var _this = this;\n        if (this.isDefaultSettingsResource(uri)) {\n            var target_1 = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n            var languageSelection = this.modeService.create('jsonc');\n            var model = this._register(this.modelService.createModel('', languageSelection, uri));\n            var defaultSettings_1;\n            this.configurationService.onDidChangeConfiguration(function (e) {\n                if (e.source === configuration_1.ConfigurationTarget.DEFAULT) {\n                    var model_1 = _this.modelService.getModel(uri);\n                    if (!model_1) {\n                        // model has not been given out => nothing to do\n                        return;\n                    }\n                    defaultSettings_1 = _this.getDefaultSettings(target_1);\n                    _this.modelService.updateModel(model_1, defaultSettings_1.getContent(true));\n                    defaultSettings_1._onDidChange.fire();\n                }\n            });\n            // Check if Default settings is already created and updated in above promise\n            if (!defaultSettings_1) {\n                defaultSettings_1 = this.getDefaultSettings(target_1);\n                this.modelService.updateModel(model, defaultSettings_1.getContent(true));\n            }\n            return Promise.resolve(model);\n        }\n        if (this.defaultSettingsRawResource.toString() === uri.toString()) {\n            var defaultRawSettingsEditorModel = this.instantiationService.createInstance(preferencesModels_1.DefaultRawSettingsEditorModel, this.getDefaultSettings(configuration_1.ConfigurationTarget.USER));\n            var languageSelection = this.modeService.create('jsonc');\n            var model = this._register(this.modelService.createModel(defaultRawSettingsEditorModel.content, languageSelection, uri));\n            return Promise.resolve(model);\n        }\n        if (this.defaultKeybindingsResource.toString() === uri.toString()) {\n            var defaultKeybindingsEditorModel = this.instantiationService.createInstance(preferencesModels_1.DefaultKeybindingsEditorModel, uri);\n            var languageSelection = this.modeService.create('jsonc');\n            var model = this._register(this.modelService.createModel(defaultKeybindingsEditorModel.content, languageSelection, uri));\n            return Promise.resolve(model);\n        }\n        return Promise.resolve(null);\n    };\n    PreferencesService.prototype.createPreferencesEditorModel = function (uri) {\n        if (this.isDefaultSettingsResource(uri)) {\n            return this.createDefaultSettingsEditorModel(uri);\n        }\n        if (this.userSettingsResource.toString() === uri.toString()) {\n            return this.createEditableSettingsEditorModel(configuration_1.ConfigurationTarget.USER, uri);\n        }\n        var workspaceSettingsUri = this.getEditableSettingsURI(configuration_1.ConfigurationTarget.WORKSPACE);\n        if (workspaceSettingsUri && workspaceSettingsUri.toString() === uri.toString()) {\n            return this.createEditableSettingsEditorModel(configuration_1.ConfigurationTarget.WORKSPACE, workspaceSettingsUri);\n        }\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            return this.createEditableSettingsEditorModel(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, uri);\n        }\n        return Promise.reject(\"unknown resource: \" + uri.toString());\n    };\n    PreferencesService.prototype.openRawDefaultSettings = function () {\n        return this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n    };\n    PreferencesService.prototype.openRawUserSettings = function () {\n        return this.editorService.openEditor({ resource: this.userSettingsResource });\n    };\n    PreferencesService.prototype.openSettings = function (jsonEditor) {\n        jsonEditor = typeof jsonEditor === 'undefined' ?\n            this.configurationService.getValue('workbench.settings.editor') === 'json' :\n            jsonEditor;\n        if (!jsonEditor) {\n            return this.openSettings2();\n        }\n        var editorInput = this.getActiveSettingsEditorInput() || this.lastOpenedSettingsInput;\n        var resource = editorInput ? editorInput.master.getResource() : this.userSettingsResource;\n        var target = this.getConfigurationTargetFromSettingsResource(resource);\n        return this.openOrSwitchSettings(target, resource);\n    };\n    PreferencesService.prototype.openSettings2 = function () {\n        var _this = this;\n        var input = this.settingsEditor2Input;\n        return this.editorGroupService.activeGroup.openEditor(input)\n            .then(function () { return _this.editorGroupService.activeGroup.activeControl; });\n    };\n    PreferencesService.prototype.openGlobalSettings = function (jsonEditor, options, group) {\n        jsonEditor = typeof jsonEditor === 'undefined' ?\n            this.configurationService.getValue('workbench.settings.editor') === 'json' :\n            jsonEditor;\n        return jsonEditor ?\n            this.openOrSwitchSettings(configuration_1.ConfigurationTarget.USER, this.userSettingsResource, options, group) :\n            this.openOrSwitchSettings2(configuration_1.ConfigurationTarget.USER, undefined, options, group);\n    };\n    PreferencesService.prototype.openRemoteSettings = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var environemnt;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.remoteAgentService.getEnvironment()];\n                    case 1:\n                        environemnt = _a.sent();\n                        if (!environemnt) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.createIfNotExists(environemnt.appSettingsPath, emptyEditableSettingsContent)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, this.editorService.openEditor({ resource: environemnt.appSettingsPath, options: { pinned: true, revealIfOpened: true } })];\n                    case 3: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    PreferencesService.prototype.openWorkspaceSettings = function (jsonEditor, options, group) {\n        jsonEditor = typeof jsonEditor === 'undefined' ?\n            this.configurationService.getValue('workbench.settings.editor') === 'json' :\n            jsonEditor;\n        if (!this.workspaceSettingsResource) {\n            this.notificationService.info(nls.localize('openFolderFirst', \"Open a folder first to create workspace settings\"));\n            return Promise.reject(null);\n        }\n        return jsonEditor ?\n            this.openOrSwitchSettings(configuration_1.ConfigurationTarget.WORKSPACE, this.workspaceSettingsResource, options, group) :\n            this.openOrSwitchSettings2(configuration_1.ConfigurationTarget.WORKSPACE, undefined, options, group);\n    };\n    PreferencesService.prototype.openFolderSettings = function (folder, jsonEditor, options, group) {\n        jsonEditor = typeof jsonEditor === 'undefined' ?\n            this.configurationService.getValue('workbench.settings.editor') === 'json' :\n            jsonEditor;\n        var folderSettingsUri = this.getEditableSettingsURI(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, folder);\n        if (jsonEditor) {\n            if (folderSettingsUri) {\n                return this.openOrSwitchSettings(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, folderSettingsUri, options, group);\n            }\n            return Promise.reject(\"Invalid folder URI - \" + folder.toString());\n        }\n        return this.openOrSwitchSettings2(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, folder, options, group);\n    };\n    PreferencesService.prototype.switchSettings = function (target, resource, jsonEditor) {\n        if (!jsonEditor) {\n            return this.doOpenSettings2(target, resource).then(function () { return undefined; });\n        }\n        var activeControl = this.editorService.activeControl;\n        if (activeControl && activeControl.input instanceof preferencesEditorInput_1.PreferencesEditorInput) {\n            return this.doSwitchSettings(target, resource, activeControl.input, activeControl.group).then(function () { return undefined; });\n        }\n        else {\n            return this.doOpenSettings(target, resource).then(function () { return undefined; });\n        }\n    };\n    PreferencesService.prototype.openGlobalKeybindingSettings = function (textual) {\n        var _this = this;\n        /* __GDPR__\n            \"openKeybindings\" : {\n                \"textual\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        this.telemetryService.publicLog('openKeybindings', { textual: textual });\n        if (textual) {\n            var emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + '\\n[\\n]';\n            var editableKeybindings_1 = uri_1.URI.file(this.environmentService.appKeybindingsPath);\n            var openDefaultKeybindings_1 = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n            // Create as needed and open in editor\n            return this.createIfNotExists(editableKeybindings_1, emptyContents).then(function () {\n                if (openDefaultKeybindings_1) {\n                    var activeEditorGroup = _this.editorGroupService.activeGroup;\n                    var sideEditorGroup = _this.editorGroupService.addGroup(activeEditorGroup.id, editorGroupsService_1.GroupDirection.RIGHT);\n                    return Promise.all([\n                        _this.editorService.openEditor({ resource: _this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true }, label: nls.localize('defaultKeybindings', \"Default Keybindings\"), description: '' }),\n                        _this.editorService.openEditor({ resource: editableKeybindings_1, options: { pinned: true, revealIfOpened: true } }, sideEditorGroup.id)\n                    ]).then(function (editors) { return undefined; });\n                }\n                else {\n                    return _this.editorService.openEditor({ resource: editableKeybindings_1, options: { pinned: true, revealIfOpened: true } }).then(function () { return undefined; });\n                }\n            });\n        }\n        return this.editorService.openEditor(this.instantiationService.createInstance(preferencesEditorInput_1.KeybindingsEditorInput), { pinned: true, revealIfOpened: true }).then(function () { return undefined; });\n    };\n    PreferencesService.prototype.openDefaultKeybindingsFile = function () {\n        return this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', \"Default Keybindings\") });\n    };\n    PreferencesService.prototype.configureSettingsForLanguage = function (language) {\n        var _this = this;\n        this.openGlobalSettings(true)\n            .then(function (editor) { return _this.createPreferencesEditorModel(_this.userSettingsResource)\n            .then(function (settingsModel) {\n            var codeEditor = editor ? editorBrowser_1.getCodeEditor(editor.getControl()) : null;\n            if (codeEditor) {\n                _this.addLanguageOverrideEntry(language, settingsModel, codeEditor)\n                    .then(function (position) {\n                    if (codeEditor && position) {\n                        codeEditor.setPosition(position);\n                        codeEditor.revealLine(position.lineNumber);\n                        codeEditor.focus();\n                    }\n                });\n            }\n        }); });\n    };\n    PreferencesService.prototype.openOrSwitchSettings = function (configurationTarget, resource, options, group) {\n        if (group === void 0) { group = this.editorGroupService.activeGroup; }\n        var editorInput = this.getActiveSettingsEditorInput(group);\n        if (editorInput) {\n            var editorInputResource = editorInput.master.getResource();\n            if (editorInputResource && editorInputResource.fsPath !== resource.fsPath) {\n                return this.doSwitchSettings(configurationTarget, resource, editorInput, group, options);\n            }\n        }\n        return this.doOpenSettings(configurationTarget, resource, options, group);\n    };\n    PreferencesService.prototype.openOrSwitchSettings2 = function (configurationTarget, folderUri, options, group) {\n        if (group === void 0) { group = this.editorGroupService.activeGroup; }\n        return this.doOpenSettings2(configurationTarget, folderUri, options, group);\n    };\n    PreferencesService.prototype.doOpenSettings = function (configurationTarget, resource, options, group) {\n        var _this = this;\n        var openSplitJSON = !!this.configurationService.getValue(preferences_1.USE_SPLIT_JSON_SETTING);\n        if (openSplitJSON) {\n            return this.doOpenSplitJSON(configurationTarget, resource, options, group);\n        }\n        var openDefaultSettings = !!this.configurationService.getValue(preferences_1.DEFAULT_SETTINGS_EDITOR_SETTING);\n        return this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n            .then(function (editableSettingsEditorInput) {\n            if (!options) {\n                options = { pinned: true };\n            }\n            else {\n                options = objects_1.assign(options, { pinned: true });\n            }\n            if (openDefaultSettings) {\n                var activeEditorGroup = _this.editorGroupService.activeGroup;\n                var sideEditorGroup = _this.editorGroupService.addGroup(activeEditorGroup.id, editorGroupsService_1.GroupDirection.RIGHT);\n                return Promise.all([\n                    _this.editorService.openEditor({ resource: _this.defaultSettingsRawResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true }, label: nls.localize('defaultSettings', \"Default Settings\"), description: '' }),\n                    _this.editorService.openEditor(editableSettingsEditorInput, { pinned: true, revealIfOpened: true }, sideEditorGroup.id)\n                ]).then(function (_a) {\n                    var defaultEditor = _a[0], editor = _a[1];\n                    return editor;\n                });\n            }\n            else {\n                return _this.editorService.openEditor(editableSettingsEditorInput, preferences_1.SettingsEditorOptions.create(options), group);\n            }\n        });\n    };\n    PreferencesService.prototype.doOpenSplitJSON = function (configurationTarget, resource, options, group) {\n        var _this = this;\n        return this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n            .then(function (editableSettingsEditorInput) {\n            if (!options) {\n                options = { pinned: true };\n            }\n            else {\n                options = objects_1.assign(options, { pinned: true });\n            }\n            var defaultPreferencesEditorInput = _this.instantiationService.createInstance(preferencesEditorInput_1.DefaultPreferencesEditorInput, _this.getDefaultSettingsResource(configurationTarget));\n            var preferencesEditorInput = new preferencesEditorInput_1.PreferencesEditorInput(_this.getPreferencesEditorInputName(configurationTarget, resource), editableSettingsEditorInput.getDescription(), defaultPreferencesEditorInput, editableSettingsEditorInput);\n            _this.lastOpenedSettingsInput = preferencesEditorInput;\n            return _this.editorService.openEditor(preferencesEditorInput, preferences_1.SettingsEditorOptions.create(options), group);\n        });\n    };\n    PreferencesService.prototype.createSettings2EditorModel = function () {\n        return this.instantiationService.createInstance(preferencesModels_1.Settings2EditorModel, this.getDefaultSettings(configuration_1.ConfigurationTarget.USER));\n    };\n    PreferencesService.prototype.doOpenSettings2 = function (target, folderUri, options, group) {\n        var input = this.settingsEditor2Input;\n        var settingsOptions = tslib_1.__assign({}, options, { target: target,\n            folderUri: folderUri });\n        return this.editorService.openEditor(input, preferences_1.SettingsEditorOptions.create(settingsOptions), group);\n    };\n    PreferencesService.prototype.doSwitchSettings = function (target, resource, input, group, options) {\n        var _this = this;\n        var settingsURI = this.getEditableSettingsURI(target, resource);\n        if (!settingsURI) {\n            return Promise.reject(\"Invalid settings URI - \" + resource.toString());\n        }\n        return this.getOrCreateEditableSettingsEditorInput(target, settingsURI)\n            .then(function (toInput) {\n            return group.openEditor(input).then(function () {\n                var replaceWith = new preferencesEditorInput_1.PreferencesEditorInput(_this.getPreferencesEditorInputName(target, resource), toInput.getDescription(), _this.instantiationService.createInstance(preferencesEditorInput_1.DefaultPreferencesEditorInput, _this.getDefaultSettingsResource(target)), toInput);\n                return group.replaceEditors([{\n                        editor: input,\n                        replacement: replaceWith,\n                        options: options ? preferences_1.SettingsEditorOptions.create(options) : undefined\n                    }]).then(function () {\n                    _this.lastOpenedSettingsInput = replaceWith;\n                    return group.activeControl;\n                });\n            });\n        });\n    };\n    PreferencesService.prototype.getActiveSettingsEditorInput = function (group) {\n        if (group === void 0) { group = this.editorGroupService.activeGroup; }\n        return group.editors.filter(function (e) { return e instanceof preferencesEditorInput_1.PreferencesEditorInput; })[0];\n    };\n    PreferencesService.prototype.getConfigurationTargetFromSettingsResource = function (resource) {\n        if (this.userSettingsResource.toString() === resource.toString()) {\n            return configuration_1.ConfigurationTarget.USER;\n        }\n        var workspaceSettingsResource = this.workspaceSettingsResource;\n        if (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {\n            return configuration_1.ConfigurationTarget.WORKSPACE;\n        }\n        var folder = this.contextService.getWorkspaceFolder(resource);\n        if (folder) {\n            return configuration_1.ConfigurationTarget.WORKSPACE_FOLDER;\n        }\n        return configuration_1.ConfigurationTarget.USER;\n    };\n    PreferencesService.prototype.getConfigurationTargetFromDefaultSettingsResource = function (uri) {\n        return this.isDefaultWorkspaceSettingsResource(uri) ? configuration_1.ConfigurationTarget.WORKSPACE : this.isDefaultFolderSettingsResource(uri) ? configuration_1.ConfigurationTarget.WORKSPACE_FOLDER : configuration_1.ConfigurationTarget.USER;\n    };\n    PreferencesService.prototype.isDefaultSettingsResource = function (uri) {\n        return this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n    };\n    PreferencesService.prototype.isDefaultUserSettingsResource = function (uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n    };\n    PreferencesService.prototype.isDefaultWorkspaceSettingsResource = function (uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n    };\n    PreferencesService.prototype.isDefaultFolderSettingsResource = function (uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n    };\n    PreferencesService.prototype.getDefaultSettingsResource = function (configurationTarget) {\n        switch (configurationTarget) {\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                return uri_1.URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: \"/\" + this._defaultWorkspaceSettingsUriCounter++ + \"/workspaceSettings.json\" });\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                return uri_1.URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: \"/\" + this._defaultFolderSettingsUriCounter++ + \"/resourceSettings.json\" });\n        }\n        return uri_1.URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: \"/\" + this._defaultUserSettingsUriCounter++ + \"/settings.json\" });\n    };\n    PreferencesService.prototype.getPreferencesEditorInputName = function (target, resource) {\n        var name = preferences_1.getSettingsTargetName(target, resource, this.contextService);\n        return target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER ? nls.localize('folderSettingsName', \"{0} (Folder Settings)\", name) : name;\n    };\n    PreferencesService.prototype.getOrCreateEditableSettingsEditorInput = function (target, resource) {\n        var _this = this;\n        return this.createSettingsIfNotExists(target, resource)\n            .then(function () { return _this.editorService.createInput({ resource: resource }); });\n    };\n    PreferencesService.prototype.createEditableSettingsEditorModel = function (configurationTarget, resource) {\n        var _this = this;\n        var settingsUri = this.getEditableSettingsURI(configurationTarget, resource);\n        if (settingsUri) {\n            var workspace = this.contextService.getWorkspace();\n            if (workspace.configuration && workspace.configuration.toString() === settingsUri.toString()) {\n                return this.textModelResolverService.createModelReference(settingsUri)\n                    .then(function (reference) { return _this.instantiationService.createInstance(preferencesModels_1.WorkspaceConfigurationEditorModel, reference, configurationTarget); });\n            }\n            return this.textModelResolverService.createModelReference(settingsUri)\n                .then(function (reference) { return _this.instantiationService.createInstance(preferencesModels_1.SettingsEditorModel, reference, configurationTarget); });\n        }\n        return Promise.reject(\"unknown target: \" + configurationTarget + \" and resource: \" + resource.toString());\n    };\n    PreferencesService.prototype.createDefaultSettingsEditorModel = function (defaultSettingsUri) {\n        var _this = this;\n        return this.textModelResolverService.createModelReference(defaultSettingsUri)\n            .then(function (reference) {\n            var target = _this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n            return _this.instantiationService.createInstance(preferencesModels_1.DefaultSettingsEditorModel, defaultSettingsUri, reference, _this.getDefaultSettings(target));\n        });\n    };\n    PreferencesService.prototype.getDefaultSettings = function (target) {\n        if (target === configuration_1.ConfigurationTarget.WORKSPACE) {\n            if (!this._defaultWorkspaceSettingsContentModel) {\n                this._defaultWorkspaceSettingsContentModel = new preferencesModels_1.DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n            }\n            return this._defaultWorkspaceSettingsContentModel;\n        }\n        if (target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n            if (!this._defaultFolderSettingsContentModel) {\n                this._defaultFolderSettingsContentModel = new preferencesModels_1.DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n            }\n            return this._defaultFolderSettingsContentModel;\n        }\n        if (!this._defaultUserSettingsContentModel) {\n            this._defaultUserSettingsContentModel = new preferencesModels_1.DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n        }\n        return this._defaultUserSettingsContentModel;\n    };\n    PreferencesService.prototype.getEditableSettingsURI = function (configurationTarget, resource) {\n        switch (configurationTarget) {\n            case configuration_1.ConfigurationTarget.USER:\n                return uri_1.URI.file(this.environmentService.appSettingsPath);\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n                    return null;\n                }\n                var workspace = this.contextService.getWorkspace();\n                return workspace.configuration || workspace.folders[0].toResource(preferences_1.FOLDER_SETTINGS_PATH);\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                if (resource) {\n                    var folder = this.contextService.getWorkspaceFolder(resource);\n                    return folder ? folder.toResource(preferences_1.FOLDER_SETTINGS_PATH) : null;\n                }\n        }\n        return null;\n    };\n    PreferencesService.prototype.createSettingsIfNotExists = function (target, resource) {\n        var _this = this;\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE && target === configuration_1.ConfigurationTarget.WORKSPACE) {\n            var workspaceConfig = this.contextService.getWorkspace().configuration;\n            if (!workspaceConfig) {\n                return Promise.resolve(undefined);\n            }\n            return this.fileService.resolveContent(workspaceConfig)\n                .then(function (content) {\n                if (Object.keys(json_1.parse(content.value)).indexOf('settings') === -1) {\n                    return _this.jsonEditingService.write(resource, { key: 'settings', value: {} }, true).then(undefined, function () { });\n                }\n                return undefined;\n            });\n        }\n        return this.createIfNotExists(resource, emptyEditableSettingsContent).then(function () { });\n    };\n    PreferencesService.prototype.createIfNotExists = function (resource, contents) {\n        var _this = this;\n        return this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(undefined, function (error) {\n            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_FOUND) {\n                return _this.fileService.updateContent(resource, contents).then(undefined, function (error) {\n                    return Promise.reject(new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", _this.labelService.getUriLabel(resource, { relative: true }), error)));\n                });\n            }\n            return Promise.reject(error);\n        });\n    };\n    PreferencesService.prototype.getMostCommonlyUsedSettings = function () {\n        return [\n            'files.autoSave',\n            'editor.fontSize',\n            'editor.fontFamily',\n            'editor.tabSize',\n            'editor.renderWhitespace',\n            'editor.cursorStyle',\n            'editor.multiCursorModifier',\n            'editor.insertSpaces',\n            'editor.wordWrap',\n            'files.exclude',\n            'files.associations'\n        ];\n    };\n    PreferencesService.prototype.addLanguageOverrideEntry = function (language, settingsModel, codeEditor) {\n        var _this = this;\n        var languageKey = \"[\" + language + \"]\";\n        var setting = settingsModel.getPreference(languageKey);\n        var model = codeEditor.getModel();\n        if (model) {\n            var configuration_2 = this.configurationService.getValue();\n            var eol_1 = model.getEOL();\n            if (setting) {\n                if (setting.overrides && setting.overrides.length) {\n                    var lastSetting = setting.overrides[setting.overrides.length - 1];\n                    return Promise.resolve({ lineNumber: lastSetting.valueRange.endLineNumber, column: model.getLineMaxColumn(lastSetting.valueRange.endLineNumber) });\n                }\n                return Promise.resolve({ lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 });\n            }\n            return this.configurationService.updateValue(languageKey, {}, configuration_1.ConfigurationTarget.USER)\n                .then(function () {\n                setting = settingsModel.getPreference(languageKey);\n                if (setting) {\n                    var content = eol_1 + _this.spaces(2, configuration_2.editor) + eol_1 + _this.spaces(1, configuration_2.editor);\n                    var editOperation = editOperation_1.EditOperation.insert(new position_1.Position(setting.valueRange.endLineNumber, setting.valueRange.endColumn - 1), content);\n                    model.pushEditOperations([], [editOperation], function () { return []; });\n                    var lineNumber = setting.valueRange.endLineNumber + 1;\n                    settingsModel.dispose();\n                    return { lineNumber: lineNumber, column: model.getLineMaxColumn(lineNumber) };\n                }\n                return null;\n            });\n        }\n        return Promise.resolve(null);\n    };\n    PreferencesService.prototype.spaces = function (count, _a) {\n        var tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        return insertSpaces ? strings.repeat(' ', tabSize * count) : strings.repeat('\\t', count);\n    };\n    PreferencesService.prototype.dispose = function () {\n        this._onDispose.fire();\n        _super.prototype.dispose.call(this);\n    };\n    PreferencesService = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(2, files_1.IFileService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, notification_1.INotificationService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, instantiation_1.IInstantiationService),\n        tslib_1.__param(7, environment_1.IEnvironmentService),\n        tslib_1.__param(8, telemetry_1.ITelemetryService),\n        tslib_1.__param(9, resolverService_1.ITextModelService),\n        tslib_1.__param(10, keybinding_1.IKeybindingService),\n        tslib_1.__param(11, modelService_1.IModelService),\n        tslib_1.__param(12, jsonEditing_1.IJSONEditingService),\n        tslib_1.__param(13, modeService_1.IModeService),\n        tslib_1.__param(14, label_1.ILabelService),\n        tslib_1.__param(15, remoteAgentService_1.IRemoteAgentService)\n    ], PreferencesService);\n    return PreferencesService;\n}(lifecycle_1.Disposable));\nexports.PreferencesService = PreferencesService;\nextensions_1.registerSingleton(preferences_1.IPreferencesService, PreferencesService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/browser/preferencesService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/browser/preferencesService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as network from 'vs/base/common/network';\nimport { assign } from 'vs/base/common/objects';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { getCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { EditorInput, IEditor } from 'vs/workbench/common/editor';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { GroupDirection, IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, getSettingsTargetName, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, SettingsEditorOptions, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';\nimport { DefaultPreferencesEditorInput, KeybindingsEditorInput, PreferencesEditorInput, SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\nimport { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel, DefaultRawSettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nconst emptyEditableSettingsContent = '{\\n}';\n\nexport class PreferencesService extends Disposable implements IPreferencesService {\n\n\t_serviceBrand: any;\n\n\tprivate lastOpenedSettingsInput: PreferencesEditorInput | null = null;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\n\tprivate _defaultUserSettingsUriCounter = 0;\n\tprivate _defaultUserSettingsContentModel: DefaultSettings;\n\tprivate _defaultWorkspaceSettingsUriCounter = 0;\n\tprivate _defaultWorkspaceSettingsContentModel: DefaultSettings;\n\tprivate _defaultFolderSettingsUriCounter = 0;\n\tprivate _defaultFolderSettingsContentModel: DefaultSettings;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\t\t// The default keybindings.json updates based on keyboard layouts, so here we make sure\n\t\t// if a model has been given out we update it accordingly.\n\t\tthis._register(keybindingService.onDidUpdateKeybindings(() => {\n\t\t\tconst model = modelService.getModel(this.defaultKeybindingsResource);\n\t\t\tif (!model) {\n\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelService.updateModel(model, defaultKeybindingsContents(keybindingService));\n\t\t}));\n\t}\n\n\treadonly defaultKeybindingsResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });\n\tprivate readonly defaultSettingsRawResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' });\n\n\tget userSettingsResource(): URI {\n\t\treturn this.getEditableSettingsURI(ConfigurationTarget.USER)!;\n\t}\n\n\tget workspaceSettingsResource(): URI | null {\n\t\treturn this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);\n\t}\n\n\tget settingsEditor2Input(): SettingsEditor2Input {\n\t\treturn this.instantiationService.createInstance(SettingsEditor2Input);\n\t}\n\n\tgetFolderSettingsResource(resource: URI): URI | null {\n\t\treturn this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, resource);\n\t}\n\n\tresolveModel(uri: URI): Promise<ITextModel | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\n\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel('', languageSelection, uri));\n\n\t\t\tlet defaultSettings: DefaultSettings | undefined;\n\t\t\tthis.configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t\tconst model = this.modelService.getModel(uri);\n\t\t\t\t\tif (!model) {\n\t\t\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContent(true));\n\t\t\t\t\tdefaultSettings._onDidChange.fire();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if Default settings is already created and updated in above promise\n\t\t\tif (!defaultSettings) {\n\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContent(true));\n\t\t\t}\n\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\tif (this.defaultSettingsRawResource.toString() === uri.toString()) {\n\t\t\tconst defaultRawSettingsEditorModel = this.instantiationService.createInstance(DefaultRawSettingsEditorModel, this.getDefaultSettings(ConfigurationTarget.USER));\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultRawSettingsEditorModel.content, languageSelection, uri));\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\tif (this.defaultKeybindingsResource.toString() === uri.toString()) {\n\t\t\tconst defaultKeybindingsEditorModel = this.instantiationService.createInstance(DefaultKeybindingsEditorModel, uri);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultKeybindingsEditorModel.content, languageSelection, uri));\n\t\t\treturn Promise.resolve(model);\n\t\t}\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tcreatePreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<any>> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\treturn this.createDefaultSettingsEditorModel(uri);\n\t\t}\n\n\t\tif (this.userSettingsResource.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER, uri);\n\t\t}\n\n\t\tconst workspaceSettingsUri = this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);\n\t\tif (workspaceSettingsUri && workspaceSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE, workspaceSettingsUri);\n\t\t}\n\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t}\n\n\t\treturn Promise.reject(`unknown resource: ${uri.toString()}`);\n\t}\n\n\topenRawDefaultSettings(): Promise<IEditor | null> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n\t}\n\n\topenRawUserSettings(): Promise<IEditor | null> {\n\t\treturn this.editorService.openEditor({ resource: this.userSettingsResource });\n\t}\n\n\topenSettings(jsonEditor?: boolean): Promise<IEditor | null> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\tif (!jsonEditor) {\n\t\t\treturn this.openSettings2();\n\t\t}\n\n\t\tconst editorInput = this.getActiveSettingsEditorInput() || this.lastOpenedSettingsInput;\n\t\tconst resource = editorInput ? editorInput.master.getResource()! : this.userSettingsResource;\n\t\tconst target = this.getConfigurationTargetFromSettingsResource(resource);\n\t\treturn this.openOrSwitchSettings(target, resource);\n\t}\n\n\tprivate openSettings2(): Promise<IEditor> {\n\t\tconst input = this.settingsEditor2Input;\n\t\treturn this.editorGroupService.activeGroup.openEditor(input)\n\t\t\t.then(() => this.editorGroupService.activeGroup.activeControl!);\n\t}\n\n\topenGlobalSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\treturn jsonEditor ?\n\t\t\tthis.openOrSwitchSettings(ConfigurationTarget.USER, this.userSettingsResource, options, group) :\n\t\t\tthis.openOrSwitchSettings2(ConfigurationTarget.USER, undefined, options, group);\n\t}\n\n\tasync openRemoteSettings(): Promise<IEditor | null> {\n\t\tconst environemnt = await this.remoteAgentService.getEnvironment();\n\t\tif (environemnt) {\n\t\t\tawait this.createIfNotExists(environemnt.appSettingsPath, emptyEditableSettingsContent);\n\t\t\treturn this.editorService.openEditor({ resource: environemnt.appSettingsPath, options: { pinned: true, revealIfOpened: true } });\n\t\t}\n\t\treturn null;\n\t}\n\n\topenWorkspaceSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\n\t\tif (!this.workspaceSettingsResource) {\n\t\t\tthis.notificationService.info(nls.localize('openFolderFirst', \"Open a folder first to create workspace settings\"));\n\t\t\treturn Promise.reject(null);\n\t\t}\n\n\t\treturn jsonEditor ?\n\t\t\tthis.openOrSwitchSettings(ConfigurationTarget.WORKSPACE, this.workspaceSettingsResource, options, group) :\n\t\t\tthis.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE, undefined, options, group);\n\t}\n\n\topenFolderSettings(folder: URI, jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\tjsonEditor = typeof jsonEditor === 'undefined' ?\n\t\t\tthis.configurationService.getValue('workbench.settings.editor') === 'json' :\n\t\t\tjsonEditor;\n\t\tconst folderSettingsUri = this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, folder);\n\t\tif (jsonEditor) {\n\t\t\tif (folderSettingsUri) {\n\t\t\t\treturn this.openOrSwitchSettings(ConfigurationTarget.WORKSPACE_FOLDER, folderSettingsUri, options, group);\n\t\t\t}\n\t\t\treturn Promise.reject(`Invalid folder URI - ${folder.toString()}`);\n\t\t}\n\t\treturn this.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE_FOLDER, folder, options, group);\n\t}\n\n\tswitchSettings(target: ConfigurationTarget, resource: URI, jsonEditor?: boolean): Promise<void> {\n\t\tif (!jsonEditor) {\n\t\t\treturn this.doOpenSettings2(target, resource).then(() => undefined);\n\t\t}\n\n\t\tconst activeControl = this.editorService.activeControl;\n\t\tif (activeControl && activeControl.input instanceof PreferencesEditorInput) {\n\t\t\treturn this.doSwitchSettings(target, resource, activeControl.input, activeControl.group).then(() => undefined);\n\t\t} else {\n\t\t\treturn this.doOpenSettings(target, resource).then(() => undefined);\n\t\t}\n\t}\n\n\topenGlobalKeybindingSettings(textual: boolean): Promise<void> {\n\t\t/* __GDPR__\n\t\t\t\"openKeybindings\" : {\n\t\t\t\t\"textual\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('openKeybindings', { textual });\n\t\tif (textual) {\n\t\t\tconst emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + '\\n[\\n]';\n\t\t\tconst editableKeybindings = URI.file(this.environmentService.appKeybindingsPath);\n\t\t\tconst openDefaultKeybindings = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n\n\t\t\t// Create as needed and open in editor\n\t\t\treturn this.createIfNotExists(editableKeybindings, emptyContents).then(() => {\n\t\t\t\tif (openDefaultKeybindings) {\n\t\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true }, label: nls.localize('defaultKeybindings', \"Default Keybindings\"), description: '' }),\n\t\t\t\t\t\tthis.editorService.openEditor({ resource: editableKeybindings, options: { pinned: true, revealIfOpened: true } }, sideEditorGroup.id)\n\t\t\t\t\t]).then(editors => undefined);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.editorService.openEditor({ resource: editableKeybindings, options: { pinned: true, revealIfOpened: true } }).then(() => undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn this.editorService.openEditor(this.instantiationService.createInstance(KeybindingsEditorInput), { pinned: true, revealIfOpened: true }).then(() => undefined);\n\t}\n\n\topenDefaultKeybindingsFile(): Promise<IEditor | null> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', \"Default Keybindings\") });\n\t}\n\n\tconfigureSettingsForLanguage(language: string): void {\n\t\tthis.openGlobalSettings(true)\n\t\t\t.then(editor => this.createPreferencesEditorModel(this.userSettingsResource)\n\t\t\t\t.then((settingsModel: IPreferencesEditorModel<ISetting>) => {\n\t\t\t\t\tconst codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n\t\t\t\t\tif (codeEditor) {\n\t\t\t\t\t\tthis.addLanguageOverrideEntry(language, settingsModel, codeEditor)\n\t\t\t\t\t\t\t.then(position => {\n\t\t\t\t\t\t\t\tif (codeEditor && position) {\n\t\t\t\t\t\t\t\t\tcodeEditor.setPosition(position);\n\t\t\t\t\t\t\t\t\tcodeEditor.revealLine(position.lineNumber);\n\t\t\t\t\t\t\t\t\tcodeEditor.focus();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}));\n\t}\n\n\tprivate openOrSwitchSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditor | null> {\n\t\tconst editorInput = this.getActiveSettingsEditorInput(group);\n\t\tif (editorInput) {\n\t\t\tconst editorInputResource = editorInput.master.getResource();\n\t\t\tif (editorInputResource && editorInputResource.fsPath !== resource.fsPath) {\n\t\t\t\treturn this.doSwitchSettings(configurationTarget, resource, editorInput, group, options);\n\t\t\t}\n\t\t}\n\t\treturn this.doOpenSettings(configurationTarget, resource, options, group);\n\t}\n\n\tprivate openOrSwitchSettings2(configurationTarget: ConfigurationTarget, folderUri?: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditor | null> {\n\t\treturn this.doOpenSettings2(configurationTarget, folderUri, options, group);\n\t}\n\n\tprivate doOpenSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\tconst openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);\n\t\tif (openSplitJSON) {\n\t\t\treturn this.doOpenSplitJSON(configurationTarget, resource, options, group);\n\t\t}\n\n\t\tconst openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);\n\n\t\treturn this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n\t\t\t.then(editableSettingsEditorInput => {\n\t\t\t\tif (!options) {\n\t\t\t\t\toptions = { pinned: true };\n\t\t\t\t} else {\n\t\t\t\t\toptions = assign(options, { pinned: true });\n\t\t\t\t}\n\n\t\t\t\tif (openDefaultSettings) {\n\t\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultSettingsRawResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true }, label: nls.localize('defaultSettings', \"Default Settings\"), description: '' }),\n\t\t\t\t\t\tthis.editorService.openEditor(editableSettingsEditorInput, { pinned: true, revealIfOpened: true }, sideEditorGroup.id)\n\t\t\t\t\t]).then(([defaultEditor, editor]) => editor);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.editorService.openEditor(editableSettingsEditorInput, SettingsEditorOptions.create(options), group);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate doOpenSplitJSON(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\treturn this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)\n\t\t\t.then(editableSettingsEditorInput => {\n\t\t\t\tif (!options) {\n\t\t\t\t\toptions = { pinned: true };\n\t\t\t\t} else {\n\t\t\t\t\toptions = assign(options, { pinned: true });\n\t\t\t\t}\n\n\t\t\t\tconst defaultPreferencesEditorInput = this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(configurationTarget));\n\t\t\t\tconst preferencesEditorInput = new PreferencesEditorInput(this.getPreferencesEditorInputName(configurationTarget, resource), editableSettingsEditorInput.getDescription(), defaultPreferencesEditorInput, <EditorInput>editableSettingsEditorInput);\n\t\t\t\tthis.lastOpenedSettingsInput = preferencesEditorInput;\n\t\t\t\treturn this.editorService.openEditor(preferencesEditorInput, SettingsEditorOptions.create(options), group);\n\t\t\t});\n\t}\n\n\tpublic createSettings2EditorModel(): Settings2EditorModel {\n\t\treturn this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(ConfigurationTarget.USER));\n\t}\n\n\tprivate doOpenSettings2(target: ConfigurationTarget, folderUri: URI | undefined, options?: IEditorOptions, group?: IEditorGroup): Promise<IEditor | null> {\n\t\tconst input = this.settingsEditor2Input;\n\t\tconst settingsOptions: ISettingsEditorOptions = {\n\t\t\t...options,\n\t\t\ttarget,\n\t\t\tfolderUri\n\t\t};\n\n\t\treturn this.editorService.openEditor(input, SettingsEditorOptions.create(settingsOptions), group);\n\t}\n\n\tprivate doSwitchSettings(target: ConfigurationTarget, resource: URI, input: PreferencesEditorInput, group: IEditorGroup, options?: ISettingsEditorOptions): Promise<IEditor> {\n\t\tconst settingsURI = this.getEditableSettingsURI(target, resource);\n\t\tif (!settingsURI) {\n\t\t\treturn Promise.reject(`Invalid settings URI - ${resource.toString()}`);\n\t\t}\n\t\treturn this.getOrCreateEditableSettingsEditorInput(target, settingsURI)\n\t\t\t.then(toInput => {\n\t\t\t\treturn group.openEditor(input).then(() => {\n\t\t\t\t\tconst replaceWith = new PreferencesEditorInput(this.getPreferencesEditorInputName(target, resource), toInput.getDescription(), this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(target)), toInput);\n\n\t\t\t\t\treturn group.replaceEditors([{\n\t\t\t\t\t\teditor: input,\n\t\t\t\t\t\treplacement: replaceWith,\n\t\t\t\t\t\toptions: options ? SettingsEditorOptions.create(options) : undefined\n\t\t\t\t\t}]).then(() => {\n\t\t\t\t\t\tthis.lastOpenedSettingsInput = replaceWith;\n\t\t\t\t\t\treturn group.activeControl!;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate getActiveSettingsEditorInput(group: IEditorGroup = this.editorGroupService.activeGroup): PreferencesEditorInput {\n\t\treturn <PreferencesEditorInput>group.editors.filter(e => e instanceof PreferencesEditorInput)[0];\n\t}\n\n\tprivate getConfigurationTargetFromSettingsResource(resource: URI): ConfigurationTarget {\n\t\tif (this.userSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.USER;\n\t\t}\n\n\t\tconst workspaceSettingsResource = this.workspaceSettingsResource;\n\t\tif (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tif (folder) {\n\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\n\t\treturn ConfigurationTarget.USER;\n\t}\n\n\tprivate getConfigurationTargetFromDefaultSettingsResource(uri: URI) {\n\t\treturn this.isDefaultWorkspaceSettingsResource(uri) ? ConfigurationTarget.WORKSPACE : this.isDefaultFolderSettingsResource(uri) ? ConfigurationTarget.WORKSPACE_FOLDER : ConfigurationTarget.USER;\n\t}\n\n\tprivate isDefaultSettingsResource(uri: URI): boolean {\n\t\treturn this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n\t}\n\n\tprivate isDefaultUserSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n\t}\n\n\tprivate isDefaultWorkspaceSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n\t}\n\n\tprivate isDefaultFolderSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n\t}\n\n\tprivate getDefaultSettingsResource(configurationTarget: ConfigurationTarget): URI {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultWorkspaceSettingsUriCounter++}/workspaceSettings.json` });\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultFolderSettingsUriCounter++}/resourceSettings.json` });\n\t\t}\n\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultUserSettingsUriCounter++}/settings.json` });\n\t}\n\n\tprivate getPreferencesEditorInputName(target: ConfigurationTarget, resource: URI): string {\n\t\tconst name = getSettingsTargetName(target, resource, this.contextService);\n\t\treturn target === ConfigurationTarget.WORKSPACE_FOLDER ? nls.localize('folderSettingsName', \"{0} (Folder Settings)\", name) : name;\n\t}\n\n\tprivate getOrCreateEditableSettingsEditorInput(target: ConfigurationTarget, resource: URI): Promise<EditorInput> {\n\t\treturn this.createSettingsIfNotExists(target, resource)\n\t\t\t.then(() => <EditorInput>this.editorService.createInput({ resource }));\n\t}\n\n\tprivate createEditableSettingsEditorModel(configurationTarget: ConfigurationTarget, resource: URI): Promise<SettingsEditorModel> {\n\t\tconst settingsUri = this.getEditableSettingsURI(configurationTarget, resource);\n\t\tif (settingsUri) {\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tif (workspace.configuration && workspace.configuration.toString() === settingsUri.toString()) {\n\t\t\t\treturn this.textModelResolverService.createModelReference(settingsUri)\n\t\t\t\t\t.then(reference => this.instantiationService.createInstance(WorkspaceConfigurationEditorModel, reference, configurationTarget));\n\t\t\t}\n\t\t\treturn this.textModelResolverService.createModelReference(settingsUri)\n\t\t\t\t.then(reference => this.instantiationService.createInstance(SettingsEditorModel, reference, configurationTarget));\n\t\t}\n\t\treturn Promise.reject(`unknown target: ${configurationTarget} and resource: ${resource.toString()}`);\n\t}\n\n\tprivate createDefaultSettingsEditorModel(defaultSettingsUri: URI): Promise<DefaultSettingsEditorModel> {\n\t\treturn this.textModelResolverService.createModelReference(defaultSettingsUri)\n\t\t\t.then(reference => {\n\t\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n\t\t\t\treturn this.instantiationService.createInstance(DefaultSettingsEditorModel, defaultSettingsUri, reference, this.getDefaultSettings(target));\n\t\t\t});\n\t}\n\n\tprivate getDefaultSettings(target: ConfigurationTarget): DefaultSettings {\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tif (!this._defaultWorkspaceSettingsContentModel) {\n\t\t\t\tthis._defaultWorkspaceSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultWorkspaceSettingsContentModel;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (!this._defaultFolderSettingsContentModel) {\n\t\t\t\tthis._defaultFolderSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultFolderSettingsContentModel;\n\t\t}\n\t\tif (!this._defaultUserSettingsContentModel) {\n\t\t\tthis._defaultUserSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t}\n\t\treturn this._defaultUserSettingsContentModel;\n\t}\n\n\tprivate getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): URI | null {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\treturn URI.file(this.environmentService.appSettingsPath);\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\t\treturn workspace.configuration || workspace.folders[0].toResource(FOLDER_SETTINGS_PATH);\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (resource) {\n\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\t\t\t\treturn folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n\t\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate createSettingsIfNotExists(target: ConfigurationTarget, resource: URI): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE && target === ConfigurationTarget.WORKSPACE) {\n\t\t\tconst workspaceConfig = this.contextService.getWorkspace().configuration;\n\t\t\tif (!workspaceConfig) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\treturn this.fileService.resolveContent(workspaceConfig)\n\t\t\t\t.then(content => {\n\t\t\t\t\tif (Object.keys(parse(content.value)).indexOf('settings') === -1) {\n\t\t\t\t\t\treturn this.jsonEditingService.write(resource, { key: 'settings', value: {} }, true).then(undefined, () => { });\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t}\n\t\treturn this.createIfNotExists(resource, emptyEditableSettingsContent).then(() => { });\n\t}\n\n\tprivate createIfNotExists(resource: URI, contents: string): Promise<any> {\n\t\treturn this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(undefined, error => {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn this.fileService.updateContent(resource, contents).then(undefined, error => {\n\t\t\t\t\treturn Promise.reject(new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", this.labelService.getUriLabel(resource, { relative: true }), error)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): string[] {\n\t\treturn [\n\t\t\t'files.autoSave',\n\t\t\t'editor.fontSize',\n\t\t\t'editor.fontFamily',\n\t\t\t'editor.tabSize',\n\t\t\t'editor.renderWhitespace',\n\t\t\t'editor.cursorStyle',\n\t\t\t'editor.multiCursorModifier',\n\t\t\t'editor.insertSpaces',\n\t\t\t'editor.wordWrap',\n\t\t\t'files.exclude',\n\t\t\t'files.associations'\n\t\t];\n\t}\n\n\tprivate addLanguageOverrideEntry(language: string, settingsModel: IPreferencesEditorModel<ISetting>, codeEditor: ICodeEditor): Promise<IPosition | null> {\n\t\tconst languageKey = `[${language}]`;\n\t\tlet setting = settingsModel.getPreference(languageKey);\n\t\tconst model = codeEditor.getModel();\n\t\tif (model) {\n\t\t\tconst configuration = this.configurationService.getValue<{ editor: { tabSize: number; insertSpaces: boolean } }>();\n\t\t\tconst eol = model.getEOL();\n\t\t\tif (setting) {\n\t\t\t\tif (setting.overrides && setting.overrides.length) {\n\t\t\t\t\tconst lastSetting = setting.overrides[setting.overrides.length - 1];\n\t\t\t\t\treturn Promise.resolve({ lineNumber: lastSetting.valueRange.endLineNumber, column: model.getLineMaxColumn(lastSetting.valueRange.endLineNumber) });\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve({ lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 });\n\t\t\t}\n\t\t\treturn this.configurationService.updateValue(languageKey, {}, ConfigurationTarget.USER)\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetting = settingsModel.getPreference(languageKey);\n\t\t\t\t\tif (setting) {\n\t\t\t\t\t\tlet content = eol + this.spaces(2, configuration.editor) + eol + this.spaces(1, configuration.editor);\n\t\t\t\t\t\tlet editOperation = EditOperation.insert(new Position(setting.valueRange.endLineNumber, setting.valueRange.endColumn - 1), content);\n\t\t\t\t\t\tmodel.pushEditOperations([], [editOperation], () => []);\n\t\t\t\t\t\tlet lineNumber = setting.valueRange.endLineNumber + 1;\n\t\t\t\t\t\tsettingsModel.dispose();\n\t\t\t\t\t\treturn { lineNumber, column: model.getLineMaxColumn(lineNumber) };\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprivate spaces(count: number, { tabSize, insertSpaces }: { tabSize: number; insertSpaces: boolean }): string {\n\t\treturn insertSpaces ? strings.repeat(' ', tabSize * count) : strings.repeat('\\t', count);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterSingleton(IPreferencesService, PreferencesService);"]}]}