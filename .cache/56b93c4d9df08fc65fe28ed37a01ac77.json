{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/keybindingLabels\", \"vs/base/common/keyCodes\"], function (require, exports, errors_1, keybindingLabels_1, keyCodes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class BaseResolvedKeybinding extends keyCodes_1.ResolvedKeybinding {\n        constructor(os, parts) {\n            super();\n            if (parts.length === 0) {\n                throw errors_1.illegalArgument(`parts`);\n            }\n            this._os = os;\n            this._parts = parts;\n        }\n        getLabel() {\n            return keybindingLabels_1.UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getLabel(keybinding));\n        }\n        getAriaLabel() {\n            return keybindingLabels_1.AriaLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getAriaLabel(keybinding));\n        }\n        getElectronAccelerator() {\n            if (this._parts.length > 1) {\n                // Electron cannot handle chords\n                return null;\n            }\n            return keybindingLabels_1.ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getElectronAccelerator(keybinding));\n        }\n        getUserSettingsLabel() {\n            return keybindingLabels_1.UserSettingsLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUserSettingsLabel(keybinding));\n        }\n        isWYSIWYG() {\n            return this._parts.every((keybinding) => this._isWYSIWYG(keybinding));\n        }\n        isChord() {\n            return (this._parts.length > 1);\n        }\n        getParts() {\n            return this._parts.map((keybinding) => this._getPart(keybinding));\n        }\n        _getPart(keybinding) {\n            return new keyCodes_1.ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n        }\n        getDispatchParts() {\n            return this._parts.map((keybinding) => this._getDispatchPart(keybinding));\n        }\n    }\n    exports.BaseResolvedKeybinding = BaseResolvedKeybinding;\n});\n",null]}