{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/services/files/node/watcher/common\", \"vs/workbench/services/files/node/watcher/win32/csharpWatcherService\", \"vs/base/common/path\", \"vs/base/common/strings\", \"vs/base/common/network\"], function (require, exports, common_1, csharpWatcherService_1, path_1, strings_1, network_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FileWatcher {\n        constructor(contextService, ignored, onFileChanges, errorLogger, verboseLogging) {\n            this.contextService = contextService;\n            this.ignored = ignored;\n            this.onFileChanges = onFileChanges;\n            this.errorLogger = errorLogger;\n            this.verboseLogging = verboseLogging;\n        }\n        startWatching() {\n            if (this.contextService.getWorkspace().folders[0].uri.scheme !== network_1.Schemas.file) {\n                return () => { };\n            }\n            let basePath = path_1.normalize(this.contextService.getWorkspace().folders[0].uri.fsPath);\n            if (basePath && basePath.indexOf('\\\\\\\\') === 0 && strings_1.endsWith(basePath, path_1.posix.sep)) {\n                // for some weird reason, node adds a trailing slash to UNC paths\n                // we never ever want trailing slashes as our base path unless\n                // someone opens root (\"/\").\n                // See also https://github.com/nodejs/io.js/issues/1765\n                basePath = strings_1.rtrim(basePath, path_1.posix.sep);\n            }\n            const watcher = new csharpWatcherService_1.OutOfProcessWin32FolderWatcher(basePath, this.ignored, events => this.onRawFileEvents(events), error => this.onError(error), this.verboseLogging);\n            return () => {\n                this.isDisposed = true;\n                watcher.dispose();\n            };\n        }\n        onRawFileEvents(events) {\n            if (this.isDisposed) {\n                return;\n            }\n            // Emit through event emitter\n            if (events.length > 0) {\n                this.onFileChanges(common_1.toFileChangesEvent(events));\n            }\n        }\n        onError(error) {\n            if (!this.isDisposed) {\n                this.errorLogger(error);\n            }\n        }\n    }\n    exports.FileWatcher = FileWatcher;\n});\n",null]}