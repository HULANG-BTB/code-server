{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/telemetry/common/telemetryUtils\", \"vs/platform/configuration/common/configuration\", \"vs/base/common/lifecycle\", \"vs/platform/environment/common/environment\", \"vs/platform/product/common/product\", \"vs/platform/ipc/electron-browser/sharedProcessService\", \"vs/platform/telemetry/node/telemetryIpc\", \"vs/platform/log/common/log\", \"vs/platform/storage/common/storage\", \"vs/platform/windows/common/windows\", \"vs/platform/telemetry/node/workbenchCommonProperties\", \"vs/platform/telemetry/common/telemetryService\"], function (require, exports, telemetryUtils_1, configuration_1, lifecycle_1, environment_1, product_1, sharedProcessService_1, telemetryIpc_1, log_1, storage_1, windows_1, workbenchCommonProperties_1, telemetryService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TelemetryService = class TelemetryService extends lifecycle_1.Disposable {\n        constructor(environmentService, productService, sharedProcessService, logService, storageService, configurationService, windowService) {\n            super();\n            if (!environmentService.isExtensionDevelopment && !environmentService.args['disable-telemetry'] && !!productService.enableTelemetry) {\n                const channel = sharedProcessService.getChannel('telemetryAppender');\n                const config = {\n                    appender: telemetryUtils_1.combinedAppender(new telemetryIpc_1.TelemetryAppenderClient(channel), new telemetryUtils_1.LogAppender(logService)),\n                    commonProperties: workbenchCommonProperties_1.resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, windowService.getConfiguration().machineId, environmentService.installSourcePath),\n                    piiPaths: [environmentService.appRoot, environmentService.extensionsPath]\n                };\n                this.impl = this._register(new telemetryService_1.TelemetryService(config, configurationService));\n            }\n            else {\n                this.impl = telemetryUtils_1.NullTelemetryService;\n            }\n        }\n        get isOptedIn() {\n            return this.impl.isOptedIn;\n        }\n        publicLog(eventName, data, anonymizeFilePaths) {\n            return this.impl.publicLog(eventName, data, anonymizeFilePaths);\n        }\n        getTelemetryInfo() {\n            return this.impl.getTelemetryInfo();\n        }\n    };\n    TelemetryService = __decorate([\n        __param(0, environment_1.IEnvironmentService),\n        __param(1, product_1.IProductService),\n        __param(2, sharedProcessService_1.ISharedProcessService),\n        __param(3, log_1.ILogService),\n        __param(4, storage_1.IStorageService),\n        __param(5, configuration_1.IConfigurationService),\n        __param(6, windows_1.IWindowService)\n    ], TelemetryService);\n    exports.TelemetryService = TelemetryService;\n});\n",null]}