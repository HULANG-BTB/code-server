{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar nls = require(\"vs/nls\");\nvar issue_1 = require(\"vs/platform/issue/common/issue\");\nvar issue_2 = require(\"vs/workbench/contrib/issue/electron-browser/issue\");\nvar OpenIssueReporterAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenIssueReporterAction, _super);\n    function OpenIssueReporterAction(id, label, issueService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.issueService = issueService;\n        return _this;\n    }\n    OpenIssueReporterAction.prototype.run = function () {\n        return this.issueService.openReporter().then(function () { return true; });\n    };\n    OpenIssueReporterAction.ID = 'workbench.action.openIssueReporter';\n    OpenIssueReporterAction.LABEL = nls.localize({ key: 'reportIssueInEnglish', comment: ['Translate this to \"Report Issue in English\" in all languages please!'] }, \"Report Issue\");\n    OpenIssueReporterAction = tslib_1.__decorate([\n        tslib_1.__param(2, issue_2.IWorkbenchIssueService)\n    ], OpenIssueReporterAction);\n    return OpenIssueReporterAction;\n}(actions_1.Action));\nexports.OpenIssueReporterAction = OpenIssueReporterAction;\nvar OpenProcessExplorer = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenProcessExplorer, _super);\n    function OpenProcessExplorer(id, label, issueService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.issueService = issueService;\n        return _this;\n    }\n    OpenProcessExplorer.prototype.run = function () {\n        return this.issueService.openProcessExplorer().then(function () { return true; });\n    };\n    OpenProcessExplorer.ID = 'workbench.action.openProcessExplorer';\n    OpenProcessExplorer.LABEL = nls.localize('openProcessExplorer', \"Open Process Explorer\");\n    OpenProcessExplorer = tslib_1.__decorate([\n        tslib_1.__param(2, issue_2.IWorkbenchIssueService)\n    ], OpenProcessExplorer);\n    return OpenProcessExplorer;\n}(actions_1.Action));\nexports.OpenProcessExplorer = OpenProcessExplorer;\nvar ReportPerformanceIssueUsingReporterAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReportPerformanceIssueUsingReporterAction, _super);\n    function ReportPerformanceIssueUsingReporterAction(id, label, issueService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.issueService = issueService;\n        return _this;\n    }\n    ReportPerformanceIssueUsingReporterAction.prototype.run = function () {\n        return this.issueService.openReporter({ issueType: issue_1.IssueType.PerformanceIssue }).then(function () { return true; });\n    };\n    ReportPerformanceIssueUsingReporterAction.ID = 'workbench.action.reportPerformanceIssueUsingReporter';\n    ReportPerformanceIssueUsingReporterAction.LABEL = nls.localize('reportPerformanceIssue', \"Report Performance Issue\");\n    ReportPerformanceIssueUsingReporterAction = tslib_1.__decorate([\n        tslib_1.__param(2, issue_2.IWorkbenchIssueService)\n    ], ReportPerformanceIssueUsingReporterAction);\n    return ReportPerformanceIssueUsingReporterAction;\n}(actions_1.Action));\nexports.ReportPerformanceIssueUsingReporterAction = ReportPerformanceIssueUsingReporterAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueActions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,kDAAgD;AAChD,4BAA8B;AAC9B,wDAA2D;AAC3D,2EAA2F;AAE3F;IAA6C,mDAAM;IAIlD,iCACC,EAAU,EACV,KAAa,EAC4B,YAAoC;QAH9E,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHyC,kBAAY,GAAZ,YAAY,CAAwB;;IAG9E,CAAC;IAED,qCAAG,GAAH;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAC1D,CAAC;IAbe,0BAAE,GAAG,oCAAoC,CAAC;IAC1C,6BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,sBAAsB,EAAE,OAAO,EAAE,CAAC,sEAAsE,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;IAF7J,uBAAuB;QAOjC,mBAAA,8BAAsB,CAAA;OAPZ,uBAAuB,CAenC;IAAD,8BAAC;CAAA,AAfD,CAA6C,gBAAM,GAelD;AAfY,0DAAuB;AAiBpC;IAAyC,+CAAM;IAI9C,6BACC,EAAU,EACV,KAAa,EAC4B,YAAoC;QAH9E,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHyC,kBAAY,GAAZ,YAAY,CAAwB;;IAG9E,CAAC;IAED,iCAAG,GAAH;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IACjE,CAAC;IAbe,sBAAE,GAAG,sCAAsC,CAAC;IAC5C,yBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,uBAAuB,CAAC,CAAC;IAFzE,mBAAmB;QAO7B,mBAAA,8BAAsB,CAAA;OAPZ,mBAAmB,CAe/B;IAAD,0BAAC;CAAA,AAfD,CAAyC,gBAAM,GAe9C;AAfY,kDAAmB;AAiBhC;IAA+D,qEAAM;IAIpE,mDACC,EAAU,EACV,KAAa,EAC4B,YAAoC;QAH9E,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHyC,kBAAY,GAAZ,YAAY,CAAwB;;IAG9E,CAAC;IAED,uDAAG,GAAH;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,SAAS,EAAE,iBAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IACnG,CAAC;IAbe,4CAAE,GAAG,sDAAsD,CAAC;IAC5D,+CAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,wBAAwB,EAAE,0BAA0B,CAAC,CAAC;IAF/E,yCAAyC;QAOnD,mBAAA,8BAAsB,CAAA;OAPZ,yCAAyC,CAerD;IAAD,gDAAC;CAAA,AAfD,CAA+D,gBAAM,GAepE;AAfY,8FAAyC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport * as nls from 'vs/nls';\nimport { IssueType } from 'vs/platform/issue/common/issue';\nimport { IWorkbenchIssueService } from 'vs/workbench/contrib/issue/electron-browser/issue';\n\nexport class OpenIssueReporterAction extends Action {\n\tstatic readonly ID = 'workbench.action.openIssueReporter';\n\tstatic readonly LABEL = nls.localize({ key: 'reportIssueInEnglish', comment: ['Translate this to \"Report Issue in English\" in all languages please!'] }, \"Report Issue\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchIssueService private readonly issueService: IWorkbenchIssueService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\treturn this.issueService.openReporter().then(() => true);\n\t}\n}\n\nexport class OpenProcessExplorer extends Action {\n\tstatic readonly ID = 'workbench.action.openProcessExplorer';\n\tstatic readonly LABEL = nls.localize('openProcessExplorer', \"Open Process Explorer\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchIssueService private readonly issueService: IWorkbenchIssueService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\treturn this.issueService.openProcessExplorer().then(() => true);\n\t}\n}\n\nexport class ReportPerformanceIssueUsingReporterAction extends Action {\n\tstatic readonly ID = 'workbench.action.reportPerformanceIssueUsingReporter';\n\tstatic readonly LABEL = nls.localize('reportPerformanceIssue', \"Report Performance Issue\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchIssueService private readonly issueService: IWorkbenchIssueService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\treturn this.issueService.openReporter({ issueType: IssueType.PerformanceIssue }).then(() => true);\n\t}\n}\n"]}]}