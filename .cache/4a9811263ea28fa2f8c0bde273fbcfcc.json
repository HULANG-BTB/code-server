{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar strings_1 = require(\"vs/base/common/strings\");\nfunction areSameExtensions(a, b) {\n    if (a.uuid && b.uuid) {\n        return a.uuid === b.uuid;\n    }\n    if (a.id === b.id) {\n        return true;\n    }\n    return strings_1.compareIgnoreCase(a.id, b.id) === 0;\n}\nexports.areSameExtensions = areSameExtensions;\nfunction adoptToGalleryExtensionId(id) {\n    return id.toLocaleLowerCase();\n}\nexports.adoptToGalleryExtensionId = adoptToGalleryExtensionId;\nfunction getGalleryExtensionId(publisher, name) {\n    return publisher.toLocaleLowerCase() + \".\" + name.toLocaleLowerCase();\n}\nexports.getGalleryExtensionId = getGalleryExtensionId;\nfunction groupByExtension(extensions, getExtensionIdentifier) {\n    var byExtension = [];\n    var findGroup = function (extension) {\n        for (var _i = 0, byExtension_1 = byExtension; _i < byExtension_1.length; _i++) {\n            var group = byExtension_1[_i];\n            if (group.some(function (e) { return areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension)); })) {\n                return group;\n            }\n        }\n        return null;\n    };\n    for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {\n        var extension = extensions_1[_i];\n        var group = findGroup(extension);\n        if (group) {\n            group.push(extension);\n        }\n        else {\n            byExtension.push([extension]);\n        }\n    }\n    return byExtension;\n}\nexports.groupByExtension = groupByExtension;\nfunction getLocalExtensionTelemetryData(extension) {\n    return {\n        id: extension.identifier.id,\n        name: extension.manifest.name,\n        galleryId: null,\n        publisherId: extension.metadata ? extension.metadata.publisherId : null,\n        publisherName: extension.manifest.publisher,\n        publisherDisplayName: extension.metadata ? extension.metadata.publisherDisplayName : null,\n        dependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0\n    };\n}\nexports.getLocalExtensionTelemetryData = getLocalExtensionTelemetryData;\n/* __GDPR__FRAGMENT__\n    \"GalleryExtensionTelemetryData\" : {\n        \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n        \"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n        \"${include}\": [\n            \"${GalleryExtensionTelemetryData2}\"\n        ]\n    }\n*/\nfunction getGalleryExtensionTelemetryData(extension) {\n    return tslib_1.__assign({ id: extension.identifier.id, name: extension.name, galleryId: extension.identifier.uuid, publisherId: extension.publisherId, publisherName: extension.publisher, publisherDisplayName: extension.publisherDisplayName, dependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0) }, extension.telemetryData);\n}\nexports.getGalleryExtensionTelemetryData = getGalleryExtensionTelemetryData;\nexports.BetterMergeId = 'pprice.better-merge';\nfunction getMaliciousExtensionsSet(report) {\n    var result = new Set();\n    for (var _i = 0, report_1 = report; _i < report_1.length; _i++) {\n        var extension = report_1[_i];\n        if (extension.malicious) {\n            result.add(extension.id.id);\n        }\n    }\n    return result;\n}\nexports.getMaliciousExtensionsSet = getMaliciousExtensionsSet;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILocalExtension, IGalleryExtension, IExtensionIdentifier, IReportedExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { compareIgnoreCase } from 'vs/base/common/strings';\n\nexport function areSameExtensions(a: IExtensionIdentifier, b: IExtensionIdentifier): boolean {\n\tif (a.uuid && b.uuid) {\n\t\treturn a.uuid === b.uuid;\n\t}\n\tif (a.id === b.id) {\n\t\treturn true;\n\t}\n\treturn compareIgnoreCase(a.id, b.id) === 0;\n}\n\nexport function adoptToGalleryExtensionId(id: string): string {\n\treturn id.toLocaleLowerCase();\n}\n\nexport function getGalleryExtensionId(publisher: string, name: string): string {\n\treturn `${publisher.toLocaleLowerCase()}.${name.toLocaleLowerCase()}`;\n}\n\nexport function groupByExtension<T>(extensions: T[], getExtensionIdentifier: (t: T) => IExtensionIdentifier): T[][] {\n\tconst byExtension: T[][] = [];\n\tconst findGroup = (extension: T) => {\n\t\tfor (const group of byExtension) {\n\t\t\tif (group.some(e => areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension)))) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tfor (const extension of extensions) {\n\t\tconst group = findGroup(extension);\n\t\tif (group) {\n\t\t\tgroup.push(extension);\n\t\t} else {\n\t\t\tbyExtension.push([extension]);\n\t\t}\n\t}\n\treturn byExtension;\n}\n\nexport function getLocalExtensionTelemetryData(extension: ILocalExtension): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.manifest.name,\n\t\tgalleryId: null,\n\t\tpublisherId: extension.metadata ? extension.metadata.publisherId : null,\n\t\tpublisherName: extension.manifest.publisher,\n\t\tpublisherDisplayName: extension.metadata ? extension.metadata.publisherDisplayName : null,\n\t\tdependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0\n\t};\n}\n\n\n/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData\" : {\n\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"${include}\": [\n\t\t\t\"${GalleryExtensionTelemetryData2}\"\n\t\t]\n\t}\n*/\nexport function getGalleryExtensionTelemetryData(extension: IGalleryExtension): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.name,\n\t\tgalleryId: extension.identifier.uuid,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tdependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0),\n\t\t...extension.telemetryData\n\t};\n}\n\nexport const BetterMergeId = 'pprice.better-merge';\n\nexport function getMaliciousExtensionsSet(report: IReportedExtension[]): Set<string> {\n\tconst result = new Set<string>();\n\n\tfor (const extension of report) {\n\t\tif (extension.malicious) {\n\t\t\tresult.add(extension.id.id);\n\t\t}\n\t}\n\n\treturn result;\n}"]}]}