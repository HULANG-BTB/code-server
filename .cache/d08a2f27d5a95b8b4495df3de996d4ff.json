{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/editor/common/core/range\"], function (require, exports, event_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var FindOptionOverride;\n    (function (FindOptionOverride) {\n        FindOptionOverride[FindOptionOverride[\"NotSet\"] = 0] = \"NotSet\";\n        FindOptionOverride[FindOptionOverride[\"True\"] = 1] = \"True\";\n        FindOptionOverride[FindOptionOverride[\"False\"] = 2] = \"False\";\n    })(FindOptionOverride = exports.FindOptionOverride || (exports.FindOptionOverride = {}));\n    function effectiveOptionValue(override, value) {\n        if (override === FindOptionOverride.True) {\n            return true;\n        }\n        if (override === FindOptionOverride.False) {\n            return false;\n        }\n        return value;\n    }\n    class FindReplaceState {\n        get searchString() { return this._searchString; }\n        get replaceString() { return this._replaceString; }\n        get isRevealed() { return this._isRevealed; }\n        get isReplaceRevealed() { return this._isReplaceRevealed; }\n        get isRegex() { return effectiveOptionValue(this._isRegexOverride, this._isRegex); }\n        get wholeWord() { return effectiveOptionValue(this._wholeWordOverride, this._wholeWord); }\n        get matchCase() { return effectiveOptionValue(this._matchCaseOverride, this._matchCase); }\n        get actualIsRegex() { return this._isRegex; }\n        get actualWholeWord() { return this._wholeWord; }\n        get actualMatchCase() { return this._matchCase; }\n        get searchScope() { return this._searchScope; }\n        get matchesPosition() { return this._matchesPosition; }\n        get matchesCount() { return this._matchesCount; }\n        get currentMatch() { return this._currentMatch; }\n        get onFindReplaceStateChange() { return this._onFindReplaceStateChange.event; }\n        constructor() {\n            this._searchString = '';\n            this._replaceString = '';\n            this._isRevealed = false;\n            this._isReplaceRevealed = false;\n            this._isRegex = false;\n            this._isRegexOverride = FindOptionOverride.NotSet;\n            this._wholeWord = false;\n            this._wholeWordOverride = FindOptionOverride.NotSet;\n            this._matchCase = false;\n            this._matchCaseOverride = FindOptionOverride.NotSet;\n            this._searchScope = null;\n            this._matchesPosition = 0;\n            this._matchesCount = 0;\n            this._currentMatch = null;\n            this._onFindReplaceStateChange = new event_1.Emitter();\n        }\n        dispose() {\n        }\n        changeMatchInfo(matchesPosition, matchesCount, currentMatch) {\n            let changeEvent = {\n                moveCursor: false,\n                updateHistory: false,\n                searchString: false,\n                replaceString: false,\n                isRevealed: false,\n                isReplaceRevealed: false,\n                isRegex: false,\n                wholeWord: false,\n                matchCase: false,\n                searchScope: false,\n                matchesPosition: false,\n                matchesCount: false,\n                currentMatch: false\n            };\n            let somethingChanged = false;\n            if (matchesCount === 0) {\n                matchesPosition = 0;\n            }\n            if (matchesPosition > matchesCount) {\n                matchesPosition = matchesCount;\n            }\n            if (this._matchesPosition !== matchesPosition) {\n                this._matchesPosition = matchesPosition;\n                changeEvent.matchesPosition = true;\n                somethingChanged = true;\n            }\n            if (this._matchesCount !== matchesCount) {\n                this._matchesCount = matchesCount;\n                changeEvent.matchesCount = true;\n                somethingChanged = true;\n            }\n            if (typeof currentMatch !== 'undefined') {\n                if (!range_1.Range.equalsRange(this._currentMatch, currentMatch)) {\n                    this._currentMatch = currentMatch;\n                    changeEvent.currentMatch = true;\n                    somethingChanged = true;\n                }\n            }\n            if (somethingChanged) {\n                this._onFindReplaceStateChange.fire(changeEvent);\n            }\n        }\n        change(newState, moveCursor, updateHistory = true) {\n            let changeEvent = {\n                moveCursor: moveCursor,\n                updateHistory: updateHistory,\n                searchString: false,\n                replaceString: false,\n                isRevealed: false,\n                isReplaceRevealed: false,\n                isRegex: false,\n                wholeWord: false,\n                matchCase: false,\n                searchScope: false,\n                matchesPosition: false,\n                matchesCount: false,\n                currentMatch: false\n            };\n            let somethingChanged = false;\n            const oldEffectiveIsRegex = this.isRegex;\n            const oldEffectiveWholeWords = this.wholeWord;\n            const oldEffectiveMatchCase = this.matchCase;\n            if (typeof newState.searchString !== 'undefined') {\n                if (this._searchString !== newState.searchString) {\n                    this._searchString = newState.searchString;\n                    changeEvent.searchString = true;\n                    somethingChanged = true;\n                }\n            }\n            if (typeof newState.replaceString !== 'undefined') {\n                if (this._replaceString !== newState.replaceString) {\n                    this._replaceString = newState.replaceString;\n                    changeEvent.replaceString = true;\n                    somethingChanged = true;\n                }\n            }\n            if (typeof newState.isRevealed !== 'undefined') {\n                if (this._isRevealed !== newState.isRevealed) {\n                    this._isRevealed = newState.isRevealed;\n                    changeEvent.isRevealed = true;\n                    somethingChanged = true;\n                }\n            }\n            if (typeof newState.isReplaceRevealed !== 'undefined') {\n                if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n                    this._isReplaceRevealed = newState.isReplaceRevealed;\n                    changeEvent.isReplaceRevealed = true;\n                    somethingChanged = true;\n                }\n            }\n            if (typeof newState.isRegex !== 'undefined') {\n                this._isRegex = newState.isRegex;\n            }\n            if (typeof newState.wholeWord !== 'undefined') {\n                this._wholeWord = newState.wholeWord;\n            }\n            if (typeof newState.matchCase !== 'undefined') {\n                this._matchCase = newState.matchCase;\n            }\n            if (typeof newState.searchScope !== 'undefined') {\n                if (!range_1.Range.equalsRange(this._searchScope, newState.searchScope)) {\n                    this._searchScope = newState.searchScope;\n                    changeEvent.searchScope = true;\n                    somethingChanged = true;\n                }\n            }\n            // Overrides get set when they explicitly come in and get reset anytime something else changes\n            this._isRegexOverride = (typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : FindOptionOverride.NotSet);\n            this._wholeWordOverride = (typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : FindOptionOverride.NotSet);\n            this._matchCaseOverride = (typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : FindOptionOverride.NotSet);\n            if (oldEffectiveIsRegex !== this.isRegex) {\n                somethingChanged = true;\n                changeEvent.isRegex = true;\n            }\n            if (oldEffectiveWholeWords !== this.wholeWord) {\n                somethingChanged = true;\n                changeEvent.wholeWord = true;\n            }\n            if (oldEffectiveMatchCase !== this.matchCase) {\n                somethingChanged = true;\n                changeEvent.matchCase = true;\n            }\n            if (somethingChanged) {\n                this._onFindReplaceStateChange.fire(changeEvent);\n            }\n        }\n    }\n    exports.FindReplaceState = FindReplaceState;\n});\n",null]}