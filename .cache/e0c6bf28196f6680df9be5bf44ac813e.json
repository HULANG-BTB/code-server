{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConfiguration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConfiguration.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar MainThreadConfiguration = /** @class */ (function () {\n    function MainThreadConfiguration(extHostContext, _workspaceContextService, configurationService, _environmentService) {\n        var _this = this;\n        this._workspaceContextService = _workspaceContextService;\n        this.configurationService = configurationService;\n        this._environmentService = _environmentService;\n        var proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostConfiguration);\n        proxy.$initializeConfiguration(this._getConfigurationData());\n        this._configurationListener = configurationService.onDidChangeConfiguration(function (e) {\n            proxy.$acceptConfigurationChanged(_this._getConfigurationData(), _this.toConfigurationChangeEventData(e));\n        });\n    }\n    MainThreadConfiguration.prototype._getConfigurationData = function () {\n        var configurationData = tslib_1.__assign({}, (this.configurationService.getConfigurationData()), { configurationScopes: {} });\n        // Send configurations scopes only in development mode.\n        if (!this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment) {\n            configurationData.configurationScopes = configurationRegistry_1.getScopes();\n        }\n        return configurationData;\n    };\n    MainThreadConfiguration.prototype.dispose = function () {\n        this._configurationListener.dispose();\n    };\n    MainThreadConfiguration.prototype.$updateConfigurationOption = function (target, key, value, resourceUriComponenets) {\n        var resource = resourceUriComponenets ? uri_1.URI.revive(resourceUriComponenets) : null;\n        return this.writeConfiguration(target, key, value, resource);\n    };\n    MainThreadConfiguration.prototype.$removeConfigurationOption = function (target, key, resourceUriComponenets) {\n        var resource = resourceUriComponenets ? uri_1.URI.revive(resourceUriComponenets) : null;\n        return this.writeConfiguration(target, key, undefined, resource);\n    };\n    MainThreadConfiguration.prototype.writeConfiguration = function (target, key, value, resource) {\n        target = target !== null && target !== undefined ? target : this.deriveConfigurationTarget(key, resource);\n        return this.configurationService.updateValue(key, value, { resource: resource }, target, true);\n    };\n    MainThreadConfiguration.prototype.deriveConfigurationTarget = function (key, resource) {\n        if (resource && this._workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n            if (configurationProperties[key] && configurationProperties[key].scope === configurationRegistry_1.ConfigurationScope.RESOURCE) {\n                return configuration_1.ConfigurationTarget.WORKSPACE_FOLDER;\n            }\n        }\n        return configuration_1.ConfigurationTarget.WORKSPACE;\n    };\n    MainThreadConfiguration.prototype.toConfigurationChangeEventData = function (event) {\n        var _this = this;\n        return {\n            changedConfiguration: this.toJSONConfiguration(event.changedConfiguration),\n            changedConfigurationByResource: event.changedConfigurationByResource.keys().reduce(function (result, resource) {\n                result[resource.toString()] = _this.toJSONConfiguration(event.changedConfigurationByResource.get(resource));\n                return result;\n            }, Object.create({}))\n        };\n    };\n    MainThreadConfiguration.prototype.toJSONConfiguration = function (_a) {\n        var _b = _a === void 0 ? { contents: {}, keys: [], overrides: [] } : _a, contents = _b.contents, keys = _b.keys, overrides = _b.overrides;\n        return {\n            contents: contents,\n            keys: keys,\n            overrides: overrides\n        };\n    };\n    MainThreadConfiguration = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadConfiguration),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, environment_1.IEnvironmentService)\n    ], MainThreadConfiguration);\n    return MainThreadConfiguration;\n}());\nexports.MainThreadConfiguration = MainThreadConfiguration;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConfiguration.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, getScopes } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { MainThreadConfigurationShape, MainContext, ExtHostContext, IExtHostContext, IWorkspaceConfigurationChangeEventData, IConfigurationInitData } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ConfigurationTarget, IConfigurationChangeEvent, IConfigurationModel, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\n@extHostNamedCustomer(MainContext.MainThreadConfiguration)\nexport class MainThreadConfiguration implements MainThreadConfigurationShape {\n\n\tprivate readonly _configurationListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostConfiguration);\n\n\t\tproxy.$initializeConfiguration(this._getConfigurationData());\n\t\tthis._configurationListener = configurationService.onDidChangeConfiguration(e => {\n\t\t\tproxy.$acceptConfigurationChanged(this._getConfigurationData(), this.toConfigurationChangeEventData(e));\n\t\t});\n\t}\n\n\tprivate _getConfigurationData(): IConfigurationInitData {\n\t\tconst configurationData: IConfigurationInitData = { ...(this.configurationService.getConfigurationData()!), configurationScopes: {} };\n\t\t// Send configurations scopes only in development mode.\n\t\tif (!this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment) {\n\t\t\tconfigurationData.configurationScopes = getScopes();\n\t\t}\n\t\treturn configurationData;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._configurationListener.dispose();\n\t}\n\n\t$updateConfigurationOption(target: ConfigurationTarget | null, key: string, value: any, resourceUriComponenets: UriComponents | undefined): Promise<void> {\n\t\tconst resource = resourceUriComponenets ? URI.revive(resourceUriComponenets) : null;\n\t\treturn this.writeConfiguration(target, key, value, resource);\n\t}\n\n\t$removeConfigurationOption(target: ConfigurationTarget | null, key: string, resourceUriComponenets: UriComponents | undefined): Promise<void> {\n\t\tconst resource = resourceUriComponenets ? URI.revive(resourceUriComponenets) : null;\n\t\treturn this.writeConfiguration(target, key, undefined, resource);\n\t}\n\n\tprivate writeConfiguration(target: ConfigurationTarget | null, key: string, value: any, resource: URI | null): Promise<void> {\n\t\ttarget = target !== null && target !== undefined ? target : this.deriveConfigurationTarget(key, resource);\n\t\treturn this.configurationService.updateValue(key, value, { resource }, target, true);\n\t}\n\n\tprivate deriveConfigurationTarget(key: string, resource: URI | null): ConfigurationTarget {\n\t\tif (resource && this._workspaceContextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\t\tif (configurationProperties[key] && configurationProperties[key].scope === ConfigurationScope.RESOURCE) {\n\t\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn ConfigurationTarget.WORKSPACE;\n\t}\n\n\tprivate toConfigurationChangeEventData(event: IConfigurationChangeEvent): IWorkspaceConfigurationChangeEventData {\n\t\treturn {\n\t\t\tchangedConfiguration: this.toJSONConfiguration(event.changedConfiguration),\n\t\t\tchangedConfigurationByResource: event.changedConfigurationByResource.keys().reduce((result, resource) => {\n\t\t\t\tresult[resource.toString()] = this.toJSONConfiguration(event.changedConfigurationByResource.get(resource));\n\t\t\t\treturn result;\n\t\t\t}, Object.create({}))\n\t\t};\n\t}\n\n\tprivate toJSONConfiguration({ contents, keys, overrides }: IConfigurationModel = { contents: {}, keys: [], overrides: [] }): IConfigurationModel {\n\t\treturn {\n\t\t\tcontents,\n\t\t\tkeys,\n\t\t\toverrides\n\t\t};\n\t}\n}\n"]}]}