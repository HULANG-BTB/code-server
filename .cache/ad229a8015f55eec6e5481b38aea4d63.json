{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/linesDecorations/linesDecorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/linesDecorations/linesDecorations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./linesDecorations\");\nvar glyphMargin_1 = require(\"vs/editor/browser/viewParts/glyphMargin/glyphMargin\");\nvar LinesDecorationsOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(LinesDecorationsOverlay, _super);\n    function LinesDecorationsOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._decorationsLeft = _this._context.configuration.editor.layoutInfo.decorationsLeft;\n        _this._decorationsWidth = _this._context.configuration.editor.layoutInfo.decorationsWidth;\n        _this._renderResult = null;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    LinesDecorationsOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    LinesDecorationsOverlay.prototype.onConfigurationChanged = function (e) {\n        if (e.layoutInfo) {\n            this._decorationsLeft = this._context.configuration.editor.layoutInfo.decorationsLeft;\n            this._decorationsWidth = this._context.configuration.editor.layoutInfo.decorationsWidth;\n        }\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onDecorationsChanged = function (e) {\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    LinesDecorationsOverlay.prototype.onScrollChanged = function (e) {\n        return e.scrollTopChanged;\n    };\n    LinesDecorationsOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    LinesDecorationsOverlay.prototype._getDecorations = function (ctx) {\n        var decorations = ctx.getDecorationsInViewport();\n        var r = [], rLen = 0;\n        for (var i = 0, len = decorations.length; i < len; i++) {\n            var d = decorations[i];\n            var linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new glyphMargin_1.DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n        }\n        return r;\n    };\n    LinesDecorationsOverlay.prototype.prepareRender = function (ctx) {\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        var left = this._decorationsLeft.toString();\n        var width = this._decorationsWidth.toString();\n        var common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            var classNames = toRender[lineIndex];\n            var lineOutput = '';\n            for (var i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    };\n    LinesDecorationsOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    };\n    return LinesDecorationsOverlay;\n}(glyphMargin_1.DedupOverlay));\nexports.LinesDecorationsOverlay = LinesDecorationsOverlay;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/linesDecorations/linesDecorations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/linesDecorations/linesDecorations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./linesDecorations';\nimport { DecorationToRender, DedupOverlay } from 'vs/editor/browser/viewParts/glyphMargin/glyphMargin';\nimport { RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\n\nexport class LinesDecorationsOverlay extends DedupOverlay {\n\n\tprivate readonly _context: ViewContext;\n\n\tprivate _decorationsLeft: number;\n\tprivate _decorationsWidth: number;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tthis._decorationsLeft = this._context.configuration.editor.layoutInfo.decorationsLeft;\n\t\tthis._decorationsWidth = this._context.configuration.editor.layoutInfo.decorationsWidth;\n\t\tthis._renderResult = null;\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.layoutInfo) {\n\t\t\tthis._decorationsLeft = this._context.configuration.editor.layoutInfo.decorationsLeft;\n\t\t\tthis._decorationsWidth = this._context.configuration.editor.layoutInfo.decorationsWidth;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tprotected _getDecorations(ctx: RenderingContext): DecorationToRender[] {\n\t\tconst decorations = ctx.getDecorationsInViewport();\n\t\tlet r: DecorationToRender[] = [], rLen = 0;\n\t\tfor (let i = 0, len = decorations.length; i < len; i++) {\n\t\t\tconst d = decorations[i];\n\t\t\tconst linesDecorationsClassName = d.options.linesDecorationsClassName;\n\t\t\tif (linesDecorationsClassName) {\n\t\t\t\tr[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n\t\tconst left = this._decorationsLeft.toString();\n\t\tconst width = this._decorationsWidth.toString();\n\t\tconst common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\tconst classNames = toRender[lineIndex];\n\t\t\tlet lineOutput = '';\n\t\t\tfor (let i = 0, len = classNames.length; i < len; i++) {\n\t\t\t\tlineOutput += '<div class=\"cldr ' + classNames[i] + common;\n\t\t\t}\n\t\t\toutput[lineIndex] = lineOutput;\n\t\t}\n\n\t\tthis._renderResult = output;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineNumber - startLineNumber];\n\t}\n}"]}]}