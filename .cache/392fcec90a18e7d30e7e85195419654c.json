{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/variablesView.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/variablesView.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar dom = require(\"vs/base/browser/dom\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar baseDebugView_1 = require(\"vs/workbench/contrib/debug/browser/baseDebugView\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar debugActions_1 = require(\"vs/workbench/contrib/debug/browser/debugActions\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar panelViewlet_1 = require(\"vs/workbench/browser/parts/views/panelViewlet\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar event_1 = require(\"vs/base/common/event\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar highlightedLabel_1 = require(\"vs/base/browser/ui/highlightedlabel/highlightedLabel\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar $ = dom.$;\nexports.variableSetEmitter = new event_1.Emitter();\nvar VariablesView = /** @class */ (function (_super) {\n    tslib_1.__extends(VariablesView, _super);\n    function VariablesView(options, contextMenuService, debugService, keybindingService, configurationService, instantiationService, clipboardService) {\n        var _this = _super.call(this, tslib_1.__assign({}, options, { ariaHeaderLabel: nls.localize('variablesSection', \"Variables Section\") }), keybindingService, contextMenuService, configurationService) || this;\n        _this.debugService = debugService;\n        _this.instantiationService = instantiationService;\n        _this.clipboardService = clipboardService;\n        // Use scheduler to prevent unnecessary flashing\n        _this.onFocusStackFrameScheduler = new async_1.RunOnceScheduler(function () {\n            _this.needsRefresh = false;\n            _this.tree.updateChildren().then(function () {\n                var stackFrame = _this.debugService.getViewModel().focusedStackFrame;\n                if (stackFrame) {\n                    stackFrame.getScopes().then(function (scopes) {\n                        // Expand the first scope if it is not expensive and if there is no expansion state (all are collapsed)\n                        if (scopes.every(function (s) { return _this.tree.getNode(s).collapsed; }) && scopes.length > 0 && !scopes[0].expensive) {\n                            _this.tree.expand(scopes[0]).then(undefined, errors_1.onUnexpectedError);\n                        }\n                    });\n                }\n            }, errors_1.onUnexpectedError);\n        }, 400);\n        return _this;\n    }\n    VariablesView.prototype.renderBody = function (container) {\n        var _this = this;\n        dom.addClass(container, 'debug-variables');\n        var treeContainer = baseDebugView_1.renderViewTree(container);\n        this.tree = this.instantiationService.createInstance(listService_1.WorkbenchAsyncDataTree, treeContainer, new VariablesDelegate(), [this.instantiationService.createInstance(VariablesRenderer), new ScopesRenderer()], new VariablesDataSource(), {\n            ariaLabel: nls.localize('variablesAriaTreeLabel', \"Debug Variables\"),\n            accessibilityProvider: new VariablesAccessibilityProvider(),\n            identityProvider: { getId: function (element) { return element.getId(); } },\n            keyboardNavigationLabelProvider: { getKeyboardNavigationLabel: function (e) { return e; } }\n        });\n        this.tree.setInput(this.debugService.getViewModel()).then(null, errors_1.onUnexpectedError);\n        debug_1.CONTEXT_VARIABLES_FOCUSED.bindTo(this.tree.contextKeyService);\n        var collapseAction = new viewlet_1.CollapseAction(this.tree, true, 'explorer-action collapse-explorer');\n        this.toolbar.setActions([collapseAction])();\n        this.tree.updateChildren();\n        this.disposables.push(this.debugService.getViewModel().onDidFocusStackFrame(function (sf) {\n            if (!_this.isBodyVisible()) {\n                _this.needsRefresh = true;\n                return;\n            }\n            // Refresh the tree immediately if the user explictly changed stack frames.\n            // Otherwise postpone the refresh until user stops stepping.\n            var timeout = sf.explicit ? 0 : undefined;\n            _this.onFocusStackFrameScheduler.schedule(timeout);\n        }));\n        this.disposables.push(exports.variableSetEmitter.event(function () { return _this.tree.updateChildren(); }));\n        this.disposables.push(this.tree.onMouseDblClick(function (e) { return _this.onMouseDblClick(e); }));\n        this.disposables.push(this.tree.onContextMenu(function (e) { return _this.onContextMenu(e); }));\n        this.disposables.push(this.onDidChangeBodyVisibility(function (visible) {\n            if (visible && _this.needsRefresh) {\n                _this.onFocusStackFrameScheduler.schedule();\n            }\n        }));\n        this.disposables.push(this.debugService.getViewModel().onDidSelectExpression(function (e) {\n            if (e instanceof debugModel_1.Variable) {\n                _this.tree.rerender(e);\n            }\n        }));\n    };\n    VariablesView.prototype.layoutBody = function (width, height) {\n        this.tree.layout(width, height);\n    };\n    VariablesView.prototype.focus = function () {\n        this.tree.domFocus();\n    };\n    VariablesView.prototype.onMouseDblClick = function (e) {\n        var session = this.debugService.getViewModel().focusedSession;\n        if (session && e.element instanceof debugModel_1.Variable && session.capabilities.supportsSetVariable) {\n            this.debugService.getViewModel().setSelectedExpression(e.element);\n        }\n    };\n    VariablesView.prototype.onContextMenu = function (e) {\n        var _this = this;\n        var variable = e.element;\n        if (variable instanceof debugModel_1.Variable && !!variable.value) {\n            var actions_2 = [];\n            var session = this.debugService.getViewModel().focusedSession;\n            if (session && session.capabilities.supportsSetVariable) {\n                actions_2.push(new actions_1.Action('workbench.setValue', nls.localize('setValue', \"Set Value\"), undefined, true, function () {\n                    _this.debugService.getViewModel().setSelectedExpression(variable);\n                    return Promise.resolve();\n                }));\n            }\n            actions_2.push(this.instantiationService.createInstance(debugActions_1.CopyValueAction, debugActions_1.CopyValueAction.ID, debugActions_1.CopyValueAction.LABEL, variable, 'variables'));\n            if (variable.evaluateName) {\n                actions_2.push(new actions_1.Action('debug.copyEvaluatePath', nls.localize('copyAsExpression', \"Copy as Expression\"), undefined, true, function () {\n                    _this.clipboardService.writeText(variable.evaluateName);\n                    return Promise.resolve();\n                }));\n                actions_2.push(new actionbar_1.Separator());\n                actions_2.push(new actions_1.Action('debug.addToWatchExpressions', nls.localize('addToWatchExpressions', \"Add to Watch\"), undefined, true, function () {\n                    _this.debugService.addWatchExpression(variable.evaluateName);\n                    return Promise.resolve(undefined);\n                }));\n            }\n            this.contextMenuService.showContextMenu({\n                getAnchor: function () { return e.anchor; },\n                getActions: function () { return actions_2; },\n                getActionsContext: function () { return variable; }\n            });\n        }\n    };\n    VariablesView = tslib_1.__decorate([\n        tslib_1.__param(1, contextView_1.IContextMenuService),\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, clipboardService_1.IClipboardService)\n    ], VariablesView);\n    return VariablesView;\n}(panelViewlet_1.ViewletPanel));\nexports.VariablesView = VariablesView;\nfunction isViewModel(obj) {\n    return typeof obj.getSelectedExpression === 'function';\n}\nvar VariablesDataSource = /** @class */ (function () {\n    function VariablesDataSource() {\n    }\n    VariablesDataSource.prototype.hasChildren = function (element) {\n        if (isViewModel(element) || element instanceof debugModel_1.Scope) {\n            return true;\n        }\n        return element.hasChildren;\n    };\n    VariablesDataSource.prototype.getChildren = function (element) {\n        if (isViewModel(element)) {\n            var stackFrame = element.focusedStackFrame;\n            return stackFrame ? stackFrame.getScopes() : Promise.resolve([]);\n        }\n        return element.getChildren();\n    };\n    return VariablesDataSource;\n}());\nexports.VariablesDataSource = VariablesDataSource;\nvar VariablesDelegate = /** @class */ (function () {\n    function VariablesDelegate() {\n    }\n    VariablesDelegate.prototype.getHeight = function (element) {\n        return 22;\n    };\n    VariablesDelegate.prototype.getTemplateId = function (element) {\n        if (element instanceof debugModel_1.Scope) {\n            return ScopesRenderer.ID;\n        }\n        return VariablesRenderer.ID;\n    };\n    return VariablesDelegate;\n}());\nvar ScopesRenderer = /** @class */ (function () {\n    function ScopesRenderer() {\n    }\n    Object.defineProperty(ScopesRenderer.prototype, \"templateId\", {\n        get: function () {\n            return ScopesRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScopesRenderer.prototype.renderTemplate = function (container) {\n        var name = dom.append(container, $('.scope'));\n        var label = new highlightedLabel_1.HighlightedLabel(name, false);\n        return { name: name, label: label };\n    };\n    ScopesRenderer.prototype.renderElement = function (element, index, templateData) {\n        templateData.label.set(element.element.name, filters_1.createMatches(element.filterData));\n    };\n    ScopesRenderer.prototype.disposeTemplate = function (templateData) {\n        // noop\n    };\n    ScopesRenderer.ID = 'scope';\n    return ScopesRenderer;\n}());\nvar VariablesRenderer = /** @class */ (function (_super) {\n    tslib_1.__extends(VariablesRenderer, _super);\n    function VariablesRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(VariablesRenderer.prototype, \"templateId\", {\n        get: function () {\n            return VariablesRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VariablesRenderer.prototype.renderExpression = function (expression, data, highlights) {\n        baseDebugView_1.renderVariable(expression, data, true, highlights);\n    };\n    VariablesRenderer.prototype.getInputBoxOptions = function (expression) {\n        var variable = expression;\n        return {\n            initialValue: expression.value,\n            ariaLabel: nls.localize('variableValueAriaLabel', \"Type new variable value\"),\n            validationOptions: {\n                validation: function () { return variable.errorMessage ? ({ content: variable.errorMessage }) : null; }\n            },\n            onFinish: function (value, success) {\n                variable.errorMessage = undefined;\n                if (success && variable.value !== value) {\n                    variable.setVariable(value)\n                        // Need to force watch expressions and variables to update since a variable change can have an effect on both\n                        .then(function () { return exports.variableSetEmitter.fire(); });\n                }\n            }\n        };\n    };\n    VariablesRenderer.ID = 'variable';\n    return VariablesRenderer;\n}(baseDebugView_1.AbstractExpressionsRenderer));\nexports.VariablesRenderer = VariablesRenderer;\nvar VariablesAccessibilityProvider = /** @class */ (function () {\n    function VariablesAccessibilityProvider() {\n    }\n    VariablesAccessibilityProvider.prototype.getAriaLabel = function (element) {\n        if (element instanceof debugModel_1.Scope) {\n            return nls.localize('variableScopeAriaLabel', \"Scope {0}, variables, debug\", element.name);\n        }\n        if (element instanceof debugModel_1.Variable) {\n            return nls.localize('variableAriaLabel', \"{0} value {1}, variables, debug\", element.name, element.value);\n        }\n        return null;\n    };\n    return VariablesAccessibilityProvider;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/variablesView.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/variablesView.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport * as dom from 'vs/base/browser/dom';\nimport { CollapseAction } from 'vs/workbench/browser/viewlet';\nimport { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IDebugService, IExpression, IScope, CONTEXT_VARIABLES_FOCUSED, IViewModel } from 'vs/workbench/contrib/debug/common/debug';\nimport { Variable, Scope } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { renderViewTree, renderVariable, IInputBoxOptions, AbstractExpressionsRenderer, IExpressionTemplateData } from 'vs/workbench/contrib/debug/browser/baseDebugView';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { CopyValueAction } from 'vs/workbench/contrib/debug/browser/debugActions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IViewletPanelOptions, ViewletPanel } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { IAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { ITreeRenderer, ITreeNode, ITreeMouseEvent, ITreeContextMenuEvent, IAsyncDataSource } from 'vs/base/browser/ui/tree/tree';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Emitter } from 'vs/base/common/event';\nimport { WorkbenchAsyncDataTree } from 'vs/platform/list/browser/listService';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { FuzzyScore, createMatches } from 'vs/base/common/filters';\nimport { HighlightedLabel, IHighlight } from 'vs/base/browser/ui/highlightedlabel/highlightedLabel';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\n\nconst $ = dom.$;\n\nexport const variableSetEmitter = new Emitter<void>();\n\nexport class VariablesView extends ViewletPanel {\n\n\tprivate onFocusStackFrameScheduler: RunOnceScheduler;\n\tprivate needsRefresh: boolean;\n\tprivate tree: WorkbenchAsyncDataTree<IViewModel | IExpression | IScope, IExpression | IScope, FuzzyScore>;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper({ ...(options as IViewletPanelOptions), ariaHeaderLabel: nls.localize('variablesSection', \"Variables Section\") }, keybindingService, contextMenuService, configurationService);\n\n\t\t// Use scheduler to prevent unnecessary flashing\n\t\tthis.onFocusStackFrameScheduler = new RunOnceScheduler(() => {\n\t\t\tthis.needsRefresh = false;\n\t\t\tthis.tree.updateChildren().then(() => {\n\t\t\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\tif (stackFrame) {\n\t\t\t\t\tstackFrame.getScopes().then(scopes => {\n\t\t\t\t\t\t// Expand the first scope if it is not expensive and if there is no expansion state (all are collapsed)\n\t\t\t\t\t\tif (scopes.every(s => this.tree.getNode(s).collapsed) && scopes.length > 0 && !scopes[0].expensive) {\n\t\t\t\t\t\t\tthis.tree.expand(scopes[0]).then(undefined, onUnexpectedError);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, onUnexpectedError);\n\t\t}, 400);\n\t}\n\n\trenderBody(container: HTMLElement): void {\n\t\tdom.addClass(container, 'debug-variables');\n\t\tconst treeContainer = renderViewTree(container);\n\n\t\tthis.tree = this.instantiationService.createInstance(WorkbenchAsyncDataTree, treeContainer, new VariablesDelegate(),\n\t\t\t[this.instantiationService.createInstance(VariablesRenderer), new ScopesRenderer()],\n\t\t\tnew VariablesDataSource(), {\n\t\t\t\tariaLabel: nls.localize('variablesAriaTreeLabel', \"Debug Variables\"),\n\t\t\t\taccessibilityProvider: new VariablesAccessibilityProvider(),\n\t\t\t\tidentityProvider: { getId: (element: IExpression | IScope) => element.getId() },\n\t\t\t\tkeyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e: IExpression | IScope) => e }\n\t\t\t}) as WorkbenchAsyncDataTree<IViewModel | IExpression | IScope, IExpression | IScope, FuzzyScore>;\n\n\t\tthis.tree.setInput(this.debugService.getViewModel()).then(null, onUnexpectedError);\n\n\t\tCONTEXT_VARIABLES_FOCUSED.bindTo(this.tree.contextKeyService);\n\n\t\tconst collapseAction = new CollapseAction(this.tree, true, 'explorer-action collapse-explorer');\n\t\tthis.toolbar.setActions([collapseAction])();\n\t\tthis.tree.updateChildren();\n\n\t\tthis.disposables.push(this.debugService.getViewModel().onDidFocusStackFrame(sf => {\n\t\t\tif (!this.isBodyVisible()) {\n\t\t\t\tthis.needsRefresh = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Refresh the tree immediately if the user explictly changed stack frames.\n\t\t\t// Otherwise postpone the refresh until user stops stepping.\n\t\t\tconst timeout = sf.explicit ? 0 : undefined;\n\t\t\tthis.onFocusStackFrameScheduler.schedule(timeout);\n\t\t}));\n\t\tthis.disposables.push(variableSetEmitter.event(() => this.tree.updateChildren()));\n\t\tthis.disposables.push(this.tree.onMouseDblClick(e => this.onMouseDblClick(e)));\n\t\tthis.disposables.push(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\n\t\tthis.disposables.push(this.onDidChangeBodyVisibility(visible => {\n\t\t\tif (visible && this.needsRefresh) {\n\t\t\t\tthis.onFocusStackFrameScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.push(this.debugService.getViewModel().onDidSelectExpression(e => {\n\t\t\tif (e instanceof Variable) {\n\t\t\t\tthis.tree.rerender(e);\n\t\t\t}\n\t\t}));\n\t}\n\n\tlayoutBody(width: number, height: number): void {\n\t\tthis.tree.layout(width, height);\n\t}\n\n\tfocus(): void {\n\t\tthis.tree.domFocus();\n\t}\n\n\tprivate onMouseDblClick(e: ITreeMouseEvent<IExpression | IScope>): void {\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tif (session && e.element instanceof Variable && session.capabilities.supportsSetVariable) {\n\t\t\tthis.debugService.getViewModel().setSelectedExpression(e.element);\n\t\t}\n\t}\n\n\tprivate onContextMenu(e: ITreeContextMenuEvent<IExpression | IScope>): void {\n\t\tconst variable = e.element;\n\t\tif (variable instanceof Variable && !!variable.value) {\n\t\t\tconst actions: IAction[] = [];\n\t\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\t\tif (session && session.capabilities.supportsSetVariable) {\n\t\t\t\tactions.push(new Action('workbench.setValue', nls.localize('setValue', \"Set Value\"), undefined, true, () => {\n\t\t\t\t\tthis.debugService.getViewModel().setSelectedExpression(variable);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}));\n\t\t\t}\n\t\t\tactions.push(this.instantiationService.createInstance(CopyValueAction, CopyValueAction.ID, CopyValueAction.LABEL, variable, 'variables'));\n\t\t\tif (variable.evaluateName) {\n\t\t\t\tactions.push(new Action('debug.copyEvaluatePath', nls.localize('copyAsExpression', \"Copy as Expression\"), undefined, true, () => {\n\t\t\t\t\tthis.clipboardService.writeText(variable.evaluateName!);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}));\n\t\t\t\tactions.push(new Separator());\n\t\t\t\tactions.push(new Action('debug.addToWatchExpressions', nls.localize('addToWatchExpressions', \"Add to Watch\"), undefined, true, () => {\n\t\t\t\t\tthis.debugService.addWatchExpression(variable.evaluateName);\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => e.anchor,\n\t\t\t\tgetActions: () => actions,\n\t\t\t\tgetActionsContext: () => variable\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction isViewModel(obj: any): obj is IViewModel {\n\treturn typeof obj.getSelectedExpression === 'function';\n}\n\nexport class VariablesDataSource implements IAsyncDataSource<IViewModel, IExpression | IScope> {\n\n\thasChildren(element: IViewModel | IExpression | IScope): boolean {\n\t\tif (isViewModel(element) || element instanceof Scope) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn element.hasChildren;\n\t}\n\n\tgetChildren(element: IViewModel | IExpression | IScope): Promise<(IExpression | IScope)[]> {\n\t\tif (isViewModel(element)) {\n\t\t\tconst stackFrame = element.focusedStackFrame;\n\t\t\treturn stackFrame ? stackFrame.getScopes() : Promise.resolve([]);\n\t\t}\n\n\t\treturn element.getChildren();\n\t}\n}\n\ninterface IScopeTemplateData {\n\tname: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\nclass VariablesDelegate implements IListVirtualDelegate<IExpression | IScope> {\n\n\tgetHeight(element: IExpression | IScope): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: IExpression | IScope): string {\n\t\tif (element instanceof Scope) {\n\t\t\treturn ScopesRenderer.ID;\n\t\t}\n\n\t\treturn VariablesRenderer.ID;\n\t}\n}\n\nclass ScopesRenderer implements ITreeRenderer<IScope, FuzzyScore, IScopeTemplateData> {\n\n\tstatic readonly ID = 'scope';\n\n\tget templateId(): string {\n\t\treturn ScopesRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IScopeTemplateData {\n\t\tconst name = dom.append(container, $('.scope'));\n\t\tconst label = new HighlightedLabel(name, false);\n\n\t\treturn { name, label };\n\t}\n\n\trenderElement(element: ITreeNode<IScope, FuzzyScore>, index: number, templateData: IScopeTemplateData): void {\n\t\ttemplateData.label.set(element.element.name, createMatches(element.filterData));\n\t}\n\n\tdisposeTemplate(templateData: IScopeTemplateData): void {\n\t\t// noop\n\t}\n}\n\nexport class VariablesRenderer extends AbstractExpressionsRenderer {\n\n\tstatic readonly ID = 'variable';\n\n\tget templateId(): string {\n\t\treturn VariablesRenderer.ID;\n\t}\n\n\tprotected renderExpression(expression: IExpression, data: IExpressionTemplateData, highlights: IHighlight[]): void {\n\t\trenderVariable(expression as Variable, data, true, highlights);\n\t}\n\n\tprotected getInputBoxOptions(expression: IExpression): IInputBoxOptions {\n\t\tconst variable = <Variable>expression;\n\t\treturn {\n\t\t\tinitialValue: expression.value,\n\t\t\tariaLabel: nls.localize('variableValueAriaLabel', \"Type new variable value\"),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: () => variable.errorMessage ? ({ content: variable.errorMessage }) : null\n\t\t\t},\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tvariable.errorMessage = undefined;\n\t\t\t\tif (success && variable.value !== value) {\n\t\t\t\t\tvariable.setVariable(value)\n\t\t\t\t\t\t// Need to force watch expressions and variables to update since a variable change can have an effect on both\n\t\t\t\t\t\t.then(() => variableSetEmitter.fire());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass VariablesAccessibilityProvider implements IAccessibilityProvider<IExpression | IScope> {\n\tgetAriaLabel(element: IExpression | IScope): string | null {\n\t\tif (element instanceof Scope) {\n\t\t\treturn nls.localize('variableScopeAriaLabel', \"Scope {0}, variables, debug\", element.name);\n\t\t}\n\t\tif (element instanceof Variable) {\n\t\t\treturn nls.localize('variableAriaLabel', \"{0} value {1}, variables, debug\", element.name, element.value);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}]}