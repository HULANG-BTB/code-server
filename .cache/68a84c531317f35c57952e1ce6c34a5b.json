{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/services/editor/common/editorGroupsService\", \"vs/workbench/services/editor/common/editorService\"], function (require, exports, editorGroupsService_1, editorService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function viewColumnToEditorGroup(editorGroupService, position) {\n        if (typeof position !== 'number' || position === editorService_1.ACTIVE_GROUP) {\n            return editorService_1.ACTIVE_GROUP; // prefer active group when position is undefined or passed in as such\n        }\n        const groups = editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n        let candidate = groups[position];\n        if (candidate) {\n            return candidate.id; // found direct match\n        }\n        let firstGroup = groups[0];\n        if (groups.length === 1 && firstGroup.count === 0) {\n            return firstGroup.id; // first editor should always open in first group independent from position provided\n        }\n        return editorService_1.SIDE_GROUP; // open to the side if group not found or we are instructed to\n    }\n    exports.viewColumnToEditorGroup = viewColumnToEditorGroup;\n    function editorGroupToViewColumn(editorGroupService, editorGroup) {\n        const group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n        if (!group) {\n            throw new Error('Invalid group provided');\n        }\n        return editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE).indexOf(group);\n    }\n    exports.editorGroupToViewColumn = editorGroupToViewColumn;\n});\n",null]}