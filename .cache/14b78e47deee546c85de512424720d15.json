{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/charCode\", \"vs/editor/common/core/characterClassifier\"], function (require, exports, charCode_1, characterClassifier_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var WordCharacterClass;\n    (function (WordCharacterClass) {\n        WordCharacterClass[WordCharacterClass[\"Regular\"] = 0] = \"Regular\";\n        WordCharacterClass[WordCharacterClass[\"Whitespace\"] = 1] = \"Whitespace\";\n        WordCharacterClass[WordCharacterClass[\"WordSeparator\"] = 2] = \"WordSeparator\";\n    })(WordCharacterClass = exports.WordCharacterClass || (exports.WordCharacterClass = {}));\n    class WordCharacterClassifier extends characterClassifier_1.CharacterClassifier {\n        constructor(wordSeparators) {\n            super(WordCharacterClass.Regular);\n            for (let i = 0, len = wordSeparators.length; i < len; i++) {\n                this.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n            }\n            this.set(charCode_1.CharCode.Space, WordCharacterClass.Whitespace);\n            this.set(charCode_1.CharCode.Tab, WordCharacterClass.Whitespace);\n        }\n    }\n    exports.WordCharacterClassifier = WordCharacterClassifier;\n    function once(computeFn) {\n        let cache = {}; // TODO@Alex unbounded cache\n        return (input) => {\n            if (!cache.hasOwnProperty(input)) {\n                cache[input] = computeFn(input);\n            }\n            return cache[input];\n        };\n    }\n    exports.getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));\n});\n",null]}