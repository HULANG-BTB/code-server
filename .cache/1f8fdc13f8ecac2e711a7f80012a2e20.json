{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/layout.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/layout.ts","mtime":1555846338036},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar platform_2 = require(\"vs/base/common/platform\");\nvar sidebarPart_1 = require(\"vs/workbench/browser/parts/sidebar/sidebarPart\");\nvar panelPart_1 = require(\"vs/workbench/browser/parts/panel/panelPart\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar titleService_1 = require(\"vs/workbench/services/title/common/titleService\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar grid_1 = require(\"vs/base/browser/ui/grid/grid\");\nvar legacyLayout_1 = require(\"vs/workbench/browser/legacyLayout\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar activityBarService_1 = require(\"vs/workbench/services/activityBar/browser/activityBarService\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar Settings;\n(function (Settings) {\n    Settings[\"MENUBAR_VISIBLE\"] = \"window.menuBarVisibility\";\n    Settings[\"ACTIVITYBAR_VISIBLE\"] = \"workbench.activityBar.visible\";\n    Settings[\"STATUSBAR_VISIBLE\"] = \"workbench.statusBar.visible\";\n    Settings[\"SIDEBAR_POSITION\"] = \"workbench.sideBar.location\";\n    Settings[\"PANEL_POSITION\"] = \"workbench.panel.defaultLocation\";\n    Settings[\"ZEN_MODE_RESTORE\"] = \"zenMode.restore\";\n})(Settings || (Settings = {}));\nvar Storage;\n(function (Storage) {\n    Storage[\"SIDEBAR_HIDDEN\"] = \"workbench.sidebar.hidden\";\n    Storage[\"PANEL_HIDDEN\"] = \"workbench.panel.hidden\";\n    Storage[\"PANEL_POSITION\"] = \"workbench.panel.location\";\n    Storage[\"ZEN_MODE_ENABLED\"] = \"workbench.zenmode.active\";\n    Storage[\"CENTERED_LAYOUT_ENABLED\"] = \"workbench.centerededitorlayout.active\";\n})(Storage || (Storage = {}));\nvar Layout = /** @class */ (function (_super) {\n    tslib_1.__extends(Layout, _super);\n    function Layout(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this._onTitleBarVisibilityChange = _this._register(new event_1.Emitter());\n        _this._onZenMode = _this._register(new event_1.Emitter());\n        _this._onLayout = _this._register(new event_1.Emitter());\n        _this._container = document.createElement('div');\n        _this.parts = new Map();\n        _this.state = {\n            fullscreen: false,\n            menuBar: {\n                visibility: 'default',\n                toggled: false\n            },\n            activityBar: {\n                hidden: false\n            },\n            sideBar: {\n                hidden: false,\n                position: layoutService_1.Position.LEFT,\n                width: 300,\n                viewletToRestore: undefined\n            },\n            editor: {\n                hidden: false,\n                centered: false,\n                restoreCentered: false,\n                restoreEditors: false,\n                editorsToOpen: []\n            },\n            panel: {\n                hidden: false,\n                position: layoutService_1.Position.BOTTOM,\n                height: 350,\n                width: 350,\n                panelToRestore: undefined\n            },\n            statusBar: {\n                hidden: false\n            },\n            zenMode: {\n                active: false,\n                restore: false,\n                transitionedToFullScreen: false,\n                transitionedToCenteredEditorLayout: false,\n                wasSideBarVisible: false,\n                wasPanelVisible: false,\n                transitionDisposeables: []\n            }\n        };\n        return _this;\n    }\n    Object.defineProperty(Layout.prototype, \"onTitleBarVisibilityChange\", {\n        get: function () { return this._onTitleBarVisibilityChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layout.prototype, \"onZenModeChange\", {\n        get: function () { return this._onZenMode.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layout.prototype, \"onLayout\", {\n        get: function () { return this._onLayout.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layout.prototype, \"dimension\", {\n        get: function () { return this._dimension; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layout.prototype, \"container\", {\n        get: function () { return this._container; },\n        enumerable: true,\n        configurable: true\n    });\n    Layout.prototype.initLayout = function (accessor) {\n        // Services\n        this.environmentService = accessor.get(environment_1.IEnvironmentService);\n        this.configurationService = accessor.get(configuration_1.IConfigurationService);\n        this.lifecycleService = accessor.get(lifecycle_2.ILifecycleService);\n        this.windowService = accessor.get(windows_1.IWindowService);\n        this.contextService = accessor.get(workspace_1.IWorkspaceContextService);\n        this.storageService = accessor.get(storage_1.IStorageService);\n        // Parts\n        this.editorService = accessor.get(editorService_1.IEditorService);\n        this.editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n        this.panelService = accessor.get(panelService_1.IPanelService);\n        this.viewletService = accessor.get(viewlet_1.IViewletService);\n        this.titleService = accessor.get(titleService_1.ITitleService);\n        accessor.get(statusbar_1.IStatusbarService); // not used, but called to ensure instantiated\n        accessor.get(activityBarService_1.IActivityBarService); // not used, but called to ensure instantiated\n        // Listeners\n        this.registerLayoutListeners();\n        // State\n        this.initLayoutState(accessor.get(lifecycle_2.ILifecycleService));\n    };\n    Layout.prototype.registerLayoutListeners = function () {\n        var _this = this;\n        // Storage\n        this._register(this.storageService.onWillSaveState(function (e) { return _this.saveLayoutState(e); }));\n        // Restore editor if hidden and it changes\n        this._register(this.editorService.onDidVisibleEditorsChange(function () { return _this.setEditorHidden(false); }));\n        this._register(this.editorGroupService.onDidActivateGroup(function () { return _this.setEditorHidden(false); }));\n        // Configuration changes\n        this._register(this.configurationService.onDidChangeConfiguration(function () { return _this.doUpdateLayoutConfiguration(); }));\n        // Fullscreen changes\n        this._register(browser_1.onDidChangeFullscreen(function () { return _this.onFullscreenChanged(); }));\n        // Group changes\n        this._register(this.editorGroupService.onDidAddGroup(function () { return _this.centerEditorLayout(_this.state.editor.centered); }));\n        this._register(this.editorGroupService.onDidRemoveGroup(function () { return _this.centerEditorLayout(_this.state.editor.centered); }));\n        // Prevent workbench from scrolling #55456\n        this._register(dom_1.addDisposableListener(this.container, dom_1.EventType.SCROLL, function () { return _this.container.scrollTop = 0; }));\n        // Menubar visibility changes\n        // if ((isWeb || isWindows || isLinux) && getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n        this._register(this.titleService.onMenubarVisibilityChange(function (visible) { return _this.onMenubarToggled(visible); }));\n        // }\n    };\n    Layout.prototype.onMenubarToggled = function (visible) {\n        if (visible !== this.state.menuBar.toggled) {\n            this.state.menuBar.toggled = visible;\n            if ((this.state.menuBar.visibility === 'toggle' || this.state.menuBar.visibility === 'default')) {\n                this._onTitleBarVisibilityChange.fire();\n                this.layout();\n            }\n        }\n    };\n    Layout.prototype.onFullscreenChanged = function () {\n        this.state.fullscreen = browser_1.isFullscreen();\n        // Apply as CSS class\n        if (this.state.fullscreen) {\n            dom_1.addClass(this.container, 'fullscreen');\n        }\n        else {\n            dom_1.removeClass(this.container, 'fullscreen');\n            if (this.state.zenMode.transitionedToFullScreen && this.state.zenMode.active) {\n                this.toggleZenMode();\n            }\n        }\n        // Changing fullscreen state of the window has an impact on custom title bar visibility, so we need to update\n        if (windows_1.getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n            this._onTitleBarVisibilityChange.fire();\n            this.layout(); // handle title bar when fullscreen changes\n        }\n    };\n    Layout.prototype.doUpdateLayoutConfiguration = function (skipLayout) {\n        // Sidebar position\n        var newSidebarPositionValue = this.configurationService.getValue(Settings.SIDEBAR_POSITION);\n        var newSidebarPosition = (newSidebarPositionValue === 'right') ? layoutService_1.Position.RIGHT : layoutService_1.Position.LEFT;\n        if (newSidebarPosition !== this.getSideBarPosition()) {\n            this.setSideBarPosition(newSidebarPosition);\n        }\n        // Panel position\n        this.updatePanelPosition();\n        if (!this.state.zenMode.active) {\n            // Statusbar visibility\n            var newStatusbarHiddenValue = !this.configurationService.getValue(Settings.STATUSBAR_VISIBLE);\n            if (newStatusbarHiddenValue !== this.state.statusBar.hidden) {\n                this.setStatusBarHidden(newStatusbarHiddenValue, skipLayout);\n            }\n            // Activitybar visibility\n            var newActivityBarHiddenValue = !this.configurationService.getValue(Settings.ACTIVITYBAR_VISIBLE);\n            if (newActivityBarHiddenValue !== this.state.activityBar.hidden) {\n                this.setActivityBarHidden(newActivityBarHiddenValue, skipLayout);\n            }\n        }\n        // Menubar visibility\n        var newMenubarVisibility = this.configurationService.getValue(Settings.MENUBAR_VISIBLE);\n        this.setMenubarVisibility(newMenubarVisibility, !!skipLayout);\n    };\n    Layout.prototype.setSideBarPosition = function (position) {\n        var activityBar = this.getPart(layoutService_1.Parts.ACTIVITYBAR_PART);\n        var sideBar = this.getPart(layoutService_1.Parts.SIDEBAR_PART);\n        var wasHidden = this.state.sideBar.hidden;\n        if (this.state.sideBar.hidden) {\n            this.setSideBarHidden(false, true /* Skip Layout */);\n        }\n        var newPositionValue = (position === layoutService_1.Position.LEFT) ? 'left' : 'right';\n        var oldPositionValue = (this.state.sideBar.position === layoutService_1.Position.LEFT) ? 'left' : 'right';\n        this.state.sideBar.position = position;\n        // Adjust CSS\n        dom_1.removeClass(activityBar.getContainer(), oldPositionValue);\n        dom_1.removeClass(sideBar.getContainer(), oldPositionValue);\n        dom_1.addClass(activityBar.getContainer(), newPositionValue);\n        dom_1.addClass(sideBar.getContainer(), newPositionValue);\n        // Update Styles\n        activityBar.updateStyles();\n        sideBar.updateStyles();\n        // Layout\n        if (this.workbenchGrid instanceof grid_1.Grid) {\n            if (!wasHidden) {\n                this.state.sideBar.width = this.workbenchGrid.getViewSize(this.sideBarPartView);\n            }\n            this.workbenchGrid.removeView(this.sideBarPartView);\n            this.workbenchGrid.removeView(this.activityBarPartView);\n            if (!this.state.panel.hidden && this.state.panel.position === layoutService_1.Position.BOTTOM) {\n                this.workbenchGrid.removeView(this.panelPartView);\n            }\n            this.layout();\n        }\n        else {\n            this.workbenchGrid.layout();\n        }\n    };\n    Layout.prototype.initLayoutState = function (lifecycleService) {\n        // Fullscreen\n        this.state.fullscreen = browser_1.isFullscreen();\n        // Menubar visibility\n        this.state.menuBar.visibility = this.configurationService.getValue(Settings.MENUBAR_VISIBLE);\n        // Activity bar visibility\n        this.state.activityBar.hidden = !this.configurationService.getValue(Settings.ACTIVITYBAR_VISIBLE);\n        // Sidebar visibility\n        this.state.sideBar.hidden = this.storageService.getBoolean(Storage.SIDEBAR_HIDDEN, storage_1.StorageScope.WORKSPACE, this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY);\n        // Sidebar position\n        this.state.sideBar.position = (this.configurationService.getValue(Settings.SIDEBAR_POSITION) === 'right') ? layoutService_1.Position.RIGHT : layoutService_1.Position.LEFT;\n        // Sidebar viewlet\n        if (!this.state.sideBar.hidden) {\n            // Only restore last viewlet if window was reloaded or we are in development mode\n            var viewletToRestore = void 0;\n            if (!this.environmentService.isBuilt || lifecycleService.startupKind === lifecycle_2.StartupKind.ReloadedWindow) {\n                viewletToRestore = this.storageService.get(sidebarPart_1.SidebarPart.activeViewletSettingsKey, storage_1.StorageScope.WORKSPACE, this.viewletService.getDefaultViewletId());\n            }\n            else {\n                viewletToRestore = this.viewletService.getDefaultViewletId();\n            }\n            if (viewletToRestore) {\n                this.state.sideBar.viewletToRestore = viewletToRestore;\n            }\n            else {\n                this.state.sideBar.hidden = true; // we hide sidebar if there is no viewlet to restore\n            }\n        }\n        // Editor centered layout\n        this.state.editor.restoreCentered = this.storageService.getBoolean(Storage.CENTERED_LAYOUT_ENABLED, storage_1.StorageScope.WORKSPACE, false);\n        // Editors to open\n        this.state.editor.editorsToOpen = this.resolveEditorsToOpen();\n        // Panel visibility\n        this.state.panel.hidden = this.storageService.getBoolean(Storage.PANEL_HIDDEN, storage_1.StorageScope.WORKSPACE, true);\n        // Panel position\n        this.updatePanelPosition();\n        // Panel to restore\n        if (!this.state.panel.hidden) {\n            var panelRegistry = platform_1.Registry.as(panel_1.Extensions.Panels);\n            var panelToRestore = this.storageService.get(panelPart_1.PanelPart.activePanelSettingsKey, storage_1.StorageScope.WORKSPACE, panelRegistry.getDefaultPanelId());\n            if (!panelRegistry.hasPanel(panelToRestore)) {\n                panelToRestore = panelRegistry.getDefaultPanelId(); // fallback to default if panel is unknown\n            }\n            if (panelToRestore) {\n                this.state.panel.panelToRestore = panelToRestore;\n            }\n            else {\n                this.state.panel.hidden = true; // we hide panel if there is no panel to restore\n            }\n        }\n        // Statusbar visibility\n        this.state.statusBar.hidden = !this.configurationService.getValue(Settings.STATUSBAR_VISIBLE);\n        // Zen mode enablement\n        this.state.zenMode.restore = this.storageService.getBoolean(Storage.ZEN_MODE_ENABLED, storage_1.StorageScope.WORKSPACE, false) && this.configurationService.getValue(Settings.ZEN_MODE_RESTORE);\n    };\n    Layout.prototype.resolveEditorsToOpen = function () {\n        var configuration = this.windowService.getConfiguration();\n        var hasInitialFilesToOpen = this.hasInitialFilesToOpen();\n        // Only restore editors if we are not instructed to open files initially\n        this.state.editor.restoreEditors = !hasInitialFilesToOpen;\n        // Files to open, diff or create\n        if (hasInitialFilesToOpen) {\n            // Files to diff is exclusive\n            var filesToDiff = this.toInputs(configuration.filesToDiff, false);\n            if (filesToDiff && filesToDiff.length === 2) {\n                return [{\n                        leftResource: filesToDiff[0].resource,\n                        rightResource: filesToDiff[1].resource,\n                        options: { pinned: true },\n                        forceFile: true\n                    }];\n            }\n            var filesToCreate = this.toInputs(configuration.filesToCreate, true);\n            var filesToOpen = this.toInputs(configuration.filesToOpen, false);\n            // Otherwise: Open/Create files\n            return filesToOpen.concat(filesToCreate);\n        }\n        // Empty workbench\n        else if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY && this.configurationService.inspect('workbench.startupEditor').value === 'newUntitledFile') {\n            var isEmpty = this.editorGroupService.count === 1 && this.editorGroupService.activeGroup.count === 0;\n            if (!isEmpty) {\n                return []; // do not open any empty untitled file if we restored editors from previous session\n            }\n            return this.backupFileService.hasBackups().then(function (hasBackups) {\n                if (hasBackups) {\n                    return []; // do not open any empty untitled file if we have backups to restore\n                }\n                return [{}];\n            });\n        }\n        return [];\n    };\n    Layout.prototype.hasInitialFilesToOpen = function () {\n        var configuration = this.windowService.getConfiguration();\n        return !!((configuration.filesToCreate && configuration.filesToCreate.length > 0) ||\n            (configuration.filesToOpen && configuration.filesToOpen.length > 0) ||\n            (configuration.filesToDiff && configuration.filesToDiff.length > 0));\n    };\n    Layout.prototype.toInputs = function (paths, isNew) {\n        if (!paths || !paths.length) {\n            return [];\n        }\n        return arrays_1.coalesce(paths.map(function (p) {\n            var resource = p.fileUri;\n            if (!resource) {\n                return undefined;\n            }\n            var input;\n            if (isNew) {\n                input = { filePath: resource.fsPath, options: { pinned: true } };\n            }\n            else {\n                input = { resource: resource, options: { pinned: true }, forceFile: true };\n            }\n            if (!isNew && typeof p.lineNumber === 'number') {\n                input.options.selection = {\n                    startLineNumber: p.lineNumber,\n                    startColumn: p.columnNumber || 1\n                };\n            }\n            return input;\n        }));\n    };\n    Layout.prototype.updatePanelPosition = function () {\n        var defaultPanelPosition = this.configurationService.getValue(Settings.PANEL_POSITION);\n        var panelPosition = this.storageService.get(Storage.PANEL_POSITION, storage_1.StorageScope.WORKSPACE, defaultPanelPosition);\n        this.state.panel.position = (panelPosition === 'right') ? layoutService_1.Position.RIGHT : layoutService_1.Position.BOTTOM;\n    };\n    Layout.prototype.registerPart = function (part) {\n        this.parts.set(part.getId(), part);\n    };\n    Layout.prototype.getPart = function (key) {\n        var part = this.parts.get(key);\n        if (!part) {\n            throw new Error(\"Unknown part \" + key);\n        }\n        return part;\n    };\n    Layout.prototype.isRestored = function () {\n        return this.lifecycleService.phase >= lifecycle_2.LifecyclePhase.Restored;\n    };\n    Layout.prototype.hasFocus = function (part) {\n        var activeElement = document.activeElement;\n        if (!activeElement) {\n            return false;\n        }\n        var container = this.getContainer(part);\n        return dom_1.isAncestor(activeElement, container);\n    };\n    Layout.prototype.getContainer = function (part) {\n        switch (part) {\n            case layoutService_1.Parts.TITLEBAR_PART:\n                return this.getPart(layoutService_1.Parts.TITLEBAR_PART).getContainer();\n            case layoutService_1.Parts.ACTIVITYBAR_PART:\n                return this.getPart(layoutService_1.Parts.ACTIVITYBAR_PART).getContainer();\n            case layoutService_1.Parts.SIDEBAR_PART:\n                return this.getPart(layoutService_1.Parts.SIDEBAR_PART).getContainer();\n            case layoutService_1.Parts.PANEL_PART:\n                return this.getPart(layoutService_1.Parts.PANEL_PART).getContainer();\n            case layoutService_1.Parts.EDITOR_PART:\n                return this.getPart(layoutService_1.Parts.EDITOR_PART).getContainer();\n            case layoutService_1.Parts.STATUSBAR_PART:\n                return this.getPart(layoutService_1.Parts.STATUSBAR_PART).getContainer();\n        }\n    };\n    Layout.prototype.isVisible = function (part) {\n        switch (part) {\n            case layoutService_1.Parts.TITLEBAR_PART:\n                if (this.state.menuBar.visibility === 'hidden') {\n                    return false;\n                }\n                else if (this.state.menuBar.visibility === 'toggle') {\n                    return this.state.menuBar.toggled;\n                }\n                else if (windows_1.getTitleBarStyle(this.configurationService, this.environmentService) === 'native') {\n                    return false;\n                }\n                else if (!this.state.fullscreen) {\n                    return true;\n                }\n                else if (platform_2.isNative && platform_2.isMacintosh) {\n                    return false;\n                }\n                else if (this.state.menuBar.visibility === 'visible') {\n                    return true;\n                }\n                return false;\n            case layoutService_1.Parts.SIDEBAR_PART:\n                return !this.state.sideBar.hidden;\n            case layoutService_1.Parts.PANEL_PART:\n                return !this.state.panel.hidden;\n            case layoutService_1.Parts.STATUSBAR_PART:\n                return !this.state.statusBar.hidden;\n            case layoutService_1.Parts.ACTIVITYBAR_PART:\n                return !this.state.activityBar.hidden;\n            case layoutService_1.Parts.EDITOR_PART:\n                return this.workbenchGrid instanceof grid_1.Grid ? !this.state.editor.hidden : true;\n        }\n        return true; // any other part cannot be hidden\n    };\n    Layout.prototype.getTitleBarOffset = function () {\n        var offset = 0;\n        if (this.isVisible(layoutService_1.Parts.TITLEBAR_PART)) {\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                offset = this.getPart(layoutService_1.Parts.TITLEBAR_PART).maximumHeight;\n            }\n            else {\n                offset = this.workbenchGrid.partLayoutInfo.titlebar.height;\n                if ((platform_2.isNative && platform_2.isMacintosh) || this.state.menuBar.visibility === 'hidden') {\n                    offset /= browser_1.getZoomFactor();\n                }\n            }\n        }\n        return offset;\n    };\n    Layout.prototype.getWorkbenchElement = function () {\n        return this.container;\n    };\n    Layout.prototype.toggleZenMode = function (skipLayout, restoring) {\n        var _this = this;\n        if (restoring === void 0) { restoring = false; }\n        this.state.zenMode.active = !this.state.zenMode.active;\n        this.state.zenMode.transitionDisposeables = lifecycle_1.dispose(this.state.zenMode.transitionDisposeables);\n        var setLineNumbers = function (lineNumbers) { return _this.editorService.visibleTextEditorWidgets.forEach(function (editor) { return editor.updateOptions({ lineNumbers: lineNumbers }); }); };\n        // Check if zen mode transitioned to full screen and if now we are out of zen mode\n        // -> we need to go out of full screen (same goes for the centered editor layout)\n        var toggleFullScreen = false;\n        // Zen Mode Active\n        if (this.state.zenMode.active) {\n            var config = this.configurationService.getValue('zenMode');\n            toggleFullScreen = !this.state.fullscreen && config.fullScreen;\n            this.state.zenMode.transitionedToFullScreen = restoring ? config.fullScreen : toggleFullScreen;\n            this.state.zenMode.transitionedToCenteredEditorLayout = !this.isEditorLayoutCentered() && config.centerLayout;\n            this.state.zenMode.wasSideBarVisible = this.isVisible(layoutService_1.Parts.SIDEBAR_PART);\n            this.state.zenMode.wasPanelVisible = this.isVisible(layoutService_1.Parts.PANEL_PART);\n            this.setPanelHidden(true, true);\n            this.setSideBarHidden(true, true);\n            if (config.hideActivityBar) {\n                this.setActivityBarHidden(true, true);\n            }\n            if (config.hideStatusBar) {\n                this.setStatusBarHidden(true, true);\n            }\n            if (config.hideLineNumbers) {\n                setLineNumbers('off');\n                this.state.zenMode.transitionDisposeables.push(this.editorService.onDidVisibleEditorsChange(function () { return setLineNumbers('off'); }));\n            }\n            if (config.hideTabs && this.editorGroupService.partOptions.showTabs) {\n                this.state.zenMode.transitionDisposeables.push(this.editorGroupService.enforcePartOptions({ showTabs: false }));\n            }\n            if (config.centerLayout) {\n                this.centerEditorLayout(true, true);\n            }\n        }\n        // Zen Mode Inactive\n        else {\n            if (this.state.zenMode.wasPanelVisible) {\n                this.setPanelHidden(false, true);\n            }\n            if (this.state.zenMode.wasSideBarVisible) {\n                this.setSideBarHidden(false, true);\n            }\n            if (this.state.zenMode.transitionedToCenteredEditorLayout) {\n                this.centerEditorLayout(false, true);\n            }\n            setLineNumbers(this.configurationService.getValue('editor.lineNumbers'));\n            // Status bar and activity bar visibility come from settings -> update their visibility.\n            this.doUpdateLayoutConfiguration(true);\n            this.editorGroupService.activeGroup.focus();\n            toggleFullScreen = this.state.zenMode.transitionedToFullScreen && this.state.fullscreen;\n        }\n        if (!skipLayout) {\n            this.layout();\n        }\n        if (toggleFullScreen) {\n            this.windowService.toggleFullScreen();\n        }\n        // Event\n        this._onZenMode.fire(this.state.zenMode.active);\n    };\n    Layout.prototype.setStatusBarHidden = function (hidden, skipLayout) {\n        this.state.statusBar.hidden = hidden;\n        // Adjust CSS\n        if (hidden) {\n            dom_1.addClass(this.container, 'nostatusbar');\n        }\n        else {\n            dom_1.removeClass(this.container, 'nostatusbar');\n        }\n        // Layout\n        if (!skipLayout) {\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                this.layout();\n            }\n            else {\n                this.workbenchGrid.layout();\n            }\n        }\n    };\n    Layout.prototype.createWorkbenchLayout = function (instantiationService) {\n        var titleBar = this.getPart(layoutService_1.Parts.TITLEBAR_PART);\n        var editorPart = this.getPart(layoutService_1.Parts.EDITOR_PART);\n        var activityBar = this.getPart(layoutService_1.Parts.ACTIVITYBAR_PART);\n        var panelPart = this.getPart(layoutService_1.Parts.PANEL_PART);\n        var sideBar = this.getPart(layoutService_1.Parts.SIDEBAR_PART);\n        var statusBar = this.getPart(layoutService_1.Parts.STATUSBAR_PART);\n        if (this.configurationService.getValue('workbench.useExperimentalGridLayout')) {\n            // Create view wrappers for all parts\n            this.titleBarPartView = new grid_1.View(titleBar);\n            this.sideBarPartView = new grid_1.View(sideBar);\n            this.activityBarPartView = new grid_1.View(activityBar);\n            this.editorPartView = new grid_1.View(editorPart);\n            this.panelPartView = new grid_1.View(panelPart);\n            this.statusBarPartView = new grid_1.View(statusBar);\n            this.workbenchGrid = new grid_1.Grid(this.editorPartView, { proportionalLayout: false });\n            this.container.prepend(this.workbenchGrid.element);\n        }\n        else {\n            this.workbenchGrid = instantiationService.createInstance(legacyLayout_1.WorkbenchLegacyLayout, this.parent, this.container, {\n                titlebar: titleBar,\n                activitybar: activityBar,\n                editor: editorPart,\n                sidebar: sideBar,\n                panel: panelPart,\n                statusbar: statusBar,\n            });\n        }\n    };\n    Layout.prototype.layout = function (options) {\n        if (!this.disposed) {\n            this._dimension = dom_1.getClientArea(this.parent);\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                dom_1.position(this.container, 0, 0, 0, 0, 'relative');\n                dom_1.size(this.container, this._dimension.width, this._dimension.height);\n                // Layout the grid widget\n                this.workbenchGrid.layout(this._dimension.width, this._dimension.height);\n                // Layout grid views\n                this.layoutGrid();\n            }\n            else {\n                this.workbenchGrid.layout(options);\n            }\n            // Emit as event\n            this._onLayout.fire(this._dimension);\n        }\n    };\n    Layout.prototype.layoutGrid = function () {\n        if (!(this.workbenchGrid instanceof grid_1.Grid)) {\n            return;\n        }\n        var panelInGrid = this.workbenchGrid.hasView(this.panelPartView);\n        var sidebarInGrid = this.workbenchGrid.hasView(this.sideBarPartView);\n        var activityBarInGrid = this.workbenchGrid.hasView(this.activityBarPartView);\n        var statusBarInGrid = this.workbenchGrid.hasView(this.statusBarPartView);\n        var titlebarInGrid = this.workbenchGrid.hasView(this.titleBarPartView);\n        // Add parts to grid\n        if (!statusBarInGrid) {\n            this.workbenchGrid.addView(this.statusBarPartView, grid_1.Sizing.Split, this.editorPartView, grid_1.Direction.Down);\n            statusBarInGrid = true;\n        }\n        if (!titlebarInGrid && windows_1.getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n            this.workbenchGrid.addView(this.titleBarPartView, grid_1.Sizing.Split, this.editorPartView, grid_1.Direction.Up);\n            titlebarInGrid = true;\n        }\n        if (!activityBarInGrid) {\n            this.workbenchGrid.addView(this.activityBarPartView, grid_1.Sizing.Split, panelInGrid && this.state.sideBar.position === this.state.panel.position ? this.panelPartView : this.editorPartView, this.state.sideBar.position === layoutService_1.Position.RIGHT ? grid_1.Direction.Right : grid_1.Direction.Left);\n            activityBarInGrid = true;\n        }\n        if (!sidebarInGrid) {\n            this.workbenchGrid.addView(this.sideBarPartView, this.state.sideBar.width !== undefined ? this.state.sideBar.width : grid_1.Sizing.Split, this.activityBarPartView, this.state.sideBar.position === layoutService_1.Position.LEFT ? grid_1.Direction.Right : grid_1.Direction.Left);\n            sidebarInGrid = true;\n        }\n        if (!panelInGrid) {\n            this.workbenchGrid.addView(this.panelPartView, this.getPanelDimension(this.state.panel.position) !== undefined ? this.getPanelDimension(this.state.panel.position) : grid_1.Sizing.Split, this.editorPartView, this.state.panel.position === layoutService_1.Position.BOTTOM ? grid_1.Direction.Down : grid_1.Direction.Right);\n            panelInGrid = true;\n        }\n        // Hide parts\n        if (this.state.panel.hidden) {\n            this.panelPartView.hide();\n        }\n        if (this.state.statusBar.hidden) {\n            this.statusBarPartView.hide();\n        }\n        if (!this.isVisible(layoutService_1.Parts.TITLEBAR_PART)) {\n            this.titleBarPartView.hide();\n        }\n        if (this.state.activityBar.hidden) {\n            this.activityBarPartView.hide();\n        }\n        if (this.state.sideBar.hidden) {\n            this.sideBarPartView.hide();\n        }\n        if (this.state.editor.hidden) {\n            this.editorPartView.hide();\n        }\n        // Show visible parts\n        if (!this.state.editor.hidden) {\n            this.editorPartView.show();\n        }\n        if (!this.state.statusBar.hidden) {\n            this.statusBarPartView.show();\n        }\n        if (this.isVisible(layoutService_1.Parts.TITLEBAR_PART)) {\n            this.titleBarPartView.show();\n        }\n        if (!this.state.activityBar.hidden) {\n            this.activityBarPartView.show();\n        }\n        if (!this.state.sideBar.hidden) {\n            this.sideBarPartView.show();\n        }\n        if (!this.state.panel.hidden) {\n            this.panelPartView.show();\n        }\n    };\n    Layout.prototype.getPanelDimension = function (position) {\n        return position === layoutService_1.Position.BOTTOM ? this.state.panel.height : this.state.panel.width;\n    };\n    Layout.prototype.isEditorLayoutCentered = function () {\n        return this.state.editor.centered;\n    };\n    Layout.prototype.centerEditorLayout = function (active, skipLayout) {\n        this.state.editor.centered = active;\n        this.storageService.store(Storage.CENTERED_LAYOUT_ENABLED, active, storage_1.StorageScope.WORKSPACE);\n        var smartActive = active;\n        if (this.editorGroupService.groups.length > 1 && this.configurationService.getValue('workbench.editor.centeredLayoutAutoResize')) {\n            smartActive = false; // Respect the auto resize setting - do not go into centered layout if there is more than 1 group.\n        }\n        // Enter Centered Editor Layout\n        if (this.editorGroupService.isLayoutCentered() !== smartActive) {\n            this.editorGroupService.centerLayout(smartActive);\n            if (!skipLayout) {\n                this.layout();\n            }\n        }\n    };\n    Layout.prototype.resizePart = function (part, sizeChange) {\n        var view;\n        switch (part) {\n            case layoutService_1.Parts.SIDEBAR_PART:\n                view = this.sideBarPartView;\n            case layoutService_1.Parts.PANEL_PART:\n                view = this.panelPartView;\n            case layoutService_1.Parts.EDITOR_PART:\n                view = this.editorPartView;\n                if (this.workbenchGrid instanceof grid_1.Grid) {\n                    this.workbenchGrid.resizeView(view, this.workbenchGrid.getViewSize(view) + sizeChange);\n                }\n                else {\n                    this.workbenchGrid.resizePart(part, sizeChange);\n                }\n                break;\n            default:\n                return; // Cannot resize other parts\n        }\n    };\n    Layout.prototype.setActivityBarHidden = function (hidden, skipLayout) {\n        this.state.activityBar.hidden = hidden;\n        // Layout\n        if (!skipLayout) {\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                this.layout();\n            }\n            else {\n                this.workbenchGrid.layout();\n            }\n        }\n    };\n    Layout.prototype.setEditorHidden = function (hidden, skipLayout) {\n        if (!(this.workbenchGrid instanceof grid_1.Grid) || hidden === this.state.editor.hidden) {\n            return;\n        }\n        this.state.editor.hidden = hidden;\n        // The editor and the panel cannot be hidden at the same time\n        if (this.state.editor.hidden && this.state.panel.hidden) {\n            this.setPanelHidden(false, true);\n        }\n        if (!skipLayout) {\n            this.layout();\n        }\n    };\n    Layout.prototype.setSideBarHidden = function (hidden, skipLayout) {\n        this.state.sideBar.hidden = hidden;\n        // Adjust CSS\n        if (hidden) {\n            dom_1.addClass(this.container, 'nosidebar');\n        }\n        else {\n            dom_1.removeClass(this.container, 'nosidebar');\n        }\n        // If sidebar becomes hidden, also hide the current active Viewlet if any\n        if (hidden && this.viewletService.getActiveViewlet()) {\n            this.viewletService.hideActiveViewlet();\n            // Pass Focus to Editor or Panel if Sidebar is now hidden\n            var activePanel = this.panelService.getActivePanel();\n            if (this.hasFocus(layoutService_1.Parts.PANEL_PART) && activePanel) {\n                activePanel.focus();\n            }\n            else {\n                this.editorGroupService.activeGroup.focus();\n            }\n        }\n        // If sidebar becomes visible, show last active Viewlet or default viewlet\n        else if (!hidden && !this.viewletService.getActiveViewlet()) {\n            var viewletToOpen = this.viewletService.getLastActiveViewletId();\n            if (viewletToOpen) {\n                var viewlet = this.viewletService.openViewlet(viewletToOpen, true);\n                if (!viewlet) {\n                    this.viewletService.openViewlet(this.viewletService.getDefaultViewletId(), true);\n                }\n            }\n        }\n        // Remember in settings\n        var defaultHidden = this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY;\n        if (hidden !== defaultHidden) {\n            this.storageService.store(Storage.SIDEBAR_HIDDEN, hidden ? 'true' : 'false', storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(Storage.SIDEBAR_HIDDEN, storage_1.StorageScope.WORKSPACE);\n        }\n        // Layout\n        if (!skipLayout) {\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                this.layout();\n            }\n            else {\n                this.workbenchGrid.layout();\n            }\n        }\n    };\n    Layout.prototype.setPanelHidden = function (hidden, skipLayout) {\n        this.state.panel.hidden = hidden;\n        // Adjust CSS\n        if (hidden) {\n            dom_1.addClass(this.container, 'nopanel');\n        }\n        else {\n            dom_1.removeClass(this.container, 'nopanel');\n        }\n        // If panel part becomes hidden, also hide the current active panel if any\n        if (hidden && this.panelService.getActivePanel()) {\n            this.panelService.hideActivePanel();\n            this.editorGroupService.activeGroup.focus(); // Pass focus to editor group if panel part is now hidden\n        }\n        // If panel part becomes visible, show last active panel or default panel\n        else if (!hidden && !this.panelService.getActivePanel()) {\n            var panelToOpen = this.panelService.getLastActivePanelId();\n            if (panelToOpen) {\n                var focus = !skipLayout;\n                this.panelService.openPanel(panelToOpen, focus);\n            }\n        }\n        // Remember in settings\n        if (!hidden) {\n            this.storageService.store(Storage.PANEL_HIDDEN, 'false', storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(Storage.PANEL_HIDDEN, storage_1.StorageScope.WORKSPACE);\n        }\n        // The editor and panel cannot be hidden at the same time\n        if (hidden && this.state.editor.hidden) {\n            this.setEditorHidden(false, true);\n        }\n        // Layout\n        if (!skipLayout) {\n            if (this.workbenchGrid instanceof grid_1.Grid) {\n                this.layout();\n            }\n            else {\n                this.workbenchGrid.layout();\n            }\n        }\n    };\n    Layout.prototype.toggleMaximizedPanel = function () {\n        if (this.workbenchGrid instanceof grid_1.Grid) {\n            this.workbenchGrid.maximizeViewSize(this.panelPartView);\n        }\n        else {\n            this.workbenchGrid.layout({ toggleMaximizedPanel: true, source: layoutService_1.Parts.PANEL_PART });\n        }\n    };\n    Layout.prototype.isPanelMaximized = function () {\n        if (this.workbenchGrid instanceof grid_1.Grid) {\n            try {\n                return this.workbenchGrid.getViewSize2(this.panelPartView).height === this.getPart(layoutService_1.Parts.PANEL_PART).maximumHeight;\n            }\n            catch (e) {\n                return false;\n            }\n        }\n        else {\n            return this.workbenchGrid.isPanelMaximized();\n        }\n    };\n    Layout.prototype.getSideBarPosition = function () {\n        return this.state.sideBar.position;\n    };\n    Layout.prototype.setMenubarVisibility = function (visibility, skipLayout) {\n        if (this.state.menuBar.visibility !== visibility) {\n            this.state.menuBar.visibility = visibility;\n            // Layout\n            if (!skipLayout) {\n                if (this.workbenchGrid instanceof grid_1.Grid) {\n                    var dimensions = dom_1.getClientArea(this.parent);\n                    this.workbenchGrid.layout(dimensions.width, dimensions.height);\n                }\n                else {\n                    this.workbenchGrid.layout();\n                }\n            }\n        }\n    };\n    Layout.prototype.getMenubarVisibility = function () {\n        return this.state.menuBar.visibility;\n    };\n    Layout.prototype.getPanelPosition = function () {\n        return this.state.panel.position;\n    };\n    Layout.prototype.setPanelPosition = function (position) {\n        var panelPart = this.getPart(layoutService_1.Parts.PANEL_PART);\n        var wasHidden = this.state.panel.hidden;\n        if (this.state.panel.hidden) {\n            this.setPanelHidden(false, true /* Skip Layout */);\n        }\n        else {\n            this.savePanelDimension();\n        }\n        var newPositionValue = (position === layoutService_1.Position.BOTTOM) ? 'bottom' : 'right';\n        var oldPositionValue = (this.state.panel.position === layoutService_1.Position.BOTTOM) ? 'bottom' : 'right';\n        this.state.panel.position = position;\n        function positionToString(position) {\n            switch (position) {\n                case layoutService_1.Position.LEFT: return 'left';\n                case layoutService_1.Position.RIGHT: return 'right';\n                case layoutService_1.Position.BOTTOM: return 'bottom';\n            }\n        }\n        this.storageService.store(Storage.PANEL_POSITION, positionToString(this.state.panel.position), storage_1.StorageScope.WORKSPACE);\n        // Adjust CSS\n        dom_1.removeClass(panelPart.getContainer(), oldPositionValue);\n        dom_1.addClass(panelPart.getContainer(), newPositionValue);\n        // Update Styles\n        panelPart.updateStyles();\n        // Layout\n        if (this.workbenchGrid instanceof grid_1.Grid) {\n            if (!wasHidden) {\n                this.savePanelDimension();\n            }\n            this.workbenchGrid.removeView(this.panelPartView);\n            this.layout();\n        }\n        else {\n            this.workbenchGrid.layout();\n        }\n    };\n    Layout.prototype.savePanelDimension = function () {\n        if (!(this.workbenchGrid instanceof grid_1.Grid)) {\n            return;\n        }\n        if (this.state.panel.position === layoutService_1.Position.BOTTOM) {\n            this.state.panel.height = this.workbenchGrid.getViewSize(this.panelPartView);\n        }\n        else {\n            this.state.panel.width = this.workbenchGrid.getViewSize(this.panelPartView);\n        }\n    };\n    Layout.prototype.saveLayoutState = function (e) {\n        // Zen Mode\n        if (this.state.zenMode.active) {\n            this.storageService.store(Storage.ZEN_MODE_ENABLED, true, storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(Storage.ZEN_MODE_ENABLED, storage_1.StorageScope.WORKSPACE);\n        }\n        if (e.reason === storage_1.WillSaveStateReason.SHUTDOWN && this.state.zenMode.active) {\n            if (!this.configurationService.getValue(Settings.ZEN_MODE_RESTORE)) {\n                this.toggleZenMode(true); // We will not restore zen mode, need to clear all zen mode state changes\n            }\n        }\n    };\n    Layout.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.disposed = true;\n    };\n    return Layout;\n}(lifecycle_1.Disposable));\nexports.Layout = Layout;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/layout.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/layout.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { EventType, addDisposableListener, addClass, removeClass, isAncestor, getClientArea, position, size } from 'vs/base/browser/dom';\nimport { onDidChangeFullscreen, isFullscreen, getZoomFactor } from 'vs/base/browser/browser';\nimport { IBackupFileService } from 'vs/workbench/services/backup/common/backup';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { isWindows, isLinux, isMacintosh, isNative } from 'vs/base/common/platform';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { IUntitledResourceInput, IResourceDiffInput } from 'vs/workbench/common/editor';\nimport { SidebarPart } from 'vs/workbench/browser/parts/sidebar/sidebarPart';\nimport { PanelPart } from 'vs/workbench/browser/parts/panel/panelPart';\nimport { PanelRegistry, Extensions as PanelExtensions } from 'vs/workbench/browser/panel';\nimport { Position, Parts, IWorkbenchLayoutService, ILayoutOptions } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService, StorageScope, IWillSaveStateEvent, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { ITitleService } from 'vs/workbench/services/title/common/titleService';\nimport { IInstantiationService, ServicesAccessor, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { LifecyclePhase, StartupKind, ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IWindowService, IPath, MenuBarVisibility, getTitleBarStyle } from 'vs/platform/windows/common/windows';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IEditorService, IResourceEditor } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Sizing, Direction, Grid, View } from 'vs/base/browser/ui/grid/grid';\nimport { WorkbenchLegacyLayout } from 'vs/workbench/browser/legacyLayout';\nimport { IDimension } from 'vs/platform/layout/browser/layoutService';\nimport { Part } from 'vs/workbench/browser/part';\nimport { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';\nimport { IActivityBarService } from 'vs/workbench/services/activityBar/browser/activityBarService';\nimport { coalesce } from 'vs/base/common/arrays';\n\nenum Settings {\n\tMENUBAR_VISIBLE = 'window.menuBarVisibility',\n\tACTIVITYBAR_VISIBLE = 'workbench.activityBar.visible',\n\tSTATUSBAR_VISIBLE = 'workbench.statusBar.visible',\n\n\tSIDEBAR_POSITION = 'workbench.sideBar.location',\n\tPANEL_POSITION = 'workbench.panel.defaultLocation',\n\n\tZEN_MODE_RESTORE = 'zenMode.restore'\n}\n\nenum Storage {\n\tSIDEBAR_HIDDEN = 'workbench.sidebar.hidden',\n\n\tPANEL_HIDDEN = 'workbench.panel.hidden',\n\tPANEL_POSITION = 'workbench.panel.location',\n\n\tZEN_MODE_ENABLED = 'workbench.zenmode.active',\n\tCENTERED_LAYOUT_ENABLED = 'workbench.centerededitorlayout.active',\n}\n\nexport abstract class Layout extends Disposable implements IWorkbenchLayoutService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate readonly _onTitleBarVisibilityChange: Emitter<void> = this._register(new Emitter<void>());\n\tget onTitleBarVisibilityChange(): Event<void> { return this._onTitleBarVisibilityChange.event; }\n\n\tprivate readonly _onZenMode: Emitter<boolean> = this._register(new Emitter<boolean>());\n\tget onZenModeChange(): Event<boolean> { return this._onZenMode.event; }\n\n\tprivate readonly _onLayout = this._register(new Emitter<IDimension>());\n\tget onLayout(): Event<IDimension> { return this._onLayout.event; }\n\n\tprivate _dimension: IDimension;\n\tget dimension(): IDimension { return this._dimension; }\n\n\tprivate _container: HTMLElement = document.createElement('div');\n\tget container(): HTMLElement { return this._container; }\n\n\tprivate parts: Map<string, Part> = new Map<string, Part>();\n\n\tprivate workbenchGrid: Grid<View> | WorkbenchLegacyLayout;\n\n\tprivate disposed: boolean;\n\n\tprivate titleBarPartView: View;\n\tprivate activityBarPartView: View;\n\tprivate sideBarPartView: View;\n\tprivate panelPartView: View;\n\tprivate editorPartView: View;\n\tprivate statusBarPartView: View;\n\n\tprivate environmentService: IEnvironmentService;\n\tprivate configurationService: IConfigurationService;\n\tprivate lifecycleService: ILifecycleService;\n\tprivate storageService: IStorageService;\n\tprivate windowService: IWindowService;\n\tprivate editorService: IEditorService;\n\tprivate editorGroupService: IEditorGroupsService;\n\tprivate panelService: IPanelService;\n\tprivate titleService: ITitleService;\n\tprivate viewletService: IViewletService;\n\tprivate contextService: IWorkspaceContextService;\n\tprivate backupFileService: IBackupFileService;\n\n\tprotected readonly state = {\n\t\tfullscreen: false,\n\n\t\tmenuBar: {\n\t\t\tvisibility: 'default' as MenuBarVisibility,\n\t\t\ttoggled: false\n\t\t},\n\n\t\tactivityBar: {\n\t\t\thidden: false\n\t\t},\n\n\t\tsideBar: {\n\t\t\thidden: false,\n\t\t\tposition: Position.LEFT,\n\t\t\twidth: 300,\n\t\t\tviewletToRestore: undefined as string | undefined\n\t\t},\n\n\t\teditor: {\n\t\t\thidden: false,\n\t\t\tcentered: false,\n\t\t\trestoreCentered: false,\n\t\t\trestoreEditors: false,\n\t\t\teditorsToOpen: [] as Promise<IResourceEditor[]> | IResourceEditor[]\n\t\t},\n\n\t\tpanel: {\n\t\t\thidden: false,\n\t\t\tposition: Position.BOTTOM,\n\t\t\theight: 350,\n\t\t\twidth: 350,\n\t\t\tpanelToRestore: undefined as string | undefined\n\t\t},\n\n\t\tstatusBar: {\n\t\t\thidden: false\n\t\t},\n\n\t\tzenMode: {\n\t\t\tactive: false,\n\t\t\trestore: false,\n\t\t\ttransitionedToFullScreen: false,\n\t\t\ttransitionedToCenteredEditorLayout: false,\n\t\t\twasSideBarVisible: false,\n\t\t\twasPanelVisible: false,\n\t\t\ttransitionDisposeables: [] as IDisposable[]\n\t\t}\n\t};\n\n\tconstructor(\n\t\tprotected readonly parent: HTMLElement\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected initLayout(accessor: ServicesAccessor): void {\n\n\t\t// Services\n\t\tthis.environmentService = accessor.get(IEnvironmentService);\n\t\tthis.configurationService = accessor.get(IConfigurationService);\n\t\tthis.lifecycleService = accessor.get(ILifecycleService);\n\t\tthis.windowService = accessor.get(IWindowService);\n\t\tthis.contextService = accessor.get(IWorkspaceContextService);\n\t\tthis.storageService = accessor.get(IStorageService);\n\n\t\t// Parts\n\t\tthis.editorService = accessor.get(IEditorService);\n\t\tthis.editorGroupService = accessor.get(IEditorGroupsService);\n\t\tthis.panelService = accessor.get(IPanelService);\n\t\tthis.viewletService = accessor.get(IViewletService);\n\t\tthis.titleService = accessor.get(ITitleService);\n\t\taccessor.get(IStatusbarService); // not used, but called to ensure instantiated\n\t\taccessor.get(IActivityBarService); // not used, but called to ensure instantiated\n\n\t\t// Listeners\n\t\tthis.registerLayoutListeners();\n\n\t\t// State\n\t\tthis.initLayoutState(accessor.get(ILifecycleService));\n\t}\n\n\tprivate registerLayoutListeners(): void {\n\n\t\t// Storage\n\t\tthis._register(this.storageService.onWillSaveState(e => this.saveLayoutState(e)));\n\n\t\t// Restore editor if hidden and it changes\n\t\tthis._register(this.editorService.onDidVisibleEditorsChange(() => this.setEditorHidden(false)));\n\t\tthis._register(this.editorGroupService.onDidActivateGroup(() => this.setEditorHidden(false)));\n\n\t\t// Configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(() => this.doUpdateLayoutConfiguration()));\n\n\t\t// Fullscreen changes\n\t\tthis._register(onDidChangeFullscreen(() => this.onFullscreenChanged()));\n\n\t\t// Group changes\n\t\tthis._register(this.editorGroupService.onDidAddGroup(() => this.centerEditorLayout(this.state.editor.centered)));\n\t\tthis._register(this.editorGroupService.onDidRemoveGroup(() => this.centerEditorLayout(this.state.editor.centered)));\n\n\t\t// Prevent workbench from scrolling #55456\n\t\tthis._register(addDisposableListener(this.container, EventType.SCROLL, () => this.container.scrollTop = 0));\n\n\t\t// Menubar visibility changes\n\t\t// if ((isWeb || isWindows || isLinux) && getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n\t\t\tthis._register(this.titleService.onMenubarVisibilityChange(visible => this.onMenubarToggled(visible)));\n\t\t// }\n\t}\n\n\tprivate onMenubarToggled(visible: boolean) {\n\t\tif (visible !== this.state.menuBar.toggled) {\n\t\t\tthis.state.menuBar.toggled = visible;\n\n\t\t\tif ((this.state.menuBar.visibility === 'toggle' || this.state.menuBar.visibility === 'default')) {\n\t\t\t\tthis._onTitleBarVisibilityChange.fire();\n\t\t\t\tthis.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onFullscreenChanged(): void {\n\t\tthis.state.fullscreen = isFullscreen();\n\n\t\t// Apply as CSS class\n\t\tif (this.state.fullscreen) {\n\t\t\taddClass(this.container, 'fullscreen');\n\t\t} else {\n\t\t\tremoveClass(this.container, 'fullscreen');\n\n\t\t\tif (this.state.zenMode.transitionedToFullScreen && this.state.zenMode.active) {\n\t\t\t\tthis.toggleZenMode();\n\t\t\t}\n\t\t}\n\n\t\t// Changing fullscreen state of the window has an impact on custom title bar visibility, so we need to update\n\t\tif (getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n\t\t\tthis._onTitleBarVisibilityChange.fire();\n\t\t\tthis.layout(); // handle title bar when fullscreen changes\n\t\t}\n\t}\n\n\tprivate doUpdateLayoutConfiguration(skipLayout?: boolean): void {\n\n\t\t// Sidebar position\n\t\tconst newSidebarPositionValue = this.configurationService.getValue<string>(Settings.SIDEBAR_POSITION);\n\t\tconst newSidebarPosition = (newSidebarPositionValue === 'right') ? Position.RIGHT : Position.LEFT;\n\t\tif (newSidebarPosition !== this.getSideBarPosition()) {\n\t\t\tthis.setSideBarPosition(newSidebarPosition);\n\t\t}\n\n\t\t// Panel position\n\t\tthis.updatePanelPosition();\n\n\t\tif (!this.state.zenMode.active) {\n\n\t\t\t// Statusbar visibility\n\t\t\tconst newStatusbarHiddenValue = !this.configurationService.getValue<boolean>(Settings.STATUSBAR_VISIBLE);\n\t\t\tif (newStatusbarHiddenValue !== this.state.statusBar.hidden) {\n\t\t\t\tthis.setStatusBarHidden(newStatusbarHiddenValue, skipLayout);\n\t\t\t}\n\n\t\t\t// Activitybar visibility\n\t\t\tconst newActivityBarHiddenValue = !this.configurationService.getValue<boolean>(Settings.ACTIVITYBAR_VISIBLE);\n\t\t\tif (newActivityBarHiddenValue !== this.state.activityBar.hidden) {\n\t\t\t\tthis.setActivityBarHidden(newActivityBarHiddenValue, skipLayout);\n\t\t\t}\n\t\t}\n\n\t\t// Menubar visibility\n\t\tconst newMenubarVisibility = this.configurationService.getValue<MenuBarVisibility>(Settings.MENUBAR_VISIBLE);\n\t\tthis.setMenubarVisibility(newMenubarVisibility, !!skipLayout);\n\t}\n\n\tprivate setSideBarPosition(position: Position): void {\n\t\tconst activityBar = this.getPart(Parts.ACTIVITYBAR_PART);\n\t\tconst sideBar = this.getPart(Parts.SIDEBAR_PART);\n\t\tconst wasHidden = this.state.sideBar.hidden;\n\n\t\tif (this.state.sideBar.hidden) {\n\t\t\tthis.setSideBarHidden(false, true /* Skip Layout */);\n\t\t}\n\n\t\tconst newPositionValue = (position === Position.LEFT) ? 'left' : 'right';\n\t\tconst oldPositionValue = (this.state.sideBar.position === Position.LEFT) ? 'left' : 'right';\n\t\tthis.state.sideBar.position = position;\n\n\t\t// Adjust CSS\n\t\tremoveClass(activityBar.getContainer(), oldPositionValue);\n\t\tremoveClass(sideBar.getContainer(), oldPositionValue);\n\t\taddClass(activityBar.getContainer(), newPositionValue);\n\t\taddClass(sideBar.getContainer(), newPositionValue);\n\n\t\t// Update Styles\n\t\tactivityBar.updateStyles();\n\t\tsideBar.updateStyles();\n\n\t\t// Layout\n\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\tif (!wasHidden) {\n\t\t\t\tthis.state.sideBar.width = this.workbenchGrid.getViewSize(this.sideBarPartView);\n\t\t\t}\n\n\t\t\tthis.workbenchGrid.removeView(this.sideBarPartView);\n\t\t\tthis.workbenchGrid.removeView(this.activityBarPartView);\n\n\t\t\tif (!this.state.panel.hidden && this.state.panel.position === Position.BOTTOM) {\n\t\t\t\tthis.workbenchGrid.removeView(this.panelPartView);\n\t\t\t}\n\n\t\t\tthis.layout();\n\t\t} else {\n\t\t\tthis.workbenchGrid.layout();\n\t\t}\n\t}\n\n\tprivate initLayoutState(lifecycleService: ILifecycleService): void {\n\n\t\t// Fullscreen\n\t\tthis.state.fullscreen = isFullscreen();\n\n\t\t// Menubar visibility\n\t\tthis.state.menuBar.visibility = this.configurationService.getValue<MenuBarVisibility>(Settings.MENUBAR_VISIBLE);\n\n\t\t// Activity bar visibility\n\t\tthis.state.activityBar.hidden = !this.configurationService.getValue<string>(Settings.ACTIVITYBAR_VISIBLE);\n\n\t\t// Sidebar visibility\n\t\tthis.state.sideBar.hidden = this.storageService.getBoolean(Storage.SIDEBAR_HIDDEN, StorageScope.WORKSPACE, this.contextService.getWorkbenchState() === WorkbenchState.EMPTY);\n\n\t\t// Sidebar position\n\t\tthis.state.sideBar.position = (this.configurationService.getValue<string>(Settings.SIDEBAR_POSITION) === 'right') ? Position.RIGHT : Position.LEFT;\n\n\t\t// Sidebar viewlet\n\t\tif (!this.state.sideBar.hidden) {\n\n\t\t\t// Only restore last viewlet if window was reloaded or we are in development mode\n\t\t\tlet viewletToRestore: string;\n\t\t\tif (!this.environmentService.isBuilt || lifecycleService.startupKind === StartupKind.ReloadedWindow) {\n\t\t\t\tviewletToRestore = this.storageService.get(SidebarPart.activeViewletSettingsKey, StorageScope.WORKSPACE, this.viewletService.getDefaultViewletId());\n\t\t\t} else {\n\t\t\t\tviewletToRestore = this.viewletService.getDefaultViewletId();\n\t\t\t}\n\n\t\t\tif (viewletToRestore) {\n\t\t\t\tthis.state.sideBar.viewletToRestore = viewletToRestore;\n\t\t\t} else {\n\t\t\t\tthis.state.sideBar.hidden = true; // we hide sidebar if there is no viewlet to restore\n\t\t\t}\n\t\t}\n\n\t\t// Editor centered layout\n\t\tthis.state.editor.restoreCentered = this.storageService.getBoolean(Storage.CENTERED_LAYOUT_ENABLED, StorageScope.WORKSPACE, false);\n\n\t\t// Editors to open\n\t\tthis.state.editor.editorsToOpen = this.resolveEditorsToOpen();\n\n\t\t// Panel visibility\n\t\tthis.state.panel.hidden = this.storageService.getBoolean(Storage.PANEL_HIDDEN, StorageScope.WORKSPACE, true);\n\n\t\t// Panel position\n\t\tthis.updatePanelPosition();\n\n\t\t// Panel to restore\n\t\tif (!this.state.panel.hidden) {\n\t\t\tconst panelRegistry = Registry.as<PanelRegistry>(PanelExtensions.Panels);\n\n\t\t\tlet panelToRestore = this.storageService.get(PanelPart.activePanelSettingsKey, StorageScope.WORKSPACE, panelRegistry.getDefaultPanelId());\n\t\t\tif (!panelRegistry.hasPanel(panelToRestore)) {\n\t\t\t\tpanelToRestore = panelRegistry.getDefaultPanelId(); // fallback to default if panel is unknown\n\t\t\t}\n\n\t\t\tif (panelToRestore) {\n\t\t\t\tthis.state.panel.panelToRestore = panelToRestore;\n\t\t\t} else {\n\t\t\t\tthis.state.panel.hidden = true; // we hide panel if there is no panel to restore\n\t\t\t}\n\t\t}\n\n\t\t// Statusbar visibility\n\t\tthis.state.statusBar.hidden = !this.configurationService.getValue<string>(Settings.STATUSBAR_VISIBLE);\n\n\t\t// Zen mode enablement\n\t\tthis.state.zenMode.restore = this.storageService.getBoolean(Storage.ZEN_MODE_ENABLED, StorageScope.WORKSPACE, false) && this.configurationService.getValue(Settings.ZEN_MODE_RESTORE);\n\t}\n\n\tprivate resolveEditorsToOpen(): Promise<IResourceEditor[]> | IResourceEditor[] {\n\t\tconst configuration = this.windowService.getConfiguration();\n\t\tconst hasInitialFilesToOpen = this.hasInitialFilesToOpen();\n\n\t\t// Only restore editors if we are not instructed to open files initially\n\t\tthis.state.editor.restoreEditors = !hasInitialFilesToOpen;\n\n\t\t// Files to open, diff or create\n\t\tif (hasInitialFilesToOpen) {\n\n\t\t\t// Files to diff is exclusive\n\t\t\tconst filesToDiff = this.toInputs(configuration.filesToDiff, false);\n\t\t\tif (filesToDiff && filesToDiff.length === 2) {\n\t\t\t\treturn [<IResourceDiffInput>{\n\t\t\t\t\tleftResource: filesToDiff[0].resource,\n\t\t\t\t\trightResource: filesToDiff[1].resource,\n\t\t\t\t\toptions: { pinned: true },\n\t\t\t\t\tforceFile: true\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst filesToCreate = this.toInputs(configuration.filesToCreate, true);\n\t\t\tconst filesToOpen = this.toInputs(configuration.filesToOpen, false);\n\n\t\t\t// Otherwise: Open/Create files\n\t\t\treturn [...filesToOpen, ...filesToCreate];\n\t\t}\n\n\t\t// Empty workbench\n\t\telse if (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY && this.configurationService.inspect('workbench.startupEditor').value === 'newUntitledFile') {\n\t\t\tconst isEmpty = this.editorGroupService.count === 1 && this.editorGroupService.activeGroup.count === 0;\n\t\t\tif (!isEmpty) {\n\t\t\t\treturn []; // do not open any empty untitled file if we restored editors from previous session\n\t\t\t}\n\n\t\t\treturn this.backupFileService.hasBackups().then(hasBackups => {\n\t\t\t\tif (hasBackups) {\n\t\t\t\t\treturn []; // do not open any empty untitled file if we have backups to restore\n\t\t\t\t}\n\n\t\t\t\treturn [<IUntitledResourceInput>{}];\n\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate hasInitialFilesToOpen(): boolean {\n\t\tconst configuration = this.windowService.getConfiguration();\n\n\t\treturn !!(\n\t\t\t(configuration.filesToCreate && configuration.filesToCreate.length > 0) ||\n\t\t\t(configuration.filesToOpen && configuration.filesToOpen.length > 0) ||\n\t\t\t(configuration.filesToDiff && configuration.filesToDiff.length > 0));\n\t}\n\n\tprivate toInputs(paths: IPath[] | undefined, isNew: boolean): Array<IResourceInput | IUntitledResourceInput> {\n\t\tif (!paths || !paths.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn coalesce(paths.map(p => {\n\t\t\tconst resource = p.fileUri;\n\t\t\tif (!resource) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tlet input: IResourceInput | IUntitledResourceInput;\n\t\t\tif (isNew) {\n\t\t\t\tinput = { filePath: resource.fsPath, options: { pinned: true } } as IUntitledResourceInput;\n\t\t\t} else {\n\t\t\t\tinput = { resource, options: { pinned: true }, forceFile: true } as IResourceInput;\n\t\t\t}\n\n\t\t\tif (!isNew && typeof p.lineNumber === 'number') {\n\t\t\t\tinput.options!.selection = {\n\t\t\t\t\tstartLineNumber: p.lineNumber,\n\t\t\t\t\tstartColumn: p.columnNumber || 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn input;\n\t\t}));\n\t}\n\n\tprivate updatePanelPosition() {\n\t\tconst defaultPanelPosition = this.configurationService.getValue<string>(Settings.PANEL_POSITION);\n\t\tconst panelPosition = this.storageService.get(Storage.PANEL_POSITION, StorageScope.WORKSPACE, defaultPanelPosition);\n\n\t\tthis.state.panel.position = (panelPosition === 'right') ? Position.RIGHT : Position.BOTTOM;\n\t}\n\n\tregisterPart(part: Part): void {\n\t\tthis.parts.set(part.getId(), part);\n\t}\n\n\tprotected getPart(key: Parts): Part {\n\t\tconst part = this.parts.get(key);\n\t\tif (!part) {\n\t\t\tthrow new Error(`Unknown part ${key}`);\n\t\t}\n\n\t\treturn part;\n\t}\n\n\tisRestored(): boolean {\n\t\treturn this.lifecycleService.phase >= LifecyclePhase.Restored;\n\t}\n\n\thasFocus(part: Parts): boolean {\n\t\tconst activeElement = document.activeElement;\n\t\tif (!activeElement) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst container = this.getContainer(part);\n\n\t\treturn isAncestor(activeElement, container);\n\t}\n\n\tgetContainer(part: Parts): HTMLElement {\n\t\tswitch (part) {\n\t\t\tcase Parts.TITLEBAR_PART:\n\t\t\t\treturn this.getPart(Parts.TITLEBAR_PART).getContainer();\n\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\treturn this.getPart(Parts.ACTIVITYBAR_PART).getContainer();\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\treturn this.getPart(Parts.SIDEBAR_PART).getContainer();\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\treturn this.getPart(Parts.PANEL_PART).getContainer();\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\treturn this.getPart(Parts.EDITOR_PART).getContainer();\n\t\t\tcase Parts.STATUSBAR_PART:\n\t\t\t\treturn this.getPart(Parts.STATUSBAR_PART).getContainer();\n\t\t}\n\t}\n\n\tisVisible(part: Parts): boolean {\n\t\tswitch (part) {\n\t\t\tcase Parts.TITLEBAR_PART:\n\t\t\t\tif (this.state.menuBar.visibility === 'hidden') {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (this.state.menuBar.visibility === 'toggle') {\n\t\t\t\t\treturn this.state.menuBar.toggled;\n\t\t\t\t} else if (getTitleBarStyle(this.configurationService, this.environmentService) === 'native') {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (!this.state.fullscreen) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (isNative && isMacintosh) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (this.state.menuBar.visibility === 'visible') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\treturn !this.state.sideBar.hidden;\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\treturn !this.state.panel.hidden;\n\t\t\tcase Parts.STATUSBAR_PART:\n\t\t\t\treturn !this.state.statusBar.hidden;\n\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\treturn !this.state.activityBar.hidden;\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\treturn this.workbenchGrid instanceof Grid ? !this.state.editor.hidden : true;\n\t\t}\n\n\t\treturn true; // any other part cannot be hidden\n\t}\n\n\tgetTitleBarOffset(): number {\n\t\tlet offset = 0;\n\t\tif (this.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\toffset = this.getPart(Parts.TITLEBAR_PART).maximumHeight;\n\t\t\t} else {\n\t\t\t\toffset = this.workbenchGrid.partLayoutInfo.titlebar.height;\n\n\t\t\t\tif ((isNative && isMacintosh) || this.state.menuBar.visibility === 'hidden') {\n\t\t\t\t\toffset /= getZoomFactor();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offset;\n\t}\n\n\tgetWorkbenchElement(): HTMLElement {\n\t\treturn this.container;\n\t}\n\n\ttoggleZenMode(skipLayout?: boolean, restoring = false): void {\n\t\tthis.state.zenMode.active = !this.state.zenMode.active;\n\t\tthis.state.zenMode.transitionDisposeables = dispose(this.state.zenMode.transitionDisposeables);\n\n\t\tconst setLineNumbers = (lineNumbers: any) => this.editorService.visibleTextEditorWidgets.forEach(editor => editor.updateOptions({ lineNumbers }));\n\n\t\t// Check if zen mode transitioned to full screen and if now we are out of zen mode\n\t\t// -> we need to go out of full screen (same goes for the centered editor layout)\n\t\tlet toggleFullScreen = false;\n\n\t\t// Zen Mode Active\n\t\tif (this.state.zenMode.active) {\n\t\t\tconst config: {\n\t\t\t\tfullScreen: boolean;\n\t\t\t\tcenterLayout: boolean;\n\t\t\t\thideTabs: boolean;\n\t\t\t\thideActivityBar: boolean;\n\t\t\t\thideStatusBar: boolean;\n\t\t\t\thideLineNumbers: boolean;\n\t\t\t} = this.configurationService.getValue('zenMode');\n\n\t\t\ttoggleFullScreen = !this.state.fullscreen && config.fullScreen;\n\n\t\t\tthis.state.zenMode.transitionedToFullScreen = restoring ? config.fullScreen : toggleFullScreen;\n\t\t\tthis.state.zenMode.transitionedToCenteredEditorLayout = !this.isEditorLayoutCentered() && config.centerLayout;\n\t\t\tthis.state.zenMode.wasSideBarVisible = this.isVisible(Parts.SIDEBAR_PART);\n\t\t\tthis.state.zenMode.wasPanelVisible = this.isVisible(Parts.PANEL_PART);\n\n\t\t\tthis.setPanelHidden(true, true);\n\t\t\tthis.setSideBarHidden(true, true);\n\n\t\t\tif (config.hideActivityBar) {\n\t\t\t\tthis.setActivityBarHidden(true, true);\n\t\t\t}\n\n\t\t\tif (config.hideStatusBar) {\n\t\t\t\tthis.setStatusBarHidden(true, true);\n\t\t\t}\n\n\t\t\tif (config.hideLineNumbers) {\n\t\t\t\tsetLineNumbers('off');\n\t\t\t\tthis.state.zenMode.transitionDisposeables.push(this.editorService.onDidVisibleEditorsChange(() => setLineNumbers('off')));\n\t\t\t}\n\n\t\t\tif (config.hideTabs && this.editorGroupService.partOptions.showTabs) {\n\t\t\t\tthis.state.zenMode.transitionDisposeables.push(this.editorGroupService.enforcePartOptions({ showTabs: false }));\n\t\t\t}\n\n\t\t\tif (config.centerLayout) {\n\t\t\t\tthis.centerEditorLayout(true, true);\n\t\t\t}\n\t\t}\n\n\t\t// Zen Mode Inactive\n\t\telse {\n\t\t\tif (this.state.zenMode.wasPanelVisible) {\n\t\t\t\tthis.setPanelHidden(false, true);\n\t\t\t}\n\n\t\t\tif (this.state.zenMode.wasSideBarVisible) {\n\t\t\t\tthis.setSideBarHidden(false, true);\n\t\t\t}\n\n\t\t\tif (this.state.zenMode.transitionedToCenteredEditorLayout) {\n\t\t\t\tthis.centerEditorLayout(false, true);\n\t\t\t}\n\n\t\t\tsetLineNumbers(this.configurationService.getValue('editor.lineNumbers'));\n\n\t\t\t// Status bar and activity bar visibility come from settings -> update their visibility.\n\t\t\tthis.doUpdateLayoutConfiguration(true);\n\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\n\t\t\ttoggleFullScreen = this.state.zenMode.transitionedToFullScreen && this.state.fullscreen;\n\t\t}\n\n\t\tif (!skipLayout) {\n\t\t\tthis.layout();\n\t\t}\n\n\t\tif (toggleFullScreen) {\n\t\t\tthis.windowService.toggleFullScreen();\n\t\t}\n\n\t\t// Event\n\t\tthis._onZenMode.fire(this.state.zenMode.active);\n\t}\n\n\tprivate setStatusBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.state.statusBar.hidden = hidden;\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\taddClass(this.container, 'nostatusbar');\n\t\t} else {\n\t\t\tremoveClass(this.container, 'nostatusbar');\n\t\t}\n\n\t\t// Layout\n\t\tif (!skipLayout) {\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\tthis.layout();\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected createWorkbenchLayout(instantiationService: IInstantiationService): void {\n\t\tconst titleBar = this.getPart(Parts.TITLEBAR_PART);\n\t\tconst editorPart = this.getPart(Parts.EDITOR_PART);\n\t\tconst activityBar = this.getPart(Parts.ACTIVITYBAR_PART);\n\t\tconst panelPart = this.getPart(Parts.PANEL_PART);\n\t\tconst sideBar = this.getPart(Parts.SIDEBAR_PART);\n\t\tconst statusBar = this.getPart(Parts.STATUSBAR_PART);\n\n\t\tif (this.configurationService.getValue('workbench.useExperimentalGridLayout')) {\n\n\t\t\t// Create view wrappers for all parts\n\t\t\tthis.titleBarPartView = new View(titleBar);\n\t\t\tthis.sideBarPartView = new View(sideBar);\n\t\t\tthis.activityBarPartView = new View(activityBar);\n\t\t\tthis.editorPartView = new View(editorPart);\n\t\t\tthis.panelPartView = new View(panelPart);\n\t\t\tthis.statusBarPartView = new View(statusBar);\n\n\t\t\tthis.workbenchGrid = new Grid(this.editorPartView, { proportionalLayout: false });\n\n\t\t\tthis.container.prepend(this.workbenchGrid.element);\n\t\t} else {\n\t\t\tthis.workbenchGrid = instantiationService.createInstance(\n\t\t\t\tWorkbenchLegacyLayout,\n\t\t\t\tthis.parent,\n\t\t\t\tthis.container,\n\t\t\t\t{\n\t\t\t\t\ttitlebar: titleBar,\n\t\t\t\t\tactivitybar: activityBar,\n\t\t\t\t\teditor: editorPart,\n\t\t\t\t\tsidebar: sideBar,\n\t\t\t\t\tpanel: panelPart,\n\t\t\t\t\tstatusbar: statusBar,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tlayout(options?: ILayoutOptions): void {\n\t\tif (!this.disposed) {\n\t\t\tthis._dimension = getClientArea(this.parent);\n\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\tposition(this.container, 0, 0, 0, 0, 'relative');\n\t\t\t\tsize(this.container, this._dimension.width, this._dimension.height);\n\n\t\t\t\t// Layout the grid widget\n\t\t\t\tthis.workbenchGrid.layout(this._dimension.width, this._dimension.height);\n\n\t\t\t\t// Layout grid views\n\t\t\t\tthis.layoutGrid();\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.layout(options);\n\t\t\t}\n\n\t\t\t// Emit as event\n\t\t\tthis._onLayout.fire(this._dimension);\n\t\t}\n\t}\n\n\tprivate layoutGrid(): void {\n\t\tif (!(this.workbenchGrid instanceof Grid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet panelInGrid = this.workbenchGrid.hasView(this.panelPartView);\n\t\tlet sidebarInGrid = this.workbenchGrid.hasView(this.sideBarPartView);\n\t\tlet activityBarInGrid = this.workbenchGrid.hasView(this.activityBarPartView);\n\t\tlet statusBarInGrid = this.workbenchGrid.hasView(this.statusBarPartView);\n\t\tlet titlebarInGrid = this.workbenchGrid.hasView(this.titleBarPartView);\n\n\t\t// Add parts to grid\n\t\tif (!statusBarInGrid) {\n\t\t\tthis.workbenchGrid.addView(this.statusBarPartView, Sizing.Split, this.editorPartView, Direction.Down);\n\t\t\tstatusBarInGrid = true;\n\t\t}\n\n\t\tif (!titlebarInGrid && getTitleBarStyle(this.configurationService, this.environmentService) === 'custom') {\n\t\t\tthis.workbenchGrid.addView(this.titleBarPartView, Sizing.Split, this.editorPartView, Direction.Up);\n\t\t\ttitlebarInGrid = true;\n\t\t}\n\n\t\tif (!activityBarInGrid) {\n\t\t\tthis.workbenchGrid.addView(this.activityBarPartView, Sizing.Split, panelInGrid && this.state.sideBar.position === this.state.panel.position ? this.panelPartView : this.editorPartView, this.state.sideBar.position === Position.RIGHT ? Direction.Right : Direction.Left);\n\t\t\tactivityBarInGrid = true;\n\t\t}\n\n\t\tif (!sidebarInGrid) {\n\t\t\tthis.workbenchGrid.addView(this.sideBarPartView, this.state.sideBar.width !== undefined ? this.state.sideBar.width : Sizing.Split, this.activityBarPartView, this.state.sideBar.position === Position.LEFT ? Direction.Right : Direction.Left);\n\t\t\tsidebarInGrid = true;\n\t\t}\n\n\t\tif (!panelInGrid) {\n\t\t\tthis.workbenchGrid.addView(this.panelPartView, this.getPanelDimension(this.state.panel.position) !== undefined ? this.getPanelDimension(this.state.panel.position) : Sizing.Split, this.editorPartView, this.state.panel.position === Position.BOTTOM ? Direction.Down : Direction.Right);\n\t\t\tpanelInGrid = true;\n\t\t}\n\n\t\t// Hide parts\n\t\tif (this.state.panel.hidden) {\n\t\t\tthis.panelPartView.hide();\n\t\t}\n\n\t\tif (this.state.statusBar.hidden) {\n\t\t\tthis.statusBarPartView.hide();\n\t\t}\n\n\t\tif (!this.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\tthis.titleBarPartView.hide();\n\t\t}\n\n\t\tif (this.state.activityBar.hidden) {\n\t\t\tthis.activityBarPartView.hide();\n\t\t}\n\n\t\tif (this.state.sideBar.hidden) {\n\t\t\tthis.sideBarPartView.hide();\n\t\t}\n\n\t\tif (this.state.editor.hidden) {\n\t\t\tthis.editorPartView.hide();\n\t\t}\n\n\t\t// Show visible parts\n\t\tif (!this.state.editor.hidden) {\n\t\t\tthis.editorPartView.show();\n\t\t}\n\n\t\tif (!this.state.statusBar.hidden) {\n\t\t\tthis.statusBarPartView.show();\n\t\t}\n\n\t\tif (this.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\tthis.titleBarPartView.show();\n\t\t}\n\n\t\tif (!this.state.activityBar.hidden) {\n\t\t\tthis.activityBarPartView.show();\n\t\t}\n\n\t\tif (!this.state.sideBar.hidden) {\n\t\t\tthis.sideBarPartView.show();\n\t\t}\n\n\t\tif (!this.state.panel.hidden) {\n\t\t\tthis.panelPartView.show();\n\t\t}\n\t}\n\n\tprivate getPanelDimension(position: Position): number {\n\t\treturn position === Position.BOTTOM ? this.state.panel.height : this.state.panel.width;\n\t}\n\n\tisEditorLayoutCentered(): boolean {\n\t\treturn this.state.editor.centered;\n\t}\n\n\tcenterEditorLayout(active: boolean, skipLayout?: boolean): void {\n\t\tthis.state.editor.centered = active;\n\n\t\tthis.storageService.store(Storage.CENTERED_LAYOUT_ENABLED, active, StorageScope.WORKSPACE);\n\n\t\tlet smartActive = active;\n\t\tif (this.editorGroupService.groups.length > 1 && this.configurationService.getValue('workbench.editor.centeredLayoutAutoResize')) {\n\t\t\tsmartActive = false; // Respect the auto resize setting - do not go into centered layout if there is more than 1 group.\n\t\t}\n\n\t\t// Enter Centered Editor Layout\n\t\tif (this.editorGroupService.isLayoutCentered() !== smartActive) {\n\t\t\tthis.editorGroupService.centerLayout(smartActive);\n\n\t\t\tif (!skipLayout) {\n\t\t\t\tthis.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\tresizePart(part: Parts, sizeChange: number): void {\n\t\tlet view: View;\n\t\tswitch (part) {\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\tview = this.sideBarPartView;\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\tview = this.panelPartView;\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\tview = this.editorPartView;\n\t\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\t\tthis.workbenchGrid.resizeView(view, this.workbenchGrid.getViewSize(view) + sizeChange);\n\t\t\t\t} else {\n\t\t\t\t\tthis.workbenchGrid.resizePart(part, sizeChange);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn; // Cannot resize other parts\n\t\t}\n\t}\n\n\tsetActivityBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.state.activityBar.hidden = hidden;\n\n\t\t// Layout\n\t\tif (!skipLayout) {\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\tthis.layout();\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\tsetEditorHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tif (!(this.workbenchGrid instanceof Grid) || hidden === this.state.editor.hidden) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.editor.hidden = hidden;\n\n\t\t// The editor and the panel cannot be hidden at the same time\n\t\tif (this.state.editor.hidden && this.state.panel.hidden) {\n\t\t\tthis.setPanelHidden(false, true);\n\t\t}\n\n\t\tif (!skipLayout) {\n\t\t\tthis.layout();\n\t\t}\n\t}\n\n\tsetSideBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.state.sideBar.hidden = hidden;\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\taddClass(this.container, 'nosidebar');\n\t\t} else {\n\t\t\tremoveClass(this.container, 'nosidebar');\n\t\t}\n\n\t\t// If sidebar becomes hidden, also hide the current active Viewlet if any\n\t\tif (hidden && this.viewletService.getActiveViewlet()) {\n\t\t\tthis.viewletService.hideActiveViewlet();\n\n\t\t\t// Pass Focus to Editor or Panel if Sidebar is now hidden\n\t\t\tconst activePanel = this.panelService.getActivePanel();\n\t\t\tif (this.hasFocus(Parts.PANEL_PART) && activePanel) {\n\t\t\t\tactivePanel.focus();\n\t\t\t} else {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\n\t\t// If sidebar becomes visible, show last active Viewlet or default viewlet\n\t\telse if (!hidden && !this.viewletService.getActiveViewlet()) {\n\t\t\tconst viewletToOpen = this.viewletService.getLastActiveViewletId();\n\t\t\tif (viewletToOpen) {\n\t\t\t\tconst viewlet = this.viewletService.openViewlet(viewletToOpen, true);\n\t\t\t\tif (!viewlet) {\n\t\t\t\t\tthis.viewletService.openViewlet(this.viewletService.getDefaultViewletId(), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remember in settings\n\t\tconst defaultHidden = this.contextService.getWorkbenchState() === WorkbenchState.EMPTY;\n\t\tif (hidden !== defaultHidden) {\n\t\t\tthis.storageService.store(Storage.SIDEBAR_HIDDEN, hidden ? 'true' : 'false', StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(Storage.SIDEBAR_HIDDEN, StorageScope.WORKSPACE);\n\t\t}\n\n\t\t// Layout\n\t\tif (!skipLayout) {\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\tthis.layout();\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\tsetPanelHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.state.panel.hidden = hidden;\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\taddClass(this.container, 'nopanel');\n\t\t} else {\n\t\t\tremoveClass(this.container, 'nopanel');\n\t\t}\n\n\t\t// If panel part becomes hidden, also hide the current active panel if any\n\t\tif (hidden && this.panelService.getActivePanel()) {\n\t\t\tthis.panelService.hideActivePanel();\n\t\t\tthis.editorGroupService.activeGroup.focus(); // Pass focus to editor group if panel part is now hidden\n\t\t}\n\n\t\t// If panel part becomes visible, show last active panel or default panel\n\t\telse if (!hidden && !this.panelService.getActivePanel()) {\n\t\t\tconst panelToOpen = this.panelService.getLastActivePanelId();\n\t\t\tif (panelToOpen) {\n\t\t\t\tconst focus = !skipLayout;\n\t\t\t\tthis.panelService.openPanel(panelToOpen, focus);\n\t\t\t}\n\t\t}\n\n\t\t// Remember in settings\n\t\tif (!hidden) {\n\t\t\tthis.storageService.store(Storage.PANEL_HIDDEN, 'false', StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(Storage.PANEL_HIDDEN, StorageScope.WORKSPACE);\n\t\t}\n\n\t\t// The editor and panel cannot be hidden at the same time\n\t\tif (hidden && this.state.editor.hidden) {\n\t\t\tthis.setEditorHidden(false, true);\n\t\t}\n\n\t\t// Layout\n\t\tif (!skipLayout) {\n\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\tthis.layout();\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.layout();\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleMaximizedPanel(): void {\n\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\tthis.workbenchGrid.maximizeViewSize(this.panelPartView);\n\t\t} else {\n\t\t\tthis.workbenchGrid.layout({ toggleMaximizedPanel: true, source: Parts.PANEL_PART });\n\t\t}\n\t}\n\n\tisPanelMaximized(): boolean {\n\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\ttry {\n\t\t\t\treturn this.workbenchGrid.getViewSize2(this.panelPartView).height === this.getPart(Parts.PANEL_PART).maximumHeight;\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.workbenchGrid.isPanelMaximized();\n\t\t}\n\t}\n\n\tgetSideBarPosition(): Position {\n\t\treturn this.state.sideBar.position;\n\t}\n\n\tsetMenubarVisibility(visibility: MenuBarVisibility, skipLayout: boolean): void {\n\t\tif (this.state.menuBar.visibility !== visibility) {\n\t\t\tthis.state.menuBar.visibility = visibility;\n\n\t\t\t// Layout\n\t\t\tif (!skipLayout) {\n\t\t\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\t\t\tconst dimensions = getClientArea(this.parent);\n\t\t\t\t\tthis.workbenchGrid.layout(dimensions.width, dimensions.height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.workbenchGrid.layout();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetMenubarVisibility(): MenuBarVisibility {\n\t\treturn this.state.menuBar.visibility;\n\t}\n\n\tgetPanelPosition(): Position {\n\t\treturn this.state.panel.position;\n\t}\n\n\tsetPanelPosition(position: Position): void {\n\t\tconst panelPart = this.getPart(Parts.PANEL_PART);\n\t\tconst wasHidden = this.state.panel.hidden;\n\n\t\tif (this.state.panel.hidden) {\n\t\t\tthis.setPanelHidden(false, true /* Skip Layout */);\n\t\t} else {\n\t\t\tthis.savePanelDimension();\n\t\t}\n\n\t\tconst newPositionValue = (position === Position.BOTTOM) ? 'bottom' : 'right';\n\t\tconst oldPositionValue = (this.state.panel.position === Position.BOTTOM) ? 'bottom' : 'right';\n\t\tthis.state.panel.position = position;\n\n\t\tfunction positionToString(position: Position): string {\n\t\t\tswitch (position) {\n\t\t\t\tcase Position.LEFT: return 'left';\n\t\t\t\tcase Position.RIGHT: return 'right';\n\t\t\t\tcase Position.BOTTOM: return 'bottom';\n\t\t\t}\n\t\t}\n\n\t\tthis.storageService.store(Storage.PANEL_POSITION, positionToString(this.state.panel.position), StorageScope.WORKSPACE);\n\n\t\t// Adjust CSS\n\t\tremoveClass(panelPart.getContainer(), oldPositionValue);\n\t\taddClass(panelPart.getContainer(), newPositionValue);\n\n\t\t// Update Styles\n\t\tpanelPart.updateStyles();\n\n\t\t// Layout\n\t\tif (this.workbenchGrid instanceof Grid) {\n\t\t\tif (!wasHidden) {\n\t\t\t\tthis.savePanelDimension();\n\t\t\t}\n\n\t\t\tthis.workbenchGrid.removeView(this.panelPartView);\n\t\t\tthis.layout();\n\t\t} else {\n\t\t\tthis.workbenchGrid.layout();\n\t\t}\n\t}\n\n\tprivate savePanelDimension(): void {\n\t\tif (!(this.workbenchGrid instanceof Grid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state.panel.position === Position.BOTTOM) {\n\t\t\tthis.state.panel.height = this.workbenchGrid.getViewSize(this.panelPartView);\n\t\t} else {\n\t\t\tthis.state.panel.width = this.workbenchGrid.getViewSize(this.panelPartView);\n\t\t}\n\t}\n\n\tprivate saveLayoutState(e: IWillSaveStateEvent): void {\n\n\t\t// Zen Mode\n\t\tif (this.state.zenMode.active) {\n\t\t\tthis.storageService.store(Storage.ZEN_MODE_ENABLED, true, StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(Storage.ZEN_MODE_ENABLED, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tif (e.reason === WillSaveStateReason.SHUTDOWN && this.state.zenMode.active) {\n\t\t\tif (!this.configurationService.getValue(Settings.ZEN_MODE_RESTORE)) {\n\t\t\t\tthis.toggleZenMode(true); // We will not restore zen mode, need to clear all zen mode state changes\n\t\t\t}\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposed = true;\n\t}\n}\n"]}]}