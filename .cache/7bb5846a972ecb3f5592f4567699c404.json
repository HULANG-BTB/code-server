{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar webviewEditorInput_1 = require(\"./webviewEditorInput\");\nexports.IWebviewEditorService = instantiation_1.createDecorator('webviewEditorService');\nfunction areWebviewInputOptionsEqual(a, b) {\n    return a.enableCommandUris === b.enableCommandUris\n        && a.enableFindWidget === b.enableFindWidget\n        && a.enableScripts === b.enableScripts\n        && a.retainContextWhenHidden === b.retainContextWhenHidden\n        && a.tryRestoreScrollPosition === b.tryRestoreScrollPosition\n        && (a.localResourceRoots === b.localResourceRoots || (Array.isArray(a.localResourceRoots) && Array.isArray(b.localResourceRoots) && arrays_1.equals(a.localResourceRoots, b.localResourceRoots, function (a, b) { return a.toString() === b.toString(); })))\n        && (a.portMapping === b.portMapping || (Array.isArray(a.portMapping) && Array.isArray(b.portMapping) && arrays_1.equals(a.portMapping, b.portMapping, function (a, b) { return a.from === b.from && a.to === b.to; })));\n}\nexports.areWebviewInputOptionsEqual = areWebviewInputOptionsEqual;\nfunction canRevive(reviver, webview) {\n    if (webview.isDisposed()) {\n        return false;\n    }\n    return reviver.canRevive(webview);\n}\nvar RevivalPool = /** @class */ (function () {\n    function RevivalPool() {\n        this._awaitingRevival = [];\n    }\n    RevivalPool.prototype.add = function (input, resolve) {\n        this._awaitingRevival.push({ input: input, resolve: resolve });\n    };\n    RevivalPool.prototype.reviveFor = function (reviver) {\n        var toRevive = this._awaitingRevival.filter(function (_a) {\n            var input = _a.input;\n            return canRevive(reviver, input);\n        });\n        this._awaitingRevival = this._awaitingRevival.filter(function (_a) {\n            var input = _a.input;\n            return !canRevive(reviver, input);\n        });\n        for (var _i = 0, toRevive_1 = toRevive; _i < toRevive_1.length; _i++) {\n            var _a = toRevive_1[_i], input = _a.input, resolve = _a.resolve;\n            reviver.reviveWebview(input).then(resolve);\n        }\n    };\n    return RevivalPool;\n}());\nvar WebviewEditorService = /** @class */ (function () {\n    function WebviewEditorService(_editorService, _instantiationService, _editorGroupService) {\n        this._editorService = _editorService;\n        this._instantiationService = _instantiationService;\n        this._editorGroupService = _editorGroupService;\n        this._revivers = new Set();\n        this._revivalPool = new RevivalPool();\n    }\n    WebviewEditorService.prototype.createWebview = function (viewType, title, showOptions, options, extension, events) {\n        var webviewInput = this._instantiationService.createInstance(webviewEditorInput_1.WebviewEditorInput, viewType, undefined, title, options, {}, events, extension);\n        this._editorService.openEditor(webviewInput, { pinned: true, preserveFocus: showOptions.preserveFocus }, showOptions.group);\n        return webviewInput;\n    };\n    WebviewEditorService.prototype.revealWebview = function (webview, group, preserveFocus) {\n        if (webview.group === group.id) {\n            this._editorService.openEditor(webview, { preserveFocus: preserveFocus }, webview.group);\n        }\n        else {\n            var groupView = this._editorGroupService.getGroup(webview.group);\n            if (groupView) {\n                groupView.moveEditor(webview, group, { preserveFocus: preserveFocus });\n            }\n        }\n    };\n    WebviewEditorService.prototype.reviveWebview = function (viewType, id, title, iconPath, state, options, extension, group) {\n        var _this = this;\n        var webviewInput = this._instantiationService.createInstance(webviewEditorInput_1.RevivedWebviewEditorInput, viewType, id, title, options, state, {}, extension, function (webview) { return tslib_1.__awaiter(_this, void 0, Promise, function () {\n            var didRevive, resolve, promise;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.tryRevive(webview)];\n                    case 1:\n                        didRevive = _a.sent();\n                        if (didRevive) {\n                            return [2 /*return*/, Promise.resolve(undefined)];\n                        }\n                        promise = new Promise(function (r) { resolve = r; });\n                        this._revivalPool.add(webview, resolve);\n                        return [2 /*return*/, promise];\n                }\n            });\n        }); });\n        webviewInput.iconPath = iconPath;\n        if (typeof group === 'number') {\n            webviewInput.updateGroup(group);\n        }\n        return webviewInput;\n    };\n    WebviewEditorService.prototype.registerReviver = function (reviver) {\n        var _this = this;\n        this._revivers.add(reviver);\n        this._revivalPool.reviveFor(reviver);\n        return lifecycle_1.toDisposable(function () {\n            _this._revivers.delete(reviver);\n        });\n    };\n    WebviewEditorService.prototype.shouldPersist = function (webview) {\n        // Has no state, don't persist\n        if (!webview.state) {\n            return false;\n        }\n        if (map_1.values(this._revivers).some(function (reviver) { return canRevive(reviver, webview); })) {\n            return true;\n        }\n        // Revived webviews may not have an actively registered reviver but we still want to presist them\n        // since a reviver should exist when it is actually needed.\n        return webview instanceof webviewEditorInput_1.RevivedWebviewEditorInput;\n    };\n    WebviewEditorService.prototype.tryRevive = function (webview) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _i, _a, reviver;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _i = 0, _a = map_1.values(this._revivers);\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        reviver = _a[_i];\n                        if (!canRevive(reviver, webview)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, reviver.reviveWebview(webview)];\n                    case 2:\n                        _b.sent();\n                        return [2 /*return*/, true];\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, false];\n                }\n            });\n        });\n    };\n    WebviewEditorService = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, editorGroupsService_1.IEditorGroupsService)\n    ], WebviewEditorService);\n    return WebviewEditorService;\n}());\nexports.WebviewEditorService = WebviewEditorService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/arrays';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { values } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { IWebviewOptions, IWebviewPanelOptions } from 'vs/editor/common/modes';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { GroupIdentifier } from 'vs/workbench/common/editor';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP_TYPE, IEditorService, SIDE_GROUP_TYPE } from 'vs/workbench/services/editor/common/editorService';\nimport { RevivedWebviewEditorInput, WebviewEditorInput } from './webviewEditorInput';\n\nexport const IWebviewEditorService = createDecorator<IWebviewEditorService>('webviewEditorService');\n\nexport interface ICreateWebViewShowOptions {\n\tgroup: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE;\n\tpreserveFocus: boolean;\n}\n\nexport interface IWebviewEditorService {\n\t_serviceBrand: any;\n\n\tcreateWebview(\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: ICreateWebViewShowOptions,\n\t\toptions: WebviewInputOptions,\n\t\textension: undefined | {\n\t\t\tlocation: URI,\n\t\t\tid: ExtensionIdentifier\n\t\t},\n\t\tevents: WebviewEvents\n\t): WebviewEditorInput;\n\n\treviveWebview(\n\t\tviewType: string,\n\t\tid: number,\n\t\ttitle: string,\n\t\ticonPath: { light: URI, dark: URI } | undefined,\n\t\tstate: any,\n\t\toptions: WebviewInputOptions,\n\t\textension: undefined | {\n\t\t\treadonly location: URI,\n\t\t\treadonly id?: ExtensionIdentifier\n\t\t},\n\t\tgroup: number | undefined\n\t): WebviewEditorInput;\n\n\trevealWebview(\n\t\twebview: WebviewEditorInput,\n\t\tgroup: IEditorGroup,\n\t\tpreserveFocus: boolean\n\t): void;\n\n\tregisterReviver(\n\t\treviver: WebviewReviver\n\t): IDisposable;\n\n\tshouldPersist(\n\t\tinput: WebviewEditorInput\n\t): boolean;\n}\n\nexport interface WebviewReviver {\n\tcanRevive(\n\t\twebview: WebviewEditorInput\n\t): boolean;\n\n\treviveWebview(\n\t\twebview: WebviewEditorInput\n\t): Promise<void>;\n}\n\nexport interface WebviewEvents {\n\tonMessage?(message: any): void;\n\tonDispose?(): void;\n\tonDidClickLink?(link: URI, options: IWebviewOptions): void;\n}\n\nexport interface WebviewInputOptions extends IWebviewOptions, IWebviewPanelOptions {\n\ttryRestoreScrollPosition?: boolean;\n}\n\nexport function areWebviewInputOptionsEqual(a: WebviewInputOptions, b: WebviewInputOptions): boolean {\n\treturn a.enableCommandUris === b.enableCommandUris\n\t\t&& a.enableFindWidget === b.enableFindWidget\n\t\t&& a.enableScripts === b.enableScripts\n\t\t&& a.retainContextWhenHidden === b.retainContextWhenHidden\n\t\t&& a.tryRestoreScrollPosition === b.tryRestoreScrollPosition\n\t\t&& (a.localResourceRoots === b.localResourceRoots || (Array.isArray(a.localResourceRoots) && Array.isArray(b.localResourceRoots) && equals(a.localResourceRoots, b.localResourceRoots, (a, b) => a.toString() === b.toString())))\n\t\t&& (a.portMapping === b.portMapping || (Array.isArray(a.portMapping) && Array.isArray(b.portMapping) && equals(a.portMapping, b.portMapping, (a, b) => a.from === b.from && a.to === b.to)));\n}\n\nfunction canRevive(reviver: WebviewReviver, webview: WebviewEditorInput): boolean {\n\tif (webview.isDisposed()) {\n\t\treturn false;\n\t}\n\treturn reviver.canRevive(webview);\n}\n\nclass RevivalPool {\n\tprivate _awaitingRevival: Array<{ input: WebviewEditorInput, resolve: () => void }> = [];\n\n\tpublic add(input: WebviewEditorInput, resolve: () => void) {\n\t\tthis._awaitingRevival.push({ input, resolve });\n\t}\n\n\tpublic reviveFor(reviver: WebviewReviver) {\n\t\tconst toRevive = this._awaitingRevival.filter(({ input }) => canRevive(reviver, input));\n\t\tthis._awaitingRevival = this._awaitingRevival.filter(({ input }) => !canRevive(reviver, input));\n\n\t\tfor (const { input, resolve } of toRevive) {\n\t\t\treviver.reviveWebview(input).then(resolve);\n\t\t}\n\t}\n}\n\nexport class WebviewEditorService implements IWebviewEditorService {\n\t_serviceBrand: any;\n\n\tprivate readonly _revivers = new Set<WebviewReviver>();\n\tprivate readonly _revivalPool = new RevivalPool();\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t) { }\n\n\tpublic createWebview(\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: ICreateWebViewShowOptions,\n\t\toptions: IWebviewOptions,\n\t\textension: undefined | {\n\t\t\tlocation: URI,\n\t\t\tid: ExtensionIdentifier\n\t\t},\n\t\tevents: WebviewEvents\n\t): WebviewEditorInput {\n\t\tconst webviewInput = this._instantiationService.createInstance(WebviewEditorInput, viewType, undefined, title, options, {}, events, extension);\n\t\tthis._editorService.openEditor(webviewInput, { pinned: true, preserveFocus: showOptions.preserveFocus }, showOptions.group);\n\t\treturn webviewInput;\n\t}\n\n\tpublic revealWebview(\n\t\twebview: WebviewEditorInput,\n\t\tgroup: IEditorGroup,\n\t\tpreserveFocus: boolean\n\t): void {\n\t\tif (webview.group === group.id) {\n\t\t\tthis._editorService.openEditor(webview, { preserveFocus }, webview.group);\n\t\t} else {\n\t\t\tconst groupView = this._editorGroupService.getGroup(webview.group!);\n\t\t\tif (groupView) {\n\t\t\t\tgroupView.moveEditor(webview, group, { preserveFocus });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic reviveWebview(\n\t\tviewType: string,\n\t\tid: number,\n\t\ttitle: string,\n\t\ticonPath: { light: URI, dark: URI } | undefined,\n\t\tstate: any,\n\t\toptions: WebviewInputOptions,\n\t\textension: undefined | {\n\t\t\treadonly location: URI,\n\t\t\treadonly id?: ExtensionIdentifier\n\t\t},\n\t\tgroup: number | undefined,\n\t): WebviewEditorInput {\n\t\tconst webviewInput = this._instantiationService.createInstance(RevivedWebviewEditorInput, viewType, id, title, options, state, {}, extension, async (webview: WebviewEditorInput): Promise<void> => {\n\t\t\tconst didRevive = await this.tryRevive(webview);\n\t\t\tif (didRevive) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\t// A reviver may not be registered yet. Put into pool and resolve promise when we can revive\n\t\t\tlet resolve: () => void;\n\t\t\tconst promise = new Promise<void>(r => { resolve = r; });\n\t\t\tthis._revivalPool.add(webview, resolve!);\n\t\t\treturn promise;\n\t\t});\n\t\twebviewInput.iconPath = iconPath;\n\t\tif (typeof group === 'number') {\n\t\t\twebviewInput.updateGroup(group);\n\t\t}\n\t\treturn webviewInput;\n\t}\n\n\tpublic registerReviver(\n\t\treviver: WebviewReviver\n\t): IDisposable {\n\t\tthis._revivers.add(reviver);\n\t\tthis._revivalPool.reviveFor(reviver);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._revivers.delete(reviver);\n\t\t});\n\t}\n\n\tpublic shouldPersist(\n\t\twebview: WebviewEditorInput\n\t): boolean {\n\t\t// Has no state, don't persist\n\t\tif (!webview.state) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (values(this._revivers).some(reviver => canRevive(reviver, webview))) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Revived webviews may not have an actively registered reviver but we still want to presist them\n\t\t// since a reviver should exist when it is actually needed.\n\t\treturn webview instanceof RevivedWebviewEditorInput;\n\t}\n\n\tprivate async tryRevive(\n\t\twebview: WebviewEditorInput\n\t): Promise<boolean> {\n\t\tfor (const reviver of values(this._revivers)) {\n\t\t\tif (canRevive(reviver, webview)) {\n\t\t\t\tawait reviver.reviveWebview(webview);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}]}