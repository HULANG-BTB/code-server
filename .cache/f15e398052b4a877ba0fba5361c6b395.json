{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/server/src/ipc.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/ipc.ts","mtime":1555841535690},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nclass StdioIpcHandler extends events_1.EventEmitter {\n    constructor(childProcess) {\n        super();\n        this.childProcess = childProcess;\n        this.isListening = false;\n    }\n    // tslint:disable-next-line no-any\n    on(event, cb) {\n        this.listen();\n        return super.on(event, cb);\n    }\n    // tslint:disable-next-line no-any\n    once(event, cb) {\n        this.listen();\n        return super.once(event, cb);\n    }\n    // tslint:disable-next-line no-any\n    addListener(event, cb) {\n        this.listen();\n        return super.addListener(event, cb);\n    }\n    // tslint:disable-next-line no-any\n    send(event, ...args) {\n        const msg = {\n            event,\n            args,\n        };\n        const d = JSON.stringify(msg);\n        if (this.childProcess) {\n            this.childProcess.stdin.write(d + \"\\n\");\n        }\n        else {\n            process.stdout.write(d);\n        }\n    }\n    listen() {\n        if (this.isListening) {\n            return;\n        }\n        // tslint:disable-next-line no-any\n        const onData = (data) => {\n            try {\n                const d = JSON.parse(data.toString());\n                this.emit(d.event, ...d.args);\n            }\n            catch (ex) {\n                if (!this.childProcess) {\n                    process.stderr.write(`Failed to parse incoming data: ${ex.message}`);\n                }\n            }\n        };\n        if (this.childProcess) {\n            this.childProcess.stdout.resume();\n            this.childProcess.stdout.on(\"data\", onData);\n        }\n        else {\n            process.stdin.resume();\n            process.stdin.on(\"data\", onData);\n        }\n    }\n}\nexports.StdioIpcHandler = StdioIpcHandler;\n",{"version":3,"file":"/home/coding/workspace/packages/server/src/ipc.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/server/src/ipc.ts"],"names":[],"mappings":";;AAAA,mCAAsC;AAQtC,MAAa,eAAgB,SAAQ,qBAAY;IAGhD,YACkB,YAA2B;QAE5C,KAAK,EAAE,CAAC;QAFS,iBAAY,GAAZ,YAAY,CAAe;QAHrC,gBAAW,GAAY,KAAK,CAAC;IAMrC,CAAC;IAED,kCAAkC;IAC3B,EAAE,CAAC,KAAa,EAAE,EAA4B;QACpD,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,kCAAkC;IAC3B,IAAI,CAAC,KAAa,EAAE,EAA4B;QACtD,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,kCAAkC;IAC3B,WAAW,CAAC,KAAa,EAAE,EAA4B;QAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,kCAAkC;IAC3B,IAAI,CAAC,KAAa,EAAE,GAAG,IAAW;QACxC,MAAM,GAAG,GAAe;YACvB,KAAK;YACL,IAAI;SACJ,CAAC;QACF,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SACxC;aAAM;YACN,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACxB;IACF,CAAC;IAEO,MAAM;QACb,IAAI,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACP;QACD,kCAAkC;QAClC,MAAM,MAAM,GAAG,CAAC,IAAS,EAAQ,EAAE;YAClC,IAAI;gBACH,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAe,CAAC;gBACpD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;aAC9B;YAAC,OAAO,EAAE,EAAE;gBACZ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBACvB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;iBACrE;aACD;QACF,CAAC,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC5C;aAAM;YACN,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACvB,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SACjC;IACF,CAAC;CACD;AAnED,0CAmEC","sourcesContent":["import { EventEmitter } from \"events\";\nimport { ChildProcess } from \"child_process\";\n\nexport interface IpcMessage {\n\treadonly event: string;\n\treadonly args: any[]; // tslint:disable-line no-any\n}\n\nexport class StdioIpcHandler extends EventEmitter {\n\tprivate isListening: boolean = false;\n\n\tpublic constructor(\n\t\tprivate readonly childProcess?: ChildProcess,\n\t) {\n\t\tsuper();\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic on(event: string, cb: (...args: any[]) => void): this {\n\t\tthis.listen();\n\n\t\treturn super.on(event, cb);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic once(event: string, cb: (...args: any[]) => void): this {\n\t\tthis.listen();\n\n\t\treturn super.once(event, cb);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic addListener(event: string, cb: (...args: any[]) => void): this {\n\t\tthis.listen();\n\n\t\treturn super.addListener(event, cb);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic send(event: string, ...args: any[]): void {\n\t\tconst msg: IpcMessage = {\n\t\t\tevent,\n\t\t\targs,\n\t\t};\n\t\tconst d = JSON.stringify(msg);\n\t\tif (this.childProcess) {\n\t\t\tthis.childProcess.stdin.write(d + \"\\n\");\n\t\t} else {\n\t\t\tprocess.stdout.write(d);\n\t\t}\n\t}\n\n\tprivate listen(): void {\n\t\tif (this.isListening) {\n\t\t\treturn;\n\t\t}\n\t\t// tslint:disable-next-line no-any\n\t\tconst onData = (data: any): void => {\n\t\t\ttry {\n\t\t\t\tconst d = JSON.parse(data.toString()) as IpcMessage;\n\t\t\t\tthis.emit(d.event, ...d.args);\n\t\t\t} catch (ex) {\n\t\t\t\tif (!this.childProcess) {\n\t\t\t\t\tprocess.stderr.write(`Failed to parse incoming data: ${ex.message}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (this.childProcess) {\n\t\t\tthis.childProcess.stdout.resume();\n\t\t\tthis.childProcess.stdout.on(\"data\", onData);\n\t\t} else {\n\t\t\tprocess.stdin.resume();\n\t\t\tprocess.stdin.on(\"data\", onData);\n\t\t}\n\t}\n}\n"]}]}