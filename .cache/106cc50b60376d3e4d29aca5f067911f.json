{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar platform = require(\"vs/base/common/platform\");\nvar terminalEnvironment = require(\"vs/workbench/contrib/terminal/common/terminalEnvironment\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar event_1 = require(\"vs/base/common/event\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar terminalProcessExtHostProxy_1 = require(\"vs/workbench/contrib/terminal/common/terminalProcessExtHostProxy\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configurationResolver_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolver\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar network_1 = require(\"vs/base/common/network\");\nvar remoteHosts_1 = require(\"vs/platform/remote/common/remoteHosts\");\nvar processes_1 = require(\"vs/base/common/processes\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar product_1 = require(\"vs/platform/product/common/product\");\nvar terminal_2 = require(\"vs/workbench/contrib/terminal/browser/terminal\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\n/** The amount of time to consider terminal errors to be related to the launch */\nvar LAUNCHING_DURATION = 500;\n/**\n * The minimum amount of time between latency requests.\n */\nvar LATENCY_MEASURING_INTERVAL = 1000;\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal master process (or the winpty agent process)\n * - Shell Process: The pseudoterminal slave process (ie. the shell)\n */\nvar TerminalProcessManager = /** @class */ (function () {\n    function TerminalProcessManager(_terminalId, _configHelper, _historyService, _instantiationService, _logService, _workspaceContextService, _configurationResolverService, _windowService, _workspaceConfigurationService, _environmentService, _productService, _terminalInstanceService, _remoteAgentService) {\n        var _this = this;\n        this._terminalId = _terminalId;\n        this._configHelper = _configHelper;\n        this._historyService = _historyService;\n        this._instantiationService = _instantiationService;\n        this._logService = _logService;\n        this._workspaceContextService = _workspaceContextService;\n        this._configurationResolverService = _configurationResolverService;\n        this._windowService = _windowService;\n        this._workspaceConfigurationService = _workspaceConfigurationService;\n        this._environmentService = _environmentService;\n        this._productService = _productService;\n        this._terminalInstanceService = _terminalInstanceService;\n        this._remoteAgentService = _remoteAgentService;\n        this.processState = terminal_1.ProcessState.UNINITIALIZED;\n        this._process = null;\n        this._preLaunchInputQueue = [];\n        this._disposables = [];\n        this._latency = -1;\n        this._latencyLastMeasured = 0;\n        this._onProcessReady = new event_1.Emitter();\n        this._onProcessData = new event_1.Emitter();\n        this._onProcessTitle = new event_1.Emitter();\n        this._onProcessExit = new event_1.Emitter();\n        this.ptyProcessReady = new Promise(function (c) {\n            _this.onProcessReady(function () {\n                _this._logService.debug(\"Terminal process ready (shellProcessId: \" + _this.shellProcessId + \")\");\n                c(undefined);\n            });\n        });\n        this.ptyProcessReady.then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, this.getLatency()];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        }); }); });\n    }\n    Object.defineProperty(TerminalProcessManager.prototype, \"onProcessReady\", {\n        get: function () { return this._onProcessReady.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcessManager.prototype, \"onProcessData\", {\n        get: function () { return this._onProcessData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcessManager.prototype, \"onProcessTitle\", {\n        get: function () { return this._onProcessTitle.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcessManager.prototype, \"onProcessExit\", {\n        get: function () { return this._onProcessExit.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalProcessManager.prototype.dispose = function (immediate) {\n        if (immediate === void 0) { immediate = false; }\n        if (this._process) {\n            // If the process was still connected this dispose came from\n            // within VS Code, not the process, so mark the process as\n            // killed by the user.\n            this.processState = terminal_1.ProcessState.KILLED_BY_USER;\n            this._process.shutdown(immediate);\n            this._process = null;\n        }\n        this._disposables.forEach(function (d) { return d.dispose(); });\n        this._disposables.length = 0;\n    };\n    TerminalProcessManager.prototype.addDisposable = function (disposable) {\n        this._disposables.push(disposable);\n    };\n    TerminalProcessManager.prototype.createProcess = function (shellLaunchConfig, cols, rows) {\n        var _this = this;\n        var forceExtHostProcess = this._configHelper.config.extHostProcess;\n        if (shellLaunchConfig.cwd && typeof shellLaunchConfig.cwd === 'object') {\n            this.remoteAuthority = remoteHosts_1.getRemoteAuthority(shellLaunchConfig.cwd);\n        }\n        else {\n            this.remoteAuthority = this._windowService.getConfiguration().remoteAuthority;\n        }\n        var hasRemoteAuthority = !!this.remoteAuthority;\n        var launchRemotely = hasRemoteAuthority || forceExtHostProcess;\n        this.userHome = this._environmentService.userHome;\n        this.os = platform.OS;\n        if (launchRemotely) {\n            if (hasRemoteAuthority) {\n                this._remoteAgentService.getEnvironment().then(function (env) {\n                    if (!env) {\n                        return;\n                    }\n                    _this.userHome = env.userHome.path;\n                    _this.os = env.os;\n                });\n            }\n            var activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(hasRemoteAuthority ? remoteHosts_1.REMOTE_HOST_SCHEME : undefined);\n            this._process = this._instantiationService.createInstance(terminalProcessExtHostProxy_1.TerminalProcessExtHostProxy, this._terminalId, shellLaunchConfig, activeWorkspaceRootUri, cols, rows);\n        }\n        else {\n            if (!shellLaunchConfig.executable) {\n                this._configHelper.mergeDefaultShellPathAndArgs(shellLaunchConfig);\n            }\n            var activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(network_1.Schemas.file);\n            var initialCwd = terminalEnvironment.getCwd(shellLaunchConfig, this._environmentService.userHome, activeWorkspaceRootUri, this._configHelper.config.cwd);\n            // Compel type system as process.env should not have any undefined entries\n            var env = {};\n            if (shellLaunchConfig.strictEnv) {\n                // Only base the terminal process environment on this environment and add the\n                // various mixins when strictEnv is false\n                env = tslib_1.__assign({}, shellLaunchConfig.env);\n            }\n            else {\n                // Merge process env with the env from config and from shellLaunchConfig\n                env = tslib_1.__assign({}, process.env);\n                // Resolve env vars from config and shell\n                var lastActiveWorkspaceRoot = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) : null;\n                var platformKey = platform.isWindows ? 'windows' : (platform.isMacintosh ? 'osx' : 'linux');\n                var isWorkspaceShellAllowed = this._configHelper.checkWorkspaceShellPermissions();\n                var envFromConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.env.\" + platformKey);\n                var allowedEnvFromConfig = (isWorkspaceShellAllowed ? envFromConfigValue.value : envFromConfigValue.user);\n                var envFromConfig = terminalEnvironment.resolveConfigurationVariables(this._configurationResolverService, tslib_1.__assign({}, allowedEnvFromConfig), lastActiveWorkspaceRoot);\n                var envFromShell = terminalEnvironment.resolveConfigurationVariables(this._configurationResolverService, tslib_1.__assign({}, shellLaunchConfig.env), lastActiveWorkspaceRoot);\n                shellLaunchConfig.env = envFromShell;\n                terminalEnvironment.mergeEnvironments(env, envFromConfig);\n                terminalEnvironment.mergeEnvironments(env, shellLaunchConfig.env);\n                // Sanitize the environment, removing any undesirable VS Code and Electron environment\n                // variables\n                processes_1.sanitizeProcessEnvironment(env, 'VSCODE_IPC_HOOK_CLI');\n                // Adding other env keys necessary to create the process\n                terminalEnvironment.addTerminalEnvironmentKeys(env, this._productService.version, platform.locale, this._configHelper.config.setLocaleVariables);\n            }\n            this._logService.debug(\"Terminal process launching\", shellLaunchConfig, initialCwd, cols, rows, env);\n            this._process = this._terminalInstanceService.createTerminalProcess(shellLaunchConfig, initialCwd, cols, rows, env, this._configHelper.config.windowsEnableConpty);\n        }\n        this.processState = terminal_1.ProcessState.LAUNCHING;\n        // The process is non-null, but TS isn't clever enough to know\n        var p = this._process;\n        p.onProcessData(function (data) {\n            _this._onProcessData.fire(data);\n        });\n        p.onProcessIdReady(function (pid) {\n            _this.shellProcessId = pid;\n            _this._onProcessReady.fire();\n            // Send any queued data that's waiting\n            if (_this._preLaunchInputQueue.length > 0) {\n                p.input(_this._preLaunchInputQueue.join(''));\n                _this._preLaunchInputQueue.length = 0;\n            }\n        });\n        p.onProcessTitleChanged(function (title) { return _this._onProcessTitle.fire(title); });\n        p.onProcessExit(function (exitCode) { return _this._onExit(exitCode); });\n        setTimeout(function () {\n            if (_this.processState === terminal_1.ProcessState.LAUNCHING) {\n                _this.processState = terminal_1.ProcessState.RUNNING;\n            }\n        }, LAUNCHING_DURATION);\n    };\n    TerminalProcessManager.prototype.setDimensions = function (cols, rows) {\n        if (!this._process) {\n            return;\n        }\n        // The child process could already be terminated\n        try {\n            this._process.resize(cols, rows);\n        }\n        catch (error) {\n            // We tried to write to a closed pipe / channel.\n            if (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n                throw (error);\n            }\n        }\n    };\n    TerminalProcessManager.prototype.write = function (data) {\n        if (this.shellProcessId) {\n            if (this._process) {\n                // Send data if the pty is ready\n                this._process.input(data);\n            }\n        }\n        else {\n            // If the pty is not ready, queue the data received to send later\n            this._preLaunchInputQueue.push(data);\n        }\n    };\n    TerminalProcessManager.prototype.getInitialCwd = function () {\n        if (!this._process) {\n            return Promise.resolve('');\n        }\n        return this._process.getInitialCwd();\n    };\n    TerminalProcessManager.prototype.getCwd = function () {\n        if (!this._process) {\n            return Promise.resolve('');\n        }\n        return this._process.getCwd();\n    };\n    TerminalProcessManager.prototype.getLatency = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.ptyProcessReady];\n                    case 1:\n                        _b.sent();\n                        if (!this._process) {\n                            return [2 /*return*/, Promise.resolve(0)];\n                        }\n                        if (!(this._latencyLastMeasured === 0 || this._latencyLastMeasured + LATENCY_MEASURING_INTERVAL < Date.now())) return [3 /*break*/, 3];\n                        this._latencyRequest = this._process.getLatency();\n                        _a = this;\n                        return [4 /*yield*/, this._latencyRequest];\n                    case 2:\n                        _a._latency = _b.sent();\n                        this._latencyLastMeasured = Date.now();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/, Promise.resolve(this._latency)];\n                }\n            });\n        });\n    };\n    TerminalProcessManager.prototype._onExit = function (exitCode) {\n        this._process = null;\n        // If the process is marked as launching then mark the process as killed\n        // during launch. This typically means that there is a problem with the\n        // shell and args.\n        if (this.processState === terminal_1.ProcessState.LAUNCHING) {\n            this.processState = terminal_1.ProcessState.KILLED_DURING_LAUNCH;\n        }\n        // If TerminalInstance did not know about the process exit then it was\n        // triggered by the process, not on VS Code's side.\n        if (this.processState === terminal_1.ProcessState.RUNNING) {\n            this.processState = terminal_1.ProcessState.KILLED_BY_PROCESS;\n        }\n        this._onProcessExit.fire(exitCode);\n    };\n    TerminalProcessManager = tslib_1.__decorate([\n        tslib_1.__param(2, history_1.IHistoryService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, log_1.ILogService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, configurationResolver_1.IConfigurationResolverService),\n        tslib_1.__param(7, windows_1.IWindowService),\n        tslib_1.__param(8, configuration_1.IConfigurationService),\n        tslib_1.__param(9, environment_1.IEnvironmentService),\n        tslib_1.__param(10, product_1.IProductService),\n        tslib_1.__param(11, terminal_2.ITerminalInstanceService),\n        tslib_1.__param(12, remoteAgentService_1.IRemoteAgentService)\n    ], TerminalProcessManager);\n    return TerminalProcessManager;\n}());\nexports.TerminalProcessManager = TerminalProcessManager;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport * as terminalEnvironment from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ProcessState, ITerminalProcessManager, IShellLaunchConfig, ITerminalConfigHelper, ITerminalChildProcess } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { TerminalProcessExtHostProxy } from 'vs/workbench/contrib/terminal/common/terminalProcessExtHostProxy';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { Schemas } from 'vs/base/common/network';\nimport { REMOTE_HOST_SCHEME, getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { sanitizeProcessEnvironment } from 'vs/base/common/processes';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IProductService } from 'vs/platform/product/common/product';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\n/** The amount of time to consider terminal errors to be related to the launch */\nconst LAUNCHING_DURATION = 500;\n\n/**\n * The minimum amount of time between latency requests.\n */\nconst LATENCY_MEASURING_INTERVAL = 1000;\n\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal master process (or the winpty agent process)\n * - Shell Process: The pseudoterminal slave process (ie. the shell)\n */\nexport class TerminalProcessManager implements ITerminalProcessManager {\n\tpublic processState: ProcessState = ProcessState.UNINITIALIZED;\n\tpublic ptyProcessReady: Promise<void>;\n\tpublic shellProcessId: number;\n\tpublic remoteAuthority: string | undefined;\n\tpublic os: platform.OperatingSystem | undefined;\n\tpublic userHome: string | undefined;\n\n\tprivate _process: ITerminalChildProcess | null = null;\n\tprivate _preLaunchInputQueue: string[] = [];\n\tprivate _disposables: IDisposable[] = [];\n\tprivate _latency: number = -1;\n\tprivate _latencyRequest: Promise<number>;\n\tprivate _latencyLastMeasured: number = 0;\n\n\tprivate readonly _onProcessReady = new Emitter<void>();\n\tpublic get onProcessReady(): Event<void> { return this._onProcessReady.event; }\n\tprivate readonly _onProcessData = new Emitter<string>();\n\tpublic get onProcessData(): Event<string> { return this._onProcessData.event; }\n\tprivate readonly _onProcessTitle = new Emitter<string>();\n\tpublic get onProcessTitle(): Event<string> { return this._onProcessTitle.event; }\n\tprivate readonly _onProcessExit = new Emitter<number>();\n\tpublic get onProcessExit(): Event<number> { return this._onProcessExit.event; }\n\n\tconstructor(\n\t\tprivate readonly _terminalId: number,\n\t\tprivate readonly _configHelper: ITerminalConfigHelper,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IWindowService private readonly _windowService: IWindowService,\n\t\t@IConfigurationService private readonly _workspaceConfigurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService\n\t) {\n\t\tthis.ptyProcessReady = new Promise<void>(c => {\n\t\t\tthis.onProcessReady(() => {\n\t\t\t\tthis._logService.debug(`Terminal process ready (shellProcessId: ${this.shellProcessId})`);\n\t\t\t\tc(undefined);\n\t\t\t});\n\t\t});\n\t\tthis.ptyProcessReady.then(async () => await this.getLatency());\n\t}\n\n\tpublic dispose(immediate: boolean = false): void {\n\t\tif (this._process) {\n\t\t\t// If the process was still connected this dispose came from\n\t\t\t// within VS Code, not the process, so mark the process as\n\t\t\t// killed by the user.\n\t\t\tthis.processState = ProcessState.KILLED_BY_USER;\n\t\t\tthis._process.shutdown(immediate);\n\t\t\tthis._process = null;\n\t\t}\n\t\tthis._disposables.forEach(d => d.dispose());\n\t\tthis._disposables.length = 0;\n\t}\n\n\tpublic addDisposable(disposable: IDisposable) {\n\t\tthis._disposables.push(disposable);\n\t}\n\n\tpublic createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number\n\t): void {\n\t\tconst forceExtHostProcess = (this._configHelper.config as any).extHostProcess;\n\t\tif (shellLaunchConfig.cwd && typeof shellLaunchConfig.cwd === 'object') {\n\t\t\tthis.remoteAuthority = getRemoteAuthority(shellLaunchConfig.cwd);\n\t\t} else {\n\t\t\tthis.remoteAuthority = this._windowService.getConfiguration().remoteAuthority;\n\t\t}\n\t\tconst hasRemoteAuthority = !!this.remoteAuthority;\n\t\tlet launchRemotely = hasRemoteAuthority || forceExtHostProcess;\n\n\t\tthis.userHome = this._environmentService.userHome;\n\t\tthis.os = platform.OS;\n\t\tif (launchRemotely) {\n\t\t\tif (hasRemoteAuthority) {\n\t\t\t\tthis._remoteAgentService.getEnvironment().then(env => {\n\t\t\t\t\tif (!env) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.userHome = env.userHome.path;\n\t\t\t\t\tthis.os = env.os;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(hasRemoteAuthority ? REMOTE_HOST_SCHEME : undefined);\n\t\t\tthis._process = this._instantiationService.createInstance(TerminalProcessExtHostProxy, this._terminalId, shellLaunchConfig, activeWorkspaceRootUri, cols, rows);\n\t\t} else {\n\t\t\tif (!shellLaunchConfig.executable) {\n\t\t\t\tthis._configHelper.mergeDefaultShellPathAndArgs(shellLaunchConfig);\n\t\t\t}\n\n\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\t\tconst initialCwd = terminalEnvironment.getCwd(shellLaunchConfig, this._environmentService.userHome, activeWorkspaceRootUri, this._configHelper.config.cwd);\n\n\t\t\t// Compel type system as process.env should not have any undefined entries\n\t\t\tlet env: platform.IProcessEnvironment = {};\n\n\t\t\tif (shellLaunchConfig.strictEnv) {\n\t\t\t\t// Only base the terminal process environment on this environment and add the\n\t\t\t\t// various mixins when strictEnv is false\n\t\t\t\tenv = { ...shellLaunchConfig.env } as any;\n\t\t\t} else {\n\t\t\t\t// Merge process env with the env from config and from shellLaunchConfig\n\t\t\t\tenv = { ...process.env } as any;\n\n\t\t\t\t// Resolve env vars from config and shell\n\t\t\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) : null;\n\t\t\t\tconst platformKey = platform.isWindows ? 'windows' : (platform.isMacintosh ? 'osx' : 'linux');\n\t\t\t\tconst isWorkspaceShellAllowed = this._configHelper.checkWorkspaceShellPermissions();\n\t\t\t\tconst envFromConfigValue = this._workspaceConfigurationService.inspect<{ [key: string]: string }>(`terminal.integrated.env.${platformKey}`);\n\t\t\t\tconst allowedEnvFromConfig = (isWorkspaceShellAllowed ? envFromConfigValue.value : envFromConfigValue.user);\n\t\t\t\tconst envFromConfig = terminalEnvironment.resolveConfigurationVariables(this._configurationResolverService, { ...allowedEnvFromConfig }, lastActiveWorkspaceRoot);\n\t\t\t\tconst envFromShell = terminalEnvironment.resolveConfigurationVariables(this._configurationResolverService, { ...shellLaunchConfig.env }, lastActiveWorkspaceRoot);\n\t\t\t\tshellLaunchConfig.env = envFromShell;\n\n\t\t\t\tterminalEnvironment.mergeEnvironments(env, envFromConfig);\n\t\t\t\tterminalEnvironment.mergeEnvironments(env, shellLaunchConfig.env);\n\n\t\t\t\t// Sanitize the environment, removing any undesirable VS Code and Electron environment\n\t\t\t\t// variables\n\t\t\t\tsanitizeProcessEnvironment(env, 'VSCODE_IPC_HOOK_CLI');\n\n\t\t\t\t// Adding other env keys necessary to create the process\n\t\t\t\tterminalEnvironment.addTerminalEnvironmentKeys(env, this._productService.version, platform.locale, this._configHelper.config.setLocaleVariables);\n\t\t\t}\n\n\t\t\tthis._logService.debug(`Terminal process launching`, shellLaunchConfig, initialCwd, cols, rows, env);\n\t\t\tthis._process = this._terminalInstanceService.createTerminalProcess(shellLaunchConfig, initialCwd, cols, rows, env, this._configHelper.config.windowsEnableConpty);\n\t\t}\n\t\tthis.processState = ProcessState.LAUNCHING;\n\n\t\t// The process is non-null, but TS isn't clever enough to know\n\t\tconst p = this._process!;\n\n\t\tp.onProcessData(data => {\n\t\t\tthis._onProcessData.fire(data);\n\t\t});\n\n\t\tp.onProcessIdReady(pid => {\n\t\t\tthis.shellProcessId = pid;\n\t\t\tthis._onProcessReady.fire();\n\n\t\t\t// Send any queued data that's waiting\n\t\t\tif (this._preLaunchInputQueue.length > 0) {\n\t\t\t\tp.input(this._preLaunchInputQueue.join(''));\n\t\t\t\tthis._preLaunchInputQueue.length = 0;\n\t\t\t}\n\t\t});\n\n\t\tp.onProcessTitleChanged(title => this._onProcessTitle.fire(title));\n\t\tp.onProcessExit(exitCode => this._onExit(exitCode));\n\n\t\tsetTimeout(() => {\n\t\t\tif (this.processState === ProcessState.LAUNCHING) {\n\t\t\t\tthis.processState = ProcessState.RUNNING;\n\t\t\t}\n\t\t}, LAUNCHING_DURATION);\n\t}\n\n\tpublic setDimensions(cols: number, rows: number): void {\n\t\tif (!this._process) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The child process could already be terminated\n\t\ttry {\n\t\t\tthis._process.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic write(data: string): void {\n\t\tif (this.shellProcessId) {\n\t\t\tif (this._process) {\n\t\t\t\t// Send data if the pty is ready\n\t\t\t\tthis._process.input(data);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the pty is not ready, queue the data received to send later\n\t\t\tthis._preLaunchInputQueue.push(data);\n\t\t}\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\tif (!this._process) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\treturn this._process.getInitialCwd();\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\tif (!this._process) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\treturn this._process.getCwd();\n\t}\n\n\tpublic async getLatency(): Promise<number> {\n\t\tawait this.ptyProcessReady;\n\t\tif (!this._process) {\n\t\t\treturn Promise.resolve(0);\n\t\t}\n\t\tif (this._latencyLastMeasured === 0 || this._latencyLastMeasured + LATENCY_MEASURING_INTERVAL < Date.now()) {\n\t\t\tthis._latencyRequest = this._process.getLatency();\n\t\t\tthis._latency = await this._latencyRequest;\n\t\t\tthis._latencyLastMeasured = Date.now();\n\t\t}\n\t\treturn Promise.resolve(this._latency);\n\t}\n\n\tprivate _onExit(exitCode: number): void {\n\t\tthis._process = null;\n\n\t\t// If the process is marked as launching then mark the process as killed\n\t\t// during launch. This typically means that there is a problem with the\n\t\t// shell and args.\n\t\tif (this.processState === ProcessState.LAUNCHING) {\n\t\t\tthis.processState = ProcessState.KILLED_DURING_LAUNCH;\n\t\t}\n\n\t\t// If TerminalInstance did not know about the process exit then it was\n\t\t// triggered by the process, not on VS Code's side.\n\t\tif (this.processState === ProcessState.RUNNING) {\n\t\t\tthis.processState = ProcessState.KILLED_BY_PROCESS;\n\t\t}\n\n\t\tthis._onProcessExit.fire(exitCode);\n\t}\n}"]}]}