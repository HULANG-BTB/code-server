{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"url\", \"vs/base/common/types\"], function (require, exports, url_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getSystemProxyURI(requestURL) {\n        if (requestURL.protocol === 'http:') {\n            return process.env.HTTP_PROXY || process.env.http_proxy || null;\n        }\n        else if (requestURL.protocol === 'https:') {\n            return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n        }\n        return null;\n    }\n    function getProxyAgent(rawRequestURL, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const requestURL = url_1.parse(rawRequestURL);\n            const proxyURL = options.proxyUrl || getSystemProxyURI(requestURL);\n            if (!proxyURL) {\n                return null;\n            }\n            const proxyEndpoint = url_1.parse(proxyURL);\n            if (!/^https?:$/.test(proxyEndpoint.protocol || '')) {\n                return null;\n            }\n            const opts = {\n                host: proxyEndpoint.hostname || '',\n                port: Number(proxyEndpoint.port),\n                auth: proxyEndpoint.auth,\n                rejectUnauthorized: types_1.isBoolean(options.strictSSL) ? options.strictSSL : true\n            };\n            const Ctor = requestURL.protocol === 'http:'\n                ? yield new Promise((resolve_1, reject_1) => { require(['http-proxy-agent'], resolve_1, reject_1); })\n                : yield new Promise((resolve_2, reject_2) => { require(['https-proxy-agent'], resolve_2, reject_2); });\n            return new Ctor(opts);\n        });\n    }\n    exports.getProxyAgent = getProxyAgent;\n});\n",null]}