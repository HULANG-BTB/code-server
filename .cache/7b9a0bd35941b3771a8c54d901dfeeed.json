{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/window.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/window.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar errors = require(\"vs/base/common/errors\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar titleService_1 = require(\"vs/workbench/services/title/common/titleService\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar browser = require(\"vs/base/browser/browser\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar keybindingService_1 = require(\"vs/workbench/services/keybinding/electron-browser/keybindingService\");\nvar electron_1 = require(\"electron\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar menuItemActionItem_1 = require(\"vs/platform/actions/browser/menuItemActionItem\");\nvar async_1 = require(\"vs/base/common/async\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar integrity_1 = require(\"vs/workbench/services/integrity/common/integrity\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar TextInputActions = [\n    new actions_1.Action('undo', nls.localize('undo', \"Undo\"), undefined, true, function () { return Promise.resolve(document.execCommand('undo')); }),\n    new actions_1.Action('redo', nls.localize('redo', \"Redo\"), undefined, true, function () { return Promise.resolve(document.execCommand('redo')); }),\n    new actionbar_1.Separator(),\n    new actions_1.Action('editor.action.clipboardCutAction', nls.localize('cut', \"Cut\"), undefined, true, function () { return Promise.resolve(document.execCommand('cut')); }),\n    new actions_1.Action('editor.action.clipboardCopyAction', nls.localize('copy', \"Copy\"), undefined, true, function () { return Promise.resolve(document.execCommand('copy')); }),\n    require('vs/../../../../packages/vscode/src/workbench').workbench.pasteAction,\n    new actionbar_1.Separator(),\n    new actions_1.Action('editor.action.selectAll', nls.localize('selectAll', \"Select All\"), undefined, true, function () { return Promise.resolve(document.execCommand('selectAll')); })\n];\nvar ElectronWindow = /** @class */ (function (_super) {\n    tslib_1.__extends(ElectronWindow, _super);\n    function ElectronWindow(editorService, windowsService, windowService, configurationService, titleService, themeService, notificationService, commandService, keybindingService, contextMenuService, telemetryService, workspaceEditingService, fileService, menuService, lifecycleService, integrityService, environmentService, accessibilityService, contextService) {\n        var _this = _super.call(this) || this;\n        _this.editorService = editorService;\n        _this.windowsService = windowsService;\n        _this.windowService = windowService;\n        _this.configurationService = configurationService;\n        _this.titleService = titleService;\n        _this.themeService = themeService;\n        _this.notificationService = notificationService;\n        _this.commandService = commandService;\n        _this.keybindingService = keybindingService;\n        _this.contextMenuService = contextMenuService;\n        _this.telemetryService = telemetryService;\n        _this.workspaceEditingService = workspaceEditingService;\n        _this.fileService = fileService;\n        _this.menuService = menuService;\n        _this.lifecycleService = lifecycleService;\n        _this.integrityService = integrityService;\n        _this.environmentService = environmentService;\n        _this.accessibilityService = accessibilityService;\n        _this.contextService = contextService;\n        _this.closeEmptyWindowScheduler = _this._register(new async_1.RunOnceScheduler(function () { return _this.onAllEditorsClosed(); }, 50));\n        _this.touchBarDisposables = [];\n        _this.pendingFoldersToAdd = [];\n        _this.addFoldersScheduler = _this._register(new async_1.RunOnceScheduler(function () { return _this.doAddFolders(); }, 100));\n        _this.registerListeners();\n        _this.create();\n        return _this;\n    }\n    ElectronWindow.prototype.registerListeners = function () {\n        var _this = this;\n        // React to editor input changes\n        this._register(this.editorService.onDidActiveEditorChange(function () { return _this.updateTouchbarMenu(); }));\n        // prevent opening a real URL inside the shell\n        [DOM.EventType.DRAG_OVER, DOM.EventType.DROP].forEach(function (event) {\n            window.document.body.addEventListener(event, function (e) {\n                DOM.EventHelper.stop(e);\n            });\n        });\n        // Support runAction event\n        electron_1.ipcRenderer.on('vscode:runAction', function (event, request) {\n            var _a;\n            var args = request.args || [];\n            // If we run an action from the touchbar, we fill in the currently active resource\n            // as payload because the touch bar items are context aware depending on the editor\n            if (request.from === 'touchbar') {\n                var activeEditor = _this.editorService.activeEditor;\n                if (activeEditor) {\n                    var resource = editor_1.toResource(activeEditor, { supportSideBySide: true });\n                    if (resource) {\n                        args.push(resource);\n                    }\n                }\n            }\n            else {\n                args.push({ from: request.from }); // TODO@telemetry this is a bit weird to send this to every action?\n            }\n            (_a = _this.commandService).executeCommand.apply(_a, [request.id].concat(args)).then(function (_) {\n                /* __GDPR__\n                    \"commandExecuted\" : {\n                        \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                _this.telemetryService.publicLog('commandExecuted', { id: request.id, from: request.from });\n            }, function (err) {\n                _this.notificationService.error(err);\n            });\n        });\n        // Support runKeybinding event\n        electron_1.ipcRenderer.on('vscode:runKeybinding', function (event, request) {\n            if (document.activeElement) {\n                _this.keybindingService.dispatchByUserSettingsLabel(request.userSettingsLabel, document.activeElement);\n            }\n        });\n        // Error reporting from main\n        electron_1.ipcRenderer.on('vscode:reportError', function (event, error) {\n            if (error) {\n                errors.onUnexpectedError(JSON.parse(error));\n            }\n        });\n        // Support openFiles event for existing and new files\n        electron_1.ipcRenderer.on('vscode:openFiles', function (event, request) { return _this.onOpenFiles(request); });\n        // Support addFolders event if we have a workspace opened\n        electron_1.ipcRenderer.on('vscode:addFolders', function (event, request) { return _this.onAddFoldersRequest(request); });\n        // Message support\n        electron_1.ipcRenderer.on('vscode:showInfoMessage', function (event, message) {\n            _this.notificationService.info(message);\n        });\n        // Fullscreen Events\n        electron_1.ipcRenderer.on('vscode:enterFullScreen', function () {\n            _this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n                browser.setFullscreen(true);\n            });\n        });\n        electron_1.ipcRenderer.on('vscode:leaveFullScreen', function () {\n            _this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n                browser.setFullscreen(false);\n            });\n        });\n        // High Contrast Events\n        electron_1.ipcRenderer.on('vscode:enterHighContrast', function () {\n            var windowConfig = _this.configurationService.getValue('window');\n            if (windowConfig && windowConfig.autoDetectHighContrast) {\n                _this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n                    _this.themeService.setColorTheme(workbenchThemeService_1.VS_HC_THEME, undefined);\n                });\n            }\n        });\n        electron_1.ipcRenderer.on('vscode:leaveHighContrast', function () {\n            var windowConfig = _this.configurationService.getValue('window');\n            if (windowConfig && windowConfig.autoDetectHighContrast) {\n                _this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n                    _this.themeService.restoreColorTheme();\n                });\n            }\n        });\n        // keyboard layout changed event\n        electron_1.ipcRenderer.on('vscode:keyboardLayoutChanged', function () {\n            keybindingService_1.KeyboardMapperFactory.INSTANCE._onKeyboardLayoutChanged();\n        });\n        // keyboard layout changed event\n        electron_1.ipcRenderer.on('vscode:accessibilitySupportChanged', function (event, accessibilitySupportEnabled) {\n            _this.accessibilityService.setAccessibilitySupport(accessibilitySupportEnabled ? accessibility_1.AccessibilitySupport.Enabled : accessibility_1.AccessibilitySupport.Disabled);\n        });\n        // Zoom level changes\n        this.updateWindowZoomLevel();\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('window.zoomLevel')) {\n                _this.updateWindowZoomLevel();\n            }\n        }));\n        // Context menu support in input/textarea\n        window.document.addEventListener('contextmenu', function (e) { return _this.onContextMenu(e); });\n        // Listen to visible editor changes\n        this._register(this.editorService.onDidVisibleEditorsChange(function () { return _this.onDidVisibleEditorsChange(); }));\n        // Listen to editor closing (if we run with --wait)\n        var filesToWait = this.windowService.getConfiguration().filesToWait;\n        if (filesToWait) {\n            var resourcesToWaitFor_1 = arrays_1.coalesce(filesToWait.paths.map(function (p) { return p.fileUri; }));\n            var waitMarkerFile_1 = filesToWait.waitMarkerFileUri;\n            var listenerDispose_1 = this.editorService.onDidCloseEditor(function () { return _this.onEditorClosed(listenerDispose_1, resourcesToWaitFor_1, waitMarkerFile_1); });\n            this._register(listenerDispose_1);\n        }\n    };\n    ElectronWindow.prototype.onDidVisibleEditorsChange = function () {\n        // Close when empty: check if we should close the window based on the setting\n        // Overruled by: window has a workspace opened or this window is for extension development\n        // or setting is disabled. Also enabled when running with --wait from the command line.\n        var visibleEditors = this.editorService.visibleControls;\n        if (visibleEditors.length === 0 && this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY && !this.environmentService.isExtensionDevelopment) {\n            var closeWhenEmpty = this.configurationService.getValue('window.closeWhenEmpty');\n            if (closeWhenEmpty || this.environmentService.args.wait) {\n                this.closeEmptyWindowScheduler.schedule();\n            }\n        }\n    };\n    ElectronWindow.prototype.onAllEditorsClosed = function () {\n        var visibleEditors = this.editorService.visibleControls.length;\n        if (visibleEditors === 0) {\n            this.windowService.closeWindow();\n        }\n    };\n    ElectronWindow.prototype.onEditorClosed = function (listenerDispose, resourcesToWaitFor, waitMarkerFile) {\n        var _this = this;\n        // In wait mode, listen to changes to the editors and wait until the files\n        // are closed that the user wants to wait for. When this happens we delete\n        // the wait marker file to signal to the outside that editing is done.\n        if (resourcesToWaitFor.every(function (resource) { return !_this.editorService.isOpen({ resource: resource }); })) {\n            listenerDispose.dispose();\n            this.fileService.del(waitMarkerFile);\n        }\n    };\n    ElectronWindow.prototype.onContextMenu = function (e) {\n        if (e.target instanceof HTMLElement) {\n            var target_1 = e.target;\n            if (target_1.nodeName && (target_1.nodeName.toLowerCase() === 'input' || target_1.nodeName.toLowerCase() === 'textarea')) {\n                DOM.EventHelper.stop(e, true);\n                this.contextMenuService.showContextMenu({\n                    getAnchor: function () { return e; },\n                    getActions: function () { return TextInputActions; },\n                    onHide: function () { return target_1.focus(); } // fixes https://github.com/Microsoft/vscode/issues/52948\n                });\n            }\n        }\n    };\n    ElectronWindow.prototype.updateWindowZoomLevel = function () {\n        var windowConfig = this.configurationService.getValue();\n        var newZoomLevel = 0;\n        if (windowConfig.window && typeof windowConfig.window.zoomLevel === 'number') {\n            newZoomLevel = windowConfig.window.zoomLevel;\n            // Leave early if the configured zoom level did not change (https://github.com/Microsoft/vscode/issues/1536)\n            if (this.previousConfiguredZoomLevel === newZoomLevel) {\n                return;\n            }\n            this.previousConfiguredZoomLevel = newZoomLevel;\n        }\n        if (electron_1.webFrame.getZoomLevel() !== newZoomLevel) {\n            electron_1.webFrame.setZoomLevel(newZoomLevel);\n            browser.setZoomFactor(electron_1.webFrame.getZoomFactor());\n            // See https://github.com/Microsoft/vscode/issues/26151\n            // Cannot be trusted because the webFrame might take some time\n            // until it really applies the new zoom level\n            browser.setZoomLevel(electron_1.webFrame.getZoomLevel(), /*isTrusted*/ false);\n        }\n    };\n    ElectronWindow.prototype.create = function () {\n        var _this = this;\n        // Handle window.open() calls\n        var $this = this;\n        window.open = function (url, target, features, replace) {\n            $this.windowsService.openExternal(url);\n            return null;\n        };\n        // Emit event when vscode is ready\n        this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n            electron_1.ipcRenderer.send('vscode:workbenchReady', _this.windowService.getCurrentWindowId());\n        });\n        // Integrity warning\n        this.integrityService.isPure().then(function (res) { return _this.titleService.updateProperties({ isPure: res.isPure }); });\n        // Root warning\n        this.lifecycleService.when(lifecycle_2.LifecyclePhase.Restored).then(function () {\n            var isAdminPromise;\n            if (platform_1.isWindows) {\n                isAdminPromise = Promise.resolve().then(function () { return require('native-is-elevated'); }).then(function (isElevated) { return isElevated(); });\n            }\n            else {\n                isAdminPromise = Promise.resolve(platform_1.isRootUser());\n            }\n            return isAdminPromise.then(function (isAdmin) {\n                // Update title\n                _this.titleService.updateProperties({ isAdmin: isAdmin });\n                // Show warning message (unix only)\n                if (isAdmin && !platform_1.isWindows) {\n                    _this.notificationService.warn(nls.localize('runningAsRoot', \"It is not recommended to run {0} as root user.\", product_1.default.nameShort));\n                }\n            });\n        });\n        // Touchbar menu (if enabled)\n        this.updateTouchbarMenu();\n        // Crash reporter (if enabled)\n        if (!this.environmentService.disableCrashReporter && product_1.default.crashReporter && product_1.default.hockeyApp && this.configurationService.getValue('telemetry.enableCrashReporter')) {\n            this.setupCrashReporter();\n        }\n    };\n    ElectronWindow.prototype.updateTouchbarMenu = function () {\n        var _this = this;\n        if (!browser.isMacintosh || // macOS only\n            !this.configurationService.getValue('keyboard.touchbar.enabled') // disabled via setting\n        ) {\n            return;\n        }\n        // Dispose old\n        this.touchBarDisposables = lifecycle_1.dispose(this.touchBarDisposables);\n        this.touchBarMenu = undefined;\n        // Create new (delayed)\n        this.touchBarUpdater = new async_1.RunOnceScheduler(function () { return _this.doUpdateTouchbarMenu(); }, 300);\n        this.touchBarDisposables.push(this.touchBarUpdater);\n        this.touchBarUpdater.schedule();\n    };\n    ElectronWindow.prototype.doUpdateTouchbarMenu = function () {\n        var _this = this;\n        if (!this.touchBarMenu) {\n            this.touchBarMenu = this.editorService.invokeWithinEditorContext(function (accessor) { return _this.menuService.createMenu(actions_2.MenuId.TouchBarContext, accessor.get(contextkey_1.IContextKeyService)); });\n            this.touchBarDisposables.push(this.touchBarMenu);\n            this.touchBarDisposables.push(this.touchBarMenu.onDidChange(function () { return _this.touchBarUpdater.schedule(); }));\n        }\n        var actions = [];\n        // Fill actions into groups respecting order\n        menuItemActionItem_1.fillInActionBarActions(this.touchBarMenu, undefined, actions);\n        // Convert into command action multi array\n        var items = [];\n        var group = [];\n        for (var _i = 0, actions_3 = actions; _i < actions_3.length; _i++) {\n            var action = actions_3[_i];\n            // Command\n            if (action instanceof actions_2.MenuItemAction) {\n                group.push(action.item);\n            }\n            // Separator\n            else if (action instanceof actionbar_1.Separator) {\n                if (group.length) {\n                    items.push(group);\n                }\n                group = [];\n            }\n        }\n        if (group.length) {\n            items.push(group);\n        }\n        // Only update if the actions have changed\n        if (!objects_1.equals(this.lastInstalledTouchedBar, items)) {\n            this.lastInstalledTouchedBar = items;\n            this.windowService.updateTouchBar(items);\n        }\n    };\n    ElectronWindow.prototype.setupCrashReporter = function () {\n        var _this = this;\n        // base options with product info\n        var options = {\n            companyName: product_1.default.crashReporter.companyName,\n            productName: product_1.default.crashReporter.productName,\n            submitURL: platform_1.isWindows ? product_1.default.hockeyApp[\"win32-\" + process.arch] : platform_1.isLinux ? product_1.default.hockeyApp[\"linux-\" + process.arch] : product_1.default.hockeyApp.darwin,\n            extra: {\n                vscode_version: package_1.default.version,\n                vscode_commit: product_1.default.commit\n            }\n        };\n        // mixin telemetry info\n        this.telemetryService.getTelemetryInfo()\n            .then(function (info) {\n            objects_1.assign(options.extra, {\n                vscode_sessionId: info.sessionId\n            });\n            // start crash reporter right here\n            electron_1.crashReporter.start(objects_1.deepClone(options));\n            // start crash reporter in the main process\n            return _this.windowsService.startCrashReporter(options);\n        });\n    };\n    ElectronWindow.prototype.onAddFoldersRequest = function (request) {\n        var _a;\n        // Buffer all pending requests\n        (_a = this.pendingFoldersToAdd).push.apply(_a, request.foldersToAdd.map(function (f) { return uri_1.URI.revive(f); }));\n        // Delay the adding of folders a bit to buffer in case more requests are coming\n        if (!this.addFoldersScheduler.isScheduled()) {\n            this.addFoldersScheduler.schedule();\n        }\n    };\n    ElectronWindow.prototype.doAddFolders = function () {\n        var foldersToAdd = [];\n        this.pendingFoldersToAdd.forEach(function (folder) {\n            foldersToAdd.push(({ uri: folder }));\n        });\n        this.pendingFoldersToAdd = [];\n        this.workspaceEditingService.addFolders(foldersToAdd);\n    };\n    ElectronWindow.prototype.onOpenFiles = function (request) {\n        var _this = this;\n        var inputs = [];\n        var diffMode = !!(request.filesToDiff && (request.filesToDiff.length === 2));\n        if (!diffMode && request.filesToOpen) {\n            inputs.push.apply(inputs, this.toInputs(request.filesToOpen, false));\n        }\n        if (!diffMode && request.filesToCreate) {\n            inputs.push.apply(inputs, this.toInputs(request.filesToCreate, true));\n        }\n        if (diffMode && request.filesToDiff) {\n            inputs.push.apply(inputs, this.toInputs(request.filesToDiff, false));\n        }\n        if (inputs.length) {\n            this.openResources(inputs, diffMode);\n        }\n        if (request.filesToWait && inputs.length) {\n            // In wait mode, listen to changes to the editors and wait until the files\n            // are closed that the user wants to wait for. When this happens we delete\n            // the wait marker file to signal to the outside that editing is done.\n            var resourcesToWaitFor_2 = request.filesToWait.paths.map(function (p) { return uri_1.URI.revive(p.fileUri); });\n            var waitMarkerFile_2 = uri_1.URI.revive(request.filesToWait.waitMarkerFileUri);\n            var unbind_1 = this.editorService.onDidCloseEditor(function () {\n                if (resourcesToWaitFor_2.every(function (resource) { return !_this.editorService.isOpen({ resource: resource }); })) {\n                    unbind_1.dispose();\n                    _this.fileService.del(waitMarkerFile_2);\n                }\n            });\n        }\n    };\n    ElectronWindow.prototype.openResources = function (resources, diffMode) {\n        var _this = this;\n        this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n            // In diffMode we open 2 resources as diff\n            if (diffMode && resources.length === 2) {\n                return _this.editorService.openEditor({ leftResource: resources[0].resource, rightResource: resources[1].resource, options: { pinned: true } });\n            }\n            // For one file, just put it into the current active editor\n            if (resources.length === 1) {\n                return _this.editorService.openEditor(resources[0]);\n            }\n            // Otherwise open all\n            return _this.editorService.openEditors(resources);\n        });\n    };\n    ElectronWindow.prototype.toInputs = function (paths, isNew) {\n        return paths.map(function (p) {\n            var resource = uri_1.URI.revive(p.fileUri);\n            var input;\n            if (isNew) {\n                input = { filePath: resource.fsPath, options: { pinned: true } };\n            }\n            else {\n                input = { resource: resource, options: { pinned: true } };\n            }\n            if (!isNew && typeof p.lineNumber === 'number' && typeof p.columnNumber === 'number') {\n                input.options.selection = {\n                    startLineNumber: p.lineNumber,\n                    startColumn: p.columnNumber\n                };\n            }\n            return input;\n        });\n    };\n    ElectronWindow.prototype.dispose = function () {\n        this.touchBarDisposables = lifecycle_1.dispose(this.touchBarDisposables);\n        _super.prototype.dispose.call(this);\n    };\n    ElectronWindow = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, windows_1.IWindowsService),\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, titleService_1.ITitleService),\n        tslib_1.__param(5, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(6, notification_1.INotificationService),\n        tslib_1.__param(7, commands_1.ICommandService),\n        tslib_1.__param(8, keybinding_1.IKeybindingService),\n        tslib_1.__param(9, contextView_1.IContextMenuService),\n        tslib_1.__param(10, telemetry_1.ITelemetryService),\n        tslib_1.__param(11, workspaceEditing_1.IWorkspaceEditingService),\n        tslib_1.__param(12, files_1.IFileService),\n        tslib_1.__param(13, actions_2.IMenuService),\n        tslib_1.__param(14, lifecycle_2.ILifecycleService),\n        tslib_1.__param(15, integrity_1.IIntegrityService),\n        tslib_1.__param(16, environment_1.IEnvironmentService),\n        tslib_1.__param(17, accessibility_1.IAccessibilityService),\n        tslib_1.__param(18, workspace_1.IWorkspaceContextService)\n    ], ElectronWindow);\n    return ElectronWindow;\n}(lifecycle_1.Disposable));\nexports.ElectronWindow = ElectronWindow;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/window.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/window.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as errors from 'vs/base/common/errors';\nimport { equals, deepClone, assign } from 'vs/base/common/objects';\nimport * as DOM from 'vs/base/browser/dom';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { toResource, IUntitledResourceInput } from 'vs/workbench/common/editor';\nimport { IEditorService, IResourceEditor } from 'vs/workbench/services/editor/common/editorService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWindowsService, IWindowService, IWindowSettings, IOpenFileRequest, IWindowsConfiguration, IAddFoldersRequest, IRunActionInWindowRequest, IPathData, IRunKeybindingInWindowRequest } from 'vs/platform/windows/common/windows';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ITitleService } from 'vs/workbench/services/title/common/titleService';\nimport { IWorkbenchThemeService, VS_HC_THEME } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport * as browser from 'vs/base/browser/browser';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { KeyboardMapperFactory } from 'vs/workbench/services/keybinding/electron-browser/keybindingService';\nimport { ipcRenderer as ipc, webFrame, crashReporter, Event } from 'electron';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { IMenuService, MenuId, IMenu, MenuItemAction, ICommandAction } from 'vs/platform/actions/common/actions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { fillInActionBarActions } from 'vs/platform/actions/browser/menuItemActionItem';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { LifecyclePhase, ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IWorkspaceFolderCreationData } from 'vs/platform/workspaces/common/workspaces';\nimport { IIntegrityService } from 'vs/workbench/services/integrity/common/integrity';\nimport { isRootUser, isWindows, isMacintosh, isLinux } from 'vs/base/common/platform';\nimport product from 'vs/platform/product/node/product';\nimport pkg from 'vs/platform/product/node/package';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { EditorServiceImpl } from 'vs/workbench/browser/parts/editor/editor';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\nimport { WorkbenchState, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nconst TextInputActions: IAction[] = [\n\tnew Action('undo', nls.localize('undo', \"Undo\"), undefined, true, () => Promise.resolve(document.execCommand('undo'))),\n\tnew Action('redo', nls.localize('redo', \"Redo\"), undefined, true, () => Promise.resolve(document.execCommand('redo'))),\n\tnew Separator(),\n\tnew Action('editor.action.clipboardCutAction', nls.localize('cut', \"Cut\"), undefined, true, () => Promise.resolve(document.execCommand('cut'))),\n\tnew Action('editor.action.clipboardCopyAction', nls.localize('copy', \"Copy\"), undefined, true, () => Promise.resolve(document.execCommand('copy'))),\n\t(require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.pasteAction,\n\tnew Separator(),\n\tnew Action('editor.action.selectAll', nls.localize('selectAll', \"Select All\"), undefined, true, () => Promise.resolve(document.execCommand('selectAll')))\n];\n\nexport class ElectronWindow extends Disposable {\n\n\tprivate touchBarMenu?: IMenu;\n\tprivate touchBarUpdater: RunOnceScheduler;\n\tprivate touchBarDisposables: IDisposable[];\n\tprivate lastInstalledTouchedBar: ICommandAction[][];\n\n\tprivate previousConfiguredZoomLevel: number;\n\n\tprivate addFoldersScheduler: RunOnceScheduler;\n\tprivate pendingFoldersToAdd: URI[];\n\n\tprivate closeEmptyWindowScheduler: RunOnceScheduler = this._register(new RunOnceScheduler(() => this.onAllEditorsClosed(), 50));\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: EditorServiceImpl,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITitleService private readonly titleService: ITitleService,\n\t\t@IWorkbenchThemeService protected themeService: IWorkbenchThemeService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceEditingService private readonly workspaceEditingService: IWorkspaceEditingService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IIntegrityService private readonly integrityService: IIntegrityService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\n\t\tthis.touchBarDisposables = [];\n\n\t\tthis.pendingFoldersToAdd = [];\n\t\tthis.addFoldersScheduler = this._register(new RunOnceScheduler(() => this.doAddFolders(), 100));\n\n\t\tthis.registerListeners();\n\t\tthis.create();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// React to editor input changes\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.updateTouchbarMenu()));\n\n\t\t// prevent opening a real URL inside the shell\n\t\t[DOM.EventType.DRAG_OVER, DOM.EventType.DROP].forEach(event => {\n\t\t\twindow.document.body.addEventListener(event, (e: DragEvent) => {\n\t\t\t\tDOM.EventHelper.stop(e);\n\t\t\t});\n\t\t});\n\n\t\t// Support runAction event\n\t\tipc.on('vscode:runAction', (event: Event, request: IRunActionInWindowRequest) => {\n\t\t\tconst args: any[] = request.args || [];\n\n\t\t\t// If we run an action from the touchbar, we fill in the currently active resource\n\t\t\t// as payload because the touch bar items are context aware depending on the editor\n\t\t\tif (request.from === 'touchbar') {\n\t\t\t\tconst activeEditor = this.editorService.activeEditor;\n\t\t\t\tif (activeEditor) {\n\t\t\t\t\tconst resource = toResource(activeEditor, { supportSideBySide: true });\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\targs.push(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\targs.push({ from: request.from }); // TODO@telemetry this is a bit weird to send this to every action?\n\t\t\t}\n\n\t\t\tthis.commandService.executeCommand(request.id, ...args).then(_ => {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"commandExecuted\" : {\n\t\t\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('commandExecuted', { id: request.id, from: request.from });\n\t\t\t}, err => {\n\t\t\t\tthis.notificationService.error(err);\n\t\t\t});\n\t\t});\n\n\t\t// Support runKeybinding event\n\t\tipc.on('vscode:runKeybinding', (event: Event, request: IRunKeybindingInWindowRequest) => {\n\t\t\tif (document.activeElement) {\n\t\t\t\tthis.keybindingService.dispatchByUserSettingsLabel(request.userSettingsLabel, document.activeElement);\n\t\t\t}\n\t\t});\n\n\t\t// Error reporting from main\n\t\tipc.on('vscode:reportError', (event: Event, error: string) => {\n\t\t\tif (error) {\n\t\t\t\terrors.onUnexpectedError(JSON.parse(error));\n\t\t\t}\n\t\t});\n\n\t\t// Support openFiles event for existing and new files\n\t\tipc.on('vscode:openFiles', (event: Event, request: IOpenFileRequest) => this.onOpenFiles(request));\n\n\t\t// Support addFolders event if we have a workspace opened\n\t\tipc.on('vscode:addFolders', (event: Event, request: IAddFoldersRequest) => this.onAddFoldersRequest(request));\n\n\t\t// Message support\n\t\tipc.on('vscode:showInfoMessage', (event: Event, message: string) => {\n\t\t\tthis.notificationService.info(message);\n\t\t});\n\n\t\t// Fullscreen Events\n\t\tipc.on('vscode:enterFullScreen', () => {\n\t\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t\tbrowser.setFullscreen(true);\n\t\t\t});\n\t\t});\n\n\t\tipc.on('vscode:leaveFullScreen', () => {\n\t\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t\tbrowser.setFullscreen(false);\n\t\t\t});\n\t\t});\n\n\t\t// High Contrast Events\n\t\tipc.on('vscode:enterHighContrast', () => {\n\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings>('window');\n\t\t\tif (windowConfig && windowConfig.autoDetectHighContrast) {\n\t\t\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t\t\tthis.themeService.setColorTheme(VS_HC_THEME, undefined);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tipc.on('vscode:leaveHighContrast', () => {\n\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings>('window');\n\t\t\tif (windowConfig && windowConfig.autoDetectHighContrast) {\n\t\t\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t\t\tthis.themeService.restoreColorTheme();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// keyboard layout changed event\n\t\tipc.on('vscode:keyboardLayoutChanged', () => {\n\t\t\tKeyboardMapperFactory.INSTANCE._onKeyboardLayoutChanged();\n\t\t});\n\n\t\t// keyboard layout changed event\n\t\tipc.on('vscode:accessibilitySupportChanged', (event: Event, accessibilitySupportEnabled: boolean) => {\n\t\t\tthis.accessibilityService.setAccessibilitySupport(accessibilitySupportEnabled ? AccessibilitySupport.Enabled : AccessibilitySupport.Disabled);\n\t\t});\n\n\t\t// Zoom level changes\n\t\tthis.updateWindowZoomLevel();\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('window.zoomLevel')) {\n\t\t\t\tthis.updateWindowZoomLevel();\n\t\t\t}\n\t\t}));\n\n\t\t// Context menu support in input/textarea\n\t\twindow.document.addEventListener('contextmenu', e => this.onContextMenu(e));\n\n\t\t// Listen to visible editor changes\n\t\tthis._register(this.editorService.onDidVisibleEditorsChange(() => this.onDidVisibleEditorsChange()));\n\n\t\t// Listen to editor closing (if we run with --wait)\n\t\tconst filesToWait = this.windowService.getConfiguration().filesToWait;\n\t\tif (filesToWait) {\n\t\t\tconst resourcesToWaitFor = coalesce(filesToWait.paths.map(p => p.fileUri));\n\t\t\tconst waitMarkerFile = filesToWait.waitMarkerFileUri;\n\t\t\tconst listenerDispose = this.editorService.onDidCloseEditor(() => this.onEditorClosed(listenerDispose, resourcesToWaitFor, waitMarkerFile));\n\n\t\t\tthis._register(listenerDispose);\n\t\t}\n\t}\n\n\tprivate onDidVisibleEditorsChange(): void {\n\n\t\t// Close when empty: check if we should close the window based on the setting\n\t\t// Overruled by: window has a workspace opened or this window is for extension development\n\t\t// or setting is disabled. Also enabled when running with --wait from the command line.\n\t\tconst visibleEditors = this.editorService.visibleControls;\n\t\tif (visibleEditors.length === 0 && this.contextService.getWorkbenchState() === WorkbenchState.EMPTY && !this.environmentService.isExtensionDevelopment) {\n\t\t\tconst closeWhenEmpty = this.configurationService.getValue<boolean>('window.closeWhenEmpty');\n\t\t\tif (closeWhenEmpty || this.environmentService.args.wait) {\n\t\t\t\tthis.closeEmptyWindowScheduler.schedule();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onAllEditorsClosed(): void {\n\t\tconst visibleEditors = this.editorService.visibleControls.length;\n\t\tif (visibleEditors === 0) {\n\t\t\tthis.windowService.closeWindow();\n\t\t}\n\t}\n\n\tprivate onEditorClosed(listenerDispose: IDisposable, resourcesToWaitFor: URI[], waitMarkerFile: URI): void {\n\n\t\t// In wait mode, listen to changes to the editors and wait until the files\n\t\t// are closed that the user wants to wait for. When this happens we delete\n\t\t// the wait marker file to signal to the outside that editing is done.\n\t\tif (resourcesToWaitFor.every(resource => !this.editorService.isOpen({ resource }))) {\n\t\t\tlistenerDispose.dispose();\n\t\t\tthis.fileService.del(waitMarkerFile);\n\t\t}\n\t}\n\n\tprivate onContextMenu(e: MouseEvent): void {\n\t\tif (e.target instanceof HTMLElement) {\n\t\t\tconst target = <HTMLElement>e.target;\n\t\t\tif (target.nodeName && (target.nodeName.toLowerCase() === 'input' || target.nodeName.toLowerCase() === 'textarea')) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\n\t\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\t\tgetAnchor: () => e,\n\t\t\t\t\tgetActions: () => TextInputActions,\n\t\t\t\t\tonHide: () => target.focus() // fixes https://github.com/Microsoft/vscode/issues/52948\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateWindowZoomLevel(): void {\n\t\tconst windowConfig: IWindowsConfiguration = this.configurationService.getValue<IWindowsConfiguration>();\n\n\t\tlet newZoomLevel = 0;\n\t\tif (windowConfig.window && typeof windowConfig.window.zoomLevel === 'number') {\n\t\t\tnewZoomLevel = windowConfig.window.zoomLevel;\n\n\t\t\t// Leave early if the configured zoom level did not change (https://github.com/Microsoft/vscode/issues/1536)\n\t\t\tif (this.previousConfiguredZoomLevel === newZoomLevel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.previousConfiguredZoomLevel = newZoomLevel;\n\t\t}\n\n\t\tif (webFrame.getZoomLevel() !== newZoomLevel) {\n\t\t\twebFrame.setZoomLevel(newZoomLevel);\n\t\t\tbrowser.setZoomFactor(webFrame.getZoomFactor());\n\t\t\t// See https://github.com/Microsoft/vscode/issues/26151\n\t\t\t// Cannot be trusted because the webFrame might take some time\n\t\t\t// until it really applies the new zoom level\n\t\t\tbrowser.setZoomLevel(webFrame.getZoomLevel(), /*isTrusted*/false);\n\t\t}\n\t}\n\n\tprivate create(): void {\n\n\t\t// Handle window.open() calls\n\t\tconst $this = this;\n\t\twindow.open = function (url: string, target: string, features: string, replace: boolean): Window | null {\n\t\t\t$this.windowsService.openExternal(url);\n\n\t\t\treturn null;\n\t\t};\n\n\t\t// Emit event when vscode is ready\n\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\tipc.send('vscode:workbenchReady', this.windowService.getCurrentWindowId());\n\t\t});\n\n\t\t// Integrity warning\n\t\tthis.integrityService.isPure().then(res => this.titleService.updateProperties({ isPure: res.isPure }));\n\n\t\t// Root warning\n\t\tthis.lifecycleService.when(LifecyclePhase.Restored).then(() => {\n\t\t\tlet isAdminPromise: Promise<boolean>;\n\t\t\tif (isWindows) {\n\t\t\t\tisAdminPromise = import('native-is-elevated').then(isElevated => isElevated());\n\t\t\t} else {\n\t\t\t\tisAdminPromise = Promise.resolve(isRootUser());\n\t\t\t}\n\n\t\t\treturn isAdminPromise.then(isAdmin => {\n\n\t\t\t\t// Update title\n\t\t\t\tthis.titleService.updateProperties({ isAdmin });\n\n\t\t\t\t// Show warning message (unix only)\n\t\t\t\tif (isAdmin && !isWindows) {\n\t\t\t\t\tthis.notificationService.warn(nls.localize('runningAsRoot', \"It is not recommended to run {0} as root user.\", product.nameShort));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Touchbar menu (if enabled)\n\t\tthis.updateTouchbarMenu();\n\n\t\t// Crash reporter (if enabled)\n\t\tif (!this.environmentService.disableCrashReporter && product.crashReporter && product.hockeyApp && this.configurationService.getValue('telemetry.enableCrashReporter')) {\n\t\t\tthis.setupCrashReporter();\n\t\t}\n\t}\n\n\tprivate updateTouchbarMenu(): void {\n\t\tif (\n\t\t\t!browser.isMacintosh || // macOS only\n\t\t\t!this.configurationService.getValue<boolean>('keyboard.touchbar.enabled') // disabled via setting\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Dispose old\n\t\tthis.touchBarDisposables = dispose(this.touchBarDisposables);\n\t\tthis.touchBarMenu = undefined;\n\n\t\t// Create new (delayed)\n\t\tthis.touchBarUpdater = new RunOnceScheduler(() => this.doUpdateTouchbarMenu(), 300);\n\t\tthis.touchBarDisposables.push(this.touchBarUpdater);\n\t\tthis.touchBarUpdater.schedule();\n\t}\n\n\tprivate doUpdateTouchbarMenu(): void {\n\t\tif (!this.touchBarMenu) {\n\t\t\tthis.touchBarMenu = this.editorService.invokeWithinEditorContext(accessor => this.menuService.createMenu(MenuId.TouchBarContext, accessor.get(IContextKeyService)));\n\t\t\tthis.touchBarDisposables.push(this.touchBarMenu);\n\t\t\tthis.touchBarDisposables.push(this.touchBarMenu.onDidChange(() => this.touchBarUpdater.schedule()));\n\t\t}\n\n\t\tconst actions: Array<MenuItemAction | Separator> = [];\n\n\t\t// Fill actions into groups respecting order\n\t\tfillInActionBarActions(this.touchBarMenu, undefined, actions);\n\n\t\t// Convert into command action multi array\n\t\tconst items: ICommandAction[][] = [];\n\t\tlet group: ICommandAction[] = [];\n\t\tfor (const action of actions) {\n\n\t\t\t// Command\n\t\t\tif (action instanceof MenuItemAction) {\n\t\t\t\tgroup.push(action.item);\n\t\t\t}\n\n\t\t\t// Separator\n\t\t\telse if (action instanceof Separator) {\n\t\t\t\tif (group.length) {\n\t\t\t\t\titems.push(group);\n\t\t\t\t}\n\n\t\t\t\tgroup = [];\n\t\t\t}\n\t\t}\n\n\t\tif (group.length) {\n\t\t\titems.push(group);\n\t\t}\n\n\t\t// Only update if the actions have changed\n\t\tif (!equals(this.lastInstalledTouchedBar, items)) {\n\t\t\tthis.lastInstalledTouchedBar = items;\n\t\t\tthis.windowService.updateTouchBar(items);\n\t\t}\n\t}\n\n\tprivate setupCrashReporter(): void {\n\n\t\t// base options with product info\n\t\tconst options = {\n\t\t\tcompanyName: product.crashReporter.companyName,\n\t\t\tproductName: product.crashReporter.productName,\n\t\t\tsubmitURL: isWindows ? product.hockeyApp[`win32-${process.arch}`] : isLinux ? product.hockeyApp[`linux-${process.arch}`] : product.hockeyApp.darwin,\n\t\t\textra: {\n\t\t\t\tvscode_version: pkg.version,\n\t\t\t\tvscode_commit: product.commit\n\t\t\t}\n\t\t};\n\n\t\t// mixin telemetry info\n\t\tthis.telemetryService.getTelemetryInfo()\n\t\t\t.then(info => {\n\t\t\t\tassign(options.extra, {\n\t\t\t\t\tvscode_sessionId: info.sessionId\n\t\t\t\t});\n\n\t\t\t\t// start crash reporter right here\n\t\t\t\tcrashReporter.start(deepClone(options));\n\n\t\t\t\t// start crash reporter in the main process\n\t\t\t\treturn this.windowsService.startCrashReporter(options);\n\t\t\t});\n\t}\n\n\tprivate onAddFoldersRequest(request: IAddFoldersRequest): void {\n\n\t\t// Buffer all pending requests\n\t\tthis.pendingFoldersToAdd.push(...request.foldersToAdd.map(f => URI.revive(f)));\n\n\t\t// Delay the adding of folders a bit to buffer in case more requests are coming\n\t\tif (!this.addFoldersScheduler.isScheduled()) {\n\t\t\tthis.addFoldersScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate doAddFolders(): void {\n\t\tconst foldersToAdd: IWorkspaceFolderCreationData[] = [];\n\n\t\tthis.pendingFoldersToAdd.forEach(folder => {\n\t\t\tfoldersToAdd.push(({ uri: folder }));\n\t\t});\n\n\t\tthis.pendingFoldersToAdd = [];\n\n\t\tthis.workspaceEditingService.addFolders(foldersToAdd);\n\t}\n\n\tprivate onOpenFiles(request: IOpenFileRequest): void {\n\t\tconst inputs: IResourceEditor[] = [];\n\t\tconst diffMode = !!(request.filesToDiff && (request.filesToDiff.length === 2));\n\n\t\tif (!diffMode && request.filesToOpen) {\n\t\t\tinputs.push(...this.toInputs(request.filesToOpen, false));\n\t\t}\n\n\t\tif (!diffMode && request.filesToCreate) {\n\t\t\tinputs.push(...this.toInputs(request.filesToCreate, true));\n\t\t}\n\n\t\tif (diffMode && request.filesToDiff) {\n\t\t\tinputs.push(...this.toInputs(request.filesToDiff, false));\n\t\t}\n\n\t\tif (inputs.length) {\n\t\t\tthis.openResources(inputs, diffMode);\n\t\t}\n\n\t\tif (request.filesToWait && inputs.length) {\n\t\t\t// In wait mode, listen to changes to the editors and wait until the files\n\t\t\t// are closed that the user wants to wait for. When this happens we delete\n\t\t\t// the wait marker file to signal to the outside that editing is done.\n\t\t\tconst resourcesToWaitFor = request.filesToWait.paths.map(p => URI.revive(p.fileUri));\n\t\t\tconst waitMarkerFile = URI.revive(request.filesToWait.waitMarkerFileUri);\n\t\t\tconst unbind = this.editorService.onDidCloseEditor(() => {\n\t\t\t\tif (resourcesToWaitFor.every(resource => !this.editorService.isOpen({ resource }))) {\n\t\t\t\t\tunbind.dispose();\n\t\t\t\t\tthis.fileService.del(waitMarkerFile);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate openResources(resources: Array<IResourceInput | IUntitledResourceInput>, diffMode: boolean): void {\n\t\tthis.lifecycleService.when(LifecyclePhase.Ready).then((): Promise<any> => {\n\n\t\t\t// In diffMode we open 2 resources as diff\n\t\t\tif (diffMode && resources.length === 2) {\n\t\t\t\treturn this.editorService.openEditor({ leftResource: resources[0].resource!, rightResource: resources[1].resource!, options: { pinned: true } });\n\t\t\t}\n\n\t\t\t// For one file, just put it into the current active editor\n\t\t\tif (resources.length === 1) {\n\t\t\t\treturn this.editorService.openEditor(resources[0]);\n\t\t\t}\n\n\t\t\t// Otherwise open all\n\t\t\treturn this.editorService.openEditors(resources);\n\t\t});\n\t}\n\n\tprivate toInputs(paths: IPathData[], isNew: boolean): IResourceEditor[] {\n\t\treturn paths.map(p => {\n\t\t\tconst resource = URI.revive(p.fileUri);\n\t\t\tlet input: IResourceInput | IUntitledResourceInput;\n\t\t\tif (isNew) {\n\t\t\t\tinput = { filePath: resource.fsPath, options: { pinned: true } } as IUntitledResourceInput;\n\t\t\t} else {\n\t\t\t\tinput = { resource, options: { pinned: true } } as IResourceInput;\n\t\t\t}\n\n\t\t\tif (!isNew && typeof p.lineNumber === 'number' && typeof p.columnNumber === 'number') {\n\t\t\t\tinput.options!.selection = {\n\t\t\t\t\tstartLineNumber: p.lineNumber,\n\t\t\t\t\tstartColumn: p.columnNumber\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn input;\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.touchBarDisposables = dispose(this.touchBarDisposables);\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}