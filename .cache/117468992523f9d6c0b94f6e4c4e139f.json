{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsNone.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsNone.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar nls = require(\"vs/nls\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar showExtensionQuery_1 = require(\"vs/workbench/contrib/format/browser/showExtensionQuery\");\neditorExtensions_1.registerEditorAction(/** @class */ (function (_super) {\n    tslib_1.__extends(FormatDocumentMultipleAction, _super);\n    function FormatDocumentMultipleAction() {\n        return _super.call(this, {\n            id: 'editor.action.formatDocument.none',\n            label: nls.localize('formatDocument.label.multiple', \"Format Document\"),\n            alias: 'Format Document',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n            kbOpts: {\n                kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n                primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_F,\n                linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_I },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib,\n            }\n        }) || this;\n    }\n    FormatDocumentMultipleAction.prototype.run = function (accessor, editor, args) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var commandService, viewletService, notificationService, model, formatterCount, langName_1, message, choice;\n            return tslib_1.__generator(this, function (_a) {\n                if (!editor.hasModel()) {\n                    return [2 /*return*/];\n                }\n                commandService = accessor.get(commands_1.ICommandService);\n                viewletService = accessor.get(viewlet_1.IViewletService);\n                notificationService = accessor.get(notification_1.INotificationService);\n                model = editor.getModel();\n                formatterCount = modes_1.DocumentFormattingEditProviderRegistry.all(model).length;\n                if (formatterCount > 1) {\n                    return [2 /*return*/, commandService.executeCommand('editor.action.formatDocument.multiple')];\n                }\n                else if (formatterCount === 1) {\n                    return [2 /*return*/, commandService.executeCommand('editor.action.formatDocument')];\n                }\n                else {\n                    langName_1 = model.getLanguageIdentifier().language;\n                    message = nls.localize('no.rovider', \"There is no formatter for '{0}'-files installed.\", langName_1);\n                    choice = {\n                        label: nls.localize('install.formatter', \"Install Formatter...\"),\n                        run: function () { return showExtensionQuery_1.showExtensionQuery(viewletService, \"category:formatters \" + langName_1); }\n                    };\n                    notificationService.prompt(notification_1.Severity.Info, message, [choice]);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return FormatDocumentMultipleAction;\n}(editorExtensions_1.EditorAction)));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsNone.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsNone.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oDAA0D;AAE1D,uEAA0G;AAC1G,wEAAuE;AACvE,gDAAgF;AAChF,4BAA8B;AAC9B,uEAA0E;AAC1E,yFAAqF;AACrF,iEAAuE;AACvE,yEAAgF;AAChF,6EAA8F;AAC9F,6FAA4F;AAE5F,uCAAoB;IAA4C,wDAAY;IAE3E;eACC,kBAAM;YACL,EAAE,EAAE,mCAAmC;YACvC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,iBAAiB,CAAC;YACvE,KAAK,EAAE,iBAAiB;YACxB,YAAY,EAAE,2BAAc,CAAC,GAAG,CAAC,qCAAiB,CAAC,QAAQ,EAAE,qCAAiB,CAAC,6BAA6B,CAAC,SAAS,EAAE,CAAC;YACzH,MAAM,EAAE;gBACP,MAAM,EAAE,2BAAc,CAAC,GAAG,CAAC,qCAAiB,CAAC,eAAe,EAAE,qCAAiB,CAAC,6BAA6B,CAAC,SAAS,EAAE,CAAC;gBAC1H,OAAO,EAAE,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK;gBAClD,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE;gBACjE,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IAEK,0CAAG,GAAT,UAAU,QAA0B,EAAE,MAAmB,EAAE,IAAS;+CAAG,OAAO;;;gBAC7E,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;oBACvB,sBAAO;iBACP;gBAEK,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,0BAAe,CAAC,CAAC;gBAC/C,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAe,CAAC,CAAC;gBAC/C,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC;gBACzD,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC1B,cAAc,GAAG,8CAAsC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;gBAEhF,IAAI,cAAc,GAAG,CAAC,EAAE;oBACvB,sBAAO,cAAc,CAAC,cAAc,CAAC,uCAAuC,CAAC,EAAC;iBAC9E;qBAAM,IAAI,cAAc,KAAK,CAAC,EAAE;oBAChC,sBAAO,cAAc,CAAC,cAAc,CAAC,8BAA8B,CAAC,EAAC;iBACrE;qBAAM;oBACA,aAAW,KAAK,CAAC,qBAAqB,EAAE,CAAC,QAAQ,CAAC;oBAClD,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,kDAAkD,EAAE,UAAQ,CAAC,CAAC;oBACnG,MAAM,GAAG;wBACd,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,sBAAsB,CAAC;wBAChE,GAAG,EAAE,cAAM,OAAA,uCAAkB,CAAC,cAAc,EAAE,yBAAuB,UAAU,CAAC,EAArE,CAAqE;qBAChF,CAAC;oBACF,mBAAmB,CAAC,MAAM,CAAC,uBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC7D;;;;KACD;IACF,mCAAC;AAAD,CAAC,AA1CoB,CAA2C,+BAAY,GA0C1E,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { DocumentFormattingEditProviderRegistry } from 'vs/editor/common/modes';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { showExtensionQuery } from 'vs/workbench/contrib/format/browser/showExtensionQuery';\n\nregisterEditorAction(class FormatDocumentMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument.none',\n\t\t\tlabel: nls.localize('formatDocument.label.multiple', \"Format Document\"),\n\t\t\talias: 'Format Document',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_F,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_I },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst viewletService = accessor.get(IViewletService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst model = editor.getModel();\n\t\tconst formatterCount = DocumentFormattingEditProviderRegistry.all(model).length;\n\n\t\tif (formatterCount > 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument.multiple');\n\t\t} else if (formatterCount === 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument');\n\t\t} else {\n\t\t\tconst langName = model.getLanguageIdentifier().language;\n\t\t\tconst message = nls.localize('no.rovider', \"There is no formatter for '{0}'-files installed.\", langName);\n\t\t\tconst choice = {\n\t\t\t\tlabel: nls.localize('install.formatter', \"Install Formatter...\"),\n\t\t\t\trun: () => showExtensionQuery(viewletService, `category:formatters ${langName}`)\n\t\t\t};\n\t\t\tnotificationService.prompt(Severity.Info, message, [choice]);\n\t\t}\n\t}\n});\n"]}]}