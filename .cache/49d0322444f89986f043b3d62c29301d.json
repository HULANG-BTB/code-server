{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar strings = require(\"vs/base/common/strings\");\nvar resources = require(\"vs/base/common/resources\");\nvar configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'jsonValidation',\n    defaultExtensionKind: 'workspace',\n    jsonSchema: {\n        description: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),\n        type: 'array',\n        defaultSnippets: [{ body: [{ fileMatch: '${1:file.json}', url: '${2:url}' }] }],\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { fileMatch: '${1:file.json}', url: '${2:url}' } }],\n            properties: {\n                fileMatch: {\n                    type: 'string',\n                    description: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern to match, for example \"package.json\" or \"*.launch\".'),\n                },\n                url: {\n                    description: nls.localize('contributes.jsonValidation.url', 'A schema URL (\\'http:\\', \\'https:\\') or relative path to the extension folder (\\'./\\').'),\n                    type: 'string'\n                }\n            }\n        }\n    }\n});\nvar JSONValidationExtensionPoint = /** @class */ (function () {\n    function JSONValidationExtensionPoint() {\n        configurationExtPoint.setHandler(function (extensions) {\n            var _loop_1 = function (extension) {\n                var extensionValue = extension.value;\n                var collector = extension.collector;\n                var extensionLocation = extension.description.extensionLocation;\n                if (!extensionValue || !Array.isArray(extensionValue)) {\n                    collector.error(nls.localize('invalid.jsonValidation', \"'configuration.jsonValidation' must be a array\"));\n                    return { value: void 0 };\n                }\n                extensionValue.forEach(function (extension) {\n                    if (typeof extension.fileMatch !== 'string') {\n                        collector.error(nls.localize('invalid.fileMatch', \"'configuration.jsonValidation.fileMatch' must be defined\"));\n                        return;\n                    }\n                    var uri = extension.url;\n                    if (typeof extension.url !== 'string') {\n                        collector.error(nls.localize('invalid.url', \"'configuration.jsonValidation.url' must be a URL or relative path\"));\n                        return;\n                    }\n                    if (strings.startsWith(uri, './')) {\n                        try {\n                            var colorThemeLocation = resources.joinPath(extensionLocation, uri);\n                            if (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n                                collector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));\n                            }\n                        }\n                        catch (e) {\n                            collector.error(nls.localize('invalid.url.fileschema', \"'configuration.jsonValidation.url' is an invalid relative URL: {0}\", e.message));\n                        }\n                    }\n                    else if (!strings.startsWith(uri, 'https:/') && strings.startsWith(uri, 'https:/')) {\n                        collector.error(nls.localize('invalid.url.schema', \"'configuration.jsonValidation.url' must start with 'http:', 'https:' or './' to reference schemas located in the extension\"));\n                        return;\n                    }\n                });\n            };\n            for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {\n                var extension = extensions_1[_i];\n                var state_1 = _loop_1(extension);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n        });\n    }\n    return JSONValidationExtensionPoint;\n}());\nexports.JSONValidationExtensionPoint = JSONValidationExtensionPoint;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport * as strings from 'vs/base/common/strings';\nimport * as resources from 'vs/base/common/resources';\n\ninterface IJSONValidationExtensionPoint {\n\tfileMatch: string;\n\turl: string;\n}\n\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IJSONValidationExtensionPoint[]>({\n\textensionPoint: 'jsonValidation',\n\tdefaultExtensionKind: 'workspace',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ fileMatch: '${1:file.json}', url: '${2:url}' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { fileMatch: '${1:file.json}', url: '${2:url}' } }],\n\t\t\tproperties: {\n\t\t\t\tfileMatch: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern to match, for example \"package.json\" or \"*.launch\".'),\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\tdescription: nls.localize('contributes.jsonValidation.url', 'A schema URL (\\'http:\\', \\'https:\\') or relative path to the extension folder (\\'./\\').'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class JSONValidationExtensionPoint {\n\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions) => {\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionValue = <IJSONValidationExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\t\t\t\tconst extensionLocation = extension.description.extensionLocation;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.jsonValidation', \"'configuration.jsonValidation' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\textensionValue.forEach(extension => {\n\t\t\t\t\tif (typeof extension.fileMatch !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.fileMatch', \"'configuration.jsonValidation.fileMatch' must be defined\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet uri = extension.url;\n\t\t\t\t\tif (typeof extension.url !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url', \"'configuration.jsonValidation.url' must be a URL or relative path\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (strings.startsWith(uri, './')) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst colorThemeLocation = resources.joinPath(extensionLocation, uri);\n\t\t\t\t\t\t\tif (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n\t\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.fileschema', \"'configuration.jsonValidation.url' is an invalid relative URL: {0}\", e.message));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!strings.startsWith(uri, 'https:/') && strings.startsWith(uri, 'https:/')) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.url.schema', \"'configuration.jsonValidation.url' must start with 'http:', 'https:' or './' to reference schemas located in the extension\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n}\n"]}]}