{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar color_1 = require(\"vs/base/common/color\");\nvar viewPart_1 = require(\"vs/editor/browser/view/viewPart\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar Settings = /** @class */ (function () {\n    function Settings(config, theme) {\n        this.lineHeight = config.editor.lineHeight;\n        this.pixelRatio = config.editor.pixelRatio;\n        this.overviewRulerLanes = config.editor.viewInfo.overviewRulerLanes;\n        this.renderBorder = config.editor.viewInfo.overviewRulerBorder;\n        var borderColor = theme.getColor(editorColorRegistry_1.editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = config.editor.viewInfo.hideCursorInOverviewRuler;\n        var cursorColor = theme.getColor(editorColorRegistry_1.editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        var minimapEnabled = config.editor.viewInfo.minimap.enabled;\n        var minimapSide = config.editor.viewInfo.minimap.side;\n        var backgroundColor = (minimapEnabled ? modes_1.TokenizationRegistry.getDefaultBackground() : null);\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = color_1.Color.Format.CSS.formatHex(backgroundColor);\n        }\n        var position = config.editor.layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n        this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        var _a = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes), x = _a[0], w = _a[1];\n        this.x = x;\n        this.w = w;\n    }\n    Settings.prototype._initLanes = function (canvasLeftOffset, canvasWidth, laneCount) {\n        var remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            var leftWidth = Math.floor(remainingWidth / 3);\n            var rightWidth = Math.floor(remainingWidth / 3);\n            var centerWidth = remainingWidth - leftWidth - rightWidth;\n            var leftOffset = canvasLeftOffset;\n            var centerOffset = leftOffset + leftWidth;\n            var rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            var leftWidth = Math.floor(remainingWidth / 2);\n            var rightWidth = remainingWidth - leftWidth;\n            var leftOffset = canvasLeftOffset;\n            var rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                ]\n            ];\n        }\n        else {\n            var offset = canvasLeftOffset;\n            var width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                ]\n            ];\n        }\n    };\n    Settings.prototype.equals = function (other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    };\n    return Settings;\n}());\nvar Constants;\n(function (Constants) {\n    Constants[Constants[\"MIN_DECORATION_HEIGHT\"] = 6] = \"MIN_DECORATION_HEIGHT\";\n})(Constants || (Constants = {}));\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\nvar DecorationsOverviewRuler = /** @class */ (function (_super) {\n    tslib_1.__extends(DecorationsOverviewRuler, _super);\n    function DecorationsOverviewRuler(context) {\n        var _this = _super.call(this, context) || this;\n        _this._domNode = fastDomNode_1.createFastDomNode(document.createElement('canvas'));\n        _this._domNode.setClassName('decorationsOverviewRuler');\n        _this._domNode.setPosition('absolute');\n        _this._domNode.setLayerHinting(true);\n        _this._domNode.setAttribute('aria-hidden', 'true');\n        _this._updateSettings(false);\n        _this._tokensColorTrackerListener = modes_1.TokenizationRegistry.onDidChange(function (e) {\n            if (e.changedColorMap) {\n                _this._updateSettings(true);\n            }\n        });\n        _this._cursorPositions = [];\n        return _this;\n    }\n    DecorationsOverviewRuler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._tokensColorTrackerListener.dispose();\n    };\n    DecorationsOverviewRuler.prototype._updateSettings = function (renderNow) {\n        var newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    };\n    // ---- begin view event handlers\n    DecorationsOverviewRuler.prototype.onConfigurationChanged = function (e) {\n        return this._updateSettings(false);\n    };\n    DecorationsOverviewRuler.prototype.onCursorStateChanged = function (e) {\n        this._cursorPositions = [];\n        for (var i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(position_1.Position.compare);\n        return true;\n    };\n    DecorationsOverviewRuler.prototype.onDecorationsChanged = function (e) {\n        return true;\n    };\n    DecorationsOverviewRuler.prototype.onFlushed = function (e) {\n        return true;\n    };\n    DecorationsOverviewRuler.prototype.onScrollChanged = function (e) {\n        return e.scrollHeightChanged;\n    };\n    DecorationsOverviewRuler.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    DecorationsOverviewRuler.prototype.onThemeChanged = function (e) {\n        // invalidate color cache\n        this._context.model.invalidateOverviewRulerColorCache();\n        return this._updateSettings(false);\n    };\n    // ---- end view event handlers\n    DecorationsOverviewRuler.prototype.getDomNode = function () {\n        return this._domNode.domNode;\n    };\n    DecorationsOverviewRuler.prototype.prepareRender = function (ctx) {\n        // Nothing to read\n    };\n    DecorationsOverviewRuler.prototype.render = function (editorCtx) {\n        this._render();\n    };\n    DecorationsOverviewRuler.prototype._render = function () {\n        var canvasWidth = this._settings.canvasWidth;\n        var canvasHeight = this._settings.canvasHeight;\n        var lineHeight = this._settings.lineHeight;\n        var viewLayout = this._context.viewLayout;\n        var outerHeight = this._context.viewLayout.getScrollHeight();\n        var heightRatio = canvasHeight / outerHeight;\n        var decorations = this._context.model.getAllOverviewRulerDecorations(this._context.theme);\n        var minDecorationHeight = (Constants.MIN_DECORATION_HEIGHT * this._settings.pixelRatio) | 0;\n        var halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        var canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        var x = this._settings.x;\n        var w = this._settings.w;\n        // Avoid flickering by always rendering the colors in the same order\n        // colors that don't use transparency will be sorted last (they start with #)\n        var colors = Object.keys(decorations);\n        colors.sort();\n        for (var cIndex = 0, cLen = colors.length; cIndex < cLen; cIndex++) {\n            var color = colors[cIndex];\n            var colorDecorations = decorations[color];\n            canvasCtx.fillStyle = color;\n            var prevLane = 0;\n            var prevY1 = 0;\n            var prevY2 = 0;\n            for (var i = 0, len = colorDecorations.length; i < len; i++) {\n                var lane = colorDecorations[3 * i];\n                var startLineNumber = colorDecorations[3 * i + 1];\n                var endLineNumber = colorDecorations[3 * i + 2];\n                var y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                var y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                var height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    var yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            var cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            var halfCursorHeight = (cursorHeight / 2) | 0;\n            var cursorX = this._settings.x[OverviewRulerLane.Full];\n            var cursorW = this._settings.w[OverviewRulerLane.Full];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            var prevY1 = -100;\n            var prevY2 = -100;\n            for (var i = 0, len = this._cursorPositions.length; i < len; i++) {\n                var cursor = this._cursorPositions[i];\n                var yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                var y1 = yCenter - halfCursorHeight;\n                var y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    };\n    return DecorationsOverviewRuler;\n}(viewPart_1.ViewPart));\nexports.DecorationsOverviewRuler = DecorationsOverviewRuler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { Color } from 'vs/base/common/color';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ViewPart } from 'vs/editor/browser/view/viewPart';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IConfiguration } from 'vs/editor/common/editorCommon';\nimport { TokenizationRegistry } from 'vs/editor/common/modes';\nimport { editorCursorForeground, editorOverviewRulerBorder } from 'vs/editor/common/view/editorColorRegistry';\nimport { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { ITheme } from 'vs/platform/theme/common/themeService';\n\nclass Settings {\n\n\tpublic readonly lineHeight: number;\n\tpublic readonly pixelRatio: number;\n\tpublic readonly overviewRulerLanes: number;\n\n\tpublic readonly renderBorder: boolean;\n\tpublic readonly borderColor: string | null;\n\n\tpublic readonly hideCursor: boolean;\n\tpublic readonly cursorColor: string | null;\n\n\tpublic readonly themeType: 'light' | 'dark' | 'hc';\n\tpublic readonly backgroundColor: string | null;\n\n\tpublic readonly top: number;\n\tpublic readonly right: number;\n\tpublic readonly domWidth: number;\n\tpublic readonly domHeight: number;\n\tpublic readonly canvasWidth: number;\n\tpublic readonly canvasHeight: number;\n\n\tpublic readonly x: number[];\n\tpublic readonly w: number[];\n\n\tconstructor(config: IConfiguration, theme: ITheme) {\n\t\tthis.lineHeight = config.editor.lineHeight;\n\t\tthis.pixelRatio = config.editor.pixelRatio;\n\t\tthis.overviewRulerLanes = config.editor.viewInfo.overviewRulerLanes;\n\n\t\tthis.renderBorder = config.editor.viewInfo.overviewRulerBorder;\n\t\tconst borderColor = theme.getColor(editorOverviewRulerBorder);\n\t\tthis.borderColor = borderColor ? borderColor.toString() : null;\n\n\t\tthis.hideCursor = config.editor.viewInfo.hideCursorInOverviewRuler;\n\t\tconst cursorColor = theme.getColor(editorCursorForeground);\n\t\tthis.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n\n\t\tthis.themeType = theme.type;\n\n\t\tconst minimapEnabled = config.editor.viewInfo.minimap.enabled;\n\t\tconst minimapSide = config.editor.viewInfo.minimap.side;\n\t\tconst backgroundColor = (minimapEnabled ? TokenizationRegistry.getDefaultBackground() : null);\n\t\tif (backgroundColor === null || minimapSide === 'left') {\n\t\t\tthis.backgroundColor = null;\n\t\t} else {\n\t\t\tthis.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n\t\t}\n\n\t\tconst position = config.editor.layoutInfo.overviewRuler;\n\t\tthis.top = position.top;\n\t\tthis.right = position.right;\n\t\tthis.domWidth = position.width;\n\t\tthis.domHeight = position.height;\n\t\tthis.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n\t\tthis.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n\n\t\tconst [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n\t\tthis.x = x;\n\t\tthis.w = w;\n\t}\n\n\tprivate _initLanes(canvasLeftOffset: number, canvasWidth: number, laneCount: number): [number[], number[]] {\n\t\tconst remainingWidth = canvasWidth - canvasLeftOffset;\n\n\t\tif (laneCount >= 3) {\n\t\t\tconst leftWidth = Math.floor(remainingWidth / 3);\n\t\t\tconst rightWidth = Math.floor(remainingWidth / 3);\n\t\t\tconst centerWidth = remainingWidth - leftWidth - rightWidth;\n\t\t\tconst leftOffset = canvasLeftOffset;\n\t\t\tconst centerOffset = leftOffset + leftWidth;\n\t\t\tconst rightOffset = leftOffset + leftWidth + centerWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\tleftOffset, // Left\n\t\t\t\t\tcenterOffset, // Center\n\t\t\t\t\tleftOffset, // Left | Center\n\t\t\t\t\trightOffset, // Right\n\t\t\t\t\tleftOffset, // Left | Right\n\t\t\t\t\tcenterOffset, // Center | Right\n\t\t\t\t\tleftOffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\tleftWidth, // Left\n\t\t\t\t\tcenterWidth, // Center\n\t\t\t\t\tleftWidth + centerWidth, // Left | Center\n\t\t\t\t\trightWidth, // Right\n\t\t\t\t\tleftWidth + centerWidth + rightWidth, // Left | Right\n\t\t\t\t\tcenterWidth + rightWidth, // Center | Right\n\t\t\t\t\tleftWidth + centerWidth + rightWidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t} else if (laneCount === 2) {\n\t\t\tconst leftWidth = Math.floor(remainingWidth / 2);\n\t\t\tconst rightWidth = remainingWidth - leftWidth;\n\t\t\tconst leftOffset = canvasLeftOffset;\n\t\t\tconst rightOffset = leftOffset + leftWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\tleftOffset, // Left\n\t\t\t\t\tleftOffset, // Center\n\t\t\t\t\tleftOffset, // Left | Center\n\t\t\t\t\trightOffset, // Right\n\t\t\t\t\tleftOffset, // Left | Right\n\t\t\t\t\tleftOffset, // Center | Right\n\t\t\t\t\tleftOffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\tleftWidth, // Left\n\t\t\t\t\tleftWidth, // Center\n\t\t\t\t\tleftWidth, // Left | Center\n\t\t\t\t\trightWidth, // Right\n\t\t\t\t\tleftWidth + rightWidth, // Left | Right\n\t\t\t\t\tleftWidth + rightWidth, // Center | Right\n\t\t\t\t\tleftWidth + rightWidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t} else {\n\t\t\tconst offset = canvasLeftOffset;\n\t\t\tconst width = remainingWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\toffset, // Left\n\t\t\t\t\toffset, // Center\n\t\t\t\t\toffset, // Left | Center\n\t\t\t\t\toffset, // Right\n\t\t\t\t\toffset, // Left | Right\n\t\t\t\t\toffset, // Center | Right\n\t\t\t\t\toffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\twidth, // Left\n\t\t\t\t\twidth, // Center\n\t\t\t\t\twidth, // Left | Center\n\t\t\t\t\twidth, // Right\n\t\t\t\t\twidth, // Left | Right\n\t\t\t\t\twidth, // Center | Right\n\t\t\t\t\twidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic equals(other: Settings): boolean {\n\t\treturn (\n\t\t\tthis.lineHeight === other.lineHeight\n\t\t\t&& this.pixelRatio === other.pixelRatio\n\t\t\t&& this.overviewRulerLanes === other.overviewRulerLanes\n\t\t\t&& this.renderBorder === other.renderBorder\n\t\t\t&& this.borderColor === other.borderColor\n\t\t\t&& this.hideCursor === other.hideCursor\n\t\t\t&& this.cursorColor === other.cursorColor\n\t\t\t&& this.themeType === other.themeType\n\t\t\t&& this.backgroundColor === other.backgroundColor\n\t\t\t&& this.top === other.top\n\t\t\t&& this.right === other.right\n\t\t\t&& this.domWidth === other.domWidth\n\t\t\t&& this.domHeight === other.domHeight\n\t\t\t&& this.canvasWidth === other.canvasWidth\n\t\t\t&& this.canvasHeight === other.canvasHeight\n\t\t);\n\t}\n}\n\nconst enum Constants {\n\tMIN_DECORATION_HEIGHT = 6\n}\n\nconst enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\nexport class DecorationsOverviewRuler extends ViewPart {\n\n\tprivate readonly _tokensColorTrackerListener: IDisposable;\n\tprivate readonly _domNode: FastDomNode<HTMLCanvasElement>;\n\tprivate _settings: Settings;\n\tprivate _cursorPositions: Position[];\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._domNode = createFastDomNode(document.createElement('canvas'));\n\t\tthis._domNode.setClassName('decorationsOverviewRuler');\n\t\tthis._domNode.setPosition('absolute');\n\t\tthis._domNode.setLayerHinting(true);\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._updateSettings(false);\n\n\t\tthis._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateSettings(true);\n\t\t\t}\n\t\t});\n\n\t\tthis._cursorPositions = [];\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._tokensColorTrackerListener.dispose();\n\t}\n\n\tprivate _updateSettings(renderNow: boolean): boolean {\n\t\tconst newSettings = new Settings(this._context.configuration, this._context.theme);\n\t\tif (this._settings && this._settings.equals(newSettings)) {\n\t\t\t// nothing to do\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._settings = newSettings;\n\n\t\tthis._domNode.setTop(this._settings.top);\n\t\tthis._domNode.setRight(this._settings.right);\n\t\tthis._domNode.setWidth(this._settings.domWidth);\n\t\tthis._domNode.setHeight(this._settings.domHeight);\n\t\tthis._domNode.domNode.width = this._settings.canvasWidth;\n\t\tthis._domNode.domNode.height = this._settings.canvasHeight;\n\n\t\tif (renderNow) {\n\t\t\tthis._render();\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn this._updateSettings(false);\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._cursorPositions = [];\n\t\tfor (let i = 0, len = e.selections.length; i < len; i++) {\n\t\t\tthis._cursorPositions[i] = e.selections[i].getPosition();\n\t\t}\n\t\tthis._cursorPositions.sort(Position.compare);\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollHeightChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\t// invalidate color cache\n\t\tthis._context.model.invalidateOverviewRulerColorCache();\n\t\treturn this._updateSettings(false);\n\t}\n\n\t// ---- end view event handlers\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode.domNode;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\t// Nothing to read\n\t}\n\n\tpublic render(editorCtx: RestrictedRenderingContext): void {\n\t\tthis._render();\n\t}\n\n\tprivate _render(): void {\n\t\tconst canvasWidth = this._settings.canvasWidth;\n\t\tconst canvasHeight = this._settings.canvasHeight;\n\t\tconst lineHeight = this._settings.lineHeight;\n\t\tconst viewLayout = this._context.viewLayout;\n\t\tconst outerHeight = this._context.viewLayout.getScrollHeight();\n\t\tconst heightRatio = canvasHeight / outerHeight;\n\t\tconst decorations = this._context.model.getAllOverviewRulerDecorations(this._context.theme);\n\n\t\tconst minDecorationHeight = (Constants.MIN_DECORATION_HEIGHT * this._settings.pixelRatio) | 0;\n\t\tconst halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n\n\t\tconst canvasCtx = this._domNode.domNode.getContext('2d')!;\n\t\tif (this._settings.backgroundColor === null) {\n\t\t\tcanvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t} else {\n\t\t\tcanvasCtx.fillStyle = this._settings.backgroundColor;\n\t\t\tcanvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\t}\n\n\t\tconst x = this._settings.x;\n\t\tconst w = this._settings.w;\n\t\t// Avoid flickering by always rendering the colors in the same order\n\t\t// colors that don't use transparency will be sorted last (they start with #)\n\t\tconst colors = Object.keys(decorations);\n\t\tcolors.sort();\n\t\tfor (let cIndex = 0, cLen = colors.length; cIndex < cLen; cIndex++) {\n\t\t\tconst color = colors[cIndex];\n\n\t\t\tconst colorDecorations = decorations[color];\n\n\t\t\tcanvasCtx.fillStyle = color;\n\n\t\t\tlet prevLane = 0;\n\t\t\tlet prevY1 = 0;\n\t\t\tlet prevY2 = 0;\n\t\t\tfor (let i = 0, len = colorDecorations.length; i < len; i++) {\n\t\t\t\tconst lane = colorDecorations[3 * i];\n\t\t\t\tconst startLineNumber = colorDecorations[3 * i + 1];\n\t\t\t\tconst endLineNumber = colorDecorations[3 * i + 2];\n\n\t\t\t\tlet y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n\t\t\t\tlet y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n\t\t\t\tconst height = y2 - y1;\n\t\t\t\tif (height < minDecorationHeight) {\n\t\t\t\t\tlet yCenter = ((y1 + y2) / 2) | 0;\n\t\t\t\t\tif (yCenter < halfMinDecorationHeight) {\n\t\t\t\t\t\tyCenter = halfMinDecorationHeight;\n\t\t\t\t\t} else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n\t\t\t\t\t\tyCenter = canvasHeight - halfMinDecorationHeight;\n\t\t\t\t\t}\n\t\t\t\t\ty1 = yCenter - halfMinDecorationHeight;\n\t\t\t\t\ty2 = yCenter + halfMinDecorationHeight;\n\t\t\t\t}\n\n\t\t\t\tif (y1 > prevY2 + 1 || lane !== prevLane) {\n\t\t\t\t\t// flush prev\n\t\t\t\t\tif (i !== 0) {\n\t\t\t\t\t\tcanvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n\t\t\t\t\t}\n\t\t\t\t\tprevLane = lane;\n\t\t\t\t\tprevY1 = y1;\n\t\t\t\t\tprevY2 = y2;\n\t\t\t\t} else {\n\t\t\t\t\t// merge into prev\n\t\t\t\t\tif (y2 > prevY2) {\n\t\t\t\t\t\tprevY2 = y2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n\t\t}\n\n\t\t// Draw cursors\n\t\tif (!this._settings.hideCursor && this._settings.cursorColor) {\n\t\t\tconst cursorHeight = (2 * this._settings.pixelRatio) | 0;\n\t\t\tconst halfCursorHeight = (cursorHeight / 2) | 0;\n\t\t\tconst cursorX = this._settings.x[OverviewRulerLane.Full];\n\t\t\tconst cursorW = this._settings.w[OverviewRulerLane.Full];\n\t\t\tcanvasCtx.fillStyle = this._settings.cursorColor;\n\n\t\t\tlet prevY1 = -100;\n\t\t\tlet prevY2 = -100;\n\t\t\tfor (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n\t\t\t\tconst cursor = this._cursorPositions[i];\n\n\t\t\t\tlet yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n\t\t\t\tif (yCenter < halfCursorHeight) {\n\t\t\t\t\tyCenter = halfCursorHeight;\n\t\t\t\t} else if (yCenter + halfCursorHeight > canvasHeight) {\n\t\t\t\t\tyCenter = canvasHeight - halfCursorHeight;\n\t\t\t\t}\n\t\t\t\tconst y1 = yCenter - halfCursorHeight;\n\t\t\t\tconst y2 = y1 + cursorHeight;\n\n\t\t\t\tif (y1 > prevY2 + 1) {\n\t\t\t\t\t// flush prev\n\t\t\t\t\tif (i !== 0) {\n\t\t\t\t\t\tcanvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n\t\t\t\t\t}\n\t\t\t\t\tprevY1 = y1;\n\t\t\t\t\tprevY2 = y2;\n\t\t\t\t} else {\n\t\t\t\t\t// merge into prev\n\t\t\t\t\tif (y2 > prevY2) {\n\t\t\t\t\t\tprevY2 = y2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n\t\t}\n\n\t\tif (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n\t\t\tcanvasCtx.beginPath();\n\t\t\tcanvasCtx.lineWidth = 1;\n\t\t\tcanvasCtx.strokeStyle = this._settings.borderColor;\n\t\t\tcanvasCtx.moveTo(0, 0);\n\t\t\tcanvasCtx.lineTo(0, canvasHeight);\n\t\t\tcanvasCtx.stroke();\n\n\t\t\tcanvasCtx.moveTo(0, 0);\n\t\t\tcanvasCtx.lineTo(canvasWidth, 0);\n\t\t\tcanvasCtx.stroke();\n\t\t}\n\t}\n}\n"]}]}