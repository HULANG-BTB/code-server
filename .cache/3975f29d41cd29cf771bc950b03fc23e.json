{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostMain.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostMain.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/async\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\", \"vs/base/common/numbers\", \"vs/base/common/uri\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostConfiguration\", \"vs/workbench/api/node/extHostExtensionService\", \"vs/workbench/api/node/extHostLogService\", \"vs/workbench/api/node/extHostWorkspace\", \"vs/workbench/services/extensions/node/rpcProtocol\", \"vs/base/common/types\"], function (require, exports, async_1, errors, lifecycle_1, numbers_1, uri_1, extHost_protocol_1, extHostConfiguration_1, extHostExtensionService_1, extHostLogService_1, extHostWorkspace_1, rpcProtocol_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // we don't (yet) throw when extensions parse\n    // uris that have no scheme\n    uri_1.setUriThrowOnMissingScheme(false);\n    const nativeExit = process.exit.bind(process);\n    function patchProcess(allowExit) {\n        process.exit = function (code) {\n            if (allowExit) {\n                exit(code);\n            }\n            else {\n                const err = new Error('An extension called process.exit() and this was prevented.');\n                console.warn(err.stack);\n            }\n        };\n        process.crash = function () {\n            const err = new Error('An extension called process.crash() and this was prevented.');\n            console.warn(err.stack);\n        };\n    }\n    function exit(code) {\n        nativeExit(code);\n    }\n    exports.exit = exit;\n    class ExtensionHostMain {\n        constructor(protocol, initData) {\n            this.disposables = [];\n            this._isTerminating = false;\n            const uriTransformer = null;\n            const rpcProtocol = new rpcProtocol_1.RPCProtocol(protocol, null, uriTransformer);\n            // ensure URIs are transformed and revived\n            initData = this.transform(initData, rpcProtocol);\n            this._environment = initData.environment;\n            const allowExit = !!this._environment.extensionTestsLocationURI; // to support other test frameworks like Jasmin that use process.exit (https://github.com/Microsoft/vscode/issues/37708)\n            patchProcess(allowExit);\n            this._patchPatchedConsole(rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadConsole));\n            // services\n            this._extHostLogService = new extHostLogService_1.ExtHostLogService(initData.logLevel, initData.logsLocation.fsPath);\n            this.disposables.push(this._extHostLogService);\n            this._searchRequestIdProvider = new numbers_1.Counter();\n            const extHostWorkspace = new extHostWorkspace_1.ExtHostWorkspace(rpcProtocol, this._extHostLogService, this._searchRequestIdProvider, types_1.withNullAsUndefined(initData.workspace));\n            this._extHostLogService.info('extension host started');\n            this._extHostLogService.trace('initData', initData);\n            const extHostConfiguraiton = new extHostConfiguration_1.ExtHostConfiguration(rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadConfiguration), extHostWorkspace);\n            this._extensionService = new extHostExtensionService_1.ExtHostExtensionService(nativeExit, initData, rpcProtocol, extHostWorkspace, extHostConfiguraiton, this._extHostLogService);\n            // error forwarding and stack trace scanning\n            Error.stackTraceLimit = 100; // increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n            const extensionErrors = new WeakMap();\n            this._extensionService.getExtensionPathIndex().then(map => {\n                Error.prepareStackTrace = (error, stackTrace) => {\n                    let stackTraceMessage = '';\n                    let extension;\n                    let fileName;\n                    for (const call of stackTrace) {\n                        stackTraceMessage += `\\n\\tat ${call.toString()}`;\n                        fileName = call.getFileName();\n                        if (!extension && fileName) {\n                            extension = map.findSubstr(fileName);\n                        }\n                    }\n                    extensionErrors.set(error, extension);\n                    return `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;\n                };\n            });\n            const mainThreadExtensions = rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadExtensionService);\n            const mainThreadErrors = rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadErrors);\n            errors.setUnexpectedErrorHandler(err => {\n                const data = errors.transformErrorForSerialization(err);\n                const extension = extensionErrors.get(err);\n                if (extension) {\n                    mainThreadExtensions.$onExtensionRuntimeError(extension.identifier, data);\n                }\n                else {\n                    mainThreadErrors.$onUnexpectedError(data);\n                }\n            });\n        }\n        _patchPatchedConsole(mainThreadConsole) {\n            // The console is already patched to use `process.send()`\n            const nativeProcessSend = process.send;\n            process.send = (...args) => {\n                if (args.length === 0 || !args[0] || args[0].type !== '__$console') {\n                    return nativeProcessSend.apply(process, args);\n                }\n                mainThreadConsole.$logExtensionHostMessage(args[0]);\n            };\n        }\n        terminate() {\n            if (this._isTerminating) {\n                // we are already shutting down...\n                return;\n            }\n            this._isTerminating = true;\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            errors.setUnexpectedErrorHandler((err) => {\n                // TODO: write to log once we have one\n            });\n            const extensionsDeactivated = this._extensionService.deactivateAll();\n            // Give extensions 1 second to wrap up any async dispose, then exit in at most 4 seconds\n            setTimeout(() => {\n                Promise.race([async_1.timeout(4000), extensionsDeactivated]).then(() => exit(), () => exit());\n            }, 1000);\n        }\n        transform(initData, rpcProtocol) {\n            initData.extensions.forEach((ext) => ext.extensionLocation = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation)));\n            initData.environment.appRoot = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));\n            initData.environment.appSettingsHome = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appSettingsHome));\n            initData.environment.extensionDevelopmentLocationURI = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionDevelopmentLocationURI));\n            initData.environment.extensionTestsLocationURI = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));\n            initData.environment.globalStorageHome = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));\n            initData.environment.userHome = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.userHome));\n            initData.logsLocation = uri_1.URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));\n            initData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);\n            return initData;\n        }\n    }\n    exports.ExtensionHostMain = ExtensionHostMain;\n});\n",null]}