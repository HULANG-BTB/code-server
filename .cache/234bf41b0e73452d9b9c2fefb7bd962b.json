{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar htmlContentRenderer_1 = require(\"vs/base/browser/htmlContentRenderer\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar textToHtmlTokenizer_1 = require(\"vs/editor/common/modes/textToHtmlTokenizer\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar MarkdownRenderer = /** @class */ (function () {\n    function MarkdownRenderer(_editor, _modeService, _openerService) {\n        if (_openerService === void 0) { _openerService = opener_1.NullOpenerService; }\n        this._editor = _editor;\n        this._modeService = _modeService;\n        this._openerService = _openerService;\n        this._onDidRenderCodeBlock = new event_1.Emitter();\n        this.onDidRenderCodeBlock = this._onDidRenderCodeBlock.event;\n    }\n    MarkdownRenderer.prototype.getOptions = function (disposeables) {\n        var _this = this;\n        return {\n            codeBlockRenderer: function (languageAlias, value) {\n                // In markdown,\n                // it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n                // it is possible no alias is given in which case we fall back to the current editor lang\n                var modeId = null;\n                if (languageAlias) {\n                    modeId = _this._modeService.getModeIdForLanguageName(languageAlias);\n                }\n                else {\n                    var model = _this._editor.getModel();\n                    if (model) {\n                        modeId = model.getLanguageIdentifier().language;\n                    }\n                }\n                _this._modeService.triggerMode(modeId || '');\n                return Promise.resolve(true).then(function (_) {\n                    var promise = modes_1.TokenizationRegistry.getPromise(modeId || '');\n                    if (promise) {\n                        return promise.then(function (support) { return textToHtmlTokenizer_1.tokenizeToString(value, support); });\n                    }\n                    return textToHtmlTokenizer_1.tokenizeToString(value, undefined);\n                }).then(function (code) {\n                    return \"<span style=\\\"font-family: \" + _this._editor.getConfiguration().fontInfo.fontFamily + \"\\\">\" + code + \"</span>\";\n                });\n            },\n            codeBlockRenderCallback: function () { return _this._onDidRenderCodeBlock.fire(); },\n            actionHandler: {\n                callback: function (content) {\n                    var uri;\n                    try {\n                        uri = uri_1.URI.parse(content);\n                    }\n                    catch (_a) {\n                        // ignore\n                    }\n                    if (uri && _this._openerService) {\n                        _this._openerService.open(uri).catch(errors_1.onUnexpectedError);\n                    }\n                },\n                disposeables: disposeables\n            }\n        };\n    };\n    MarkdownRenderer.prototype.render = function (markdown) {\n        var disposeables = [];\n        var element;\n        if (!markdown) {\n            element = document.createElement('span');\n        }\n        else {\n            element = htmlContentRenderer_1.renderMarkdown(markdown, this.getOptions(disposeables));\n        }\n        return {\n            element: element,\n            dispose: function () { return lifecycle_1.dispose(disposeables); }\n        };\n    };\n    MarkdownRenderer = tslib_1.__decorate([\n        tslib_1.__param(1, modeService_1.IModeService),\n        tslib_1.__param(2, instantiation_1.optional(opener_1.IOpenerService))\n    ], MarkdownRenderer);\n    return MarkdownRenderer;\n}());\nexports.MarkdownRenderer = MarkdownRenderer;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { renderMarkdown, RenderOptions } from 'vs/base/browser/htmlContentRenderer';\nimport { IOpenerService, NullOpenerService } from 'vs/platform/opener/common/opener';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { URI } from 'vs/base/common/uri';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { optional } from 'vs/platform/instantiation/common/instantiation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { TokenizationRegistry } from 'vs/editor/common/modes';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\telement: HTMLElement;\n}\n\nexport class MarkdownRenderer {\n\n\tprivate _onDidRenderCodeBlock = new Emitter<void>();\n\treadonly onDidRenderCodeBlock: Event<void> = this._onDidRenderCodeBlock.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@optional(IOpenerService) private readonly _openerService: IOpenerService | null = NullOpenerService,\n\t) {\n\t}\n\n\tprivate getOptions(disposeables: IDisposable[]): RenderOptions {\n\t\treturn {\n\t\t\tcodeBlockRenderer: (languageAlias, value) => {\n\t\t\t\t// In markdown,\n\t\t\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\t\t\tlet modeId: string | null = null;\n\t\t\t\tif (languageAlias) {\n\t\t\t\t\tmodeId = this._modeService.getModeIdForLanguageName(languageAlias);\n\t\t\t\t} else {\n\t\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\t\tif (model) {\n\t\t\t\t\t\tmodeId = model.getLanguageIdentifier().language;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._modeService.triggerMode(modeId || '');\n\t\t\t\treturn Promise.resolve(true).then(_ => {\n\t\t\t\t\tconst promise = TokenizationRegistry.getPromise(modeId || '');\n\t\t\t\t\tif (promise) {\n\t\t\t\t\t\treturn promise.then(support => tokenizeToString(value, support));\n\t\t\t\t\t}\n\t\t\t\t\treturn tokenizeToString(value, undefined);\n\t\t\t\t}).then(code => {\n\t\t\t\t\treturn `<span style=\"font-family: ${this._editor.getConfiguration().fontInfo.fontFamily}\">${code}</span>`;\n\t\t\t\t});\n\t\t\t},\n\t\t\tcodeBlockRenderCallback: () => this._onDidRenderCodeBlock.fire(),\n\t\t\tactionHandler: {\n\t\t\t\tcallback: (content) => {\n\t\t\t\t\tlet uri: URI | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\turi = URI.parse(content);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t\tif (uri && this._openerService) {\n\t\t\t\t\t\tthis._openerService.open(uri).catch(onUnexpectedError);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdisposeables\n\t\t\t}\n\t\t};\n\t}\n\n\trender(markdown: IMarkdownString | undefined): IMarkdownRenderResult {\n\t\tlet disposeables: IDisposable[] = [];\n\n\t\tlet element: HTMLElement;\n\t\tif (!markdown) {\n\t\t\telement = document.createElement('span');\n\t\t} else {\n\t\t\telement = renderMarkdown(markdown, this.getOptions(disposeables));\n\t\t}\n\n\t\treturn {\n\t\t\telement,\n\t\t\tdispose: () => dispose(disposeables)\n\t\t};\n\t}\n}\n"]}]}