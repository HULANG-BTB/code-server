{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLinesViewportData.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLinesViewportData.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\"], function (require, exports, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Contains all data needed to render at a specific viewport.\n     */\n    class ViewportData {\n        constructor(selections, partialData, whitespaceViewportData, model) {\n            this.selections = selections;\n            this.startLineNumber = partialData.startLineNumber | 0;\n            this.endLineNumber = partialData.endLineNumber | 0;\n            this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n            this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n            this.whitespaceViewportData = whitespaceViewportData;\n            this._model = model;\n            this.visibleRange = new range_1.Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n        }\n        getViewLineRenderingData(lineNumber) {\n            return this._model.getViewLineRenderingData(this.visibleRange, lineNumber);\n        }\n        getDecorationsInViewport() {\n            return this._model.getDecorationsInViewport(this.visibleRange);\n        }\n    }\n    exports.ViewportData = ViewportData;\n});\n",null]}