{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/node/shellEnv.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/node/shellEnv.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"child_process\", \"vs/base/common/objects\", \"vs/base/common/uuid\", \"vs/base/common/platform\"], function (require, exports, cp, objects_1, uuid_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getUnixShellEnvironment() {\n        const promise = new Promise((resolve, reject) => {\n            const runAsNode = process.env['ELECTRON_RUN_AS_NODE'];\n            const noAttach = process.env['ELECTRON_NO_ATTACH_CONSOLE'];\n            const mark = uuid_1.generateUuid().replace(/-/g, '').substr(0, 12);\n            const regex = new RegExp(mark + '(.*)' + mark);\n            const env = objects_1.assign({}, process.env, {\n                ELECTRON_RUN_AS_NODE: '1',\n                ELECTRON_NO_ATTACH_CONSOLE: '1'\n            });\n            const command = `'${process.execPath}' -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n            const child = cp.spawn(process.env.SHELL, ['-ilc', command], {\n                detached: true,\n                stdio: ['ignore', 'pipe', process.stderr],\n                env\n            });\n            const buffers = [];\n            child.on('error', () => resolve({}));\n            child.stdout.on('data', b => buffers.push(b));\n            child.on('close', (code, signal) => {\n                if (code !== 0) {\n                    return reject(new Error('Failed to get environment'));\n                }\n                const raw = Buffer.concat(buffers).toString('utf8');\n                const match = regex.exec(raw);\n                const rawStripped = match ? match[1] : '{}';\n                try {\n                    const env = JSON.parse(rawStripped);\n                    if (runAsNode) {\n                        env['ELECTRON_RUN_AS_NODE'] = runAsNode;\n                    }\n                    else {\n                        delete env['ELECTRON_RUN_AS_NODE'];\n                    }\n                    if (noAttach) {\n                        env['ELECTRON_NO_ATTACH_CONSOLE'] = noAttach;\n                    }\n                    else {\n                        delete env['ELECTRON_NO_ATTACH_CONSOLE'];\n                    }\n                    // https://github.com/Microsoft/vscode/issues/22593#issuecomment-336050758\n                    delete env['XDG_RUNTIME_DIR'];\n                    resolve(env);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n        // swallow errors\n        return promise.catch(() => ({}));\n    }\n    let _shellEnv;\n    /**\n     * We need to get the environment from a user's shell.\n     * This should only be done when Code itself is not launched\n     * from within a shell.\n     */\n    function getShellEnvironment() {\n        if (_shellEnv === undefined) {\n            if (platform_1.isWindows) {\n                _shellEnv = Promise.resolve({});\n            }\n            else if (process.env['VSCODE_CLI'] === '1') {\n                _shellEnv = Promise.resolve({});\n            }\n            else {\n                _shellEnv = getUnixShellEnvironment();\n            }\n        }\n        return _shellEnv;\n    }\n    exports.getShellEnvironment = getShellEnvironment;\n});\n",null]}