{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var EditorContextKeys;\n    (function (EditorContextKeys) {\n        /**\n         * A context key that is set when the editor's text has focus (cursor is blinking).\n         */\n        EditorContextKeys.editorTextFocus = new contextkey_1.RawContextKey('editorTextFocus', false);\n        /**\n         * A context key that is set when the editor's text or an editor's widget has focus.\n         */\n        EditorContextKeys.focus = new contextkey_1.RawContextKey('editorFocus', false);\n        /**\n         * A context key that is set when any editor input has focus (regular editor, repl input...).\n         */\n        EditorContextKeys.textInputFocus = new contextkey_1.RawContextKey('textInputFocus', false);\n        EditorContextKeys.readOnly = new contextkey_1.RawContextKey('editorReadonly', false);\n        EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n        EditorContextKeys.hasNonEmptySelection = new contextkey_1.RawContextKey('editorHasSelection', false);\n        EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n        EditorContextKeys.hasMultipleSelections = new contextkey_1.RawContextKey('editorHasMultipleSelections', false);\n        EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n        EditorContextKeys.tabMovesFocus = new contextkey_1.RawContextKey('editorTabMovesFocus', false);\n        EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n        EditorContextKeys.isInEmbeddedEditor = new contextkey_1.RawContextKey('isInEmbeddedEditor', false);\n        EditorContextKeys.canUndo = new contextkey_1.RawContextKey('canUndo', false);\n        EditorContextKeys.canRedo = new contextkey_1.RawContextKey('canRedo', false);\n        // -- mode context keys\n        EditorContextKeys.languageId = new contextkey_1.RawContextKey('editorLangId', '');\n        EditorContextKeys.hasCompletionItemProvider = new contextkey_1.RawContextKey('editorHasCompletionItemProvider', false);\n        EditorContextKeys.hasCodeActionsProvider = new contextkey_1.RawContextKey('editorHasCodeActionsProvider', false);\n        EditorContextKeys.hasCodeLensProvider = new contextkey_1.RawContextKey('editorHasCodeLensProvider', false);\n        EditorContextKeys.hasDefinitionProvider = new contextkey_1.RawContextKey('editorHasDefinitionProvider', false);\n        EditorContextKeys.hasDeclarationProvider = new contextkey_1.RawContextKey('editorHasDeclarationProvider', false);\n        EditorContextKeys.hasImplementationProvider = new contextkey_1.RawContextKey('editorHasImplementationProvider', false);\n        EditorContextKeys.hasTypeDefinitionProvider = new contextkey_1.RawContextKey('editorHasTypeDefinitionProvider', false);\n        EditorContextKeys.hasHoverProvider = new contextkey_1.RawContextKey('editorHasHoverProvider', false);\n        EditorContextKeys.hasDocumentHighlightProvider = new contextkey_1.RawContextKey('editorHasDocumentHighlightProvider', false);\n        EditorContextKeys.hasDocumentSymbolProvider = new contextkey_1.RawContextKey('editorHasDocumentSymbolProvider', false);\n        EditorContextKeys.hasReferenceProvider = new contextkey_1.RawContextKey('editorHasReferenceProvider', false);\n        EditorContextKeys.hasRenameProvider = new contextkey_1.RawContextKey('editorHasRenameProvider', false);\n        EditorContextKeys.hasSignatureHelpProvider = new contextkey_1.RawContextKey('editorHasSignatureHelpProvider', false);\n        // -- mode context keys: formatting\n        EditorContextKeys.hasDocumentFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentFormattingProvider', false);\n        EditorContextKeys.hasDocumentSelectionFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentSelectionFormattingProvider', false);\n        EditorContextKeys.hasMultipleDocumentFormattingProvider = new contextkey_1.RawContextKey('editorHasMultipleDocumentFormattingProvider', false);\n        EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new contextkey_1.RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false);\n    })(EditorContextKeys = exports.EditorContextKeys || (exports.EditorContextKeys = {}));\n});\n",null]}