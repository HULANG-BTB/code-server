{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageConfiguration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageConfiguration.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/modes\"], function (require, exports, modes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Describes what to do with the indentation when pressing Enter.\n     */\n    var IndentAction;\n    (function (IndentAction) {\n        /**\n         * Insert new line and copy the previous line's indentation.\n         */\n        IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n        /**\n         * Insert new line and indent once (relative to the previous line's indentation).\n         */\n        IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n        /**\n         * Insert two new lines:\n         *  - the first one indented which will hold the cursor\n         *  - the second one at the same indentation level\n         */\n        IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n        /**\n         * Insert new line and outdent once (relative to the previous line's indentation).\n         */\n        IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n    })(IndentAction = exports.IndentAction || (exports.IndentAction = {}));\n    /**\n     * @internal\n     */\n    class StandardAutoClosingPairConditional {\n        constructor(source) {\n            this.open = source.open;\n            this.close = source.close;\n            // initially allowed in all tokens\n            this._standardTokenMask = 0;\n            if (Array.isArray(source.notIn)) {\n                for (let i = 0, len = source.notIn.length; i < len; i++) {\n                    let notIn = source.notIn[i];\n                    switch (notIn) {\n                        case 'string':\n                            this._standardTokenMask |= modes_1.StandardTokenType.String;\n                            break;\n                        case 'comment':\n                            this._standardTokenMask |= modes_1.StandardTokenType.Comment;\n                            break;\n                        case 'regex':\n                            this._standardTokenMask |= modes_1.StandardTokenType.RegEx;\n                            break;\n                    }\n                }\n            }\n        }\n        isOK(standardToken) {\n            return (this._standardTokenMask & standardToken) === 0;\n        }\n    }\n    exports.StandardAutoClosingPairConditional = StandardAutoClosingPairConditional;\n});\n",null]}