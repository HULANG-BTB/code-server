{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchHistoryService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchHistoryService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar types_1 = require(\"vs/base/common/types\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.ISearchHistoryService = instantiation_1.createDecorator('searchHistoryService');\nvar SearchHistoryService = /** @class */ (function () {\n    function SearchHistoryService(storageService) {\n        this.storageService = storageService;\n        this._onDidClearHistory = new event_1.Emitter();\n        this.onDidClearHistory = this._onDidClearHistory.event;\n    }\n    SearchHistoryService.prototype.clearHistory = function () {\n        this.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, storage_1.StorageScope.WORKSPACE);\n        this._onDidClearHistory.fire();\n    };\n    SearchHistoryService.prototype.load = function () {\n        var result;\n        var raw = this.storageService.get(SearchHistoryService.SEARCH_HISTORY_KEY, storage_1.StorageScope.WORKSPACE);\n        if (raw) {\n            try {\n                result = JSON.parse(raw);\n            }\n            catch (e) {\n                // Invalid data\n            }\n        }\n        return result || {};\n    };\n    SearchHistoryService.prototype.save = function (history) {\n        if (types_1.isEmptyObject(history)) {\n            this.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.store(SearchHistoryService.SEARCH_HISTORY_KEY, JSON.stringify(history), storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    SearchHistoryService.SEARCH_HISTORY_KEY = 'workbench.search.history';\n    SearchHistoryService = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService)\n    ], SearchHistoryService);\n    return SearchHistoryService;\n}());\nexports.SearchHistoryService = SearchHistoryService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchHistoryService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchHistoryService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAAsD;AACtD,8DAAmF;AACnF,8CAAqD;AACrD,gFAAiF;AAUpE,QAAA,qBAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;AASpG;IAQC,8BACmC,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;QAJjD,uBAAkB,GAAG,IAAI,eAAO,EAAQ,CAAC;QACjD,sBAAiB,GAAgB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;IAIpE,CAAC;IAEL,2CAAY,GAAZ;QACC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,sBAAY,CAAC,SAAS,CAAC,CAAC;QAC5F,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAED,mCAAI,GAAJ;QACC,IAAI,MAAwC,CAAC;QAC7C,IAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,sBAAY,CAAC,SAAS,CAAC,CAAC;QAErG,IAAI,GAAG,EAAE;YACR,IAAI;gBACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACzB;YAAC,OAAO,CAAC,EAAE;gBACX,eAAe;aACf;SACD;QAED,OAAO,MAAM,IAAI,EAAE,CAAC;IACrB,CAAC;IAED,mCAAI,GAAJ,UAAK,OAA6B;QACjC,IAAI,qBAAa,CAAC,OAAO,CAAC,EAAE;YAC3B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,sBAAY,CAAC,SAAS,CAAC,CAAC;SAC5F;aAAM;YACN,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,sBAAY,CAAC,SAAS,CAAC,CAAC;SACpH;IACF,CAAC;IAnCuB,uCAAkB,GAAG,0BAA0B,CAAC;IAH5D,oBAAoB;QAS9B,mBAAA,yBAAe,CAAA;OATL,oBAAoB,CAuChC;IAAD,2BAAC;CAAA,AAvCD,IAuCC;AAvCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface ISearchHistoryService {\n\t_serviceBrand: any;\n\tonDidClearHistory: Event<void>;\n\tclearHistory(): void;\n\tload(): ISearchHistoryValues;\n\tsave(history: ISearchHistoryValues): void;\n}\n\nexport const ISearchHistoryService = createDecorator<ISearchHistoryService>('searchHistoryService');\n\nexport interface ISearchHistoryValues {\n\tsearch?: string[];\n\treplace?: string[];\n\tinclude?: string[];\n\texclude?: string[];\n}\n\nexport class SearchHistoryService implements ISearchHistoryService {\n\t_serviceBrand: any;\n\n\tprivate static readonly SEARCH_HISTORY_KEY = 'workbench.search.history';\n\n\tprivate readonly _onDidClearHistory = new Emitter<void>();\n\treadonly onDidClearHistory: Event<void> = this._onDidClearHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) { }\n\n\tclearHistory(): void {\n\t\tthis.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\t\tthis._onDidClearHistory.fire();\n\t}\n\n\tload(): ISearchHistoryValues {\n\t\tlet result: ISearchHistoryValues | undefined;\n\t\tconst raw = this.storageService.get(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tresult = JSON.parse(raw);\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid data\n\t\t\t}\n\t\t}\n\n\t\treturn result || {};\n\t}\n\n\tsave(history: ISearchHistoryValues): void {\n\t\tif (isEmptyObject(history)) {\n\t\t\tthis.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(SearchHistoryService.SEARCH_HISTORY_KEY, JSON.stringify(history), StorageScope.WORKSPACE);\n\t\t}\n\t}\n}"]}]}