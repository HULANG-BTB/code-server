{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/copyLinesCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/copyLinesCommand.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\"], function (require, exports, range_1, selection_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CopyLinesCommand {\n        constructor(selection, isCopyingDown) {\n            this._selection = selection;\n            this._isCopyingDown = isCopyingDown;\n        }\n        getEditOperations(model, builder) {\n            let s = this._selection;\n            this._startLineNumberDelta = 0;\n            this._endLineNumberDelta = 0;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                this._endLineNumberDelta = 1;\n                s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n            }\n            let sourceLines = [];\n            for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n                sourceLines.push(model.getLineContent(i));\n            }\n            const sourceText = sourceLines.join('\\n');\n            if (sourceText === '') {\n                // Duplicating empty line\n                if (this._isCopyingDown) {\n                    this._startLineNumberDelta++;\n                    this._endLineNumberDelta++;\n                }\n            }\n            if (!this._isCopyingDown) {\n                builder.addEditOperation(new range_1.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n            }\n            else {\n                builder.addEditOperation(new range_1.Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n            }\n            this._selectionId = builder.trackSelection(s);\n            this._selectionDirection = this._selection.getDirection();\n        }\n        computeCursorState(model, helper) {\n            let result = helper.getTrackedSelection(this._selectionId);\n            if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n                let startLineNumber = result.startLineNumber;\n                let startColumn = result.startColumn;\n                let endLineNumber = result.endLineNumber;\n                let endColumn = result.endColumn;\n                if (this._startLineNumberDelta !== 0) {\n                    startLineNumber = startLineNumber + this._startLineNumberDelta;\n                    startColumn = 1;\n                }\n                if (this._endLineNumberDelta !== 0) {\n                    endLineNumber = endLineNumber + this._endLineNumberDelta;\n                    endColumn = 1;\n                }\n                result = selection_1.Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n            }\n            return result;\n        }\n    }\n    exports.CopyLinesCommand = CopyLinesCommand;\n});\n",null]}