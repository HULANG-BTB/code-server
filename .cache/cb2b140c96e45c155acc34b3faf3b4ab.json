{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/themeCompatibility.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/themeCompatibility.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"vs/base/common/color\");\nvar colorRegistry = require(\"vs/platform/theme/common/colorRegistry\");\nvar editorColorRegistry = require(\"vs/editor/common/view/editorColorRegistry\");\nvar settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    var colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, resultRules, resultColors) {\n    for (var _i = 0, oldSettings_1 = oldSettings; _i < oldSettings_1.length; _i++) {\n        var rule = oldSettings_1[_i];\n        resultRules.push(rule);\n        if (!rule.scope) {\n            var settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (var key in settings) {\n                    var mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        var colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            var color = color_1.Color.fromHex(colorHex);\n                            for (var _a = 0, mappings_1 = mappings; _a < mappings_1.length; _a++) {\n                                var colorId = mappings_1[_a];\n                                resultColors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\nexports.convertSettings = convertSettings;\naddSettingMapping('background', colorRegistry.editorBackground);\naddSettingMapping('foreground', colorRegistry.editorForeground);\naddSettingMapping('selection', colorRegistry.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colorRegistry.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colorRegistry.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colorRegistry.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colorRegistry.editorFindMatch);\naddSettingMapping('hoverHighlight', colorRegistry.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground'); // inlined to avoid editor/contrib dependenies\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colorRegistry.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuides);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuides);\nvar ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (var _i = 0, ansiColorMap_1 = ansiColorMap; _i < ansiColorMap_1.length; _i++) {\n    var color = ansiColorMap_1[_i];\n    addSettingMapping(color, 'terminal.' + color);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/themeCompatibility.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/themeCompatibility.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITokenColorizationRule, IColorMap } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { Color } from 'vs/base/common/color';\nimport * as colorRegistry from 'vs/platform/theme/common/colorRegistry';\n\nimport * as editorColorRegistry from 'vs/editor/common/view/editorColorRegistry';\n\nconst settingToColorIdMapping: { [settingId: string]: string[] } = {};\nfunction addSettingMapping(settingId: string, colorId: string) {\n\tlet colorIds = settingToColorIdMapping[settingId];\n\tif (!colorIds) {\n\t\tsettingToColorIdMapping[settingId] = colorIds = [];\n\t}\n\tcolorIds.push(colorId);\n}\n\nexport function convertSettings(oldSettings: ITokenColorizationRule[], resultRules: ITokenColorizationRule[], resultColors: IColorMap): void {\n\tfor (let rule of oldSettings) {\n\t\tresultRules.push(rule);\n\t\tif (!rule.scope) {\n\t\t\tlet settings = rule.settings;\n\t\t\tif (!settings) {\n\t\t\t\trule.settings = {};\n\t\t\t} else {\n\t\t\t\tfor (let key in settings) {\n\t\t\t\t\tlet mappings = settingToColorIdMapping[key];\n\t\t\t\t\tif (mappings) {\n\t\t\t\t\t\tlet colorHex = settings[key];\n\t\t\t\t\t\tif (typeof colorHex === 'string') {\n\t\t\t\t\t\t\tlet color = Color.fromHex(colorHex);\n\t\t\t\t\t\t\tfor (let colorId of mappings) {\n\t\t\t\t\t\t\t\tresultColors[colorId] = color;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n\t\t\t\t\t\tdelete settings[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\naddSettingMapping('background', colorRegistry.editorBackground);\naddSettingMapping('foreground', colorRegistry.editorForeground);\naddSettingMapping('selection', colorRegistry.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colorRegistry.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colorRegistry.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colorRegistry.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colorRegistry.editorFindMatch);\naddSettingMapping('hoverHighlight', colorRegistry.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground'); // inlined to avoid editor/contrib dependenies\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colorRegistry.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuides);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuides);\n\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n\t'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\n\nfor (const color of ansiColorMap) {\n\taddSettingMapping(color, 'terminal.' + color);\n}\n"]}]}