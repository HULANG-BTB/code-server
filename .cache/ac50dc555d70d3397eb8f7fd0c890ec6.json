{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeStore.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeStore.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar resources = require(\"vs/base/common/resources\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar fileIconThemeData_1 = require(\"vs/workbench/services/themes/common/fileIconThemeData\");\nvar iconThemeExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'iconThemes',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.iconThemes', 'Contributes file icon themes.'),\n        type: 'array',\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n            properties: {\n                id: {\n                    description: nls.localize('vscode.extension.contributes.iconThemes.id', 'Id of the icon theme as used in the user settings.'),\n                    type: 'string'\n                },\n                label: {\n                    description: nls.localize('vscode.extension.contributes.iconThemes.label', 'Label of the icon theme as shown in the UI.'),\n                    type: 'string'\n                },\n                path: {\n                    description: nls.localize('vscode.extension.contributes.iconThemes.path', 'Path of the icon theme definition file. The path is relative to the extension folder and is typically \\'./icons/awesome-icon-theme.json\\'.'),\n                    type: 'string'\n                }\n            },\n            required: ['path', 'id']\n        }\n    }\n});\nvar FileIconThemeStore = /** @class */ (function () {\n    function FileIconThemeStore(extensionService) {\n        this.extensionService = extensionService;\n        this.knownIconThemes = [];\n        this.onDidChangeEmitter = new event_1.Emitter();\n        this.initialize();\n    }\n    Object.defineProperty(FileIconThemeStore.prototype, \"onDidChange\", {\n        get: function () { return this.onDidChangeEmitter.event; },\n        enumerable: true,\n        configurable: true\n    });\n    FileIconThemeStore.prototype.initialize = function () {\n        var _this = this;\n        iconThemeExtPoint.setHandler(function (extensions) {\n            var previousIds = {};\n            var added = [];\n            for (var _i = 0, _a = _this.knownIconThemes; _i < _a.length; _i++) {\n                var theme = _a[_i];\n                previousIds[theme.id] = true;\n            }\n            _this.knownIconThemes.length = 0;\n            for (var _b = 0, extensions_2 = extensions; _b < extensions_2.length; _b++) {\n                var ext = extensions_2[_b];\n                var extensionData = {\n                    extensionId: ext.description.identifier.value,\n                    extensionPublisher: ext.description.publisher,\n                    extensionName: ext.description.name,\n                    extensionIsBuiltin: ext.description.isBuiltin\n                };\n                _this.onIconThemes(ext.description.extensionLocation, extensionData, ext.value, ext.collector);\n            }\n            for (var _c = 0, _d = _this.knownIconThemes; _c < _d.length; _c++) {\n                var theme = _d[_c];\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n            }\n            _this.onDidChangeEmitter.fire({ themes: _this.knownIconThemes, added: added });\n        });\n    };\n    FileIconThemeStore.prototype.onIconThemes = function (extensionLocation, extensionData, iconThemes, collector) {\n        var _this = this;\n        if (!Array.isArray(iconThemes)) {\n            collector.error(nls.localize('reqarray', \"Extension point `{0}` must be an array.\", iconThemeExtPoint.name));\n            return;\n        }\n        iconThemes.forEach(function (iconTheme) {\n            if (!iconTheme.path || !types.isString(iconTheme.path)) {\n                collector.error(nls.localize('reqpath', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", iconThemeExtPoint.name, String(iconTheme.path)));\n                return;\n            }\n            if (!iconTheme.id || !types.isString(iconTheme.id)) {\n                collector.error(nls.localize('reqid', \"Expected string in `contributes.{0}.id`. Provided value: {1}\", iconThemeExtPoint.name, String(iconTheme.path)));\n                return;\n            }\n            var iconThemeLocation = resources.joinPath(extensionLocation, iconTheme.path);\n            if (!resources.isEqualOrParent(iconThemeLocation, extensionLocation)) {\n                collector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", iconThemeExtPoint.name, iconThemeLocation.path, extensionLocation.path));\n            }\n            var themeData = fileIconThemeData_1.FileIconThemeData.fromExtensionTheme(iconTheme, iconThemeLocation, extensionData);\n            _this.knownIconThemes.push(themeData);\n        });\n    };\n    FileIconThemeStore.prototype.findThemeData = function (iconTheme) {\n        if (iconTheme.length === 0) {\n            return Promise.resolve(fileIconThemeData_1.FileIconThemeData.noIconTheme());\n        }\n        return this.getFileIconThemes().then(function (allIconSets) {\n            for (var _i = 0, allIconSets_1 = allIconSets; _i < allIconSets_1.length; _i++) {\n                var iconSet = allIconSets_1[_i];\n                if (iconSet.id === iconTheme) {\n                    return iconSet;\n                }\n            }\n            return undefined;\n        });\n    };\n    FileIconThemeStore.prototype.findThemeBySettingsId = function (settingsId) {\n        if (!settingsId) {\n            return Promise.resolve(fileIconThemeData_1.FileIconThemeData.noIconTheme());\n        }\n        return this.getFileIconThemes().then(function (allIconSets) {\n            for (var _i = 0, allIconSets_2 = allIconSets; _i < allIconSets_2.length; _i++) {\n                var iconSet = allIconSets_2[_i];\n                if (iconSet.settingsId === settingsId) {\n                    return iconSet;\n                }\n            }\n            return undefined;\n        });\n    };\n    FileIconThemeStore.prototype.findThemeDataByParentLocation = function (parentLocation) {\n        if (parentLocation) {\n            return this.getFileIconThemes().then(function (allThemes) {\n                return allThemes.filter(function (t) { return t.location && resources.isEqualOrParent(t.location, parentLocation); });\n            });\n        }\n        return Promise.resolve([]);\n    };\n    FileIconThemeStore.prototype.getFileIconThemes = function () {\n        var _this = this;\n        return this.extensionService.whenInstalledExtensionsRegistered().then(function (isReady) {\n            return _this.knownIconThemes;\n        });\n    };\n    FileIconThemeStore = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService)\n    ], FileIconThemeStore);\n    return FileIconThemeStore;\n}());\nexports.FileIconThemeStore = FileIconThemeStore;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeStore.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeStore.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport * as types from 'vs/base/common/types';\nimport * as resources from 'vs/base/common/resources';\nimport { ExtensionsRegistry, ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ExtensionData, IThemeExtensionPoint } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { FileIconThemeData } from 'vs/workbench/services/themes/common/fileIconThemeData';\nimport { URI } from 'vs/base/common/uri';\n\nconst iconThemeExtPoint = ExtensionsRegistry.registerExtensionPoint<IThemeExtensionPoint[]>({\n\textensionPoint: 'iconThemes',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.iconThemes', 'Contributes file icon themes.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.iconThemes.id', 'Id of the icon theme as used in the user settings.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.iconThemes.label', 'Label of the icon theme as shown in the UI.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.iconThemes.path', 'Path of the icon theme definition file. The path is relative to the extension folder and is typically \\'./icons/awesome-icon-theme.json\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['path', 'id']\n\t\t}\n\t}\n});\n\nexport interface FileIconThemeChangeEvent {\n\tthemes: FileIconThemeData[];\n\tadded: FileIconThemeData[];\n}\n\nexport class FileIconThemeStore {\n\n\tprivate knownIconThemes: FileIconThemeData[];\n\tprivate readonly onDidChangeEmitter: Emitter<FileIconThemeChangeEvent>;\n\n\tpublic get onDidChange(): Event<FileIconThemeChangeEvent> { return this.onDidChangeEmitter.event; }\n\n\tconstructor(@IExtensionService private readonly extensionService: IExtensionService) {\n\t\tthis.knownIconThemes = [];\n\t\tthis.onDidChangeEmitter = new Emitter<FileIconThemeChangeEvent>();\n\t\tthis.initialize();\n\t}\n\n\tprivate initialize() {\n\t\ticonThemeExtPoint.setHandler((extensions) => {\n\t\t\tconst previousIds: { [key: string]: boolean } = {};\n\t\t\tconst added: FileIconThemeData[] = [];\n\t\t\tfor (const theme of this.knownIconThemes) {\n\t\t\t\tpreviousIds[theme.id] = true;\n\t\t\t}\n\t\t\tthis.knownIconThemes.length = 0;\n\t\t\tfor (let ext of extensions) {\n\t\t\t\tlet extensionData = {\n\t\t\t\t\textensionId: ext.description.identifier.value,\n\t\t\t\t\textensionPublisher: ext.description.publisher,\n\t\t\t\t\textensionName: ext.description.name,\n\t\t\t\t\textensionIsBuiltin: ext.description.isBuiltin\n\t\t\t\t};\n\t\t\t\tthis.onIconThemes(ext.description.extensionLocation, extensionData, ext.value, ext.collector);\n\t\t\t}\n\t\t\tfor (const theme of this.knownIconThemes) {\n\t\t\t\tif (!previousIds[theme.id]) {\n\t\t\t\t\tadded.push(theme);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.onDidChangeEmitter.fire({ themes: this.knownIconThemes, added });\n\t\t});\n\t}\n\n\tprivate onIconThemes(extensionLocation: URI, extensionData: ExtensionData, iconThemes: IThemeExtensionPoint[], collector: ExtensionMessageCollector): void {\n\t\tif (!Array.isArray(iconThemes)) {\n\t\t\tcollector.error(nls.localize(\n\t\t\t\t'reqarray',\n\t\t\t\t\"Extension point `{0}` must be an array.\",\n\t\t\t\ticonThemeExtPoint.name\n\t\t\t));\n\t\t\treturn;\n\t\t}\n\t\ticonThemes.forEach(iconTheme => {\n\t\t\tif (!iconTheme.path || !types.isString(iconTheme.path)) {\n\t\t\t\tcollector.error(nls.localize(\n\t\t\t\t\t'reqpath',\n\t\t\t\t\t\"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n\t\t\t\t\ticonThemeExtPoint.name,\n\t\t\t\t\tString(iconTheme.path)\n\t\t\t\t));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!iconTheme.id || !types.isString(iconTheme.id)) {\n\t\t\t\tcollector.error(nls.localize(\n\t\t\t\t\t'reqid',\n\t\t\t\t\t\"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n\t\t\t\t\ticonThemeExtPoint.name,\n\t\t\t\t\tString(iconTheme.path)\n\t\t\t\t));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst iconThemeLocation = resources.joinPath(extensionLocation, iconTheme.path);\n\t\t\tif (!resources.isEqualOrParent(iconThemeLocation, extensionLocation)) {\n\t\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", iconThemeExtPoint.name, iconThemeLocation.path, extensionLocation.path));\n\t\t\t}\n\n\t\t\tlet themeData = FileIconThemeData.fromExtensionTheme(iconTheme, iconThemeLocation, extensionData);\n\t\t\tthis.knownIconThemes.push(themeData);\n\t\t});\n\n\t}\n\n\tpublic findThemeData(iconTheme: string): Promise<FileIconThemeData | undefined> {\n\t\tif (iconTheme.length === 0) {\n\t\t\treturn Promise.resolve(FileIconThemeData.noIconTheme());\n\t\t}\n\t\treturn this.getFileIconThemes().then(allIconSets => {\n\t\t\tfor (let iconSet of allIconSets) {\n\t\t\t\tif (iconSet.id === iconTheme) {\n\t\t\t\t\treturn iconSet;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic findThemeBySettingsId(settingsId: string | null): Promise<FileIconThemeData | undefined> {\n\t\tif (!settingsId) {\n\t\t\treturn Promise.resolve(FileIconThemeData.noIconTheme());\n\t\t}\n\t\treturn this.getFileIconThemes().then(allIconSets => {\n\t\t\tfor (let iconSet of allIconSets) {\n\t\t\t\tif (iconSet.settingsId === settingsId) {\n\t\t\t\t\treturn iconSet;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic findThemeDataByParentLocation(parentLocation: URI | undefined): Promise<FileIconThemeData[]> {\n\t\tif (parentLocation) {\n\t\t\treturn this.getFileIconThemes().then(allThemes => {\n\t\t\t\treturn allThemes.filter(t => t.location && resources.isEqualOrParent(t.location, parentLocation));\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve([]);\n\t}\n\n\tpublic getFileIconThemes(): Promise<FileIconThemeData[]> {\n\t\treturn this.extensionService.whenInstalledExtensionsRegistered().then(isReady => {\n\t\t\treturn this.knownIconThemes;\n\t\t});\n\t}\n\n}\n"]}]}