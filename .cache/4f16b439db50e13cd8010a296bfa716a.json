{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar textEditorModel_1 = require(\"vs/workbench/common/editor/textEditorModel\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar event_1 = require(\"vs/base/common/event\");\nvar async_1 = require(\"vs/base/common/async\");\nvar backup_1 = require(\"vs/workbench/services/backup/common/backup\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar UntitledEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(UntitledEditorModel, _super);\n    function UntitledEditorModel(modeId, resource, _hasAssociatedFilePath, initialValue, preferredEncoding, modeService, modelService, backupFileService, configurationService) {\n        var _this = _super.call(this, modelService, modeService) || this;\n        _this.modeId = modeId;\n        _this.resource = resource;\n        _this._hasAssociatedFilePath = _hasAssociatedFilePath;\n        _this.initialValue = initialValue;\n        _this.preferredEncoding = preferredEncoding;\n        _this.backupFileService = backupFileService;\n        _this.configurationService = configurationService;\n        _this._onDidChangeContent = _this._register(new event_1.Emitter());\n        _this._onDidChangeDirty = _this._register(new event_1.Emitter());\n        _this._onDidChangeEncoding = _this._register(new event_1.Emitter());\n        _this.dirty = false;\n        _this.versionId = 0;\n        _this.contentChangeEventScheduler = _this._register(new async_1.RunOnceScheduler(function () { return _this._onDidChangeContent.fire(); }, UntitledEditorModel.DEFAULT_CONTENT_CHANGE_BUFFER_DELAY));\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(UntitledEditorModel.prototype, \"onDidChangeContent\", {\n        get: function () { return this._onDidChangeContent.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorModel.prototype, \"onDidChangeDirty\", {\n        get: function () { return this._onDidChangeDirty.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorModel.prototype, \"onDidChangeEncoding\", {\n        get: function () { return this._onDidChangeEncoding.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorModel.prototype, \"hasAssociatedFilePath\", {\n        get: function () {\n            return this._hasAssociatedFilePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UntitledEditorModel.prototype.getOrCreateMode = function (modeService, modeId, firstLineText) {\n        if (!modeId || modeId === modesRegistry_1.PLAINTEXT_MODE_ID) {\n            return modeService.createByFilepathOrFirstLine(this.resource.fsPath, firstLineText); // lookup mode via resource path if the provided modeId is unspecific\n        }\n        return _super.prototype.getOrCreateMode.call(this, modeService, modeId, firstLineText);\n    };\n    UntitledEditorModel.prototype.registerListeners = function () {\n        var _this = this;\n        // Config Changes\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationChange(); }));\n    };\n    UntitledEditorModel.prototype.onConfigurationChange = function () {\n        var configuredEncoding = this.configurationService.getValue(this.resource, 'files.encoding');\n        if (this.configuredEncoding !== configuredEncoding) {\n            this.configuredEncoding = configuredEncoding;\n            if (!this.preferredEncoding) {\n                this._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n            }\n        }\n    };\n    UntitledEditorModel.prototype.getVersionId = function () {\n        return this.versionId;\n    };\n    UntitledEditorModel.prototype.getModeId = function () {\n        if (this.textEditorModel) {\n            return this.textEditorModel.getLanguageIdentifier().language;\n        }\n        return this.modeId;\n    };\n    UntitledEditorModel.prototype.getEncoding = function () {\n        return this.preferredEncoding || this.configuredEncoding;\n    };\n    UntitledEditorModel.prototype.setEncoding = function (encoding) {\n        var oldEncoding = this.getEncoding();\n        this.preferredEncoding = encoding;\n        // Emit if it changed\n        if (oldEncoding !== this.preferredEncoding) {\n            this._onDidChangeEncoding.fire();\n        }\n    };\n    UntitledEditorModel.prototype.isDirty = function () {\n        return this.dirty;\n    };\n    UntitledEditorModel.prototype.setDirty = function (dirty) {\n        if (this.dirty === dirty) {\n            return;\n        }\n        this.dirty = dirty;\n        this._onDidChangeDirty.fire();\n    };\n    UntitledEditorModel.prototype.getResource = function () {\n        return this.resource;\n    };\n    UntitledEditorModel.prototype.revert = function () {\n        this.setDirty(false);\n        // Handle content change event buffered\n        this.contentChangeEventScheduler.schedule();\n    };\n    UntitledEditorModel.prototype.load = function () {\n        var _this = this;\n        // Check for backups first\n        return this.backupFileService.loadBackupResource(this.resource).then(function (backupResource) {\n            if (backupResource) {\n                return _this.backupFileService.resolveBackupContent(backupResource);\n            }\n            return undefined;\n        }).then(function (backupTextBufferFactory) {\n            var hasBackup = !!backupTextBufferFactory;\n            // untitled associated to file path are dirty right away as well as untitled with content\n            _this.setDirty(_this._hasAssociatedFilePath || hasBackup);\n            var untitledContents;\n            if (backupTextBufferFactory) {\n                untitledContents = backupTextBufferFactory;\n            }\n            else {\n                untitledContents = textModel_1.createTextBufferFactory(_this.initialValue || '');\n            }\n            // Create text editor model if not yet done\n            if (!_this.textEditorModel) {\n                _this.createTextEditorModel(untitledContents, _this.resource, _this.modeId);\n            }\n            // Otherwise update\n            else {\n                _this.updateTextEditorModel(untitledContents);\n            }\n            // Encoding\n            _this.configuredEncoding = _this.configurationService.getValue(_this.resource, 'files.encoding');\n            // We know for a fact there is a text editor model here\n            var textEditorModel = _this.textEditorModel;\n            // Listen to content changes\n            _this._register(textEditorModel.onDidChangeContent(function () { return _this.onModelContentChanged(); }));\n            // Listen to mode changes\n            _this._register(textEditorModel.onDidChangeLanguage(function () { return _this.onConfigurationChange(); })); // mode change can have impact on config\n            return _this;\n        });\n    };\n    UntitledEditorModel.prototype.onModelContentChanged = function () {\n        if (!this.isResolved()) {\n            return;\n        }\n        this.versionId++;\n        // mark the untitled editor as non-dirty once its content becomes empty and we do\n        // not have an associated path set. we never want dirty indicator in that case.\n        if (!this._hasAssociatedFilePath && this.textEditorModel && this.textEditorModel.getLineCount() === 1 && this.textEditorModel.getLineContent(1) === '') {\n            this.setDirty(false);\n        }\n        // turn dirty otherwise\n        else {\n            this.setDirty(true);\n        }\n        // Handle content change event buffered\n        this.contentChangeEventScheduler.schedule();\n    };\n    UntitledEditorModel.prototype.isReadonly = function () {\n        return false;\n    };\n    UntitledEditorModel.DEFAULT_CONTENT_CHANGE_BUFFER_DELAY = files_1.CONTENT_CHANGE_EVENT_BUFFER_DELAY;\n    UntitledEditorModel = tslib_1.__decorate([\n        tslib_1.__param(5, modeService_1.IModeService),\n        tslib_1.__param(6, modelService_1.IModelService),\n        tslib_1.__param(7, backup_1.IBackupFileService),\n        tslib_1.__param(8, resourceConfiguration_1.ITextResourceConfigurationService)\n    ], UntitledEditorModel);\n    return UntitledEditorModel;\n}(textEditorModel_1.BaseTextEditorModel));\nexports.UntitledEditorModel = UntitledEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEncodingSupport } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { URI } from 'vs/base/common/uri';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { CONTENT_CHANGE_EVENT_BUFFER_DELAY } from 'vs/platform/files/common/files';\nimport { IModeService, ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IBackupFileService } from 'vs/workbench/services/backup/common/backup';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { ITextBufferFactory } from 'vs/editor/common/model';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\n\nexport class UntitledEditorModel extends BaseTextEditorModel implements IEncodingSupport {\n\n\tstatic DEFAULT_CONTENT_CHANGE_BUFFER_DELAY = CONTENT_CHANGE_EVENT_BUFFER_DELAY;\n\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeContent(): Event<void> { return this._onDidChangeContent.event; }\n\n\tprivate readonly _onDidChangeDirty: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeDirty(): Event<void> { return this._onDidChangeDirty.event; }\n\n\tprivate readonly _onDidChangeEncoding: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeEncoding(): Event<void> { return this._onDidChangeEncoding.event; }\n\n\tprivate dirty: boolean = false;\n\tprivate versionId: number = 0;\n\tprivate readonly contentChangeEventScheduler: RunOnceScheduler;\n\tprivate configuredEncoding: string;\n\n\tconstructor(\n\t\tprivate readonly modeId: string,\n\t\tprivate readonly resource: URI,\n\t\tprivate _hasAssociatedFilePath: boolean,\n\t\tprivate readonly initialValue: string,\n\t\tprivate preferredEncoding: string,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IBackupFileService private readonly backupFileService: IBackupFileService,\n\t\t@ITextResourceConfigurationService private readonly configurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper(modelService, modeService);\n\n\t\tthis.contentChangeEventScheduler = this._register(new RunOnceScheduler(() => this._onDidChangeContent.fire(), UntitledEditorModel.DEFAULT_CONTENT_CHANGE_BUFFER_DELAY));\n\n\t\tthis.registerListeners();\n\t}\n\n\tget hasAssociatedFilePath(): boolean {\n\t\treturn this._hasAssociatedFilePath;\n\t}\n\n\tprotected getOrCreateMode(modeService: IModeService, modeId: string, firstLineText?: string): ILanguageSelection {\n\t\tif (!modeId || modeId === PLAINTEXT_MODE_ID) {\n\t\t\treturn modeService.createByFilepathOrFirstLine(this.resource.fsPath, firstLineText); // lookup mode via resource path if the provided modeId is unspecific\n\t\t}\n\n\t\treturn super.getOrCreateMode(modeService, modeId, firstLineText);\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange()));\n\t}\n\n\tprivate onConfigurationChange(): void {\n\t\tconst configuredEncoding = this.configurationService.getValue<string>(this.resource, 'files.encoding');\n\n\t\tif (this.configuredEncoding !== configuredEncoding) {\n\t\t\tthis.configuredEncoding = configuredEncoding;\n\n\t\t\tif (!this.preferredEncoding) {\n\t\t\t\tthis._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n\t\t\t}\n\t\t}\n\t}\n\n\tgetVersionId(): number {\n\t\treturn this.versionId;\n\t}\n\n\tgetModeId(): string | null {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageIdentifier().language;\n\t\t}\n\n\t\treturn this.modeId;\n\t}\n\n\tgetEncoding(): string {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tsetEncoding(encoding: string): void {\n\t\tconst oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\t}\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (this.dirty === dirty) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\trevert(): void {\n\t\tthis.setDirty(false);\n\n\t\t// Handle content change event buffered\n\t\tthis.contentChangeEventScheduler.schedule();\n\t}\n\n\tload(): Promise<UntitledEditorModel & IResolvedTextEditorModel> {\n\n\t\t// Check for backups first\n\t\treturn this.backupFileService.loadBackupResource(this.resource).then((backupResource) => {\n\t\t\tif (backupResource) {\n\t\t\t\treturn this.backupFileService.resolveBackupContent(backupResource);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}).then(backupTextBufferFactory => {\n\t\t\tconst hasBackup = !!backupTextBufferFactory;\n\n\t\t\t// untitled associated to file path are dirty right away as well as untitled with content\n\t\t\tthis.setDirty(this._hasAssociatedFilePath || hasBackup);\n\n\t\t\tlet untitledContents: ITextBufferFactory;\n\t\t\tif (backupTextBufferFactory) {\n\t\t\t\tuntitledContents = backupTextBufferFactory;\n\t\t\t} else {\n\t\t\t\tuntitledContents = createTextBufferFactory(this.initialValue || '');\n\t\t\t}\n\n\t\t\t// Create text editor model if not yet done\n\t\t\tif (!this.textEditorModel) {\n\t\t\t\tthis.createTextEditorModel(untitledContents, this.resource, this.modeId);\n\t\t\t}\n\n\t\t\t// Otherwise update\n\t\t\telse {\n\t\t\t\tthis.updateTextEditorModel(untitledContents);\n\t\t\t}\n\n\t\t\t// Encoding\n\t\t\tthis.configuredEncoding = this.configurationService.getValue<string>(this.resource, 'files.encoding');\n\n\t\t\t// We know for a fact there is a text editor model here\n\t\t\tconst textEditorModel = this.textEditorModel!;\n\n\t\t\t// Listen to content changes\n\t\t\tthis._register(textEditorModel.onDidChangeContent(() => this.onModelContentChanged()));\n\n\t\t\t// Listen to mode changes\n\t\t\tthis._register(textEditorModel.onDidChangeLanguage(() => this.onConfigurationChange())); // mode change can have impact on config\n\n\t\t\treturn this as UntitledEditorModel & IResolvedTextEditorModel;\n\t\t});\n\t}\n\n\tprivate onModelContentChanged(): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.versionId++;\n\n\t\t// mark the untitled editor as non-dirty once its content becomes empty and we do\n\t\t// not have an associated path set. we never want dirty indicator in that case.\n\t\tif (!this._hasAssociatedFilePath && this.textEditorModel && this.textEditorModel.getLineCount() === 1 && this.textEditorModel.getLineContent(1) === '') {\n\t\t\tthis.setDirty(false);\n\t\t}\n\n\t\t// turn dirty otherwise\n\t\telse {\n\t\t\tthis.setDirty(true);\n\t\t}\n\n\t\t// Handle content change event buffered\n\t\tthis.contentChangeEventScheduler.schedule();\n\t}\n\n\tisReadonly(): boolean {\n\t\treturn false;\n\t}\n}\n"]}]}