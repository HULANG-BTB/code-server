{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/folding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/folding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./folding\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar async_1 = require(\"vs/base/common/async\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar foldingModel_1 = require(\"vs/editor/contrib/folding/foldingModel\");\nvar foldingDecorations_1 = require(\"./foldingDecorations\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar hiddenRangeModel_1 = require(\"vs/editor/contrib/folding/hiddenRangeModel\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar indentRangeProvider_1 = require(\"vs/editor/contrib/folding/indentRangeProvider\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar syntaxRangeProvider_1 = require(\"./syntaxRangeProvider\");\nvar intializingRangeProvider_1 = require(\"vs/editor/contrib/folding/intializingRangeProvider\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar errors_1 = require(\"vs/base/common/errors\");\nexports.ID = 'editor.contrib.folding';\nvar FoldingController = /** @class */ (function () {\n    function FoldingController(editor) {\n        var _this = this;\n        this.editor = editor;\n        this._isEnabled = this.editor.getConfiguration().contribInfo.folding;\n        this._autoHideFoldingControls = this.editor.getConfiguration().contribInfo.showFoldingControls === 'mouseover';\n        this._useFoldingProviders = this.editor.getConfiguration().contribInfo.foldingStrategy !== 'indentation';\n        this.globalToDispose = [];\n        this.localToDispose = [];\n        this.foldingDecorationProvider = new foldingDecorations_1.FoldingDecorationProvider(editor);\n        this.foldingDecorationProvider.autoHideFoldingControls = this._autoHideFoldingControls;\n        this.globalToDispose.push(this.editor.onDidChangeModel(function () { return _this.onModelChanged(); }));\n        this.globalToDispose.push(this.editor.onDidChangeConfiguration(function (e) {\n            if (e.contribInfo) {\n                var oldIsEnabled = _this._isEnabled;\n                _this._isEnabled = _this.editor.getConfiguration().contribInfo.folding;\n                if (oldIsEnabled !== _this._isEnabled) {\n                    _this.onModelChanged();\n                }\n                var oldShowFoldingControls = _this._autoHideFoldingControls;\n                _this._autoHideFoldingControls = _this.editor.getConfiguration().contribInfo.showFoldingControls === 'mouseover';\n                if (oldShowFoldingControls !== _this._autoHideFoldingControls) {\n                    _this.foldingDecorationProvider.autoHideFoldingControls = _this._autoHideFoldingControls;\n                    _this.onModelContentChanged();\n                }\n                var oldUseFoldingProviders = _this._useFoldingProviders;\n                _this._useFoldingProviders = _this.editor.getConfiguration().contribInfo.foldingStrategy !== 'indentation';\n                if (oldUseFoldingProviders !== _this._useFoldingProviders) {\n                    _this.onFoldingStrategyChanged();\n                }\n            }\n        }));\n        this.globalToDispose.push({ dispose: function () { return lifecycle_1.dispose(_this.localToDispose); } });\n        this.onModelChanged();\n    }\n    FoldingController.get = function (editor) {\n        return editor.getContribution(exports.ID);\n    };\n    FoldingController.prototype.getId = function () {\n        return exports.ID;\n    };\n    FoldingController.prototype.dispose = function () {\n        this.globalToDispose = lifecycle_1.dispose(this.globalToDispose);\n    };\n    /**\n     * Store view state.\n     */\n    FoldingController.prototype.saveViewState = function () {\n        var model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n            return {};\n        }\n        if (this.foldingModel) { // disposed ?\n            var collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();\n            var provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n            return { collapsedRegions: collapsedRegions, lineCount: model.getLineCount(), provider: provider };\n        }\n        return undefined;\n    };\n    /**\n     * Restore view state.\n     */\n    FoldingController.prototype.restoreViewState = function (state) {\n        var model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n            return;\n        }\n        if (!state || !state.collapsedRegions || state.lineCount !== model.getLineCount()) {\n            return;\n        }\n        if (state.provider === syntaxRangeProvider_1.ID_SYNTAX_PROVIDER || state.provider === intializingRangeProvider_1.ID_INIT_PROVIDER) {\n            this.foldingStateMemento = state;\n        }\n        var collapsedRegions = state.collapsedRegions;\n        // set the hidden ranges right away, before waiting for the folding model.\n        if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\n            var foldingModel = this.getFoldingModel();\n            if (foldingModel) {\n                foldingModel.then(function (foldingModel) {\n                    if (foldingModel) {\n                        foldingModel.applyMemento(collapsedRegions);\n                    }\n                }).then(undefined, errors_1.onUnexpectedError);\n            }\n        }\n    };\n    FoldingController.prototype.onModelChanged = function () {\n        var _this = this;\n        this.localToDispose = lifecycle_1.dispose(this.localToDispose);\n        var model = this.editor.getModel();\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n            // huge files get no view model, so they cannot support hidden areas\n            return;\n        }\n        this.foldingModel = new foldingModel_1.FoldingModel(model, this.foldingDecorationProvider);\n        this.localToDispose.push(this.foldingModel);\n        this.hiddenRangeModel = new hiddenRangeModel_1.HiddenRangeModel(this.foldingModel);\n        this.localToDispose.push(this.hiddenRangeModel);\n        this.localToDispose.push(this.hiddenRangeModel.onDidChange(function (hr) { return _this.onHiddenRangesChanges(hr); }));\n        this.updateScheduler = new async_1.Delayer(200);\n        this.cursorChangedScheduler = new async_1.RunOnceScheduler(function () { return _this.revealCursor(); }, 200);\n        this.localToDispose.push(this.cursorChangedScheduler);\n        this.localToDispose.push(modes_1.FoldingRangeProviderRegistry.onDidChange(function () { return _this.onFoldingStrategyChanged(); }));\n        this.localToDispose.push(this.editor.onDidChangeModelLanguageConfiguration(function () { return _this.onFoldingStrategyChanged(); })); // covers model language changes as well\n        this.localToDispose.push(this.editor.onDidChangeModelContent(function () { return _this.onModelContentChanged(); }));\n        this.localToDispose.push(this.editor.onDidChangeCursorPosition(function () { return _this.onCursorPositionChanged(); }));\n        this.localToDispose.push(this.editor.onMouseDown(function (e) { return _this.onEditorMouseDown(e); }));\n        this.localToDispose.push(this.editor.onMouseUp(function (e) { return _this.onEditorMouseUp(e); }));\n        this.localToDispose.push({\n            dispose: function () {\n                if (_this.foldingRegionPromise) {\n                    _this.foldingRegionPromise.cancel();\n                    _this.foldingRegionPromise = null;\n                }\n                if (_this.updateScheduler) {\n                    _this.updateScheduler.cancel();\n                }\n                _this.updateScheduler = null;\n                _this.foldingModel = null;\n                _this.foldingModelPromise = null;\n                _this.hiddenRangeModel = null;\n                _this.cursorChangedScheduler = null;\n                _this.foldingStateMemento = null;\n                if (_this.rangeProvider) {\n                    _this.rangeProvider.dispose();\n                }\n                _this.rangeProvider = null;\n            }\n        });\n        this.onModelContentChanged();\n    };\n    FoldingController.prototype.onFoldingStrategyChanged = function () {\n        if (this.rangeProvider) {\n            this.rangeProvider.dispose();\n        }\n        this.rangeProvider = null;\n        this.onModelContentChanged();\n    };\n    FoldingController.prototype.getRangeProvider = function (editorModel) {\n        var _this = this;\n        if (this.rangeProvider) {\n            return this.rangeProvider;\n        }\n        this.rangeProvider = new indentRangeProvider_1.IndentRangeProvider(editorModel); // fallback\n        if (this._useFoldingProviders && this.foldingModel) {\n            var foldingProviders = modes_1.FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\n            if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\n                var rangeProvider = this.rangeProvider = new intializingRangeProvider_1.InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, function () {\n                    // if after 30 the InitializingRangeProvider is still not replaced, force a refresh\n                    _this.foldingStateMemento = null;\n                    _this.onFoldingStrategyChanged();\n                }, 30000);\n                return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\n            }\n            else if (foldingProviders.length > 0) {\n                this.rangeProvider = new syntaxRangeProvider_1.SyntaxRangeProvider(editorModel, foldingProviders);\n            }\n        }\n        this.foldingStateMemento = null;\n        return this.rangeProvider;\n    };\n    FoldingController.prototype.getFoldingModel = function () {\n        return this.foldingModelPromise;\n    };\n    FoldingController.prototype.onModelContentChanged = function () {\n        var _this = this;\n        if (this.updateScheduler) {\n            if (this.foldingRegionPromise) {\n                this.foldingRegionPromise.cancel();\n                this.foldingRegionPromise = null;\n            }\n            this.foldingModelPromise = this.updateScheduler.trigger(function () {\n                var foldingModel = _this.foldingModel;\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\n                    return null;\n                }\n                var foldingRegionPromise = _this.foldingRegionPromise = async_1.createCancelablePromise(function (token) { return _this.getRangeProvider(foldingModel.textModel).compute(token); });\n                return foldingRegionPromise.then(function (foldingRanges) {\n                    if (foldingRanges && foldingRegionPromise === _this.foldingRegionPromise) { // new request or cancelled in the meantime?\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\n                        var selections = _this.editor.getSelections();\n                        var selectionLineNumbers = selections ? selections.map(function (s) { return s.startLineNumber; }) : [];\n                        foldingModel.update(foldingRanges, selectionLineNumbers);\n                    }\n                    return foldingModel;\n                });\n            }).then(undefined, function (err) {\n                errors_1.onUnexpectedError(err);\n                return null;\n            });\n        }\n    };\n    FoldingController.prototype.onHiddenRangesChanges = function (hiddenRanges) {\n        if (this.hiddenRangeModel && hiddenRanges.length) {\n            var selections = this.editor.getSelections();\n            if (selections) {\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\n                    this.editor.setSelections(selections);\n                }\n            }\n        }\n        this.editor.setHiddenAreas(hiddenRanges);\n    };\n    FoldingController.prototype.onCursorPositionChanged = function () {\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n            this.cursorChangedScheduler.schedule();\n        }\n    };\n    FoldingController.prototype.revealCursor = function () {\n        var _this = this;\n        var foldingModel = this.getFoldingModel();\n        if (!foldingModel) {\n            return;\n        }\n        foldingModel.then(function (foldingModel) {\n            if (foldingModel) {\n                var selections = _this.editor.getSelections();\n                if (selections && selections.length > 0) {\n                    var toToggle = [];\n                    var _loop_1 = function (selection) {\n                        var lineNumber = selection.selectionStartLineNumber;\n                        if (_this.hiddenRangeModel && _this.hiddenRangeModel.isHidden(lineNumber)) {\n                            toToggle.push.apply(toToggle, foldingModel.getAllRegionsAtLine(lineNumber, function (r) { return r.isCollapsed && lineNumber > r.startLineNumber; }));\n                        }\n                    };\n                    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n                        var selection = selections_1[_i];\n                        _loop_1(selection);\n                    }\n                    if (toToggle.length) {\n                        foldingModel.toggleCollapseState(toToggle);\n                        _this.reveal(selections[0].getPosition());\n                    }\n                }\n            }\n        }).then(undefined, errors_1.onUnexpectedError);\n    };\n    FoldingController.prototype.onEditorMouseDown = function (e) {\n        this.mouseDownInfo = null;\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n            return;\n        }\n        if (!e.event.leftButton && !e.event.middleButton) {\n            return;\n        }\n        var range = e.target.range;\n        var iconClicked = false;\n        switch (e.target.type) {\n            case editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS:\n                var data = e.target.detail;\n                var offsetLeftInGutter = e.target.element.offsetLeft;\n                var gutterOffsetX = data.offsetX - offsetLeftInGutter;\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n                if (gutterOffsetX < 5) { // the whitespace between the border and the real folding icon border is 5px\n                    return;\n                }\n                iconClicked = true;\n                break;\n            case editorBrowser_1.MouseTargetType.CONTENT_EMPTY: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    var data_1 = e.target.detail;\n                    if (!data_1.isAfterLines) {\n                        break;\n                    }\n                }\n                return;\n            }\n            case editorBrowser_1.MouseTargetType.CONTENT_TEXT: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    var model = this.editor.getModel();\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                        break;\n                    }\n                }\n                return;\n            }\n            default:\n                return;\n        }\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked: iconClicked };\n    };\n    FoldingController.prototype.onEditorMouseUp = function (e) {\n        var _this = this;\n        var foldingModel = this.getFoldingModel();\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\n            return;\n        }\n        var lineNumber = this.mouseDownInfo.lineNumber;\n        var iconClicked = this.mouseDownInfo.iconClicked;\n        var range = e.target.range;\n        if (!range || range.startLineNumber !== lineNumber) {\n            return;\n        }\n        if (iconClicked) {\n            if (e.target.type !== editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS) {\n                return;\n            }\n        }\n        else {\n            var model = this.editor.getModel();\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n                return;\n            }\n        }\n        foldingModel.then(function (foldingModel) {\n            if (foldingModel) {\n                var region = foldingModel.getRegionAtLine(lineNumber);\n                if (region && region.startLineNumber === lineNumber) {\n                    var isCollapsed_1 = region.isCollapsed;\n                    if (iconClicked || isCollapsed_1) {\n                        var toToggle = [region];\n                        if (e.event.middleButton || e.event.shiftKey) {\n                            toToggle.push.apply(toToggle, foldingModel.getRegionsInside(region, function (r) { return r.isCollapsed === isCollapsed_1; }));\n                        }\n                        foldingModel.toggleCollapseState(toToggle);\n                        _this.reveal({ lineNumber: lineNumber, column: 1 });\n                    }\n                }\n            }\n        }).then(undefined, errors_1.onUnexpectedError);\n    };\n    FoldingController.prototype.reveal = function (position) {\n        this.editor.revealPositionInCenterIfOutsideViewport(position, editorCommon_1.ScrollType.Smooth);\n    };\n    FoldingController.MAX_FOLDING_REGIONS = 5000;\n    return FoldingController;\n}());\nexports.FoldingController = FoldingController;\nvar FoldingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldingAction, _super);\n    function FoldingAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FoldingAction.prototype.runEditorCommand = function (accessor, editor, args) {\n        var _this = this;\n        var foldingController = FoldingController.get(editor);\n        if (!foldingController) {\n            return;\n        }\n        var foldingModelPromise = foldingController.getFoldingModel();\n        if (foldingModelPromise) {\n            this.reportTelemetry(accessor, editor);\n            return foldingModelPromise.then(function (foldingModel) {\n                if (foldingModel) {\n                    _this.invoke(foldingController, foldingModel, editor, args);\n                    var selection = editor.getSelection();\n                    if (selection) {\n                        foldingController.reveal(selection.getStartPosition());\n                    }\n                }\n            });\n        }\n    };\n    FoldingAction.prototype.getSelectedLines = function (editor) {\n        var selections = editor.getSelections();\n        return selections ? selections.map(function (s) { return s.startLineNumber; }) : [];\n    };\n    FoldingAction.prototype.getLineNumbers = function (args, editor) {\n        if (args && args.selectionLines) {\n            return args.selectionLines.map(function (l) { return l + 1; }); // to 0-bases line numbers\n        }\n        return this.getSelectedLines(editor);\n    };\n    FoldingAction.prototype.run = function (_accessor, _editor) {\n    };\n    return FoldingAction;\n}(editorExtensions_1.EditorAction));\nfunction foldingArgumentsConstraint(args) {\n    if (!types.isUndefined(args)) {\n        if (!types.isObject(args)) {\n            return false;\n        }\n        var foldingArgs = args;\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n            return false;\n        }\n    }\n    return true;\n}\nvar UnfoldAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UnfoldAction, _super);\n    function UnfoldAction() {\n        return _super.call(this, {\n            id: 'editor.unfold',\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\n            alias: 'Unfold',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET,\n                mac: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            description: {\n                description: 'Unfold the content in the editor',\n                args: [\n                    {\n                        name: 'Unfold editor argument',\n                        description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\\n\\t\\t\\t\\t\\t\\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\\n\\t\\t\\t\\t\\t\\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\",\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }) || this;\n    }\n    UnfoldAction.prototype.invoke = function (_foldingController, foldingModel, editor, args) {\n        var levels = args && args.levels || 1;\n        var lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            foldingModel_1.setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n        }\n        else {\n            foldingModel_1.setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n        }\n    };\n    return UnfoldAction;\n}(FoldingAction));\nvar UnFoldRecursivelyAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UnFoldRecursivelyAction, _super);\n    function UnFoldRecursivelyAction() {\n        return _super.call(this, {\n            id: 'editor.unfoldRecursively',\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n            alias: 'Unfold Recursively',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    UnFoldRecursivelyAction.prototype.invoke = function (_foldingController, foldingModel, editor, _args) {\n        foldingModel_1.setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    };\n    return UnFoldRecursivelyAction;\n}(FoldingAction));\nvar FoldAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldAction, _super);\n    function FoldAction() {\n        return _super.call(this, {\n            id: 'editor.fold',\n            label: nls.localize('foldAction.label', \"Fold\"),\n            alias: 'Fold',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET,\n                mac: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            description: {\n                description: 'Fold the content in the editor',\n                args: [\n                    {\n                        name: 'Fold editor argument',\n                        description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to fold. Defaults to 1.\\n\\t\\t\\t\\t\\t\\t\\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\\n\\t\\t\\t\\t\\t\\t\\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\",\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }) || this;\n    }\n    FoldAction.prototype.invoke = function (_foldingController, foldingModel, editor, args) {\n        var levels = args && args.levels || 1;\n        var lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            foldingModel_1.setCollapseStateLevelsUp(foldingModel, true, levels, lineNumbers);\n        }\n        else {\n            foldingModel_1.setCollapseStateLevelsDown(foldingModel, true, levels, lineNumbers);\n        }\n    };\n    return FoldAction;\n}(FoldingAction));\nvar FoldRecursivelyAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldRecursivelyAction, _super);\n    function FoldRecursivelyAction() {\n        return _super.call(this, {\n            id: 'editor.foldRecursively',\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n            alias: 'Fold Recursively',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    FoldRecursivelyAction.prototype.invoke = function (_foldingController, foldingModel, editor) {\n        var selectedLines = this.getSelectedLines(editor);\n        foldingModel_1.setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    };\n    return FoldRecursivelyAction;\n}(FoldingAction));\nvar FoldAllBlockCommentsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldAllBlockCommentsAction, _super);\n    function FoldAllBlockCommentsAction() {\n        return _super.call(this, {\n            id: 'editor.foldAllBlockComments',\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n            alias: 'Fold All Block Comments',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_SLASH),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    FoldAllBlockCommentsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {\n        if (foldingModel.regions.hasTypes()) {\n            foldingModel_1.setCollapseStateForType(foldingModel, modes_1.FoldingRangeKind.Comment.value, true);\n        }\n        else {\n            var editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            var comments = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getComments(editorModel.getLanguageIdentifier().id);\n            if (comments && comments.blockCommentStartToken) {\n                var regExp = new RegExp('^\\\\s*' + strings_1.escapeRegExpCharacters(comments.blockCommentStartToken));\n                foldingModel_1.setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    };\n    return FoldAllBlockCommentsAction;\n}(FoldingAction));\nvar FoldAllRegionsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldAllRegionsAction, _super);\n    function FoldAllRegionsAction() {\n        return _super.call(this, {\n            id: 'editor.foldAllMarkerRegions',\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n            alias: 'Fold All Regions',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_8),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    FoldAllRegionsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {\n        if (foldingModel.regions.hasTypes()) {\n            foldingModel_1.setCollapseStateForType(foldingModel, modes_1.FoldingRangeKind.Region.value, true);\n        }\n        else {\n            var editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            var foldingRules = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                var regExp = new RegExp(foldingRules.markers.start);\n                foldingModel_1.setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    };\n    return FoldAllRegionsAction;\n}(FoldingAction));\nvar UnfoldAllRegionsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UnfoldAllRegionsAction, _super);\n    function UnfoldAllRegionsAction() {\n        return _super.call(this, {\n            id: 'editor.unfoldAllMarkerRegions',\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n            alias: 'Unfold All Regions',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_9),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    UnfoldAllRegionsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {\n        if (foldingModel.regions.hasTypes()) {\n            foldingModel_1.setCollapseStateForType(foldingModel, modes_1.FoldingRangeKind.Region.value, false);\n        }\n        else {\n            var editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            var foldingRules = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                var regExp = new RegExp(foldingRules.markers.start);\n                foldingModel_1.setCollapseStateForMatchingLines(foldingModel, regExp, false);\n            }\n        }\n    };\n    return UnfoldAllRegionsAction;\n}(FoldingAction));\nvar FoldAllAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldAllAction, _super);\n    function FoldAllAction() {\n        return _super.call(this, {\n            id: 'editor.foldAll',\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\n            alias: 'Fold All',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_0),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    FoldAllAction.prototype.invoke = function (_foldingController, foldingModel, _editor) {\n        foldingModel_1.setCollapseStateLevelsDown(foldingModel, true);\n    };\n    return FoldAllAction;\n}(FoldingAction));\nvar UnfoldAllAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UnfoldAllAction, _super);\n    function UnfoldAllAction() {\n        return _super.call(this, {\n            id: 'editor.unfoldAll',\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n            alias: 'Unfold All',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_J),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    UnfoldAllAction.prototype.invoke = function (_foldingController, foldingModel, _editor) {\n        foldingModel_1.setCollapseStateLevelsDown(foldingModel, false);\n    };\n    return UnfoldAllAction;\n}(FoldingAction));\nvar FoldLevelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FoldLevelAction, _super);\n    function FoldLevelAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FoldLevelAction.prototype.getFoldingLevel = function () {\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    };\n    FoldLevelAction.prototype.invoke = function (_foldingController, foldingModel, editor) {\n        foldingModel_1.setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    };\n    FoldLevelAction.ID_PREFIX = 'editor.foldLevel';\n    FoldLevelAction.ID = function (level) { return FoldLevelAction.ID_PREFIX + level; };\n    return FoldLevelAction;\n}(FoldingAction));\neditorExtensions_1.registerEditorContribution(FoldingController);\neditorExtensions_1.registerEditorAction(UnfoldAction);\neditorExtensions_1.registerEditorAction(UnFoldRecursivelyAction);\neditorExtensions_1.registerEditorAction(FoldAction);\neditorExtensions_1.registerEditorAction(FoldRecursivelyAction);\neditorExtensions_1.registerEditorAction(FoldAllAction);\neditorExtensions_1.registerEditorAction(UnfoldAllAction);\neditorExtensions_1.registerEditorAction(FoldAllBlockCommentsAction);\neditorExtensions_1.registerEditorAction(FoldAllRegionsAction);\neditorExtensions_1.registerEditorAction(UnfoldAllRegionsAction);\nfor (var i = 1; i <= 7; i++) {\n    editorExtensions_1.registerInstantiatedEditorAction(new FoldLevelAction({\n        id: FoldLevelAction.ID(i),\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n        alias: \"Fold Level \" + i,\n        precondition: null,\n        kbOpts: {\n            kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n            primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | (keyCodes_1.KeyCode.KEY_0 + i)),\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        }\n    }));\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/folding.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/folding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./folding';\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { RunOnceScheduler, Delayer, CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\nimport { KeyCode, KeyMod, KeyChord } from 'vs/base/common/keyCodes';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ScrollType, IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { registerEditorAction, registerEditorContribution, ServicesAccessor, EditorAction, registerInstantiatedEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { FoldingModel, setCollapseStateAtLevel, CollapseMemento, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateForMatchingLines, setCollapseStateForType } from 'vs/editor/contrib/folding/foldingModel';\nimport { FoldingDecorationProvider } from './foldingDecorations';\nimport { FoldingRegions, FoldingRegion } from './foldingRanges';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IConfigurationChangedEvent } from 'vs/editor/common/config/editorOptions';\nimport { IMarginData, IEmptyContentData } from 'vs/editor/browser/controller/mouseTarget';\nimport { HiddenRangeModel } from 'vs/editor/contrib/folding/hiddenRangeModel';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { IndentRangeProvider } from 'vs/editor/contrib/folding/indentRangeProvider';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { FoldingRangeProviderRegistry, FoldingRangeKind } from 'vs/editor/common/modes';\nimport { SyntaxRangeProvider, ID_SYNTAX_PROVIDER } from './syntaxRangeProvider';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { InitializingRangeProvider, ID_INIT_PROVIDER } from 'vs/editor/contrib/folding/intializingRangeProvider';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nexport const ID = 'editor.contrib.folding';\n\nexport interface RangeProvider {\n\treadonly id: string;\n\tcompute(cancelationToken: CancellationToken): Promise<FoldingRegions | null>;\n\tdispose(): void;\n}\n\ninterface FoldingStateMemento {\n\tcollapsedRegions?: CollapseMemento;\n\tlineCount?: number;\n\tprovider?: string;\n}\n\nexport class FoldingController implements IEditorContribution {\n\n\tstatic MAX_FOLDING_REGIONS = 5000;\n\n\n\tpublic static get(editor: ICodeEditor): FoldingController {\n\t\treturn editor.getContribution<FoldingController>(ID);\n\t}\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate _isEnabled: boolean;\n\tprivate _autoHideFoldingControls: boolean;\n\tprivate _useFoldingProviders: boolean;\n\n\tprivate readonly foldingDecorationProvider: FoldingDecorationProvider;\n\n\tprivate foldingModel: FoldingModel | null;\n\tprivate hiddenRangeModel: HiddenRangeModel | null;\n\n\tprivate rangeProvider: RangeProvider | null;\n\tprivate foldingRegionPromise: CancelablePromise<FoldingRegions | null> | null;\n\n\tprivate foldingStateMemento: FoldingStateMemento | null;\n\n\tprivate foldingModelPromise: Promise<FoldingModel | null> | null;\n\tprivate updateScheduler: Delayer<FoldingModel | null> | null;\n\n\tprivate globalToDispose: IDisposable[];\n\n\tprivate cursorChangedScheduler: RunOnceScheduler | null;\n\n\tprivate localToDispose: IDisposable[];\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis.editor = editor;\n\t\tthis._isEnabled = this.editor.getConfiguration().contribInfo.folding;\n\t\tthis._autoHideFoldingControls = this.editor.getConfiguration().contribInfo.showFoldingControls === 'mouseover';\n\t\tthis._useFoldingProviders = this.editor.getConfiguration().contribInfo.foldingStrategy !== 'indentation';\n\n\t\tthis.globalToDispose = [];\n\t\tthis.localToDispose = [];\n\n\t\tthis.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n\t\tthis.foldingDecorationProvider.autoHideFoldingControls = this._autoHideFoldingControls;\n\n\t\tthis.globalToDispose.push(this.editor.onDidChangeModel(() => this.onModelChanged()));\n\n\t\tthis.globalToDispose.push(this.editor.onDidChangeConfiguration((e: IConfigurationChangedEvent) => {\n\t\t\tif (e.contribInfo) {\n\t\t\t\tlet oldIsEnabled = this._isEnabled;\n\t\t\t\tthis._isEnabled = this.editor.getConfiguration().contribInfo.folding;\n\t\t\t\tif (oldIsEnabled !== this._isEnabled) {\n\t\t\t\t\tthis.onModelChanged();\n\t\t\t\t}\n\t\t\t\tlet oldShowFoldingControls = this._autoHideFoldingControls;\n\t\t\t\tthis._autoHideFoldingControls = this.editor.getConfiguration().contribInfo.showFoldingControls === 'mouseover';\n\t\t\t\tif (oldShowFoldingControls !== this._autoHideFoldingControls) {\n\t\t\t\t\tthis.foldingDecorationProvider.autoHideFoldingControls = this._autoHideFoldingControls;\n\t\t\t\t\tthis.onModelContentChanged();\n\t\t\t\t}\n\t\t\t\tlet oldUseFoldingProviders = this._useFoldingProviders;\n\t\t\t\tthis._useFoldingProviders = this.editor.getConfiguration().contribInfo.foldingStrategy !== 'indentation';\n\t\t\t\tif (oldUseFoldingProviders !== this._useFoldingProviders) {\n\t\t\t\t\tthis.onFoldingStrategyChanged();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.globalToDispose.push({ dispose: () => dispose(this.localToDispose) });\n\t\tthis.onModelChanged();\n\t}\n\n\tpublic getId(): string {\n\t\treturn ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.globalToDispose = dispose(this.globalToDispose);\n\t}\n\n\t/**\n\t * Store view state.\n\t */\n\tpublic saveViewState(): FoldingStateMemento | undefined {\n\t\tlet model = this.editor.getModel();\n\t\tif (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n\t\t\treturn {};\n\t\t}\n\t\tif (this.foldingModel) { // disposed ?\n\t\t\tlet collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel!.getMemento();\n\t\t\tlet provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n\t\t\treturn { collapsedRegions, lineCount: model.getLineCount(), provider };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Restore view state.\n\t */\n\tpublic restoreViewState(state: FoldingStateMemento): void {\n\t\tlet model = this.editor.getModel();\n\t\tif (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (!state || !state.collapsedRegions || state.lineCount !== model.getLineCount()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.provider === ID_SYNTAX_PROVIDER || state.provider === ID_INIT_PROVIDER) {\n\t\t\tthis.foldingStateMemento = state;\n\t\t}\n\n\t\tconst collapsedRegions = state.collapsedRegions;\n\n\t\t// set the hidden ranges right away, before waiting for the folding model.\n\t\tif (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\n\t\t\tconst foldingModel = this.getFoldingModel();\n\t\t\tif (foldingModel) {\n\t\t\t\tfoldingModel.then(foldingModel => {\n\t\t\t\t\tif (foldingModel) {\n\t\t\t\t\t\tfoldingModel.applyMemento(collapsedRegions);\n\t\t\t\t\t}\n\t\t\t\t}).then(undefined, onUnexpectedError);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onModelChanged(): void {\n\t\tthis.localToDispose = dispose(this.localToDispose);\n\n\t\tlet model = this.editor.getModel();\n\t\tif (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n\t\t\t// huge files get no view model, so they cannot support hidden areas\n\t\t\treturn;\n\t\t}\n\n\t\tthis.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n\t\tthis.localToDispose.push(this.foldingModel);\n\n\t\tthis.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n\t\tthis.localToDispose.push(this.hiddenRangeModel);\n\t\tthis.localToDispose.push(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n\n\t\tthis.updateScheduler = new Delayer<FoldingModel>(200);\n\n\t\tthis.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n\t\tthis.localToDispose.push(this.cursorChangedScheduler);\n\t\tthis.localToDispose.push(FoldingRangeProviderRegistry.onDidChange(() => this.onFoldingStrategyChanged()));\n\t\tthis.localToDispose.push(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n\t\tthis.localToDispose.push(this.editor.onDidChangeModelContent(() => this.onModelContentChanged()));\n\t\tthis.localToDispose.push(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n\t\tthis.localToDispose.push(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n\t\tthis.localToDispose.push(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n\t\tthis.localToDispose.push({\n\t\t\tdispose: () => {\n\t\t\t\tif (this.foldingRegionPromise) {\n\t\t\t\t\tthis.foldingRegionPromise.cancel();\n\t\t\t\t\tthis.foldingRegionPromise = null;\n\t\t\t\t}\n\t\t\t\tif (this.updateScheduler) {\n\t\t\t\t\tthis.updateScheduler.cancel();\n\t\t\t\t}\n\t\t\t\tthis.updateScheduler = null;\n\t\t\t\tthis.foldingModel = null;\n\t\t\t\tthis.foldingModelPromise = null;\n\t\t\t\tthis.hiddenRangeModel = null;\n\t\t\t\tthis.cursorChangedScheduler = null;\n\t\t\t\tthis.foldingStateMemento = null;\n\t\t\t\tif (this.rangeProvider) {\n\t\t\t\t\tthis.rangeProvider.dispose();\n\t\t\t\t}\n\t\t\t\tthis.rangeProvider = null;\n\t\t\t}\n\t\t});\n\t\tthis.onModelContentChanged();\n\t}\n\n\tprivate onFoldingStrategyChanged() {\n\t\tif (this.rangeProvider) {\n\t\t\tthis.rangeProvider.dispose();\n\t\t}\n\t\tthis.rangeProvider = null;\n\t\tthis.onModelContentChanged();\n\t}\n\n\tprivate getRangeProvider(editorModel: ITextModel): RangeProvider {\n\t\tif (this.rangeProvider) {\n\t\t\treturn this.rangeProvider;\n\t\t}\n\t\tthis.rangeProvider = new IndentRangeProvider(editorModel); // fallback\n\n\n\t\tif (this._useFoldingProviders && this.foldingModel) {\n\t\t\tlet foldingProviders = FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\n\t\t\tif (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\n\t\t\t\tconst rangeProvider = this.rangeProvider = new InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, () => {\n\t\t\t\t\t// if after 30 the InitializingRangeProvider is still not replaced, force a refresh\n\t\t\t\t\tthis.foldingStateMemento = null;\n\t\t\t\t\tthis.onFoldingStrategyChanged();\n\t\t\t\t}, 30000);\n\t\t\t\treturn rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\n\t\t\t} else if (foldingProviders.length > 0) {\n\t\t\t\tthis.rangeProvider = new SyntaxRangeProvider(editorModel, foldingProviders);\n\t\t\t}\n\t\t}\n\t\tthis.foldingStateMemento = null;\n\t\treturn this.rangeProvider;\n\t}\n\n\tpublic getFoldingModel() {\n\t\treturn this.foldingModelPromise;\n\t}\n\n\tprivate onModelContentChanged() {\n\t\tif (this.updateScheduler) {\n\t\t\tif (this.foldingRegionPromise) {\n\t\t\t\tthis.foldingRegionPromise.cancel();\n\t\t\t\tthis.foldingRegionPromise = null;\n\t\t\t}\n\t\t\tthis.foldingModelPromise = this.updateScheduler.trigger(() => {\n\t\t\t\tconst foldingModel = this.foldingModel;\n\t\t\t\tif (!foldingModel) { // null if editor has been disposed, or folding turned off\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlet foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => this.getRangeProvider(foldingModel.textModel).compute(token));\n\t\t\t\treturn foldingRegionPromise.then(foldingRanges => {\n\t\t\t\t\tif (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n\t\t\t\t\t\t// some cursors might have moved into hidden regions, make sure they are in expanded regions\n\t\t\t\t\t\tlet selections = this.editor.getSelections();\n\t\t\t\t\t\tlet selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\n\t\t\t\t\t\tfoldingModel.update(foldingRanges, selectionLineNumbers);\n\t\t\t\t\t}\n\t\t\t\t\treturn foldingModel;\n\t\t\t\t});\n\t\t\t}).then(undefined, (err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onHiddenRangesChanges(hiddenRanges: IRange[]) {\n\t\tif (this.hiddenRangeModel && hiddenRanges.length) {\n\t\t\tlet selections = this.editor.getSelections();\n\t\t\tif (selections) {\n\t\t\t\tif (this.hiddenRangeModel.adjustSelections(selections)) {\n\t\t\t\t\tthis.editor.setSelections(selections);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.editor.setHiddenAreas(hiddenRanges);\n\t}\n\n\tprivate onCursorPositionChanged() {\n\t\tif (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n\t\t\tthis.cursorChangedScheduler!.schedule();\n\t\t}\n\t}\n\n\tprivate revealCursor() {\n\t\tconst foldingModel = this.getFoldingModel();\n\t\tif (!foldingModel) {\n\t\t\treturn;\n\t\t}\n\t\tfoldingModel.then(foldingModel => { // null is returned if folding got disabled in the meantime\n\t\t\tif (foldingModel) {\n\t\t\t\tlet selections = this.editor.getSelections();\n\t\t\t\tif (selections && selections.length > 0) {\n\t\t\t\t\tlet toToggle: FoldingRegion[] = [];\n\t\t\t\t\tfor (let selection of selections) {\n\t\t\t\t\t\tlet lineNumber = selection.selectionStartLineNumber;\n\t\t\t\t\t\tif (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n\t\t\t\t\t\t\ttoToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (toToggle.length) {\n\t\t\t\t\t\tfoldingModel.toggleCollapseState(toToggle);\n\t\t\t\t\t\tthis.reveal(selections[0].getPosition());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(undefined, onUnexpectedError);\n\n\t}\n\n\tprivate mouseDownInfo: { lineNumber: number, iconClicked: boolean } | null;\n\n\tprivate onEditorMouseDown(e: IEditorMouseEvent): void {\n\t\tthis.mouseDownInfo = null;\n\n\n\t\tif (!this.hiddenRangeModel || !e.target || !e.target.range) {\n\t\t\treturn;\n\t\t}\n\t\tif (!e.event.leftButton && !e.event.middleButton) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = e.target.range;\n\t\tlet iconClicked = false;\n\t\tswitch (e.target.type) {\n\t\t\tcase MouseTargetType.GUTTER_LINE_DECORATIONS:\n\t\t\t\tconst data = e.target.detail as IMarginData;\n\t\t\t\tconst offsetLeftInGutter = (e.target.element as HTMLElement).offsetLeft;\n\t\t\t\tconst gutterOffsetX = data.offsetX - offsetLeftInGutter;\n\n\t\t\t\t// const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n\n\t\t\t\t// TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n\t\t\t\tif (gutterOffsetX < 5) { // the whitespace between the border and the real folding icon border is 5px\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ticonClicked = true;\n\t\t\t\tbreak;\n\t\t\tcase MouseTargetType.CONTENT_EMPTY: {\n\t\t\t\tif (this.hiddenRangeModel.hasRanges()) {\n\t\t\t\t\tconst data = e.target.detail as IEmptyContentData;\n\t\t\t\t\tif (!data.isAfterLines) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_TEXT: {\n\t\t\t\tif (this.hiddenRangeModel.hasRanges()) {\n\t\t\t\t\tlet model = this.editor.getModel();\n\t\t\t\t\tif (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\tthis.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n\t}\n\n\tprivate onEditorMouseUp(e: IEditorMouseEvent): void {\n\t\tconst foldingModel = this.getFoldingModel();\n\t\tif (!foldingModel || !this.mouseDownInfo || !e.target) {\n\t\t\treturn;\n\t\t}\n\t\tlet lineNumber = this.mouseDownInfo.lineNumber;\n\t\tlet iconClicked = this.mouseDownInfo.iconClicked;\n\n\t\tlet range = e.target.range;\n\t\tif (!range || range.startLineNumber !== lineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (iconClicked) {\n\t\t\tif (e.target.type !== MouseTargetType.GUTTER_LINE_DECORATIONS) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tlet model = this.editor.getModel();\n\t\t\tif (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfoldingModel.then(foldingModel => {\n\t\t\tif (foldingModel) {\n\t\t\t\tlet region = foldingModel.getRegionAtLine(lineNumber);\n\t\t\t\tif (region && region.startLineNumber === lineNumber) {\n\t\t\t\t\tlet isCollapsed = region.isCollapsed;\n\t\t\t\t\tif (iconClicked || isCollapsed) {\n\t\t\t\t\t\tlet toToggle = [region];\n\t\t\t\t\t\tif (e.event.middleButton || e.event.shiftKey) {\n\t\t\t\t\t\t\ttoToggle.push(...foldingModel.getRegionsInside(region, r => r.isCollapsed === isCollapsed));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfoldingModel.toggleCollapseState(toToggle);\n\t\t\t\t\t\tthis.reveal({ lineNumber, column: 1 });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(undefined, onUnexpectedError);\n\t}\n\n\tpublic reveal(position: IPosition): void {\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(position, ScrollType.Smooth);\n\t}\n}\n\nabstract class FoldingAction<T> extends EditorAction {\n\n\tabstract invoke(foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: T): void;\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: T): void | Promise<void> {\n\t\tlet foldingController = FoldingController.get(editor);\n\t\tif (!foldingController) {\n\t\t\treturn;\n\t\t}\n\t\tlet foldingModelPromise = foldingController.getFoldingModel();\n\t\tif (foldingModelPromise) {\n\t\t\tthis.reportTelemetry(accessor, editor);\n\t\t\treturn foldingModelPromise.then(foldingModel => {\n\t\t\t\tif (foldingModel) {\n\t\t\t\t\tthis.invoke(foldingController, foldingModel, editor, args);\n\t\t\t\t\tconst selection = editor.getSelection();\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tfoldingController.reveal(selection.getStartPosition());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected getSelectedLines(editor: ICodeEditor) {\n\t\tlet selections = editor.getSelections();\n\t\treturn selections ? selections.map(s => s.startLineNumber) : [];\n\t}\n\n\tprotected getLineNumbers(args: FoldingArguments, editor: ICodeEditor) {\n\t\tif (args && args.selectionLines) {\n\t\t\treturn args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n\t\t}\n\t\treturn this.getSelectedLines(editor);\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, _editor: ICodeEditor): void {\n\t}\n}\n\ninterface FoldingArguments {\n\tlevels?: number;\n\tdirection?: 'up' | 'down';\n\tselectionLines?: number[];\n}\n\nfunction foldingArgumentsConstraint(args: any) {\n\tif (!types.isUndefined(args)) {\n\t\tif (!types.isObject(args)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst foldingArgs: FoldingArguments = args;\n\t\tif (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nclass UnfoldAction extends FoldingAction<FoldingArguments> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfold',\n\t\t\tlabel: nls.localize('unfoldAction.label', \"Unfold\"),\n\t\t\talias: 'Unfold',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_CLOSE_SQUARE_BRACKET,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.US_CLOSE_SQUARE_BRACKET\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Unfold the content in the editor',\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Unfold editor argument',\n\t\t\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tconstraint: foldingArgumentsConstraint,\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t\t'levels': {\n\t\t\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'direction': {\n\t\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t\t'enum': ['up', 'down'],\n\t\t\t\t\t\t\t\t\t'default': 'down'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'selectionLines': {\n\t\t\t\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\t\t\t\t'items': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: FoldingArguments): void {\n\t\tlet levels = args && args.levels || 1;\n\t\tlet lineNumbers = this.getLineNumbers(args, editor);\n\t\tif (args && args.direction === 'up') {\n\t\t\tsetCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n\t\t} else {\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n\t\t}\n\t}\n}\n\nclass UnFoldRecursivelyAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldRecursively',\n\t\t\tlabel: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n\t\t\talias: 'Unfold Recursively',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.US_CLOSE_SQUARE_BRACKET),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, _args: any): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n\t}\n}\n\nclass FoldAction extends FoldingAction<FoldingArguments> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.fold',\n\t\t\tlabel: nls.localize('foldAction.label', \"Fold\"),\n\t\t\talias: 'Fold',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_OPEN_SQUARE_BRACKET,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.US_OPEN_SQUARE_BRACKET\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Fold the content in the editor',\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Fold editor argument',\n\t\t\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold. Defaults to 1.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tconstraint: foldingArgumentsConstraint,\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t\t'levels': {\n\t\t\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'direction': {\n\t\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t\t'enum': ['up', 'down'],\n\t\t\t\t\t\t\t\t\t'default': 'down'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'selectionLines': {\n\t\t\t\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\t\t\t\t'items': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: FoldingArguments): void {\n\t\tlet levels = args && args.levels || 1;\n\t\tlet lineNumbers = this.getLineNumbers(args, editor);\n\t\tif (args && args.direction === 'up') {\n\t\t\tsetCollapseStateLevelsUp(foldingModel, true, levels, lineNumbers);\n\t\t} else {\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, levels, lineNumbers);\n\t\t}\n\t}\n}\n\nclass FoldRecursivelyAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldRecursively',\n\t\t\tlabel: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n\t\t\talias: 'Fold Recursively',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.US_OPEN_SQUARE_BRACKET),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tlet selectedLines = this.getSelectedLines(editor);\n\t\tsetCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n\t}\n}\n\nclass FoldAllBlockCommentsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAllBlockComments',\n\t\t\tlabel: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n\t\t\talias: 'Fold All Block Comments',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.US_SLASH),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet comments = LanguageConfigurationRegistry.getComments(editorModel.getLanguageIdentifier().id);\n\t\t\tif (comments && comments.blockCommentStartToken) {\n\t\t\t\tlet regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FoldAllRegionsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAllMarkerRegions',\n\t\t\tlabel: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n\t\t\talias: 'Fold All Regions',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_8),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n\t\t\tif (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n\t\t\t\tlet regExp = new RegExp(foldingRules.markers.start);\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass UnfoldAllRegionsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldAllMarkerRegions',\n\t\t\tlabel: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n\t\t\talias: 'Unfold All Regions',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_9),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n\t\t\tif (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n\t\t\t\tlet regExp = new RegExp(foldingRules.markers.start);\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, false);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FoldAllAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAll',\n\t\t\tlabel: nls.localize('foldAllAction.label', \"Fold All\"),\n\t\t\talias: 'Fold All',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_0),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, _editor: ICodeEditor): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, true);\n\t}\n}\n\nclass UnfoldAllAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldAll',\n\t\t\tlabel: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n\t\t\talias: 'Unfold All',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_J),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, _editor: ICodeEditor): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, false);\n\t}\n}\n\nclass FoldLevelAction extends FoldingAction<void> {\n\tprivate static readonly ID_PREFIX = 'editor.foldLevel';\n\tpublic static readonly ID = (level: number) => FoldLevelAction.ID_PREFIX + level;\n\n\tprivate getFoldingLevel() {\n\t\treturn parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tsetCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n\t}\n}\n\nregisterEditorContribution(FoldingController);\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\n\nfor (let i = 1; i <= 7; i++) {\n\tregisterInstantiatedEditorAction(\n\t\tnew FoldLevelAction({\n\t\t\tid: FoldLevelAction.ID(i),\n\t\t\tlabel: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n\t\t\talias: `Fold Level ${i}`,\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | (KeyCode.KEY_0 + i)),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})\n\t);\n}\n"]}]}