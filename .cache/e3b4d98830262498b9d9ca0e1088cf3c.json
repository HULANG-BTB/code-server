{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/resolvedKeybindingItem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/resolvedKeybindingItem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar ResolvedKeybindingItem = /** @class */ (function () {\n    function ResolvedKeybindingItem(resolvedKeybinding, command, commandArgs, when, isDefault) {\n        this.resolvedKeybinding = resolvedKeybinding;\n        this.keypressParts = resolvedKeybinding ? removeElementsAfterNulls(resolvedKeybinding.getDispatchParts()) : [];\n        this.bubble = (command ? command.charCodeAt(0) === charCode_1.CharCode.Caret : false);\n        this.command = this.bubble ? command.substr(1) : command;\n        this.commandArgs = commandArgs;\n        this.when = when;\n        this.isDefault = isDefault;\n    }\n    return ResolvedKeybindingItem;\n}());\nexports.ResolvedKeybindingItem = ResolvedKeybindingItem;\nfunction removeElementsAfterNulls(arr) {\n    var result = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        var element = arr[i];\n        if (!element) {\n            // stop processing at first encountered null\n            return result;\n        }\n        result.push(element);\n    }\n    return result;\n}\nexports.removeElementsAfterNulls = removeElementsAfterNulls;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/resolvedKeybindingItem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/resolvedKeybindingItem.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,oDAAmD;AAInD;IAWC,gCAAY,kBAA6C,EAAE,OAAsB,EAAE,WAAgB,EAAE,IAAgC,EAAE,SAAkB;QACxJ,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC,CAAC,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/G,IAAI,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,mBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC1D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;IACF,6BAAC;AAAD,CAAC,AApBD,IAoBC;AApBY,wDAAsB;AAsBnC,SAAgB,wBAAwB,CAAI,GAAiB;IAC5D,IAAI,MAAM,GAAQ,EAAE,CAAC;IACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC/C,IAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,EAAE;YACb,4CAA4C;YAC5C,OAAO,MAAM,CAAC;SACd;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACrB;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AAXD,4DAWC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nexport class ResolvedKeybindingItem {\n\t_resolvedKeybindingItemBrand: void;\n\n\tpublic readonly resolvedKeybinding: ResolvedKeybinding | null;\n\tpublic readonly keypressParts: string[];\n\tpublic readonly bubble: boolean;\n\tpublic readonly command: string | null;\n\tpublic readonly commandArgs: any;\n\tpublic readonly when: ContextKeyExpr | undefined;\n\tpublic readonly isDefault: boolean;\n\n\tconstructor(resolvedKeybinding: ResolvedKeybinding | null, command: string | null, commandArgs: any, when: ContextKeyExpr | undefined, isDefault: boolean) {\n\t\tthis.resolvedKeybinding = resolvedKeybinding;\n\t\tthis.keypressParts = resolvedKeybinding ? removeElementsAfterNulls(resolvedKeybinding.getDispatchParts()) : [];\n\t\tthis.bubble = (command ? command.charCodeAt(0) === CharCode.Caret : false);\n\t\tthis.command = this.bubble ? command!.substr(1) : command;\n\t\tthis.commandArgs = commandArgs;\n\t\tthis.when = when;\n\t\tthis.isDefault = isDefault;\n\t}\n}\n\nexport function removeElementsAfterNulls<T>(arr: (T | null)[]): T[] {\n\tlet result: T[] = [];\n\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\tconst element = arr[i];\n\t\tif (!element) {\n\t\t\t// stop processing at first encountered null\n\t\t\treturn result;\n\t\t}\n\t\tresult.push(element);\n\t}\n\treturn result;\n}\n"]}]}