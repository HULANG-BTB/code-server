{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.darwin.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.darwin.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"electron\", \"vs/base/common/lifecycle\", \"vs/base/common/event\", \"vs/base/common/decorators\", \"vs/platform/configuration/common/configuration\", \"vs/platform/lifecycle/electron-main/lifecycleMain\", \"vs/platform/update/common/update\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/environment/common/environment\", \"vs/platform/log/common/log\", \"vs/platform/update/electron-main/abstractUpdateService\", \"vs/platform/request/node/request\"], function (require, exports, electron, lifecycle_1, event_1, decorators_1, configuration_1, lifecycleMain_1, update_1, telemetry_1, environment_1, log_1, abstractUpdateService_1, request_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let DarwinUpdateService = class DarwinUpdateService extends abstractUpdateService_1.AbstractUpdateService {\n        constructor(lifecycleService, configurationService, telemetryService, environmentService, requestService, logService) {\n            super(lifecycleService, configurationService, environmentService, requestService, logService);\n            this.telemetryService = telemetryService;\n            this.disposables = [];\n            this.onRawError(this.onError, this, this.disposables);\n            this.onRawUpdateAvailable(this.onUpdateAvailable, this, this.disposables);\n            this.onRawUpdateDownloaded(this.onUpdateDownloaded, this, this.disposables);\n            this.onRawUpdateNotAvailable(this.onUpdateNotAvailable, this, this.disposables);\n        }\n        get onRawError() { return event_1.Event.fromNodeEventEmitter(electron.autoUpdater, 'error', (_, message) => message); }\n        get onRawUpdateNotAvailable() { return event_1.Event.fromNodeEventEmitter(electron.autoUpdater, 'update-not-available'); }\n        get onRawUpdateAvailable() { return event_1.Event.fromNodeEventEmitter(electron.autoUpdater, 'update-available', (_, url, version) => ({ url, version, productVersion: version })); }\n        get onRawUpdateDownloaded() { return event_1.Event.fromNodeEventEmitter(electron.autoUpdater, 'update-downloaded', (_, releaseNotes, version, date) => ({ releaseNotes, version, productVersion: version, date })); }\n        onError(err) {\n            this.logService.error('UpdateService error:', err);\n            // only show message when explicitly checking for updates\n            const shouldShowMessage = this.state.type === update_1.StateType.CheckingForUpdates ? !!this.state.context : true;\n            const message = shouldShowMessage ? err : undefined;\n            this.setState(update_1.State.Idle(update_1.UpdateType.Archive, message));\n        }\n        buildUpdateFeedUrl(quality) {\n            const url = abstractUpdateService_1.createUpdateURL('darwin', quality);\n            try {\n                electron.autoUpdater.setFeedURL({ url });\n            }\n            catch (e) {\n                // application is very likely not signed\n                this.logService.error('Failed to set update feed URL', e);\n                return undefined;\n            }\n            return url;\n        }\n        doCheckForUpdates(context) {\n            this.setState(update_1.State.CheckingForUpdates(context));\n            electron.autoUpdater.checkForUpdates();\n        }\n        onUpdateAvailable(update) {\n            if (this.state.type !== update_1.StateType.CheckingForUpdates) {\n                return;\n            }\n            this.setState(update_1.State.Downloading(update));\n        }\n        onUpdateDownloaded(update) {\n            if (this.state.type !== update_1.StateType.Downloading) {\n                return;\n            }\n            /* __GDPR__\n                \"update:downloaded\" : {\n                    \"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                }\n            */\n            this.telemetryService.publicLog('update:downloaded', { version: update.version });\n            this.setState(update_1.State.Ready(update));\n        }\n        onUpdateNotAvailable() {\n            if (this.state.type !== update_1.StateType.CheckingForUpdates) {\n                return;\n            }\n            /* __GDPR__\n                    \"update:notAvailable\" : {\n                        \"explicit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                    }\n                */\n            this.telemetryService.publicLog('update:notAvailable', { explicit: !!this.state.context });\n            this.setState(update_1.State.Idle(update_1.UpdateType.Archive));\n        }\n        doQuitAndInstall() {\n            this.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n            electron.autoUpdater.quitAndInstall();\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    __decorate([\n        decorators_1.memoize\n    ], DarwinUpdateService.prototype, \"onRawError\", null);\n    __decorate([\n        decorators_1.memoize\n    ], DarwinUpdateService.prototype, \"onRawUpdateNotAvailable\", null);\n    __decorate([\n        decorators_1.memoize\n    ], DarwinUpdateService.prototype, \"onRawUpdateAvailable\", null);\n    __decorate([\n        decorators_1.memoize\n    ], DarwinUpdateService.prototype, \"onRawUpdateDownloaded\", null);\n    DarwinUpdateService = __decorate([\n        __param(0, lifecycleMain_1.ILifecycleService),\n        __param(1, configuration_1.IConfigurationService),\n        __param(2, telemetry_1.ITelemetryService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, request_1.IRequestService),\n        __param(5, log_1.ILogService)\n    ], DarwinUpdateService);\n    exports.DarwinUpdateService = DarwinUpdateService;\n});\n",null]}