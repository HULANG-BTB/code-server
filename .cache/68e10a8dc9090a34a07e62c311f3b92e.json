{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/base/common/async\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/lifecycle\", \"vs/editor/common/services/modelService\", \"vs/workbench/common/editor/resourceEditorModel\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/base/common/network\", \"vs/editor/common/services/resolverService\", \"vs/workbench/services/untitled/common/untitledEditorService\", \"vs/workbench/services/textfile/common/textFileEditorModel\", \"vs/platform/files/common/files\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, uri_1, async_1, instantiation_1, lifecycle_1, modelService_1, resourceEditorModel_1, textfiles_1, network, resolverService_1, untitledEditorService_1, textFileEditorModel_1, files_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ResourceModelCollection = class ResourceModelCollection extends lifecycle_1.ReferenceCollection {\n        constructor(instantiationService, textFileService, fileService) {\n            super();\n            this.instantiationService = instantiationService;\n            this.textFileService = textFileService;\n            this.fileService = fileService;\n            this.providers = Object.create(null);\n            this.modelsToDispose = new Set();\n        }\n        createReferencedObject(key, skipActivateProvider) {\n            this.modelsToDispose.delete(key);\n            const resource = uri_1.URI.parse(key);\n            // File or remote file provider already known\n            if (this.fileService.canHandleResource(resource)) {\n                return this.textFileService.models.loadOrCreate(resource, { reason: textfiles_1.LoadReason.REFERENCE });\n            }\n            // Virtual documents\n            if (this.providers[resource.scheme]) {\n                return this.resolveTextModelContent(key).then(() => this.instantiationService.createInstance(resourceEditorModel_1.ResourceEditorModel, resource));\n            }\n            // Either unknown schema, or not yet registered, try to activate\n            if (!skipActivateProvider) {\n                return this.fileService.activateProvider(resource.scheme).then(() => this.createReferencedObject(key, true));\n            }\n            return Promise.reject(new Error('resource is not available'));\n        }\n        destroyReferencedObject(key, modelPromise) {\n            this.modelsToDispose.add(key);\n            modelPromise.then(model => {\n                if (this.modelsToDispose.has(key)) {\n                    if (model instanceof textFileEditorModel_1.TextFileEditorModel) {\n                        this.textFileService.models.disposeModel(model);\n                    }\n                    else {\n                        model.dispose();\n                    }\n                }\n            }, err => {\n                // ignore\n            });\n        }\n        registerTextModelContentProvider(scheme, provider) {\n            const registry = this.providers;\n            const providers = registry[scheme] || (registry[scheme] = []);\n            providers.unshift(provider);\n            return lifecycle_1.toDisposable(() => {\n                const array = registry[scheme];\n                if (!array) {\n                    return;\n                }\n                const index = array.indexOf(provider);\n                if (index === -1) {\n                    return;\n                }\n                array.splice(index, 1);\n                if (array.length === 0) {\n                    delete registry[scheme];\n                }\n            });\n        }\n        hasTextModelContentProvider(scheme) {\n            return this.providers[scheme] !== undefined;\n        }\n        resolveTextModelContent(key) {\n            const resource = uri_1.URI.parse(key);\n            const providers = this.providers[resource.scheme] || [];\n            const factories = providers.map(p => () => Promise.resolve(p.provideTextContent(resource)));\n            return async_1.first(factories).then(model => {\n                if (!model) {\n                    return Promise.reject(new Error('resource is not available'));\n                }\n                return model;\n            });\n        }\n    };\n    ResourceModelCollection = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, textfiles_1.ITextFileService),\n        __param(2, files_1.IFileService)\n    ], ResourceModelCollection);\n    let TextModelResolverService = class TextModelResolverService {\n        constructor(untitledEditorService, instantiationService, modelService) {\n            this.untitledEditorService = untitledEditorService;\n            this.instantiationService = instantiationService;\n            this.modelService = modelService;\n            this.resourceModelCollection = instantiationService.createInstance(ResourceModelCollection);\n        }\n        createModelReference(resource) {\n            return this._createModelReference(resource);\n        }\n        _createModelReference(resource) {\n            // Untitled Schema: go through cached input\n            if (resource.scheme === network.Schemas.untitled) {\n                return this.untitledEditorService.loadOrCreate({ resource }).then(model => new lifecycle_1.ImmortalReference(model));\n            }\n            // InMemory Schema: go through model service cache\n            if (resource.scheme === network.Schemas.inMemory) {\n                const cachedModel = this.modelService.getModel(resource);\n                if (!cachedModel) {\n                    return Promise.reject(new Error('Cant resolve inmemory resource'));\n                }\n                return Promise.resolve(new lifecycle_1.ImmortalReference(this.instantiationService.createInstance(resourceEditorModel_1.ResourceEditorModel, resource)));\n            }\n            const ref = this.resourceModelCollection.acquire(resource.toString());\n            return ref.object.then(model => ({ object: model, dispose: () => ref.dispose() }), err => {\n                ref.dispose();\n                return Promise.reject(err);\n            });\n        }\n        registerTextModelContentProvider(scheme, provider) {\n            return this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n        }\n        hasTextModelContentProvider(scheme) {\n            return this.resourceModelCollection.hasTextModelContentProvider(scheme);\n        }\n    };\n    TextModelResolverService = __decorate([\n        __param(0, untitledEditorService_1.IUntitledEditorService),\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, modelService_1.IModelService)\n    ], TextModelResolverService);\n    exports.TextModelResolverService = TextModelResolverService;\n    extensions_1.registerSingleton(resolverService_1.ITextModelService, TextModelResolverService, true);\n});\n",null]}