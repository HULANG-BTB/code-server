{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/actions/browser/menuItemActionItem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/actions/browser/menuItemActionItem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar event_1 = require(\"vs/base/browser/event\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar event_2 = require(\"vs/base/common/event\");\nvar idGenerator_1 = require(\"vs/base/common/idGenerator\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\n// The alternative key on all platforms is alt. On windows we also support shift as an alternative key #44136\nvar AlternativeKeyEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(AlternativeKeyEmitter, _super);\n    function AlternativeKeyEmitter(contextMenuService) {\n        var _this = _super.call(this) || this;\n        _this._subscriptions = [];\n        _this._suppressAltKeyUp = false;\n        _this._subscriptions.push(event_1.domEvent(document.body, 'keydown')(function (e) {\n            _this.isPressed = e.altKey || ((platform_1.isWindows || platform_1.isLinux) && e.shiftKey);\n        }));\n        _this._subscriptions.push(event_1.domEvent(document.body, 'keyup')(function (e) {\n            if (_this.isPressed) {\n                if (_this._suppressAltKeyUp) {\n                    e.preventDefault();\n                }\n            }\n            _this._suppressAltKeyUp = false;\n            _this.isPressed = false;\n        }));\n        _this._subscriptions.push(event_1.domEvent(document.body, 'mouseleave')(function (e) { return _this.isPressed = false; }));\n        _this._subscriptions.push(event_1.domEvent(document.body, 'blur')(function (e) { return _this.isPressed = false; }));\n        // Workaround since we do not get any events while a context menu is shown\n        _this._subscriptions.push(contextMenuService.onDidContextMenu(function () { return _this.isPressed = false; }));\n        return _this;\n    }\n    Object.defineProperty(AlternativeKeyEmitter.prototype, \"isPressed\", {\n        get: function () {\n            return this._isPressed;\n        },\n        set: function (value) {\n            this._isPressed = value;\n            this.fire(this._isPressed);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AlternativeKeyEmitter.prototype.suppressAltKeyUp = function () {\n        // Sometimes the native alt behavior needs to be suppresed since the alt was already used as an alternative key\n        // Example: windows behavior to toggle tha top level menu #44396\n        this._suppressAltKeyUp = true;\n    };\n    AlternativeKeyEmitter.getInstance = function (contextMenuService) {\n        if (!AlternativeKeyEmitter.instance) {\n            AlternativeKeyEmitter.instance = new AlternativeKeyEmitter(contextMenuService);\n        }\n        return AlternativeKeyEmitter.instance;\n    };\n    AlternativeKeyEmitter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._subscriptions = lifecycle_1.dispose(this._subscriptions);\n    };\n    return AlternativeKeyEmitter;\n}(event_2.Emitter));\nfunction fillInContextMenuActions(menu, options, target, contextMenuService, isPrimaryGroup) {\n    var groups = menu.getActions(options);\n    var getAlternativeActions = AlternativeKeyEmitter.getInstance(contextMenuService).isPressed;\n    fillInActions(groups, target, getAlternativeActions, isPrimaryGroup);\n}\nexports.fillInContextMenuActions = fillInContextMenuActions;\nfunction fillInActionBarActions(menu, options, target, isPrimaryGroup) {\n    var groups = menu.getActions(options);\n    // Action bars handle alternative actions on their own so the alternative actions should be ignored\n    fillInActions(groups, target, false, isPrimaryGroup);\n}\nexports.fillInActionBarActions = fillInActionBarActions;\nfunction fillInActions(groups, target, useAlternativeActions, isPrimaryGroup) {\n    if (isPrimaryGroup === void 0) { isPrimaryGroup = function (group) { return group === 'navigation'; }; }\n    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n        var tuple = groups_1[_i];\n        var group = tuple[0], actions = tuple[1];\n        if (useAlternativeActions) {\n            actions = actions.map(function (a) { return (a instanceof actions_1.MenuItemAction) && !!a.alt ? a.alt : a; });\n        }\n        if (isPrimaryGroup(group)) {\n            var to = Array.isArray(target) ? target : target.primary;\n            to.unshift.apply(to, actions);\n        }\n        else {\n            var to = Array.isArray(target) ? target : target.secondary;\n            if (to.length > 0) {\n                to.push(new actionbar_1.Separator());\n            }\n            to.push.apply(to, actions);\n        }\n    }\n}\nfunction createActionItem(action, keybindingService, notificationService, contextMenuService) {\n    if (action instanceof actions_1.MenuItemAction) {\n        return new MenuItemActionItem(action, keybindingService, notificationService, contextMenuService);\n    }\n    return undefined;\n}\nexports.createActionItem = createActionItem;\nvar ids = new idGenerator_1.IdGenerator('menu-item-action-item-icon-');\nvar MenuItemActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(MenuItemActionItem, _super);\n    function MenuItemActionItem(_action, _keybindingService, _notificationService, _contextMenuService) {\n        var _this = _super.call(this, undefined, _action, { icon: !!(_action.class || _action.item.iconLocation), label: !_action.class && !_action.item.iconLocation }) || this;\n        _this._action = _action;\n        _this._keybindingService = _keybindingService;\n        _this._notificationService = _notificationService;\n        _this._altKey = AlternativeKeyEmitter.getInstance(_contextMenuService);\n        return _this;\n    }\n    Object.defineProperty(MenuItemActionItem.prototype, \"_commandAction\", {\n        get: function () {\n            return this._wantsAltCommand && this._action.alt || this._action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MenuItemActionItem.prototype.onClick = function (event) {\n        var _this = this;\n        event.preventDefault();\n        event.stopPropagation();\n        if (this._altKey.isPressed) {\n            this._altKey.suppressAltKeyUp();\n        }\n        this.actionRunner.run(this._commandAction)\n            .then(undefined, function (err) { return _this._notificationService.error(err); });\n    };\n    MenuItemActionItem.prototype.render = function (container) {\n        var _this = this;\n        _super.prototype.render.call(this, container);\n        this._updateItemClass(this._action.item);\n        var mouseOver = false;\n        var alternativeKeyDown = this._altKey.isPressed;\n        var updateAltState = function () {\n            var wantsAltCommand = mouseOver && alternativeKeyDown;\n            if (wantsAltCommand !== _this._wantsAltCommand) {\n                _this._wantsAltCommand = wantsAltCommand;\n                _this.updateLabel();\n                _this.updateTooltip();\n                _this.updateClass();\n            }\n        };\n        if (this._action.alt) {\n            this._register(this._altKey.event(function (value) {\n                alternativeKeyDown = value;\n                updateAltState();\n            }));\n        }\n        this._register(event_1.domEvent(container, 'mouseleave')(function (_) {\n            mouseOver = false;\n            updateAltState();\n        }));\n        this._register(event_1.domEvent(container, 'mouseenter')(function (e) {\n            mouseOver = true;\n            updateAltState();\n        }));\n    };\n    MenuItemActionItem.prototype.updateLabel = function () {\n        if (this.options.label) {\n            this.label.textContent = this._commandAction.label;\n        }\n    };\n    MenuItemActionItem.prototype.updateTooltip = function () {\n        var element = this.label;\n        var keybinding = this._keybindingService.lookupKeybinding(this._commandAction.id);\n        var keybindingLabel = keybinding && keybinding.getLabel();\n        element.title = keybindingLabel\n            ? nls_1.localize('titleAndKb', \"{0} ({1})\", this._commandAction.label, keybindingLabel)\n            : this._commandAction.label;\n    };\n    MenuItemActionItem.prototype.updateClass = function () {\n        if (this.options.icon) {\n            if (this._commandAction !== this._action) {\n                if (this._action.alt) {\n                    this._updateItemClass(this._action.alt.item);\n                }\n            }\n            else if (this._action.alt) {\n                this._updateItemClass(this._action.item);\n            }\n        }\n    };\n    MenuItemActionItem.prototype._updateItemClass = function (item) {\n        var _this = this;\n        lifecycle_1.dispose(this._itemClassDispose);\n        this._itemClassDispose = undefined;\n        if (item.iconLocation) {\n            var iconClass_1;\n            var iconPathMapKey = item.iconLocation.dark.toString();\n            if (MenuItemActionItem.ICON_PATH_TO_CSS_RULES.has(iconPathMapKey)) {\n                iconClass_1 = MenuItemActionItem.ICON_PATH_TO_CSS_RULES.get(iconPathMapKey);\n            }\n            else {\n                iconClass_1 = ids.nextId();\n                dom_1.createCSSRule(\".icon.\" + iconClass_1, \"background-image: url(\\\"\" + (item.iconLocation.light || item.iconLocation.dark).toString() + \"\\\")\");\n                dom_1.createCSSRule(\".vs-dark .icon.\" + iconClass_1 + \", .hc-black .icon.\" + iconClass_1, \"background-image: url(\\\"\" + item.iconLocation.dark.toString() + \"\\\")\");\n                MenuItemActionItem.ICON_PATH_TO_CSS_RULES.set(iconPathMapKey, iconClass_1);\n            }\n            dom_1.addClasses(this.label, 'icon', iconClass_1);\n            this._itemClassDispose = lifecycle_1.toDisposable(function () { return dom_1.removeClasses(_this.label, 'icon', iconClass_1); });\n        }\n    };\n    MenuItemActionItem.prototype.dispose = function () {\n        if (this._itemClassDispose) {\n            lifecycle_1.dispose(this._itemClassDispose);\n            this._itemClassDispose = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    MenuItemActionItem.ICON_PATH_TO_CSS_RULES = new Map();\n    MenuItemActionItem = tslib_1.__decorate([\n        tslib_1.__param(1, keybinding_1.IKeybindingService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, contextView_1.IContextMenuService)\n    ], MenuItemActionItem);\n    return MenuItemActionItem;\n}(actionbar_1.ActionItem));\nexports.MenuItemActionItem = MenuItemActionItem;\n// Need to subclass MenuItemActionItem in order to respect\n// the action context coming from any action bar, without breaking\n// existing users\nvar ContextAwareMenuItemActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextAwareMenuItemActionItem, _super);\n    function ContextAwareMenuItemActionItem() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ContextAwareMenuItemActionItem.prototype.onClick = function (event) {\n        var _this = this;\n        event.preventDefault();\n        event.stopPropagation();\n        this.actionRunner.run(this._commandAction, this._context)\n            .then(undefined, function (err) { return _this._notificationService.error(err); });\n    };\n    return ContextAwareMenuItemActionItem;\n}(MenuItemActionItem));\nexports.ContextAwareMenuItemActionItem = ContextAwareMenuItemActionItem;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/actions/browser/menuItemActionItem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/actions/browser/menuItemActionItem.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addClasses, createCSSRule, removeClasses } from 'vs/base/browser/dom';\nimport { domEvent } from 'vs/base/browser/event';\nimport { ActionItem, Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IAction } from 'vs/base/common/actions';\nimport { Emitter } from 'vs/base/common/event';\nimport { IdGenerator } from 'vs/base/common/idGenerator';\nimport { dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { localize } from 'vs/nls';\nimport { ICommandAction, IMenu, IMenuActionOptions, MenuItemAction, SubmenuItemAction } from 'vs/platform/actions/common/actions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\n// The alternative key on all platforms is alt. On windows we also support shift as an alternative key #44136\nclass AlternativeKeyEmitter extends Emitter<boolean> {\n\n\tprivate _subscriptions: IDisposable[] = [];\n\tprivate _isPressed: boolean;\n\tprivate static instance: AlternativeKeyEmitter;\n\tprivate _suppressAltKeyUp: boolean = false;\n\n\tprivate constructor(contextMenuService: IContextMenuService) {\n\t\tsuper();\n\n\t\tthis._subscriptions.push(domEvent(document.body, 'keydown')(e => {\n\t\t\tthis.isPressed = e.altKey || ((isWindows || isLinux) && e.shiftKey);\n\t\t}));\n\t\tthis._subscriptions.push(domEvent(document.body, 'keyup')(e => {\n\t\t\tif (this.isPressed) {\n\t\t\t\tif (this._suppressAltKeyUp) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._suppressAltKeyUp = false;\n\t\t\tthis.isPressed = false;\n\t\t}));\n\t\tthis._subscriptions.push(domEvent(document.body, 'mouseleave')(e => this.isPressed = false));\n\t\tthis._subscriptions.push(domEvent(document.body, 'blur')(e => this.isPressed = false));\n\t\t// Workaround since we do not get any events while a context menu is shown\n\t\tthis._subscriptions.push(contextMenuService.onDidContextMenu(() => this.isPressed = false));\n\t}\n\n\tget isPressed(): boolean {\n\t\treturn this._isPressed;\n\t}\n\n\tset isPressed(value: boolean) {\n\t\tthis._isPressed = value;\n\t\tthis.fire(this._isPressed);\n\t}\n\n\tsuppressAltKeyUp() {\n\t\t// Sometimes the native alt behavior needs to be suppresed since the alt was already used as an alternative key\n\t\t// Example: windows behavior to toggle tha top level menu #44396\n\t\tthis._suppressAltKeyUp = true;\n\t}\n\n\tstatic getInstance(contextMenuService: IContextMenuService) {\n\t\tif (!AlternativeKeyEmitter.instance) {\n\t\t\tAlternativeKeyEmitter.instance = new AlternativeKeyEmitter(contextMenuService);\n\t\t}\n\n\t\treturn AlternativeKeyEmitter.instance;\n\t}\n\n\tdispose() {\n\t\tsuper.dispose();\n\t\tthis._subscriptions = dispose(this._subscriptions);\n\t}\n}\n\nexport function fillInContextMenuActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | { primary: IAction[]; secondary: IAction[]; }, contextMenuService: IContextMenuService, isPrimaryGroup?: (group: string) => boolean): void {\n\tconst groups = menu.getActions(options);\n\tconst getAlternativeActions = AlternativeKeyEmitter.getInstance(contextMenuService).isPressed;\n\n\tfillInActions(groups, target, getAlternativeActions, isPrimaryGroup);\n}\n\nexport function fillInActionBarActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | { primary: IAction[]; secondary: IAction[]; }, isPrimaryGroup?: (group: string) => boolean): void {\n\tconst groups = menu.getActions(options);\n\t// Action bars handle alternative actions on their own so the alternative actions should be ignored\n\tfillInActions(groups, target, false, isPrimaryGroup);\n}\n\nfunction fillInActions(groups: [string, Array<MenuItemAction | SubmenuItemAction>][], target: IAction[] | { primary: IAction[]; secondary: IAction[]; }, useAlternativeActions: boolean, isPrimaryGroup: (group: string) => boolean = group => group === 'navigation'): void {\n\tfor (let tuple of groups) {\n\t\tlet [group, actions] = tuple;\n\t\tif (useAlternativeActions) {\n\t\t\tactions = actions.map(a => (a instanceof MenuItemAction) && !!a.alt ? a.alt : a);\n\t\t}\n\n\t\tif (isPrimaryGroup(group)) {\n\t\t\tconst to = Array.isArray<IAction>(target) ? target : target.primary;\n\n\t\t\tto.unshift(...actions);\n\t\t} else {\n\t\t\tconst to = Array.isArray<IAction>(target) ? target : target.secondary;\n\n\t\t\tif (to.length > 0) {\n\t\t\t\tto.push(new Separator());\n\t\t\t}\n\n\t\t\tto.push(...actions);\n\t\t}\n\t}\n}\n\n\nexport function createActionItem(action: IAction, keybindingService: IKeybindingService, notificationService: INotificationService, contextMenuService: IContextMenuService): ActionItem | undefined {\n\tif (action instanceof MenuItemAction) {\n\t\treturn new MenuItemActionItem(action, keybindingService, notificationService, contextMenuService);\n\t}\n\treturn undefined;\n}\n\nconst ids = new IdGenerator('menu-item-action-item-icon-');\n\nexport class MenuItemActionItem extends ActionItem {\n\n\tstatic readonly ICON_PATH_TO_CSS_RULES: Map<string /* path*/, string /* CSS rule */> = new Map<string, string>();\n\n\tprivate _wantsAltCommand: boolean;\n\tprivate _itemClassDispose?: IDisposable;\n\tprivate readonly _altKey: AlternativeKeyEmitter;\n\n\tconstructor(\n\t\treadonly _action: MenuItemAction,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@INotificationService protected _notificationService: INotificationService,\n\t\t@IContextMenuService _contextMenuService: IContextMenuService\n\t) {\n\t\tsuper(undefined, _action, { icon: !!(_action.class || _action.item.iconLocation), label: !_action.class && !_action.item.iconLocation });\n\t\tthis._altKey = AlternativeKeyEmitter.getInstance(_contextMenuService);\n\t}\n\n\tprotected get _commandAction(): IAction {\n\t\treturn this._wantsAltCommand && (<MenuItemAction>this._action).alt || this._action;\n\t}\n\n\tonClick(event: MouseEvent): void {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tif (this._altKey.isPressed) {\n\t\t\tthis._altKey.suppressAltKeyUp();\n\t\t}\n\n\t\tthis.actionRunner.run(this._commandAction)\n\t\t\t.then(undefined, err => this._notificationService.error(err));\n\t}\n\n\trender(container: HTMLElement): void {\n\t\tsuper.render(container);\n\n\t\tthis._updateItemClass(this._action.item);\n\n\t\tlet mouseOver = false;\n\n\t\tlet alternativeKeyDown = this._altKey.isPressed;\n\n\t\tconst updateAltState = () => {\n\t\t\tconst wantsAltCommand = mouseOver && alternativeKeyDown;\n\t\t\tif (wantsAltCommand !== this._wantsAltCommand) {\n\t\t\t\tthis._wantsAltCommand = wantsAltCommand;\n\t\t\t\tthis.updateLabel();\n\t\t\t\tthis.updateTooltip();\n\t\t\t\tthis.updateClass();\n\t\t\t}\n\t\t};\n\n\t\tif (this._action.alt) {\n\t\t\tthis._register(this._altKey.event(value => {\n\t\t\t\talternativeKeyDown = value;\n\t\t\t\tupdateAltState();\n\t\t\t}));\n\t\t}\n\n\t\tthis._register(domEvent(container, 'mouseleave')(_ => {\n\t\t\tmouseOver = false;\n\t\t\tupdateAltState();\n\t\t}));\n\n\t\tthis._register(domEvent(container, 'mouseenter')(e => {\n\t\t\tmouseOver = true;\n\t\t\tupdateAltState();\n\t\t}));\n\t}\n\n\tupdateLabel(): void {\n\t\tif (this.options.label) {\n\t\t\tthis.label.textContent = this._commandAction.label;\n\t\t}\n\t}\n\n\tupdateTooltip(): void {\n\t\tconst element = this.label;\n\t\tconst keybinding = this._keybindingService.lookupKeybinding(this._commandAction.id);\n\t\tconst keybindingLabel = keybinding && keybinding.getLabel();\n\n\t\telement.title = keybindingLabel\n\t\t\t? localize('titleAndKb', \"{0} ({1})\", this._commandAction.label, keybindingLabel)\n\t\t\t: this._commandAction.label;\n\t}\n\n\tupdateClass(): void {\n\t\tif (this.options.icon) {\n\t\t\tif (this._commandAction !== this._action) {\n\t\t\t\tif (this._action.alt) {\n\t\t\t\t\tthis._updateItemClass(this._action.alt.item);\n\t\t\t\t}\n\t\t\t} else if ((<MenuItemAction>this._action).alt) {\n\t\t\t\tthis._updateItemClass(this._action.item);\n\t\t\t}\n\t\t}\n\t}\n\n\t_updateItemClass(item: ICommandAction): void {\n\t\tdispose(this._itemClassDispose);\n\t\tthis._itemClassDispose = undefined;\n\n\t\tif (item.iconLocation) {\n\t\t\tlet iconClass: string;\n\n\t\t\tconst iconPathMapKey = item.iconLocation.dark.toString();\n\n\t\t\tif (MenuItemActionItem.ICON_PATH_TO_CSS_RULES.has(iconPathMapKey)) {\n\t\t\t\ticonClass = MenuItemActionItem.ICON_PATH_TO_CSS_RULES.get(iconPathMapKey)!;\n\t\t\t} else {\n\t\t\t\ticonClass = ids.nextId();\n\t\t\t\tcreateCSSRule(`.icon.${iconClass}`, `background-image: url(\"${(item.iconLocation.light || item.iconLocation.dark).toString()}\")`);\n\t\t\t\tcreateCSSRule(`.vs-dark .icon.${iconClass}, .hc-black .icon.${iconClass}`, `background-image: url(\"${item.iconLocation.dark.toString()}\")`);\n\t\t\t\tMenuItemActionItem.ICON_PATH_TO_CSS_RULES.set(iconPathMapKey, iconClass);\n\t\t\t}\n\n\t\t\taddClasses(this.label, 'icon', iconClass);\n\t\t\tthis._itemClassDispose = toDisposable(() => removeClasses(this.label, 'icon', iconClass));\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tif (this._itemClassDispose) {\n\t\t\tdispose(this._itemClassDispose);\n\t\t\tthis._itemClassDispose = undefined;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\n// Need to subclass MenuItemActionItem in order to respect\n// the action context coming from any action bar, without breaking\n// existing users\nexport class ContextAwareMenuItemActionItem extends MenuItemActionItem {\n\n\tonClick(event: MouseEvent): void {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tthis.actionRunner.run(this._commandAction, this._context)\n\t\t\t.then(undefined, err => this._notificationService.error(err));\n\t}\n}\n"]}]}