{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/linkComputer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/linkComputer.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar characterClassifier_1 = require(\"vs/editor/common/core/characterClassifier\");\nvar uint_1 = require(\"vs/editor/common/core/uint\");\nvar State;\n(function (State) {\n    State[State[\"Invalid\"] = 0] = \"Invalid\";\n    State[State[\"Start\"] = 1] = \"Start\";\n    State[State[\"H\"] = 2] = \"H\";\n    State[State[\"HT\"] = 3] = \"HT\";\n    State[State[\"HTT\"] = 4] = \"HTT\";\n    State[State[\"HTTP\"] = 5] = \"HTTP\";\n    State[State[\"F\"] = 6] = \"F\";\n    State[State[\"FI\"] = 7] = \"FI\";\n    State[State[\"FIL\"] = 8] = \"FIL\";\n    State[State[\"BeforeColon\"] = 9] = \"BeforeColon\";\n    State[State[\"AfterColon\"] = 10] = \"AfterColon\";\n    State[State[\"AlmostThere\"] = 11] = \"AlmostThere\";\n    State[State[\"End\"] = 12] = \"End\";\n    State[State[\"Accept\"] = 13] = \"Accept\";\n    State[State[\"LastKnownState\"] = 14] = \"LastKnownState\"; // marker, custom states may follow\n})(State = exports.State || (exports.State = {}));\nvar StateMachine = /** @class */ (function () {\n    function StateMachine(edges) {\n        var maxCharCode = 0;\n        var maxState = State.Invalid;\n        for (var i = 0, len = edges.length; i < len; i++) {\n            var _a = edges[i], from = _a[0], chCode = _a[1], to = _a[2];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        var states = new uint_1.Uint8Matrix(maxState, maxCharCode, State.Invalid);\n        for (var i = 0, len = edges.length; i < len; i++) {\n            var _b = edges[i], from = _b[0], chCode = _b[1], to = _b[2];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    StateMachine.prototype.nextState = function (currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return State.Invalid;\n        }\n        return this._states.get(currentState, chCode);\n    };\n    return StateMachine;\n}());\nexports.StateMachine = StateMachine;\n// State machine for http:// or https:// or file://\nvar _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [State.Start, charCode_1.CharCode.h, State.H],\n            [State.Start, charCode_1.CharCode.H, State.H],\n            [State.Start, charCode_1.CharCode.f, State.F],\n            [State.Start, charCode_1.CharCode.F, State.F],\n            [State.H, charCode_1.CharCode.t, State.HT],\n            [State.H, charCode_1.CharCode.T, State.HT],\n            [State.HT, charCode_1.CharCode.t, State.HTT],\n            [State.HT, charCode_1.CharCode.T, State.HTT],\n            [State.HTT, charCode_1.CharCode.p, State.HTTP],\n            [State.HTT, charCode_1.CharCode.P, State.HTTP],\n            [State.HTTP, charCode_1.CharCode.s, State.BeforeColon],\n            [State.HTTP, charCode_1.CharCode.S, State.BeforeColon],\n            [State.HTTP, charCode_1.CharCode.Colon, State.AfterColon],\n            [State.F, charCode_1.CharCode.i, State.FI],\n            [State.F, charCode_1.CharCode.I, State.FI],\n            [State.FI, charCode_1.CharCode.l, State.FIL],\n            [State.FI, charCode_1.CharCode.L, State.FIL],\n            [State.FIL, charCode_1.CharCode.e, State.BeforeColon],\n            [State.FIL, charCode_1.CharCode.E, State.BeforeColon],\n            [State.BeforeColon, charCode_1.CharCode.Colon, State.AfterColon],\n            [State.AfterColon, charCode_1.CharCode.Slash, State.AlmostThere],\n            [State.AlmostThere, charCode_1.CharCode.Slash, State.End],\n        ]);\n    }\n    return _stateMachine;\n}\nvar CharacterClass;\n(function (CharacterClass) {\n    CharacterClass[CharacterClass[\"None\"] = 0] = \"None\";\n    CharacterClass[CharacterClass[\"ForceTermination\"] = 1] = \"ForceTermination\";\n    CharacterClass[CharacterClass[\"CannotEndIn\"] = 2] = \"CannotEndIn\";\n})(CharacterClass || (CharacterClass = {}));\nvar _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new characterClassifier_1.CharacterClassifier(CharacterClass.None);\n        var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n        for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), CharacterClass.ForceTermination);\n        }\n        var CANNOT_END_WITH_CHARACTERS = '.,;';\n        for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), CharacterClass.CannotEndIn);\n        }\n    }\n    return _classifier;\n}\nvar LinkComputer = /** @class */ (function () {\n    function LinkComputer() {\n    }\n    LinkComputer._createLink = function (classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        var lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            var chCode = line.charCodeAt(lastIncludedCharIndex);\n            var chClass = classifier.get(chCode);\n            if (chClass !== CharacterClass.CannotEndIn) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === charCode_1.CharCode.OpenParen && lastCharCodeInLink === charCode_1.CharCode.CloseParen)\n                || (charCodeBeforeLink === charCode_1.CharCode.OpenSquareBracket && lastCharCodeInLink === charCode_1.CharCode.CloseSquareBracket)\n                || (charCodeBeforeLink === charCode_1.CharCode.OpenCurlyBrace && lastCharCodeInLink === charCode_1.CharCode.CloseCurlyBrace)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    };\n    LinkComputer.computeLinks = function (model, stateMachine) {\n        if (stateMachine === void 0) { stateMachine = getStateMachine(); }\n        var classifier = getClassifier();\n        var result = [];\n        for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            var line = model.getLineContent(i);\n            var len = line.length;\n            var j = 0;\n            var linkBeginIndex = 0;\n            var linkBeginChCode = 0;\n            var state = State.Start;\n            var hasOpenParens = false;\n            var hasOpenSquareBracket = false;\n            var hasOpenCurlyBracket = false;\n            while (j < len) {\n                var resetStateMachine = false;\n                var chCode = line.charCodeAt(j);\n                if (state === State.Accept) {\n                    var chClass = void 0;\n                    switch (chCode) {\n                        case charCode_1.CharCode.OpenParen:\n                            hasOpenParens = true;\n                            chClass = CharacterClass.None;\n                            break;\n                        case charCode_1.CharCode.CloseParen:\n                            chClass = (hasOpenParens ? CharacterClass.None : CharacterClass.ForceTermination);\n                            break;\n                        case charCode_1.CharCode.OpenSquareBracket:\n                            hasOpenSquareBracket = true;\n                            chClass = CharacterClass.None;\n                            break;\n                        case charCode_1.CharCode.CloseSquareBracket:\n                            chClass = (hasOpenSquareBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n                            break;\n                        case charCode_1.CharCode.OpenCurlyBrace:\n                            hasOpenCurlyBracket = true;\n                            chClass = CharacterClass.None;\n                            break;\n                        case charCode_1.CharCode.CloseCurlyBrace:\n                            chClass = (hasOpenCurlyBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n                            break;\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n                        case charCode_1.CharCode.SingleQuote:\n                            chClass = (linkBeginChCode === charCode_1.CharCode.DoubleQuote || linkBeginChCode === charCode_1.CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n                            break;\n                        case charCode_1.CharCode.DoubleQuote:\n                            chClass = (linkBeginChCode === charCode_1.CharCode.SingleQuote || linkBeginChCode === charCode_1.CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n                            break;\n                        case charCode_1.CharCode.BackTick:\n                            chClass = (linkBeginChCode === charCode_1.CharCode.SingleQuote || linkBeginChCode === charCode_1.CharCode.DoubleQuote) ? CharacterClass.None : CharacterClass.ForceTermination;\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === CharacterClass.ForceTermination) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === State.End) {\n                    var chClass = void 0;\n                    if (chCode === charCode_1.CharCode.OpenSquareBracket) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = CharacterClass.None;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === CharacterClass.ForceTermination) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = State.Accept;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === State.Invalid) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = State.Start;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === State.Accept) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    };\n    return LinkComputer;\n}());\nexports.LinkComputer = LinkComputer;\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nfunction computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\nexports.computeLinks = computeLinks;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/linkComputer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/linkComputer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { CharacterClassifier } from 'vs/editor/common/core/characterClassifier';\nimport { Uint8Matrix } from 'vs/editor/common/core/uint';\nimport { ILink } from 'vs/editor/common/modes';\n\nexport interface ILinkComputerTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport const enum State {\n\tInvalid = 0,\n\tStart = 1,\n\tH = 2,\n\tHT = 3,\n\tHTT = 4,\n\tHTTP = 5,\n\tF = 6,\n\tFI = 7,\n\tFIL = 8,\n\tBeforeColon = 9,\n\tAfterColon = 10,\n\tAlmostThere = 11,\n\tEnd = 12,\n\tAccept = 13,\n\tLastKnownState = 14 // marker, custom states may follow\n}\n\nexport type Edge = [State, number, State];\n\nexport class StateMachine {\n\n\tprivate readonly _states: Uint8Matrix;\n\tprivate readonly _maxCharCode: number;\n\n\tconstructor(edges: Edge[]) {\n\t\tlet maxCharCode = 0;\n\t\tlet maxState = State.Invalid;\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tlet [from, chCode, to] = edges[i];\n\t\t\tif (chCode > maxCharCode) {\n\t\t\t\tmaxCharCode = chCode;\n\t\t\t}\n\t\t\tif (from > maxState) {\n\t\t\t\tmaxState = from;\n\t\t\t}\n\t\t\tif (to > maxState) {\n\t\t\t\tmaxState = to;\n\t\t\t}\n\t\t}\n\n\t\tmaxCharCode++;\n\t\tmaxState++;\n\n\t\tlet states = new Uint8Matrix(maxState, maxCharCode, State.Invalid);\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tlet [from, chCode, to] = edges[i];\n\t\t\tstates.set(from, chCode, to);\n\t\t}\n\n\t\tthis._states = states;\n\t\tthis._maxCharCode = maxCharCode;\n\t}\n\n\tpublic nextState(currentState: State, chCode: number): State {\n\t\tif (chCode < 0 || chCode >= this._maxCharCode) {\n\t\t\treturn State.Invalid;\n\t\t}\n\t\treturn this._states.get(currentState, chCode);\n\t}\n}\n\n// State machine for http:// or https:// or file://\nlet _stateMachine: StateMachine | null = null;\nfunction getStateMachine(): StateMachine {\n\tif (_stateMachine === null) {\n\t\t_stateMachine = new StateMachine([\n\t\t\t[State.Start, CharCode.h, State.H],\n\t\t\t[State.Start, CharCode.H, State.H],\n\t\t\t[State.Start, CharCode.f, State.F],\n\t\t\t[State.Start, CharCode.F, State.F],\n\n\t\t\t[State.H, CharCode.t, State.HT],\n\t\t\t[State.H, CharCode.T, State.HT],\n\n\t\t\t[State.HT, CharCode.t, State.HTT],\n\t\t\t[State.HT, CharCode.T, State.HTT],\n\n\t\t\t[State.HTT, CharCode.p, State.HTTP],\n\t\t\t[State.HTT, CharCode.P, State.HTTP],\n\n\t\t\t[State.HTTP, CharCode.s, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.S, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.F, CharCode.i, State.FI],\n\t\t\t[State.F, CharCode.I, State.FI],\n\n\t\t\t[State.FI, CharCode.l, State.FIL],\n\t\t\t[State.FI, CharCode.L, State.FIL],\n\n\t\t\t[State.FIL, CharCode.e, State.BeforeColon],\n\t\t\t[State.FIL, CharCode.E, State.BeforeColon],\n\n\t\t\t[State.BeforeColon, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.AfterColon, CharCode.Slash, State.AlmostThere],\n\n\t\t\t[State.AlmostThere, CharCode.Slash, State.End],\n\t\t]);\n\t}\n\treturn _stateMachine;\n}\n\n\nconst enum CharacterClass {\n\tNone = 0,\n\tForceTermination = 1,\n\tCannotEndIn = 2\n}\n\nlet _classifier: CharacterClassifier<CharacterClass> | null = null;\nfunction getClassifier(): CharacterClassifier<CharacterClass> {\n\tif (_classifier === null) {\n\t\t_classifier = new CharacterClassifier<CharacterClass>(CharacterClass.None);\n\n\t\tconst FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n\t\tfor (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), CharacterClass.ForceTermination);\n\t\t}\n\n\t\tconst CANNOT_END_WITH_CHARACTERS = '.,;';\n\t\tfor (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), CharacterClass.CannotEndIn);\n\t\t}\n\t}\n\treturn _classifier;\n}\n\nexport class LinkComputer {\n\n\tprivate static _createLink(classifier: CharacterClassifier<CharacterClass>, line: string, lineNumber: number, linkBeginIndex: number, linkEndIndex: number): ILink {\n\t\t// Do not allow to end link in certain characters...\n\t\tlet lastIncludedCharIndex = linkEndIndex - 1;\n\t\tdo {\n\t\t\tconst chCode = line.charCodeAt(lastIncludedCharIndex);\n\t\t\tconst chClass = classifier.get(chCode);\n\t\t\tif (chClass !== CharacterClass.CannotEndIn) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastIncludedCharIndex--;\n\t\t} while (lastIncludedCharIndex > linkBeginIndex);\n\n\t\t// Handle links enclosed in parens, square brackets and curlys.\n\t\tif (linkBeginIndex > 0) {\n\t\t\tconst charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n\t\t\tconst lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n\t\t\tif (\n\t\t\t\t(charCodeBeforeLink === CharCode.OpenParen && lastCharCodeInLink === CharCode.CloseParen)\n\t\t\t\t|| (charCodeBeforeLink === CharCode.OpenSquareBracket && lastCharCodeInLink === CharCode.CloseSquareBracket)\n\t\t\t\t|| (charCodeBeforeLink === CharCode.OpenCurlyBrace && lastCharCodeInLink === CharCode.CloseCurlyBrace)\n\t\t\t) {\n\t\t\t\t// Do not end in ) if ( is before the link start\n\t\t\t\t// Do not end in ] if [ is before the link start\n\t\t\t\t// Do not end in } if { is before the link start\n\t\t\t\tlastIncludedCharIndex--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn: linkBeginIndex + 1,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tendColumn: lastIncludedCharIndex + 2\n\t\t\t},\n\t\t\turl: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n\t\t};\n\t}\n\n\tpublic static computeLinks(model: ILinkComputerTarget, stateMachine: StateMachine = getStateMachine()): ILink[] {\n\t\tconst classifier = getClassifier();\n\n\t\tlet result: ILink[] = [];\n\t\tfor (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n\t\t\tconst line = model.getLineContent(i);\n\t\t\tconst len = line.length;\n\n\t\t\tlet j = 0;\n\t\t\tlet linkBeginIndex = 0;\n\t\t\tlet linkBeginChCode = 0;\n\t\t\tlet state = State.Start;\n\t\t\tlet hasOpenParens = false;\n\t\t\tlet hasOpenSquareBracket = false;\n\t\t\tlet hasOpenCurlyBracket = false;\n\n\t\t\twhile (j < len) {\n\n\t\t\t\tlet resetStateMachine = false;\n\t\t\t\tconst chCode = line.charCodeAt(j);\n\n\t\t\t\tif (state === State.Accept) {\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tswitch (chCode) {\n\t\t\t\t\t\tcase CharCode.OpenParen:\n\t\t\t\t\t\t\thasOpenParens = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseParen:\n\t\t\t\t\t\t\tchClass = (hasOpenParens ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenSquareBracket:\n\t\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseSquareBracket:\n\t\t\t\t\t\t\tchClass = (hasOpenSquareBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenCurlyBrace:\n\t\t\t\t\t\t\thasOpenCurlyBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseCurlyBrace:\n\t\t\t\t\t\t\tchClass = (hasOpenCurlyBracket ? CharacterClass.None : CharacterClass.ForceTermination);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t/* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n\t\t\t\t\t\tcase CharCode.SingleQuote:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.DoubleQuote || linkBeginChCode === CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.DoubleQuote:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.SingleQuote || linkBeginChCode === CharCode.BackTick) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.BackTick:\n\t\t\t\t\t\t\tchClass = (linkBeginChCode === CharCode.SingleQuote || linkBeginChCode === CharCode.DoubleQuote) ? CharacterClass.None : CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresult.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (state === State.End) {\n\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tif (chCode === CharCode.OpenSquareBracket) {\n\t\t\t\t\t\t// Allow for the authority part to contain ipv6 addresses which contain [ and ]\n\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate = State.Accept;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate = stateMachine.nextState(state, chCode);\n\t\t\t\t\tif (state === State.Invalid) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resetStateMachine) {\n\t\t\t\t\tstate = State.Start;\n\t\t\t\t\thasOpenParens = false;\n\t\t\t\t\thasOpenSquareBracket = false;\n\t\t\t\t\thasOpenCurlyBracket = false;\n\n\t\t\t\t\t// Record where the link started\n\t\t\t\t\tlinkBeginIndex = j + 1;\n\t\t\t\t\tlinkBeginChCode = chCode;\n\t\t\t\t}\n\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\tif (state === State.Accept) {\n\t\t\t\tresult.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model: ILinkComputerTarget | null): ILink[] {\n\tif (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n\t\t// Unknown caller!\n\t\treturn [];\n\t}\n\treturn LinkComputer.computeLinks(model);\n}\n"]}]}