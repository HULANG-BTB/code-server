{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfiguration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfiguration.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.ITextResourceConfigurationService = instantiation_1.createDecorator('textResourceConfigurationService');\nexports.ITextResourcePropertiesService = instantiation_1.createDecorator('textResourcePropertiesService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfiguration.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfiguration.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAMhG,gFAAiF;AAEpE,QAAA,iCAAiC,GAAG,+BAAe,CAAoC,kCAAkC,CAAC,CAAC;AAyB3H,QAAA,8BAA8B,GAAG,+BAAe,CAAiC,+BAA+B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const ITextResourceConfigurationService = createDecorator<ITextResourceConfigurationService>('textResourceConfigurationService');\n\nexport interface ITextResourceConfigurationService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Event that fires when the configuration changes.\n\t */\n\tonDidChangeConfiguration: Event<IConfigurationChangeEvent>;\n\n\t/**\n\t * Fetches the value of the section for the given resource by applying language overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param resource - Resource for which the configuration has to be fetched.\n\t * @param postion - Position in the resource for which configuration has to be fetched.\n\t * @param section - Section of the configuraion.\n\t *\n\t */\n\tgetValue<T>(resource: URI | undefined, section?: string): T;\n\tgetValue<T>(resource: URI | undefined, position?: IPosition, section?: string): T;\n\n}\n\nexport const ITextResourcePropertiesService = createDecorator<ITextResourcePropertiesService>('textResourcePropertiesService');\n\nexport interface ITextResourcePropertiesService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Returns the End of Line characters for the given resource\n\t */\n\tgetEOL(resource: URI | null | undefined, language?: string): string;\n}"]}]}