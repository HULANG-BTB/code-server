{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/model.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Vertical Lane in the overview ruler of the editor.\n     */\n    var OverviewRulerLane;\n    (function (OverviewRulerLane) {\n        OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n        OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n        OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n        OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n    })(OverviewRulerLane = exports.OverviewRulerLane || (exports.OverviewRulerLane = {}));\n    /**\n     * End of line character preference.\n     */\n    var EndOfLinePreference;\n    (function (EndOfLinePreference) {\n        /**\n         * Use the end of line character identified in the text buffer.\n         */\n        EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\n    })(EndOfLinePreference = exports.EndOfLinePreference || (exports.EndOfLinePreference = {}));\n    /**\n     * The default end of line to use when instantiating models.\n     */\n    var DefaultEndOfLine;\n    (function (DefaultEndOfLine) {\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\n    })(DefaultEndOfLine = exports.DefaultEndOfLine || (exports.DefaultEndOfLine = {}));\n    /**\n     * End of line character preference.\n     */\n    var EndOfLineSequence;\n    (function (EndOfLineSequence) {\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\n    })(EndOfLineSequence = exports.EndOfLineSequence || (exports.EndOfLineSequence = {}));\n    class TextModelResolvedOptions {\n        /**\n         * @internal\n         */\n        constructor(src) {\n            this.tabSize = src.tabSize | 0;\n            this.indentSize = src.tabSize | 0;\n            this.insertSpaces = Boolean(src.insertSpaces);\n            this.defaultEOL = src.defaultEOL | 0;\n            this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n        }\n        /**\n         * @internal\n         */\n        equals(other) {\n            return (this.tabSize === other.tabSize\n                && this.indentSize === other.indentSize\n                && this.insertSpaces === other.insertSpaces\n                && this.defaultEOL === other.defaultEOL\n                && this.trimAutoWhitespace === other.trimAutoWhitespace);\n        }\n        /**\n         * @internal\n         */\n        createChangeEvent(newOpts) {\n            return {\n                tabSize: this.tabSize !== newOpts.tabSize,\n                indentSize: this.indentSize !== newOpts.indentSize,\n                insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n                trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n            };\n        }\n    }\n    exports.TextModelResolvedOptions = TextModelResolvedOptions;\n    class FindMatch {\n        /**\n         * @internal\n         */\n        constructor(range, matches) {\n            this.range = range;\n            this.matches = matches;\n        }\n    }\n    exports.FindMatch = FindMatch;\n    /**\n     * Describes the behavior of decorations when typing/editing near their edges.\n     * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n     */\n    var TrackedRangeStickiness;\n    (function (TrackedRangeStickiness) {\n        TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\n        TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\n        TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\n        TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\n    })(TrackedRangeStickiness = exports.TrackedRangeStickiness || (exports.TrackedRangeStickiness = {}));\n    /**\n     * @internal\n     */\n    class ApplyEditsResult {\n        constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n            this.reverseEdits = reverseEdits;\n            this.changes = changes;\n            this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n        }\n    }\n    exports.ApplyEditsResult = ApplyEditsResult;\n});\n",null]}