{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/message/messageController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/message/messageController.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/async\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/base/browser/ui/aria/aria\", \"vs/editor/common/core/range\", \"vs/editor/common/editorCommon\", \"vs/editor/browser/editorExtensions\", \"vs/editor/browser/editorBrowser\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/css!./messageController\"], function (require, exports, nls, async_1, keyCodes_1, lifecycle_1, aria_1, range_1, editorCommon, editorExtensions_1, editorBrowser_1, contextkey_1, themeService_1, colorRegistry_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let MessageController = class MessageController extends lifecycle_1.Disposable {\n        constructor(editor, contextKeyService) {\n            super();\n            this._messageListeners = [];\n            this._editor = editor;\n            this._visible = MessageController.MESSAGE_VISIBLE.bindTo(contextKeyService);\n            this._register(this._editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n        }\n        static get(editor) {\n            return editor.getContribution(MessageController._id);\n        }\n        getId() {\n            return MessageController._id;\n        }\n        dispose() {\n            super.dispose();\n            this._visible.reset();\n        }\n        isVisible() {\n            return this._visible.get();\n        }\n        showMessage(message, position) {\n            aria_1.alert(message);\n            this._visible.set(true);\n            lifecycle_1.dispose(this._messageWidget);\n            this._messageListeners = lifecycle_1.dispose(this._messageListeners);\n            this._messageWidget = new MessageWidget(this._editor, position, message);\n            // close on blur, cursor, model change, dispose\n            this._messageListeners.push(this._editor.onDidBlurEditorText(() => this.closeMessage()));\n            this._messageListeners.push(this._editor.onDidChangeCursorPosition(() => this.closeMessage()));\n            this._messageListeners.push(this._editor.onDidDispose(() => this.closeMessage()));\n            this._messageListeners.push(this._editor.onDidChangeModel(() => this.closeMessage()));\n            // close after 3s\n            this._messageListeners.push(new async_1.TimeoutTimer(() => this.closeMessage(), 3000));\n            // close on mouse move\n            let bounds;\n            this._messageListeners.push(this._editor.onMouseMove(e => {\n                // outside the text area\n                if (!e.target.position) {\n                    return;\n                }\n                if (!bounds) {\n                    // define bounding box around position and first mouse occurance\n                    bounds = new range_1.Range(position.lineNumber - 3, 1, e.target.position.lineNumber + 3, 1);\n                }\n                else if (!bounds.containsPosition(e.target.position)) {\n                    // check if position is still in bounds\n                    this.closeMessage();\n                }\n            }));\n        }\n        closeMessage() {\n            this._visible.reset();\n            this._messageListeners = lifecycle_1.dispose(this._messageListeners);\n            this._messageListeners.push(MessageWidget.fadeOut(this._messageWidget));\n        }\n        _onDidAttemptReadOnlyEdit() {\n            if (this._editor.hasModel()) {\n                this.showMessage(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"), this._editor.getPosition());\n            }\n        }\n    };\n    MessageController._id = 'editor.contrib.messageController';\n    MessageController.MESSAGE_VISIBLE = new contextkey_1.RawContextKey('messageVisible', false);\n    MessageController = __decorate([\n        __param(1, contextkey_1.IContextKeyService)\n    ], MessageController);\n    exports.MessageController = MessageController;\n    const MessageCommand = editorExtensions_1.EditorCommand.bindToContribution(MessageController.get);\n    editorExtensions_1.registerEditorCommand(new MessageCommand({\n        id: 'leaveEditorMessage',\n        precondition: MessageController.MESSAGE_VISIBLE,\n        handler: c => c.closeMessage(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n            primary: keyCodes_1.KeyCode.Escape\n        }\n    }));\n    class MessageWidget {\n        constructor(editor, { lineNumber, column }, text) {\n            // Editor.IContentWidget.allowEditorOverflow\n            this.allowEditorOverflow = true;\n            this.suppressMouseDown = false;\n            this._editor = editor;\n            this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber, editorCommon.ScrollType.Smooth);\n            this._position = { lineNumber, column: column - 1 };\n            this._domNode = document.createElement('div');\n            this._domNode.classList.add('monaco-editor-overlaymessage');\n            const message = document.createElement('div');\n            message.classList.add('message');\n            message.textContent = text;\n            this._domNode.appendChild(message);\n            const anchor = document.createElement('div');\n            anchor.classList.add('anchor');\n            this._domNode.appendChild(anchor);\n            this._editor.addContentWidget(this);\n            this._domNode.classList.add('fadeIn');\n        }\n        static fadeOut(messageWidget) {\n            let handle;\n            const dispose = () => {\n                messageWidget.dispose();\n                clearTimeout(handle);\n                messageWidget.getDomNode().removeEventListener('animationend', dispose);\n            };\n            handle = setTimeout(dispose, 110);\n            messageWidget.getDomNode().addEventListener('animationend', dispose);\n            messageWidget.getDomNode().classList.add('fadeOut');\n            return { dispose };\n        }\n        dispose() {\n            this._editor.removeContentWidget(this);\n        }\n        getId() {\n            return 'messageoverlay';\n        }\n        getDomNode() {\n            return this._domNode;\n        }\n        getPosition() {\n            return { position: this._position, preference: [editorBrowser_1.ContentWidgetPositionPreference.ABOVE] };\n        }\n    }\n    editorExtensions_1.registerEditorContribution(MessageController);\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const border = theme.getColor(colorRegistry_1.inputValidationInfoBorder);\n        if (border) {\n            let borderWidth = theme.type === themeService_1.HIGH_CONTRAST ? 2 : 1;\n            collector.addRule(`.monaco-editor .monaco-editor-overlaymessage .anchor { border-top-color: ${border}; }`);\n            collector.addRule(`.monaco-editor .monaco-editor-overlaymessage .message { border: ${borderWidth}px solid ${border}; }`);\n        }\n        const background = theme.getColor(colorRegistry_1.inputValidationInfoBackground);\n        if (background) {\n            collector.addRule(`.monaco-editor .monaco-editor-overlaymessage .message { background-color: ${background}; }`);\n        }\n        const foreground = theme.getColor(colorRegistry_1.inputValidationInfoForeground);\n        if (foreground) {\n            collector.addRule(`.monaco-editor .monaco-editor-overlaymessage .message { color: ${foreground}; }`);\n        }\n    });\n});\n",null]}