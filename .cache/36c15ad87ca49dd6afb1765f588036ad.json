{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar modes = require(\"vs/editor/common/modes\");\nfunction createScopedLineTokens(context, offset) {\n    var tokenCount = context.getCount();\n    var tokenIndex = context.findTokenIndexAtOffset(offset);\n    var desiredLanguageId = context.getLanguageId(tokenIndex);\n    var lastTokenIndex = tokenIndex;\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n        lastTokenIndex++;\n    }\n    var firstTokenIndex = tokenIndex;\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n        firstTokenIndex--;\n    }\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexports.createScopedLineTokens = createScopedLineTokens;\nvar ScopedLineTokens = /** @class */ (function () {\n    function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n        this._actual = actual;\n        this.languageId = languageId;\n        this._firstTokenIndex = firstTokenIndex;\n        this._lastTokenIndex = lastTokenIndex;\n        this.firstCharOffset = firstCharOffset;\n        this._lastCharOffset = lastCharOffset;\n    }\n    ScopedLineTokens.prototype.getLineContent = function () {\n        var actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    };\n    ScopedLineTokens.prototype.getTokenCount = function () {\n        return this._lastTokenIndex - this._firstTokenIndex;\n    };\n    ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    };\n    ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    };\n    return ScopedLineTokens;\n}());\nexports.ScopedLineTokens = ScopedLineTokens;\nvar IgnoreBracketsInTokens;\n(function (IgnoreBracketsInTokens) {\n    IgnoreBracketsInTokens[IgnoreBracketsInTokens[\"value\"] = modes.StandardTokenType.Comment | modes.StandardTokenType.String | modes.StandardTokenType.RegEx] = \"value\";\n})(IgnoreBracketsInTokens || (IgnoreBracketsInTokens = {}));\nfunction ignoreBracketsInToken(standardTokenType) {\n    return (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n}\nexports.ignoreBracketsInToken = ignoreBracketsInToken;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,8CAAgD;AAEhD,SAAgB,sBAAsB,CAAC,OAAmB,EAAE,MAAc;IACzE,IAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IACpC,IAAI,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IACxD,IAAI,iBAAiB,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAE1D,IAAI,cAAc,GAAG,UAAU,CAAC;IAChC,OAAO,cAAc,GAAG,CAAC,GAAG,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,cAAc,GAAG,CAAC,CAAC,KAAK,iBAAiB,EAAE;QAC1G,cAAc,EAAE,CAAC;KACjB;IAED,IAAI,eAAe,GAAG,UAAU,CAAC;IACjC,OAAO,eAAe,GAAG,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,eAAe,GAAG,CAAC,CAAC,KAAK,iBAAiB,EAAE;QAC/F,eAAe,EAAE,CAAC;KAClB;IAED,OAAO,IAAI,gBAAgB,CAC1B,OAAO,EACP,iBAAiB,EACjB,eAAe,EACf,cAAc,GAAG,CAAC,EAClB,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EACvC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CACpC,CAAC;AACH,CAAC;AAvBD,wDAuBC;AAED;IAUC,0BACC,MAAkB,EAClB,UAA4B,EAC5B,eAAuB,EACvB,cAAsB,EACtB,eAAuB,EACvB,cAAsB;QAEtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,yCAAc,GAArB;QACC,IAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QACxD,OAAO,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAChF,CAAC;IAEM,wCAAa,GAApB;QACC,OAAO,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACrD,CAAC;IAEM,iDAAsB,GAA7B,UAA8B,MAAc;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACnG,CAAC;IAEM,+CAAoB,GAA3B,UAA4B,UAAkB;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9E,CAAC;IACF,uBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,4CAAgB;AA4C7B,IAAW,sBAEV;AAFD,WAAW,sBAAsB;IAChC,yDAAQ,KAAK,CAAC,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC,iBAAiB,CAAC,MAAM,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,WAAA,CAAA;AACzG,CAAC,EAFU,sBAAsB,KAAtB,sBAAsB,QAEhC;AAED,SAAgB,qBAAqB,CAAC,iBAA0C;IAC/E,OAAO,CAAC,iBAAiB,GAAG,sBAAsB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACjE,CAAC;AAFD,sDAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport * as modes from 'vs/editor/common/modes';\n\nexport function createScopedLineTokens(context: LineTokens, offset: number): ScopedLineTokens {\n\tlet tokenCount = context.getCount();\n\tlet tokenIndex = context.findTokenIndexAtOffset(offset);\n\tlet desiredLanguageId = context.getLanguageId(tokenIndex);\n\n\tlet lastTokenIndex = tokenIndex;\n\twhile (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n\t\tlastTokenIndex++;\n\t}\n\n\tlet firstTokenIndex = tokenIndex;\n\twhile (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n\t\tfirstTokenIndex--;\n\t}\n\n\treturn new ScopedLineTokens(\n\t\tcontext,\n\t\tdesiredLanguageId,\n\t\tfirstTokenIndex,\n\t\tlastTokenIndex + 1,\n\t\tcontext.getStartOffset(firstTokenIndex),\n\t\tcontext.getEndOffset(lastTokenIndex)\n\t);\n}\n\nexport class ScopedLineTokens {\n\t_scopedLineTokensBrand: void;\n\n\tpublic readonly languageId: modes.LanguageId;\n\tprivate readonly _actual: LineTokens;\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _lastTokenIndex: number;\n\tpublic readonly firstCharOffset: number;\n\tprivate readonly _lastCharOffset: number;\n\n\tconstructor(\n\t\tactual: LineTokens,\n\t\tlanguageId: modes.LanguageId,\n\t\tfirstTokenIndex: number,\n\t\tlastTokenIndex: number,\n\t\tfirstCharOffset: number,\n\t\tlastCharOffset: number\n\t) {\n\t\tthis._actual = actual;\n\t\tthis.languageId = languageId;\n\t\tthis._firstTokenIndex = firstTokenIndex;\n\t\tthis._lastTokenIndex = lastTokenIndex;\n\t\tthis.firstCharOffset = firstCharOffset;\n\t\tthis._lastCharOffset = lastCharOffset;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lastTokenIndex - this._firstTokenIndex;\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): modes.StandardTokenType {\n\t\treturn this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n\t}\n}\n\nconst enum IgnoreBracketsInTokens {\n\tvalue = modes.StandardTokenType.Comment | modes.StandardTokenType.String | modes.StandardTokenType.RegEx\n}\n\nexport function ignoreBracketsInToken(standardTokenType: modes.StandardTokenType): boolean {\n\treturn (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n}\n"]}]}