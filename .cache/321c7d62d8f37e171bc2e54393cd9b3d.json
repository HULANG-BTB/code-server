{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageFeatureRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageFeatureRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/editor/common/modes/languageSelector\", \"vs/editor/common/services/modelService\"], function (require, exports, event_1, lifecycle_1, languageSelector_1, modelService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function isExclusive(selector) {\n        if (typeof selector === 'string') {\n            return false;\n        }\n        else if (Array.isArray(selector)) {\n            return selector.every(isExclusive);\n        }\n        else {\n            return !!selector.exclusive;\n        }\n    }\n    class LanguageFeatureRegistry {\n        constructor() {\n            this._clock = 0;\n            this._entries = [];\n            this._onDidChange = new event_1.Emitter();\n        }\n        get onDidChange() {\n            return this._onDidChange.event;\n        }\n        register(selector, provider) {\n            let entry = {\n                selector,\n                provider,\n                _score: -1,\n                _time: this._clock++\n            };\n            this._entries.push(entry);\n            this._lastCandidate = undefined;\n            this._onDidChange.fire(this._entries.length);\n            return lifecycle_1.toDisposable(() => {\n                if (entry) {\n                    let idx = this._entries.indexOf(entry);\n                    if (idx >= 0) {\n                        this._entries.splice(idx, 1);\n                        this._lastCandidate = undefined;\n                        this._onDidChange.fire(this._entries.length);\n                        entry = undefined;\n                    }\n                }\n            });\n        }\n        has(model) {\n            return this.all(model).length > 0;\n        }\n        all(model) {\n            if (!model) {\n                return [];\n            }\n            this._updateScores(model);\n            const result = [];\n            // from registry\n            for (let entry of this._entries) {\n                if (entry._score > 0) {\n                    result.push(entry.provider);\n                }\n            }\n            return result;\n        }\n        ordered(model) {\n            const result = [];\n            this._orderedForEach(model, entry => result.push(entry.provider));\n            return result;\n        }\n        orderedGroups(model) {\n            const result = [];\n            let lastBucket;\n            let lastBucketScore;\n            this._orderedForEach(model, entry => {\n                if (lastBucket && lastBucketScore === entry._score) {\n                    lastBucket.push(entry.provider);\n                }\n                else {\n                    lastBucketScore = entry._score;\n                    lastBucket = [entry.provider];\n                    result.push(lastBucket);\n                }\n            });\n            return result;\n        }\n        _orderedForEach(model, callback) {\n            if (!model) {\n                return;\n            }\n            this._updateScores(model);\n            for (const entry of this._entries) {\n                if (entry._score > 0) {\n                    callback(entry);\n                }\n            }\n        }\n        _updateScores(model) {\n            let candidate = {\n                uri: model.uri.toString(),\n                language: model.getLanguageIdentifier().language\n            };\n            if (this._lastCandidate\n                && this._lastCandidate.language === candidate.language\n                && this._lastCandidate.uri === candidate.uri) {\n                // nothing has changed\n                return;\n            }\n            this._lastCandidate = candidate;\n            for (let entry of this._entries) {\n                entry._score = languageSelector_1.score(entry.selector, model.uri, model.getLanguageIdentifier().language, modelService_1.shouldSynchronizeModel(model));\n                if (isExclusive(entry.selector) && entry._score > 0) {\n                    // support for one exclusive selector that overwrites\n                    // any other selector\n                    for (let entry of this._entries) {\n                        entry._score = 0;\n                    }\n                    entry._score = 1000;\n                    break;\n                }\n            }\n            // needs sorting\n            this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n        }\n        static _compareByScoreAndTime(a, b) {\n            if (a._score < b._score) {\n                return 1;\n            }\n            else if (a._score > b._score) {\n                return -1;\n            }\n            else if (a._time < b._time) {\n                return 1;\n            }\n            else if (a._time > b._time) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    exports.LanguageFeatureRegistry = LanguageFeatureRegistry;\n});\n",null]}