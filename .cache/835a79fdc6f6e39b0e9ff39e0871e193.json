{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar characterClassifier_1 = require(\"vs/editor/common/core/characterClassifier\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar editorWorkerService_1 = require(\"vs/editor/common/services/editorWorkerService\");\nvar format_1 = require(\"vs/editor/contrib/format/format\");\nvar formattingEdit_1 = require(\"vs/editor/contrib/format/formattingEdit\");\nvar nls = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar FormatOnType = /** @class */ (function () {\n    function FormatOnType(editor, _workerService) {\n        var _this = this;\n        this._workerService = _workerService;\n        this._callOnDispose = [];\n        this._callOnModel = [];\n        this._editor = editor;\n        this._callOnDispose.push(editor.onDidChangeConfiguration(function () { return _this._update(); }));\n        this._callOnDispose.push(editor.onDidChangeModel(function () { return _this._update(); }));\n        this._callOnDispose.push(editor.onDidChangeModelLanguage(function () { return _this._update(); }));\n        this._callOnDispose.push(modes_1.OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n    }\n    FormatOnType.prototype.getId = function () {\n        return FormatOnType.ID;\n    };\n    FormatOnType.prototype.dispose = function () {\n        this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n        this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n    };\n    FormatOnType.prototype._update = function () {\n        var _this = this;\n        // clean up\n        this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n        // we are disabled\n        if (!this._editor.getConfiguration().contribInfo.formatOnType) {\n            return;\n        }\n        // no model\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        var model = this._editor.getModel();\n        // no support\n        var support = modes_1.OnTypeFormattingEditProviderRegistry.ordered(model)[0];\n        if (!support || !support.autoFormatTriggerCharacters) {\n            return;\n        }\n        // register typing listeners that will trigger the format\n        var triggerChars = new characterClassifier_1.CharacterSet();\n        for (var _i = 0, _a = support.autoFormatTriggerCharacters; _i < _a.length; _i++) {\n            var ch = _a[_i];\n            triggerChars.add(ch.charCodeAt(0));\n        }\n        this._callOnModel.push(this._editor.onDidType(function (text) {\n            var lastCharCode = text.charCodeAt(text.length - 1);\n            if (triggerChars.has(lastCharCode)) {\n                _this._trigger(String.fromCharCode(lastCharCode));\n            }\n        }));\n    };\n    FormatOnType.prototype._trigger = function (ch) {\n        var _this = this;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (this._editor.getSelections().length > 1) {\n            return;\n        }\n        var model = this._editor.getModel();\n        var position = this._editor.getPosition();\n        var canceled = false;\n        // install a listener that checks if edits happens before the\n        // position on which we format right now. If so, we won't\n        // apply the format edits\n        var unbind = this._editor.onDidChangeModelContent(function (e) {\n            if (e.isFlush) {\n                // a model.setValue() was called\n                // cancel only once\n                canceled = true;\n                unbind.dispose();\n                return;\n            }\n            for (var i = 0, len = e.changes.length; i < len; i++) {\n                var change = e.changes[i];\n                if (change.range.endLineNumber <= position.lineNumber) {\n                    // cancel only once\n                    canceled = true;\n                    unbind.dispose();\n                    return;\n                }\n            }\n        });\n        format_1.getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(function (edits) {\n            unbind.dispose();\n            if (canceled) {\n                return;\n            }\n            if (arrays_1.isNonEmptyArray(edits)) {\n                formattingEdit_1.FormattingEdit.execute(_this._editor, edits);\n                format_1.alertFormattingEdits(edits);\n            }\n        }, function (err) {\n            unbind.dispose();\n            throw err;\n        });\n    };\n    FormatOnType.ID = 'editor.contrib.autoFormat';\n    FormatOnType = tslib_1.__decorate([\n        tslib_1.__param(1, editorWorkerService_1.IEditorWorkerService)\n    ], FormatOnType);\n    return FormatOnType;\n}());\nvar FormatOnPaste = /** @class */ (function () {\n    function FormatOnPaste(editor, _instantiationService) {\n        var _this = this;\n        this.editor = editor;\n        this._instantiationService = _instantiationService;\n        this._callOnDispose = [];\n        this._callOnModel = [];\n        this._callOnDispose.push(editor.onDidChangeConfiguration(function () { return _this._update(); }));\n        this._callOnDispose.push(editor.onDidChangeModel(function () { return _this._update(); }));\n        this._callOnDispose.push(editor.onDidChangeModelLanguage(function () { return _this._update(); }));\n        this._callOnDispose.push(modes_1.DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n    }\n    FormatOnPaste.prototype.getId = function () {\n        return FormatOnPaste.ID;\n    };\n    FormatOnPaste.prototype.dispose = function () {\n        this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n        this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n    };\n    FormatOnPaste.prototype._update = function () {\n        var _this = this;\n        // clean up\n        this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n        // we are disabled\n        if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        // no formatter\n        if (!modes_1.DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n            return;\n        }\n        this._callOnModel.push(this.editor.onDidPaste(function (range) { return _this._trigger(range); }));\n    };\n    FormatOnPaste.prototype._trigger = function (range) {\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        if (this.editor.getSelections().length > 1) {\n            return;\n        }\n        this._instantiationService.invokeFunction(format_1.formatDocumentRangeWithSelectedProvider, this.editor, range, format_1.FormattingMode.Silent, cancellation_1.CancellationToken.None).catch(errors_1.onUnexpectedError);\n    };\n    FormatOnPaste.ID = 'editor.contrib.formatOnPaste';\n    FormatOnPaste = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], FormatOnPaste);\n    return FormatOnPaste;\n}());\nvar FormatDocumentAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FormatDocumentAction, _super);\n    function FormatDocumentAction() {\n        return _super.call(this, {\n            id: 'editor.action.formatDocument',\n            label: nls.localize('formatDocument.label', \"Format Document\"),\n            alias: 'Format Document',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider),\n            kbOpts: {\n                kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider),\n                primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_F,\n                linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_I },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menuOpts: {\n                when: editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider,\n                group: '1_modification',\n                order: 1.3\n            }\n        }) || this;\n    }\n    FormatDocumentAction.prototype.run = function (accessor, editor) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var instaService;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!editor.hasModel()) return [3 /*break*/, 2];\n                        instaService = accessor.get(instantiation_1.IInstantiationService);\n                        return [4 /*yield*/, instaService.invokeFunction(format_1.formatDocumentWithSelectedProvider, editor, format_1.FormattingMode.Explicit, cancellation_1.CancellationToken.None)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return FormatDocumentAction;\n}(editorExtensions_1.EditorAction));\nvar FormatSelectionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FormatSelectionAction, _super);\n    function FormatSelectionAction() {\n        return _super.call(this, {\n            id: 'editor.action.formatSelection',\n            label: nls.localize('formatSelection.label', \"Format Selection\"),\n            alias: 'Format Code',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider),\n            kbOpts: {\n                kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider),\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menuOpts: {\n                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider, editorContextKeys_1.EditorContextKeys.hasNonEmptySelection),\n                group: '1_modification',\n                order: 1.31\n            }\n        }) || this;\n    }\n    FormatSelectionAction.prototype.run = function (accessor, editor) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var instaService, model, range;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!editor.hasModel()) {\n                            return [2 /*return*/];\n                        }\n                        instaService = accessor.get(instantiation_1.IInstantiationService);\n                        model = editor.getModel();\n                        range = editor.getSelection();\n                        if (range.isEmpty()) {\n                            range = new range_1.Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n                        }\n                        return [4 /*yield*/, instaService.invokeFunction(format_1.formatDocumentRangeWithSelectedProvider, editor, range, format_1.FormattingMode.Explicit, cancellation_1.CancellationToken.None)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return FormatSelectionAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorContribution(FormatOnType);\neditorExtensions_1.registerEditorContribution(FormatOnPaste);\neditorExtensions_1.registerEditorAction(FormatDocumentAction);\neditorExtensions_1.registerEditorAction(FormatSelectionAction);\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\ncommands_1.CommandsRegistry.registerCommand('editor.action.format', function (accessor) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var editor, commandService;\n    return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n                if (!editor || !editor.hasModel()) {\n                    return [2 /*return*/];\n                }\n                commandService = accessor.get(commands_1.ICommandService);\n                if (!editor.getSelection().isEmpty()) return [3 /*break*/, 2];\n                return [4 /*yield*/, commandService.executeCommand('editor.action.formatDocument')];\n            case 1:\n                _a.sent();\n                return [3 /*break*/, 4];\n            case 2: return [4 /*yield*/, commandService.executeCommand('editor.action.formatSelection')];\n            case 3:\n                _a.sent();\n                _a.label = 4;\n            case 4: return [2 /*return*/];\n        }\n    });\n}); });\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, registerEditorContribution, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CharacterSet } from 'vs/editor/common/core/characterClassifier';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from 'vs/editor/common/modes';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { getOnTypeFormattingEdits, alertFormattingEdits, formatDocumentRangeWithSelectedProvider, formatDocumentWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { FormattingEdit } from 'vs/editor/contrib/format/formattingEdit';\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nclass FormatOnType implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.autoFormat';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _callOnDispose: IDisposable[] = [];\n\tprivate _callOnModel: IDisposable[] = [];\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IEditorWorkerService private readonly _workerService: IEditorWorkerService\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._callOnDispose.push(editor.onDidChangeConfiguration(() => this._update()));\n\t\tthis._callOnDispose.push(editor.onDidChangeModel(() => this._update()));\n\t\tthis._callOnDispose.push(editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._callOnDispose.push(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n\t}\n\n\tgetId(): string {\n\t\treturn FormatOnType.ID;\n\t}\n\n\tdispose(): void {\n\t\tthis._callOnDispose = dispose(this._callOnDispose);\n\t\tthis._callOnModel = dispose(this._callOnModel);\n\t}\n\n\tprivate _update(): void {\n\n\t\t// clean up\n\t\tthis._callOnModel = dispose(this._callOnModel);\n\n\t\t// we are disabled\n\t\tif (!this._editor.getConfiguration().contribInfo.formatOnType) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\n\t\t// no support\n\t\tconst [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\n\t\tif (!support || !support.autoFormatTriggerCharacters) {\n\t\t\treturn;\n\t\t}\n\n\t\t// register typing listeners that will trigger the format\n\t\tlet triggerChars = new CharacterSet();\n\t\tfor (let ch of support.autoFormatTriggerCharacters) {\n\t\t\ttriggerChars.add(ch.charCodeAt(0));\n\t\t}\n\t\tthis._callOnModel.push(this._editor.onDidType((text: string) => {\n\t\t\tlet lastCharCode = text.charCodeAt(text.length - 1);\n\t\t\tif (triggerChars.has(lastCharCode)) {\n\t\t\t\tthis._trigger(String.fromCharCode(lastCharCode));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _trigger(ch: string): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._editor.getSelections().length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst position = this._editor.getPosition();\n\t\tlet canceled = false;\n\n\t\t// install a listener that checks if edits happens before the\n\t\t// position on which we format right now. If so, we won't\n\t\t// apply the format edits\n\t\tconst unbind = this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (e.isFlush) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\t// cancel only once\n\t\t\t\tcanceled = true;\n\t\t\t\tunbind.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0, len = e.changes.length; i < len; i++) {\n\t\t\t\tconst change = e.changes[i];\n\t\t\t\tif (change.range.endLineNumber <= position.lineNumber) {\n\t\t\t\t\t// cancel only once\n\t\t\t\t\tcanceled = true;\n\t\t\t\t\tunbind.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\tgetOnTypeFormattingEdits(\n\t\t\tthis._workerService,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\tch,\n\t\t\tmodel.getFormattingOptions()\n\t\t).then(edits => {\n\n\t\t\tunbind.dispose();\n\n\t\t\tif (canceled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isNonEmptyArray(edits)) {\n\t\t\t\tFormattingEdit.execute(this._editor, edits);\n\t\t\t\talertFormattingEdits(edits);\n\t\t\t}\n\n\t\t}, (err) => {\n\t\t\tunbind.dispose();\n\t\t\tthrow err;\n\t\t});\n\t}\n}\n\nclass FormatOnPaste implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.formatOnPaste';\n\n\tprivate _callOnDispose: IDisposable[];\n\tprivate _callOnModel: IDisposable[];\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tthis._callOnDispose = [];\n\t\tthis._callOnModel = [];\n\n\t\tthis._callOnDispose.push(editor.onDidChangeConfiguration(() => this._update()));\n\t\tthis._callOnDispose.push(editor.onDidChangeModel(() => this._update()));\n\t\tthis._callOnDispose.push(editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._callOnDispose.push(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n\t}\n\n\tgetId(): string {\n\t\treturn FormatOnPaste.ID;\n\t}\n\n\tdispose(): void {\n\t\tthis._callOnDispose = dispose(this._callOnDispose);\n\t\tthis._callOnModel = dispose(this._callOnModel);\n\t}\n\n\tprivate _update(): void {\n\n\t\t// clean up\n\t\tthis._callOnModel = dispose(this._callOnModel);\n\n\t\t// we are disabled\n\t\tif (!this.editor.getConfiguration().contribInfo.formatOnPaste) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no formatter\n\t\tif (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._callOnModel.push(this.editor.onDidPaste(range => this._trigger(range)));\n\t}\n\n\tprivate _trigger(range: Range): void {\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.editor.getSelections().length > 1) {\n\t\t\treturn;\n\t\t}\n\t\tthis._instantiationService.invokeFunction(formatDocumentRangeWithSelectedProvider, this.editor, range, FormattingMode.Silent, CancellationToken.None).catch(onUnexpectedError);\n\t}\n}\n\nclass FormatDocumentAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument',\n\t\t\tlabel: nls.localize('formatDocument.label', \"Format Document\"),\n\t\t\talias: 'Format Document',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_F,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_I },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\twhen: EditorContextKeys.hasDocumentFormattingProvider,\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (editor.hasModel()) {\n\t\t\tconst instaService = accessor.get(IInstantiationService);\n\t\t\tawait instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, FormattingMode.Explicit, CancellationToken.None);\n\t\t}\n\t}\n}\n\nclass FormatSelectionAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatSelection',\n\t\t\tlabel: nls.localize('formatSelection.label', \"Format Selection\"),\n\t\t\talias: 'Format Code',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_F),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\twhen: ContextKeyExpr.and(EditorContextKeys.hasDocumentSelectionFormattingProvider, EditorContextKeys.hasNonEmptySelection),\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.31\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst model = editor.getModel();\n\t\tlet range: Range = editor.getSelection();\n\t\tif (range.isEmpty()) {\n\t\t\trange = new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n\t\t}\n\t\tawait instaService.invokeFunction(formatDocumentRangeWithSelectedProvider, editor, range, FormattingMode.Explicit, CancellationToken.None);\n\t}\n}\n\nregisterEditorContribution(FormatOnType);\nregisterEditorContribution(FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', async accessor => {\n\tconst editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\tconst commandService = accessor.get(ICommandService);\n\tif (editor.getSelection().isEmpty()) {\n\t\tawait commandService.executeCommand('editor.action.formatDocument');\n\t} else {\n\t\tawait commandService.executeCommand('editor.action.formatSelection');\n\t}\n});\n"]}]}