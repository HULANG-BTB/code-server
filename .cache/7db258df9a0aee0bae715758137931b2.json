{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/contextmenu/electron-browser/contextmenuService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/contextmenu/electron-browser/contextmenuService.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar dom = require(\"vs/base/browser/dom\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar electron_1 = require(\"electron\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar event_1 = require(\"vs/base/common/event\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar contextmenu_1 = require(\"vs/base/browser/contextmenu\");\nvar functional_1 = require(\"vs/base/common/functional\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar contextmenu_2 = require(\"vs/base/parts/contextmenu/electron-browser/contextmenu\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar contextMenuService_1 = require(\"vs/platform/contextview/browser/contextMenuService\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar ContextMenuService = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextMenuService, _super);\n    function ContextMenuService(notificationService, telemetryService, keybindingService, configurationService, environmentService, contextViewService, themeService) {\n        var _this = _super.call(this) || this;\n        // Custom context menu: Linux/Windows if custom title is enabled\n        if (!(platform_1.isNative && platform_1.isMacintosh) && windows_1.getTitleBarStyle(configurationService, environmentService) === 'custom') {\n            _this.impl = new contextMenuService_1.ContextMenuService(telemetryService, notificationService, contextViewService, keybindingService, themeService);\n        }\n        // Native context menu: otherwise\n        else {\n            _this.impl = new NativeContextMenuService(notificationService, telemetryService, keybindingService);\n        }\n        return _this;\n    }\n    Object.defineProperty(ContextMenuService.prototype, \"onDidContextMenu\", {\n        get: function () { return this.impl.onDidContextMenu; },\n        enumerable: true,\n        configurable: true\n    });\n    ContextMenuService.prototype.showContextMenu = function (delegate) {\n        this.impl.showContextMenu(delegate);\n    };\n    ContextMenuService = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, keybinding_1.IKeybindingService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, environment_1.IEnvironmentService),\n        tslib_1.__param(5, contextView_1.IContextViewService),\n        tslib_1.__param(6, themeService_1.IThemeService)\n    ], ContextMenuService);\n    return ContextMenuService;\n}(lifecycle_1.Disposable));\nexports.ContextMenuService = ContextMenuService;\nvar NativeContextMenuService = /** @class */ (function (_super) {\n    tslib_1.__extends(NativeContextMenuService, _super);\n    function NativeContextMenuService(notificationService, telemetryService, keybindingService) {\n        var _this = _super.call(this) || this;\n        _this.notificationService = notificationService;\n        _this.telemetryService = telemetryService;\n        _this.keybindingService = keybindingService;\n        _this._onDidContextMenu = _this._register(new event_1.Emitter());\n        return _this;\n    }\n    Object.defineProperty(NativeContextMenuService.prototype, \"onDidContextMenu\", {\n        get: function () { return this._onDidContextMenu.event; },\n        enumerable: true,\n        configurable: true\n    });\n    NativeContextMenuService.prototype.showContextMenu = function (delegate) {\n        var _this = this;\n        var actions = delegate.getActions();\n        if (actions.length) {\n            var onHide_1 = functional_1.once(function () {\n                if (delegate.onHide) {\n                    delegate.onHide(false);\n                }\n                _this._onDidContextMenu.fire();\n            });\n            var menu = this.createMenu(delegate, actions, onHide_1);\n            var anchor = delegate.getAnchor();\n            var x = void 0, y = void 0;\n            if (dom.isHTMLElement(anchor)) {\n                var elementPosition = dom.getDomNodePagePosition(anchor);\n                x = elementPosition.left;\n                y = elementPosition.top + elementPosition.height;\n            }\n            else {\n                var pos = anchor;\n                x = pos.x + 1; /* prevent first item from being selected automatically under mouse */\n                y = pos.y;\n            }\n            var zoom = electron_1.webFrame.getZoomFactor();\n            x *= zoom;\n            y *= zoom;\n            contextmenu_2.popup(menu, {\n                x: Math.floor(x),\n                y: Math.floor(y),\n                positioningItem: delegate.autoSelectFirstItem ? 0 : undefined,\n                onHide: function () { return onHide_1(); }\n            });\n        }\n    };\n    NativeContextMenuService.prototype.createMenu = function (delegate, entries, onHide) {\n        var _this = this;\n        var actionRunner = delegate.actionRunner || new actions_1.ActionRunner();\n        return entries.map(function (entry) { return _this.createMenuItem(delegate, entry, actionRunner, onHide); });\n    };\n    NativeContextMenuService.prototype.createMenuItem = function (delegate, entry, actionRunner, onHide) {\n        var _this = this;\n        // Separator\n        if (entry instanceof actionbar_1.Separator) {\n            return { type: 'separator' };\n        }\n        // Submenu\n        if (entry instanceof contextmenu_1.ContextSubMenu) {\n            return {\n                label: labels_1.unmnemonicLabel(entry.label),\n                submenu: this.createMenu(delegate, entry.entries, onHide)\n            };\n        }\n        // Normal Menu Item\n        else {\n            var item = {\n                label: labels_1.unmnemonicLabel(entry.label),\n                checked: !!entry.checked || !!entry.radio,\n                type: !!entry.checked ? 'checkbox' : !!entry.radio ? 'radio' : undefined,\n                enabled: !!entry.enabled,\n                click: function (event) {\n                    // To preserve pre-electron-2.x behaviour, we first trigger\n                    // the onHide callback and then the action.\n                    // Fixes https://github.com/Microsoft/vscode/issues/45601\n                    onHide();\n                    // Run action which will close the menu\n                    _this.runAction(actionRunner, entry, delegate, event);\n                }\n            };\n            var keybinding = !!delegate.getKeyBinding ? delegate.getKeyBinding(entry) : this.keybindingService.lookupKeybinding(entry.id);\n            if (keybinding) {\n                var electronAccelerator = keybinding.getElectronAccelerator();\n                if (electronAccelerator) {\n                    item.accelerator = electronAccelerator;\n                }\n                else {\n                    var label = keybinding.getLabel();\n                    if (label) {\n                        item.label = item.label + \" [\" + label + \"]\";\n                    }\n                }\n            }\n            return item;\n        }\n    };\n    NativeContextMenuService.prototype.runAction = function (actionRunner, actionToRun, delegate, event) {\n        var _this = this;\n        /* __GDPR__\n            \"workbenchActionExecuted\" : {\n                \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this.telemetryService.publicLog('workbenchActionExecuted', { id: actionToRun.id, from: 'contextMenu' });\n        var context = delegate.getActionsContext ? delegate.getActionsContext(event) : event;\n        var res = actionRunner.run(actionToRun, context) || Promise.resolve(null);\n        res.then(undefined, function (e) { return _this.notificationService.error(e); });\n    };\n    NativeContextMenuService = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, keybinding_1.IKeybindingService)\n    ], NativeContextMenuService);\n    return NativeContextMenuService;\n}(lifecycle_1.Disposable));\nextensions_1.registerSingleton(contextView_1.IContextMenuService, ContextMenuService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/contextmenu/electron-browser/contextmenuService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/contextmenu/electron-browser/contextmenuService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction, IActionRunner, ActionRunner } from 'vs/base/common/actions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport * as dom from 'vs/base/browser/dom';\nimport { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { webFrame } from 'electron';\nimport { unmnemonicLabel } from 'vs/base/common/labels';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IContextMenuDelegate, ContextSubMenu, IContextMenuEvent } from 'vs/base/browser/contextmenu';\nimport { once } from 'vs/base/common/functional';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IContextMenuItem } from 'vs/base/parts/contextmenu/common/contextmenu';\nimport { popup } from 'vs/base/parts/contextmenu/electron-browser/contextmenu';\nimport { getTitleBarStyle } from 'vs/platform/windows/common/windows';\nimport { isNative, isMacintosh } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ContextMenuService as HTMLContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class ContextMenuService extends Disposable implements IContextMenuService {\n\n\t_serviceBrand: any;\n\n\tget onDidContextMenu(): Event<void> { return this.impl.onDidContextMenu; }\n\n\tprivate impl: IContextMenuService;\n\n\tconstructor(\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\t// Custom context menu: Linux/Windows if custom title is enabled\n\t\tif (!(isNative && isMacintosh) && getTitleBarStyle(configurationService, environmentService) === 'custom') {\n\t\t\tthis.impl = new HTMLContextMenuService(telemetryService, notificationService, contextViewService, keybindingService, themeService);\n\t\t}\n\n\t\t// Native context menu: otherwise\n\t\telse {\n\t\t\tthis.impl = new NativeContextMenuService(notificationService, telemetryService, keybindingService);\n\t\t}\n\t}\n\n\tshowContextMenu(delegate: IContextMenuDelegate): void {\n\t\tthis.impl.showContextMenu(delegate);\n\t}\n}\n\nclass NativeContextMenuService extends Disposable implements IContextMenuService {\n\n\t_serviceBrand: any;\n\n\tprivate _onDidContextMenu = this._register(new Emitter<void>());\n\tget onDidContextMenu(): Event<void> { return this._onDidContextMenu.event; }\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper();\n\t}\n\n\tshowContextMenu(delegate: IContextMenuDelegate): void {\n\t\tconst actions = delegate.getActions();\n\t\tif (actions.length) {\n\t\t\tconst onHide = once(() => {\n\t\t\t\tif (delegate.onHide) {\n\t\t\t\t\tdelegate.onHide(false);\n\t\t\t\t}\n\n\t\t\t\tthis._onDidContextMenu.fire();\n\t\t\t});\n\n\t\t\tconst menu = this.createMenu(delegate, actions, onHide);\n\t\t\tconst anchor = delegate.getAnchor();\n\t\t\tlet x: number, y: number;\n\n\t\t\tif (dom.isHTMLElement(anchor)) {\n\t\t\t\tlet elementPosition = dom.getDomNodePagePosition(anchor);\n\n\t\t\t\tx = elementPosition.left;\n\t\t\t\ty = elementPosition.top + elementPosition.height;\n\t\t\t} else {\n\t\t\t\tconst pos = <{ x: number; y: number; }>anchor;\n\t\t\t\tx = pos.x + 1; /* prevent first item from being selected automatically under mouse */\n\t\t\t\ty = pos.y;\n\t\t\t}\n\n\t\t\tlet zoom = webFrame.getZoomFactor();\n\t\t\tx *= zoom;\n\t\t\ty *= zoom;\n\n\t\t\tpopup(menu, {\n\t\t\t\tx: Math.floor(x),\n\t\t\t\ty: Math.floor(y),\n\t\t\t\tpositioningItem: delegate.autoSelectFirstItem ? 0 : undefined,\n\t\t\t\tonHide: () => onHide()\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate createMenu(delegate: IContextMenuDelegate, entries: Array<IAction | ContextSubMenu>, onHide: () => void): IContextMenuItem[] {\n\t\tconst actionRunner = delegate.actionRunner || new ActionRunner();\n\n\t\treturn entries.map(entry => this.createMenuItem(delegate, entry, actionRunner, onHide));\n\t}\n\n\tprivate createMenuItem(delegate: IContextMenuDelegate, entry: IAction | ContextSubMenu, actionRunner: IActionRunner, onHide: () => void): IContextMenuItem {\n\n\t\t// Separator\n\t\tif (entry instanceof Separator) {\n\t\t\treturn { type: 'separator' } as IContextMenuItem;\n\t\t}\n\n\t\t// Submenu\n\t\tif (entry instanceof ContextSubMenu) {\n\t\t\treturn {\n\t\t\t\tlabel: unmnemonicLabel(entry.label),\n\t\t\t\tsubmenu: this.createMenu(delegate, entry.entries, onHide)\n\t\t\t} as IContextMenuItem;\n\t\t}\n\n\t\t// Normal Menu Item\n\t\telse {\n\t\t\tconst item: IContextMenuItem = {\n\t\t\t\tlabel: unmnemonicLabel(entry.label),\n\t\t\t\tchecked: !!entry.checked || !!entry.radio,\n\t\t\t\ttype: !!entry.checked ? 'checkbox' : !!entry.radio ? 'radio' : undefined,\n\t\t\t\tenabled: !!entry.enabled,\n\t\t\t\tclick: event => {\n\n\t\t\t\t\t// To preserve pre-electron-2.x behaviour, we first trigger\n\t\t\t\t\t// the onHide callback and then the action.\n\t\t\t\t\t// Fixes https://github.com/Microsoft/vscode/issues/45601\n\t\t\t\t\tonHide();\n\n\t\t\t\t\t// Run action which will close the menu\n\t\t\t\t\tthis.runAction(actionRunner, entry, delegate, event);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst keybinding = !!delegate.getKeyBinding ? delegate.getKeyBinding(entry) : this.keybindingService.lookupKeybinding(entry.id);\n\t\t\tif (keybinding) {\n\t\t\t\tconst electronAccelerator = keybinding.getElectronAccelerator();\n\t\t\t\tif (electronAccelerator) {\n\t\t\t\t\titem.accelerator = electronAccelerator;\n\t\t\t\t} else {\n\t\t\t\t\tconst label = keybinding.getLabel();\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\titem.label = `${item.label} [${label}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn item;\n\t\t}\n\t}\n\n\tprivate runAction(actionRunner: IActionRunner, actionToRun: IAction, delegate: IContextMenuDelegate, event: IContextMenuEvent): void {\n\t\t/* __GDPR__\n\t\t\t\"workbenchActionExecuted\" : {\n\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('workbenchActionExecuted', { id: actionToRun.id, from: 'contextMenu' });\n\n\t\tconst context = delegate.getActionsContext ? delegate.getActionsContext(event) : event;\n\t\tconst res = actionRunner.run(actionToRun, context) || Promise.resolve(null);\n\n\t\tres.then(undefined, e => this.notificationService.error(e));\n\t}\n}\n\nregisterSingleton(IContextMenuService, ContextMenuService, true);"]}]}