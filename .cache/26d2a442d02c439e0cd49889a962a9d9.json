{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/workspaces/common/workspaces\", \"vs/base/node/encoding\", \"vs/base/common/uri\", \"vs/platform/files/common/files\", \"vs/base/common/platform\", \"vs/base/common/path\", \"vs/base/common/lifecycle\", \"vs/base/common/resources\"], function (require, exports, workspaces_1, encoding, uri_1, files_1, platform_1, path_1, lifecycle_1, resources_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // TODO@Ben debt - encodings should move one layer up from the file service into the text file\n    // service and then ideally be passed in as option to the file service\n    // the file service should talk about string |Â Buffer for reading and writing and only convert\n    // to strings if a encoding is provided\n    class ResourceEncodings extends lifecycle_1.Disposable {\n        constructor(textResourceConfigurationService, environmentService, contextService, encodingOverride) {\n            super();\n            this.textResourceConfigurationService = textResourceConfigurationService;\n            this.environmentService = environmentService;\n            this.contextService = contextService;\n            this.encodingOverride = encodingOverride || this.getEncodingOverrides();\n            this.registerListeners();\n        }\n        registerListeners() {\n            // Workspace Folder Change\n            this._register(this.contextService.onDidChangeWorkspaceFolders(() => {\n                this.encodingOverride = this.getEncodingOverrides();\n            }));\n        }\n        getReadEncoding(resource, options, detected) {\n            let preferredEncoding;\n            // Encoding passed in as option\n            if (options && options.encoding) {\n                if (detected.encoding === encoding.UTF8 && options.encoding === encoding.UTF8) {\n                    preferredEncoding = encoding.UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n                }\n                else {\n                    preferredEncoding = options.encoding; // give passed in encoding highest priority\n                }\n            }\n            // Encoding detected\n            else if (detected.encoding) {\n                if (detected.encoding === encoding.UTF8) {\n                    preferredEncoding = encoding.UTF8_with_bom; // if we detected UTF-8, it can only be because of a BOM\n                }\n                else {\n                    preferredEncoding = detected.encoding;\n                }\n            }\n            // Encoding configured\n            else if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === encoding.UTF8_with_bom) {\n                preferredEncoding = encoding.UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n            }\n            return this.getEncodingForResource(resource, preferredEncoding);\n        }\n        getWriteEncoding(resource, preferredEncoding) {\n            const resourceEncoding = this.getEncodingForResource(resource, preferredEncoding);\n            return {\n                encoding: resourceEncoding,\n                hasBOM: resourceEncoding === encoding.UTF16be || resourceEncoding === encoding.UTF16le || resourceEncoding === encoding.UTF8_with_bom // enforce BOM for certain encodings\n            };\n        }\n        getEncodingForResource(resource, preferredEncoding) {\n            let fileEncoding;\n            const override = this.getEncodingOverride(resource);\n            if (override) {\n                fileEncoding = override; // encoding override always wins\n            }\n            else if (preferredEncoding) {\n                fileEncoding = preferredEncoding; // preferred encoding comes second\n            }\n            else {\n                fileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n            }\n            if (!fileEncoding || !encoding.encodingExists(fileEncoding)) {\n                fileEncoding = encoding.UTF8; // the default is UTF 8\n            }\n            return fileEncoding;\n        }\n        getEncodingOverrides() {\n            const encodingOverride = [];\n            // Global settings\n            encodingOverride.push({ parent: uri_1.URI.file(this.environmentService.appSettingsHome), encoding: encoding.UTF8 });\n            // Workspace files\n            encodingOverride.push({ extension: workspaces_1.WORKSPACE_EXTENSION, encoding: encoding.UTF8 });\n            // Folder Settings\n            this.contextService.getWorkspace().folders.forEach(folder => {\n                encodingOverride.push({ parent: resources_1.joinPath(folder.uri, '.vscode'), encoding: encoding.UTF8 });\n            });\n            return encodingOverride;\n        }\n        getEncodingOverride(resource) {\n            if (resource && this.encodingOverride && this.encodingOverride.length) {\n                for (const override of this.encodingOverride) {\n                    // check if the resource is child of encoding override path\n                    if (override.parent && files_1.isParent(resource.fsPath, override.parent.fsPath, !platform_1.isLinux /* ignorecase */)) {\n                        return override.encoding;\n                    }\n                    // check if the resource extension is equal to encoding override\n                    if (override.extension && path_1.extname(resource.fsPath) === `.${override.extension}`) {\n                        return override.encoding;\n                    }\n                }\n            }\n            return null;\n        }\n    }\n    exports.ResourceEncodings = ResourceEncodings;\n});\n",null]}