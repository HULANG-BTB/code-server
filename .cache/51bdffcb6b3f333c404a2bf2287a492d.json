{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/taskQuickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/taskQuickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar QuickOpen = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar taskService_1 = require(\"vs/workbench/contrib/tasks/common/taskService\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar base = require(\"./quickOpen\");\nvar TaskEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskEntry, _super);\n    function TaskEntry(quickOpenService, taskService, task, highlights) {\n        if (highlights === void 0) { highlights = []; }\n        return _super.call(this, quickOpenService, taskService, task, highlights) || this;\n    }\n    TaskEntry.prototype.run = function (mode, context) {\n        if (mode === QuickOpen.Mode.PREVIEW) {\n            return false;\n        }\n        var task = this._task;\n        return this.doRun(task, { attachProblemMatcher: true });\n    };\n    return TaskEntry;\n}(base.TaskEntry));\nvar QuickOpenHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenHandler, _super);\n    function QuickOpenHandler(quickOpenService, extensionService, taskService) {\n        var _this = _super.call(this, quickOpenService, taskService) || this;\n        _this.activationPromise = extensionService.activateByEvent('onCommand:workbench.action.tasks.runTask');\n        return _this;\n    }\n    QuickOpenHandler.prototype.getAriaLabel = function () {\n        return nls.localize('tasksAriaLabel', \"Type the name of a task to run\");\n    };\n    QuickOpenHandler.prototype.getTasks = function () {\n        var _this = this;\n        return this.activationPromise.then(function () {\n            return _this.taskService.tasks().then(function (tasks) { return tasks.filter(function (task) { return tasks_1.ContributedTask.is(task) || tasks_1.CustomTask.is(task); }); });\n        });\n    };\n    QuickOpenHandler.prototype.createEntry = function (task, highlights) {\n        return new TaskEntry(this.quickOpenService, this.taskService, task, highlights);\n    };\n    QuickOpenHandler.prototype.getEmptyLabel = function (searchString) {\n        if (searchString.length > 0) {\n            return nls.localize('noTasksMatching', \"No tasks matching\");\n        }\n        return nls.localize('noTasksFound', \"No tasks found\");\n    };\n    QuickOpenHandler.ID = 'workbench.picker.tasks';\n    QuickOpenHandler = tslib_1.__decorate([\n        tslib_1.__param(0, quickOpen_1.IQuickOpenService),\n        tslib_1.__param(1, extensions_1.IExtensionService),\n        tslib_1.__param(2, taskService_1.ITaskService)\n    ], QuickOpenHandler);\n    return QuickOpenHandler;\n}(base.QuickOpenHandler));\nexports.QuickOpenHandler = QuickOpenHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/taskQuickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/taskQuickOpen.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,oEAAsE;AAEtE,oEAA2E;AAE3E,iEAAsF;AACtF,6EAA6E;AAC7E,iFAAuF;AAEvF,kCAAoC;AAEpC;IAAwB,qCAAc;IACrC,mBAAY,gBAAmC,EAAE,WAAyB,EAAE,IAAkC,EAAE,UAAmC;QAAnC,2BAAA,EAAA,eAAmC;eAClJ,kBAAM,gBAAgB,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC;IACvD,CAAC;IAEM,uBAAG,GAAV,UAAW,IAAoB,EAAE,OAAmC;QACnE,IAAI,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE;YACpC,OAAO,KAAK,CAAC;SACb;QACD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IACF,gBAAC;AAAD,CAAC,AAZD,CAAwB,IAAI,CAAC,SAAS,GAYrC;AAED;IAAsC,4CAAqB;IAM1D,0BACoB,gBAAmC,EACnC,gBAAmC,EACxC,WAAyB;QAHxC,YAKC,kBAAM,gBAAgB,EAAE,WAAW,CAAC,SAEpC;QADA,KAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,eAAe,CAAC,0CAA0C,CAAC,CAAC;;IACvG,CAAC;IAEM,uCAAY,GAAnB;QACC,OAAO,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gCAAgC,CAAC,CAAC;IACzE,CAAC;IAES,mCAAQ,GAAlB;QAAA,iBAIC;QAHA,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAClC,OAAO,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,CAA+B,UAAC,IAAI,IAA2C,OAAA,uBAAe,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,kBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAA/C,CAA+C,CAAC,EAA3I,CAA2I,CAAC,CAAC;QAC5L,CAAC,CAAC,CAAC;IACJ,CAAC;IAES,sCAAW,GAArB,UAAsB,IAAkC,EAAE,UAA8B;QACvF,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACjF,CAAC;IAEM,wCAAa,GAApB,UAAqB,YAAoB;QACxC,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;SAC5D;QACD,OAAO,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;IACvD,CAAC;IAhCsB,mBAAE,GAAG,wBAAwB,CAAC;IAFzC,gBAAgB;QAO1B,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,8BAAiB,CAAA;QACjB,mBAAA,0BAAY,CAAA;OATF,gBAAgB,CAmC5B;IAAD,uBAAC;CAAA,AAnCD,CAAsC,IAAI,CAAC,gBAAgB,GAmC1D;AAnCY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as QuickOpen from 'vs/base/parts/quickopen/common/quickOpen';\nimport * as Model from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\n\nimport { CustomTask, ContributedTask } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nimport * as base from './quickOpen';\n\nclass TaskEntry extends base.TaskEntry {\n\tconstructor(quickOpenService: IQuickOpenService, taskService: ITaskService, task: CustomTask | ContributedTask, highlights: Model.IHighlight[] = []) {\n\t\tsuper(quickOpenService, taskService, task, highlights);\n\t}\n\n\tpublic run(mode: QuickOpen.Mode, context: QuickOpen.IEntryRunContext): boolean {\n\t\tif (mode === QuickOpen.Mode.PREVIEW) {\n\t\t\treturn false;\n\t\t}\n\t\tlet task = this._task;\n\t\treturn this.doRun(task, { attachProblemMatcher: true });\n\t}\n}\n\nexport class QuickOpenHandler extends base.QuickOpenHandler {\n\n\tpublic static readonly ID = 'workbench.picker.tasks';\n\n\tprivate activationPromise: Promise<void>;\n\n\tconstructor(\n\t\t@IQuickOpenService quickOpenService: IQuickOpenService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@ITaskService taskService: ITaskService\n\t) {\n\t\tsuper(quickOpenService, taskService);\n\t\tthis.activationPromise = extensionService.activateByEvent('onCommand:workbench.action.tasks.runTask');\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('tasksAriaLabel', \"Type the name of a task to run\");\n\t}\n\n\tprotected getTasks(): Promise<Array<CustomTask | ContributedTask>> {\n\t\treturn this.activationPromise.then(() => {\n\t\t\treturn this.taskService.tasks().then(tasks => tasks.filter<CustomTask | ContributedTask>((task): task is CustomTask | ContributedTask => ContributedTask.is(task) || CustomTask.is(task)));\n\t\t});\n\t}\n\n\tprotected createEntry(task: CustomTask | ContributedTask, highlights: Model.IHighlight[]): base.TaskEntry {\n\t\treturn new TaskEntry(this.quickOpenService, this.taskService, task, highlights);\n\t}\n\n\tpublic getEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noTasksMatching', \"No tasks matching\");\n\t\t}\n\t\treturn nls.localize('noTasksFound', \"No tasks found\");\n\t}\n}"]}]}