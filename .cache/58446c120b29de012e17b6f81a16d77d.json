{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenWidget.ts","mtime":1555846338028},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./quickopen\");\nvar nls = require(\"vs/nls\");\nvar browser = require(\"vs/base/browser/browser\");\nvar types = require(\"vs/base/common/types\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenViewer_1 = require(\"vs/base/parts/quickopen/browser/quickOpenViewer\");\nvar inputBox_1 = require(\"vs/base/browser/ui/inputbox/inputBox\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar treeImpl_1 = require(\"vs/base/parts/tree/browser/treeImpl\");\nvar progressbar_1 = require(\"vs/base/browser/ui/progressbar/progressbar\");\nvar keyboardEvent_1 = require(\"vs/base/browser/keyboardEvent\");\nvar treeDefaults_1 = require(\"vs/base/parts/tree/browser/treeDefaults\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar scrollable_1 = require(\"vs/base/common/scrollable\");\nvar color_1 = require(\"vs/base/common/color\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar mouseEvent_1 = require(\"vs/base/browser/mouseEvent\");\nvar QuickOpenController = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenController, _super);\n    function QuickOpenController() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    QuickOpenController.prototype.onContextMenu = function (tree, element, event) {\n        if (browser.isMacintosh) {\n            return this.onLeftClick(tree, element, event); // https://github.com/Microsoft/vscode/issues/1011\n        }\n        return _super.prototype.onContextMenu.call(this, tree, element, event);\n    };\n    QuickOpenController.prototype.onMouseMiddleClick = function (tree, element, event) {\n        return this.onLeftClick(tree, element, event);\n    };\n    return QuickOpenController;\n}(treeDefaults_1.DefaultController));\nexports.QuickOpenController = QuickOpenController;\nvar HideReason;\n(function (HideReason) {\n    HideReason[HideReason[\"ELEMENT_SELECTED\"] = 0] = \"ELEMENT_SELECTED\";\n    HideReason[HideReason[\"FOCUS_LOST\"] = 1] = \"FOCUS_LOST\";\n    HideReason[HideReason[\"CANCELED\"] = 2] = \"CANCELED\";\n})(HideReason = exports.HideReason || (exports.HideReason = {}));\nvar defaultStyles = {\n    background: color_1.Color.fromHex('#1E1E1E'),\n    foreground: color_1.Color.fromHex('#CCCCCC'),\n    pickerGroupForeground: color_1.Color.fromHex('#0097FB'),\n    pickerGroupBorder: color_1.Color.fromHex('#3F3F46'),\n    widgetShadow: color_1.Color.fromHex('#000000'),\n    progressBarBackground: color_1.Color.fromHex('#0E70C0')\n};\nvar DEFAULT_INPUT_ARIA_LABEL = nls.localize('quickOpenAriaLabel', \"Quick picker. Type to narrow down results.\");\nvar QuickOpenWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenWidget, _super);\n    function QuickOpenWidget(container, callbacks, options) {\n        var _this = _super.call(this) || this;\n        _this.isDisposed = false;\n        _this.container = container;\n        _this.callbacks = callbacks;\n        _this.options = options;\n        _this.styles = options || Object.create(null);\n        objects_1.mixin(_this.styles, defaultStyles, false);\n        _this.model = null;\n        return _this;\n    }\n    QuickOpenWidget.prototype.getElement = function () {\n        return this.element;\n    };\n    QuickOpenWidget.prototype.getModel = function () {\n        return this.model;\n    };\n    QuickOpenWidget.prototype.setCallbacks = function (callbacks) {\n        this.callbacks = callbacks;\n    };\n    QuickOpenWidget.prototype.create = function () {\n        var _this = this;\n        // Container\n        this.element = document.createElement('div');\n        DOM.addClass(this.element, 'monaco-quick-open-widget');\n        this.container.appendChild(this.element);\n        this._register(DOM.addDisposableListener(this.element, DOM.EventType.CONTEXT_MENU, function (e) { return DOM.EventHelper.stop(e, true); })); // Do this to fix an issue on Mac where the menu goes into the way\n        this._register(DOM.addDisposableListener(this.element, DOM.EventType.FOCUS, function (e) { return _this.gainingFocus(); }, true));\n        this._register(DOM.addDisposableListener(this.element, DOM.EventType.BLUR, function (e) { return _this.loosingFocus(e); }, true));\n        this._register(DOM.addDisposableListener(this.element, DOM.EventType.KEY_DOWN, function (e) {\n            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            if (keyboardEvent.keyCode === keyCodes_1.KeyCode.Escape) {\n                DOM.EventHelper.stop(e, true);\n                _this.hide(HideReason.CANCELED);\n            }\n            else if (keyboardEvent.keyCode === keyCodes_1.KeyCode.Tab && !keyboardEvent.altKey && !keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {\n                var stops = e.currentTarget.querySelectorAll('input, .monaco-tree, .monaco-tree-row.focused .action-label.icon');\n                if (keyboardEvent.shiftKey && keyboardEvent.target === stops[0]) {\n                    DOM.EventHelper.stop(e, true);\n                    stops[stops.length - 1].focus();\n                }\n                else if (!keyboardEvent.shiftKey && keyboardEvent.target === stops[stops.length - 1]) {\n                    DOM.EventHelper.stop(e, true);\n                    stops[0].focus();\n                }\n            }\n        }));\n        // Progress Bar\n        this.progressBar = this._register(new progressbar_1.ProgressBar(this.element, { progressBarBackground: this.styles.progressBarBackground }));\n        this.progressBar.hide();\n        // Input Field\n        this.inputContainer = document.createElement('div');\n        DOM.addClass(this.inputContainer, 'quick-open-input');\n        this.element.appendChild(this.inputContainer);\n        this.inputBox = this._register(new inputBox_1.InputBox(this.inputContainer, undefined, {\n            placeholder: this.options.inputPlaceHolder || '',\n            ariaLabel: DEFAULT_INPUT_ARIA_LABEL,\n            inputBackground: this.styles.inputBackground,\n            inputForeground: this.styles.inputForeground,\n            inputBorder: this.styles.inputBorder,\n            inputValidationInfoBackground: this.styles.inputValidationInfoBackground,\n            inputValidationInfoForeground: this.styles.inputValidationInfoForeground,\n            inputValidationInfoBorder: this.styles.inputValidationInfoBorder,\n            inputValidationWarningBackground: this.styles.inputValidationWarningBackground,\n            inputValidationWarningForeground: this.styles.inputValidationWarningForeground,\n            inputValidationWarningBorder: this.styles.inputValidationWarningBorder,\n            inputValidationErrorBackground: this.styles.inputValidationErrorBackground,\n            inputValidationErrorForeground: this.styles.inputValidationErrorForeground,\n            inputValidationErrorBorder: this.styles.inputValidationErrorBorder\n        }));\n        this.inputElement = this.inputBox.inputElement;\n        this.inputElement.setAttribute('role', 'combobox');\n        this.inputElement.setAttribute('aria-haspopup', 'false');\n        this.inputElement.setAttribute('aria-autocomplete', 'list');\n        this._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.INPUT, function (e) { return _this.onType(); }));\n        this._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.KEY_DOWN, function (e) {\n            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            var shouldOpenInBackground = _this.shouldOpenInBackground(keyboardEvent);\n            // Do not handle Tab: It is used to navigate between elements without mouse\n            if (keyboardEvent.keyCode === keyCodes_1.KeyCode.Tab) {\n                return;\n            }\n            // Pass tree navigation keys to the tree but leave focus in input field\n            else if (keyboardEvent.keyCode === keyCodes_1.KeyCode.DownArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.UpArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageDown || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageUp) {\n                DOM.EventHelper.stop(e, true);\n                _this.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey);\n                // Position cursor at the end of input to allow right arrow (open in background)\n                // to function immediately unless the user has made a selection\n                if (_this.inputBox.inputElement.selectionStart === _this.inputBox.inputElement.selectionEnd) {\n                    _this.inputBox.inputElement.selectionStart = _this.inputBox.value.length;\n                }\n            }\n            // Select element on Enter or on Arrow-Right if we are at the end of the input\n            else if (keyboardEvent.keyCode === keyCodes_1.KeyCode.Enter || shouldOpenInBackground) {\n                DOM.EventHelper.stop(e, true);\n                var focus = _this.tree.getFocus();\n                if (focus) {\n                    _this.elementSelected(focus, e, shouldOpenInBackground ? quickOpen_1.Mode.OPEN_IN_BACKGROUND : quickOpen_1.Mode.OPEN);\n                }\n            }\n        }));\n        // Result count for screen readers\n        this.resultCount = document.createElement('div');\n        DOM.addClass(this.resultCount, 'quick-open-result-count');\n        this.resultCount.setAttribute('aria-live', 'polite');\n        this.resultCount.setAttribute('aria-atomic', 'true');\n        this.element.appendChild(this.resultCount);\n        // Tree\n        this.treeContainer = document.createElement('div');\n        DOM.addClass(this.treeContainer, 'quick-open-tree');\n        this.element.appendChild(this.treeContainer);\n        var createTree = this.options.treeCreator || (function (container, config, opts) { return new treeImpl_1.Tree(container, config, opts); });\n        this.tree = this._register(createTree(this.treeContainer, {\n            dataSource: new quickOpenViewer_1.DataSource(this),\n            controller: new QuickOpenController({ clickBehavior: treeDefaults_1.ClickBehavior.ON_MOUSE_UP, keyboardSupport: this.options.keyboardSupport }),\n            renderer: (this.renderer = new quickOpenViewer_1.Renderer(this, this.styles)),\n            filter: new quickOpenViewer_1.Filter(this),\n            accessibilityProvider: new quickOpenViewer_1.AccessibilityProvider(this)\n        }, {\n            twistiePixels: 11,\n            indentPixels: 0,\n            alwaysFocused: true,\n            verticalScrollMode: scrollable_1.ScrollbarVisibility.Visible,\n            horizontalScrollMode: scrollable_1.ScrollbarVisibility.Hidden,\n            ariaLabel: nls.localize('treeAriaLabel', \"Quick Picker\"),\n            keyboardSupport: this.options.keyboardSupport,\n            preventRootFocus: false\n        }));\n        this.treeElement = this.tree.getHTMLElement();\n        // Handle Focus and Selection event\n        this._register(this.tree.onDidChangeFocus(function (event) {\n            _this.elementFocused(event.focus, event);\n        }));\n        this._register(this.tree.onDidChangeSelection(function (event) {\n            if (event.selection && event.selection.length > 0) {\n                var mouseEvent = event.payload && event.payload.originalEvent instanceof mouseEvent_1.StandardMouseEvent ? event.payload.originalEvent : undefined;\n                var shouldOpenInBackground = mouseEvent ? _this.shouldOpenInBackground(mouseEvent) : false;\n                _this.elementSelected(event.selection[0], event, shouldOpenInBackground ? quickOpen_1.Mode.OPEN_IN_BACKGROUND : quickOpen_1.Mode.OPEN);\n            }\n        }));\n        this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, function (e) {\n            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            // Only handle when in quick navigation mode\n            if (!_this.quickNavigateConfiguration) {\n                return;\n            }\n            // Support keyboard navigation in quick navigation mode\n            if (keyboardEvent.keyCode === keyCodes_1.KeyCode.DownArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.UpArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageDown || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageUp) {\n                DOM.EventHelper.stop(e, true);\n                _this.navigateInTree(keyboardEvent.keyCode);\n            }\n        }));\n        this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_UP, function (e) {\n            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            var keyCode = keyboardEvent.keyCode;\n            // Only handle when in quick navigation mode\n            if (!_this.quickNavigateConfiguration) {\n                return;\n            }\n            // Select element when keys are pressed that signal it\n            var quickNavKeys = _this.quickNavigateConfiguration.keybindings;\n            var wasTriggerKeyPressed = keyCode === keyCodes_1.KeyCode.Enter || quickNavKeys.some(function (k) {\n                var _a = k.getParts(), firstPart = _a[0], chordPart = _a[1];\n                if (chordPart) {\n                    return false;\n                }\n                if (firstPart.shiftKey && keyCode === keyCodes_1.KeyCode.Shift) {\n                    if (keyboardEvent.ctrlKey || keyboardEvent.altKey || keyboardEvent.metaKey) {\n                        return false; // this is an optimistic check for the shift key being used to navigate back in quick open\n                    }\n                    return true;\n                }\n                if (firstPart.altKey && keyCode === keyCodes_1.KeyCode.Alt) {\n                    return true;\n                }\n                if (firstPart.ctrlKey && keyCode === keyCodes_1.KeyCode.Ctrl) {\n                    return true;\n                }\n                if (firstPart.metaKey && keyCode === keyCodes_1.KeyCode.Meta) {\n                    return true;\n                }\n                return false;\n            });\n            if (wasTriggerKeyPressed) {\n                var focus = _this.tree.getFocus();\n                if (focus) {\n                    _this.elementSelected(focus, e);\n                }\n            }\n        }));\n        // Support layout\n        if (this.layoutDimensions) {\n            this.layout(this.layoutDimensions);\n        }\n        this.applyStyles();\n        // Allows focus to switch to next/previous entry after tab into an actionbar item\n        this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, function (e) {\n            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            // Only handle when not in quick navigation mode\n            if (_this.quickNavigateConfiguration) {\n                return;\n            }\n            if (keyboardEvent.keyCode === keyCodes_1.KeyCode.DownArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.UpArrow || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageDown || keyboardEvent.keyCode === keyCodes_1.KeyCode.PageUp) {\n                DOM.EventHelper.stop(e, true);\n                _this.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey);\n                _this.treeElement.focus();\n            }\n        }));\n        return this.element;\n    };\n    QuickOpenWidget.prototype.style = function (styles) {\n        this.styles = styles;\n        this.applyStyles();\n    };\n    QuickOpenWidget.prototype.applyStyles = function () {\n        if (this.element) {\n            var foreground = this.styles.foreground ? this.styles.foreground.toString() : null;\n            var background = this.styles.background ? this.styles.background.toString() : null;\n            var borderColor = this.styles.borderColor ? this.styles.borderColor.toString() : null;\n            var widgetShadow = this.styles.widgetShadow ? this.styles.widgetShadow.toString() : null;\n            this.element.style.color = foreground;\n            this.element.style.backgroundColor = background;\n            this.element.style.borderColor = borderColor;\n            this.element.style.borderWidth = borderColor ? '1px' : null;\n            this.element.style.borderStyle = borderColor ? 'solid' : null;\n            this.element.style.boxShadow = widgetShadow ? \"0 5px 8px \" + widgetShadow : null;\n        }\n        if (this.progressBar) {\n            this.progressBar.style({\n                progressBarBackground: this.styles.progressBarBackground\n            });\n        }\n        if (this.inputBox) {\n            this.inputBox.style({\n                inputBackground: this.styles.inputBackground,\n                inputForeground: this.styles.inputForeground,\n                inputBorder: this.styles.inputBorder,\n                inputValidationInfoBackground: this.styles.inputValidationInfoBackground,\n                inputValidationInfoForeground: this.styles.inputValidationInfoForeground,\n                inputValidationInfoBorder: this.styles.inputValidationInfoBorder,\n                inputValidationWarningBackground: this.styles.inputValidationWarningBackground,\n                inputValidationWarningForeground: this.styles.inputValidationWarningForeground,\n                inputValidationWarningBorder: this.styles.inputValidationWarningBorder,\n                inputValidationErrorBackground: this.styles.inputValidationErrorBackground,\n                inputValidationErrorForeground: this.styles.inputValidationErrorForeground,\n                inputValidationErrorBorder: this.styles.inputValidationErrorBorder\n            });\n        }\n        if (this.tree && !this.options.treeCreator) {\n            this.tree.style(this.styles);\n        }\n        if (this.renderer) {\n            this.renderer.updateStyles(this.styles);\n        }\n    };\n    QuickOpenWidget.prototype.shouldOpenInBackground = function (e) {\n        // Keyboard\n        if (e instanceof keyboardEvent_1.StandardKeyboardEvent) {\n            if (e.keyCode !== keyCodes_1.KeyCode.RightArrow) {\n                return false; // only for right arrow\n            }\n            if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {\n                return false; // no modifiers allowed\n            }\n            // validate the cursor is at the end of the input and there is no selection,\n            // and if not prevent opening in the background such as the selection can be changed\n            var element = this.inputBox.inputElement;\n            return element.selectionEnd === this.inputBox.value.length && element.selectionStart === element.selectionEnd;\n        }\n        // Mouse\n        return e.middleButton;\n    };\n    QuickOpenWidget.prototype.onType = function () {\n        var value = this.inputBox.value;\n        // Adjust help text as needed if present\n        if (this.helpText) {\n            if (value) {\n                DOM.hide(this.helpText);\n            }\n            else {\n                DOM.show(this.helpText);\n            }\n        }\n        // Send to callbacks\n        this.callbacks.onType(value);\n    };\n    QuickOpenWidget.prototype.navigate = function (next, quickNavigate) {\n        if (this.isVisible()) {\n            // Transition into quick navigate mode if not yet done\n            if (!this.quickNavigateConfiguration && quickNavigate) {\n                this.quickNavigateConfiguration = quickNavigate;\n                this.tree.domFocus();\n            }\n            // Navigate\n            this.navigateInTree(next ? keyCodes_1.KeyCode.DownArrow : keyCodes_1.KeyCode.UpArrow);\n        }\n    };\n    QuickOpenWidget.prototype.navigateInTree = function (keyCode, isShift) {\n        var model = this.tree.getInput();\n        var entries = model ? model.entries : [];\n        var oldFocus = this.tree.getFocus();\n        // Normal Navigation\n        switch (keyCode) {\n            case keyCodes_1.KeyCode.DownArrow:\n                this.tree.focusNext();\n                break;\n            case keyCodes_1.KeyCode.UpArrow:\n                this.tree.focusPrevious();\n                break;\n            case keyCodes_1.KeyCode.PageDown:\n                this.tree.focusNextPage();\n                break;\n            case keyCodes_1.KeyCode.PageUp:\n                this.tree.focusPreviousPage();\n                break;\n            case keyCodes_1.KeyCode.Tab:\n                if (isShift) {\n                    this.tree.focusPrevious();\n                }\n                else {\n                    this.tree.focusNext();\n                }\n                break;\n        }\n        var newFocus = this.tree.getFocus();\n        // Support cycle-through navigation if focus did not change\n        if (entries.length > 1 && oldFocus === newFocus) {\n            // Up from no entry or first entry goes down to last\n            if (keyCode === keyCodes_1.KeyCode.UpArrow || (keyCode === keyCodes_1.KeyCode.Tab && isShift)) {\n                this.tree.focusLast();\n            }\n            // Down from last entry goes to up to first\n            else if (keyCode === keyCodes_1.KeyCode.DownArrow || keyCode === keyCodes_1.KeyCode.Tab && !isShift) {\n                this.tree.focusFirst();\n            }\n        }\n        // Reveal\n        newFocus = this.tree.getFocus();\n        if (newFocus) {\n            this.tree.reveal(newFocus);\n        }\n    };\n    QuickOpenWidget.prototype.elementFocused = function (value, event) {\n        if (!value || !this.isVisible()) {\n            return;\n        }\n        // ARIA\n        var arivaActiveDescendant = this.treeElement.getAttribute('aria-activedescendant');\n        if (arivaActiveDescendant) {\n            this.inputElement.setAttribute('aria-activedescendant', arivaActiveDescendant);\n        }\n        else {\n            this.inputElement.removeAttribute('aria-activedescendant');\n        }\n        var context = { event: event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };\n        this.model.runner.run(value, quickOpen_1.Mode.PREVIEW, context);\n    };\n    QuickOpenWidget.prototype.elementSelected = function (value, event, preferredMode) {\n        var hide = true;\n        // Trigger open of element on selection\n        if (this.isVisible()) {\n            var mode = preferredMode || quickOpen_1.Mode.OPEN;\n            var context = { event: event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };\n            hide = this.model.runner.run(value, mode, context);\n        }\n        // Hide if command was run successfully\n        if (hide) {\n            this.hide(HideReason.ELEMENT_SELECTED);\n        }\n    };\n    QuickOpenWidget.prototype.extractKeyMods = function (event) {\n        return {\n            ctrlCmd: event && (event.ctrlKey || event.metaKey || (event.payload && event.payload.originalEvent && (event.payload.originalEvent.ctrlKey || event.payload.originalEvent.metaKey))),\n            alt: event && (event.altKey || (event.payload && event.payload.originalEvent && event.payload.originalEvent.altKey))\n        };\n    };\n    QuickOpenWidget.prototype.show = function (param, options) {\n        this.visible = true;\n        this.isLoosingFocus = false;\n        this.quickNavigateConfiguration = options ? options.quickNavigateConfiguration : undefined;\n        // Adjust UI for quick navigate mode\n        if (this.quickNavigateConfiguration) {\n            DOM.hide(this.inputContainer);\n            DOM.show(this.element);\n            this.tree.domFocus();\n        }\n        // Otherwise use normal UI\n        else {\n            DOM.show(this.inputContainer);\n            DOM.show(this.element);\n            this.inputBox.focus();\n        }\n        // Adjust Help text for IE\n        if (this.helpText) {\n            if (this.quickNavigateConfiguration || types.isString(param)) {\n                DOM.hide(this.helpText);\n            }\n            else {\n                DOM.show(this.helpText);\n            }\n        }\n        // Show based on param\n        if (types.isString(param)) {\n            this.doShowWithPrefix(param);\n        }\n        else {\n            if (options && options.value) {\n                this.restoreLastInput(options.value);\n            }\n            this.doShowWithInput(param, options && options.autoFocus ? options.autoFocus : {});\n        }\n        // Respect selectAll option\n        if (options && options.inputSelection && !this.quickNavigateConfiguration) {\n            this.inputBox.select(options.inputSelection);\n        }\n        if (this.callbacks.onShow) {\n            this.callbacks.onShow();\n        }\n    };\n    QuickOpenWidget.prototype.restoreLastInput = function (lastInput) {\n        this.inputBox.value = lastInput;\n        this.inputBox.select();\n        this.callbacks.onType(lastInput);\n    };\n    QuickOpenWidget.prototype.doShowWithPrefix = function (prefix) {\n        this.inputBox.value = prefix;\n        this.callbacks.onType(prefix);\n    };\n    QuickOpenWidget.prototype.doShowWithInput = function (input, autoFocus) {\n        this.setInput(input, autoFocus);\n    };\n    QuickOpenWidget.prototype.setInputAndLayout = function (input, autoFocus) {\n        var _this = this;\n        this.treeContainer.style.height = this.getHeight(input) + \"px\";\n        this.tree.setInput(null).then(function () {\n            _this.model = input;\n            // ARIA\n            _this.inputElement.setAttribute('aria-haspopup', String(input && input.entries && input.entries.length > 0));\n            return _this.tree.setInput(input);\n        }).then(function () {\n            // Indicate entries to tree\n            _this.tree.layout();\n            var entries = input ? input.entries.filter(function (e) { return _this.isElementVisible(input, e); }) : [];\n            _this.updateResultCount(entries.length);\n            // Handle auto focus\n            if (entries.length) {\n                _this.autoFocus(input, entries, autoFocus);\n            }\n        });\n    };\n    QuickOpenWidget.prototype.isElementVisible = function (input, e) {\n        if (!input.filter) {\n            return true;\n        }\n        return input.filter.isVisible(e);\n    };\n    QuickOpenWidget.prototype.autoFocus = function (input, entries, autoFocus) {\n        if (autoFocus === void 0) { autoFocus = {}; }\n        // First check for auto focus of prefix matches\n        if (autoFocus.autoFocusPrefixMatch) {\n            var caseSensitiveMatch = void 0;\n            var caseInsensitiveMatch = void 0;\n            var prefix = autoFocus.autoFocusPrefixMatch;\n            var lowerCasePrefix = prefix.toLowerCase();\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var entry = entries_1[_i];\n                var label = input.dataSource.getLabel(entry) || '';\n                if (!caseSensitiveMatch && label.indexOf(prefix) === 0) {\n                    caseSensitiveMatch = entry;\n                }\n                else if (!caseInsensitiveMatch && label.toLowerCase().indexOf(lowerCasePrefix) === 0) {\n                    caseInsensitiveMatch = entry;\n                }\n                if (caseSensitiveMatch && caseInsensitiveMatch) {\n                    break;\n                }\n            }\n            var entryToFocus = caseSensitiveMatch || caseInsensitiveMatch;\n            if (entryToFocus) {\n                this.tree.setFocus(entryToFocus);\n                this.tree.reveal(entryToFocus, 0.5);\n                return;\n            }\n        }\n        // Second check for auto focus of first entry\n        if (autoFocus.autoFocusFirstEntry) {\n            this.tree.focusFirst();\n            this.tree.reveal(this.tree.getFocus());\n        }\n        // Third check for specific index option\n        else if (typeof autoFocus.autoFocusIndex === 'number') {\n            if (entries.length > autoFocus.autoFocusIndex) {\n                this.tree.focusNth(autoFocus.autoFocusIndex);\n                this.tree.reveal(this.tree.getFocus());\n            }\n        }\n        // Check for auto focus of second entry\n        else if (autoFocus.autoFocusSecondEntry) {\n            if (entries.length > 1) {\n                this.tree.focusNth(1);\n            }\n        }\n        // Finally check for auto focus of last entry\n        else if (autoFocus.autoFocusLastEntry) {\n            if (entries.length > 1) {\n                this.tree.focusLast();\n            }\n        }\n    };\n    QuickOpenWidget.prototype.refresh = function (input, autoFocus) {\n        var _this = this;\n        if (!this.isVisible()) {\n            return;\n        }\n        if (!input) {\n            input = this.tree.getInput();\n        }\n        if (!input) {\n            return;\n        }\n        // Apply height & Refresh\n        this.treeContainer.style.height = this.getHeight(input) + \"px\";\n        this.tree.refresh().then(function () {\n            // Indicate entries to tree\n            _this.tree.layout();\n            var entries = input ? input.entries.filter(function (e) { return _this.isElementVisible(input, e); }) : [];\n            _this.updateResultCount(entries.length);\n            // Handle auto focus\n            if (autoFocus) {\n                if (entries.length) {\n                    _this.autoFocus(input, entries, autoFocus);\n                }\n            }\n        });\n    };\n    QuickOpenWidget.prototype.getHeight = function (input) {\n        var _this = this;\n        var renderer = input.renderer;\n        if (!input) {\n            var itemHeight = renderer.getHeight(null);\n            return this.options.minItemsToShow ? this.options.minItemsToShow * itemHeight : 0;\n        }\n        var height = 0;\n        var preferredItemsHeight;\n        if (this.layoutDimensions && this.layoutDimensions.height) {\n            preferredItemsHeight = (this.layoutDimensions.height - 50 /* subtract height of input field (30px) and some spacing (drop shadow) to fit */) * 0.4 /* max 40% of screen */;\n        }\n        if (!preferredItemsHeight || preferredItemsHeight > QuickOpenWidget.MAX_ITEMS_HEIGHT) {\n            preferredItemsHeight = QuickOpenWidget.MAX_ITEMS_HEIGHT;\n        }\n        var entries = input.entries.filter(function (e) { return _this.isElementVisible(input, e); });\n        var maxEntries = this.options.maxItemsToShow || entries.length;\n        for (var i = 0; i < maxEntries && i < entries.length; i++) {\n            var entryHeight = renderer.getHeight(entries[i]);\n            if (height + entryHeight <= preferredItemsHeight) {\n                height += entryHeight;\n            }\n            else {\n                break;\n            }\n        }\n        return height;\n    };\n    QuickOpenWidget.prototype.updateResultCount = function (count) {\n        this.resultCount.textContent = nls.localize({ key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, \"{0} Results\", count);\n    };\n    QuickOpenWidget.prototype.hide = function (reason) {\n        if (!this.isVisible()) {\n            return;\n        }\n        this.visible = false;\n        DOM.hide(this.element);\n        this.element.blur();\n        // Clear input field and clear tree\n        this.inputBox.value = '';\n        this.tree.setInput(null);\n        // ARIA\n        this.inputElement.setAttribute('aria-haspopup', 'false');\n        // Reset Tree Height\n        this.treeContainer.style.height = (this.options.minItemsToShow ? this.options.minItemsToShow * 22 : 0) + \"px\";\n        // Clear any running Progress\n        this.progressBar.stop().hide();\n        // Clear Focus\n        if (this.tree.isDOMFocused()) {\n            this.tree.domBlur();\n        }\n        else if (this.inputBox.hasFocus()) {\n            this.inputBox.blur();\n        }\n        // Callbacks\n        if (reason === HideReason.ELEMENT_SELECTED) {\n            this.callbacks.onOk();\n        }\n        else {\n            this.callbacks.onCancel();\n        }\n        if (this.callbacks.onHide) {\n            this.callbacks.onHide(reason);\n        }\n    };\n    QuickOpenWidget.prototype.getQuickNavigateConfiguration = function () {\n        return this.quickNavigateConfiguration;\n    };\n    QuickOpenWidget.prototype.setPlaceHolder = function (placeHolder) {\n        if (this.inputBox) {\n            this.inputBox.setPlaceHolder(placeHolder);\n        }\n    };\n    QuickOpenWidget.prototype.setValue = function (value, selectionOrStableHint) {\n        if (this.inputBox) {\n            this.inputBox.value = value;\n            if (selectionOrStableHint === null) {\n                // null means stable-selection\n            }\n            else if (Array.isArray(selectionOrStableHint)) {\n                var start = selectionOrStableHint[0], end = selectionOrStableHint[1];\n                this.inputBox.select({ start: start, end: end });\n            }\n            else {\n                this.inputBox.select();\n            }\n        }\n    };\n    QuickOpenWidget.prototype.setPassword = function (isPassword) {\n        if (this.inputBox) {\n            this.inputBox.inputElement.type = isPassword ? 'password' : 'text';\n        }\n    };\n    QuickOpenWidget.prototype.setInput = function (input, autoFocus, ariaLabel) {\n        if (!this.isVisible()) {\n            return;\n        }\n        // If the input changes, indicate this to the tree\n        if (!!this.getInput()) {\n            this.onInputChanging();\n        }\n        // Adapt tree height to entries and apply input\n        this.setInputAndLayout(input, autoFocus);\n        // Apply ARIA\n        if (this.inputBox) {\n            this.inputBox.setAriaLabel(ariaLabel || DEFAULT_INPUT_ARIA_LABEL);\n        }\n    };\n    QuickOpenWidget.prototype.onInputChanging = function () {\n        var _this = this;\n        if (this.inputChangingTimeoutHandle) {\n            clearTimeout(this.inputChangingTimeoutHandle);\n            this.inputChangingTimeoutHandle = null;\n        }\n        // when the input is changing in quick open, we indicate this as CSS class to the widget\n        // for a certain timeout. this helps reducing some hectic UI updates when input changes quickly\n        DOM.addClass(this.element, 'content-changing');\n        this.inputChangingTimeoutHandle = setTimeout(function () {\n            DOM.removeClass(_this.element, 'content-changing');\n        }, 500);\n    };\n    QuickOpenWidget.prototype.getInput = function () {\n        return this.tree.getInput();\n    };\n    QuickOpenWidget.prototype.showInputDecoration = function (decoration) {\n        if (this.inputBox) {\n            this.inputBox.showMessage({ type: decoration === severity_1.default.Info ? inputBox_1.MessageType.INFO : decoration === severity_1.default.Warning ? inputBox_1.MessageType.WARNING : inputBox_1.MessageType.ERROR, content: '' });\n        }\n    };\n    QuickOpenWidget.prototype.clearInputDecoration = function () {\n        if (this.inputBox) {\n            this.inputBox.hideMessage();\n        }\n    };\n    QuickOpenWidget.prototype.focus = function () {\n        if (this.isVisible() && this.inputBox) {\n            this.inputBox.focus();\n        }\n    };\n    QuickOpenWidget.prototype.accept = function () {\n        if (this.isVisible()) {\n            var focus = this.tree.getFocus();\n            if (focus) {\n                this.elementSelected(focus);\n            }\n        }\n    };\n    QuickOpenWidget.prototype.getProgressBar = function () {\n        return this.progressBar;\n    };\n    QuickOpenWidget.prototype.getInputBox = function () {\n        return this.inputBox;\n    };\n    QuickOpenWidget.prototype.setExtraClass = function (clazz) {\n        var previousClass = this.element.getAttribute('quick-open-extra-class');\n        if (previousClass) {\n            DOM.removeClasses(this.element, previousClass);\n        }\n        if (clazz) {\n            DOM.addClasses(this.element, clazz);\n            this.element.setAttribute('quick-open-extra-class', clazz);\n        }\n        else if (previousClass) {\n            this.element.removeAttribute('quick-open-extra-class');\n        }\n    };\n    QuickOpenWidget.prototype.isVisible = function () {\n        return this.visible;\n    };\n    QuickOpenWidget.prototype.layout = function (dimension) {\n        this.layoutDimensions = dimension;\n        // Apply to quick open width (height is dynamic by number of items to show)\n        var quickOpenWidth = Math.min(this.layoutDimensions.width * 0.62 /* golden cut */, QuickOpenWidget.MAX_WIDTH);\n        if (this.element) {\n            // quick open\n            this.element.style.width = quickOpenWidth + \"px\";\n            this.element.style.marginLeft = \"-\" + quickOpenWidth / 2 + \"px\";\n            // input field\n            this.inputContainer.style.width = quickOpenWidth - 12 + \"px\";\n        }\n    };\n    QuickOpenWidget.prototype.gainingFocus = function () {\n        this.isLoosingFocus = false;\n    };\n    QuickOpenWidget.prototype.loosingFocus = function (e) {\n        var _this = this;\n        if (!this.isVisible()) {\n            return;\n        }\n        var relatedTarget = e.relatedTarget;\n        if (!this.quickNavigateConfiguration && DOM.isAncestor(relatedTarget, this.element)) {\n            return; // user clicked somewhere into quick open widget, do not close thereby\n        }\n        this.isLoosingFocus = true;\n        setTimeout(function () {\n            if (!_this.isLoosingFocus || _this.isDisposed) {\n                return;\n            }\n            var veto = _this.callbacks.onFocusLost && _this.callbacks.onFocusLost();\n            if (!veto) {\n                _this.hide(HideReason.FOCUS_LOST);\n            }\n        }, 0);\n    };\n    QuickOpenWidget.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.isDisposed = true;\n    };\n    QuickOpenWidget.MAX_WIDTH = 600; // Max total width of quick open widget\n    QuickOpenWidget.MAX_ITEMS_HEIGHT = 20 * 22; // Max height of item list below input field\n    return QuickOpenWidget;\n}(lifecycle_1.Disposable));\nexports.QuickOpenWidget = QuickOpenWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./quickopen';\nimport * as nls from 'vs/nls';\nimport * as browser from 'vs/base/browser/browser';\nimport * as types from 'vs/base/common/types';\nimport { IQuickNavigateConfiguration, IAutoFocus, IEntryRunContext, IModel, Mode, IKeyMods } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { Filter, Renderer, DataSource, IModelProvider, AccessibilityProvider } from 'vs/base/parts/quickopen/browser/quickOpenViewer';\nimport { ITree, ContextMenuEvent, IActionProvider, ITreeStyles, ITreeOptions, ITreeConfiguration } from 'vs/base/parts/tree/browser/tree';\nimport { InputBox, MessageType, IInputBoxStyles, IRange } from 'vs/base/browser/ui/inputbox/inputBox';\nimport Severity from 'vs/base/common/severity';\nimport { Tree } from 'vs/base/parts/tree/browser/treeImpl';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { DefaultController, ClickBehavior } from 'vs/base/parts/tree/browser/treeDefaults';\nimport * as DOM from 'vs/base/browser/dom';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ScrollbarVisibility } from 'vs/base/common/scrollable';\nimport { Color } from 'vs/base/common/color';\nimport { mixin } from 'vs/base/common/objects';\nimport { StandardMouseEvent, IMouseEvent } from 'vs/base/browser/mouseEvent';\n\nexport interface IQuickOpenCallbacks {\n\tonOk: () => void;\n\tonCancel: () => void;\n\tonType: (value: string) => void;\n\tonShow?: () => void;\n\tonHide?: (reason: HideReason) => void;\n\tonFocusLost?: () => boolean /* veto close */;\n}\n\nexport interface IQuickOpenOptions extends IQuickOpenStyles {\n\tminItemsToShow?: number;\n\tmaxItemsToShow?: number;\n\tinputPlaceHolder?: string;\n\tinputAriaLabel?: string;\n\tactionProvider?: IActionProvider;\n\tkeyboardSupport?: boolean;\n\ttreeCreator?: (container: HTMLElement, configuration: ITreeConfiguration, options?: ITreeOptions) => ITree;\n}\n\nexport interface IQuickOpenStyles extends IInputBoxStyles, ITreeStyles {\n\tbackground?: Color;\n\tforeground?: Color;\n\tborderColor?: Color;\n\tpickerGroupForeground?: Color;\n\tpickerGroupBorder?: Color;\n\twidgetShadow?: Color;\n\tprogressBarBackground?: Color;\n}\n\nexport interface IShowOptions {\n\tquickNavigateConfiguration?: IQuickNavigateConfiguration;\n\tautoFocus?: IAutoFocus;\n\tinputSelection?: IRange;\n\tvalue?: string;\n}\n\nexport class QuickOpenController extends DefaultController {\n\n\tonContextMenu(tree: ITree, element: any, event: ContextMenuEvent): boolean {\n\t\tif (browser.isMacintosh) {\n\t\t\treturn this.onLeftClick(tree, element, event); // https://github.com/Microsoft/vscode/issues/1011\n\t\t}\n\n\t\treturn super.onContextMenu(tree, element, event);\n\t}\n\n\tonMouseMiddleClick(tree: ITree, element: any, event: IMouseEvent): boolean {\n\t\treturn this.onLeftClick(tree, element, event);\n\t}\n}\n\nexport const enum HideReason {\n\tELEMENT_SELECTED,\n\tFOCUS_LOST,\n\tCANCELED\n}\n\nconst defaultStyles = {\n\tbackground: Color.fromHex('#1E1E1E'),\n\tforeground: Color.fromHex('#CCCCCC'),\n\tpickerGroupForeground: Color.fromHex('#0097FB'),\n\tpickerGroupBorder: Color.fromHex('#3F3F46'),\n\twidgetShadow: Color.fromHex('#000000'),\n\tprogressBarBackground: Color.fromHex('#0E70C0')\n};\n\nconst DEFAULT_INPUT_ARIA_LABEL = nls.localize('quickOpenAriaLabel', \"Quick picker. Type to narrow down results.\");\n\nexport class QuickOpenWidget extends Disposable implements IModelProvider {\n\n\tprivate static readonly MAX_WIDTH = 600;\t\t\t// Max total width of quick open widget\n\tprivate static readonly MAX_ITEMS_HEIGHT = 20 * 22;\t// Max height of item list below input field\n\n\tprivate isDisposed: boolean;\n\tprivate options: IQuickOpenOptions;\n\tprivate element: HTMLElement;\n\tprivate tree: ITree;\n\tprivate inputBox: InputBox;\n\tprivate inputContainer: HTMLElement;\n\tprivate helpText: HTMLElement;\n\tprivate resultCount: HTMLElement;\n\tprivate treeContainer: HTMLElement;\n\tprivate progressBar: ProgressBar;\n\tprivate visible: boolean;\n\tprivate isLoosingFocus: boolean;\n\tprivate callbacks: IQuickOpenCallbacks;\n\tprivate quickNavigateConfiguration: IQuickNavigateConfiguration | undefined;\n\tprivate container: HTMLElement;\n\tprivate treeElement: HTMLElement;\n\tprivate inputElement: HTMLElement;\n\tprivate layoutDimensions: DOM.Dimension;\n\tprivate model: IModel<any> | null;\n\tprivate inputChangingTimeoutHandle: any;\n\tprivate styles: IQuickOpenStyles;\n\tprivate renderer: Renderer;\n\n\tconstructor(container: HTMLElement, callbacks: IQuickOpenCallbacks, options: IQuickOpenOptions) {\n\t\tsuper();\n\n\t\tthis.isDisposed = false;\n\t\tthis.container = container;\n\t\tthis.callbacks = callbacks;\n\t\tthis.options = options;\n\t\tthis.styles = options || Object.create(null);\n\t\tmixin(this.styles, defaultStyles, false);\n\t\tthis.model = null;\n\t}\n\n\tgetElement(): HTMLElement {\n\t\treturn this.element;\n\t}\n\n\tgetModel(): IModel<any> {\n\t\treturn this.model!;\n\t}\n\n\tsetCallbacks(callbacks: IQuickOpenCallbacks): void {\n\t\tthis.callbacks = callbacks;\n\t}\n\n\tcreate(): HTMLElement {\n\n\t\t// Container\n\t\tthis.element = document.createElement('div');\n\t\tDOM.addClass(this.element, 'monaco-quick-open-widget');\n\t\tthis.container.appendChild(this.element);\n\n\t\tthis._register(DOM.addDisposableListener(this.element, DOM.EventType.CONTEXT_MENU, e => DOM.EventHelper.stop(e, true))); // Do this to fix an issue on Mac where the menu goes into the way\n\t\tthis._register(DOM.addDisposableListener(this.element, DOM.EventType.FOCUS, e => this.gainingFocus(), true));\n\t\tthis._register(DOM.addDisposableListener(this.element, DOM.EventType.BLUR, e => this.loosingFocus(e), true));\n\t\tthis._register(DOM.addDisposableListener(this.element, DOM.EventType.KEY_DOWN, e => {\n\t\t\tconst keyboardEvent: StandardKeyboardEvent = new StandardKeyboardEvent(e);\n\t\t\tif (keyboardEvent.keyCode === KeyCode.Escape) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\n\t\t\t\tthis.hide(HideReason.CANCELED);\n\t\t\t} else if (keyboardEvent.keyCode === KeyCode.Tab && !keyboardEvent.altKey && !keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {\n\t\t\t\tconst stops = (e.currentTarget as HTMLElement).querySelectorAll('input, .monaco-tree, .monaco-tree-row.focused .action-label.icon') as NodeListOf<HTMLElement>;\n\t\t\t\tif (keyboardEvent.shiftKey && keyboardEvent.target === stops[0]) {\n\t\t\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\t\t\tstops[stops.length - 1].focus();\n\t\t\t\t} else if (!keyboardEvent.shiftKey && keyboardEvent.target === stops[stops.length - 1]) {\n\t\t\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\t\t\tstops[0].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Progress Bar\n\t\tthis.progressBar = this._register(new ProgressBar(this.element, { progressBarBackground: this.styles.progressBarBackground }));\n\t\tthis.progressBar.hide();\n\n\t\t// Input Field\n\t\tthis.inputContainer = document.createElement('div');\n\t\tDOM.addClass(this.inputContainer, 'quick-open-input');\n\t\tthis.element.appendChild(this.inputContainer);\n\n\t\tthis.inputBox = this._register(new InputBox(this.inputContainer, undefined, {\n\t\t\tplaceholder: this.options.inputPlaceHolder || '',\n\t\t\tariaLabel: DEFAULT_INPUT_ARIA_LABEL,\n\t\t\tinputBackground: this.styles.inputBackground,\n\t\t\tinputForeground: this.styles.inputForeground,\n\t\t\tinputBorder: this.styles.inputBorder,\n\t\t\tinputValidationInfoBackground: this.styles.inputValidationInfoBackground,\n\t\t\tinputValidationInfoForeground: this.styles.inputValidationInfoForeground,\n\t\t\tinputValidationInfoBorder: this.styles.inputValidationInfoBorder,\n\t\t\tinputValidationWarningBackground: this.styles.inputValidationWarningBackground,\n\t\t\tinputValidationWarningForeground: this.styles.inputValidationWarningForeground,\n\t\t\tinputValidationWarningBorder: this.styles.inputValidationWarningBorder,\n\t\t\tinputValidationErrorBackground: this.styles.inputValidationErrorBackground,\n\t\t\tinputValidationErrorForeground: this.styles.inputValidationErrorForeground,\n\t\t\tinputValidationErrorBorder: this.styles.inputValidationErrorBorder\n\t\t}));\n\n\t\tthis.inputElement = this.inputBox.inputElement;\n\t\tthis.inputElement.setAttribute('role', 'combobox');\n\t\tthis.inputElement.setAttribute('aria-haspopup', 'false');\n\t\tthis.inputElement.setAttribute('aria-autocomplete', 'list');\n\n\t\tthis._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.INPUT, (e: Event) => this.onType()));\n\t\tthis._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.KEY_DOWN, (e: KeyboardEvent) => {\n\t\t\tconst keyboardEvent: StandardKeyboardEvent = new StandardKeyboardEvent(e);\n\t\t\tconst shouldOpenInBackground = this.shouldOpenInBackground(keyboardEvent);\n\n\t\t\t// Do not handle Tab: It is used to navigate between elements without mouse\n\t\t\tif (keyboardEvent.keyCode === KeyCode.Tab) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Pass tree navigation keys to the tree but leave focus in input field\n\t\t\telse if (keyboardEvent.keyCode === KeyCode.DownArrow || keyboardEvent.keyCode === KeyCode.UpArrow || keyboardEvent.keyCode === KeyCode.PageDown || keyboardEvent.keyCode === KeyCode.PageUp) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\n\t\t\t\tthis.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey);\n\n\t\t\t\t// Position cursor at the end of input to allow right arrow (open in background)\n\t\t\t\t// to function immediately unless the user has made a selection\n\t\t\t\tif (this.inputBox.inputElement.selectionStart === this.inputBox.inputElement.selectionEnd) {\n\t\t\t\t\tthis.inputBox.inputElement.selectionStart = this.inputBox.value.length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Select element on Enter or on Arrow-Right if we are at the end of the input\n\t\t\telse if (keyboardEvent.keyCode === KeyCode.Enter || shouldOpenInBackground) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\n\t\t\t\tconst focus = this.tree.getFocus();\n\t\t\t\tif (focus) {\n\t\t\t\t\tthis.elementSelected(focus, e, shouldOpenInBackground ? Mode.OPEN_IN_BACKGROUND : Mode.OPEN);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Result count for screen readers\n\t\tthis.resultCount = document.createElement('div');\n\t\tDOM.addClass(this.resultCount, 'quick-open-result-count');\n\t\tthis.resultCount.setAttribute('aria-live', 'polite');\n\t\tthis.resultCount.setAttribute('aria-atomic', 'true');\n\t\tthis.element.appendChild(this.resultCount);\n\n\t\t// Tree\n\t\tthis.treeContainer = document.createElement('div');\n\t\tDOM.addClass(this.treeContainer, 'quick-open-tree');\n\t\tthis.element.appendChild(this.treeContainer);\n\n\t\tconst createTree = this.options.treeCreator || ((container, config, opts) => new Tree(container, config, opts));\n\n\t\tthis.tree = this._register(createTree(this.treeContainer, {\n\t\t\tdataSource: new DataSource(this),\n\t\t\tcontroller: new QuickOpenController({ clickBehavior: ClickBehavior.ON_MOUSE_UP, keyboardSupport: this.options.keyboardSupport }),\n\t\t\trenderer: (this.renderer = new Renderer(this, this.styles)),\n\t\t\tfilter: new Filter(this),\n\t\t\taccessibilityProvider: new AccessibilityProvider(this)\n\t\t}, {\n\t\t\t\ttwistiePixels: 11,\n\t\t\t\tindentPixels: 0,\n\t\t\t\talwaysFocused: true,\n\t\t\t\tverticalScrollMode: ScrollbarVisibility.Visible,\n\t\t\t\thorizontalScrollMode: ScrollbarVisibility.Hidden,\n\t\t\t\tariaLabel: nls.localize('treeAriaLabel', \"Quick Picker\"),\n\t\t\t\tkeyboardSupport: this.options.keyboardSupport,\n\t\t\t\tpreventRootFocus: false\n\t\t\t}));\n\n\t\tthis.treeElement = this.tree.getHTMLElement();\n\n\t\t// Handle Focus and Selection event\n\t\tthis._register(this.tree.onDidChangeFocus(event => {\n\t\t\tthis.elementFocused(event.focus, event);\n\t\t}));\n\n\t\tthis._register(this.tree.onDidChangeSelection(event => {\n\t\t\tif (event.selection && event.selection.length > 0) {\n\t\t\t\tconst mouseEvent: StandardMouseEvent = event.payload && event.payload.originalEvent instanceof StandardMouseEvent ? event.payload.originalEvent : undefined;\n\t\t\t\tconst shouldOpenInBackground = mouseEvent ? this.shouldOpenInBackground(mouseEvent) : false;\n\n\t\t\t\tthis.elementSelected(event.selection[0], event, shouldOpenInBackground ? Mode.OPEN_IN_BACKGROUND : Mode.OPEN);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, e => {\n\t\t\tconst keyboardEvent: StandardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t// Only handle when in quick navigation mode\n\t\t\tif (!this.quickNavigateConfiguration) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Support keyboard navigation in quick navigation mode\n\t\t\tif (keyboardEvent.keyCode === KeyCode.DownArrow || keyboardEvent.keyCode === KeyCode.UpArrow || keyboardEvent.keyCode === KeyCode.PageDown || keyboardEvent.keyCode === KeyCode.PageUp) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\n\t\t\t\tthis.navigateInTree(keyboardEvent.keyCode);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_UP, e => {\n\t\t\tconst keyboardEvent: StandardKeyboardEvent = new StandardKeyboardEvent(e);\n\t\t\tconst keyCode = keyboardEvent.keyCode;\n\n\t\t\t// Only handle when in quick navigation mode\n\t\t\tif (!this.quickNavigateConfiguration) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Select element when keys are pressed that signal it\n\t\t\tconst quickNavKeys = this.quickNavigateConfiguration.keybindings;\n\t\t\tconst wasTriggerKeyPressed = keyCode === KeyCode.Enter || quickNavKeys.some(k => {\n\t\t\t\tconst [firstPart, chordPart] = k.getParts();\n\t\t\t\tif (chordPart) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (firstPart.shiftKey && keyCode === KeyCode.Shift) {\n\t\t\t\t\tif (keyboardEvent.ctrlKey || keyboardEvent.altKey || keyboardEvent.metaKey) {\n\t\t\t\t\t\treturn false; // this is an optimistic check for the shift key being used to navigate back in quick open\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (firstPart.altKey && keyCode === KeyCode.Alt) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (firstPart.ctrlKey && keyCode === KeyCode.Ctrl) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (firstPart.metaKey && keyCode === KeyCode.Meta) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tif (wasTriggerKeyPressed) {\n\t\t\t\tconst focus = this.tree.getFocus();\n\t\t\t\tif (focus) {\n\t\t\t\t\tthis.elementSelected(focus, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Support layout\n\t\tif (this.layoutDimensions) {\n\t\t\tthis.layout(this.layoutDimensions);\n\t\t}\n\n\t\tthis.applyStyles();\n\n\t\t// Allows focus to switch to next/previous entry after tab into an actionbar item\n\t\tthis._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, (e: KeyboardEvent) => {\n\t\t\tconst keyboardEvent: StandardKeyboardEvent = new StandardKeyboardEvent(e);\n\t\t\t// Only handle when not in quick navigation mode\n\t\t\tif (this.quickNavigateConfiguration) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (keyboardEvent.keyCode === KeyCode.DownArrow || keyboardEvent.keyCode === KeyCode.UpArrow || keyboardEvent.keyCode === KeyCode.PageDown || keyboardEvent.keyCode === KeyCode.PageUp) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\t\tthis.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey);\n\t\t\t\tthis.treeElement.focus();\n\t\t\t}\n\t\t}));\n\n\t\treturn this.element;\n\t}\n\n\tstyle(styles: IQuickOpenStyles): void {\n\t\tthis.styles = styles;\n\n\t\tthis.applyStyles();\n\t}\n\n\tprotected applyStyles(): void {\n\t\tif (this.element) {\n\t\t\tconst foreground = this.styles.foreground ? this.styles.foreground.toString() : null;\n\t\t\tconst background = this.styles.background ? this.styles.background.toString() : null;\n\t\t\tconst borderColor = this.styles.borderColor ? this.styles.borderColor.toString() : null;\n\t\t\tconst widgetShadow = this.styles.widgetShadow ? this.styles.widgetShadow.toString() : null;\n\n\t\t\tthis.element.style.color = foreground;\n\t\t\tthis.element.style.backgroundColor = background;\n\t\t\tthis.element.style.borderColor = borderColor;\n\t\t\tthis.element.style.borderWidth = borderColor ? '1px' : null;\n\t\t\tthis.element.style.borderStyle = borderColor ? 'solid' : null;\n\t\t\tthis.element.style.boxShadow = widgetShadow ? `0 5px 8px ${widgetShadow}` : null;\n\t\t}\n\n\t\tif (this.progressBar) {\n\t\t\tthis.progressBar.style({\n\t\t\t\tprogressBarBackground: this.styles.progressBarBackground\n\t\t\t});\n\t\t}\n\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.style({\n\t\t\t\tinputBackground: this.styles.inputBackground,\n\t\t\t\tinputForeground: this.styles.inputForeground,\n\t\t\t\tinputBorder: this.styles.inputBorder,\n\t\t\t\tinputValidationInfoBackground: this.styles.inputValidationInfoBackground,\n\t\t\t\tinputValidationInfoForeground: this.styles.inputValidationInfoForeground,\n\t\t\t\tinputValidationInfoBorder: this.styles.inputValidationInfoBorder,\n\t\t\t\tinputValidationWarningBackground: this.styles.inputValidationWarningBackground,\n\t\t\t\tinputValidationWarningForeground: this.styles.inputValidationWarningForeground,\n\t\t\t\tinputValidationWarningBorder: this.styles.inputValidationWarningBorder,\n\t\t\t\tinputValidationErrorBackground: this.styles.inputValidationErrorBackground,\n\t\t\t\tinputValidationErrorForeground: this.styles.inputValidationErrorForeground,\n\t\t\t\tinputValidationErrorBorder: this.styles.inputValidationErrorBorder\n\t\t\t});\n\t\t}\n\n\t\tif (this.tree && !this.options.treeCreator) {\n\t\t\tthis.tree.style(this.styles);\n\t\t}\n\n\t\tif (this.renderer) {\n\t\t\tthis.renderer.updateStyles(this.styles);\n\t\t}\n\t}\n\n\tprivate shouldOpenInBackground(e: StandardKeyboardEvent | StandardMouseEvent): boolean {\n\n\t\t// Keyboard\n\t\tif (e instanceof StandardKeyboardEvent) {\n\t\t\tif (e.keyCode !== KeyCode.RightArrow) {\n\t\t\t\treturn false; // only for right arrow\n\t\t\t}\n\n\t\t\tif (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {\n\t\t\t\treturn false; // no modifiers allowed\n\t\t\t}\n\n\t\t\t// validate the cursor is at the end of the input and there is no selection,\n\t\t\t// and if not prevent opening in the background such as the selection can be changed\n\t\t\tconst element = this.inputBox.inputElement;\n\t\t\treturn element.selectionEnd === this.inputBox.value.length && element.selectionStart === element.selectionEnd;\n\t\t}\n\n\t\t// Mouse\n\t\treturn e.middleButton;\n\t}\n\n\tprivate onType(): void {\n\t\tconst value = this.inputBox.value;\n\n\t\t// Adjust help text as needed if present\n\t\tif (this.helpText) {\n\t\t\tif (value) {\n\t\t\t\tDOM.hide(this.helpText);\n\t\t\t} else {\n\t\t\t\tDOM.show(this.helpText);\n\t\t\t}\n\t\t}\n\n\t\t// Send to callbacks\n\t\tthis.callbacks.onType(value);\n\t}\n\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration): void {\n\t\tif (this.isVisible()) {\n\n\t\t\t// Transition into quick navigate mode if not yet done\n\t\t\tif (!this.quickNavigateConfiguration && quickNavigate) {\n\t\t\t\tthis.quickNavigateConfiguration = quickNavigate;\n\t\t\t\tthis.tree.domFocus();\n\t\t\t}\n\n\t\t\t// Navigate\n\t\t\tthis.navigateInTree(next ? KeyCode.DownArrow : KeyCode.UpArrow);\n\t\t}\n\t}\n\n\tprivate navigateInTree(keyCode: KeyCode, isShift?: boolean): void {\n\t\tconst model: IModel<any> = this.tree.getInput();\n\t\tconst entries = model ? model.entries : [];\n\t\tconst oldFocus = this.tree.getFocus();\n\n\t\t// Normal Navigation\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\tthis.tree.focusNext();\n\t\t\t\tbreak;\n\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\tthis.tree.focusPrevious();\n\t\t\t\tbreak;\n\n\t\t\tcase KeyCode.PageDown:\n\t\t\t\tthis.tree.focusNextPage();\n\t\t\t\tbreak;\n\n\t\t\tcase KeyCode.PageUp:\n\t\t\t\tthis.tree.focusPreviousPage();\n\t\t\t\tbreak;\n\n\t\t\tcase KeyCode.Tab:\n\t\t\t\tif (isShift) {\n\t\t\t\t\tthis.tree.focusPrevious();\n\t\t\t\t} else {\n\t\t\t\t\tthis.tree.focusNext();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet newFocus = this.tree.getFocus();\n\n\t\t// Support cycle-through navigation if focus did not change\n\t\tif (entries.length > 1 && oldFocus === newFocus) {\n\n\t\t\t// Up from no entry or first entry goes down to last\n\t\t\tif (keyCode === KeyCode.UpArrow || (keyCode === KeyCode.Tab && isShift)) {\n\t\t\t\tthis.tree.focusLast();\n\t\t\t}\n\n\t\t\t// Down from last entry goes to up to first\n\t\t\telse if (keyCode === KeyCode.DownArrow || keyCode === KeyCode.Tab && !isShift) {\n\t\t\t\tthis.tree.focusFirst();\n\t\t\t}\n\t\t}\n\n\t\t// Reveal\n\t\tnewFocus = this.tree.getFocus();\n\t\tif (newFocus) {\n\t\t\tthis.tree.reveal(newFocus);\n\t\t}\n\t}\n\n\tprivate elementFocused(value: any, event?: any): void {\n\t\tif (!value || !this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// ARIA\n\t\tconst arivaActiveDescendant = this.treeElement.getAttribute('aria-activedescendant');\n\t\tif (arivaActiveDescendant) {\n\t\t\tthis.inputElement.setAttribute('aria-activedescendant', arivaActiveDescendant);\n\t\t} else {\n\t\t\tthis.inputElement.removeAttribute('aria-activedescendant');\n\t\t}\n\n\t\tconst context: IEntryRunContext = { event: event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };\n\t\tthis.model!.runner.run(value, Mode.PREVIEW, context);\n\t}\n\n\tprivate elementSelected(value: any, event?: any, preferredMode?: Mode): void {\n\t\tlet hide = true;\n\n\t\t// Trigger open of element on selection\n\t\tif (this.isVisible()) {\n\t\t\tlet mode = preferredMode || Mode.OPEN;\n\n\t\t\tconst context: IEntryRunContext = { event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };\n\n\t\t\thide = this.model!.runner.run(value, mode, context);\n\t\t}\n\n\t\t// Hide if command was run successfully\n\t\tif (hide) {\n\t\t\tthis.hide(HideReason.ELEMENT_SELECTED);\n\t\t}\n\t}\n\n\tprivate extractKeyMods(event: any): IKeyMods {\n\t\treturn {\n\t\t\tctrlCmd: event && (event.ctrlKey || event.metaKey || (event.payload && event.payload.originalEvent && (event.payload.originalEvent.ctrlKey || event.payload.originalEvent.metaKey))),\n\t\t\talt: event && (event.altKey || (event.payload && event.payload.originalEvent && event.payload.originalEvent.altKey))\n\t\t};\n\t}\n\n\tshow(prefix: string, options?: IShowOptions): void;\n\tshow(input: IModel<any>, options?: IShowOptions): void;\n\tshow(param: any, options?: IShowOptions): void {\n\t\tthis.visible = true;\n\t\tthis.isLoosingFocus = false;\n\t\tthis.quickNavigateConfiguration = options ? options.quickNavigateConfiguration : undefined;\n\n\t\t// Adjust UI for quick navigate mode\n\t\tif (this.quickNavigateConfiguration) {\n\t\t\tDOM.hide(this.inputContainer);\n\t\t\tDOM.show(this.element);\n\t\t\tthis.tree.domFocus();\n\t\t}\n\n\t\t// Otherwise use normal UI\n\t\telse {\n\t\t\tDOM.show(this.inputContainer);\n\t\t\tDOM.show(this.element);\n\t\t\tthis.inputBox.focus();\n\t\t}\n\n\t\t// Adjust Help text for IE\n\t\tif (this.helpText) {\n\t\t\tif (this.quickNavigateConfiguration || types.isString(param)) {\n\t\t\t\tDOM.hide(this.helpText);\n\t\t\t} else {\n\t\t\t\tDOM.show(this.helpText);\n\t\t\t}\n\t\t}\n\n\t\t// Show based on param\n\t\tif (types.isString(param)) {\n\t\t\tthis.doShowWithPrefix(param);\n\t\t} else {\n\t\t\tif (options && options.value) {\n\t\t\t\tthis.restoreLastInput(options.value);\n\t\t\t}\n\t\t\tthis.doShowWithInput(param, options && options.autoFocus ? options.autoFocus : {});\n\t\t}\n\n\t\t// Respect selectAll option\n\t\tif (options && options.inputSelection && !this.quickNavigateConfiguration) {\n\t\t\tthis.inputBox.select(options.inputSelection);\n\t\t}\n\n\t\tif (this.callbacks.onShow) {\n\t\t\tthis.callbacks.onShow();\n\t\t}\n\t}\n\n\tprivate restoreLastInput(lastInput: string) {\n\t\tthis.inputBox.value = lastInput;\n\t\tthis.inputBox.select();\n\t\tthis.callbacks.onType(lastInput);\n\t}\n\n\tprivate doShowWithPrefix(prefix: string): void {\n\t\tthis.inputBox.value = prefix;\n\t\tthis.callbacks.onType(prefix);\n\t}\n\n\tprivate doShowWithInput(input: IModel<any>, autoFocus: IAutoFocus): void {\n\t\tthis.setInput(input, autoFocus);\n\t}\n\n\tprivate setInputAndLayout(input: IModel<any>, autoFocus?: IAutoFocus): void {\n\t\tthis.treeContainer.style.height = `${this.getHeight(input)}px`;\n\n\t\tthis.tree.setInput(null).then(() => {\n\t\t\tthis.model = input;\n\n\t\t\t// ARIA\n\t\t\tthis.inputElement.setAttribute('aria-haspopup', String(input && input.entries && input.entries.length > 0));\n\n\t\t\treturn this.tree.setInput(input);\n\t\t}).then(() => {\n\n\t\t\t// Indicate entries to tree\n\t\t\tthis.tree.layout();\n\n\t\t\tconst entries = input ? input.entries.filter(e => this.isElementVisible(input, e)) : [];\n\t\t\tthis.updateResultCount(entries.length);\n\n\t\t\t// Handle auto focus\n\t\t\tif (entries.length) {\n\t\t\t\tthis.autoFocus(input, entries, autoFocus);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate isElementVisible<T>(input: IModel<T>, e: T): boolean {\n\t\tif (!input.filter) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn input.filter.isVisible(e);\n\t}\n\n\tprivate autoFocus(input: IModel<any>, entries: any[], autoFocus: IAutoFocus = {}): void {\n\n\t\t// First check for auto focus of prefix matches\n\t\tif (autoFocus.autoFocusPrefixMatch) {\n\t\t\tlet caseSensitiveMatch: any;\n\t\t\tlet caseInsensitiveMatch: any;\n\t\t\tconst prefix = autoFocus.autoFocusPrefixMatch;\n\t\t\tconst lowerCasePrefix = prefix.toLowerCase();\n\t\t\tfor (const entry of entries) {\n\t\t\t\tconst label = input.dataSource.getLabel(entry) || '';\n\n\t\t\t\tif (!caseSensitiveMatch && label.indexOf(prefix) === 0) {\n\t\t\t\t\tcaseSensitiveMatch = entry;\n\t\t\t\t} else if (!caseInsensitiveMatch && label.toLowerCase().indexOf(lowerCasePrefix) === 0) {\n\t\t\t\t\tcaseInsensitiveMatch = entry;\n\t\t\t\t}\n\n\t\t\t\tif (caseSensitiveMatch && caseInsensitiveMatch) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst entryToFocus = caseSensitiveMatch || caseInsensitiveMatch;\n\t\t\tif (entryToFocus) {\n\t\t\t\tthis.tree.setFocus(entryToFocus);\n\t\t\t\tthis.tree.reveal(entryToFocus, 0.5);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Second check for auto focus of first entry\n\t\tif (autoFocus.autoFocusFirstEntry) {\n\t\t\tthis.tree.focusFirst();\n\t\t\tthis.tree.reveal(this.tree.getFocus());\n\t\t}\n\n\t\t// Third check for specific index option\n\t\telse if (typeof autoFocus.autoFocusIndex === 'number') {\n\t\t\tif (entries.length > autoFocus.autoFocusIndex) {\n\t\t\t\tthis.tree.focusNth(autoFocus.autoFocusIndex);\n\t\t\t\tthis.tree.reveal(this.tree.getFocus());\n\t\t\t}\n\t\t}\n\n\t\t// Check for auto focus of second entry\n\t\telse if (autoFocus.autoFocusSecondEntry) {\n\t\t\tif (entries.length > 1) {\n\t\t\t\tthis.tree.focusNth(1);\n\t\t\t}\n\t\t}\n\n\t\t// Finally check for auto focus of last entry\n\t\telse if (autoFocus.autoFocusLastEntry) {\n\t\t\tif (entries.length > 1) {\n\t\t\t\tthis.tree.focusLast();\n\t\t\t}\n\t\t}\n\t}\n\n\trefresh(input?: IModel<any>, autoFocus?: IAutoFocus): void {\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!input) {\n\t\t\tinput = this.tree.getInput();\n\t\t}\n\n\t\tif (!input) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Apply height & Refresh\n\t\tthis.treeContainer.style.height = `${this.getHeight(input)}px`;\n\t\tthis.tree.refresh().then(() => {\n\n\t\t\t// Indicate entries to tree\n\t\t\tthis.tree.layout();\n\n\t\t\tconst entries = input ? input.entries!.filter(e => this.isElementVisible(input!, e)) : [];\n\t\t\tthis.updateResultCount(entries.length);\n\n\t\t\t// Handle auto focus\n\t\t\tif (autoFocus) {\n\t\t\t\tif (entries.length) {\n\t\t\t\t\tthis.autoFocus(input!, entries, autoFocus);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getHeight(input: IModel<any>): number {\n\t\tconst renderer = input.renderer;\n\n\t\tif (!input) {\n\t\t\tconst itemHeight = renderer.getHeight(null);\n\n\t\t\treturn this.options.minItemsToShow ? this.options.minItemsToShow * itemHeight : 0;\n\t\t}\n\n\t\tlet height = 0;\n\n\t\tlet preferredItemsHeight: number | undefined;\n\t\tif (this.layoutDimensions && this.layoutDimensions.height) {\n\t\t\tpreferredItemsHeight = (this.layoutDimensions.height - 50 /* subtract height of input field (30px) and some spacing (drop shadow) to fit */) * 0.4 /* max 40% of screen */;\n\t\t}\n\n\t\tif (!preferredItemsHeight || preferredItemsHeight > QuickOpenWidget.MAX_ITEMS_HEIGHT) {\n\t\t\tpreferredItemsHeight = QuickOpenWidget.MAX_ITEMS_HEIGHT;\n\t\t}\n\n\t\tconst entries = input.entries.filter(e => this.isElementVisible(input, e));\n\t\tconst maxEntries = this.options.maxItemsToShow || entries.length;\n\t\tfor (let i = 0; i < maxEntries && i < entries.length; i++) {\n\t\t\tconst entryHeight = renderer.getHeight(entries[i]);\n\t\t\tif (height + entryHeight <= preferredItemsHeight) {\n\t\t\t\theight += entryHeight;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn height;\n\t}\n\n\tupdateResultCount(count: number) {\n\t\tthis.resultCount.textContent = nls.localize({ key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, \"{0} Results\", count);\n\t}\n\n\thide(reason?: HideReason): void {\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visible = false;\n\t\tDOM.hide(this.element);\n\t\tthis.element.blur();\n\n\t\t// Clear input field and clear tree\n\t\tthis.inputBox.value = '';\n\t\tthis.tree.setInput(null);\n\n\t\t// ARIA\n\t\tthis.inputElement.setAttribute('aria-haspopup', 'false');\n\n\t\t// Reset Tree Height\n\t\tthis.treeContainer.style.height = `${this.options.minItemsToShow ? this.options.minItemsToShow * 22 : 0}px`;\n\n\t\t// Clear any running Progress\n\t\tthis.progressBar.stop().hide();\n\n\t\t// Clear Focus\n\t\tif (this.tree.isDOMFocused()) {\n\t\t\tthis.tree.domBlur();\n\t\t} else if (this.inputBox.hasFocus()) {\n\t\t\tthis.inputBox.blur();\n\t\t}\n\n\t\t// Callbacks\n\t\tif (reason === HideReason.ELEMENT_SELECTED) {\n\t\t\tthis.callbacks.onOk();\n\t\t} else {\n\t\t\tthis.callbacks.onCancel();\n\t\t}\n\n\t\tif (this.callbacks.onHide) {\n\t\t\tthis.callbacks.onHide(reason!);\n\t\t}\n\t}\n\n\tgetQuickNavigateConfiguration(): IQuickNavigateConfiguration {\n\t\treturn this.quickNavigateConfiguration!;\n\t}\n\n\tsetPlaceHolder(placeHolder: string): void {\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.setPlaceHolder(placeHolder);\n\t\t}\n\t}\n\n\tsetValue(value: string, selectionOrStableHint?: [number, number] | null): void {\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.value = value;\n\t\t\tif (selectionOrStableHint === null) {\n\t\t\t\t// null means stable-selection\n\t\t\t} else if (Array.isArray(selectionOrStableHint)) {\n\t\t\t\tconst [start, end] = selectionOrStableHint;\n\t\t\t\tthis.inputBox.select({ start, end });\n\t\t\t} else {\n\t\t\t\tthis.inputBox.select();\n\t\t\t}\n\t\t}\n\t}\n\n\tsetPassword(isPassword: boolean): void {\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.inputElement.type = isPassword ? 'password' : 'text';\n\t\t}\n\t}\n\n\tsetInput(input: IModel<any>, autoFocus?: IAutoFocus, ariaLabel?: string): void {\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the input changes, indicate this to the tree\n\t\tif (!!this.getInput()) {\n\t\t\tthis.onInputChanging();\n\t\t}\n\n\t\t// Adapt tree height to entries and apply input\n\t\tthis.setInputAndLayout(input, autoFocus);\n\n\t\t// Apply ARIA\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.setAriaLabel(ariaLabel || DEFAULT_INPUT_ARIA_LABEL);\n\t\t}\n\t}\n\n\tprivate onInputChanging(): void {\n\t\tif (this.inputChangingTimeoutHandle) {\n\t\t\tclearTimeout(this.inputChangingTimeoutHandle);\n\t\t\tthis.inputChangingTimeoutHandle = null;\n\t\t}\n\n\t\t// when the input is changing in quick open, we indicate this as CSS class to the widget\n\t\t// for a certain timeout. this helps reducing some hectic UI updates when input changes quickly\n\t\tDOM.addClass(this.element, 'content-changing');\n\t\tthis.inputChangingTimeoutHandle = setTimeout(() => {\n\t\t\tDOM.removeClass(this.element, 'content-changing');\n\t\t}, 500);\n\t}\n\n\tgetInput(): IModel<any> {\n\t\treturn this.tree.getInput();\n\t}\n\n\tshowInputDecoration(decoration: Severity): void {\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.showMessage({ type: decoration === Severity.Info ? MessageType.INFO : decoration === Severity.Warning ? MessageType.WARNING : MessageType.ERROR, content: '' });\n\t\t}\n\t}\n\n\tclearInputDecoration(): void {\n\t\tif (this.inputBox) {\n\t\t\tthis.inputBox.hideMessage();\n\t\t}\n\t}\n\n\tfocus(): void {\n\t\tif (this.isVisible() && this.inputBox) {\n\t\t\tthis.inputBox.focus();\n\t\t}\n\t}\n\n\taccept(): void {\n\t\tif (this.isVisible()) {\n\t\t\tconst focus = this.tree.getFocus();\n\t\t\tif (focus) {\n\t\t\t\tthis.elementSelected(focus);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetProgressBar(): ProgressBar {\n\t\treturn this.progressBar;\n\t}\n\n\tgetInputBox(): InputBox {\n\t\treturn this.inputBox;\n\t}\n\n\tsetExtraClass(clazz: string | null): void {\n\t\tconst previousClass = this.element.getAttribute('quick-open-extra-class');\n\t\tif (previousClass) {\n\t\t\tDOM.removeClasses(this.element, previousClass);\n\t\t}\n\n\t\tif (clazz) {\n\t\t\tDOM.addClasses(this.element, clazz);\n\t\t\tthis.element.setAttribute('quick-open-extra-class', clazz);\n\t\t} else if (previousClass) {\n\t\t\tthis.element.removeAttribute('quick-open-extra-class');\n\t\t}\n\t}\n\n\tisVisible(): boolean {\n\t\treturn this.visible;\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\t\tthis.layoutDimensions = dimension;\n\n\t\t// Apply to quick open width (height is dynamic by number of items to show)\n\t\tconst quickOpenWidth = Math.min(this.layoutDimensions.width * 0.62 /* golden cut */, QuickOpenWidget.MAX_WIDTH);\n\t\tif (this.element) {\n\n\t\t\t// quick open\n\t\t\tthis.element.style.width = `${quickOpenWidth}px`;\n\t\t\tthis.element.style.marginLeft = `-${quickOpenWidth / 2}px`;\n\n\t\t\t// input field\n\t\t\tthis.inputContainer.style.width = `${quickOpenWidth - 12}px`;\n\t\t}\n\t}\n\n\tprivate gainingFocus(): void {\n\t\tthis.isLoosingFocus = false;\n\t}\n\n\tprivate loosingFocus(e: FocusEvent): void {\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst relatedTarget = e.relatedTarget as HTMLElement;\n\t\tif (!this.quickNavigateConfiguration && DOM.isAncestor(relatedTarget, this.element)) {\n\t\t\treturn; // user clicked somewhere into quick open widget, do not close thereby\n\t\t}\n\n\t\tthis.isLoosingFocus = true;\n\t\tsetTimeout(() => {\n\t\t\tif (!this.isLoosingFocus || this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst veto = this.callbacks.onFocusLost && this.callbacks.onFocusLost();\n\t\t\tif (!veto) {\n\t\t\t\tthis.hide(HideReason.FOCUS_LOST);\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.isDisposed = true;\n\t}\n}\n"]}]}