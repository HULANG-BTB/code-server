{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scm.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scm.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.VIEWLET_ID = 'workbench.view.scm';\nexports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\nexports.ISCMService = instantiation_1.createDecorator('scm');\nvar InputValidationType;\n(function (InputValidationType) {\n    InputValidationType[InputValidationType[\"Error\"] = 0] = \"Error\";\n    InputValidationType[InputValidationType[\"Warning\"] = 1] = \"Warning\";\n    InputValidationType[InputValidationType[\"Information\"] = 2] = \"Information\";\n})(InputValidationType = exports.InputValidationType || (exports.InputValidationType = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scm.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scm.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iEAAgE;AAChE,mDAA0H;AAE1H,gFAAiF;AAOpE,QAAA,UAAU,GAAG,oBAAoB,CAAC;AAClC,QAAA,cAAc,GAAkB,mBAAQ,CAAC,EAAE,CAA0B,kBAAuB,CAAC,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,kBAAU,CAAC,CAAC;AAMvJ,QAAA,WAAW,GAAG,+BAAe,CAAc,KAAK,CAAC,CAAC;AAmD/D,IAAkB,mBAIjB;AAJD,WAAkB,mBAAmB;IACpC,+DAAS,CAAA;IACT,mEAAW,CAAA;IACX,2EAAe,CAAA;AAChB,CAAC,EAJiB,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAIpC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IViewContainersRegistry, ViewContainer, Extensions as ViewContainerExtensions } from 'vs/workbench/common/views';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Command } from 'vs/editor/common/modes';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { ISequence } from 'vs/base/common/sequence';\n\nexport const VIEWLET_ID = 'workbench.view.scm';\nexport const VIEW_CONTAINER: ViewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer(VIEWLET_ID);\n\nexport interface IBaselineResourceProvider {\n\tgetBaselineResource(resource: URI): Promise<URI>;\n}\n\nexport const ISCMService = createDecorator<ISCMService>('scm');\n\nexport interface ISCMResourceDecorations {\n\ticon?: URI;\n\ticonDark?: URI;\n\ttooltip?: string;\n\tstrikeThrough?: boolean;\n\tfaded?: boolean;\n\n\tsource?: string;\n\tletter?: string;\n\tcolor?: ColorIdentifier;\n}\n\nexport interface ISCMResource {\n\treadonly resourceGroup: ISCMResourceGroup;\n\treadonly sourceUri: URI;\n\treadonly decorations: ISCMResourceDecorations;\n\topen(): Promise<void>;\n}\n\nexport interface ISCMResourceGroup extends ISequence<ISCMResource> {\n\treadonly provider: ISCMProvider;\n\treadonly label: string;\n\treadonly id: string;\n\treadonly hideWhenEmpty: boolean;\n\treadonly onDidChange: Event<void>;\n}\n\nexport interface ISCMProvider extends IDisposable {\n\treadonly label: string;\n\treadonly id: string;\n\treadonly contextValue: string;\n\n\treadonly groups: ISequence<ISCMResourceGroup>;\n\n\t// TODO@Joao: remove\n\treadonly onDidChangeResources: Event<void>;\n\n\treadonly rootUri?: URI;\n\treadonly count?: number;\n\treadonly commitTemplate?: string;\n\treadonly onDidChangeCommitTemplate?: Event<string>;\n\treadonly onDidChangeStatusBarCommands?: Event<Command[]>;\n\treadonly acceptInputCommand?: Command;\n\treadonly statusBarCommands?: Command[];\n\treadonly onDidChange: Event<void>;\n\n\tgetOriginalResource(uri: URI): Promise<URI | null>;\n}\n\nexport const enum InputValidationType {\n\tError = 0,\n\tWarning = 1,\n\tInformation = 2\n}\n\nexport interface IInputValidation {\n\tmessage: string;\n\ttype: InputValidationType;\n}\n\nexport interface IInputValidator {\n\t(value: string, cursorPosition: number): Promise<IInputValidation | undefined>;\n}\n\nexport interface ISCMInput {\n\tvalue: string;\n\treadonly onDidChange: Event<string>;\n\n\tplaceholder: string;\n\treadonly onDidChangePlaceholder: Event<string>;\n\n\tvalidateInput: IInputValidator;\n\treadonly onDidChangeValidateInput: Event<void>;\n\n\tvisible: boolean;\n\treadonly onDidChangeVisibility: Event<boolean>;\n}\n\nexport interface ISCMRepository extends IDisposable {\n\treadonly onDidFocus: Event<void>;\n\treadonly selected: boolean;\n\treadonly onDidChangeSelection: Event<boolean>;\n\treadonly provider: ISCMProvider;\n\treadonly input: ISCMInput;\n\tfocus(): void;\n\tsetSelected(selected: boolean): void;\n}\n\nexport interface ISCMService {\n\n\treadonly _serviceBrand: any;\n\treadonly onDidAddRepository: Event<ISCMRepository>;\n\treadonly onDidRemoveRepository: Event<ISCMRepository>;\n\n\treadonly repositories: ISCMRepository[];\n\treadonly selectedRepositories: ISCMRepository[];\n\treadonly onDidChangeSelectedRepositories: Event<ISCMRepository[]>;\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository;\n}\n"]}]}