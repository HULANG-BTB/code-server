{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path_1 = require(\"vs/base/common/path\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar resources = require(\"vs/base/common/resources\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar suggest_1 = require(\"vs/editor/contrib/suggest/suggest\");\nvar nls_1 = require(\"vs/nls\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar snippets_contribution_1 = require(\"vs/workbench/contrib/snippets/browser/snippets.contribution\");\nvar snippetsFile_1 = require(\"vs/workbench/contrib/snippets/browser/snippetsFile\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar workbenchModeService_1 = require(\"vs/workbench/services/mode/common/workbenchModeService\");\nvar snippetCompletionProvider_1 = require(\"./snippetCompletionProvider\");\nvar snippetExt;\n(function (snippetExt) {\n    function toValidSnippet(extension, snippet, modeService) {\n        if (strings_1.isFalsyOrWhitespace(snippet.path)) {\n            extension.collector.error(nls_1.localize('invalid.path.0', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", extension.description.name, String(snippet.path)));\n            return null;\n        }\n        if (strings_1.isFalsyOrWhitespace(snippet.language) && !strings_1.endsWith(snippet.path, '.code-snippets')) {\n            extension.collector.error(nls_1.localize('invalid.language.0', \"When omitting the language, the value of `contributes.{0}.path` must be a `.code-snippets`-file. Provided value: {1}\", extension.description.name, String(snippet.path)));\n            return null;\n        }\n        if (!strings_1.isFalsyOrWhitespace(snippet.language) && !modeService.isRegisteredMode(snippet.language)) {\n            extension.collector.error(nls_1.localize('invalid.language', \"Unknown language in `contributes.{0}.language`. Provided value: {1}\", extension.description.name, String(snippet.language)));\n            return null;\n        }\n        var extensionLocation = extension.description.extensionLocation;\n        var snippetLocation = resources.joinPath(extensionLocation, snippet.path);\n        if (!resources.isEqualOrParent(snippetLocation, extensionLocation)) {\n            extension.collector.error(nls_1.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", extension.description.name, snippetLocation.path, extensionLocation.path));\n            return null;\n        }\n        return {\n            language: snippet.language,\n            location: snippetLocation\n        };\n    }\n    snippetExt.toValidSnippet = toValidSnippet;\n    snippetExt.snippetsContribution = {\n        description: nls_1.localize('vscode.extension.contributes.snippets', 'Contributes snippets.'),\n        type: 'array',\n        defaultSnippets: [{ body: [{ language: '', path: '' }] }],\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { language: '${1:id}', path: './snippets/${2:id}.json.' } }],\n            properties: {\n                language: {\n                    description: nls_1.localize('vscode.extension.contributes.snippets-language', 'Language identifier for which this snippet is contributed to.'),\n                    type: 'string'\n                },\n                path: {\n                    description: nls_1.localize('vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \\'./snippets/\\'.'),\n                    type: 'string'\n                }\n            }\n        }\n    };\n    snippetExt.point = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'snippets',\n        deps: [workbenchModeService_1.languagesExtPoint],\n        jsonSchema: snippetExt.snippetsContribution\n    });\n})(snippetExt || (snippetExt = {}));\nfunction watch(service, resource, callback) {\n    var listener = service.onFileChanges(function (e) {\n        for (var _i = 0, _a = e.changes; _i < _a.length; _i++) {\n            var change = _a[_i];\n            if (resources.isEqualOrParent(change.resource, resource)) {\n                callback(change.type, change.resource);\n            }\n        }\n    });\n    service.watchFileChanges(resource);\n    return {\n        dispose: function () {\n            listener.dispose();\n            service.unwatchFileChanges(resource);\n        }\n    };\n}\nvar SnippetsService = /** @class */ (function () {\n    function SnippetsService(_environmentService, _contextService, _modeService, _logService, _fileService, lifecycleService) {\n        var _this = this;\n        this._environmentService = _environmentService;\n        this._contextService = _contextService;\n        this._modeService = _modeService;\n        this._logService = _logService;\n        this._fileService = _fileService;\n        this._disposables = [];\n        this._pendingWork = [];\n        this._files = new Map();\n        this._pendingWork.push(Promise.resolve(lifecycleService.when(lifecycle_2.LifecyclePhase.Restored).then(function () {\n            _this._initExtensionSnippets();\n            _this._initUserSnippets();\n            _this._initWorkspaceSnippets();\n        })));\n        suggest_1.setSnippetSuggestSupport(new snippetCompletionProvider_1.SnippetCompletionProvider(this._modeService, this));\n    }\n    SnippetsService.prototype.dispose = function () {\n        lifecycle_1.dispose(this._disposables);\n    };\n    SnippetsService.prototype._joinSnippets = function () {\n        var promises = this._pendingWork.slice(0);\n        this._pendingWork.length = 0;\n        return Promise.all(promises);\n    };\n    SnippetsService.prototype.getSnippetFiles = function () {\n        var _this = this;\n        return this._joinSnippets().then(function () { return map_1.values(_this._files); });\n    };\n    SnippetsService.prototype.getSnippets = function (languageId) {\n        var _this = this;\n        return this._joinSnippets().then(function () {\n            var result = [];\n            var promises = [];\n            var languageIdentifier = _this._modeService.getLanguageIdentifier(languageId);\n            if (languageIdentifier) {\n                var langName_1 = languageIdentifier.language;\n                _this._files.forEach(function (file) {\n                    promises.push(file.load()\n                        .then(function (file) { return file.select(langName_1, result); })\n                        .catch(function (err) { return _this._logService.error(err, file.location.toString()); }));\n                });\n            }\n            return Promise.all(promises).then(function () { return result; });\n        });\n    };\n    SnippetsService.prototype.getSnippetsSync = function (languageId) {\n        var result = [];\n        var languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n        if (languageIdentifier) {\n            var langName_2 = languageIdentifier.language;\n            this._files.forEach(function (file) {\n                // kick off loading (which is a noop in case it's already loaded)\n                // and optimistically collect snippets\n                file.load().catch(function (err) { });\n                file.select(langName_2, result);\n            });\n        }\n        return result;\n    };\n    // --- loading, watching\n    SnippetsService.prototype._initExtensionSnippets = function () {\n        var _this = this;\n        snippetExt.point.setHandler(function (extensions) {\n            _this._files.forEach(function (value, key) {\n                if (value.source === snippetsFile_1.SnippetSource.Extension) {\n                    _this._files.delete(key);\n                }\n            });\n            var _loop_1 = function (extension) {\n                var _loop_2 = function (contribution) {\n                    var validContribution = snippetExt.toValidSnippet(extension, contribution, _this._modeService);\n                    if (!validContribution) {\n                        return \"continue\";\n                    }\n                    var resource = validContribution.location.toString();\n                    var file = _this._files.get(resource);\n                    if (file) {\n                        if (file.defaultScopes) {\n                            file.defaultScopes.push(validContribution.language);\n                        }\n                        else {\n                            file.defaultScopes = [];\n                        }\n                    }\n                    else {\n                        var file_1 = new snippetsFile_1.SnippetFile(snippetsFile_1.SnippetSource.Extension, validContribution.location, validContribution.language ? [validContribution.language] : undefined, extension.description, _this._fileService);\n                        _this._files.set(file_1.location.toString(), file_1);\n                        if (_this._environmentService.isExtensionDevelopment) {\n                            file_1.load().then(function (file) {\n                                // warn about bad tabstop/variable usage\n                                if (file.data.some(function (snippet) { return snippet.isBogous; })) {\n                                    extension.collector.warn(nls_1.localize('badVariableUse', \"One or more snippets from the extension '{0}' very likely confuse snippet-variables and snippet-placeholders (see https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax for more details)\", extension.description.name));\n                                }\n                            }, function (err) {\n                                // generic error\n                                extension.collector.warn(nls_1.localize('badFile', \"The snippet file \\\"{0}\\\" could not be read.\", file_1.location.toString()));\n                            });\n                        }\n                    }\n                };\n                for (var _i = 0, _a = extension.value; _i < _a.length; _i++) {\n                    var contribution = _a[_i];\n                    _loop_2(contribution);\n                }\n            };\n            for (var _i = 0, extensions_2 = extensions; _i < extensions_2.length; _i++) {\n                var extension = extensions_2[_i];\n                _loop_1(extension);\n            }\n        });\n    };\n    SnippetsService.prototype._initWorkspaceSnippets = function () {\n        var _this = this;\n        // workspace stuff\n        var disposables = [];\n        var updateWorkspaceSnippets = function () {\n            disposables = lifecycle_1.dispose(disposables);\n            _this._pendingWork.push(_this._initWorkspaceFolderSnippets(_this._contextService.getWorkspace(), disposables));\n        };\n        this._disposables.push({\n            dispose: function () { lifecycle_1.dispose(disposables); }\n        });\n        this._disposables.push(this._contextService.onDidChangeWorkspaceFolders(updateWorkspaceSnippets));\n        this._disposables.push(this._contextService.onDidChangeWorkbenchState(updateWorkspaceSnippets));\n        updateWorkspaceSnippets();\n    };\n    SnippetsService.prototype._initWorkspaceFolderSnippets = function (workspace, bucket) {\n        var _this = this;\n        var promises = workspace.folders.map(function (folder) {\n            var snippetFolder = folder.toResource('.vscode');\n            return _this._fileService.existsFile(snippetFolder).then(function (value) {\n                if (value) {\n                    _this._initFolderSnippets(snippetsFile_1.SnippetSource.Workspace, snippetFolder, bucket);\n                }\n                else {\n                    // watch\n                    bucket.push(watch(_this._fileService, snippetFolder, function (type) {\n                        if (type === files_1.FileChangeType.ADDED) {\n                            _this._initFolderSnippets(snippetsFile_1.SnippetSource.Workspace, snippetFolder, bucket);\n                        }\n                    }));\n                }\n            });\n        });\n        return Promise.all(promises);\n    };\n    SnippetsService.prototype._initUserSnippets = function () {\n        var _this = this;\n        var userSnippetsFolder = uri_1.URI.file(path_1.join(this._environmentService.appSettingsHome, 'snippets'));\n        return this._fileService.createFolder(userSnippetsFolder).then(function () { return _this._initFolderSnippets(snippetsFile_1.SnippetSource.User, userSnippetsFolder, _this._disposables); });\n    };\n    SnippetsService.prototype._initFolderSnippets = function (source, folder, bucket) {\n        var _this = this;\n        var disposables = [];\n        var addFolderSnippets = function (type) {\n            disposables = lifecycle_1.dispose(disposables);\n            if (type === files_1.FileChangeType.DELETED) {\n                return Promise.resolve();\n            }\n            return _this._fileService.resolveFile(folder).then(function (stat) {\n                for (var _i = 0, _a = stat.children || []; _i < _a.length; _i++) {\n                    var entry = _a[_i];\n                    disposables.push(_this._addSnippetFile(entry.resource, source));\n                }\n            }, function (err) {\n                _this._logService.error(\"Failed snippets from folder '\" + folder.toString() + \"'\", err);\n            });\n        };\n        bucket.push(watch(this._fileService, folder, addFolderSnippets));\n        bucket.push(lifecycle_1.combinedDisposable(disposables));\n        return addFolderSnippets();\n    };\n    SnippetsService.prototype._addSnippetFile = function (uri, source) {\n        var _this = this;\n        var ext = resources.extname(uri);\n        var key = uri.toString();\n        if (source === snippetsFile_1.SnippetSource.User && ext === '.json') {\n            var langName = resources.basename(uri).replace(/\\.json/, '');\n            this._files.set(key, new snippetsFile_1.SnippetFile(source, uri, [langName], undefined, this._fileService));\n        }\n        else if (ext === '.code-snippets') {\n            this._files.set(key, new snippetsFile_1.SnippetFile(source, uri, undefined, undefined, this._fileService));\n        }\n        return {\n            dispose: function () { return _this._files.delete(key); }\n        };\n    };\n    SnippetsService = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, log_1.ILogService),\n        tslib_1.__param(4, files_1.IFileService),\n        tslib_1.__param(5, lifecycle_2.ILifecycleService)\n    ], SnippetsService);\n    return SnippetsService;\n}());\nextensions_1.registerSingleton(snippets_contribution_1.ISnippetsService, SnippetsService, true);\nfunction getNonWhitespacePrefix(model, position) {\n    /**\n     * Do not analyze more characters\n     */\n    var MAX_PREFIX_LENGTH = 100;\n    var line = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n    var minChIndex = Math.max(0, line.length - MAX_PREFIX_LENGTH);\n    for (var chIndex = line.length - 1; chIndex >= minChIndex; chIndex--) {\n        var ch = line.charAt(chIndex);\n        if (/\\s/.test(ch)) {\n            return line.substr(chIndex + 1);\n        }\n    }\n    if (minChIndex === 0) {\n        return line;\n    }\n    return '';\n}\nexports.getNonWhitespacePrefix = getNonWhitespacePrefix;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { join } from 'vs/base/common/path';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { combinedDisposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { values } from 'vs/base/common/map';\nimport * as resources from 'vs/base/common/resources';\nimport { endsWith, isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { setSnippetSuggestSupport } from 'vs/editor/contrib/suggest/suggest';\nimport { localize } from 'vs/nls';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkspace, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { Snippet, SnippetFile, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { ExtensionsRegistry, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { languagesExtPoint } from 'vs/workbench/services/mode/common/workbenchModeService';\nimport { SnippetCompletionProvider } from './snippetCompletionProvider';\n\nnamespace snippetExt {\n\n\texport interface ISnippetsExtensionPoint {\n\t\tlanguage: string;\n\t\tpath: string;\n\t}\n\n\texport interface IValidSnippetsExtensionPoint {\n\t\tlanguage: string;\n\t\tlocation: URI;\n\t}\n\n\texport function toValidSnippet(extension: IExtensionPointUser<ISnippetsExtensionPoint[]>, snippet: ISnippetsExtensionPoint, modeService: IModeService): IValidSnippetsExtensionPoint | null {\n\n\t\tif (isFalsyOrWhitespace(snippet.path)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.path.0',\n\t\t\t\t\"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.path)\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isFalsyOrWhitespace(snippet.language) && !endsWith(snippet.path, '.code-snippets')) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.language.0',\n\t\t\t\t\"When omitting the language, the value of `contributes.{0}.path` must be a `.code-snippets`-file. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.path)\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!isFalsyOrWhitespace(snippet.language) && !modeService.isRegisteredMode(snippet.language)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.language',\n\t\t\t\t\"Unknown language in `contributes.{0}.language`. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.language)\n\t\t\t));\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extensionLocation = extension.description.extensionLocation;\n\t\tconst snippetLocation = resources.joinPath(extensionLocation, snippet.path);\n\t\tif (!resources.isEqualOrParent(snippetLocation, extensionLocation)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.path.1',\n\t\t\t\t\"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n\t\t\t\textension.description.name, snippetLocation.path, extensionLocation.path\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tlanguage: snippet.language,\n\t\t\tlocation: snippetLocation\n\t\t};\n\t}\n\n\texport const snippetsContribution: IJSONSchema = {\n\t\tdescription: localize('vscode.extension.contributes.snippets', 'Contributes snippets.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '', path: '' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { language: '${1:id}', path: './snippets/${2:id}.json.' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.snippets-language', 'Language identifier for which this snippet is contributed to.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \\'./snippets/\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\texport const point = ExtensionsRegistry.registerExtensionPoint<snippetExt.ISnippetsExtensionPoint[]>({\n\t\textensionPoint: 'snippets',\n\t\tdeps: [languagesExtPoint],\n\t\tjsonSchema: snippetExt.snippetsContribution\n\t});\n}\n\nfunction watch(service: IFileService, resource: URI, callback: (type: FileChangeType, resource: URI) => any): IDisposable {\n\tlet listener = service.onFileChanges(e => {\n\t\tfor (const change of e.changes) {\n\t\t\tif (resources.isEqualOrParent(change.resource, resource)) {\n\t\t\t\tcallback(change.type, change.resource);\n\t\t\t}\n\t\t}\n\t});\n\tservice.watchFileChanges(resource);\n\treturn {\n\t\tdispose() {\n\t\t\tlistener.dispose();\n\t\t\tservice.unwatchFileChanges(resource);\n\t\t}\n\t};\n}\n\nclass SnippetsService implements ISnippetsService {\n\n\treadonly _serviceBrand: any;\n\n\tprivate readonly _disposables: IDisposable[] = [];\n\tprivate readonly _pendingWork: Promise<any>[] = [];\n\tprivate readonly _files = new Map<string, SnippetFile>();\n\n\tconstructor(\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tthis._pendingWork.push(Promise.resolve(lifecycleService.when(LifecyclePhase.Restored).then(() => {\n\t\t\tthis._initExtensionSnippets();\n\t\t\tthis._initUserSnippets();\n\t\t\tthis._initWorkspaceSnippets();\n\t\t})));\n\n\t\tsetSnippetSuggestSupport(new SnippetCompletionProvider(this._modeService, this));\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._disposables);\n\t}\n\n\tprivate _joinSnippets(): Promise<any> {\n\t\tconst promises = this._pendingWork.slice(0);\n\t\tthis._pendingWork.length = 0;\n\t\treturn Promise.all(promises);\n\t}\n\n\tgetSnippetFiles(): Promise<SnippetFile[]> {\n\t\treturn this._joinSnippets().then(() => values(this._files));\n\t}\n\n\tgetSnippets(languageId: LanguageId): Promise<Snippet[]> {\n\t\treturn this._joinSnippets().then(() => {\n\t\t\tconst result: Snippet[] = [];\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\t\tif (languageIdentifier) {\n\t\t\t\tconst langName = languageIdentifier.language;\n\t\t\t\tthis._files.forEach(file => {\n\t\t\t\t\tpromises.push(file.load()\n\t\t\t\t\t\t.then(file => file.select(langName, result))\n\t\t\t\t\t\t.catch(err => this._logService.error(err, file.location.toString()))\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn Promise.all(promises).then(() => result);\n\t\t});\n\t}\n\n\tgetSnippetsSync(languageId: LanguageId): Snippet[] {\n\t\tconst result: Snippet[] = [];\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\tif (languageIdentifier) {\n\t\t\tconst langName = languageIdentifier.language;\n\t\t\tthis._files.forEach(file => {\n\t\t\t\t// kick off loading (which is a noop in case it's already loaded)\n\t\t\t\t// and optimistically collect snippets\n\t\t\t\tfile.load().catch(err => { /*ignore*/ });\n\t\t\t\tfile.select(langName, result);\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\t// --- loading, watching\n\n\tprivate _initExtensionSnippets(): void {\n\t\tsnippetExt.point.setHandler(extensions => {\n\n\t\t\tthis._files.forEach((value, key) => {\n\t\t\t\tif (value.source === SnippetSource.Extension) {\n\t\t\t\t\tthis._files.delete(key);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tfor (const contribution of extension.value) {\n\t\t\t\t\tconst validContribution = snippetExt.toValidSnippet(extension, contribution, this._modeService);\n\t\t\t\t\tif (!validContribution) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resource = validContribution.location.toString();\n\t\t\t\t\tconst file = this._files.get(resource);\n\t\t\t\t\tif (file) {\n\t\t\t\t\t\tif (file.defaultScopes) {\n\t\t\t\t\t\t\tfile.defaultScopes.push(validContribution.language);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfile.defaultScopes = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst file = new SnippetFile(SnippetSource.Extension, validContribution.location, validContribution.language ? [validContribution.language] : undefined, extension.description, this._fileService);\n\t\t\t\t\t\tthis._files.set(file.location.toString(), file);\n\n\t\t\t\t\t\tif (this._environmentService.isExtensionDevelopment) {\n\t\t\t\t\t\t\tfile.load().then(file => {\n\t\t\t\t\t\t\t\t// warn about bad tabstop/variable usage\n\t\t\t\t\t\t\t\tif (file.data.some(snippet => snippet.isBogous)) {\n\t\t\t\t\t\t\t\t\textension.collector.warn(localize(\n\t\t\t\t\t\t\t\t\t\t'badVariableUse',\n\t\t\t\t\t\t\t\t\t\t\"One or more snippets from the extension '{0}' very likely confuse snippet-variables and snippet-placeholders (see https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax for more details)\",\n\t\t\t\t\t\t\t\t\t\textension.description.name\n\t\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, err => {\n\t\t\t\t\t\t\t\t// generic error\n\t\t\t\t\t\t\t\textension.collector.warn(localize(\n\t\t\t\t\t\t\t\t\t'badFile',\n\t\t\t\t\t\t\t\t\t\"The snippet file \\\"{0}\\\" could not be read.\",\n\t\t\t\t\t\t\t\t\tfile.location.toString()\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _initWorkspaceSnippets(): void {\n\t\t// workspace stuff\n\t\tlet disposables: IDisposable[] = [];\n\t\tlet updateWorkspaceSnippets = () => {\n\t\t\tdisposables = dispose(disposables);\n\t\t\tthis._pendingWork.push(this._initWorkspaceFolderSnippets(this._contextService.getWorkspace(), disposables));\n\t\t};\n\t\tthis._disposables.push({\n\t\t\tdispose() { dispose(disposables); }\n\t\t});\n\t\tthis._disposables.push(this._contextService.onDidChangeWorkspaceFolders(updateWorkspaceSnippets));\n\t\tthis._disposables.push(this._contextService.onDidChangeWorkbenchState(updateWorkspaceSnippets));\n\t\tupdateWorkspaceSnippets();\n\t}\n\n\tprivate _initWorkspaceFolderSnippets(workspace: IWorkspace, bucket: IDisposable[]): Promise<any> {\n\t\tlet promises = workspace.folders.map(folder => {\n\t\t\tconst snippetFolder = folder.toResource('.vscode');\n\t\t\treturn this._fileService.existsFile(snippetFolder).then(value => {\n\t\t\t\tif (value) {\n\t\t\t\t\tthis._initFolderSnippets(SnippetSource.Workspace, snippetFolder, bucket);\n\t\t\t\t} else {\n\t\t\t\t\t// watch\n\t\t\t\t\tbucket.push(watch(this._fileService, snippetFolder, (type) => {\n\t\t\t\t\t\tif (type === FileChangeType.ADDED) {\n\t\t\t\t\t\t\tthis._initFolderSnippets(SnippetSource.Workspace, snippetFolder, bucket);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn Promise.all(promises);\n\t}\n\n\tprivate _initUserSnippets(): Promise<any> {\n\t\tconst userSnippetsFolder = URI.file(join(this._environmentService.appSettingsHome, 'snippets'));\n\t\treturn this._fileService.createFolder(userSnippetsFolder).then(() => this._initFolderSnippets(SnippetSource.User, userSnippetsFolder, this._disposables));\n\t}\n\n\tprivate _initFolderSnippets(source: SnippetSource, folder: URI, bucket: IDisposable[]): Promise<any> {\n\t\tlet disposables: IDisposable[] = [];\n\t\tlet addFolderSnippets = (type?: FileChangeType) => {\n\t\t\tdisposables = dispose(disposables);\n\t\t\tif (type === FileChangeType.DELETED) {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\treturn this._fileService.resolveFile(folder).then(stat => {\n\t\t\t\tfor (const entry of stat.children || []) {\n\t\t\t\t\tdisposables.push(this._addSnippetFile(entry.resource, source));\n\t\t\t\t}\n\t\t\t}, err => {\n\t\t\t\tthis._logService.error(`Failed snippets from folder '${folder.toString()}'`, err);\n\t\t\t});\n\t\t};\n\n\t\tbucket.push(watch(this._fileService, folder, addFolderSnippets));\n\t\tbucket.push(combinedDisposable(disposables));\n\t\treturn addFolderSnippets();\n\t}\n\n\tprivate _addSnippetFile(uri: URI, source: SnippetSource): IDisposable {\n\t\tconst ext = resources.extname(uri);\n\t\tconst key = uri.toString();\n\t\tif (source === SnippetSource.User && ext === '.json') {\n\t\t\tconst langName = resources.basename(uri).replace(/\\.json/, '');\n\t\t\tthis._files.set(key, new SnippetFile(source, uri, [langName], undefined, this._fileService));\n\t\t} else if (ext === '.code-snippets') {\n\t\t\tthis._files.set(key, new SnippetFile(source, uri, undefined, undefined, this._fileService));\n\t\t}\n\t\treturn {\n\t\t\tdispose: () => this._files.delete(key)\n\t\t};\n\t}\n}\n\nregisterSingleton(ISnippetsService, SnippetsService, true);\n\nexport interface ISimpleModel {\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport function getNonWhitespacePrefix(model: ISimpleModel, position: Position): string {\n\t/**\n\t * Do not analyze more characters\n\t */\n\tconst MAX_PREFIX_LENGTH = 100;\n\n\tlet line = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\n\tlet minChIndex = Math.max(0, line.length - MAX_PREFIX_LENGTH);\n\tfor (let chIndex = line.length - 1; chIndex >= minChIndex; chIndex--) {\n\t\tlet ch = line.charAt(chIndex);\n\n\t\tif (/\\s/.test(ch)) {\n\t\t\treturn line.substr(chIndex + 1);\n\t\t}\n\t}\n\n\tif (minChIndex === 0) {\n\t\treturn line;\n\t}\n\n\treturn '';\n}\n"]}]}