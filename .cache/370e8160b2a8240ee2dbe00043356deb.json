{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelPart.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelPart.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/panelpart\");\nvar event_1 = require(\"vs/base/common/event\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar panel_1 = require(\"vs/workbench/common/panel\");\nvar compositePart_1 = require(\"vs/workbench/browser/parts/compositePart\");\nvar panel_2 = require(\"vs/workbench/browser/panel\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar panelActions_1 = require(\"vs/workbench/browser/parts/panel/panelActions\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar compositeBar_1 = require(\"vs/workbench/browser/parts/compositeBar\");\nvar compositeBarActions_1 = require(\"vs/workbench/browser/parts/compositeBarActions\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar nls_1 = require(\"vs/nls\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar types_1 = require(\"vs/base/common/types\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar gridview_1 = require(\"vs/base/browser/ui/grid/gridview\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar PanelPart = /** @class */ (function (_super) {\n    tslib_1.__extends(PanelPart, _super);\n    function PanelPart(notificationService, storageService, telemetryService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, contextKeyService, lifecycleService) {\n        var _this = _super.call(this, notificationService, storageService, telemetryService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, platform_1.Registry.as(panel_2.Extensions.Panels), PanelPart.activePanelSettingsKey, platform_1.Registry.as(panel_2.Extensions.Panels).getDefaultPanelId(), 'panel', 'panel', undefined, layoutService_1.Parts.PANEL_PART, { hasTitle: true }) || this;\n        _this.lifecycleService = lifecycleService;\n        //#region IView\n        _this.minimumWidth = 300;\n        _this.maximumWidth = Number.POSITIVE_INFINITY;\n        _this.minimumHeight = 77;\n        _this.maximumHeight = Number.POSITIVE_INFINITY;\n        _this.snapSize = 50;\n        _this.priority = gridview_1.LayoutPriority.Low;\n        _this.compositeActions = Object.create(null);\n        _this.compositeBar = _this._register(_this.instantiationService.createInstance(compositeBar_1.CompositeBar, _this.getCachedPanels(), {\n            icon: false,\n            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,\n            openComposite: function (compositeId) { return Promise.resolve(_this.openPanel(compositeId, true)); },\n            getActivityAction: function (compositeId) { return _this.getCompositeActions(compositeId).activityAction; },\n            getCompositePinnedAction: function (compositeId) { return _this.getCompositeActions(compositeId).pinnedAction; },\n            getOnCompositeClickAction: function (compositeId) { return _this.instantiationService.createInstance(panelActions_1.PanelActivityAction, _this.getPanel(compositeId)); },\n            getContextMenuActions: function () { return [\n                _this.instantiationService.createInstance(panelActions_1.TogglePanelPositionAction, panelActions_1.TogglePanelPositionAction.ID, panelActions_1.TogglePanelPositionAction.LABEL),\n                _this.instantiationService.createInstance(panelActions_1.TogglePanelAction, panelActions_1.TogglePanelAction.ID, nls_1.localize('hidePanel', \"Hide Panel\"))\n            ]; },\n            getDefaultCompositeId: function () { return platform_1.Registry.as(panel_2.Extensions.Panels).getDefaultPanelId(); },\n            hidePart: function () { return _this.layoutService.setPanelHidden(true); },\n            compositeSize: 0,\n            overflowActionSize: 44,\n            colors: function (theme) { return ({\n                activeBackgroundColor: theme.getColor(theme_1.PANEL_BACKGROUND),\n                inactiveBackgroundColor: theme.getColor(theme_1.PANEL_BACKGROUND),\n                activeBorderBottomColor: theme.getColor(theme_1.PANEL_ACTIVE_TITLE_BORDER),\n                activeForegroundColor: theme.getColor(theme_1.PANEL_ACTIVE_TITLE_FOREGROUND),\n                inactiveForegroundColor: theme.getColor(theme_1.PANEL_INACTIVE_TITLE_FOREGROUND),\n                badgeBackground: theme.getColor(colorRegistry_1.badgeBackground),\n                badgeForeground: theme.getColor(colorRegistry_1.badgeForeground),\n                dragAndDropBackground: theme.getColor(theme_1.PANEL_DRAG_AND_DROP_BACKGROUND)\n            }); }\n        }));\n        for (var _i = 0, _a = _this.getPanels(); _i < _a.length; _i++) {\n            var panel = _a[_i];\n            _this.compositeBar.addComposite(panel);\n        }\n        _this.activePanelContextKey = panel_1.ActivePanelContext.bindTo(contextKeyService);\n        _this.panelFocusContextKey = panel_1.PanelFocusContext.bindTo(contextKeyService);\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(PanelPart.prototype, \"onDidPanelOpen\", {\n        //#endregion\n        get: function () { return event_1.Event.map(this.onDidCompositeOpen.event, function (compositeOpen) { return ({ panel: compositeOpen.composite, focus: compositeOpen.focus }); }); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelPart.prototype, \"onDidPanelClose\", {\n        get: function () { return this.onDidCompositeClose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    PanelPart.prototype.registerListeners = function () {\n        var _this = this;\n        // Panel open/close\n        this._register(this.onDidPanelOpen(function (_a) {\n            var panel = _a.panel;\n            return _this.onPanelOpen(panel);\n        }));\n        this._register(this.onDidPanelClose(this.onPanelClose, this));\n        // Panel register/deregister\n        this._register(this.registry.onDidRegister(function (panelDescriptor) { return _this.compositeBar.addComposite(panelDescriptor); }));\n        this._register(this.registry.onDidDeregister(function (panelDescriptor) {\n            _this.compositeBar.hideComposite(panelDescriptor.id);\n            _this.removeComposite(panelDescriptor.id);\n        }));\n        // Activate panel action on opening of a panel\n        this._register(this.onDidPanelOpen(function (_a) {\n            var panel = _a.panel;\n            _this.compositeBar.activateComposite(panel.getId());\n            _this.layoutCompositeBar(); // Need to relayout composite bar since different panels have different action bar width\n        }));\n        // Deactivate panel action on close\n        this._register(this.onDidPanelClose(function (panel) { return _this.compositeBar.deactivateComposite(panel.getId()); }));\n        // State\n        this.lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually).then(function () {\n            _this._register(_this.compositeBar.onDidChange(function () { return _this.saveCachedPanels(); }));\n            _this._register(_this.storageService.onDidChangeStorage(function (e) { return _this.onDidStorageChange(e); }));\n        });\n    };\n    PanelPart.prototype.onPanelOpen = function (panel) {\n        this.activePanelContextKey.set(panel.getId());\n    };\n    PanelPart.prototype.onPanelClose = function (panel) {\n        var id = panel.getId();\n        if (this.activePanelContextKey.get() === id) {\n            this.activePanelContextKey.reset();\n        }\n    };\n    PanelPart.prototype.create = function (parent) {\n        var _this = this;\n        this.element = parent;\n        _super.prototype.create.call(this, parent);\n        var focusTracker = this._register(dom_1.trackFocus(parent));\n        this._register(focusTracker.onDidFocus(function () { return _this.panelFocusContextKey.set(true); }));\n        this._register(focusTracker.onDidBlur(function () { return _this.panelFocusContextKey.set(false); }));\n    };\n    PanelPart.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n        var container = this.getContainer();\n        container.style.backgroundColor = this.getColor(theme_1.PANEL_BACKGROUND);\n        container.style.borderLeftColor = this.getColor(theme_1.PANEL_BORDER) || this.getColor(colorRegistry_1.contrastBorder);\n        var title = this.getTitleArea();\n        if (title) {\n            title.style.borderTopColor = this.getColor(theme_1.PANEL_BORDER) || this.getColor(colorRegistry_1.contrastBorder);\n        }\n    };\n    PanelPart.prototype.openPanel = function (id, focus) {\n        if (this.blockOpeningPanel) {\n            return null; // Workaround against a potential race condition\n        }\n        // First check if panel is hidden and show if so\n        if (!this.layoutService.isVisible(layoutService_1.Parts.PANEL_PART)) {\n            try {\n                this.blockOpeningPanel = true;\n                this.layoutService.setPanelHidden(false);\n            }\n            finally {\n                this.blockOpeningPanel = false;\n            }\n        }\n        return types_1.withUndefinedAsNull(this.openComposite(id, focus));\n    };\n    PanelPart.prototype.showActivity = function (panelId, badge, clazz) {\n        return this.compositeBar.showActivity(panelId, badge, clazz);\n    };\n    PanelPart.prototype.getPanel = function (panelId) {\n        return this.getPanels().filter(function (p) { return p.id === panelId; }).pop();\n    };\n    PanelPart.prototype.getPanels = function () {\n        return platform_1.Registry.as(panel_2.Extensions.Panels).getPanels()\n            .sort(function (v1, v2) { return typeof v1.order === 'number' && typeof v2.order === 'number' ? v1.order - v2.order : NaN; });\n    };\n    PanelPart.prototype.getPinnedPanels = function () {\n        var pinnedCompositeIds = this.compositeBar.getPinnedComposites().map(function (c) { return c.id; });\n        return this.getPanels()\n            .filter(function (p) { return pinnedCompositeIds.indexOf(p.id) !== -1; })\n            .sort(function (p1, p2) { return pinnedCompositeIds.indexOf(p1.id) - pinnedCompositeIds.indexOf(p2.id); });\n    };\n    PanelPart.prototype.getActions = function () {\n        return [\n            this.instantiationService.createInstance(panelActions_1.ToggleMaximizedPanelAction, panelActions_1.ToggleMaximizedPanelAction.ID, panelActions_1.ToggleMaximizedPanelAction.LABEL),\n            this.instantiationService.createInstance(panelActions_1.ClosePanelAction, panelActions_1.ClosePanelAction.ID, panelActions_1.ClosePanelAction.LABEL)\n        ];\n    };\n    PanelPart.prototype.getActivePanel = function () {\n        return this.getActiveComposite();\n    };\n    PanelPart.prototype.getLastActivePanelId = function () {\n        return this.getLastActiveCompositetId();\n    };\n    PanelPart.prototype.hideActivePanel = function () {\n        this.hideActiveComposite();\n    };\n    PanelPart.prototype.createTitleLabel = function (parent) {\n        var _this = this;\n        var titleArea = this.compositeBar.create(parent);\n        titleArea.classList.add('panel-switcher-container');\n        return {\n            updateTitle: function (id, title, keybinding) {\n                var action = _this.compositeBar.getAction(id);\n                if (action) {\n                    action.label = title;\n                }\n            },\n            updateStyles: function () {\n                // Handled via theming participant\n            }\n        };\n    };\n    PanelPart.prototype.layout = function (width, height) {\n        if (!this.layoutService.isVisible(layoutService_1.Parts.PANEL_PART)) {\n            return;\n        }\n        if (this.layoutService.getPanelPosition() === layoutService_1.Position.RIGHT) {\n            this.dimension = new dom_1.Dimension(width - 1, height); // Take into account the 1px border when layouting\n        }\n        else {\n            this.dimension = new dom_1.Dimension(width, height);\n        }\n        // Layout contents\n        _super.prototype.layout.call(this, this.dimension.width, this.dimension.height);\n        // Layout composite bar\n        this.layoutCompositeBar();\n    };\n    PanelPart.prototype.layoutCompositeBar = function () {\n        if (this.dimension) {\n            var availableWidth = this.dimension.width - 40; // take padding into account\n            if (this.toolBar) {\n                availableWidth = Math.max(PanelPart.MIN_COMPOSITE_BAR_WIDTH, availableWidth - this.getToolbarWidth()); // adjust height for global actions showing\n            }\n            this.compositeBar.layout(new dom_1.Dimension(availableWidth, this.dimension.height));\n        }\n    };\n    PanelPart.prototype.getCompositeActions = function (compositeId) {\n        var compositeActions = this.compositeActions[compositeId];\n        if (!compositeActions) {\n            compositeActions = {\n                activityAction: this.instantiationService.createInstance(panelActions_1.PanelActivityAction, this.getPanel(compositeId)),\n                pinnedAction: new compositeBarActions_1.ToggleCompositePinnedAction(this.getPanel(compositeId), this.compositeBar)\n            };\n            this.compositeActions[compositeId] = compositeActions;\n        }\n        return compositeActions;\n    };\n    PanelPart.prototype.removeComposite = function (compositeId) {\n        if (_super.prototype.removeComposite.call(this, compositeId)) {\n            var compositeActions = this.compositeActions[compositeId];\n            if (compositeActions) {\n                compositeActions.activityAction.dispose();\n                compositeActions.pinnedAction.dispose();\n                delete this.compositeActions[compositeId];\n            }\n            return true;\n        }\n        return false;\n    };\n    PanelPart.prototype.getToolbarWidth = function () {\n        var activePanel = this.getActivePanel();\n        if (!activePanel) {\n            return 0;\n        }\n        return this.toolBar.getItemsWidth();\n    };\n    PanelPart.prototype.onDidStorageChange = function (e) {\n        if (e.key === PanelPart.PINNED_PANELS && e.scope === storage_1.StorageScope.GLOBAL\n            && this.cachedPanelsValue !== this.getStoredCachedPanelsValue() /* This checks if current window changed the value or not */) {\n            this._cachedPanelsValue = null;\n            var newCompositeItems = [];\n            var compositeItems_1 = this.compositeBar.getCompositeBarItems();\n            var cachedPanels = this.getCachedPanels();\n            var _loop_1 = function (cachedPanel) {\n                // Add and update existing items\n                var existingItem = compositeItems_1.filter(function (_a) {\n                    var id = _a.id;\n                    return id === cachedPanel.id;\n                })[0];\n                if (existingItem) {\n                    newCompositeItems.push({\n                        id: existingItem.id,\n                        name: existingItem.name,\n                        order: existingItem.order,\n                        pinned: cachedPanel.pinned,\n                        visible: existingItem.visible\n                    });\n                }\n            };\n            for (var _i = 0, cachedPanels_1 = cachedPanels; _i < cachedPanels_1.length; _i++) {\n                var cachedPanel = cachedPanels_1[_i];\n                _loop_1(cachedPanel);\n            }\n            var _loop_2 = function (index) {\n                // Add items currently exists but does not exist in new.\n                if (!newCompositeItems.some(function (_a) {\n                    var id = _a.id;\n                    return id === compositeItems_1[index].id;\n                })) {\n                    newCompositeItems.splice(index, 0, compositeItems_1[index]);\n                }\n            };\n            for (var index = 0; index < compositeItems_1.length; index++) {\n                _loop_2(index);\n            }\n            this.compositeBar.setCompositeBarItems(newCompositeItems);\n        }\n    };\n    PanelPart.prototype.saveCachedPanels = function () {\n        var state = [];\n        var compositeItems = this.compositeBar.getCompositeBarItems();\n        for (var _i = 0, compositeItems_2 = compositeItems; _i < compositeItems_2.length; _i++) {\n            var compositeItem = compositeItems_2[_i];\n            state.push({ id: compositeItem.id, pinned: compositeItem.pinned, order: compositeItem.order, visible: compositeItem.visible });\n        }\n        this.cachedPanelsValue = JSON.stringify(state);\n    };\n    PanelPart.prototype.getCachedPanels = function () {\n        var registeredPanels = this.getPanels();\n        var storedStates = JSON.parse(this.cachedPanelsValue);\n        var cachedPanels = storedStates.map(function (c) {\n            var serialized = typeof c === 'string' /* migration from pinned states to composites states */ ? { id: c, pinned: true, order: undefined, visible: true } : c;\n            var registered = registeredPanels.some(function (p) { return p.id === serialized.id; });\n            serialized.visible = registered ? types_1.isUndefinedOrNull(serialized.visible) ? true : serialized.visible : false;\n            return serialized;\n        });\n        return cachedPanels;\n    };\n    Object.defineProperty(PanelPart.prototype, \"cachedPanelsValue\", {\n        get: function () {\n            if (!this._cachedPanelsValue) {\n                this._cachedPanelsValue = this.getStoredCachedPanelsValue();\n            }\n            return this._cachedPanelsValue;\n        },\n        set: function (cachedViewletsValue) {\n            if (this.cachedPanelsValue !== cachedViewletsValue) {\n                this._cachedPanelsValue = cachedViewletsValue;\n                this.setStoredCachedViewletsValue(cachedViewletsValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanelPart.prototype.getStoredCachedPanelsValue = function () {\n        return this.storageService.get(PanelPart.PINNED_PANELS, storage_1.StorageScope.GLOBAL, '[]');\n    };\n    PanelPart.prototype.setStoredCachedViewletsValue = function (value) {\n        this.storageService.store(PanelPart.PINNED_PANELS, value, storage_1.StorageScope.GLOBAL);\n    };\n    PanelPart.prototype.toJSON = function () {\n        return {\n            type: layoutService_1.Parts.PANEL_PART\n        };\n    };\n    PanelPart.activePanelSettingsKey = 'workbench.panelpart.activepanelid';\n    PanelPart.PINNED_PANELS = 'workbench.panel.pinnedPanels';\n    PanelPart.MIN_COMPOSITE_BAR_WIDTH = 50;\n    PanelPart = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, storage_1.IStorageService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService),\n        tslib_1.__param(3, contextView_1.IContextMenuService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(5, keybinding_1.IKeybindingService),\n        tslib_1.__param(6, instantiation_1.IInstantiationService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, contextkey_1.IContextKeyService),\n        tslib_1.__param(9, lifecycle_1.ILifecycleService)\n    ], PanelPart);\n    return PanelPart;\n}(compositePart_1.CompositePart));\nexports.PanelPart = PanelPart;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    // Panel Background: since panels can host editors, we apply a background rule if the panel background\n    // color is different from the editor background color. This is a bit of a hack though. The better way\n    // would be to have a way to push the background color onto each editor widget itself somehow.\n    var panelBackground = theme.getColor(theme_1.PANEL_BACKGROUND);\n    if (panelBackground && panelBackground !== theme.getColor(colorRegistry_1.editorBackground)) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel > .content .monaco-editor,\\n\\t\\t\\t.monaco-workbench .part.panel > .content .monaco-editor .margin,\\n\\t\\t\\t.monaco-workbench .part.panel > .content .monaco-editor .monaco-editor-background {\\n\\t\\t\\t\\tbackground-color: \" + panelBackground + \";\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    // Title Active\n    var titleActive = theme.getColor(theme_1.PANEL_ACTIVE_TITLE_FOREGROUND);\n    var titleActiveBorder = theme.getColor(theme_1.PANEL_ACTIVE_TITLE_BORDER);\n    if (titleActive || titleActiveBorder) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:hover .action-label {\\n\\t\\t\\t\\tcolor: \" + titleActive + \" !important;\\n\\t\\t\\t\\tborder-bottom-color: \" + titleActiveBorder + \" !important;\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    // Title focus\n    var focusBorderColor = theme.getColor(colorRegistry_1.focusBorder);\n    if (focusBorderColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:focus .action-label {\\n\\t\\t\\t\\tcolor: \" + titleActive + \" !important;\\n\\t\\t\\t\\tborder-bottom-color: \" + focusBorderColor + \" !important;\\n\\t\\t\\t\\tborder-bottom: 1px solid;\\n\\t\\t\\t}\\n\\t\\t\\t\");\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:focus {\\n\\t\\t\\t\\toutline: none;\\n\\t\\t\\t}\\n\\t\\t\\t\");\n    }\n    // Styling with Outline color (e.g. high contrast theme)\n    var outline = theme.getColor(colorRegistry_1.activeContrastBorder);\n    if (outline) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item.checked .action-label,\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item .action-label:hover {\\n\\t\\t\\t\\toutline-color: \" + outline + \";\\n\\t\\t\\t\\toutline-width: 1px;\\n\\t\\t\\t\\toutline-style: solid;\\n\\t\\t\\t\\tborder-bottom: none;\\n\\t\\t\\t\\tpadding-bottom: 0;\\n\\t\\t\\t\\toutline-offset: 1px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:not(.checked) .action-label:hover {\\n\\t\\t\\t\\toutline-style: dashed;\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    var inputBorder = theme.getColor(theme_1.PANEL_INPUT_BORDER);\n    if (inputBorder) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.panel .monaco-inputbox {\\n\\t\\t\\t\\tborder-color: \" + inputBorder + \"\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n});\nextensions_1.registerSingleton(panelService_1.IPanelService, PanelPart);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelPart.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelPart.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oCAAkC;AAElC,8CAA6C;AAC7C,iEAAgE;AAChE,oEAA4E;AAC5E,mDAA0F;AAC1F,0EAA+F;AAC/F,oDAAkH;AAClH,gFAAkG;AAClG,oFAA8G;AAC9G,8DAAiH;AACjH,2EAAkF;AAClF,oEAA2E;AAC3E,uEAA8E;AAC9E,gFAA0G;AAC1G,8EAAgL;AAChL,sEAA8H;AAC9H,mDAA0N;AAC1N,wEAA+J;AAC/J,wEAA0F;AAC1F,sFAA6F;AAE7F,6EAAoF;AACpF,2CAA4D;AAC5D,8BAAkC;AAElC,uEAA2F;AAC3F,8CAA8E;AAC9E,oEAA2F;AAC3F,6DAAkE;AAClE,0EAAgF;AAShF;IAA+B,qCAAoB;IAiClD,mBACuB,mBAAyC,EAC9C,cAA+B,EAC7B,gBAAmC,EACjC,kBAAuC,EACnC,aAAsC,EAC3C,iBAAqC,EAClC,oBAA2C,EACnD,YAA2B,EACtB,iBAAqC,EACrB,gBAAmC;QAVxE,YAYC,kBACC,mBAAmB,EACnB,cAAc,EACd,gBAAgB,EAChB,kBAAkB,EAClB,aAAa,EACb,iBAAiB,EACjB,oBAAoB,EACpB,YAAY,EACZ,mBAAQ,CAAC,EAAE,CAAgB,kBAAe,CAAC,MAAM,CAAC,EAClD,SAAS,CAAC,sBAAsB,EAChC,mBAAQ,CAAC,EAAE,CAAgB,kBAAe,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,EACtE,OAAO,EACP,OAAO,EACP,SAAS,EACT,qBAAK,CAAC,UAAU,EAChB,EAAE,QAAQ,EAAE,IAAI,EAAE,CAClB,SAqCD;QAxDoC,sBAAgB,GAAhB,gBAAgB,CAAmB;QAlCxE,eAAe;QAEN,kBAAY,GAAW,GAAG,CAAC;QAC3B,kBAAY,GAAW,MAAM,CAAC,iBAAiB,CAAC;QAChD,mBAAa,GAAW,EAAE,CAAC;QAC3B,mBAAa,GAAW,MAAM,CAAC,iBAAiB,CAAC;QAEjD,cAAQ,GAAW,EAAE,CAAC;QACtB,cAAQ,GAAmB,yBAAc,CAAC,GAAG,CAAC;QAW/C,sBAAgB,GAAkH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAoC7J,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,2BAAY,EAAE,KAAI,CAAC,eAAe,EAAE,EAAE;YACjH,IAAI,EAAE,KAAK;YACX,WAAW,EAAE,8BAAkB,CAAC,UAAU;YAC1C,aAAa,EAAE,UAAC,WAAmB,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,EAAlD,CAAkD;YAC1F,iBAAiB,EAAE,UAAC,WAAmB,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,cAAc,EAApD,CAAoD;YAChG,wBAAwB,EAAE,UAAC,WAAmB,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,YAAY,EAAlD,CAAkD;YACrG,yBAAyB,EAAE,UAAC,WAAmB,IAAK,OAAA,KAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,kCAAmB,EAAE,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,EAAzF,CAAyF;YAC7I,qBAAqB,EAAE,cAAM,OAAA;gBAC5B,KAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,wCAAyB,EAAE,wCAAyB,CAAC,EAAE,EAAE,wCAAyB,CAAC,KAAK,CAAC;gBAClI,KAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,gCAAiB,EAAE,gCAAiB,CAAC,EAAE,EAAE,cAAQ,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;aACtH,EAH4B,CAG5B;YACD,qBAAqB,EAAE,cAAM,OAAA,mBAAQ,CAAC,EAAE,CAAgB,kBAAe,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,EAAtE,CAAsE;YACnG,QAAQ,EAAE,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAvC,CAAuC;YACvD,aAAa,EAAE,CAAC;YAChB,kBAAkB,EAAE,EAAE;YACtB,MAAM,EAAE,UAAC,KAAa,IAAK,OAAA,CAAC;gBAC3B,qBAAqB,EAAE,KAAK,CAAC,QAAQ,CAAC,wBAAgB,CAAC;gBACvD,uBAAuB,EAAE,KAAK,CAAC,QAAQ,CAAC,wBAAgB,CAAC;gBACzD,uBAAuB,EAAE,KAAK,CAAC,QAAQ,CAAC,iCAAyB,CAAC;gBAClE,qBAAqB,EAAE,KAAK,CAAC,QAAQ,CAAC,qCAA6B,CAAC;gBACpE,uBAAuB,EAAE,KAAK,CAAC,QAAQ,CAAC,uCAA+B,CAAC;gBACxE,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,+BAAe,CAAC;gBAChD,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,+BAAe,CAAC;gBAChD,qBAAqB,EAAE,KAAK,CAAC,QAAQ,CAAC,sCAA8B,CAAC;aACrE,CAAC,EATyB,CASzB;SACF,CAAC,CAAC,CAAC;QAEJ,KAAoB,UAAgB,EAAhB,KAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;YAAjC,IAAM,KAAK,SAAA;YACf,KAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SACtC;QAED,KAAI,CAAC,qBAAqB,GAAG,0BAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC1E,KAAI,CAAC,oBAAoB,GAAG,yBAAiB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAExE,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IA9ED,sBAAI,qCAAc;QAFlB,YAAY;aAEZ,cAAiE,OAAO,aAAK,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,UAAA,aAAa,IAAI,OAAA,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,EAAhE,CAAgE,CAAC,CAAC,CAAC,CAAC;;;OAAA;IACtM,sBAAI,sCAAe;aAAnB,cAAuC,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IA+EvE,qCAAiB,GAAzB;QAAA,iBA2BC;QAzBA,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,UAAC,EAAS;gBAAP,gBAAK;YAAO,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAAvB,CAAuB,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;QAE9D,4BAA4B;QAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAA,eAAe,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,YAAY,CAAC,eAAe,CAAC,EAA/C,CAA+C,CAAC,CAAC,CAAC;QAChH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAA,eAAe;YAC3D,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACpD,KAAI,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,8CAA8C;QAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,UAAC,EAAS;gBAAP,gBAAK;YAC1C,KAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YACnD,KAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,wFAAwF;QACpH,CAAC,CAAC,CAAC,CAAC;QAEJ,mCAAmC;QACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAApD,CAAoD,CAAC,CAAC,CAAC;QAEpG,QAAQ;QACR,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0BAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;YAC1D,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;YAC7E,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,+BAAW,GAAnB,UAAoB,KAAa;QAChC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IAC/C,CAAC;IAEO,gCAAY,GAApB,UAAqB,KAAa;QACjC,IAAM,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;QAEzB,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAC5C,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;SACnC;IACF,CAAC;IAED,0BAAM,GAAN,UAAO,MAAmB;QAA1B,iBAQC;QAPA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,iBAAM,MAAM,YAAC,MAAM,CAAC,CAAC;QAErB,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;QACnF,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;IACpF,CAAC;IAED,gCAAY,GAAZ;QACC,iBAAM,YAAY,WAAE,CAAC;QAErB,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,SAAS,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,wBAAgB,CAAC,CAAC;QAClE,SAAS,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,8BAAc,CAAC,CAAC;QAE/F,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAClC,IAAI,KAAK,EAAE;YACV,KAAK,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,8BAAc,CAAC,CAAC;SAC1F;IACF,CAAC;IAED,6BAAS,GAAT,UAAU,EAAU,EAAE,KAAe;QACpC,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO,IAAI,CAAC,CAAC,gDAAgD;SAC7D;QAED,gDAAgD;QAChD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,EAAE;YACpD,IAAI;gBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aACzC;oBAAS;gBACT,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;aAC/B;SACD;QAED,OAAO,2BAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,gCAAY,GAAZ,UAAa,OAAe,EAAE,KAAa,EAAE,KAAc;QAC1D,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAEO,4BAAQ,GAAhB,UAAiB,OAAe;QAC/B,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,OAAO,EAAhB,CAAgB,CAAC,CAAC,GAAG,EAAE,CAAC;IAC7D,CAAC;IAED,6BAAS,GAAT;QACC,OAAO,mBAAQ,CAAC,EAAE,CAAgB,kBAAe,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE;aACnE,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAA,OAAO,EAAE,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,EAAE,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAxF,CAAwF,CAAC,CAAC;IAC9G,CAAC;IAED,mCAAe,GAAf;QACC,IAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,EAAJ,CAAI,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,SAAS,EAAE;aACrB,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAvC,CAAuC,CAAC;aACpD,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAA,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAArE,CAAqE,CAAC,CAAC;IAC3F,CAAC;IAES,8BAAU,GAApB;QACC,OAAO;YACN,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,yCAA0B,EAAE,yCAA0B,CAAC,EAAE,EAAE,yCAA0B,CAAC,KAAK,CAAC;YACrI,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,+BAAgB,EAAE,+BAAgB,CAAC,EAAE,EAAE,+BAAgB,CAAC,KAAK,CAAC;SACvG,CAAC;IACH,CAAC;IAED,kCAAc,GAAd;QACC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAClC,CAAC;IAED,wCAAoB,GAApB;QACC,OAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACzC,CAAC;IAED,mCAAe,GAAf;QACC,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC5B,CAAC;IAES,oCAAgB,GAA1B,UAA2B,MAAmB;QAA9C,iBAeC;QAdA,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QAEpD,OAAO;YACN,WAAW,EAAE,UAAC,EAAE,EAAE,KAAK,EAAE,UAAU;gBAClC,IAAM,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;gBAC/C,IAAI,MAAM,EAAE;oBACX,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;iBACrB;YACF,CAAC;YACD,YAAY,EAAE;gBACb,kCAAkC;YACnC,CAAC;SACD,CAAC;IACH,CAAC;IAED,0BAAM,GAAN,UAAO,KAAa,EAAE,MAAc;QACnC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,EAAE;YACpD,OAAO;SACP;QAED,IAAI,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,KAAK,wBAAQ,CAAC,KAAK,EAAE;YAC7D,IAAI,CAAC,SAAS,GAAG,IAAI,eAAS,CAAC,KAAK,GAAG,CAAC,EAAE,MAAO,CAAC,CAAC,CAAC,kDAAkD;SACtG;aAAM;YACN,IAAI,CAAC,SAAS,GAAG,IAAI,eAAS,CAAC,KAAK,EAAE,MAAO,CAAC,CAAC;SAC/C;QAED,kBAAkB;QAClB,iBAAM,MAAM,YAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAE1D,uBAAuB;QACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAEO,sCAAkB,GAA1B;QACC,IAAI,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,4BAA4B;YAC5E,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,uBAAuB,EAAE,cAAc,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,2CAA2C;aAClJ;YAED,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,eAAS,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;SAC/E;IACF,CAAC;IAEO,uCAAmB,GAA3B,UAA4B,WAAmB;QAC9C,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB,EAAE;YACtB,gBAAgB,GAAG;gBAClB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,kCAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBACzG,YAAY,EAAE,IAAI,iDAA2B,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC;aAC5F,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,gBAAgB,CAAC;SACtD;QAED,OAAO,gBAAgB,CAAC;IACzB,CAAC;IAES,mCAAe,GAAzB,UAA0B,WAAmB;QAC5C,IAAI,iBAAM,eAAe,YAAC,WAAW,CAAC,EAAE;YACvC,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YAC5D,IAAI,gBAAgB,EAAE;gBACrB,gBAAgB,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC1C,gBAAgB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBACxC,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;aAC1C;YAED,OAAO,IAAI,CAAC;SACZ;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,mCAAe,GAAvB;QACC,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO,CAAC,CAAC;SACT;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACrC,CAAC;IAEO,sCAAkB,GAA1B,UAA2B,CAA+B;QACzD,IAAI,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,aAAa,IAAI,CAAC,CAAC,KAAK,KAAK,sBAAY,CAAC,MAAM;eACpE,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,0BAA0B,EAAE,CAAC,4DAA4D,EAAE;YAC9H,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAM,iBAAiB,GAAwB,EAAE,CAAC;YAClD,IAAM,gBAAc,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;YAChE,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;oCAEjC,WAAW;gBACrB,gCAAgC;gBAChC,IAAM,YAAY,GAAG,gBAAc,CAAC,MAAM,CAAC,UAAC,EAAM;wBAAJ,UAAE;oBAAO,OAAA,EAAE,KAAK,WAAW,CAAC,EAAE;gBAArB,CAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,YAAY,EAAE;oBACjB,iBAAiB,CAAC,IAAI,CAAC;wBACtB,EAAE,EAAE,YAAY,CAAC,EAAE;wBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;wBACvB,KAAK,EAAE,YAAY,CAAC,KAAK;wBACzB,MAAM,EAAE,WAAW,CAAC,MAAM;wBAC1B,OAAO,EAAE,YAAY,CAAC,OAAO;qBAC7B,CAAC,CAAC;iBACH;;YAXF,KAA0B,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;gBAAjC,IAAM,WAAW,qBAAA;wBAAX,WAAW;aAYrB;oCAEQ,KAAK;gBACb,wDAAwD;gBACxD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAC,EAAM;wBAAJ,UAAE;oBAAO,OAAA,EAAE,KAAK,gBAAc,CAAC,KAAK,CAAC,CAAC,EAAE;gBAA/B,CAA+B,CAAC,EAAE;oBACzE,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,gBAAc,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC1D;;YAJF,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,gBAAc,CAAC,MAAM,EAAE,KAAK,EAAE;wBAAjD,KAAK;aAKb;YAED,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;SAC1D;IACF,CAAC;IAEO,oCAAgB,GAAxB;QACC,IAAM,KAAK,GAAmB,EAAE,CAAC;QAEjC,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;QAChE,KAA4B,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;YAAvC,IAAM,aAAa,uBAAA;YACvB,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;SAC/H;QAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAEO,mCAAe,GAAvB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAE1C,IAAM,YAAY,GAAiC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtF,IAAM,YAAY,GAAmB,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC;YACtD,IAAM,UAAU,GAAiB,OAAO,CAAC,KAAK,QAAQ,CAAC,uDAAuD,CAAC,CAAC,CAAe,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5L,IAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,EAAtB,CAAsB,CAAC,CAAC;YACtE,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,yBAAiB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;YAC5G,OAAO,UAAU,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACrB,CAAC;IAGD,sBAAY,wCAAiB;aAA7B;YACC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;aAC5D;YAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;aAED,UAA8B,mBAA2B;YACxD,IAAI,IAAI,CAAC,iBAAiB,KAAK,mBAAmB,EAAE;gBACnD,IAAI,CAAC,kBAAkB,GAAG,mBAAmB,CAAC;gBAC9C,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,CAAC;aACvD;QACF,CAAC;;;OAPA;IASO,8CAA0B,GAAlC;QACC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,sBAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpF,CAAC;IAEO,gDAA4B,GAApC,UAAqC,KAAa;QACjD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE,sBAAY,CAAC,MAAM,CAAC,CAAC;IAChF,CAAC;IAED,0BAAM,GAAN;QACC,OAAO;YACN,IAAI,EAAE,qBAAK,CAAC,UAAU;SACtB,CAAC;IACH,CAAC;IArYe,gCAAsB,GAAG,mCAAmC,CAAC;IAErD,uBAAa,GAAG,8BAA8B,CAAC;IAC/C,iCAAuB,GAAG,EAAE,CAAC;IALzC,SAAS;QAkCnB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,yBAAe,CAAA;QACf,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,4BAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,6BAAiB,CAAA;OA3CP,SAAS,CAwYrB;IAAD,gBAAC;CAAA,AAxYD,CAA+B,6BAAa,GAwY3C;AAxYY,8BAAS;AA0YtB,yCAA0B,CAAC,UAAC,KAAa,EAAE,SAA6B;IAEvE,sGAAsG;IACtG,sGAAsG;IACtG,8FAA8F;IAC9F,IAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,wBAAgB,CAAC,CAAC;IACzD,IAAI,eAAe,IAAI,eAAe,KAAK,KAAK,CAAC,QAAQ,CAAC,gCAAgB,CAAC,EAAE;QAC5E,SAAS,CAAC,OAAO,CAAC,oQAII,eAAe,qBAEpC,CAAC,CAAC;KACH;IAED,eAAe;IACf,IAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,qCAA6B,CAAC,CAAC;IAClE,IAAM,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,iCAAyB,CAAC,CAAC;IACpE,IAAI,WAAW,IAAI,iBAAiB,EAAE;QACrC,SAAS,CAAC,OAAO,CAAC,wJAEP,WAAW,mDACG,iBAAiB,gCAEzC,CAAC,CAAC;KACH;IAED,cAAc;IACd,IAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,2BAAW,CAAC,CAAC;IACrD,IAAI,gBAAgB,EAAE;QACrB,SAAS,CAAC,OAAO,CAAC,wJAEP,WAAW,mDACG,gBAAgB,qEAGvC,CAAC,CAAC;QACJ,SAAS,CAAC,OAAO,CAAC,+JAIhB,CAAC,CAAC;KACJ;IAED,wDAAwD;IACxD,IAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,oCAAoB,CAAC,CAAC;IACrD,IAAI,OAAO,EAAE;QACZ,SAAS,CAAC,OAAO,CAAC,mSAGC,OAAO,oWAWzB,CAAC,CAAC;KACH;IAED,IAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,0BAAkB,CAAC,CAAC;IACvD,IAAI,WAAW,EAAE;QAChB,SAAS,CAAC,OAAO,CAAC,qFAEA,WAAW,oBAE5B,CAAC,CAAC;KACH;AACF,CAAC,CAAC,CAAC;AAEH,8BAAiB,CAAC,4BAAa,EAAE,SAAS,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panelpart';\nimport { IAction } from 'vs/base/common/actions';\nimport { Event } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ActionsOrientation } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IPanel, ActivePanelContext, PanelFocusContext } from 'vs/workbench/common/panel';\nimport { CompositePart, ICompositeTitleLabel } from 'vs/workbench/browser/parts/compositePart';\nimport { Panel, PanelRegistry, Extensions as PanelExtensions, PanelDescriptor } from 'vs/workbench/browser/panel';\nimport { IPanelService, IPanelIdentifier } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService, Parts, Position } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IStorageService, StorageScope, IWorkspaceStorageChangeEvent } from 'vs/platform/storage/common/storage';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IInstantiationService, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { ClosePanelAction, TogglePanelPositionAction, PanelActivityAction, ToggleMaximizedPanelAction, TogglePanelAction } from 'vs/workbench/browser/parts/panel/panelActions';\nimport { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';\nimport { PANEL_BACKGROUND, PANEL_BORDER, PANEL_ACTIVE_TITLE_FOREGROUND, PANEL_INACTIVE_TITLE_FOREGROUND, PANEL_ACTIVE_TITLE_BORDER, PANEL_DRAG_AND_DROP_BACKGROUND, PANEL_INPUT_BORDER } from 'vs/workbench/common/theme';\nimport { activeContrastBorder, focusBorder, contrastBorder, editorBackground, badgeBackground, badgeForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { CompositeBar, ICompositeBarItem } from 'vs/workbench/browser/parts/compositeBar';\nimport { ToggleCompositePinnedAction } from 'vs/workbench/browser/parts/compositeBarActions';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Dimension, trackFocus } from 'vs/base/browser/dom';\nimport { localize } from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { isUndefinedOrNull, withUndefinedAsNull } from 'vs/base/common/types';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { LayoutPriority } from 'vs/base/browser/ui/grid/gridview';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\ninterface ICachedPanel {\n\tid: string;\n\tpinned: boolean;\n\torder?: number;\n\tvisible: boolean;\n}\n\nexport class PanelPart extends CompositePart<Panel> implements IPanelService {\n\n\tstatic readonly activePanelSettingsKey = 'workbench.panelpart.activepanelid';\n\n\tprivate static readonly PINNED_PANELS = 'workbench.panel.pinnedPanels';\n\tprivate static readonly MIN_COMPOSITE_BAR_WIDTH = 50;\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\t//#region IView\n\n\treadonly minimumWidth: number = 300;\n\treadonly maximumWidth: number = Number.POSITIVE_INFINITY;\n\treadonly minimumHeight: number = 77;\n\treadonly maximumHeight: number = Number.POSITIVE_INFINITY;\n\n\treadonly snapSize: number = 50;\n\treadonly priority: LayoutPriority = LayoutPriority.Low;\n\n\t//#endregion\n\n\tget onDidPanelOpen(): Event<{ panel: IPanel, focus: boolean }> { return Event.map(this.onDidCompositeOpen.event, compositeOpen => ({ panel: compositeOpen.composite, focus: compositeOpen.focus })); }\n\tget onDidPanelClose(): Event<IPanel> { return this.onDidCompositeClose.event; }\n\n\tprivate activePanelContextKey: IContextKey<string>;\n\tprivate panelFocusContextKey: IContextKey<boolean>;\n\n\tprivate compositeBar: CompositeBar;\n\tprivate compositeActions: { [compositeId: string]: { activityAction: PanelActivityAction, pinnedAction: ToggleCompositePinnedAction } } = Object.create(null);\n\n\tprivate blockOpeningPanel: boolean;\n\tprivate dimension: Dimension;\n\n\tconstructor(\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper(\n\t\t\tnotificationService,\n\t\t\tstorageService,\n\t\t\ttelemetryService,\n\t\t\tcontextMenuService,\n\t\t\tlayoutService,\n\t\t\tkeybindingService,\n\t\t\tinstantiationService,\n\t\t\tthemeService,\n\t\t\tRegistry.as<PanelRegistry>(PanelExtensions.Panels),\n\t\t\tPanelPart.activePanelSettingsKey,\n\t\t\tRegistry.as<PanelRegistry>(PanelExtensions.Panels).getDefaultPanelId(),\n\t\t\t'panel',\n\t\t\t'panel',\n\t\t\tundefined,\n\t\t\tParts.PANEL_PART,\n\t\t\t{ hasTitle: true }\n\t\t);\n\n\t\tthis.compositeBar = this._register(this.instantiationService.createInstance(CompositeBar, this.getCachedPanels(), {\n\t\t\ticon: false,\n\t\t\torientation: ActionsOrientation.HORIZONTAL,\n\t\t\topenComposite: (compositeId: string) => Promise.resolve(this.openPanel(compositeId, true)),\n\t\t\tgetActivityAction: (compositeId: string) => this.getCompositeActions(compositeId).activityAction,\n\t\t\tgetCompositePinnedAction: (compositeId: string) => this.getCompositeActions(compositeId).pinnedAction,\n\t\t\tgetOnCompositeClickAction: (compositeId: string) => this.instantiationService.createInstance(PanelActivityAction, this.getPanel(compositeId)),\n\t\t\tgetContextMenuActions: () => [\n\t\t\t\tthis.instantiationService.createInstance(TogglePanelPositionAction, TogglePanelPositionAction.ID, TogglePanelPositionAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(TogglePanelAction, TogglePanelAction.ID, localize('hidePanel', \"Hide Panel\"))\n\t\t\t],\n\t\t\tgetDefaultCompositeId: () => Registry.as<PanelRegistry>(PanelExtensions.Panels).getDefaultPanelId(),\n\t\t\thidePart: () => this.layoutService.setPanelHidden(true),\n\t\t\tcompositeSize: 0,\n\t\t\toverflowActionSize: 44,\n\t\t\tcolors: (theme: ITheme) => ({\n\t\t\t\tactiveBackgroundColor: theme.getColor(PANEL_BACKGROUND), // Background color for overflow action\n\t\t\t\tinactiveBackgroundColor: theme.getColor(PANEL_BACKGROUND), // Background color for overflow action\n\t\t\t\tactiveBorderBottomColor: theme.getColor(PANEL_ACTIVE_TITLE_BORDER),\n\t\t\t\tactiveForegroundColor: theme.getColor(PANEL_ACTIVE_TITLE_FOREGROUND),\n\t\t\t\tinactiveForegroundColor: theme.getColor(PANEL_INACTIVE_TITLE_FOREGROUND),\n\t\t\t\tbadgeBackground: theme.getColor(badgeBackground),\n\t\t\t\tbadgeForeground: theme.getColor(badgeForeground),\n\t\t\t\tdragAndDropBackground: theme.getColor(PANEL_DRAG_AND_DROP_BACKGROUND)\n\t\t\t})\n\t\t}));\n\n\t\tfor (const panel of this.getPanels()) {\n\t\t\tthis.compositeBar.addComposite(panel);\n\t\t}\n\n\t\tthis.activePanelContextKey = ActivePanelContext.bindTo(contextKeyService);\n\t\tthis.panelFocusContextKey = PanelFocusContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Panel open/close\n\t\tthis._register(this.onDidPanelOpen(({ panel }) => this.onPanelOpen(panel)));\n\t\tthis._register(this.onDidPanelClose(this.onPanelClose, this));\n\n\t\t// Panel register/deregister\n\t\tthis._register(this.registry.onDidRegister(panelDescriptor => this.compositeBar.addComposite(panelDescriptor)));\n\t\tthis._register(this.registry.onDidDeregister(panelDescriptor => {\n\t\t\tthis.compositeBar.hideComposite(panelDescriptor.id);\n\t\t\tthis.removeComposite(panelDescriptor.id);\n\t\t}));\n\n\t\t// Activate panel action on opening of a panel\n\t\tthis._register(this.onDidPanelOpen(({ panel }) => {\n\t\t\tthis.compositeBar.activateComposite(panel.getId());\n\t\t\tthis.layoutCompositeBar(); // Need to relayout composite bar since different panels have different action bar width\n\t\t}));\n\n\t\t// Deactivate panel action on close\n\t\tthis._register(this.onDidPanelClose(panel => this.compositeBar.deactivateComposite(panel.getId())));\n\n\t\t// State\n\t\tthis.lifecycleService.when(LifecyclePhase.Eventually).then(() => {\n\t\t\tthis._register(this.compositeBar.onDidChange(() => this.saveCachedPanels()));\n\t\t\tthis._register(this.storageService.onDidChangeStorage(e => this.onDidStorageChange(e)));\n\t\t});\n\t}\n\n\tprivate onPanelOpen(panel: IPanel): void {\n\t\tthis.activePanelContextKey.set(panel.getId());\n\t}\n\n\tprivate onPanelClose(panel: IPanel): void {\n\t\tconst id = panel.getId();\n\n\t\tif (this.activePanelContextKey.get() === id) {\n\t\t\tthis.activePanelContextKey.reset();\n\t\t}\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tthis.element = parent;\n\n\t\tsuper.create(parent);\n\n\t\tconst focusTracker = this._register(trackFocus(parent));\n\t\tthis._register(focusTracker.onDidFocus(() => this.panelFocusContextKey.set(true)));\n\t\tthis._register(focusTracker.onDidBlur(() => this.panelFocusContextKey.set(false)));\n\t}\n\n\tupdateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tconst container = this.getContainer();\n\t\tcontainer.style.backgroundColor = this.getColor(PANEL_BACKGROUND);\n\t\tcontainer.style.borderLeftColor = this.getColor(PANEL_BORDER) || this.getColor(contrastBorder);\n\n\t\tconst title = this.getTitleArea();\n\t\tif (title) {\n\t\t\ttitle.style.borderTopColor = this.getColor(PANEL_BORDER) || this.getColor(contrastBorder);\n\t\t}\n\t}\n\n\topenPanel(id: string, focus?: boolean): Panel | null {\n\t\tif (this.blockOpeningPanel) {\n\t\t\treturn null; // Workaround against a potential race condition\n\t\t}\n\n\t\t// First check if panel is hidden and show if so\n\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\ttry {\n\t\t\t\tthis.blockOpeningPanel = true;\n\t\t\t\tthis.layoutService.setPanelHidden(false);\n\t\t\t} finally {\n\t\t\t\tthis.blockOpeningPanel = false;\n\t\t\t}\n\t\t}\n\n\t\treturn withUndefinedAsNull(this.openComposite(id, focus));\n\t}\n\n\tshowActivity(panelId: string, badge: IBadge, clazz?: string): IDisposable {\n\t\treturn this.compositeBar.showActivity(panelId, badge, clazz);\n\t}\n\n\tprivate getPanel(panelId: string): IPanelIdentifier | undefined {\n\t\treturn this.getPanels().filter(p => p.id === panelId).pop();\n\t}\n\n\tgetPanels(): PanelDescriptor[] {\n\t\treturn Registry.as<PanelRegistry>(PanelExtensions.Panels).getPanels()\n\t\t\t.sort((v1, v2) => typeof v1.order === 'number' && typeof v2.order === 'number' ? v1.order - v2.order : NaN);\n\t}\n\n\tgetPinnedPanels(): PanelDescriptor[] {\n\t\tconst pinnedCompositeIds = this.compositeBar.getPinnedComposites().map(c => c.id);\n\t\treturn this.getPanels()\n\t\t\t.filter(p => pinnedCompositeIds.indexOf(p.id) !== -1)\n\t\t\t.sort((p1, p2) => pinnedCompositeIds.indexOf(p1.id) - pinnedCompositeIds.indexOf(p2.id));\n\t}\n\n\tprotected getActions(): IAction[] {\n\t\treturn [\n\t\t\tthis.instantiationService.createInstance(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, ToggleMaximizedPanelAction.LABEL),\n\t\t\tthis.instantiationService.createInstance(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL)\n\t\t];\n\t}\n\n\tgetActivePanel(): IPanel | null {\n\t\treturn this.getActiveComposite();\n\t}\n\n\tgetLastActivePanelId(): string {\n\t\treturn this.getLastActiveCompositetId();\n\t}\n\n\thideActivePanel(): void {\n\t\tthis.hideActiveComposite();\n\t}\n\n\tprotected createTitleLabel(parent: HTMLElement): ICompositeTitleLabel {\n\t\tconst titleArea = this.compositeBar.create(parent);\n\t\ttitleArea.classList.add('panel-switcher-container');\n\n\t\treturn {\n\t\t\tupdateTitle: (id, title, keybinding) => {\n\t\t\t\tconst action = this.compositeBar.getAction(id);\n\t\t\t\tif (action) {\n\t\t\t\t\taction.label = title;\n\t\t\t\t}\n\t\t\t},\n\t\t\tupdateStyles: () => {\n\t\t\t\t// Handled via theming participant\n\t\t\t}\n\t\t};\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.layoutService.getPanelPosition() === Position.RIGHT) {\n\t\t\tthis.dimension = new Dimension(width - 1, height!); // Take into account the 1px border when layouting\n\t\t} else {\n\t\t\tthis.dimension = new Dimension(width, height!);\n\t\t}\n\n\t\t// Layout contents\n\t\tsuper.layout(this.dimension.width, this.dimension.height);\n\n\t\t// Layout composite bar\n\t\tthis.layoutCompositeBar();\n\t}\n\n\tprivate layoutCompositeBar(): void {\n\t\tif (this.dimension) {\n\t\t\tlet availableWidth = this.dimension.width - 40; // take padding into account\n\t\t\tif (this.toolBar) {\n\t\t\t\tavailableWidth = Math.max(PanelPart.MIN_COMPOSITE_BAR_WIDTH, availableWidth - this.getToolbarWidth()); // adjust height for global actions showing\n\t\t\t}\n\n\t\t\tthis.compositeBar.layout(new Dimension(availableWidth, this.dimension.height));\n\t\t}\n\t}\n\n\tprivate getCompositeActions(compositeId: string): { activityAction: PanelActivityAction, pinnedAction: ToggleCompositePinnedAction } {\n\t\tlet compositeActions = this.compositeActions[compositeId];\n\t\tif (!compositeActions) {\n\t\t\tcompositeActions = {\n\t\t\t\tactivityAction: this.instantiationService.createInstance(PanelActivityAction, this.getPanel(compositeId)),\n\t\t\t\tpinnedAction: new ToggleCompositePinnedAction(this.getPanel(compositeId), this.compositeBar)\n\t\t\t};\n\t\t\tthis.compositeActions[compositeId] = compositeActions;\n\t\t}\n\n\t\treturn compositeActions;\n\t}\n\n\tprotected removeComposite(compositeId: string): boolean {\n\t\tif (super.removeComposite(compositeId)) {\n\t\t\tconst compositeActions = this.compositeActions[compositeId];\n\t\t\tif (compositeActions) {\n\t\t\t\tcompositeActions.activityAction.dispose();\n\t\t\t\tcompositeActions.pinnedAction.dispose();\n\t\t\t\tdelete this.compositeActions[compositeId];\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate getToolbarWidth(): number {\n\t\tconst activePanel = this.getActivePanel();\n\t\tif (!activePanel) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.toolBar.getItemsWidth();\n\t}\n\n\tprivate onDidStorageChange(e: IWorkspaceStorageChangeEvent): void {\n\t\tif (e.key === PanelPart.PINNED_PANELS && e.scope === StorageScope.GLOBAL\n\t\t\t&& this.cachedPanelsValue !== this.getStoredCachedPanelsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._cachedPanelsValue = null;\n\t\t\tconst newCompositeItems: ICompositeBarItem[] = [];\n\t\t\tconst compositeItems = this.compositeBar.getCompositeBarItems();\n\t\t\tconst cachedPanels = this.getCachedPanels();\n\n\t\t\tfor (const cachedPanel of cachedPanels) {\n\t\t\t\t// Add and update existing items\n\t\t\t\tconst existingItem = compositeItems.filter(({ id }) => id === cachedPanel.id)[0];\n\t\t\t\tif (existingItem) {\n\t\t\t\t\tnewCompositeItems.push({\n\t\t\t\t\t\tid: existingItem.id,\n\t\t\t\t\t\tname: existingItem.name,\n\t\t\t\t\t\torder: existingItem.order,\n\t\t\t\t\t\tpinned: cachedPanel.pinned,\n\t\t\t\t\t\tvisible: existingItem.visible\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let index = 0; index < compositeItems.length; index++) {\n\t\t\t\t// Add items currently exists but does not exist in new.\n\t\t\t\tif (!newCompositeItems.some(({ id }) => id === compositeItems[index].id)) {\n\t\t\t\t\tnewCompositeItems.splice(index, 0, compositeItems[index]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.compositeBar.setCompositeBarItems(newCompositeItems);\n\t\t}\n\t}\n\n\tprivate saveCachedPanels(): void {\n\t\tconst state: ICachedPanel[] = [];\n\n\t\tconst compositeItems = this.compositeBar.getCompositeBarItems();\n\t\tfor (const compositeItem of compositeItems) {\n\t\t\tstate.push({ id: compositeItem.id, pinned: compositeItem.pinned, order: compositeItem.order, visible: compositeItem.visible });\n\t\t}\n\n\t\tthis.cachedPanelsValue = JSON.stringify(state);\n\t}\n\n\tprivate getCachedPanels(): ICachedPanel[] {\n\t\tconst registeredPanels = this.getPanels();\n\n\t\tconst storedStates = <Array<string | ICachedPanel>>JSON.parse(this.cachedPanelsValue);\n\t\tconst cachedPanels = <ICachedPanel[]>storedStates.map(c => {\n\t\t\tconst serialized: ICachedPanel = typeof c === 'string' /* migration from pinned states to composites states */ ? <ICachedPanel>{ id: c, pinned: true, order: undefined, visible: true } : c;\n\t\t\tconst registered = registeredPanels.some(p => p.id === serialized.id);\n\t\t\tserialized.visible = registered ? isUndefinedOrNull(serialized.visible) ? true : serialized.visible : false;\n\t\t\treturn serialized;\n\t\t});\n\n\t\treturn cachedPanels;\n\t}\n\n\tprivate _cachedPanelsValue: string | null;\n\tprivate get cachedPanelsValue(): string {\n\t\tif (!this._cachedPanelsValue) {\n\t\t\tthis._cachedPanelsValue = this.getStoredCachedPanelsValue();\n\t\t}\n\n\t\treturn this._cachedPanelsValue;\n\t}\n\n\tprivate set cachedPanelsValue(cachedViewletsValue: string) {\n\t\tif (this.cachedPanelsValue !== cachedViewletsValue) {\n\t\t\tthis._cachedPanelsValue = cachedViewletsValue;\n\t\t\tthis.setStoredCachedViewletsValue(cachedViewletsValue);\n\t\t}\n\t}\n\n\tprivate getStoredCachedPanelsValue(): string {\n\t\treturn this.storageService.get(PanelPart.PINNED_PANELS, StorageScope.GLOBAL, '[]');\n\t}\n\n\tprivate setStoredCachedViewletsValue(value: string): void {\n\t\tthis.storageService.store(PanelPart.PINNED_PANELS, value, StorageScope.GLOBAL);\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.PANEL_PART\n\t\t};\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\n\t// Panel Background: since panels can host editors, we apply a background rule if the panel background\n\t// color is different from the editor background color. This is a bit of a hack though. The better way\n\t// would be to have a way to push the background color onto each editor widget itself somehow.\n\tconst panelBackground = theme.getColor(PANEL_BACKGROUND);\n\tif (panelBackground && panelBackground !== theme.getColor(editorBackground)) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel > .content .monaco-editor,\n\t\t\t.monaco-workbench .part.panel > .content .monaco-editor .margin,\n\t\t\t.monaco-workbench .part.panel > .content .monaco-editor .monaco-editor-background {\n\t\t\t\tbackground-color: ${panelBackground};\n\t\t\t}\n\t\t`);\n\t}\n\n\t// Title Active\n\tconst titleActive = theme.getColor(PANEL_ACTIVE_TITLE_FOREGROUND);\n\tconst titleActiveBorder = theme.getColor(PANEL_ACTIVE_TITLE_BORDER);\n\tif (titleActive || titleActiveBorder) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:hover .action-label {\n\t\t\t\tcolor: ${titleActive} !important;\n\t\t\t\tborder-bottom-color: ${titleActiveBorder} !important;\n\t\t\t}\n\t\t`);\n\t}\n\n\t// Title focus\n\tconst focusBorderColor = theme.getColor(focusBorder);\n\tif (focusBorderColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:focus .action-label {\n\t\t\t\tcolor: ${titleActive} !important;\n\t\t\t\tborder-bottom-color: ${focusBorderColor} !important;\n\t\t\t\tborder-bottom: 1px solid;\n\t\t\t}\n\t\t\t`);\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:focus {\n\t\t\t\toutline: none;\n\t\t\t}\n\t\t\t`);\n\t}\n\n\t// Styling with Outline color (e.g. high contrast theme)\n\tconst outline = theme.getColor(activeContrastBorder);\n\tif (outline) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item.checked .action-label,\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item .action-label:hover {\n\t\t\t\toutline-color: ${outline};\n\t\t\t\toutline-width: 1px;\n\t\t\t\toutline-style: solid;\n\t\t\t\tborder-bottom: none;\n\t\t\t\tpadding-bottom: 0;\n\t\t\t\toutline-offset: 1px;\n\t\t\t}\n\n\t\t\t.monaco-workbench .part.panel > .title > .panel-switcher-container > .monaco-action-bar .action-item:not(.checked) .action-label:hover {\n\t\t\t\toutline-style: dashed;\n\t\t\t}\n\t\t`);\n\t}\n\n\tconst inputBorder = theme.getColor(PANEL_INPUT_BORDER);\n\tif (inputBorder) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.panel .monaco-inputbox {\n\t\t\t\tborder-color: ${inputBorder}\n\t\t\t}\n\t\t`);\n\t}\n});\n\nregisterSingleton(IPanelService, PanelPart);"]}]}