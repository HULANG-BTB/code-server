{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings_1 = require(\"vs/base/common/strings\");\nvar CodeActionKind = /** @class */ (function () {\n    function CodeActionKind(value) {\n        this.value = value;\n    }\n    CodeActionKind.prototype.contains = function (other) {\n        return this.value === other.value || strings_1.startsWith(other.value, this.value + CodeActionKind.sep);\n    };\n    CodeActionKind.prototype.intersects = function (other) {\n        return this.contains(other) || other.contains(this);\n    };\n    CodeActionKind.sep = '.';\n    CodeActionKind.Empty = new CodeActionKind('');\n    CodeActionKind.QuickFix = new CodeActionKind('quickfix');\n    CodeActionKind.Refactor = new CodeActionKind('refactor');\n    CodeActionKind.Source = new CodeActionKind('source');\n    CodeActionKind.SourceOrganizeImports = new CodeActionKind('source.organizeImports');\n    CodeActionKind.SourceFixAll = new CodeActionKind('source.fixAll');\n    return CodeActionKind;\n}());\nexports.CodeActionKind = CodeActionKind;\nvar CodeActionAutoApply;\n(function (CodeActionAutoApply) {\n    CodeActionAutoApply[CodeActionAutoApply[\"IfSingle\"] = 0] = \"IfSingle\";\n    CodeActionAutoApply[CodeActionAutoApply[\"First\"] = 1] = \"First\";\n    CodeActionAutoApply[CodeActionAutoApply[\"Never\"] = 2] = \"Never\";\n})(CodeActionAutoApply = exports.CodeActionAutoApply || (exports.CodeActionAutoApply = {}));\nfunction mayIncludeActionsOfKind(filter, providedKind) {\n    // A provided kind may be a subset or superset of our filtered kind.\n    if (filter.kind && !filter.kind.intersects(providedKind)) {\n        return false;\n    }\n    // Don't return source actions unless they are explicitly requested\n    if (CodeActionKind.Source.contains(providedKind) && !filter.includeSourceActions) {\n        return false;\n    }\n    return true;\n}\nexports.mayIncludeActionsOfKind = mayIncludeActionsOfKind;\nfunction filtersAction(filter, action) {\n    var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\n    // Filter out actions by kind\n    if (filter.kind) {\n        if (!actionKind || !filter.kind.contains(actionKind)) {\n            return false;\n        }\n    }\n    // Don't return source actions unless they are explicitly requested\n    if (!filter.includeSourceActions) {\n        if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n            return false;\n        }\n    }\n    if (filter.onlyIncludePreferredActions) {\n        if (!action.isPreferred) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.filtersAction = filtersAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,kDAAoD;AAGpD;IAUC,wBACiB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAC1B,CAAC;IAEE,iCAAQ,GAAf,UAAgB,KAAqB;QACpC,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,IAAI,oBAAU,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IAC/F,CAAC;IAEM,mCAAU,GAAjB,UAAkB,KAAqB;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAnBuB,kBAAG,GAAG,GAAG,CAAC;IAEX,oBAAK,GAAG,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC;IAC/B,uBAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IAC1C,uBAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IAC1C,qBAAM,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,oCAAqB,GAAG,IAAI,cAAc,CAAC,wBAAwB,CAAC,CAAC;IACrE,2BAAY,GAAG,IAAI,cAAc,CAAC,eAAe,CAAC,CAAC;IAa3E,qBAAC;CAAA,AArBD,IAqBC;AArBY,wCAAc;AAuB3B,IAAkB,mBAIjB;AAJD,WAAkB,mBAAmB;IACpC,qEAAQ,CAAA;IACR,+DAAK,CAAA;IACL,+DAAK,CAAA;AACN,CAAC,EAJiB,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAIpC;AAQD,SAAgB,uBAAuB,CAAC,MAAwB,EAAE,YAA4B;IAC7F,oEAAoE;IACpE,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;QACzD,OAAO,KAAK,CAAC;KACb;IAED,mEAAmE;IACnE,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;QACjF,OAAO,KAAK,CAAC;KACb;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAZD,0DAYC;AAGD,SAAgB,aAAa,CAAC,MAAwB,EAAE,MAAkB;IACzE,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAE7E,6BAA6B;IAC7B,IAAI,MAAM,CAAC,IAAI,EAAE;QAChB,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACrD,OAAO,KAAK,CAAC;SACb;KACD;IAED,mEAAmE;IACnE,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;QACjC,IAAI,UAAU,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC7D,OAAO,KAAK,CAAC;SACb;KACD;IAED,IAAI,MAAM,CAAC,2BAA2B,EAAE;QACvC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACxB,OAAO,KAAK,CAAC;SACb;KACD;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAxBD,sCAwBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { startsWith } from 'vs/base/common/strings';\nimport { CodeAction } from 'vs/editor/common/modes';\n\nexport class CodeActionKind {\n\tprivate static readonly sep = '.';\n\n\tpublic static readonly Empty = new CodeActionKind('');\n\tpublic static readonly QuickFix = new CodeActionKind('quickfix');\n\tpublic static readonly Refactor = new CodeActionKind('refactor');\n\tpublic static readonly Source = new CodeActionKind('source');\n\tpublic static readonly SourceOrganizeImports = new CodeActionKind('source.organizeImports');\n\tpublic static readonly SourceFixAll = new CodeActionKind('source.fixAll');\n\n\tconstructor(\n\t\tpublic readonly value: string\n\t) { }\n\n\tpublic contains(other: CodeActionKind): boolean {\n\t\treturn this.value === other.value || startsWith(other.value, this.value + CodeActionKind.sep);\n\t}\n\n\tpublic intersects(other: CodeActionKind): boolean {\n\t\treturn this.contains(other) || other.contains(this);\n\t}\n}\n\nexport const enum CodeActionAutoApply {\n\tIfSingle,\n\tFirst,\n\tNever,\n}\n\nexport interface CodeActionFilter {\n\treadonly kind?: CodeActionKind;\n\treadonly includeSourceActions?: boolean;\n\treadonly onlyIncludePreferredActions?: boolean;\n}\n\nexport function mayIncludeActionsOfKind(filter: CodeActionFilter, providedKind: CodeActionKind): boolean {\n\t// A provided kind may be a subset or superset of our filtered kind.\n\tif (filter.kind && !filter.kind.intersects(providedKind)) {\n\t\treturn false;\n\t}\n\n\t// Don't return source actions unless they are explicitly requested\n\tif (CodeActionKind.Source.contains(providedKind) && !filter.includeSourceActions) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\nexport function filtersAction(filter: CodeActionFilter, action: CodeAction): boolean {\n\tconst actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\n\n\t// Filter out actions by kind\n\tif (filter.kind) {\n\t\tif (!actionKind || !filter.kind.contains(actionKind)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Don't return source actions unless they are explicitly requested\n\tif (!filter.includeSourceActions) {\n\t\tif (actionKind && CodeActionKind.Source.contains(actionKind)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (filter.onlyIncludePreferredActions) {\n\t\tif (!action.isPreferred) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport interface CodeActionTrigger {\n\treadonly type: 'auto' | 'manual';\n\treadonly filter?: CodeActionFilter;\n\treadonly autoApply?: CodeActionAutoApply;\n}"]}]}