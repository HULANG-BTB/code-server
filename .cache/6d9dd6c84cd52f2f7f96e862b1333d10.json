{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar walkThroughInput_1 = require(\"vs/workbench/contrib/welcome/walkThrough/common/walkThroughInput\");\nvar network_1 = require(\"vs/base/common/network\");\nvar typeId = 'workbench.editors.walkThroughInput';\nvar inputOptions = {\n    typeId: typeId,\n    name: nls_1.localize('editorWalkThrough.title', \"Interactive Playground\"),\n    resource: uri_1.URI.parse(require.toUrl('./vs_code_editor_walkthrough.md'))\n        .with({ scheme: network_1.Schemas.walkThrough }),\n    telemetryFrom: 'walkThrough'\n};\nvar EditorWalkThroughAction = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorWalkThroughAction, _super);\n    function EditorWalkThroughAction(id, label, editorService, instantiationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.editorService = editorService;\n        _this.instantiationService = instantiationService;\n        return _this;\n    }\n    EditorWalkThroughAction.prototype.run = function () {\n        var input = this.instantiationService.createInstance(walkThroughInput_1.WalkThroughInput, inputOptions);\n        return this.editorService.openEditor(input, { pinned: true })\n            .then(function () { return void (0); });\n    };\n    EditorWalkThroughAction.ID = 'workbench.action.showInteractivePlayground';\n    EditorWalkThroughAction.LABEL = nls_1.localize('editorWalkThrough', \"Interactive Playground\");\n    EditorWalkThroughAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], EditorWalkThroughAction);\n    return EditorWalkThroughAction;\n}(actions_1.Action));\nexports.EditorWalkThroughAction = EditorWalkThroughAction;\nvar EditorWalkThroughInputFactory = /** @class */ (function () {\n    function EditorWalkThroughInputFactory() {\n    }\n    EditorWalkThroughInputFactory.prototype.serialize = function (editorInput) {\n        return '{}';\n    };\n    EditorWalkThroughInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        return instantiationService.createInstance(walkThroughInput_1.WalkThroughInput, inputOptions);\n    };\n    EditorWalkThroughInputFactory.ID = typeId;\n    return EditorWalkThroughInputFactory;\n}());\nexports.EditorWalkThroughInputFactory = EditorWalkThroughInputFactory;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8BAAkC;AAClC,mFAAmF;AACnF,kDAAgD;AAChD,gFAAuF;AACvF,0CAAyC;AACzC,qGAA6H;AAC7H,kDAAiD;AAGjD,IAAM,MAAM,GAAG,oCAAoC,CAAC;AACpD,IAAM,YAAY,GAA4B;IAC7C,MAAM,QAAA;IACN,IAAI,EAAE,cAAQ,CAAC,yBAAyB,EAAE,wBAAwB,CAAC;IACnE,QAAQ,EAAE,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACnE,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,WAAW,EAAE,CAAC;IACvC,aAAa,EAAE,aAAa;CAC5B,CAAC;AAEF;IAA6C,mDAAM;IAKlD,iCACC,EAAU,EACV,KAAa,EACoB,aAA6B,EACtB,oBAA2C;QAJpF,YAMC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAJiC,mBAAa,GAAb,aAAa,CAAgB;QACtB,0BAAoB,GAApB,oBAAoB,CAAuB;;IAGpF,CAAC;IAEM,qCAAG,GAAV;QACC,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,mCAAgB,EAAE,YAAY,CAAC,CAAC;QACvF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;aAC3D,IAAI,CAAC,cAAM,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAC;IACxB,CAAC;IAhBsB,0BAAE,GAAG,4CAA4C,CAAC;IAClD,6BAAK,GAAG,cAAQ,CAAC,mBAAmB,EAAE,wBAAwB,CAAC,CAAC;IAH3E,uBAAuB;QAQjC,mBAAA,8BAAc,CAAA;QACd,mBAAA,qCAAqB,CAAA;OATX,uBAAuB,CAmBnC;IAAD,8BAAC;CAAA,AAnBD,CAA6C,gBAAM,GAmBlD;AAnBY,0DAAuB;AAqBpC;IAAA;IAWA,CAAC;IAPO,iDAAS,GAAhB,UAAiB,WAAwB;QACxC,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,mDAAW,GAAlB,UAAmB,oBAA2C,EAAE,qBAA6B;QAC5F,OAAO,oBAAoB,CAAC,cAAc,CAAC,mCAAgB,EAAE,YAAY,CAAC,CAAC;IAC5E,CAAC;IARe,gCAAE,GAAG,MAAM,CAAC;IAS7B,oCAAC;CAAA,AAXD,IAWC;AAXY,sEAA6B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Action } from 'vs/base/common/actions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { WalkThroughInput, WalkThroughInputOptions } from 'vs/workbench/contrib/welcome/walkThrough/common/walkThroughInput';\nimport { Schemas } from 'vs/base/common/network';\nimport { IEditorInputFactory, EditorInput } from 'vs/workbench/common/editor';\n\nconst typeId = 'workbench.editors.walkThroughInput';\nconst inputOptions: WalkThroughInputOptions = {\n\ttypeId,\n\tname: localize('editorWalkThrough.title', \"Interactive Playground\"),\n\tresource: URI.parse(require.toUrl('./vs_code_editor_walkthrough.md'))\n\t\t.with({ scheme: Schemas.walkThrough }),\n\ttelemetryFrom: 'walkThrough'\n};\n\nexport class EditorWalkThroughAction extends Action {\n\n\tpublic static readonly ID = 'workbench.action.showInteractivePlayground';\n\tpublic static readonly LABEL = localize('editorWalkThrough', \"Interactive Playground\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<void> {\n\t\tconst input = this.instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t\treturn this.editorService.openEditor(input, { pinned: true })\n\t\t\t.then(() => void (0));\n\t}\n}\n\nexport class EditorWalkThroughInputFactory implements IEditorInputFactory {\n\n\tstatic readonly ID = typeId;\n\n\tpublic serialize(editorInput: EditorInput): string {\n\t\treturn '{}';\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): WalkThroughInput {\n\t\treturn instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t}\n}\n"]}]}