{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/electron-browser/workspacesService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/electron-browser/workspacesService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar mainProcessService_1 = require(\"vs/platform/ipc/electron-browser/mainProcessService\");\nvar WorkspacesService = /** @class */ (function () {\n    function WorkspacesService(mainProcessService) {\n        this.channel = mainProcessService.getChannel('workspaces');\n    }\n    WorkspacesService.prototype.createUntitledWorkspace = function (folders, remoteAuthority) {\n        return this.channel.call('createUntitledWorkspace', [folders, remoteAuthority]).then(workspaces_1.reviveWorkspaceIdentifier);\n    };\n    WorkspacesService.prototype.deleteUntitledWorkspace = function (workspaceIdentifier) {\n        return this.channel.call('deleteUntitledWorkspace', workspaceIdentifier);\n    };\n    WorkspacesService.prototype.getWorkspaceIdentifier = function (configPath) {\n        return this.channel.call('getWorkspaceIdentifier', configPath).then(workspaces_1.reviveWorkspaceIdentifier);\n    };\n    WorkspacesService = tslib_1.__decorate([\n        tslib_1.__param(0, mainProcessService_1.IMainProcessService)\n    ], WorkspacesService);\n    return WorkspacesService;\n}());\nexports.WorkspacesService = WorkspacesService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/electron-browser/workspacesService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/electron-browser/workspacesService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,uEAA6J;AAC7J,0FAA0F;AAI1F;IAMC,2BAAiC,kBAAuC;QACvE,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,mDAAuB,GAAvB,UAAwB,OAAwC,EAAE,eAAwB;QACzF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,sCAAyB,CAAC,CAAC;IACjH,CAAC;IAED,mDAAuB,GAAvB,UAAwB,mBAAyC;QAChE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,EAAE,mBAAmB,CAAC,CAAC;IAC1E,CAAC;IAED,kDAAsB,GAAtB,UAAuB,UAAe;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,sCAAyB,CAAC,CAAC;IAChG,CAAC;IApBW,iBAAiB;QAMhB,mBAAA,wCAAmB,CAAA;OANpB,iBAAiB,CAqB7B;IAAD,wBAAC;CAAA,AArBD,IAqBC;AArBY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IWorkspacesService, IWorkspaceIdentifier, IWorkspaceFolderCreationData, reviveWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-browser/mainProcessService';\nimport { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\n\nexport class WorkspacesService implements IWorkspacesService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate channel: IChannel;\n\n\tconstructor(@IMainProcessService mainProcessService: IMainProcessService) {\n\t\tthis.channel = mainProcessService.getChannel('workspaces');\n\t}\n\n\tcreateUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\treturn this.channel.call('createUntitledWorkspace', [folders, remoteAuthority]).then(reviveWorkspaceIdentifier);\n\t}\n\n\tdeleteUntitledWorkspace(workspaceIdentifier: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.channel.call('deleteUntitledWorkspace', workspaceIdentifier);\n\t}\n\n\tgetWorkspaceIdentifier(configPath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn this.channel.call('getWorkspaceIdentifier', configPath).then(reviveWorkspaceIdentifier);\n\t}\n}\n"]}]}