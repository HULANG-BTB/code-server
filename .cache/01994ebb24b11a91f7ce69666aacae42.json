{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar contextMenuHandler_1 = require(\"./contextMenuHandler\");\nvar contextView_1 = require(\"./contextView\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar event_1 = require(\"vs/base/common/event\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar ContextMenuService = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextMenuService, _super);\n    function ContextMenuService(telemetryService, notificationService, contextViewService, keybindingService, themeService) {\n        var _this = _super.call(this) || this;\n        _this._onDidContextMenu = _this._register(new event_1.Emitter());\n        _this.contextMenuHandler = new contextMenuHandler_1.ContextMenuHandler(contextViewService, telemetryService, notificationService, keybindingService, themeService);\n        return _this;\n    }\n    Object.defineProperty(ContextMenuService.prototype, \"onDidContextMenu\", {\n        get: function () { return this._onDidContextMenu.event; },\n        enumerable: true,\n        configurable: true\n    });\n    ContextMenuService.prototype.configure = function (options) {\n        this.contextMenuHandler.configure(options);\n    };\n    // ContextMenu\n    ContextMenuService.prototype.showContextMenu = function (delegate) {\n        this.contextMenuHandler.showContextMenu(delegate);\n        this._onDidContextMenu.fire();\n    };\n    ContextMenuService = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, contextView_1.IContextViewService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, themeService_1.IThemeService)\n    ], ContextMenuService);\n    return ContextMenuService;\n}(lifecycle_1.Disposable));\nexports.ContextMenuService = ContextMenuService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,2DAAsF;AACtF,6CAAyE;AACzE,oEAA2E;AAC3E,8CAAsD;AACtD,6EAAoF;AAEpF,sEAAsE;AACtE,uEAA8E;AAC9E,sDAAsD;AAEtD;IAAwC,8CAAU;IAQjD,4BACoB,gBAAmC,EAChC,mBAAyC,EAC1C,kBAAuC,EACxC,iBAAqC,EAC1C,YAA2B;QAL3C,YAOC,iBAAO,SAGP;QAfO,uBAAiB,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAc/D,KAAI,CAAC,kBAAkB,GAAG,IAAI,uCAAkB,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;;IAC9I,CAAC;IAdD,sBAAI,gDAAgB;aAApB,cAAsC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAgB5E,sCAAS,GAAT,UAAU,OAAmC;QAC5C,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,cAAc;IAEd,4CAAe,GAAf,UAAgB,QAA8B;QAC7C,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IA7BW,kBAAkB;QAS5B,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,4BAAa,CAAA;OAbH,kBAAkB,CA8B9B;IAAD,yBAAC;CAAA,AA9BD,CAAwC,sBAAU,GA8BjD;AA9BY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextMenuHandler, IContextMenuHandlerOptions } from './contextMenuHandler';\nimport { IContextViewService, IContextMenuService } from './contextView';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IContextMenuDelegate } from 'vs/base/browser/contextmenu';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport class ContextMenuService extends Disposable implements IContextMenuService {\n\t_serviceBrand: any;\n\n\tprivate _onDidContextMenu = this._register(new Emitter<void>());\n\tget onDidContextMenu(): Event<void> { return this._onDidContextMenu.event; }\n\n\tprivate contextMenuHandler: ContextMenuHandler;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.contextMenuHandler = new ContextMenuHandler(contextViewService, telemetryService, notificationService, keybindingService, themeService);\n\t}\n\n\tconfigure(options: IContextMenuHandlerOptions): void {\n\t\tthis.contextMenuHandler.configure(options);\n\t}\n\n\t// ContextMenu\n\n\tshowContextMenu(delegate: IContextMenuDelegate): void {\n\t\tthis.contextMenuHandler.showContextMenu(delegate);\n\t\tthis._onDidContextMenu.fire();\n\t}\n}\n"]}]}