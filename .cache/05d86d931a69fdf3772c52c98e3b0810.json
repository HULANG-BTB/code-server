{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/base/common/charCode\", \"vs/base/common/strings\"], function (require, exports, range_1, charCode_1, strings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class WordSelectionRangeProvider {\n        provideSelectionRanges(model, positions) {\n            const result = [];\n            for (const position of positions) {\n                const bucket = [];\n                result.push(bucket);\n                this._addInWordRanges(bucket, model, position);\n                this._addWordRanges(bucket, model, position);\n                this._addWhitespaceLine(bucket, model, position);\n                bucket.push({ range: model.getFullModelRange(), kind: 'statement.all' });\n            }\n            return result;\n        }\n        _addInWordRanges(bucket, model, pos) {\n            const obj = model.getWordAtPosition(pos);\n            if (!obj) {\n                return;\n            }\n            let { word, startColumn } = obj;\n            let offset = pos.column - startColumn;\n            let start = offset;\n            let end = offset;\n            let lastCh = 0;\n            // LEFT anchor (start)\n            for (; start >= 0; start--) {\n                let ch = word.charCodeAt(start);\n                if (ch === charCode_1.CharCode.Underline || ch === charCode_1.CharCode.Dash) {\n                    // foo-bar OR foo_bar\n                    break;\n                }\n                else if (strings_1.isLowerAsciiLetter(ch) && strings_1.isUpperAsciiLetter(lastCh)) {\n                    // fooBar\n                    break;\n                }\n                lastCh = ch;\n            }\n            start += 1;\n            // RIGHT anchor (end)\n            for (; end < word.length; end++) {\n                let ch = word.charCodeAt(end);\n                if (strings_1.isUpperAsciiLetter(ch) && strings_1.isLowerAsciiLetter(lastCh)) {\n                    // fooBar\n                    break;\n                }\n                else if (ch === charCode_1.CharCode.Underline || ch === charCode_1.CharCode.Dash) {\n                    // foo-bar OR foo_bar\n                    break;\n                }\n                lastCh = ch;\n            }\n            if (start < end) {\n                bucket.push({ range: new range_1.Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end), kind: 'statement.word.part' });\n            }\n        }\n        _addWordRanges(bucket, model, pos) {\n            const word = model.getWordAtPosition(pos);\n            if (word) {\n                bucket.push({ range: new range_1.Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn), kind: 'statement.word' });\n            }\n        }\n        _addWhitespaceLine(bucket, model, pos) {\n            if (model.getLineLength(pos.lineNumber) > 0\n                && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0\n                && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) {\n                bucket.push({ range: new range_1.Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber)), kind: 'statement.line' });\n            }\n        }\n    }\n    exports.WordSelectionRangeProvider = WordSelectionRangeProvider;\n});\n",null]}