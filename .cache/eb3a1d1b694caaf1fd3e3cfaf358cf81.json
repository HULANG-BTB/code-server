{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/common/quickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/common/quickOpen.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Mode;\n(function (Mode) {\n    Mode[Mode[\"PREVIEW\"] = 0] = \"PREVIEW\";\n    Mode[Mode[\"OPEN\"] = 1] = \"OPEN\";\n    Mode[Mode[\"OPEN_IN_BACKGROUND\"] = 2] = \"OPEN_IN_BACKGROUND\";\n})(Mode = exports.Mode || (exports.Mode = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/common/quickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/common/quickOpen.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAuChG,IAAkB,IAIjB;AAJD,WAAkB,IAAI;IACrB,qCAAO,CAAA;IACP,+BAAI,CAAA;IACJ,2DAAkB,CAAA;AACnB,CAAC,EAJiB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAIrB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\n\nexport interface IQuickNavigateConfiguration {\n\tkeybindings: ResolvedKeybinding[];\n}\n\nexport interface IAutoFocus {\n\n\t/**\n\t * The index of the element to focus in the result list.\n\t */\n\tautoFocusIndex?: number;\n\n\t/**\n\t * If set to true, will automatically select the first entry from the result list.\n\t */\n\tautoFocusFirstEntry?: boolean;\n\n\t/**\n\t * If set to true, will automatically select the second entry from the result list.\n\t */\n\tautoFocusSecondEntry?: boolean;\n\n\t/**\n\t * If set to true, will automatically select the last entry from the result list.\n\t */\n\tautoFocusLastEntry?: boolean;\n\n\t/**\n\t * If set to true, will automatically select any entry whose label starts with the search\n\t * value. Since some entries to the top might match the query but not on the prefix, this\n\t * allows to select the most accurate match (matching the prefix) while still showing other\n\t * elements.\n\t */\n\tautoFocusPrefixMatch?: string;\n}\n\nexport const enum Mode {\n\tPREVIEW,\n\tOPEN,\n\tOPEN_IN_BACKGROUND\n}\n\nexport interface IEntryRunContext {\n\tevent: any;\n\tkeymods: IKeyMods;\n\tquickNavigateConfiguration: IQuickNavigateConfiguration | undefined;\n}\n\nexport interface IKeyMods {\n\tctrlCmd: boolean;\n\talt: boolean;\n}\n\nexport interface IDataSource<T> {\n\tgetId(entry: T): string;\n\tgetLabel(entry: T): string | null;\n}\n\n/**\n * See vs/base/parts/tree/browser/tree.ts - IRenderer\n */\nexport interface IRenderer<T> {\n\tgetHeight(entry: T): number;\n\tgetTemplateId(entry: T): string;\n\trenderTemplate(templateId: string, container: HTMLElement, styles: any): any;\n\trenderElement(entry: T, templateId: string, templateData: any, styles: any): void;\n\tdisposeTemplate(templateId: string, templateData: any): void;\n}\n\nexport interface IFilter<T> {\n\tisVisible(entry: T): boolean;\n}\n\nexport interface IAccessiblityProvider<T> {\n\tgetAriaLabel(entry: T): string;\n}\n\nexport interface IRunner<T> {\n\trun(entry: T, mode: Mode, context: IEntryRunContext): boolean;\n}\n\nexport interface IModel<T> {\n\tentries: T[];\n\tdataSource: IDataSource<T>;\n\trenderer: IRenderer<T>;\n\trunner: IRunner<T>;\n\tfilter?: IFilter<T>;\n\taccessibilityProvider?: IAccessiblityProvider<T>;\n}"]}]}