{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/token\", \"vs/editor/common/modes\"], function (require, exports, token_1, modes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class NullStateImpl {\n        clone() {\n            return this;\n        }\n        equals(other) {\n            return (this === other);\n        }\n    }\n    exports.NULL_STATE = new NullStateImpl();\n    exports.NULL_MODE_ID = 'vs.editor.nullMode';\n    exports.NULL_LANGUAGE_IDENTIFIER = new modes_1.LanguageIdentifier(exports.NULL_MODE_ID, modes_1.LanguageId.Null);\n    function nullTokenize(modeId, buffer, state, deltaOffset) {\n        return new token_1.TokenizationResult([new token_1.Token(deltaOffset, '', modeId)], state);\n    }\n    exports.nullTokenize = nullTokenize;\n    function nullTokenize2(languageId, buffer, state, deltaOffset) {\n        let tokens = new Uint32Array(2);\n        tokens[0] = deltaOffset;\n        tokens[1] = ((languageId << modes_1.MetadataConsts.LANGUAGEID_OFFSET)\n            | (modes_1.StandardTokenType.Other << modes_1.MetadataConsts.TOKEN_TYPE_OFFSET)\n            | (modes_1.FontStyle.None << modes_1.MetadataConsts.FONT_STYLE_OFFSET)\n            | (modes_1.ColorId.DefaultForeground << modes_1.MetadataConsts.FOREGROUND_OFFSET)\n            | (modes_1.ColorId.DefaultBackground << modes_1.MetadataConsts.BACKGROUND_OFFSET)) >>> 0;\n        return new token_1.TokenizationResult2(tokens, state === null ? exports.NULL_STATE : state);\n    }\n    exports.nullTokenize2 = nullTokenize2;\n});\n",null]}