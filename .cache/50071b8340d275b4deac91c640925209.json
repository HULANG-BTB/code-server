{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar types = require(\"vs/base/common/types\");\nvar extpath_1 = require(\"vs/base/common/extpath\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar textEditor_1 = require(\"vs/workbench/browser/parts/editor/textEditor\");\nvar binaryEditorModel_1 = require(\"vs/workbench/common/editor/binaryEditorModel\");\nvar fileEditorInput_1 = require(\"vs/workbench/contrib/files/common/editors/fileEditorInput\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar files_2 = require(\"vs/platform/files/common/files\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar errorsWithActions_1 = require(\"vs/base/common/errorsWithActions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\n/**\n * An implementation of editor for file system resources.\n */\nvar TextFileEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(TextFileEditor, _super);\n    function TextFileEditor(telemetryService, fileService, viewletService, instantiationService, contextService, storageService, configurationService, editorService, themeService, editorGroupService, textFileService, windowsService, preferencesService, windowService, explorerService) {\n        var _this = _super.call(this, TextFileEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService) || this;\n        _this.fileService = fileService;\n        _this.viewletService = viewletService;\n        _this.contextService = contextService;\n        _this.windowsService = windowsService;\n        _this.preferencesService = preferencesService;\n        _this.explorerService = explorerService;\n        _this.updateRestoreViewStateConfiguration();\n        // Clear view state for deleted files\n        _this._register(_this.fileService.onFileChanges(function (e) { return _this.onFilesChanged(e); }));\n        return _this;\n    }\n    TextFileEditor.prototype.onFilesChanged = function (e) {\n        var deleted = e.getDeleted();\n        if (deleted && deleted.length) {\n            this.clearTextEditorViewState(deleted.map(function (d) { return d.resource; }));\n        }\n    };\n    TextFileEditor.prototype.handleConfigurationChangeEvent = function (configuration) {\n        _super.prototype.handleConfigurationChangeEvent.call(this, configuration);\n        this.updateRestoreViewStateConfiguration();\n    };\n    TextFileEditor.prototype.updateRestoreViewStateConfiguration = function () {\n        this.restoreViewState = this.configurationService.getValue(undefined, 'workbench.editor.restoreViewState');\n    };\n    TextFileEditor.prototype.getTitle = function () {\n        return this.input ? this.input.getName() : nls.localize('textFileEditor', \"Text File Editor\");\n    };\n    Object.defineProperty(TextFileEditor.prototype, \"input\", {\n        get: function () {\n            return this._input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextFileEditor.prototype.setEditorVisible = function (visible, group) {\n        var _this = this;\n        _super.prototype.setEditorVisible.call(this, visible, group);\n        // React to editors closing to preserve or clear view state. This needs to happen\n        // in the onWillCloseEditor because at that time the editor has not yet\n        // been disposed and we can safely persist the view state still as needed.\n        this.groupListener = lifecycle_1.dispose(this.groupListener);\n        this.groupListener = (group.onWillCloseEditor(function (e) { return _this.onWillCloseEditorInGroup(e); }));\n    };\n    TextFileEditor.prototype.onWillCloseEditorInGroup = function (e) {\n        var editor = e.editor;\n        if (!(editor instanceof fileEditorInput_1.FileEditorInput)) {\n            return; // only handle files\n        }\n        // If the editor is currently active we can always save or clear the view state.\n        // If the editor is not active, we can only clear the view state because it needs\n        // an active editor with the file opened, so we check for the restoreViewState flag\n        // being set.\n        if (editor === this.input || !this.restoreViewState) {\n            this.doSaveOrClearTextEditorViewState(editor);\n        }\n    };\n    TextFileEditor.prototype.setOptions = function (options) {\n        var textOptions = options;\n        if (textOptions && types.isFunction(textOptions.apply)) {\n            textOptions.apply(this.getControl(), editorCommon_1.ScrollType.Smooth);\n        }\n    };\n    TextFileEditor.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        // Update/clear view settings if input changes\n        this.doSaveOrClearTextEditorViewState(this.input);\n        // Set input and resolve\n        return _super.prototype.setInput.call(this, input, options, token).then(function () {\n            return input.resolve().then(function (resolvedModel) {\n                // Check for cancellation\n                if (token.isCancellationRequested) {\n                    return undefined;\n                }\n                // There is a special case where the text editor has to handle binary file editor input: if a binary file\n                // has been resolved and cached before, it maybe an actual instance of BinaryEditorModel. In this case our text\n                // editor has to open this model using the binary editor. We return early in this case.\n                if (resolvedModel instanceof binaryEditorModel_1.BinaryEditorModel) {\n                    return _this.openAsBinary(input, options);\n                }\n                var textFileModel = resolvedModel;\n                // Editor\n                var textEditor = _this.getControl();\n                textEditor.setModel(textFileModel.textEditorModel);\n                // Always restore View State if any associated\n                var editorViewState = _this.loadTextEditorViewState(_this.input.getResource());\n                if (editorViewState) {\n                    textEditor.restoreViewState(editorViewState);\n                }\n                // TextOptions (avoiding instanceof here for a reason, do not change!)\n                if (options && types.isFunction(options.apply)) {\n                    options.apply(textEditor, editorCommon_1.ScrollType.Immediate);\n                }\n                // Readonly flag\n                textEditor.updateOptions({ readOnly: textFileModel.isReadonly() });\n            }, function (error) {\n                // In case we tried to open a file inside the text editor and the response\n                // indicates that this is not a text file, reopen the file through the binary\n                // editor.\n                if (error.fileOperationResult === files_2.FileOperationResult.FILE_IS_BINARY) {\n                    return _this.openAsBinary(input, options);\n                }\n                // Similar, handle case where we were asked to open a folder in the text editor.\n                if (error.fileOperationResult === files_2.FileOperationResult.FILE_IS_DIRECTORY) {\n                    _this.openAsFolder(input);\n                    return Promise.reject(new Error(nls.localize('openFolderError', \"File is a directory\")));\n                }\n                // Offer to create a file from the error if we have a file not found and the name is valid\n                if (error.fileOperationResult === files_2.FileOperationResult.FILE_NOT_FOUND && extpath_1.isValidBasename(resources_1.basename(input.getResource()))) {\n                    return Promise.reject(errorsWithActions_1.createErrorWithActions(errorMessage_1.toErrorMessage(error), {\n                        actions: [\n                            new actions_1.Action('workbench.files.action.createMissingFile', nls.localize('createFile', \"Create File\"), undefined, true, function () {\n                                return _this.fileService.updateContent(input.getResource(), '').then(function () { return _this.editorService.openEditor({\n                                    resource: input.getResource(),\n                                    options: {\n                                        pinned: true // new file gets pinned by default\n                                    }\n                                }); });\n                            })\n                        ]\n                    }));\n                }\n                if (error.fileOperationResult === files_2.FileOperationResult.FILE_EXCEED_MEMORY_LIMIT) {\n                    var memoryLimit_1 = Math.max(files_2.MIN_MAX_MEMORY_SIZE_MB, +_this.configurationService.getValue(undefined, 'files.maxMemoryForLargeFilesMB') || files_2.FALLBACK_MAX_MEMORY_SIZE_MB);\n                    return Promise.reject(errorsWithActions_1.createErrorWithActions(errorMessage_1.toErrorMessage(error), {\n                        actions: [\n                            new actions_1.Action('workbench.window.action.relaunchWithIncreasedMemoryLimit', nls.localize('relaunchWithIncreasedMemoryLimit', \"Restart with {0} MB\", memoryLimit_1), undefined, true, function () {\n                                return _this.windowsService.relaunch({\n                                    addArgs: [\n                                        \"--max-memory=\" + memoryLimit_1\n                                    ]\n                                });\n                            }),\n                            new actions_1.Action('workbench.window.action.configureMemoryLimit', nls.localize('configureMemoryLimit', 'Configure Memory Limit'), undefined, true, function () {\n                                return _this.preferencesService.openGlobalSettings(undefined, { query: 'files.maxMemoryForLargeFilesMB' });\n                            })\n                        ]\n                    }));\n                }\n                // Otherwise make sure the error bubbles up\n                return Promise.reject(error);\n            });\n        });\n    };\n    TextFileEditor.prototype.openAsBinary = function (input, options) {\n        input.setForceOpenAsBinary();\n        this.editorService.openEditor(input, options, this.group);\n    };\n    TextFileEditor.prototype.openAsFolder = function (input) {\n        var _this = this;\n        if (!this.group) {\n            return;\n        }\n        // Since we cannot open a folder, we have to restore the previous input if any and close the editor\n        this.group.closeEditor(this.input).then(function () {\n            // Best we can do is to reveal the folder in the explorer\n            if (_this.contextService.isInsideWorkspace(input.getResource())) {\n                _this.viewletService.openViewlet(files_1.VIEWLET_ID).then(function () {\n                    _this.explorerService.select(input.getResource(), true);\n                });\n            }\n        });\n    };\n    TextFileEditor.prototype.getAriaLabel = function () {\n        var input = this.input;\n        var inputName = input && input.getName();\n        var ariaLabel;\n        if (inputName) {\n            ariaLabel = nls.localize('fileEditorWithInputAriaLabel', \"{0}. Text file editor.\", inputName);\n        }\n        else {\n            ariaLabel = nls.localize('fileEditorAriaLabel', \"Text file editor.\");\n        }\n        return ariaLabel;\n    };\n    TextFileEditor.prototype.clearInput = function () {\n        // Update/clear editor view state in settings\n        this.doSaveOrClearTextEditorViewState(this.input);\n        // Clear Model\n        this.getControl().setModel(null);\n        // Pass to super\n        _super.prototype.clearInput.call(this);\n    };\n    TextFileEditor.prototype.saveState = function () {\n        // Update/clear editor view State\n        this.doSaveOrClearTextEditorViewState(this.input);\n        _super.prototype.saveState.call(this);\n    };\n    TextFileEditor.prototype.doSaveOrClearTextEditorViewState = function (input) {\n        if (!input) {\n            return; // ensure we have an input to handle view state for\n        }\n        // If the user configured to not restore view state, we clear the view\n        // state unless the editor is still opened in the group.\n        if (!this.restoreViewState && (!this.group || !this.group.isOpened(input))) {\n            this.clearTextEditorViewState([input.getResource()], this.group);\n        }\n        // Otherwise we save the view state to restore it later\n        else if (!input.isDisposed()) {\n            this.saveTextEditorViewState(input.getResource());\n        }\n    };\n    TextFileEditor.prototype.dispose = function () {\n        this.groupListener = lifecycle_1.dispose(this.groupListener);\n        _super.prototype.dispose.call(this);\n    };\n    TextFileEditor.ID = files_1.TEXT_FILE_EDITOR_ID;\n    TextFileEditor = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, files_2.IFileService),\n        tslib_1.__param(2, viewlet_1.IViewletService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(5, storage_1.IStorageService),\n        tslib_1.__param(6, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(7, editorService_1.IEditorService),\n        tslib_1.__param(8, themeService_1.IThemeService),\n        tslib_1.__param(9, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(10, textfiles_1.ITextFileService),\n        tslib_1.__param(11, windows_1.IWindowsService),\n        tslib_1.__param(12, preferences_1.IPreferencesService),\n        tslib_1.__param(13, windows_1.IWindowService),\n        tslib_1.__param(14, files_1.IExplorerService)\n    ], TextFileEditor);\n    return TextFileEditor;\n}(textEditor_1.BaseTextEditor));\nexports.TextFileEditor = TextFileEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport * as types from 'vs/base/common/types';\nimport { isValidBasename } from 'vs/base/common/extpath';\nimport { basename } from 'vs/base/common/resources';\nimport { Action } from 'vs/base/common/actions';\nimport { VIEWLET_ID, TEXT_FILE_EDITOR_ID, IExplorerService } from 'vs/workbench/contrib/files/common/files';\nimport { ITextFileEditorModel, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { BaseTextEditor, IEditorConfiguration } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { EditorOptions, TextEditorOptions, IEditorCloseEvent } from 'vs/workbench/common/editor';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { FileOperationError, FileOperationResult, FileChangesEvent, IFileService, FALLBACK_MAX_MEMORY_SIZE_MB, MIN_MAX_MEMORY_SIZE_MB } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IWindowsService, IWindowService } from 'vs/platform/windows/common/windows';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService, IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorGroupView } from 'vs/workbench/browser/parts/editor/editor';\nimport { createErrorWithActions } from 'vs/base/common/errorsWithActions';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends BaseTextEditor {\n\n\tstatic readonly ID = TEXT_FILE_EDITOR_ID;\n\n\tprivate restoreViewState: boolean;\n\tprivate groupListener: IDisposable;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService\n\t) {\n\t\tsuper(TextFileEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService);\n\n\t\tthis.updateRestoreViewStateConfiguration();\n\n\t\t// Clear view state for deleted files\n\t\tthis._register(this.fileService.onFileChanges(e => this.onFilesChanged(e)));\n\t}\n\n\tprivate onFilesChanged(e: FileChangesEvent): void {\n\t\tconst deleted = e.getDeleted();\n\t\tif (deleted && deleted.length) {\n\t\t\tthis.clearTextEditorViewState(deleted.map(d => d.resource));\n\t\t}\n\t}\n\n\tprotected handleConfigurationChangeEvent(configuration?: IEditorConfiguration): void {\n\t\tsuper.handleConfigurationChangeEvent(configuration);\n\n\t\tthis.updateRestoreViewStateConfiguration();\n\t}\n\n\tprivate updateRestoreViewStateConfiguration(): void {\n\t\tthis.restoreViewState = this.configurationService.getValue(undefined, 'workbench.editor.restoreViewState');\n\t}\n\n\tgetTitle(): string {\n\t\treturn this.input ? this.input.getName() : nls.localize('textFileEditor', \"Text File Editor\");\n\t}\n\n\tget input(): FileEditorInput {\n\t\treturn this._input as FileEditorInput;\n\t}\n\n\tsetEditorVisible(visible: boolean, group: IEditorGroup): void {\n\t\tsuper.setEditorVisible(visible, group);\n\n\t\t// React to editors closing to preserve or clear view state. This needs to happen\n\t\t// in the onWillCloseEditor because at that time the editor has not yet\n\t\t// been disposed and we can safely persist the view state still as needed.\n\t\tthis.groupListener = dispose(this.groupListener);\n\t\tthis.groupListener = ((group as IEditorGroupView).onWillCloseEditor(e => this.onWillCloseEditorInGroup(e)));\n\t}\n\n\tprivate onWillCloseEditorInGroup(e: IEditorCloseEvent): void {\n\t\tconst editor = e.editor;\n\t\tif (!(editor instanceof FileEditorInput)) {\n\t\t\treturn; // only handle files\n\t\t}\n\n\t\t// If the editor is currently active we can always save or clear the view state.\n\t\t// If the editor is not active, we can only clear the view state because it needs\n\t\t// an active editor with the file opened, so we check for the restoreViewState flag\n\t\t// being set.\n\t\tif (editor === this.input || !this.restoreViewState) {\n\t\t\tthis.doSaveOrClearTextEditorViewState(editor);\n\t\t}\n\t}\n\n\tsetOptions(options: EditorOptions): void {\n\t\tconst textOptions = <TextEditorOptions>options;\n\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\ttextOptions.apply(this.getControl(), ScrollType.Smooth);\n\t\t}\n\t}\n\n\tsetInput(input: FileEditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\n\t\t// Update/clear view settings if input changes\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\treturn super.setInput(input, options, token).then(() => {\n\t\t\treturn input.resolve().then(resolvedModel => {\n\n\t\t\t\t// Check for cancellation\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// There is a special case where the text editor has to handle binary file editor input: if a binary file\n\t\t\t\t// has been resolved and cached before, it maybe an actual instance of BinaryEditorModel. In this case our text\n\t\t\t\t// editor has to open this model using the binary editor. We return early in this case.\n\t\t\t\tif (resolvedModel instanceof BinaryEditorModel) {\n\t\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t\t}\n\n\t\t\t\tconst textFileModel = <ITextFileEditorModel>resolvedModel;\n\n\t\t\t\t// Editor\n\t\t\t\tconst textEditor = this.getControl();\n\t\t\t\ttextEditor.setModel(textFileModel.textEditorModel);\n\n\t\t\t\t// Always restore View State if any associated\n\t\t\t\tconst editorViewState = this.loadTextEditorViewState(this.input.getResource());\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\ttextEditor.restoreViewState(editorViewState);\n\t\t\t\t}\n\n\t\t\t\t// TextOptions (avoiding instanceof here for a reason, do not change!)\n\t\t\t\tif (options && types.isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\t\t(<TextEditorOptions>options).apply(textEditor, ScrollType.Immediate);\n\t\t\t\t}\n\n\t\t\t\t// Readonly flag\n\t\t\t\ttextEditor.updateOptions({ readOnly: textFileModel.isReadonly() });\n\t\t\t}, error => {\n\n\t\t\t\t// In case we tried to open a file inside the text editor and the response\n\t\t\t\t// indicates that this is not a text file, reopen the file through the binary\n\t\t\t\t// editor.\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY) {\n\t\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t\t}\n\n\t\t\t\t// Similar, handle case where we were asked to open a folder in the text editor.\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_DIRECTORY) {\n\t\t\t\t\tthis.openAsFolder(input);\n\n\t\t\t\t\treturn Promise.reject<any>(new Error(nls.localize('openFolderError', \"File is a directory\")));\n\t\t\t\t}\n\n\t\t\t\t// Offer to create a file from the error if we have a file not found and the name is valid\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND && isValidBasename(basename(input.getResource()))) {\n\t\t\t\t\treturn Promise.reject(createErrorWithActions(toErrorMessage(error), {\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\tnew Action('workbench.files.action.createMissingFile', nls.localize('createFile', \"Create File\"), undefined, true, () => {\n\t\t\t\t\t\t\t\treturn this.fileService.updateContent(input.getResource(), '').then(() => this.editorService.openEditor({\n\t\t\t\t\t\t\t\t\tresource: input.getResource(),\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tpinned: true // new file gets pinned by default\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_EXCEED_MEMORY_LIMIT) {\n\t\t\t\t\tconst memoryLimit = Math.max(MIN_MAX_MEMORY_SIZE_MB, +this.configurationService.getValue<number>(undefined, 'files.maxMemoryForLargeFilesMB') || FALLBACK_MAX_MEMORY_SIZE_MB);\n\n\t\t\t\t\treturn Promise.reject(createErrorWithActions(toErrorMessage(error), {\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\tnew Action('workbench.window.action.relaunchWithIncreasedMemoryLimit', nls.localize('relaunchWithIncreasedMemoryLimit', \"Restart with {0} MB\", memoryLimit), undefined, true, () => {\n\t\t\t\t\t\t\t\treturn this.windowsService.relaunch({\n\t\t\t\t\t\t\t\t\taddArgs: [\n\t\t\t\t\t\t\t\t\t\t`--max-memory=${memoryLimit}`\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tnew Action('workbench.window.action.configureMemoryLimit', nls.localize('configureMemoryLimit', 'Configure Memory Limit'), undefined, true, () => {\n\t\t\t\t\t\t\t\treturn this.preferencesService.openGlobalSettings(undefined, { query: 'files.maxMemoryForLargeFilesMB' });\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\t// Otherwise make sure the error bubbles up\n\t\t\t\treturn Promise.reject(error);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate openAsBinary(input: FileEditorInput, options: EditorOptions): void {\n\t\tinput.setForceOpenAsBinary();\n\t\tthis.editorService.openEditor(input, options, this.group);\n\t}\n\n\tprivate openAsFolder(input: FileEditorInput): void {\n\t\tif (!this.group) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we cannot open a folder, we have to restore the previous input if any and close the editor\n\t\tthis.group.closeEditor(this.input).then(() => {\n\n\t\t\t// Best we can do is to reveal the folder in the explorer\n\t\t\tif (this.contextService.isInsideWorkspace(input.getResource())) {\n\t\t\t\tthis.viewletService.openViewlet(VIEWLET_ID).then(() => {\n\t\t\t\t\tthis.explorerService.select(input.getResource(), true);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\tconst input = this.input;\n\t\tconst inputName = input && input.getName();\n\n\t\tlet ariaLabel: string;\n\t\tif (inputName) {\n\t\t\tariaLabel = nls.localize('fileEditorWithInputAriaLabel', \"{0}. Text file editor.\", inputName);\n\t\t} else {\n\t\t\tariaLabel = nls.localize('fileEditorAriaLabel', \"Text file editor.\");\n\t\t}\n\n\t\treturn ariaLabel;\n\t}\n\n\tclearInput(): void {\n\n\t\t// Update/clear editor view state in settings\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tprotected saveState(): void {\n\n\t\t// Update/clear editor view State\n\t\tthis.doSaveOrClearTextEditorViewState(this.input);\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate doSaveOrClearTextEditorViewState(input: FileEditorInput): void {\n\t\tif (!input) {\n\t\t\treturn; // ensure we have an input to handle view state for\n\t\t}\n\n\t\t// If the user configured to not restore view state, we clear the view\n\t\t// state unless the editor is still opened in the group.\n\t\tif (!this.restoreViewState && (!this.group || !this.group.isOpened(input))) {\n\t\t\tthis.clearTextEditorViewState([input.getResource()], this.group);\n\t\t}\n\n\t\t// Otherwise we save the view state to restore it later\n\t\telse if (!input.isDisposed()) {\n\t\t\tthis.saveTextEditorViewState(input.getResource());\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.groupListener = dispose(this.groupListener);\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}