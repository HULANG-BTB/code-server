{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class SearchChannel {\n        constructor(service) {\n            this.service = service;\n        }\n        listen(_, event, arg) {\n            switch (event) {\n                case 'fileSearch': return this.service.fileSearch(arg);\n                case 'textSearch': return this.service.textSearch(arg);\n            }\n            throw new Error('Event not found');\n        }\n        call(_, command, arg) {\n            switch (command) {\n                case 'clearCache': return this.service.clearCache(arg);\n            }\n            throw new Error('Call not found');\n        }\n    }\n    exports.SearchChannel = SearchChannel;\n    class SearchChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        fileSearch(search) {\n            return this.channel.listen('fileSearch', search);\n        }\n        textSearch(search) {\n            return this.channel.listen('textSearch', search);\n        }\n        clearCache(cacheKey) {\n            return this.channel.call('clearCache', cacheKey);\n        }\n    }\n    exports.SearchChannelClient = SearchChannelClient;\n});\n",null]}