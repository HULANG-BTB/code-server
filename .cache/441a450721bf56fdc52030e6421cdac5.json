{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar InspectKeyMap = /** @class */ (function (_super) {\n    tslib_1.__extends(InspectKeyMap, _super);\n    function InspectKeyMap() {\n        return _super.call(this, {\n            id: 'workbench.action.inspectKeyMappings',\n            label: nls.localize('workbench.action.inspectKeyMap', \"Developer: Inspect Key Mappings\"),\n            alias: 'Developer: Inspect Key Mappings',\n            precondition: null\n        }) || this;\n    }\n    InspectKeyMap.prototype.run = function (accessor, editor) {\n        var keybindingService = accessor.get(keybinding_1.IKeybindingService);\n        var editorService = accessor.get(editorService_1.IEditorService);\n        editorService.openEditor({ contents: keybindingService._dumpDebugInfo(), options: { pinned: true } });\n    };\n    return InspectKeyMap;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(InspectKeyMap);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,uEAA0G;AAC1G,uEAA8E;AAE9E,mFAAmF;AAEnF;IAA4B,yCAAY;IAEvC;eACC,kBAAM;YACL,EAAE,EAAE,qCAAqC;YACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,iCAAiC,CAAC;YACxF,KAAK,EAAE,iCAAiC;YACxC,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IAEM,2BAAG,GAAV,UAAW,QAA0B,EAAE,MAAmB;QACzD,IAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC;QAC3D,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAc,CAAC,CAAC;QAEnD,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,iBAAiB,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAA4B,CAAC,CAAC;IACjI,CAAC;IACF,oBAAC;AAAD,CAAC,AAjBD,CAA4B,+BAAY,GAiBvC;AAED,uCAAoB,CAAC,aAAa,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IUntitledResourceInput } from 'vs/workbench/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nclass InspectKeyMap extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.inspectKeyMappings',\n\t\t\tlabel: nls.localize('workbench.action.inspectKeyMap', \"Developer: Inspect Key Mappings\"),\n\t\t\talias: 'Developer: Inspect Key Mappings',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\teditorService.openEditor({ contents: keybindingService._dumpDebugInfo(), options: { pinned: true } } as IUntitledResourceInput);\n\t}\n}\n\nregisterEditorAction(InspectKeyMap);\n"]}]}