{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorSimpleWorker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorSimpleWorker.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar diff_1 = require(\"vs/base/common/diff/diff\");\nvar iterator_1 = require(\"vs/base/common/iterator\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar diffComputer_1 = require(\"vs/editor/common/diff/diffComputer\");\nvar mirrorTextModel_1 = require(\"vs/editor/common/model/mirrorTextModel\");\nvar wordHelper_1 = require(\"vs/editor/common/model/wordHelper\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar linkComputer_1 = require(\"vs/editor/common/modes/linkComputer\");\nvar inplaceReplaceSupport_1 = require(\"vs/editor/common/modes/supports/inplaceReplaceSupport\");\nvar standaloneBase_1 = require(\"vs/editor/common/standalone/standaloneBase\");\nvar types_1 = require(\"vs/base/common/types\");\n/**\n * @internal\n */\nvar MirrorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(MirrorModel, _super);\n    function MirrorModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MirrorModel.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MirrorModel.prototype, \"version\", {\n        get: function () {\n            return this._versionId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MirrorModel.prototype, \"eol\", {\n        get: function () {\n            return this._eol;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MirrorModel.prototype.getValue = function () {\n        return this.getText();\n    };\n    MirrorModel.prototype.getLinesContent = function () {\n        return this._lines.slice(0);\n    };\n    MirrorModel.prototype.getLineCount = function () {\n        return this._lines.length;\n    };\n    MirrorModel.prototype.getLineContent = function (lineNumber) {\n        return this._lines[lineNumber - 1];\n    };\n    MirrorModel.prototype.getWordAtPosition = function (position, wordDefinition) {\n        var wordAtText = wordHelper_1.getWordAtText(position.column, wordHelper_1.ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new range_1.Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    };\n    MirrorModel.prototype.getWordUntilPosition = function (position, wordDefinition) {\n        var wordAtPosition = this.getWordAtPosition(position, wordDefinition);\n        if (!wordAtPosition) {\n            return {\n                word: '',\n                startColumn: position.column,\n                endColumn: position.column\n            };\n        }\n        return {\n            word: this._lines[position.lineNumber - 1].substring(wordAtPosition.startColumn - 1, position.column - 1),\n            startColumn: wordAtPosition.startColumn,\n            endColumn: position.column\n        };\n    };\n    MirrorModel.prototype.createWordIterator = function (wordDefinition) {\n        var _this = this;\n        var obj;\n        var lineNumber = 0;\n        var lineText;\n        var wordRangesIdx = 0;\n        var wordRanges = [];\n        var next = function () {\n            if (wordRangesIdx < wordRanges.length) {\n                var value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                wordRangesIdx += 1;\n                if (!obj) {\n                    obj = { done: false, value: value };\n                }\n                else {\n                    obj.value = value;\n                }\n                return obj;\n            }\n            else if (lineNumber >= _this._lines.length) {\n                return iterator_1.FIN;\n            }\n            else {\n                lineText = _this._lines[lineNumber];\n                wordRanges = _this._wordenize(lineText, wordDefinition);\n                wordRangesIdx = 0;\n                lineNumber += 1;\n                return next();\n            }\n        };\n        return { next: next };\n    };\n    MirrorModel.prototype.getLineWords = function (lineNumber, wordDefinition) {\n        var content = this._lines[lineNumber - 1];\n        var ranges = this._wordenize(content, wordDefinition);\n        var words = [];\n        for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {\n            var range = ranges_1[_i];\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    };\n    MirrorModel.prototype._wordenize = function (content, wordDefinition) {\n        var result = [];\n        var match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    };\n    MirrorModel.prototype.getValueInRange = function (range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        var lineEnding = this._eol;\n        var startLineIndex = range.startLineNumber - 1;\n        var endLineIndex = range.endLineNumber - 1;\n        var resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (var i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    };\n    MirrorModel.prototype.offsetAt = function (position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getAccumulatedValue(position.lineNumber - 2) + (position.column - 1);\n    };\n    MirrorModel.prototype.positionAt = function (offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        var out = this._lineStarts.getIndexOf(offset);\n        var lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    };\n    MirrorModel.prototype._validateRange = function (range) {\n        var start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        var end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    };\n    MirrorModel.prototype._validatePosition = function (position) {\n        if (!position_1.Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        var lineNumber = position.lineNumber, column = position.column;\n        var hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            var maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber: lineNumber, column: column };\n        }\n    };\n    return MirrorModel;\n}(mirrorTextModel_1.MirrorTextModel));\n/**\n * @internal\n */\nvar BaseEditorSimpleWorker = /** @class */ (function () {\n    function BaseEditorSimpleWorker(foreignModuleFactory) {\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    BaseEditorSimpleWorker.prototype.computeDiff = function (originalUrl, modifiedUrl, ignoreTrimWhitespace) {\n        var original = this._getModel(originalUrl);\n        var modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return Promise.resolve(null);\n        }\n        var originalLines = original.getLinesContent();\n        var modifiedLines = modified.getLinesContent();\n        var diffComputer = new diffComputer_1.DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: true,\n            shouldPostProcessCharChanges: true,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true\n        });\n        var changes = diffComputer.computeDiff();\n        var identical = (changes.length > 0 ? false : this._modelsAreIdentical(original, modified));\n        return Promise.resolve({\n            identical: identical,\n            changes: changes\n        });\n    };\n    BaseEditorSimpleWorker.prototype._modelsAreIdentical = function (original, modified) {\n        var originalLineCount = original.getLineCount();\n        var modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (var line = 1; line <= originalLineCount; line++) {\n            var originalLine = original.getLineContent(line);\n            var modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    };\n    BaseEditorSimpleWorker.prototype.computeDirtyDiff = function (originalUrl, modifiedUrl, ignoreTrimWhitespace) {\n        var original = this._getModel(originalUrl);\n        var modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return Promise.resolve(null);\n        }\n        var originalLines = original.getLinesContent();\n        var modifiedLines = modified.getLinesContent();\n        var diffComputer = new diffComputer_1.DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: false,\n            shouldPostProcessCharChanges: false,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true\n        });\n        return Promise.resolve(diffComputer.computeDiff());\n    };\n    BaseEditorSimpleWorker.prototype.computeMoreMinimalEdits = function (modelUrl, edits) {\n        var model = this._getModel(modelUrl);\n        if (!model) {\n            return Promise.resolve(edits);\n        }\n        var result = [];\n        var lastEol = undefined;\n        edits = arrays_1.mergeSort(edits, function (a, b) {\n            if (a.range && b.range) {\n                return range_1.Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            var aRng = a.range ? 0 : 1;\n            var bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {\n            var _a = edits_1[_i], range = _a.range, text = _a.text, eol = _a.eol;\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (range_1.Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            var original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > BaseEditorSimpleWorker._diffLimit) {\n                result.push({ range: range, text: text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            var changes = diff_1.stringDiff(original, text, false);\n            var editOffset = model.offsetAt(range_1.Range.lift(range).getStartPosition());\n            for (var _b = 0, changes_1 = changes; _b < changes_1.length; _b++) {\n                var change = changes_1[_b];\n                var start = model.positionAt(editOffset + change.originalStart);\n                var end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                var newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return Promise.resolve(result);\n    };\n    // ---- END minimal edits ---------------------------------------------------------------\n    BaseEditorSimpleWorker.prototype.computeLinks = function (modelUrl) {\n        var model = this._getModel(modelUrl);\n        if (!model) {\n            return Promise.resolve(null);\n        }\n        return Promise.resolve(linkComputer_1.computeLinks(model));\n    };\n    BaseEditorSimpleWorker.prototype.textualSuggest = function (modelUrl, position, wordDef, wordDefFlags) {\n        var model = this._getModel(modelUrl);\n        if (!model) {\n            return Promise.resolve(null);\n        }\n        var seen = Object.create(null);\n        var suggestions = [];\n        var wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        var wordUntil = model.getWordUntilPosition(position, wordDefRegExp);\n        var wordAt = model.getWordAtPosition(position, wordDefRegExp);\n        if (wordAt) {\n            seen[model.getValueInRange(wordAt)] = true;\n        }\n        for (var iter = model.createWordIterator(wordDefRegExp), e = iter.next(); !e.done && suggestions.length <= BaseEditorSimpleWorker._suggestionsLimit; e = iter.next()) {\n            var word = e.value;\n            if (seen[word]) {\n                continue;\n            }\n            seen[word] = true;\n            if (!isNaN(Number(word))) {\n                continue;\n            }\n            suggestions.push({\n                kind: modes_1.CompletionItemKind.Text,\n                label: word,\n                insertText: word,\n                range: { startLineNumber: position.lineNumber, startColumn: wordUntil.startColumn, endLineNumber: position.lineNumber, endColumn: wordUntil.endColumn }\n            });\n        }\n        return Promise.resolve({ suggestions: suggestions });\n    };\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    BaseEditorSimpleWorker.prototype.computeWordRanges = function (modelUrl, range, wordDef, wordDefFlags) {\n        var model = this._getModel(modelUrl);\n        if (!model) {\n            return Promise.resolve(Object.create(null));\n        }\n        var wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        var result = Object.create(null);\n        for (var line = range.startLineNumber; line < range.endLineNumber; line++) {\n            var words = model.getLineWords(line, wordDefRegExp);\n            for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {\n                var word = words_1[_i];\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                var array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    //#endregion\n    BaseEditorSimpleWorker.prototype.navigateValueSet = function (modelUrl, range, up, wordDef, wordDefFlags) {\n        var model = this._getModel(modelUrl);\n        if (!model) {\n            return Promise.resolve(null);\n        }\n        var wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        var selectionText = model.getValueInRange(range);\n        var wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return Promise.resolve(null);\n        }\n        var word = model.getValueInRange(wordRange);\n        var result = inplaceReplaceSupport_1.BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return Promise.resolve(result);\n    };\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    BaseEditorSimpleWorker.prototype.loadForeignModule = function (moduleId, createData) {\n        var _this = this;\n        var ctx = {\n            getMirrorModels: function () {\n                return _this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            var methods = [];\n            for (var _i = 0, _a = types_1.getAllPropertyNames(this._foreignModule); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                if (typeof this._foreignModule[prop] === 'function') {\n                    methods.push(prop);\n                }\n            }\n            return Promise.resolve(methods);\n        }\n        // ESM-comment-begin\n        return new Promise(function (resolve, reject) {\n            require([moduleId], function (foreignModule) {\n                _this._foreignModule = foreignModule.create(ctx, createData);\n                var methods = [];\n                for (var _i = 0, _a = types_1.getAllPropertyNames(_this._foreignModule); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    if (typeof _this._foreignModule[prop] === 'function') {\n                        methods.push(prop);\n                    }\n                }\n                resolve(methods);\n            }, reject);\n        });\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        // return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    };\n    // foreign method request\n    BaseEditorSimpleWorker.prototype.fmr = function (method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    // ---- END diff --------------------------------------------------------------------------\n    // ---- BEGIN minimal edits ---------------------------------------------------------------\n    BaseEditorSimpleWorker._diffLimit = 10000;\n    // ---- BEGIN suggest --------------------------------------------------------------------------\n    BaseEditorSimpleWorker._suggestionsLimit = 10000;\n    return BaseEditorSimpleWorker;\n}());\nexports.BaseEditorSimpleWorker = BaseEditorSimpleWorker;\n/**\n * @internal\n */\nvar EditorSimpleWorkerImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorSimpleWorkerImpl, _super);\n    function EditorSimpleWorkerImpl(foreignModuleFactory) {\n        var _this = _super.call(this, foreignModuleFactory) || this;\n        _this._models = Object.create(null);\n        return _this;\n    }\n    EditorSimpleWorkerImpl.prototype.dispose = function () {\n        this._models = Object.create(null);\n    };\n    EditorSimpleWorkerImpl.prototype._getModel = function (uri) {\n        return this._models[uri];\n    };\n    EditorSimpleWorkerImpl.prototype._getModels = function () {\n        var _this = this;\n        var all = [];\n        Object.keys(this._models).forEach(function (key) { return all.push(_this._models[key]); });\n        return all;\n    };\n    EditorSimpleWorkerImpl.prototype.acceptNewModel = function (data) {\n        this._models[data.url] = new MirrorModel(uri_1.URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    };\n    EditorSimpleWorkerImpl.prototype.acceptModelChanged = function (strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        var model = this._models[strURL];\n        model.onEvents(e);\n    };\n    EditorSimpleWorkerImpl.prototype.acceptRemovedModel = function (strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    };\n    return EditorSimpleWorkerImpl;\n}(BaseEditorSimpleWorker));\nexports.EditorSimpleWorkerImpl = EditorSimpleWorkerImpl;\n/**\n * Called on the worker side\n * @internal\n */\nfunction create() {\n    return new EditorSimpleWorkerImpl(null);\n}\nexports.create = create;\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    platform_1.globals.monaco = standaloneBase_1.createMonacoBaseAPI();\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorSimpleWorker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorSimpleWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mergeSort } from 'vs/base/common/arrays';\nimport { stringDiff } from 'vs/base/common/diff/diff';\nimport { FIN, Iterator, IteratorResult } from 'vs/base/common/iterator';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { globals } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { DiffComputer } from 'vs/editor/common/diff/diffComputer';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EndOfLineSequence, IWordAtPosition } from 'vs/editor/common/model';\nimport { IModelChangedEvent, MirrorTextModel as BaseMirrorModel } from 'vs/editor/common/model/mirrorTextModel';\nimport { ensureValidWordDefinition, getWordAtText } from 'vs/editor/common/model/wordHelper';\nimport { CompletionItem, CompletionItemKind, CompletionList, IInplaceReplaceSupportResult, ILink, TextEdit } from 'vs/editor/common/modes';\nimport { ILinkComputerTarget, computeLinks } from 'vs/editor/common/modes/linkComputer';\nimport { BasicInplaceReplace } from 'vs/editor/common/modes/supports/inplaceReplaceSupport';\nimport { IDiffComputationResult } from 'vs/editor/common/services/editorWorkerService';\nimport { createMonacoBaseAPI } from 'vs/editor/common/standalone/standaloneBase';\nimport { getAllPropertyNames } from 'vs/base/common/types';\n\nexport interface IMirrorModel {\n\treadonly uri: URI;\n\treadonly version: number;\n\tgetValue(): string;\n}\n\nexport interface IWorkerContext {\n\t/**\n\t * Get all available mirror models in this worker.\n\t */\n\tgetMirrorModels(): IMirrorModel[];\n}\n\n/**\n * @internal\n */\nexport interface IRawModelData {\n\turl: string;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n}\n\n/**\n * @internal\n */\nexport interface ICommonModel extends ILinkComputerTarget, IMirrorModel {\n\turi: URI;\n\tversion: number;\n\teol: string;\n\tgetValue(): string;\n\n\tgetLinesContent(): string[];\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineWords(lineNumber: number, wordDefinition: RegExp): IWordAtPosition[];\n\tcreateWordIterator(wordDefinition: RegExp): Iterator<string>;\n\tgetWordUntilPosition(position: IPosition, wordDefinition: RegExp): IWordAtPosition;\n\tgetValueInRange(range: IRange): string;\n\tgetWordAtPosition(position: IPosition, wordDefinition: RegExp): Range | null;\n\toffsetAt(position: IPosition): number;\n\tpositionAt(offset: number): IPosition;\n}\n\n/**\n * Range of a word inside a model.\n * @internal\n */\ninterface IWordRange {\n\t/**\n\t * The index where the word starts.\n\t */\n\treadonly start: number;\n\t/**\n\t * The index where the word ends.\n\t */\n\treadonly end: number;\n}\n\n/**\n * @internal\n */\nclass MirrorModel extends BaseMirrorModel implements ICommonModel {\n\n\tpublic get uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tpublic get version(): number {\n\t\treturn this._versionId;\n\t}\n\n\tpublic get eol(): string {\n\t\treturn this._eol;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this.getText();\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\treturn this._lines.slice(0);\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.length;\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._lines[lineNumber - 1];\n\t}\n\n\tpublic getWordAtPosition(position: IPosition, wordDefinition: RegExp): Range | null {\n\n\t\tlet wordAtText = getWordAtText(\n\t\t\tposition.column,\n\t\t\tensureValidWordDefinition(wordDefinition),\n\t\t\tthis._lines[position.lineNumber - 1],\n\t\t\t0\n\t\t);\n\n\t\tif (wordAtText) {\n\t\t\treturn new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition, wordDefinition: RegExp): IWordAtPosition {\n\t\tconst wordAtPosition = this.getWordAtPosition(position, wordDefinition);\n\t\tif (!wordAtPosition) {\n\t\t\treturn {\n\t\t\t\tword: '',\n\t\t\t\tstartColumn: position.column,\n\t\t\t\tendColumn: position.column\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tword: this._lines[position.lineNumber - 1].substring(wordAtPosition.startColumn - 1, position.column - 1),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column\n\t\t};\n\t}\n\n\tpublic createWordIterator(wordDefinition: RegExp): Iterator<string> {\n\t\tlet obj: { done: false; value: string; };\n\t\tlet lineNumber = 0;\n\t\tlet lineText: string;\n\t\tlet wordRangesIdx = 0;\n\t\tlet wordRanges: IWordRange[] = [];\n\t\tlet next = (): IteratorResult<string> => {\n\n\t\t\tif (wordRangesIdx < wordRanges.length) {\n\t\t\t\tconst value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n\t\t\t\twordRangesIdx += 1;\n\t\t\t\tif (!obj) {\n\t\t\t\t\tobj = { done: false, value: value };\n\t\t\t\t} else {\n\t\t\t\t\tobj.value = value;\n\t\t\t\t}\n\t\t\t\treturn obj;\n\n\t\t\t} else if (lineNumber >= this._lines.length) {\n\t\t\t\treturn FIN;\n\n\t\t\t} else {\n\t\t\t\tlineText = this._lines[lineNumber];\n\t\t\t\twordRanges = this._wordenize(lineText, wordDefinition);\n\t\t\t\twordRangesIdx = 0;\n\t\t\t\tlineNumber += 1;\n\t\t\t\treturn next();\n\t\t\t}\n\t\t};\n\t\treturn { next };\n\t}\n\n\tpublic getLineWords(lineNumber: number, wordDefinition: RegExp): IWordAtPosition[] {\n\t\tlet content = this._lines[lineNumber - 1];\n\t\tlet ranges = this._wordenize(content, wordDefinition);\n\t\tlet words: IWordAtPosition[] = [];\n\t\tfor (const range of ranges) {\n\t\t\twords.push({\n\t\t\t\tword: content.substring(range.start, range.end),\n\t\t\t\tstartColumn: range.start + 1,\n\t\t\t\tendColumn: range.end + 1\n\t\t\t});\n\t\t}\n\t\treturn words;\n\t}\n\n\tprivate _wordenize(content: string, wordDefinition: RegExp): IWordRange[] {\n\t\tconst result: IWordRange[] = [];\n\t\tlet match: RegExpExecArray | null;\n\n\t\twordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n\n\t\twhile (match = wordDefinition.exec(content)) {\n\t\t\tif (match[0].length === 0) {\n\t\t\t\t// it did match the empty string\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.push({ start: match.index, end: match.index + match[0].length });\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getValueInRange(range: IRange): string {\n\t\trange = this._validateRange(range);\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n\t\t}\n\n\t\tlet lineEnding = this._eol;\n\t\tlet startLineIndex = range.startLineNumber - 1;\n\t\tlet endLineIndex = range.endLineNumber - 1;\n\t\tlet resultLines: string[] = [];\n\n\t\tresultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n\t\tfor (let i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i]);\n\t\t}\n\t\tresultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tpublic offsetAt(position: IPosition): number {\n\t\tposition = this._validatePosition(position);\n\t\tthis._ensureLineStarts();\n\t\treturn this._lineStarts!.getAccumulatedValue(position.lineNumber - 2) + (position.column - 1);\n\t}\n\n\tpublic positionAt(offset: number): IPosition {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tthis._ensureLineStarts();\n\t\tlet out = this._lineStarts!.getIndexOf(offset);\n\t\tlet lineLength = this._lines[out.index].length;\n\n\t\t// Ensure we return a valid position\n\t\treturn {\n\t\t\tlineNumber: 1 + out.index,\n\t\t\tcolumn: 1 + Math.min(out.remainder, lineLength)\n\t\t};\n\t}\n\n\tprivate _validateRange(range: IRange): IRange {\n\n\t\tconst start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n\t\tconst end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n\n\t\tif (start.lineNumber !== range.startLineNumber\n\t\t\t|| start.column !== range.startColumn\n\t\t\t|| end.lineNumber !== range.endLineNumber\n\t\t\t|| end.column !== range.endColumn) {\n\n\t\t\treturn {\n\t\t\t\tstartLineNumber: start.lineNumber,\n\t\t\t\tstartColumn: start.column,\n\t\t\t\tendLineNumber: end.lineNumber,\n\t\t\t\tendColumn: end.column\n\t\t\t};\n\t\t}\n\n\t\treturn range;\n\t}\n\n\tprivate _validatePosition(position: IPosition): IPosition {\n\t\tif (!Position.isIPosition(position)) {\n\t\t\tthrow new Error('bad position');\n\t\t}\n\t\tlet { lineNumber, column } = position;\n\t\tlet hasChanged = false;\n\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tcolumn = 1;\n\t\t\thasChanged = true;\n\n\t\t} else if (lineNumber > this._lines.length) {\n\t\t\tlineNumber = this._lines.length;\n\t\t\tcolumn = this._lines[lineNumber - 1].length + 1;\n\t\t\thasChanged = true;\n\n\t\t} else {\n\t\t\tlet maxCharacter = this._lines[lineNumber - 1].length + 1;\n\t\t\tif (column < 1) {\n\t\t\t\tcolumn = 1;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\telse if (column > maxCharacter) {\n\t\t\t\tcolumn = maxCharacter;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasChanged) {\n\t\t\treturn position;\n\t\t} else {\n\t\t\treturn { lineNumber, column };\n\t\t}\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IForeignModuleFactory {\n\t(ctx: IWorkerContext, createData: any): any;\n}\n\ndeclare var require: any;\n\n/**\n * @internal\n */\nexport abstract class BaseEditorSimpleWorker {\n\tprivate readonly _foreignModuleFactory: IForeignModuleFactory | null;\n\tprivate _foreignModule: any;\n\n\tconstructor(foreignModuleFactory: IForeignModuleFactory | null) {\n\t\tthis._foreignModuleFactory = foreignModuleFactory;\n\t\tthis._foreignModule = null;\n\t}\n\n\tprotected abstract _getModel(uri: string): ICommonModel;\n\tprotected abstract _getModels(): ICommonModel[];\n\n\t// ---- BEGIN diff --------------------------------------------------------------------------\n\n\tpublic computeDiff(originalUrl: string, modifiedUrl: string, ignoreTrimWhitespace: boolean): Promise<IDiffComputationResult | null> {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst originalLines = original.getLinesContent();\n\t\tconst modifiedLines = modified.getLinesContent();\n\t\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\tshouldComputeCharChanges: true,\n\t\t\tshouldPostProcessCharChanges: true,\n\t\t\tshouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n\t\t\tshouldMakePrettyDiff: true\n\t\t});\n\n\t\tconst changes = diffComputer.computeDiff();\n\t\tlet identical = (changes.length > 0 ? false : this._modelsAreIdentical(original, modified));\n\t\treturn Promise.resolve({\n\t\t\tidentical: identical,\n\t\t\tchanges: changes\n\t\t});\n\t}\n\n\tprivate _modelsAreIdentical(original: ICommonModel, modified: ICommonModel): boolean {\n\t\tconst originalLineCount = original.getLineCount();\n\t\tconst modifiedLineCount = modified.getLineCount();\n\t\tif (originalLineCount !== modifiedLineCount) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let line = 1; line <= originalLineCount; line++) {\n\t\t\tconst originalLine = original.getLineContent(line);\n\t\t\tconst modifiedLine = modified.getLineContent(line);\n\t\t\tif (originalLine !== modifiedLine) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic computeDirtyDiff(originalUrl: string, modifiedUrl: string, ignoreTrimWhitespace: boolean): Promise<editorCommon.IChange[] | null> {\n\t\tlet original = this._getModel(originalUrl);\n\t\tlet modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet originalLines = original.getLinesContent();\n\t\tlet modifiedLines = modified.getLinesContent();\n\t\tlet diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\tshouldComputeCharChanges: false,\n\t\t\tshouldPostProcessCharChanges: false,\n\t\t\tshouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n\t\t\tshouldMakePrettyDiff: true\n\t\t});\n\t\treturn Promise.resolve(diffComputer.computeDiff());\n\t}\n\n\t// ---- END diff --------------------------------------------------------------------------\n\n\n\t// ---- BEGIN minimal edits ---------------------------------------------------------------\n\n\tprivate static readonly _diffLimit = 10000;\n\n\tpublic computeMoreMinimalEdits(modelUrl: string, edits: TextEdit[]): Promise<TextEdit[]> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(edits);\n\t\t}\n\n\t\tconst result: TextEdit[] = [];\n\t\tlet lastEol: EndOfLineSequence | undefined = undefined;\n\n\t\tedits = mergeSort(edits, (a, b) => {\n\t\t\tif (a.range && b.range) {\n\t\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\t}\n\t\t\t// eol only changes should go to the end\n\t\t\tlet aRng = a.range ? 0 : 1;\n\t\t\tlet bRng = b.range ? 0 : 1;\n\t\t\treturn aRng - bRng;\n\t\t});\n\n\t\tfor (let { range, text, eol } of edits) {\n\n\t\t\tif (typeof eol === 'number') {\n\t\t\t\tlastEol = eol;\n\t\t\t}\n\n\t\t\tif (Range.isEmpty(range) && !text) {\n\t\t\t\t// empty change\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst original = model.getValueInRange(range);\n\t\t\ttext = text!.replace(/\\r\\n|\\n|\\r/g, model.eol);\n\n\t\t\tif (original === text) {\n\t\t\t\t// noop\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure diff won't take too long\n\t\t\tif (Math.max(text.length, original.length) > BaseEditorSimpleWorker._diffLimit) {\n\t\t\t\tresult.push({ range, text });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// compute diff between original and edit.text\n\t\t\tconst changes = stringDiff(original, text, false);\n\t\t\tconst editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n\n\t\t\tfor (const change of changes) {\n\t\t\t\tconst start = model.positionAt(editOffset + change.originalStart);\n\t\t\t\tconst end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n\t\t\t\tconst newEdit: TextEdit = {\n\t\t\t\t\ttext: text.substr(change.modifiedStart, change.modifiedLength),\n\t\t\t\t\trange: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n\t\t\t\t};\n\n\t\t\t\tif (model.getValueInRange(newEdit.range) !== newEdit.text) {\n\t\t\t\t\tresult.push(newEdit);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lastEol === 'number') {\n\t\t\tresult.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n\t\t}\n\n\t\treturn Promise.resolve(result);\n\t}\n\n\t// ---- END minimal edits ---------------------------------------------------------------\n\n\tpublic computeLinks(modelUrl: string): Promise<ILink[] | null> {\n\t\tlet model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn Promise.resolve(computeLinks(model));\n\t}\n\n\t// ---- BEGIN suggest --------------------------------------------------------------------------\n\n\tprivate static readonly _suggestionsLimit = 10000;\n\n\tpublic textualSuggest(modelUrl: string, position: IPosition, wordDef: string, wordDefFlags: string): Promise<CompletionList | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst seen: Record<string, boolean> = Object.create(null);\n\t\tconst suggestions: CompletionItem[] = [];\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst wordUntil = model.getWordUntilPosition(position, wordDefRegExp);\n\n\t\tconst wordAt = model.getWordAtPosition(position, wordDefRegExp);\n\t\tif (wordAt) {\n\t\t\tseen[model.getValueInRange(wordAt)] = true;\n\t\t}\n\n\t\tfor (\n\t\t\tlet iter = model.createWordIterator(wordDefRegExp), e = iter.next();\n\t\t\t!e.done && suggestions.length <= BaseEditorSimpleWorker._suggestionsLimit;\n\t\t\te = iter.next()\n\t\t) {\n\t\t\tconst word = e.value;\n\t\t\tif (seen[word]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseen[word] = true;\n\t\t\tif (!isNaN(Number(word))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsuggestions.push({\n\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\tlabel: word,\n\t\t\t\tinsertText: word,\n\t\t\t\trange: { startLineNumber: position.lineNumber, startColumn: wordUntil.startColumn, endLineNumber: position.lineNumber, endColumn: wordUntil.endColumn }\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve({ suggestions });\n\t}\n\n\n\t// ---- END suggest --------------------------------------------------------------------------\n\n\t//#region -- word ranges --\n\n\tcomputeWordRanges(modelUrl: string, range: IRange, wordDef: string, wordDefFlags: string): Promise<{ [word: string]: IRange[] }> {\n\t\tlet model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(Object.create(null));\n\t\t}\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst result: { [word: string]: IRange[] } = Object.create(null);\n\t\tfor (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n\t\t\tlet words = model.getLineWords(line, wordDefRegExp);\n\t\t\tfor (const word of words) {\n\t\t\t\tif (!isNaN(Number(word.word))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet array = result[word.word];\n\t\t\t\tif (!array) {\n\t\t\t\t\tarray = [];\n\t\t\t\t\tresult[word.word] = array;\n\t\t\t\t}\n\t\t\t\tarray.push({\n\t\t\t\t\tstartLineNumber: line,\n\t\t\t\t\tstartColumn: word.startColumn,\n\t\t\t\t\tendLineNumber: line,\n\t\t\t\t\tendColumn: word.endColumn\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n\n\t//#endregion\n\n\tpublic navigateValueSet(modelUrl: string, range: IRange, up: boolean, wordDef: string, wordDefFlags: string): Promise<IInplaceReplaceSupportResult | null> {\n\t\tlet model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\n\t\tif (range.startColumn === range.endColumn) {\n\t\t\trange = {\n\t\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\t\tstartColumn: range.startColumn,\n\t\t\t\tendLineNumber: range.endLineNumber,\n\t\t\t\tendColumn: range.endColumn + 1\n\t\t\t};\n\t\t}\n\n\t\tlet selectionText = model.getValueInRange(range);\n\n\t\tlet wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n\t\tif (!wordRange) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tlet word = model.getValueInRange(wordRange);\n\t\tlet result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n\t\treturn Promise.resolve(result);\n\t}\n\n\t// ---- BEGIN foreign module support --------------------------------------------------------------------------\n\n\tpublic loadForeignModule(moduleId: string, createData: any): Promise<string[]> {\n\t\tlet ctx: IWorkerContext = {\n\t\t\tgetMirrorModels: (): IMirrorModel[] => {\n\t\t\t\treturn this._getModels();\n\t\t\t}\n\t\t};\n\n\t\tif (this._foreignModuleFactory) {\n\t\t\tthis._foreignModule = this._foreignModuleFactory(ctx, createData);\n\t\t\t// static foreing module\n\t\t\tlet methods: string[] = [];\n\t\t\tfor (const prop of getAllPropertyNames(this._foreignModule)) {\n\t\t\t\tif (typeof this._foreignModule[prop] === 'function') {\n\t\t\t\t\tmethods.push(prop);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Promise.resolve(methods);\n\t\t}\n\t\t// ESM-comment-begin\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n\t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n\n\t\t\t\tlet methods: string[] = [];\n\t\t\t\tfor (const prop of getAllPropertyNames(this._foreignModule)) {\n\t\t\t\t\tif (typeof this._foreignModule[prop] === 'function') {\n\t\t\t\t\t\tmethods.push(prop);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresolve(methods);\n\n\t\t\t}, reject);\n\t\t});\n\t\t// ESM-comment-end\n\n\t\t// ESM-uncomment-begin\n\t\t// return Promise.reject(new Error(`Unexpected usage`));\n\t\t// ESM-uncomment-end\n\t}\n\n\t// foreign method request\n\tpublic fmr(method: string, args: any[]): Promise<any> {\n\t\tif (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error('Missing requestHandler or method: ' + method));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\t// ---- END foreign module support --------------------------------------------------------------------------\n}\n\n/**\n * @internal\n */\nexport class EditorSimpleWorkerImpl extends BaseEditorSimpleWorker implements IRequestHandler, IDisposable {\n\t_requestHandlerBrand: any;\n\n\tprivate _models: { [uri: string]: MirrorModel; };\n\n\tconstructor(foreignModuleFactory: IForeignModuleFactory | null) {\n\t\tsuper(foreignModuleFactory);\n\t\tthis._models = Object.create(null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._models = Object.create(null);\n\t}\n\n\tprotected _getModel(uri: string): ICommonModel {\n\t\treturn this._models[uri];\n\t}\n\n\tprotected _getModels(): ICommonModel[] {\n\t\tlet all: MirrorModel[] = [];\n\t\tObject.keys(this._models).forEach((key) => all.push(this._models[key]));\n\t\treturn all;\n\t}\n\n\tpublic acceptNewModel(data: IRawModelData): void {\n\t\tthis._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n\t}\n\n\tpublic acceptModelChanged(strURL: string, e: IModelChangedEvent): void {\n\t\tif (!this._models[strURL]) {\n\t\t\treturn;\n\t\t}\n\t\tlet model = this._models[strURL];\n\t\tmodel.onEvents(e);\n\t}\n\n\tpublic acceptRemovedModel(strURL: string): void {\n\t\tif (!this._models[strURL]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._models[strURL];\n\t}\n}\n\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(): IRequestHandler {\n\treturn new EditorSimpleWorkerImpl(null);\n}\n\n// This is only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n\nif (typeof importScripts === 'function') {\n\t// Running in a web worker\n\tglobals.monaco = createMonacoBaseAPI();\n}\n"]}]}