{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar nls_1 = require(\"vs/nls\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\n// Center\nexports.SHOW_NOTIFICATIONS_CENTER = 'notifications.showList';\nexports.HIDE_NOTIFICATIONS_CENTER = 'notifications.hideList';\nexports.TOGGLE_NOTIFICATIONS_CENTER = 'notifications.toggleList';\n// Toasts\nexports.HIDE_NOTIFICATION_TOAST = 'notifications.hideToasts';\nexports.FOCUS_NOTIFICATION_TOAST = 'notifications.focusToasts';\nexports.FOCUS_NEXT_NOTIFICATION_TOAST = 'notifications.focusNextToast';\nexports.FOCUS_PREVIOUS_NOTIFICATION_TOAST = 'notifications.focusPreviousToast';\nexports.FOCUS_FIRST_NOTIFICATION_TOAST = 'notifications.focusFirstToast';\nexports.FOCUS_LAST_NOTIFICATION_TOAST = 'notifications.focusLastToast';\n// Notification\nexports.COLLAPSE_NOTIFICATION = 'notification.collapse';\nexports.EXPAND_NOTIFICATION = 'notification.expand';\nexports.TOGGLE_NOTIFICATION = 'notification.toggle';\nexports.CLEAR_NOTIFICATION = 'notification.clear';\nexports.CLEAR_ALL_NOTIFICATIONS = 'notifications.clearAll';\nexports.NotificationFocusedContext = new contextkey_1.RawContextKey('notificationFocus', true);\nexports.NotificationsCenterVisibleContext = new contextkey_1.RawContextKey('notificationCenterVisible', false);\nexports.NotificationsToastsVisibleContext = new contextkey_1.RawContextKey('notificationToastsVisible', false);\nfunction registerNotificationCommands(center, toasts) {\n    function getNotificationFromContext(listService, context) {\n        if (notifications_1.isNotificationViewItem(context)) {\n            return context;\n        }\n        var list = listService.lastFocusedList;\n        if (list instanceof listService_1.WorkbenchList) {\n            var focusedElement = list.getFocusedElements()[0];\n            if (notifications_1.isNotificationViewItem(focusedElement)) {\n                return focusedElement;\n            }\n        }\n        return undefined;\n    }\n    // Show Notifications Cneter\n    commands_1.CommandsRegistry.registerCommand(exports.SHOW_NOTIFICATIONS_CENTER, function () {\n        center.show();\n    });\n    // Hide Notifications Center\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.HIDE_NOTIFICATIONS_CENTER,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 50,\n        when: exports.NotificationsCenterVisibleContext,\n        primary: keyCodes_1.KeyCode.Escape,\n        handler: function (accessor) { return center.hide(); }\n    });\n    // Toggle Notifications Center\n    commands_1.CommandsRegistry.registerCommand(exports.TOGGLE_NOTIFICATIONS_CENTER, function (accessor) {\n        if (center.isVisible) {\n            center.hide();\n        }\n        else {\n            center.show();\n        }\n    });\n    // Clear Notification\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLEAR_NOTIFICATION,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: exports.NotificationFocusedContext,\n        primary: keyCodes_1.KeyCode.Delete,\n        mac: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace\n        },\n        handler: function (accessor, args) {\n            var notification = getNotificationFromContext(accessor.get(listService_1.IListService), args);\n            if (notification) {\n                notification.close();\n            }\n        }\n    });\n    // Expand Notification\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.EXPAND_NOTIFICATION,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: exports.NotificationFocusedContext,\n        primary: keyCodes_1.KeyCode.RightArrow,\n        handler: function (accessor, args) {\n            var notification = getNotificationFromContext(accessor.get(listService_1.IListService), args);\n            if (notification) {\n                notification.expand();\n            }\n        }\n    });\n    // Collapse Notification\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.COLLAPSE_NOTIFICATION,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: exports.NotificationFocusedContext,\n        primary: keyCodes_1.KeyCode.LeftArrow,\n        handler: function (accessor, args) {\n            var notification = getNotificationFromContext(accessor.get(listService_1.IListService), args);\n            if (notification) {\n                notification.collapse();\n            }\n        }\n    });\n    // Toggle Notification\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.TOGGLE_NOTIFICATION,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: exports.NotificationFocusedContext,\n        primary: keyCodes_1.KeyCode.Space,\n        secondary: [keyCodes_1.KeyCode.Enter],\n        handler: function (accessor) {\n            var notification = getNotificationFromContext(accessor.get(listService_1.IListService));\n            if (notification) {\n                notification.toggle();\n            }\n        }\n    });\n    // Hide Toasts\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.HIDE_NOTIFICATION_TOAST,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 50,\n        when: exports.NotificationsToastsVisibleContext,\n        primary: keyCodes_1.KeyCode.Escape,\n        handler: function (accessor) { return toasts.hide(); }\n    });\n    // Focus Toasts\n    commands_1.CommandsRegistry.registerCommand(exports.FOCUS_NOTIFICATION_TOAST, function () { return toasts.focus(); });\n    // Focus Next Toast\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.FOCUS_NEXT_NOTIFICATION_TOAST,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(exports.NotificationFocusedContext, exports.NotificationsToastsVisibleContext),\n        primary: keyCodes_1.KeyCode.DownArrow,\n        handler: function (accessor) {\n            toasts.focusNext();\n        }\n    });\n    // Focus Previous Toast\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(exports.NotificationFocusedContext, exports.NotificationsToastsVisibleContext),\n        primary: keyCodes_1.KeyCode.UpArrow,\n        handler: function (accessor) {\n            toasts.focusPrevious();\n        }\n    });\n    // Focus First Toast\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.FOCUS_FIRST_NOTIFICATION_TOAST,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(exports.NotificationFocusedContext, exports.NotificationsToastsVisibleContext),\n        primary: keyCodes_1.KeyCode.PageUp,\n        secondary: [keyCodes_1.KeyCode.Home],\n        handler: function (accessor) {\n            toasts.focusFirst();\n        }\n    });\n    // Focus Last Toast\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.FOCUS_LAST_NOTIFICATION_TOAST,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(exports.NotificationFocusedContext, exports.NotificationsToastsVisibleContext),\n        primary: keyCodes_1.KeyCode.PageDown,\n        secondary: [keyCodes_1.KeyCode.End],\n        handler: function (accessor) {\n            toasts.focusLast();\n        }\n    });\n    /// Clear All Notifications\n    commands_1.CommandsRegistry.registerCommand(exports.CLEAR_ALL_NOTIFICATIONS, function () { return center.clearAll(); });\n    // Commands for Command Palette\n    var category = nls_1.localize('notifications', \"Notifications\");\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, { command: { id: exports.SHOW_NOTIFICATIONS_CENTER, title: { value: nls_1.localize('showNotifications', \"Show Notifications\"), original: 'Notifications: Show Notifications' }, category: category }, when: exports.NotificationsCenterVisibleContext.toNegated() });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, { command: { id: exports.HIDE_NOTIFICATIONS_CENTER, title: { value: nls_1.localize('hideNotifications', \"Hide Notifications\"), original: 'Notifications: Hide Notifications' }, category: category }, when: exports.NotificationsCenterVisibleContext });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, { command: { id: exports.CLEAR_ALL_NOTIFICATIONS, title: { value: nls_1.localize('clearAllNotifications', \"Clear All Notifications\"), original: 'Notifications: Clear All Notifications' }, category: category } });\n}\nexports.registerNotificationCommands = registerNotificationCommands;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { RawContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { INotificationViewItem, isNotificationViewItem } from 'vs/workbench/common/notifications';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { IListService, WorkbenchList } from 'vs/platform/list/browser/listService';\n\n// Center\nexport const SHOW_NOTIFICATIONS_CENTER = 'notifications.showList';\nexport const HIDE_NOTIFICATIONS_CENTER = 'notifications.hideList';\nexport const TOGGLE_NOTIFICATIONS_CENTER = 'notifications.toggleList';\n\n// Toasts\nexport const HIDE_NOTIFICATION_TOAST = 'notifications.hideToasts';\nexport const FOCUS_NOTIFICATION_TOAST = 'notifications.focusToasts';\nexport const FOCUS_NEXT_NOTIFICATION_TOAST = 'notifications.focusNextToast';\nexport const FOCUS_PREVIOUS_NOTIFICATION_TOAST = 'notifications.focusPreviousToast';\nexport const FOCUS_FIRST_NOTIFICATION_TOAST = 'notifications.focusFirstToast';\nexport const FOCUS_LAST_NOTIFICATION_TOAST = 'notifications.focusLastToast';\n\n// Notification\nexport const COLLAPSE_NOTIFICATION = 'notification.collapse';\nexport const EXPAND_NOTIFICATION = 'notification.expand';\nexport const TOGGLE_NOTIFICATION = 'notification.toggle';\nexport const CLEAR_NOTIFICATION = 'notification.clear';\nexport const CLEAR_ALL_NOTIFICATIONS = 'notifications.clearAll';\n\nexport const NotificationFocusedContext = new RawContextKey<boolean>('notificationFocus', true);\nexport const NotificationsCenterVisibleContext = new RawContextKey<boolean>('notificationCenterVisible', false);\nexport const NotificationsToastsVisibleContext = new RawContextKey<boolean>('notificationToastsVisible', false);\n\nexport interface INotificationsCenterController {\n\treadonly isVisible: boolean;\n\n\tshow(): void;\n\thide(): void;\n\n\tclearAll(): void;\n}\n\nexport interface INotificationsToastController {\n\tfocus(): void;\n\tfocusNext(): void;\n\tfocusPrevious(): void;\n\tfocusFirst(): void;\n\tfocusLast(): void;\n\n\thide(): void;\n}\n\nexport function registerNotificationCommands(center: INotificationsCenterController, toasts: INotificationsToastController): void {\n\n\tfunction getNotificationFromContext(listService: IListService, context?: any): INotificationViewItem | undefined {\n\t\tif (isNotificationViewItem(context)) {\n\t\t\treturn context;\n\t\t}\n\n\t\tconst list = listService.lastFocusedList;\n\t\tif (list instanceof WorkbenchList) {\n\t\t\tconst focusedElement = list.getFocusedElements()[0];\n\t\t\tif (isNotificationViewItem(focusedElement)) {\n\t\t\t\treturn focusedElement;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t// Show Notifications Cneter\n\tCommandsRegistry.registerCommand(SHOW_NOTIFICATIONS_CENTER, () => {\n\t\tcenter.show();\n\t});\n\n\t// Hide Notifications Center\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsCenterVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: accessor => center.hide()\n\t});\n\n\t// Toggle Notifications Center\n\tCommandsRegistry.registerCommand(TOGGLE_NOTIFICATIONS_CENTER, accessor => {\n\t\tif (center.isVisible) {\n\t\t\tcenter.hide();\n\t\t} else {\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Clear Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLEAR_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Delete,\n\t\tmac: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace\n\t\t},\n\t\thandler: (accessor, args?: any) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Expand Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: EXPAND_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.RightArrow,\n\t\thandler: (accessor, args?: any) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification) {\n\t\t\t\tnotification.expand();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Collapse Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: COLLAPSE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.LeftArrow,\n\t\thandler: (accessor, args?: any) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification) {\n\t\t\t\tnotification.collapse();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Toggle Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Space,\n\t\tsecondary: [KeyCode.Enter],\n\t\thandler: accessor => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService));\n\t\t\tif (notification) {\n\t\t\t\tnotification.toggle();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hide Toasts\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsToastsVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: accessor => toasts.hide()\n\t});\n\n\t// Focus Toasts\n\tCommandsRegistry.registerCommand(FOCUS_NOTIFICATION_TOAST, () => toasts.focus());\n\n\t// Focus Next Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_NEXT_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.DownArrow,\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusNext();\n\t\t}\n\t});\n\n\t// Focus Previous Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.UpArrow,\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusPrevious();\n\t\t}\n\t});\n\n\t// Focus First Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_FIRST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageUp,\n\t\tsecondary: [KeyCode.Home],\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusFirst();\n\t\t}\n\t});\n\n\t// Focus Last Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_LAST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageDown,\n\t\tsecondary: [KeyCode.End],\n\t\thandler: (accessor) => {\n\t\t\ttoasts.focusLast();\n\t\t}\n\t});\n\n\t/// Clear All Notifications\n\tCommandsRegistry.registerCommand(CLEAR_ALL_NOTIFICATIONS, () => center.clearAll());\n\n\t// Commands for Command Palette\n\tconst category = localize('notifications', \"Notifications\");\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: SHOW_NOTIFICATIONS_CENTER, title: { value: localize('showNotifications', \"Show Notifications\"), original: 'Notifications: Show Notifications' }, category }, when: NotificationsCenterVisibleContext.toNegated() });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: HIDE_NOTIFICATIONS_CENTER, title: { value: localize('hideNotifications', \"Hide Notifications\"), original: 'Notifications: Hide Notifications' }, category }, when: NotificationsCenterVisibleContext });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLEAR_ALL_NOTIFICATIONS, title: { value: localize('clearAllNotifications', \"Clear All Notifications\"), original: 'Notifications: Clear All Notifications' }, category } });\n}"]}]}