{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalEnvironment.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalEnvironment.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path = require(\"vs/base/common/path\");\nvar platform = require(\"vs/base/common/platform\");\n/**\n * This module contains utility functions related to the environment, cwd and paths.\n */\nfunction mergeEnvironments(parent, other) {\n    if (!other) {\n        return;\n    }\n    // On Windows apply the new values ignoring case, while still retaining\n    // the case of the original key.\n    if (platform.isWindows) {\n        for (var configKey in other) {\n            var actualKey = configKey;\n            for (var envKey in parent) {\n                if (configKey.toLowerCase() === envKey.toLowerCase()) {\n                    actualKey = envKey;\n                    break;\n                }\n            }\n            var value = other[configKey];\n            _mergeEnvironmentValue(parent, actualKey, value);\n        }\n    }\n    else {\n        Object.keys(other).forEach(function (key) {\n            var value = other[key];\n            _mergeEnvironmentValue(parent, key, value);\n        });\n    }\n}\nexports.mergeEnvironments = mergeEnvironments;\nfunction _mergeEnvironmentValue(env, key, value) {\n    if (typeof value === 'string') {\n        env[key] = value;\n    }\n    else {\n        delete env[key];\n    }\n}\nfunction addTerminalEnvironmentKeys(env, version, locale, setLocaleVariables) {\n    env['TERM_PROGRAM'] = 'vscode';\n    env['TERM_PROGRAM_VERSION'] = version ? version : null;\n    if (setLocaleVariables) {\n        env['LANG'] = _getLangEnvVariable(locale);\n    }\n}\nexports.addTerminalEnvironmentKeys = addTerminalEnvironmentKeys;\nfunction resolveConfigurationVariables(configurationResolverService, env, lastActiveWorkspaceRoot) {\n    Object.keys(env).forEach(function (key) {\n        var value = env[key];\n        if (typeof value === 'string' && lastActiveWorkspaceRoot !== null) {\n            env[key] = configurationResolverService.resolve(lastActiveWorkspaceRoot, value);\n        }\n    });\n    return env;\n}\nexports.resolveConfigurationVariables = resolveConfigurationVariables;\nfunction _getLangEnvVariable(locale) {\n    var parts = locale ? locale.split('-') : [];\n    var n = parts.length;\n    if (n === 0) {\n        // Fallback to en_US to prevent possible encoding issues.\n        return 'en_US.UTF-8';\n    }\n    if (n === 1) {\n        // app.getLocale can return just a language without a variant, fill in the variant for\n        // supported languages as many shells expect a 2-part locale.\n        var languageVariants = {\n            de: 'DE',\n            en: 'US',\n            es: 'ES',\n            fi: 'FI',\n            fr: 'FR',\n            it: 'IT',\n            ja: 'JP',\n            ko: 'KR',\n            pl: 'PL',\n            ru: 'RU',\n            zh: 'CN'\n        };\n        if (parts[0] in languageVariants) {\n            parts.push(languageVariants[parts[0]]);\n        }\n    }\n    else {\n        // Ensure the variant is uppercase\n        parts[1] = parts[1].toUpperCase();\n    }\n    return parts.join('_') + '.UTF-8';\n}\nfunction getCwd(shell, userHome, root, customCwd) {\n    if (shell.cwd) {\n        return (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;\n    }\n    var cwd;\n    // TODO: Handle non-existent customCwd\n    if (!shell.ignoreConfigurationCwd && customCwd) {\n        if (path.isAbsolute(customCwd)) {\n            cwd = customCwd;\n        }\n        else if (root) {\n            cwd = path.join(root.fsPath, customCwd);\n        }\n    }\n    // If there was no custom cwd or it was relative with no workspace\n    if (!cwd) {\n        cwd = root ? root.fsPath : userHome;\n    }\n    return _sanitizeCwd(cwd);\n}\nexports.getCwd = getCwd;\nfunction _sanitizeCwd(cwd) {\n    // Make the drive letter uppercase on Windows (see #9448)\n    if (platform.platform === platform.Platform.Windows && cwd && cwd[1] === ':') {\n        return cwd[0].toUpperCase() + cwd.substr(1);\n    }\n    return cwd;\n}\nfunction escapeNonWindowsPath(path) {\n    var newPath = path;\n    if (newPath.indexOf('\\\\') !== 0) {\n        newPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n    }\n    if (!newPath && (newPath.indexOf('\"') !== -1)) {\n        newPath = '\\'' + newPath + '\\'';\n    }\n    else if (newPath.indexOf(' ') !== -1) {\n        newPath = newPath.replace(/ /g, '\\\\ ');\n    }\n    return newPath;\n}\nexports.escapeNonWindowsPath = escapeNonWindowsPath;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalEnvironment.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalEnvironment.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { URI as Uri } from 'vs/base/common/uri';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IShellLaunchConfig, ITerminalEnvironment } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\n\n/**\n * This module contains utility functions related to the environment, cwd and paths.\n */\n\nexport function mergeEnvironments(parent: platform.IProcessEnvironment, other?: ITerminalEnvironment): void {\n\tif (!other) {\n\t\treturn;\n\t}\n\n\t// On Windows apply the new values ignoring case, while still retaining\n\t// the case of the original key.\n\tif (platform.isWindows) {\n\t\tfor (const configKey in other) {\n\t\t\tlet actualKey = configKey;\n\t\t\tfor (const envKey in parent) {\n\t\t\t\tif (configKey.toLowerCase() === envKey.toLowerCase()) {\n\t\t\t\t\tactualKey = envKey;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst value = other[configKey];\n\t\t\t_mergeEnvironmentValue(parent, actualKey, value);\n\t\t}\n\t} else {\n\t\tObject.keys(other).forEach((key) => {\n\t\t\tconst value = other[key];\n\t\t\t_mergeEnvironmentValue(parent, key, value);\n\t\t});\n\t}\n}\n\nfunction _mergeEnvironmentValue(env: ITerminalEnvironment, key: string, value: string | null): void {\n\tif (typeof value === 'string') {\n\t\tenv[key] = value;\n\t} else {\n\t\tdelete env[key];\n\t}\n}\n\nexport function addTerminalEnvironmentKeys(env: ITerminalEnvironment, version: string | undefined, locale: string | undefined, setLocaleVariables: boolean): void {\n\tenv['TERM_PROGRAM'] = 'vscode';\n\tenv['TERM_PROGRAM_VERSION'] = version ? version : null;\n\tif (setLocaleVariables) {\n\t\tenv['LANG'] = _getLangEnvVariable(locale);\n\t}\n}\n\nexport function resolveConfigurationVariables(configurationResolverService: IConfigurationResolverService, env: ITerminalEnvironment, lastActiveWorkspaceRoot: IWorkspaceFolder | null): ITerminalEnvironment {\n\tObject.keys(env).forEach((key) => {\n\t\tconst value = env[key];\n\t\tif (typeof value === 'string' && lastActiveWorkspaceRoot !== null) {\n\t\t\tenv[key] = configurationResolverService.resolve(lastActiveWorkspaceRoot, value);\n\t\t}\n\t});\n\treturn env;\n}\n\nfunction _getLangEnvVariable(locale?: string) {\n\tconst parts = locale ? locale.split('-') : [];\n\tconst n = parts.length;\n\tif (n === 0) {\n\t\t// Fallback to en_US to prevent possible encoding issues.\n\t\treturn 'en_US.UTF-8';\n\t}\n\tif (n === 1) {\n\t\t// app.getLocale can return just a language without a variant, fill in the variant for\n\t\t// supported languages as many shells expect a 2-part locale.\n\t\tconst languageVariants = {\n\t\t\tde: 'DE',\n\t\t\ten: 'US',\n\t\t\tes: 'ES',\n\t\t\tfi: 'FI',\n\t\t\tfr: 'FR',\n\t\t\tit: 'IT',\n\t\t\tja: 'JP',\n\t\t\tko: 'KR',\n\t\t\tpl: 'PL',\n\t\t\tru: 'RU',\n\t\t\tzh: 'CN'\n\t\t};\n\t\tif (parts[0] in languageVariants) {\n\t\t\tparts.push(languageVariants[parts[0]]);\n\t\t}\n\t} else {\n\t\t// Ensure the variant is uppercase\n\t\tparts[1] = parts[1].toUpperCase();\n\t}\n\treturn parts.join('_') + '.UTF-8';\n}\n\nexport function getCwd(shell: IShellLaunchConfig, userHome: string, root?: Uri, customCwd?: string): string {\n\tif (shell.cwd) {\n\t\treturn (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;\n\t}\n\n\tlet cwd: string | undefined;\n\n\t// TODO: Handle non-existent customCwd\n\tif (!shell.ignoreConfigurationCwd && customCwd) {\n\t\tif (path.isAbsolute(customCwd)) {\n\t\t\tcwd = customCwd;\n\t\t} else if (root) {\n\t\t\tcwd = path.join(root.fsPath, customCwd);\n\t\t}\n\t}\n\n\t// If there was no custom cwd or it was relative with no workspace\n\tif (!cwd) {\n\t\tcwd = root ? root.fsPath : userHome;\n\t}\n\n\treturn _sanitizeCwd(cwd);\n}\n\nfunction _sanitizeCwd(cwd: string): string {\n\t// Make the drive letter uppercase on Windows (see #9448)\n\tif (platform.platform === platform.Platform.Windows && cwd && cwd[1] === ':') {\n\t\treturn cwd[0].toUpperCase() + cwd.substr(1);\n\t}\n\treturn cwd;\n}\n\nexport function escapeNonWindowsPath(path: string): string {\n\tlet newPath = path;\n\tif (newPath.indexOf('\\\\') !== 0) {\n\t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n\t}\n\tif (!newPath && (newPath.indexOf('\"') !== -1)) {\n\t\tnewPath = '\\'' + newPath + '\\'';\n\t} else if (newPath.indexOf(' ') !== -1) {\n\t\tnewPath = newPath.replace(/ /g, '\\\\ ');\n\t}\n\treturn newPath;\n}\n"]}]}