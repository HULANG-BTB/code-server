{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/buffer\"], function (require, exports, buffer_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var MessageType;\n    (function (MessageType) {\n        MessageType[MessageType[\"Initialized\"] = 0] = \"Initialized\";\n        MessageType[MessageType[\"Ready\"] = 1] = \"Ready\";\n        MessageType[MessageType[\"Terminate\"] = 2] = \"Terminate\";\n    })(MessageType = exports.MessageType || (exports.MessageType = {}));\n    function createMessageOfType(type) {\n        const result = buffer_1.VSBuffer.alloc(1);\n        switch (type) {\n            case MessageType.Initialized:\n                result.writeUint8(1, 0);\n                break;\n            case MessageType.Ready:\n                result.writeUint8(2, 0);\n                break;\n            case MessageType.Terminate:\n                result.writeUint8(3, 0);\n                break;\n        }\n        return result;\n    }\n    exports.createMessageOfType = createMessageOfType;\n    function isMessageOfType(message, type) {\n        if (message.byteLength !== 1) {\n            return false;\n        }\n        switch (message.readUint8(0)) {\n            case 1: return type === MessageType.Initialized;\n            case 2: return type === MessageType.Ready;\n            case 3: return type === MessageType.Terminate;\n            default: return false;\n        }\n    }\n    exports.isMessageOfType = isMessageOfType;\n});\n",null]}