{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configurationResolver/browser/configurationResolverService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configurationResolver/browser/configurationResolverService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar path = require(\"vs/base/common/path\");\nvar Types = require(\"vs/base/common/types\");\nvar network_1 = require(\"vs/base/common/network\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar variableResolver_1 = require(\"vs/workbench/services/configurationResolver/common/variableResolver\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar diffEditorInput_1 = require(\"vs/workbench/common/editor/diffEditorInput\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar configurationResolver_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolver\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar ConfigurationResolverService = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigurationResolverService, _super);\n    function ConfigurationResolverService(windowService, editorService, environmentService, configurationService, commandService, workspaceContextService, quickInputService) {\n        var _this = _super.call(this, {\n            getFolderUri: function (folderName) {\n                var folder = workspaceContextService.getWorkspace().folders.filter(function (f) { return f.name === folderName; }).pop();\n                return folder ? folder.uri : undefined;\n            },\n            getWorkspaceFolderCount: function () {\n                return workspaceContextService.getWorkspace().folders.length;\n            },\n            getConfigurationValue: function (folderUri, suffix) {\n                return configurationService.getValue(suffix, folderUri ? { resource: folderUri } : {});\n            },\n            getExecPath: function () {\n                return environmentService['execPath'];\n            },\n            getFilePath: function () {\n                var activeEditor = editorService.activeEditor;\n                if (activeEditor instanceof diffEditorInput_1.DiffEditorInput) {\n                    activeEditor = activeEditor.modifiedInput;\n                }\n                var fileResource = editor_1.toResource(activeEditor, { filter: network_1.Schemas.file });\n                if (!fileResource) {\n                    return undefined;\n                }\n                return path.normalize(fileResource.fsPath);\n            },\n            getSelectedText: function () {\n                var activeTextEditorWidget = editorService.activeTextEditorWidget;\n                if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n                    var editorModel = activeTextEditorWidget.getModel();\n                    var editorSelection = activeTextEditorWidget.getSelection();\n                    if (editorModel && editorSelection) {\n                        return editorModel.getValueInRange(editorSelection);\n                    }\n                }\n                return undefined;\n            },\n            getLineNumber: function () {\n                var activeTextEditorWidget = editorService.activeTextEditorWidget;\n                if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n                    var selection = activeTextEditorWidget.getSelection();\n                    if (selection) {\n                        var lineNumber = selection.positionLineNumber;\n                        return String(lineNumber);\n                    }\n                }\n                return undefined;\n            }\n        }, process.env) || this;\n        _this.configurationService = configurationService;\n        _this.commandService = commandService;\n        _this.workspaceContextService = workspaceContextService;\n        _this.quickInputService = quickInputService;\n        return _this;\n    }\n    ConfigurationResolverService.prototype.resolveWithInteractionReplace = function (folder, config, section, variables) {\n        var _this = this;\n        // resolve any non-interactive variables\n        config = this.resolveAny(folder, config);\n        // resolve input variables in the order in which they are encountered\n        return this.resolveWithInteraction(folder, config, section, variables).then(function (mapping) {\n            // finally substitute evaluated command variables (if there are any)\n            if (!mapping) {\n                return null;\n            }\n            else if (mapping.size > 0) {\n                return _this.resolveAny(folder, config, collections_1.fromMap(mapping));\n            }\n            else {\n                return config;\n            }\n        });\n    };\n    ConfigurationResolverService.prototype.resolveWithInteraction = function (folder, config, section, variables) {\n        var _this = this;\n        // resolve any non-interactive variables\n        var resolved = this.resolveAnyMap(folder, config);\n        config = resolved.newConfig;\n        var allVariableMapping = resolved.resolvedVariables;\n        // resolve input and command variables in the order in which they are encountered\n        return this.resolveWithInputAndCommands(folder, config, variables, section).then(function (inputOrCommandMapping) {\n            if (_this.updateMapping(inputOrCommandMapping, allVariableMapping)) {\n                return allVariableMapping;\n            }\n            return undefined;\n        });\n    };\n    /**\n     * Add all items from newMapping to fullMapping. Returns false if newMapping is undefined.\n     */\n    ConfigurationResolverService.prototype.updateMapping = function (newMapping, fullMapping) {\n        if (!newMapping) {\n            return false;\n        }\n        collections_1.forEach(newMapping, function (entry) {\n            fullMapping.set(entry.key, entry.value);\n        });\n        return true;\n    };\n    /**\n     * Finds and executes all input and command variables in the given configuration and returns their values as a dictionary.\n     * Please note: this method does not substitute the input or command variables (so the configuration is not modified).\n     * The returned dictionary can be passed to \"resolvePlatform\" for the actual substitution.\n     * See #6569.\n     *\n     * @param variableToCommandMap Aliases for commands\n     */\n    ConfigurationResolverService.prototype.resolveWithInputAndCommands = function (folder, configuration, variableToCommandMap, section) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var inputs, result, variables, variableValues, _i, variables_1, variable, _a, type, name, result, _b, commandId;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!configuration) {\n                            return [2 /*return*/, Promise.resolve(undefined)];\n                        }\n                        inputs = [];\n                        if (folder && this.workspaceContextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY && section) {\n                            result = this.configurationService.getValue(section, { resource: folder.uri });\n                            if (result) {\n                                inputs = result.inputs;\n                            }\n                        }\n                        variables = [];\n                        this.findVariables(configuration, variables);\n                        variableValues = Object.create(null);\n                        _i = 0, variables_1 = variables;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < variables_1.length)) return [3 /*break*/, 8];\n                        variable = variables_1[_i];\n                        _a = variable.split(':', 2), type = _a[0], name = _a[1];\n                        result = void 0;\n                        _b = type;\n                        switch (_b) {\n                            case 'input': return [3 /*break*/, 2];\n                            case 'command': return [3 /*break*/, 4];\n                        }\n                        return [3 /*break*/, 6];\n                    case 2: return [4 /*yield*/, this.showUserInput(name, inputs)];\n                    case 3:\n                        result = _c.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        commandId = (variableToCommandMap ? variableToCommandMap[name] : undefined) || name;\n                        return [4 /*yield*/, this.commandService.executeCommand(commandId, configuration)];\n                    case 5:\n                        result = _c.sent();\n                        if (typeof result !== 'string' && !Types.isUndefinedOrNull(result)) {\n                            throw new Error(nls.localize('commandVariable.noStringType', \"Cannot substitute command variable '{0}' because command did not return a result of type string.\", commandId));\n                        }\n                        return [3 /*break*/, 6];\n                    case 6:\n                        if (typeof result === 'string') {\n                            variableValues[variable] = result;\n                        }\n                        else {\n                            return [2 /*return*/, undefined];\n                        }\n                        _c.label = 7;\n                    case 7:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 8: return [2 /*return*/, variableValues];\n                }\n            });\n        });\n    };\n    /**\n     * Recursively finds all command or input variables in object and pushes them into variables.\n     * @param object object is searched for variables.\n     * @param variables All found variables are returned in variables.\n     */\n    ConfigurationResolverService.prototype.findVariables = function (object, variables) {\n        var _this = this;\n        if (typeof object === 'string') {\n            var matches = void 0;\n            while ((matches = ConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN.exec(object)) !== null) {\n                if (matches.length === 4) {\n                    var command = matches[1];\n                    if (variables.indexOf(command) < 0) {\n                        variables.push(command);\n                    }\n                }\n            }\n        }\n        else if (Types.isArray(object)) {\n            object.forEach(function (value) {\n                _this.findVariables(value, variables);\n            });\n        }\n        else if (object) {\n            Object.keys(object).forEach(function (key) {\n                var value = object[key];\n                _this.findVariables(value, variables);\n            });\n        }\n    };\n    /**\n     * Takes the provided input info and shows the quick pick so the user can provide the value for the input\n     * @param variable Name of the input variable.\n     * @param inputInfos Information about each possible input variable.\n     */\n    ConfigurationResolverService.prototype.showUserInput = function (variable, inputInfos) {\n        // find info for the given input variable\n        var info = inputInfos.filter(function (item) { return item.id === variable; }).pop();\n        if (info) {\n            var missingAttribute = function (attrName) {\n                throw new Error(nls.localize('inputVariable.missingAttribute', \"Input variable '{0}' is of type '{1}' and must include '{2}'.\", variable, info.type, attrName));\n            };\n            switch (info.type) {\n                case 'promptString': {\n                    if (!Types.isString(info.description)) {\n                        missingAttribute('description');\n                    }\n                    var inputOptions = { prompt: info.description };\n                    if (info.default) {\n                        inputOptions.value = info.default;\n                    }\n                    return this.quickInputService.input(inputOptions).then(function (resolvedInput) {\n                        return resolvedInput ? resolvedInput : undefined;\n                    });\n                }\n                case 'pickString': {\n                    if (!Types.isString(info.description)) {\n                        missingAttribute('description');\n                    }\n                    if (!Types.isStringArray(info.options)) {\n                        missingAttribute('options');\n                    }\n                    var picks_1 = new Array();\n                    info.options.forEach(function (pickOption) {\n                        var item = { label: pickOption };\n                        if (pickOption === info.default) {\n                            item.description = nls.localize('inputVariable.defaultInputValue', \"Default\");\n                            picks_1.unshift(item);\n                        }\n                        else {\n                            picks_1.push(item);\n                        }\n                    });\n                    var pickOptions = { placeHolder: info.description };\n                    return this.quickInputService.pick(picks_1, pickOptions, undefined).then(function (resolvedInput) {\n                        return resolvedInput ? resolvedInput.label : undefined;\n                    });\n                }\n                case 'command': {\n                    if (!Types.isString(info.command)) {\n                        missingAttribute('command');\n                    }\n                    return this.commandService.executeCommand(info.command, info.args).then(function (result) {\n                        if (typeof result === 'string' || Types.isUndefinedOrNull(result)) {\n                            return result;\n                        }\n                        throw new Error(nls.localize('inputVariable.command.noStringType', \"Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.\", variable, info.command));\n                    });\n                }\n                default:\n                    throw new Error(nls.localize('inputVariable.unknownType', \"Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.\", variable));\n            }\n        }\n        return Promise.reject(new Error(nls.localize('inputVariable.undefinedVariable', \"Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.\", variable)));\n    };\n    ConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN = /\\${((input|command):(.*?))}/g;\n    ConfigurationResolverService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, commands_1.ICommandService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, quickInput_1.IQuickInputService)\n    ], ConfigurationResolverService);\n    return ConfigurationResolverService;\n}(variableResolver_1.AbstractVariableResolverService));\nexports.ConfigurationResolverService = ConfigurationResolverService;\nextensions_1.registerSingleton(configurationResolver_1.IConfigurationResolverService, ConfigurationResolverService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configurationResolver/browser/configurationResolverService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configurationResolver/browser/configurationResolverService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as Types from 'vs/base/common/types';\nimport { Schemas } from 'vs/base/common/network';\nimport { toResource } from 'vs/workbench/common/editor';\nimport { IStringDictionary, forEach, fromMap } from 'vs/base/common/collections';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IWorkspaceFolder, IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { AbstractVariableResolverService } from 'vs/workbench/services/configurationResolver/common/variableResolver';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { IQuickInputService, IInputOptions, IQuickPickItem, IPickOptions } from 'vs/platform/quickinput/common/quickInput';\nimport { ConfiguredInput, IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nexport class ConfigurationResolverService extends AbstractVariableResolverService {\n\n\tstatic INPUT_OR_COMMAND_VARIABLES_PATTERN = /\\${((input|command):(.*?))}/g;\n\n\tconstructor(\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService\n\t) {\n\t\tsuper({\n\t\t\tgetFolderUri: (folderName: string): uri | undefined => {\n\t\t\t\tconst folder = workspaceContextService.getWorkspace().folders.filter(f => f.name === folderName).pop();\n\t\t\t\treturn folder ? folder.uri : undefined;\n\t\t\t},\n\t\t\tgetWorkspaceFolderCount: (): number => {\n\t\t\t\treturn workspaceContextService.getWorkspace().folders.length;\n\t\t\t},\n\t\t\tgetConfigurationValue: (folderUri: uri, suffix: string): string | undefined => {\n\t\t\t\treturn configurationService.getValue<string>(suffix, folderUri ? { resource: folderUri } : {});\n\t\t\t},\n\t\t\tgetExecPath: (): string | undefined => {\n\t\t\t\treturn environmentService['execPath'];\n\t\t\t},\n\t\t\tgetFilePath: (): string | undefined => {\n\t\t\t\tlet activeEditor = editorService.activeEditor;\n\t\t\t\tif (activeEditor instanceof DiffEditorInput) {\n\t\t\t\t\tactiveEditor = activeEditor.modifiedInput;\n\t\t\t\t}\n\t\t\t\tconst fileResource = toResource(activeEditor, { filter: Schemas.file });\n\t\t\t\tif (!fileResource) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn path.normalize(fileResource.fsPath);\n\t\t\t},\n\t\t\tgetSelectedText: (): string | undefined => {\n\t\t\t\tconst activeTextEditorWidget = editorService.activeTextEditorWidget;\n\t\t\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\t\t\tconst editorModel = activeTextEditorWidget.getModel();\n\t\t\t\t\tconst editorSelection = activeTextEditorWidget.getSelection();\n\t\t\t\t\tif (editorModel && editorSelection) {\n\t\t\t\t\t\treturn editorModel.getValueInRange(editorSelection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tgetLineNumber: (): string | undefined => {\n\t\t\t\tconst activeTextEditorWidget = editorService.activeTextEditorWidget;\n\t\t\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\t\t\tconst selection = activeTextEditorWidget.getSelection();\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tconst lineNumber = selection.positionLineNumber;\n\t\t\t\t\t\treturn String(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}, process.env as IProcessEnvironment);\n\t}\n\n\tpublic resolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<any> {\n\t\t// resolve any non-interactive variables\n\t\tconfig = this.resolveAny(folder, config);\n\n\t\t// resolve input variables in the order in which they are encountered\n\t\treturn this.resolveWithInteraction(folder, config, section, variables).then(mapping => {\n\t\t\t// finally substitute evaluated command variables (if there are any)\n\t\t\tif (!mapping) {\n\t\t\t\treturn null;\n\t\t\t} else if (mapping.size > 0) {\n\t\t\t\treturn this.resolveAny(folder, config, fromMap(mapping));\n\t\t\t} else {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic resolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<Map<string, string> | undefined> {\n\t\t// resolve any non-interactive variables\n\t\tconst resolved = this.resolveAnyMap(folder, config);\n\t\tconfig = resolved.newConfig;\n\t\tconst allVariableMapping: Map<string, string> = resolved.resolvedVariables;\n\n\t\t// resolve input and command variables in the order in which they are encountered\n\t\treturn this.resolveWithInputAndCommands(folder, config, variables, section).then(inputOrCommandMapping => {\n\t\t\tif (this.updateMapping(inputOrCommandMapping, allVariableMapping)) {\n\t\t\t\treturn allVariableMapping;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Add all items from newMapping to fullMapping. Returns false if newMapping is undefined.\n\t */\n\tprivate updateMapping(newMapping: IStringDictionary<string> | undefined, fullMapping: Map<string, string>): boolean {\n\t\tif (!newMapping) {\n\t\t\treturn false;\n\t\t}\n\t\tforEach(newMapping, (entry) => {\n\t\t\tfullMapping.set(entry.key, entry.value);\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * Finds and executes all input and command variables in the given configuration and returns their values as a dictionary.\n\t * Please note: this method does not substitute the input or command variables (so the configuration is not modified).\n\t * The returned dictionary can be passed to \"resolvePlatform\" for the actual substitution.\n\t * See #6569.\n\t *\n\t * @param variableToCommandMap Aliases for commands\n\t */\n\tprivate async resolveWithInputAndCommands(folder: IWorkspaceFolder | undefined, configuration: any, variableToCommandMap?: IStringDictionary<string>, section?: string): Promise<IStringDictionary<string> | undefined> {\n\n\t\tif (!configuration) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// get all \"inputs\"\n\t\tlet inputs: ConfiguredInput[] = [];\n\t\tif (folder && this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY && section) {\n\t\t\tlet result = this.configurationService.getValue<any>(section, { resource: folder.uri });\n\t\t\tif (result) {\n\t\t\t\tinputs = result.inputs;\n\t\t\t}\n\t\t}\n\n\t\t// extract and dedupe all \"input\" and \"command\" variables and preserve their order in an array\n\t\tconst variables: string[] = [];\n\t\tthis.findVariables(configuration, variables);\n\n\t\tconst variableValues: IStringDictionary<string> = Object.create(null);\n\n\t\tfor (const variable of variables) {\n\n\t\t\tconst [type, name] = variable.split(':', 2);\n\n\t\t\tlet result: string | undefined;\n\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 'input':\n\t\t\t\t\tresult = await this.showUserInput(name, inputs);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'command':\n\t\t\t\t\t// use the name as a command ID #12735\n\t\t\t\t\tconst commandId = (variableToCommandMap ? variableToCommandMap[name] : undefined) || name;\n\t\t\t\t\tresult = await this.commandService.executeCommand(commandId, configuration);\n\t\t\t\t\tif (typeof result !== 'string' && !Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\tthrow new Error(nls.localize('commandVariable.noStringType', \"Cannot substitute command variable '{0}' because command did not return a result of type string.\", commandId));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (typeof result === 'string') {\n\t\t\t\tvariableValues[variable] = result;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn variableValues;\n\t}\n\n\t/**\n\t * Recursively finds all command or input variables in object and pushes them into variables.\n\t * @param object object is searched for variables.\n\t * @param variables All found variables are returned in variables.\n\t */\n\tprivate findVariables(object: any, variables: string[]) {\n\t\tif (typeof object === 'string') {\n\t\t\tlet matches;\n\t\t\twhile ((matches = ConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN.exec(object)) !== null) {\n\t\t\t\tif (matches.length === 4) {\n\t\t\t\t\tconst command = matches[1];\n\t\t\t\t\tif (variables.indexOf(command) < 0) {\n\t\t\t\t\t\tvariables.push(command);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Types.isArray(object)) {\n\t\t\tobject.forEach(value => {\n\t\t\t\tthis.findVariables(value, variables);\n\t\t\t});\n\t\t} else if (object) {\n\t\t\tObject.keys(object).forEach(key => {\n\t\t\t\tconst value = object[key];\n\t\t\t\tthis.findVariables(value, variables);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Takes the provided input info and shows the quick pick so the user can provide the value for the input\n\t * @param variable Name of the input variable.\n\t * @param inputInfos Information about each possible input variable.\n\t */\n\tprivate showUserInput(variable: string, inputInfos: ConfiguredInput[]): Promise<string | undefined> {\n\n\t\t// find info for the given input variable\n\t\tconst info = inputInfos.filter(item => item.id === variable).pop();\n\t\tif (info) {\n\n\t\t\tconst missingAttribute = (attrName: string) => {\n\t\t\t\tthrow new Error(nls.localize('inputVariable.missingAttribute', \"Input variable '{0}' is of type '{1}' and must include '{2}'.\", variable, info.type, attrName));\n\t\t\t};\n\n\t\t\tswitch (info.type) {\n\n\t\t\t\tcase 'promptString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tconst inputOptions: IInputOptions = { prompt: info.description };\n\t\t\t\t\tif (info.default) {\n\t\t\t\t\t\tinputOptions.value = info.default;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.quickInputService.input(inputOptions).then(resolvedInput => {\n\t\t\t\t\t\treturn resolvedInput ? resolvedInput : undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'pickString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tif (!Types.isStringArray(info.options)) {\n\t\t\t\t\t\tmissingAttribute('options');\n\t\t\t\t\t}\n\t\t\t\t\tconst picks = new Array<IQuickPickItem>();\n\t\t\t\t\tinfo.options.forEach(pickOption => {\n\t\t\t\t\t\tconst item: IQuickPickItem = { label: pickOption };\n\t\t\t\t\t\tif (pickOption === info.default) {\n\t\t\t\t\t\t\titem.description = nls.localize('inputVariable.defaultInputValue', \"Default\");\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpicks.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst pickOptions: IPickOptions<IQuickPickItem> = { placeHolder: info.description };\n\t\t\t\t\treturn this.quickInputService.pick(picks, pickOptions, undefined).then(resolvedInput => {\n\t\t\t\t\t\treturn resolvedInput ? resolvedInput.label : undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'command': {\n\t\t\t\t\tif (!Types.isString(info.command)) {\n\t\t\t\t\t\tmissingAttribute('command');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.commandService.executeCommand<string>(info.command, info.args).then(result => {\n\t\t\t\t\t\tif (typeof result === 'string' || Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(nls.localize('inputVariable.command.noStringType', \"Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.\", variable, info.command));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(nls.localize('inputVariable.unknownType', \"Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.\", variable));\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(new Error(nls.localize('inputVariable.undefinedVariable', \"Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.\", variable)));\n\t}\n}\n\nregisterSingleton(IConfigurationResolverService, ConfigurationResolverService, true);"]}]}