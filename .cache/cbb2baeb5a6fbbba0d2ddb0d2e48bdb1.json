{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/moveLinesCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/moveLinesCommand.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar shiftCommand_1 = require(\"vs/editor/common/commands/shiftCommand\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar languageConfiguration_1 = require(\"vs/editor/common/modes/languageConfiguration\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar indentRules_1 = require(\"vs/editor/common/modes/supports/indentRules\");\nvar indentUtils = require(\"vs/editor/contrib/indentation/indentUtils\");\nvar MoveLinesCommand = /** @class */ (function () {\n    function MoveLinesCommand(selection, isMovingDown, autoIndent) {\n        this._selection = selection;\n        this._isMovingDown = isMovingDown;\n        this._autoIndent = autoIndent;\n        this._moveEndLineSelectionShrink = false;\n    }\n    MoveLinesCommand.prototype.getEditOperations = function (model, builder) {\n        var modelLineCount = model.getLineCount();\n        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n            return;\n        }\n        if (!this._isMovingDown && this._selection.startLineNumber === 1) {\n            return;\n        }\n        this._moveEndPositionDown = false;\n        var s = this._selection;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._moveEndPositionDown = true;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        var _a = model.getOptions(), tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\n        var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n        var virtualModel = {\n            getLineTokens: function (lineNumber) {\n                return model.getLineTokens(lineNumber);\n            },\n            getLanguageIdentifier: function () {\n                return model.getLanguageIdentifier();\n            },\n            getLanguageIdAtPosition: function (lineNumber, column) {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n            getLineContent: null,\n        };\n        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n            // Current line is empty\n            var lineNumber = s.startLineNumber;\n            var otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n            if (model.getLineMaxColumn(otherLineNumber) === 1) {\n                // Other line number is empty too, so no editing is needed\n                // Add a no-op to force running by the model\n                builder.addEditOperation(new range_1.Range(1, 1, 1, 1), null);\n            }\n            else {\n                // Type content from other line number on line number\n                builder.addEditOperation(new range_1.Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n                // Remove content from other line number\n                builder.addEditOperation(new range_1.Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n            }\n            // Track selection at the other line number\n            s = new selection_1.Selection(otherLineNumber, 1, otherLineNumber, 1);\n        }\n        else {\n            var movingLineNumber_1;\n            var movingLineText = void 0;\n            if (this._isMovingDown) {\n                movingLineNumber_1 = s.endLineNumber + 1;\n                movingLineText = model.getLineContent(movingLineNumber_1);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new range_1.Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);\n                var insertingText_1 = movingLineText;\n                if (this.shouldAutoIndent(model, s)) {\n                    var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1);\n                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n                    if (movingLineMatchResult !== null) {\n                        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n                        var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                        var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                        insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n                    }\n                    else {\n                        // no enter rule matches, let's check indentatin rules then.\n                        virtualModel.getLineContent = function (lineNumber) {\n                            if (lineNumber === s.startLineNumber) {\n                                return model.getLineContent(movingLineNumber_1);\n                            }\n                            else {\n                                return model.getLineContent(lineNumber);\n                            }\n                        };\n                        var indentOfMovingLine = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);\n                        if (indentOfMovingLine !== null) {\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                                insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n                            }\n                        }\n                    }\n                    // add edit operations for moving line first to make sure it's executed after we make indentation change\n                    // to s.startLineNumber\n                    builder.addEditOperation(new range_1.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1);\n                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match onEnter rules, let's check indentation rules then.\n                        virtualModel.getLineContent = function (lineNumber) {\n                            if (lineNumber === s.startLineNumber) {\n                                return insertingText_1;\n                            }\n                            else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                                return model.getLineContent(lineNumber - 1);\n                            }\n                            else {\n                                return model.getLineContent(lineNumber);\n                            }\n                        };\n                        var newIndentatOfMovingBlock = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);\n                        if (newIndentatOfMovingBlock !== null) {\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Insert line that needs to be moved before\n                    builder.addEditOperation(new range_1.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n                }\n            }\n            else {\n                movingLineNumber_1 = s.startLineNumber - 1;\n                movingLineText = model.getLineContent(movingLineNumber_1);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new range_1.Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null);\n                // Insert line that needs to be moved after\n                builder.addEditOperation(new range_1.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n                if (this.shouldAutoIndent(model, s)) {\n                    virtualModel.getLineContent = function (lineNumber) {\n                        if (lineNumber === movingLineNumber_1) {\n                            return model.getLineContent(s.startLineNumber);\n                        }\n                        else {\n                            return model.getLineContent(lineNumber);\n                        }\n                    };\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match any onEnter rule, let's check indentation rules then.\n                        var indentOfFirstLine = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);\n                        if (indentOfFirstLine !== null) {\n                            // adjust the indentation of the moving block\n                            var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n    };\n    MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {\n        return {\n            shiftIndent: function (indentation) {\n                return shiftCommand_1.ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: function (indentation) {\n                return shiftCommand_1.ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n    };\n    MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {\n        var validPrecedingLine = oneLineAbove;\n        while (validPrecedingLine >= 1) {\n            // ship empty lines as empty lines just inherit indentation\n            var lineContent = void 0;\n            if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\n                lineContent = oneLineAboveText;\n            }\n            else {\n                lineContent = model.getLineContent(validPrecedingLine);\n            }\n            var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n            if (nonWhitespaceIdx >= 0) {\n                break;\n            }\n            validPrecedingLine--;\n        }\n        if (validPrecedingLine < 1 || line > model.getLineCount()) {\n            return null;\n        }\n        var maxColumn = model.getLineMaxColumn(validPrecedingLine);\n        var enter = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getEnterAction(model, new range_1.Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\n        if (enter) {\n            var enterPrefix = enter.indentation;\n            var enterAction = enter.enterAction;\n            if (enterAction.indentAction === languageConfiguration_1.IndentAction.None) {\n                enterPrefix = enter.indentation + enterAction.appendText;\n            }\n            else if (enterAction.indentAction === languageConfiguration_1.IndentAction.Indent) {\n                enterPrefix = enter.indentation + enterAction.appendText;\n            }\n            else if (enterAction.indentAction === languageConfiguration_1.IndentAction.IndentOutdent) {\n                enterPrefix = enter.indentation;\n            }\n            else if (enterAction.indentAction === languageConfiguration_1.IndentAction.Outdent) {\n                enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enterAction.appendText;\n            }\n            var movingLineText = model.getLineContent(line);\n            if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\n                var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n                var newIndentation = strings.getLeadingWhitespace(enterPrefix);\n                var indentMetadataOfMovelingLine = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getIndentMetadata(model, line);\n                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & indentRules_1.IndentConsts.DECREASE_MASK) {\n                    newIndentation = indentConverter.unshiftIndent(newIndentation);\n                }\n                var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n                var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                return newSpaceCnt - oldSpaceCnt;\n            }\n        }\n        return null;\n    };\n    MoveLinesCommand.prototype.trimLeft = function (str) {\n        return str.replace(/^\\s+/, '');\n    };\n    MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {\n        if (!this._autoIndent) {\n            return false;\n        }\n        // if it's not easy to tokenize, we stop auto indent.\n        if (!model.isCheapToTokenize(selection.startLineNumber)) {\n            return false;\n        }\n        var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n        var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n        if (languageAtSelectionStart !== languageAtSelectionEnd) {\n            return false;\n        }\n        if (languageConfigurationRegistry_1.LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\n            return false;\n        }\n        return true;\n    };\n    MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {\n        for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            var lineContent = model.getLineContent(i);\n            var originalIndent = strings.getLeadingWhitespace(lineContent);\n            var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n            var newSpacesCnt = originalSpacesCnt + offset;\n            var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n            if (newIndent !== originalIndent) {\n                builder.addEditOperation(new range_1.Range(i, 1, i, originalIndent.length + 1), newIndent);\n                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n                    // as users select part of the original indent white spaces\n                    // when we adjust the indentation of endLine, we should adjust the cursor position as well.\n                    this._moveEndLineSelectionShrink = true;\n                }\n            }\n        }\n    };\n    MoveLinesCommand.prototype.computeCursorState = function (model, helper) {\n        var result = helper.getTrackedSelection(this._selectionId);\n        if (this._moveEndPositionDown) {\n            result = result.setEndPosition(result.endLineNumber + 1, 1);\n        }\n        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n            result = result.setEndPosition(result.endLineNumber, 2);\n        }\n        return result;\n    };\n    return MoveLinesCommand;\n}());\nexports.MoveLinesCommand = MoveLinesCommand;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/moveLinesCommand.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/moveLinesCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { ShiftCommand } from 'vs/editor/common/commands/shiftCommand';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IndentAction } from 'vs/editor/common/modes/languageConfiguration';\nimport { IIndentConverter, LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { IndentConsts } from 'vs/editor/common/modes/supports/indentRules';\nimport * as indentUtils from 'vs/editor/contrib/indentation/indentUtils';\n\nexport class MoveLinesCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingDown: boolean;\n\tprivate readonly _autoIndent: boolean;\n\n\tprivate _selectionId: string;\n\tprivate _moveEndPositionDown?: boolean;\n\tprivate _moveEndLineSelectionShrink: boolean;\n\n\tconstructor(selection: Selection, isMovingDown: boolean, autoIndent: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingDown = isMovingDown;\n\t\tthis._autoIndent = autoIndent;\n\t\tthis._moveEndLineSelectionShrink = false;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\n\t\tlet modelLineCount = model.getLineCount();\n\n\t\tif (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingDown && this._selection.startLineNumber === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._moveEndPositionDown = false;\n\t\tlet s = this._selection;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tlet indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n\t\tlet virtualModel = {\n\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\treturn model.getLineTokens(lineNumber);\n\t\t\t},\n\t\t\tgetLanguageIdentifier: () => {\n\t\t\t\treturn model.getLanguageIdentifier();\n\t\t\t},\n\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t},\n\t\t\tgetLineContent: null as unknown as (lineNumber: number) => string,\n\t\t};\n\n\t\tif (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n\t\t\t// Current line is empty\n\t\t\tlet lineNumber = s.startLineNumber;\n\t\t\tlet otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n\n\t\t\tif (model.getLineMaxColumn(otherLineNumber) === 1) {\n\t\t\t\t// Other line number is empty too, so no editing is needed\n\t\t\t\t// Add a no-op to force running by the model\n\t\t\t\tbuilder.addEditOperation(new Range(1, 1, 1, 1), null);\n\t\t\t} else {\n\t\t\t\t// Type content from other line number on line number\n\t\t\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n\n\t\t\t\t// Remove content from other line number\n\t\t\t\tbuilder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n\t\t\t}\n\t\t\t// Track selection at the other line number\n\t\t\ts = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n\n\t\t} else {\n\n\t\t\tlet movingLineNumber: number;\n\t\t\tlet movingLineText: string;\n\n\t\t\tif (this._isMovingDown) {\n\t\t\t\tmovingLineNumber = s.endLineNumber + 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n\n\t\t\t\tlet insertingText = movingLineText;\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tlet movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);\n\t\t\t\t\t// if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n\t\t\t\t\tif (movingLineMatchResult !== null) {\n\t\t\t\t\t\tlet oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\tlet newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\tlet newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\tinsertingText = newIndentation + this.trimLeft(movingLineText);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no enter rule matches, let's check indentatin rules then.\n\t\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(movingLineNumber);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet indentOfMovingLine = LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(\n\t\t\t\t\t\t\tmovingLineNumber, 1), s.startLineNumber, indentConverter);\n\t\t\t\t\t\tif (indentOfMovingLine !== null) {\n\t\t\t\t\t\t\tlet oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\t\tlet newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n\t\t\t\t\t\t\tlet oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tlet newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\t\t\tinsertingText = newIndentation + this.trimLeft(movingLineText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add edit operations for moving line first to make sure it's executed after we make indentation change\n\t\t\t\t\t// to s.startLineNumber\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\n\t\t\t\t\tlet ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText);\n\t\t\t\t\t// check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match onEnter rules, let's check indentation rules then.\n\t\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\treturn insertingText;\n\t\t\t\t\t\t\t} else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber - 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlet newIndentatOfMovingBlock = LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(\n\t\t\t\t\t\t\tmovingLineNumber, 1), s.startLineNumber + 1, indentConverter);\n\n\t\t\t\t\t\tif (newIndentatOfMovingBlock !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Insert line that needs to be moved before\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmovingLineNumber = s.startLineNumber - 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n\n\t\t\t\t// Insert line that needs to be moved after\n\t\t\t\tbuilder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\treturn model.getLineContent(s.startLineNumber);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tlet ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n\t\t\t\t\t// check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match any onEnter rule, let's check indentation rules then.\n\t\t\t\t\t\tlet indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber, indentConverter);\n\t\t\t\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\t\t\t\t// adjust the indentation of the moving block\n\t\t\t\t\t\t\tlet oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tlet newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\t\t\t\tlet oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tlet spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate buildIndentConverter(tabSize: number, indentSize: number, insertSpaces: boolean): IIndentConverter {\n\t\treturn {\n\t\t\tshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate matchEnterRule(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, oneLineAbove: number, oneLineAboveText?: string) {\n\t\tlet validPrecedingLine = oneLineAbove;\n\t\twhile (validPrecedingLine >= 1) {\n\t\t\t// ship empty lines as empty lines just inherit indentation\n\t\t\tlet lineContent;\n\t\t\tif (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\n\t\t\t\tlineContent = oneLineAboveText;\n\t\t\t} else {\n\t\t\t\tlineContent = model.getLineContent(validPrecedingLine);\n\t\t\t}\n\n\t\t\tlet nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalidPrecedingLine--;\n\t\t}\n\n\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\tlet enter = LanguageConfigurationRegistry.getEnterAction(model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\n\n\t\tif (enter) {\n\t\t\tlet enterPrefix = enter.indentation;\n\t\t\tlet enterAction = enter.enterAction;\n\n\t\t\tif (enterAction.indentAction === IndentAction.None) {\n\t\t\t\tenterPrefix = enter.indentation + enterAction.appendText;\n\t\t\t} else if (enterAction.indentAction === IndentAction.Indent) {\n\t\t\t\tenterPrefix = enter.indentation + enterAction.appendText;\n\t\t\t} else if (enterAction.indentAction === IndentAction.IndentOutdent) {\n\t\t\t\tenterPrefix = enter.indentation;\n\t\t\t} else if (enterAction.indentAction === IndentAction.Outdent) {\n\t\t\t\tenterPrefix = indentConverter.unshiftIndent(enter.indentation) + enterAction.appendText;\n\t\t\t}\n\t\t\tlet movingLineText = model.getLineContent(line);\n\t\t\tif (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\n\t\t\t\tlet oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n\t\t\t\tlet newIndentation = strings.getLeadingWhitespace(enterPrefix);\n\t\t\t\tlet indentMetadataOfMovelingLine = LanguageConfigurationRegistry.getIndentMetadata(model, line);\n\t\t\t\tif (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & IndentConsts.DECREASE_MASK) {\n\t\t\t\t\tnewIndentation = indentConverter.unshiftIndent(newIndentation);\n\t\t\t\t}\n\t\t\t\tlet newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n\t\t\t\tlet oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\treturn newSpaceCnt - oldSpaceCnt;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate trimLeft(str: string) {\n\t\treturn str.replace(/^\\s+/, '');\n\t}\n\n\tprivate shouldAutoIndent(model: ITextModel, selection: Selection) {\n\t\tif (!this._autoIndent) {\n\t\t\treturn false;\n\t\t}\n\t\t// if it's not easy to tokenize, we stop auto indent.\n\t\tif (!model.isCheapToTokenize(selection.startLineNumber)) {\n\t\t\treturn false;\n\t\t}\n\t\tlet languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n\t\tlet languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n\n\t\tif (languageAtSelectionStart !== languageAtSelectionEnd) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getIndentEditsOfMovingBlock(model: ITextModel, builder: IEditOperationBuilder, s: Selection, tabSize: number, insertSpaces: boolean, offset: number) {\n\t\tfor (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n\t\t\tlet lineContent = model.getLineContent(i);\n\t\t\tlet originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\tlet originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\tlet newSpacesCnt = originalSpacesCnt + offset;\n\t\t\tlet newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\tbuilder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n\n\t\t\t\tif (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n\t\t\t\t\t// as users select part of the original indent white spaces\n\t\t\t\t\t// when we adjust the indentation of endLine, we should adjust the cursor position as well.\n\t\t\t\t\tthis._moveEndLineSelectionShrink = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\tif (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber, 2);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}]}