{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\", \"vs/base/common/path\"], function (require, exports, strings, path_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let intlFileNameCollator;\n    function setFileNameComparer(collator) {\n        intlFileNameCollator = collator;\n    }\n    exports.setFileNameComparer = setFileNameComparer;\n    function compareFileNames(one, other, caseSensitive = false) {\n        if (intlFileNameCollator) {\n            const a = one || '';\n            const b = other || '';\n            const result = intlFileNameCollator.getValue().collator.compare(a, b);\n            // Using the numeric option in the collator will\n            // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n            if (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && a !== b) {\n                return a < b ? -1 : 1;\n            }\n            return result;\n        }\n        return noIntlCompareFileNames(one, other, caseSensitive);\n    }\n    exports.compareFileNames = compareFileNames;\n    const FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\n    function noIntlCompareFileNames(one, other, caseSensitive = false) {\n        if (!caseSensitive) {\n            one = one && one.toLowerCase();\n            other = other && other.toLowerCase();\n        }\n        const [oneName, oneExtension] = extractNameAndExtension(one);\n        const [otherName, otherExtension] = extractNameAndExtension(other);\n        if (oneName !== otherName) {\n            return oneName < otherName ? -1 : 1;\n        }\n        if (oneExtension === otherExtension) {\n            return 0;\n        }\n        return oneExtension < otherExtension ? -1 : 1;\n    }\n    exports.noIntlCompareFileNames = noIntlCompareFileNames;\n    function compareFileExtensions(one, other) {\n        if (intlFileNameCollator) {\n            const [oneName, oneExtension] = extractNameAndExtension(one);\n            const [otherName, otherExtension] = extractNameAndExtension(other);\n            let result = intlFileNameCollator.getValue().collator.compare(oneExtension, otherExtension);\n            if (result === 0) {\n                // Using the numeric option in the collator will\n                // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n                if (intlFileNameCollator.getValue().collatorIsNumeric && oneExtension !== otherExtension) {\n                    return oneExtension < otherExtension ? -1 : 1;\n                }\n                // Extensions are equal, compare filenames\n                result = intlFileNameCollator.getValue().collator.compare(oneName, otherName);\n                if (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && oneName !== otherName) {\n                    return oneName < otherName ? -1 : 1;\n                }\n            }\n            return result;\n        }\n        return noIntlCompareFileExtensions(one, other);\n    }\n    exports.compareFileExtensions = compareFileExtensions;\n    function noIntlCompareFileExtensions(one, other) {\n        const [oneName, oneExtension] = extractNameAndExtension(one && one.toLowerCase());\n        const [otherName, otherExtension] = extractNameAndExtension(other && other.toLowerCase());\n        if (oneExtension !== otherExtension) {\n            return oneExtension < otherExtension ? -1 : 1;\n        }\n        if (oneName === otherName) {\n            return 0;\n        }\n        return oneName < otherName ? -1 : 1;\n    }\n    function extractNameAndExtension(str) {\n        const match = str ? FileNameMatch.exec(str) : [];\n        return [(match && match[1]) || '', (match && match[3]) || ''];\n    }\n    function comparePathComponents(one, other, caseSensitive = false) {\n        if (!caseSensitive) {\n            one = one && one.toLowerCase();\n            other = other && other.toLowerCase();\n        }\n        if (one === other) {\n            return 0;\n        }\n        return one < other ? -1 : 1;\n    }\n    function comparePaths(one, other, caseSensitive = false) {\n        const oneParts = one.split(path_1.sep);\n        const otherParts = other.split(path_1.sep);\n        const lastOne = oneParts.length - 1;\n        const lastOther = otherParts.length - 1;\n        let endOne, endOther;\n        for (let i = 0;; i++) {\n            endOne = lastOne === i;\n            endOther = lastOther === i;\n            if (endOne && endOther) {\n                return compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n            }\n            else if (endOne) {\n                return -1;\n            }\n            else if (endOther) {\n                return 1;\n            }\n            const result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\n            if (result !== 0) {\n                return result;\n            }\n        }\n    }\n    exports.comparePaths = comparePaths;\n    function compareAnything(one, other, lookFor) {\n        const elementAName = one.toLowerCase();\n        const elementBName = other.toLowerCase();\n        // Sort prefix matches over non prefix matches\n        const prefixCompare = compareByPrefix(one, other, lookFor);\n        if (prefixCompare) {\n            return prefixCompare;\n        }\n        // Sort suffix matches over non suffix matches\n        const elementASuffixMatch = strings.endsWith(elementAName, lookFor);\n        const elementBSuffixMatch = strings.endsWith(elementBName, lookFor);\n        if (elementASuffixMatch !== elementBSuffixMatch) {\n            return elementASuffixMatch ? -1 : 1;\n        }\n        // Understand file names\n        const r = compareFileNames(elementAName, elementBName);\n        if (r !== 0) {\n            return r;\n        }\n        // Compare by name\n        return elementAName.localeCompare(elementBName);\n    }\n    exports.compareAnything = compareAnything;\n    function compareByPrefix(one, other, lookFor) {\n        const elementAName = one.toLowerCase();\n        const elementBName = other.toLowerCase();\n        // Sort prefix matches over non prefix matches\n        const elementAPrefixMatch = strings.startsWith(elementAName, lookFor);\n        const elementBPrefixMatch = strings.startsWith(elementBName, lookFor);\n        if (elementAPrefixMatch !== elementBPrefixMatch) {\n            return elementAPrefixMatch ? -1 : 1;\n        }\n        // Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n        else if (elementAPrefixMatch && elementBPrefixMatch) {\n            if (elementAName.length < elementBName.length) {\n                return -1;\n            }\n            if (elementAName.length > elementBName.length) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    exports.compareByPrefix = compareByPrefix;\n});\n",null]}