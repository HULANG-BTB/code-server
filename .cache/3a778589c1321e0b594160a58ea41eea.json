{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar WindowService = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowService, _super);\n    function WindowService(configuration, windowsService, labelService) {\n        var _this = _super.call(this) || this;\n        _this.configuration = configuration;\n        _this.windowsService = windowsService;\n        _this.labelService = labelService;\n        _this.windowId = configuration.windowId;\n        var onThisWindowFocus = event_1.Event.map(event_1.Event.filter(windowsService.onWindowFocus, function (id) { return id === _this.windowId; }), function (_) { return true; });\n        var onThisWindowBlur = event_1.Event.map(event_1.Event.filter(windowsService.onWindowBlur, function (id) { return id === _this.windowId; }), function (_) { return false; });\n        var onThisWindowMaximize = event_1.Event.map(event_1.Event.filter(windowsService.onWindowMaximize, function (id) { return id === _this.windowId; }), function (_) { return true; });\n        var onThisWindowUnmaximize = event_1.Event.map(event_1.Event.filter(windowsService.onWindowUnmaximize, function (id) { return id === _this.windowId; }), function (_) { return false; });\n        _this.onDidChangeFocus = event_1.Event.any(onThisWindowFocus, onThisWindowBlur);\n        _this.onDidChangeMaximize = event_1.Event.any(onThisWindowMaximize, onThisWindowUnmaximize);\n        _this._hasFocus = document.hasFocus();\n        _this.isFocused().then(function (focused) { return _this._hasFocus = focused; });\n        _this._register(_this.onDidChangeFocus(function (focus) { return _this._hasFocus = focus; }));\n        return _this;\n    }\n    Object.defineProperty(WindowService.prototype, \"hasFocus\", {\n        get: function () { return this._hasFocus; },\n        enumerable: true,\n        configurable: true\n    });\n    WindowService.prototype.getCurrentWindowId = function () {\n        return this.windowId;\n    };\n    WindowService.prototype.getConfiguration = function () {\n        return this.configuration;\n    };\n    WindowService.prototype.pickFileFolderAndOpen = function (options) {\n        options.windowId = this.windowId;\n        return this.windowsService.pickFileFolderAndOpen(options);\n    };\n    WindowService.prototype.pickFileAndOpen = function (options) {\n        options.windowId = this.windowId;\n        return this.windowsService.pickFileAndOpen(options);\n    };\n    WindowService.prototype.pickFolderAndOpen = function (options) {\n        options.windowId = this.windowId;\n        return this.windowsService.pickFolderAndOpen(options);\n    };\n    WindowService.prototype.pickWorkspaceAndOpen = function (options) {\n        options.windowId = this.windowId;\n        return this.windowsService.pickWorkspaceAndOpen(options);\n    };\n    WindowService.prototype.reloadWindow = function (args) {\n        return this.windowsService.reloadWindow(this.windowId, args);\n    };\n    WindowService.prototype.openDevTools = function (options) {\n        return this.windowsService.openDevTools(this.windowId, options);\n    };\n    WindowService.prototype.toggleDevTools = function () {\n        return this.windowsService.toggleDevTools(this.windowId);\n    };\n    WindowService.prototype.closeWorkspace = function () {\n        return this.windowsService.closeWorkspace(this.windowId);\n    };\n    WindowService.prototype.enterWorkspace = function (path) {\n        return this.windowsService.enterWorkspace(this.windowId, path);\n    };\n    WindowService.prototype.openWindow = function (uris, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!!this.configuration.remoteAuthority) {\n            uris.forEach(function (u) { return u.label = u.label || _this.getRecentLabel(u, !!(options && options.forceOpenWorkspaceAsFile)); });\n        }\n        return this.windowsService.openWindow(this.windowId, uris, options);\n    };\n    WindowService.prototype.closeWindow = function () {\n        return this.windowsService.closeWindow(this.windowId);\n    };\n    WindowService.prototype.toggleFullScreen = function () {\n        return this.windowsService.toggleFullScreen(this.windowId);\n    };\n    WindowService.prototype.setRepresentedFilename = function (fileName) {\n        return this.windowsService.setRepresentedFilename(this.windowId, fileName);\n    };\n    WindowService.prototype.getRecentlyOpened = function () {\n        return this.windowsService.getRecentlyOpened(this.windowId);\n    };\n    WindowService.prototype.focusWindow = function () {\n        return this.windowsService.focusWindow(this.windowId);\n    };\n    WindowService.prototype.isFocused = function () {\n        return this.windowsService.isFocused(this.windowId);\n    };\n    WindowService.prototype.isMaximized = function () {\n        return this.windowsService.isMaximized(this.windowId);\n    };\n    WindowService.prototype.maximizeWindow = function () {\n        return this.windowsService.maximizeWindow(this.windowId);\n    };\n    WindowService.prototype.unmaximizeWindow = function () {\n        return this.windowsService.unmaximizeWindow(this.windowId);\n    };\n    WindowService.prototype.minimizeWindow = function () {\n        return this.windowsService.minimizeWindow(this.windowId);\n    };\n    WindowService.prototype.onWindowTitleDoubleClick = function () {\n        return this.windowsService.onWindowTitleDoubleClick(this.windowId);\n    };\n    WindowService.prototype.setDocumentEdited = function (flag) {\n        return this.windowsService.setDocumentEdited(this.windowId, flag);\n    };\n    WindowService.prototype.showMessageBox = function (options) {\n        return this.windowsService.showMessageBox(this.windowId, options);\n    };\n    WindowService.prototype.showSaveDialog = function (options) {\n        return this.windowsService.showSaveDialog(this.windowId, options);\n    };\n    WindowService.prototype.showOpenDialog = function (options) {\n        return this.windowsService.showOpenDialog(this.windowId, options);\n    };\n    WindowService.prototype.updateTouchBar = function (items) {\n        return this.windowsService.updateTouchBar(this.windowId, items);\n    };\n    WindowService.prototype.resolveProxy = function (url) {\n        return this.windowsService.resolveProxy(this.windowId, url);\n    };\n    WindowService.prototype.getRecentLabel = function (u, forceOpenWorkspaceAsFile) {\n        if (u.typeHint === 'folder') {\n            return this.labelService.getWorkspaceLabel(u.uri, { verbose: true });\n        }\n        else if (!forceOpenWorkspaceAsFile && workspaces_1.hasWorkspaceFileExtension(u.uri.path)) {\n            return this.labelService.getWorkspaceLabel({ id: '', configPath: u.uri }, { verbose: true });\n        }\n        else {\n            return this.labelService.getUriLabel(u.uri);\n        }\n    };\n    WindowService = tslib_1.__decorate([\n        tslib_1.__param(1, windows_1.IWindowsService),\n        tslib_1.__param(2, label_1.ILabelService)\n    ], WindowService);\n    return WindowService;\n}(lifecycle_1.Disposable));\nexports.WindowService = WindowService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IWindowService, IWindowsService, INativeOpenDialogOptions, IEnterWorkspaceResult, IMessageBoxResult, IWindowConfiguration, IDevToolsOptions, IOpenSettings, IURIToOpen } from 'vs/platform/windows/common/windows';\nimport { IRecentlyOpened } from 'vs/platform/history/common/history';\nimport { ISerializableCommandAction } from 'vs/platform/actions/common/actions';\nimport { ParsedArgs } from 'vs/platform/environment/common/environment';\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { hasWorkspaceFileExtension } from 'vs/platform/workspaces/common/workspaces';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\nexport class WindowService extends Disposable implements IWindowService {\n\n\treadonly onDidChangeFocus: Event<boolean>;\n\treadonly onDidChangeMaximize: Event<boolean>;\n\n\t_serviceBrand: any;\n\n\tprivate windowId: number;\n\n\tprivate _hasFocus: boolean;\n\tget hasFocus(): boolean { return this._hasFocus; }\n\n\tconstructor(\n\t\tprivate configuration: IWindowConfiguration,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@ILabelService private readonly labelService: ILabelService\n\t) {\n\t\tsuper();\n\n\t\tthis.windowId = configuration.windowId;\n\n\t\tconst onThisWindowFocus = Event.map(Event.filter(windowsService.onWindowFocus, id => id === this.windowId), _ => true);\n\t\tconst onThisWindowBlur = Event.map(Event.filter(windowsService.onWindowBlur, id => id === this.windowId), _ => false);\n\t\tconst onThisWindowMaximize = Event.map(Event.filter(windowsService.onWindowMaximize, id => id === this.windowId), _ => true);\n\t\tconst onThisWindowUnmaximize = Event.map(Event.filter(windowsService.onWindowUnmaximize, id => id === this.windowId), _ => false);\n\t\tthis.onDidChangeFocus = Event.any(onThisWindowFocus, onThisWindowBlur);\n\t\tthis.onDidChangeMaximize = Event.any(onThisWindowMaximize, onThisWindowUnmaximize);\n\n\t\tthis._hasFocus = document.hasFocus();\n\t\tthis.isFocused().then(focused => this._hasFocus = focused);\n\t\tthis._register(this.onDidChangeFocus(focus => this._hasFocus = focus));\n\t}\n\n\tgetCurrentWindowId(): number {\n\t\treturn this.windowId;\n\t}\n\n\tgetConfiguration(): IWindowConfiguration {\n\t\treturn this.configuration;\n\t}\n\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\toptions.windowId = this.windowId;\n\n\t\treturn this.windowsService.pickFileFolderAndOpen(options);\n\t}\n\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\toptions.windowId = this.windowId;\n\n\t\treturn this.windowsService.pickFileAndOpen(options);\n\t}\n\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\toptions.windowId = this.windowId;\n\n\t\treturn this.windowsService.pickFolderAndOpen(options);\n\t}\n\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\toptions.windowId = this.windowId;\n\n\t\treturn this.windowsService.pickWorkspaceAndOpen(options);\n\t}\n\n\treloadWindow(args?: ParsedArgs): Promise<void> {\n\t\treturn this.windowsService.reloadWindow(this.windowId, args);\n\t}\n\n\topenDevTools(options?: IDevToolsOptions): Promise<void> {\n\t\treturn this.windowsService.openDevTools(this.windowId, options);\n\t}\n\n\ttoggleDevTools(): Promise<void> {\n\t\treturn this.windowsService.toggleDevTools(this.windowId);\n\t}\n\n\tcloseWorkspace(): Promise<void> {\n\t\treturn this.windowsService.closeWorkspace(this.windowId);\n\t}\n\n\tenterWorkspace(path: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\treturn this.windowsService.enterWorkspace(this.windowId, path);\n\t}\n\n\topenWindow(uris: IURIToOpen[], options: IOpenSettings = {}): Promise<void> {\n\t\tif (!!this.configuration.remoteAuthority) {\n\t\t\turis.forEach(u => u.label = u.label || this.getRecentLabel(u, !!(options && options.forceOpenWorkspaceAsFile)));\n\t\t}\n\t\treturn this.windowsService.openWindow(this.windowId, uris, options);\n\t}\n\n\tcloseWindow(): Promise<void> {\n\t\treturn this.windowsService.closeWindow(this.windowId);\n\t}\n\n\ttoggleFullScreen(): Promise<void> {\n\t\treturn this.windowsService.toggleFullScreen(this.windowId);\n\t}\n\n\tsetRepresentedFilename(fileName: string): Promise<void> {\n\t\treturn this.windowsService.setRepresentedFilename(this.windowId, fileName);\n\t}\n\n\tgetRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\treturn this.windowsService.getRecentlyOpened(this.windowId);\n\t}\n\n\tfocusWindow(): Promise<void> {\n\t\treturn this.windowsService.focusWindow(this.windowId);\n\t}\n\n\tisFocused(): Promise<boolean> {\n\t\treturn this.windowsService.isFocused(this.windowId);\n\t}\n\n\tisMaximized(): Promise<boolean> {\n\t\treturn this.windowsService.isMaximized(this.windowId);\n\t}\n\n\tmaximizeWindow(): Promise<void> {\n\t\treturn this.windowsService.maximizeWindow(this.windowId);\n\t}\n\n\tunmaximizeWindow(): Promise<void> {\n\t\treturn this.windowsService.unmaximizeWindow(this.windowId);\n\t}\n\n\tminimizeWindow(): Promise<void> {\n\t\treturn this.windowsService.minimizeWindow(this.windowId);\n\t}\n\n\tonWindowTitleDoubleClick(): Promise<void> {\n\t\treturn this.windowsService.onWindowTitleDoubleClick(this.windowId);\n\t}\n\n\tsetDocumentEdited(flag: boolean): Promise<void> {\n\t\treturn this.windowsService.setDocumentEdited(this.windowId, flag);\n\t}\n\n\tshowMessageBox(options: Electron.MessageBoxOptions): Promise<IMessageBoxResult> {\n\t\treturn this.windowsService.showMessageBox(this.windowId, options);\n\t}\n\n\tshowSaveDialog(options: Electron.SaveDialogOptions): Promise<string> {\n\t\treturn this.windowsService.showSaveDialog(this.windowId, options);\n\t}\n\n\tshowOpenDialog(options: Electron.OpenDialogOptions): Promise<string[]> {\n\t\treturn this.windowsService.showOpenDialog(this.windowId, options);\n\t}\n\n\tupdateTouchBar(items: ISerializableCommandAction[][]): Promise<void> {\n\t\treturn this.windowsService.updateTouchBar(this.windowId, items);\n\t}\n\n\tresolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this.windowsService.resolveProxy(this.windowId, url);\n\t}\n\n\tprivate getRecentLabel(u: IURIToOpen, forceOpenWorkspaceAsFile: boolean): string {\n\t\tif (u.typeHint === 'folder') {\n\t\t\treturn this.labelService.getWorkspaceLabel(u.uri, { verbose: true });\n\t\t} else if (!forceOpenWorkspaceAsFile && hasWorkspaceFileExtension(u.uri.path)) {\n\t\t\treturn this.labelService.getWorkspaceLabel({ id: '', configPath: u.uri }, { verbose: true });\n\t\t} else {\n\t\t\treturn this.labelService.getUriLabel(u.uri);\n\t\t}\n\t}\n}\n\n"]}]}