{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keybindingParser_1 = require(\"vs/base/common/keybindingParser\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar KeybindingIO = /** @class */ (function () {\n    function KeybindingIO() {\n    }\n    KeybindingIO.writeKeybindingItem = function (out, item) {\n        if (!item.resolvedKeybinding) {\n            return;\n        }\n        var quotedSerializedKeybinding = JSON.stringify(item.resolvedKeybinding.getUserSettingsLabel());\n        out.write(\"{ \\\"key\\\": \" + rightPaddedString(quotedSerializedKeybinding + ',', 25) + \" \\\"command\\\": \");\n        var quotedSerializedWhen = item.when ? JSON.stringify(item.when.serialize()) : '';\n        var quotedSerializeCommand = JSON.stringify(item.command);\n        if (quotedSerializedWhen.length > 0) {\n            out.write(quotedSerializeCommand + \",\");\n            out.writeLine();\n            out.write(\"                                     \\\"when\\\": \" + quotedSerializedWhen + \" \");\n        }\n        else {\n            out.write(quotedSerializeCommand + \" \");\n        }\n        // out.write(String(item.weight1 + '-' + item.weight2));\n        out.write('}');\n    };\n    KeybindingIO.readUserKeybindingItem = function (input) {\n        var parts = (typeof input.key === 'string' ? keybindingParser_1.KeybindingParser.parseUserBinding(input.key) : []);\n        var when = (typeof input.when === 'string' ? contextkey_1.ContextKeyExpr.deserialize(input.when) : undefined);\n        var command = (typeof input.command === 'string' ? input.command : null);\n        var commandArgs = (typeof input.args !== 'undefined' ? input.args : undefined);\n        return {\n            parts: parts,\n            command: command,\n            commandArgs: commandArgs,\n            when: when\n        };\n    };\n    return KeybindingIO;\n}());\nexports.KeybindingIO = KeybindingIO;\nfunction rightPaddedString(str, minChars) {\n    if (str.length < minChars) {\n        return str + (new Array(minChars - str.length).join(' '));\n    }\n    return str;\n}\nvar OutputBuilder = /** @class */ (function () {\n    function OutputBuilder() {\n        this._lines = [];\n        this._currentLine = '';\n    }\n    OutputBuilder.prototype.write = function (str) {\n        this._currentLine += str;\n    };\n    OutputBuilder.prototype.writeLine = function (str) {\n        if (str === void 0) { str = ''; }\n        this._lines.push(this._currentLine + str);\n        this._currentLine = '';\n    };\n    OutputBuilder.prototype.toString = function () {\n        this.writeLine();\n        return this._lines.join('\\n');\n    };\n    return OutputBuilder;\n}());\nexports.OutputBuilder = OutputBuilder;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport interface IUserKeybindingItem {\n\tparts: (SimpleKeybinding | ScanCodeBinding)[];\n\tcommand: string | null;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpr | undefined;\n}\n\nexport class KeybindingIO {\n\n\tpublic static writeKeybindingItem(out: OutputBuilder, item: ResolvedKeybindingItem): void {\n\t\tif (!item.resolvedKeybinding) {\n\t\t\treturn;\n\t\t}\n\t\tlet quotedSerializedKeybinding = JSON.stringify(item.resolvedKeybinding.getUserSettingsLabel());\n\t\tout.write(`{ \"key\": ${rightPaddedString(quotedSerializedKeybinding + ',', 25)} \"command\": `);\n\n\t\tlet quotedSerializedWhen = item.when ? JSON.stringify(item.when.serialize()) : '';\n\t\tlet quotedSerializeCommand = JSON.stringify(item.command);\n\t\tif (quotedSerializedWhen.length > 0) {\n\t\t\tout.write(`${quotedSerializeCommand},`);\n\t\t\tout.writeLine();\n\t\t\tout.write(`                                     \"when\": ${quotedSerializedWhen} `);\n\t\t} else {\n\t\t\tout.write(`${quotedSerializeCommand} `);\n\t\t}\n\t\t// out.write(String(item.weight1 + '-' + item.weight2));\n\t\tout.write('}');\n\t}\n\n\tpublic static readUserKeybindingItem(input: IUserFriendlyKeybinding): IUserKeybindingItem {\n\t\tconst parts = (typeof input.key === 'string' ? KeybindingParser.parseUserBinding(input.key) : []);\n\t\tconst when = (typeof input.when === 'string' ? ContextKeyExpr.deserialize(input.when) : undefined);\n\t\tconst command = (typeof input.command === 'string' ? input.command : null);\n\t\tconst commandArgs = (typeof input.args !== 'undefined' ? input.args : undefined);\n\t\treturn {\n\t\t\tparts: parts,\n\t\t\tcommand: command,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when\n\t\t};\n\t}\n}\n\nfunction rightPaddedString(str: string, minChars: number): string {\n\tif (str.length < minChars) {\n\t\treturn str + (new Array(minChars - str.length).join(' '));\n\t}\n\treturn str;\n}\n\nexport class OutputBuilder {\n\n\tprivate _lines: string[] = [];\n\tprivate _currentLine: string = '';\n\n\twrite(str: string): void {\n\t\tthis._currentLine += str;\n\t}\n\n\twriteLine(str: string = ''): void {\n\t\tthis._lines.push(this._currentLine + str);\n\t\tthis._currentLine = '';\n\t}\n\n\ttoString(): string {\n\t\tthis.writeLine();\n\t\treturn this._lines.join('\\n');\n\t}\n}\n"]}]}