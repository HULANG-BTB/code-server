{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-main/windowsService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-main/windowsService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"os\", \"vs/base/common/lifecycle\", \"vs/base/common/objects\", \"vs/base/common/uri\", \"vs/platform/product/node/product\", \"vs/platform/windows/common/windows\", \"vs/platform/environment/common/environment\", \"electron\", \"vs/base/common/event\", \"vs/platform/url/common/url\", \"vs/platform/lifecycle/electron-main/lifecycleMain\", \"vs/platform/windows/electron-main/windows\", \"vs/platform/history/common/history\", \"vs/base/common/network\", \"vs/base/common/labels\", \"vs/base/common/platform\", \"vs/platform/log/common/log\"], function (require, exports, nls, os, lifecycle_1, objects_1, uri_1, product_1, windows_1, environment_1, electron_1, event_1, url_1, lifecycleMain_1, windows_2, history_1, network_1, labels_1, platform_1, log_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WindowsService = class WindowsService {\n        constructor(sharedProcess, windowsMainService, environmentService, urlService, lifecycleService, historyService, logService) {\n            this.sharedProcess = sharedProcess;\n            this.windowsMainService = windowsMainService;\n            this.environmentService = environmentService;\n            this.lifecycleService = lifecycleService;\n            this.historyService = historyService;\n            this.logService = logService;\n            this.disposables = [];\n            this.onWindowOpen = event_1.Event.filter(event_1.Event.fromNodeEventEmitter(electron_1.app, 'browser-window-created', (_, w) => w.id), id => !!this.windowsMainService.getWindowById(id));\n            this.onWindowBlur = event_1.Event.filter(event_1.Event.fromNodeEventEmitter(electron_1.app, 'browser-window-blur', (_, w) => w.id), id => !!this.windowsMainService.getWindowById(id));\n            this.onWindowMaximize = event_1.Event.filter(event_1.Event.fromNodeEventEmitter(electron_1.app, 'browser-window-maximize', (_, w) => w.id), id => !!this.windowsMainService.getWindowById(id));\n            this.onWindowUnmaximize = event_1.Event.filter(event_1.Event.fromNodeEventEmitter(electron_1.app, 'browser-window-unmaximize', (_, w) => w.id), id => !!this.windowsMainService.getWindowById(id));\n            this.onWindowFocus = event_1.Event.any(event_1.Event.map(event_1.Event.filter(event_1.Event.map(this.windowsMainService.onWindowsCountChanged, () => this.windowsMainService.getLastActiveWindow()), w => !!w), w => w.id), event_1.Event.filter(event_1.Event.fromNodeEventEmitter(electron_1.app, 'browser-window-focus', (_, w) => w.id), id => !!this.windowsMainService.getWindowById(id)));\n            this.onRecentlyOpenedChange = this.historyService.onRecentlyOpenedChange;\n            urlService.registerHandler(this);\n            // remember last active window id\n            event_1.Event.latch(event_1.Event.any(this.onWindowOpen, this.onWindowFocus))(id => this._activeWindowId = id, null, this.disposables);\n        }\n        pickFileFolderAndOpen(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#pickFileFolderAndOpen');\n                this.windowsMainService.pickFileFolderAndOpen(options);\n            });\n        }\n        pickFileAndOpen(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#pickFileAndOpen');\n                this.windowsMainService.pickFileAndOpen(options);\n            });\n        }\n        pickFolderAndOpen(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#pickFolderAndOpen');\n                this.windowsMainService.pickFolderAndOpen(options);\n            });\n        }\n        pickWorkspaceAndOpen(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#pickWorkspaceAndOpen');\n                this.windowsMainService.pickWorkspaceAndOpen(options);\n            });\n        }\n        showMessageBox(windowId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showMessageBox', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.showMessageBox(options, codeWindow), () => this.windowsMainService.showMessageBox(options));\n            });\n        }\n        showSaveDialog(windowId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showSaveDialog', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.showSaveDialog(options, codeWindow), () => this.windowsMainService.showSaveDialog(options));\n            });\n        }\n        showOpenDialog(windowId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showOpenDialog', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.showOpenDialog(options, codeWindow), () => this.windowsMainService.showOpenDialog(options));\n            });\n        }\n        reloadWindow(windowId, args) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#reloadWindow', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.reload(codeWindow, args));\n            });\n        }\n        openDevTools(windowId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#openDevTools', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.webContents.openDevTools(options));\n            });\n        }\n        toggleDevTools(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#toggleDevTools', windowId);\n                return this.withWindow(windowId, codeWindow => {\n                    const contents = codeWindow.win.webContents;\n                    if (platform_1.isMacintosh && codeWindow.hasHiddenTitleBarStyle() && !codeWindow.isFullScreen() && !contents.isDevToolsOpened()) {\n                        contents.openDevTools({ mode: 'undocked' }); // due to https://github.com/electron/electron/issues/3647\n                    }\n                    else {\n                        contents.toggleDevTools();\n                    }\n                });\n            });\n        }\n        updateTouchBar(windowId, items) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#updateTouchBar', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.updateTouchBar(items));\n            });\n        }\n        closeWorkspace(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#closeWorkspace', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.closeWorkspace(codeWindow));\n            });\n        }\n        enterWorkspace(windowId, path) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#enterWorkspace', windowId);\n                return this.withWindow(windowId, codeWindow => this.windowsMainService.enterWorkspace(codeWindow, path));\n            });\n        }\n        toggleFullScreen(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#toggleFullScreen', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.toggleFullScreen());\n            });\n        }\n        setRepresentedFilename(windowId, fileName) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#setRepresentedFilename', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.setRepresentedFilename(fileName));\n            });\n        }\n        addRecentlyOpened(recents) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#addRecentlyOpened');\n                this.historyService.addRecentlyOpened(recents);\n            });\n        }\n        removeFromRecentlyOpened(paths) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#removeFromRecentlyOpened');\n                this.historyService.removeFromRecentlyOpened(paths);\n            });\n        }\n        clearRecentlyOpened() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#clearRecentlyOpened');\n                this.historyService.clearRecentlyOpened();\n            });\n        }\n        getRecentlyOpened(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#getRecentlyOpened', windowId);\n                return this.withWindow(windowId, codeWindow => this.historyService.getRecentlyOpened(codeWindow.config.workspace, codeWindow.config.folderUri, codeWindow.config.filesToOpen), () => this.historyService.getRecentlyOpened());\n            });\n        }\n        newWindowTab() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#newWindowTab');\n                this.windowsMainService.openNewTabbedWindow(windows_1.OpenContext.API);\n            });\n        }\n        showPreviousWindowTab() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showPreviousWindowTab');\n                electron_1.Menu.sendActionToFirstResponder('selectPreviousTab:');\n            });\n        }\n        showNextWindowTab() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showNextWindowTab');\n                electron_1.Menu.sendActionToFirstResponder('selectNextTab:');\n            });\n        }\n        moveWindowTabToNewWindow() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#moveWindowTabToNewWindow');\n                electron_1.Menu.sendActionToFirstResponder('moveTabToNewWindow:');\n            });\n        }\n        mergeAllWindowTabs() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#mergeAllWindowTabs');\n                electron_1.Menu.sendActionToFirstResponder('mergeAllWindows:');\n            });\n        }\n        toggleWindowTabsBar() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#toggleWindowTabsBar');\n                electron_1.Menu.sendActionToFirstResponder('toggleTabBar:');\n            });\n        }\n        focusWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#focusWindow', windowId);\n                if (platform_1.isMacintosh) {\n                    return this.withWindow(windowId, codeWindow => codeWindow.win.show());\n                }\n                else {\n                    return this.withWindow(windowId, codeWindow => codeWindow.win.focus());\n                }\n            });\n        }\n        closeWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#closeWindow', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.close());\n            });\n        }\n        isFocused(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#isFocused', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.isFocused(), () => false);\n            });\n        }\n        isMaximized(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#isMaximized', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.isMaximized(), () => false);\n            });\n        }\n        maximizeWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#maximizeWindow', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.maximize());\n            });\n        }\n        unmaximizeWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#unmaximizeWindow', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.unmaximize());\n            });\n        }\n        minimizeWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#minimizeWindow', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.win.minimize());\n            });\n        }\n        onWindowTitleDoubleClick(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#onWindowTitleDoubleClick', windowId);\n                return this.withWindow(windowId, codeWindow => codeWindow.onWindowTitleDoubleClick());\n            });\n        }\n        setDocumentEdited(windowId, flag) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#setDocumentEdited', windowId);\n                return this.withWindow(windowId, codeWindow => {\n                    if (codeWindow.win.isDocumentEdited() !== flag) {\n                        codeWindow.win.setDocumentEdited(flag);\n                    }\n                });\n            });\n        }\n        openWindow(windowId, urisToOpen, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#openWindow');\n                if (!urisToOpen || !urisToOpen.length) {\n                    return undefined;\n                }\n                this.windowsMainService.open({\n                    context: windows_1.OpenContext.API,\n                    contextWindowId: windowId,\n                    urisToOpen: urisToOpen,\n                    cli: options.args ? Object.assign({}, this.environmentService.args, options.args) : this.environmentService.args,\n                    forceNewWindow: options.forceNewWindow,\n                    forceReuseWindow: options.forceReuseWindow,\n                    forceOpenWorkspaceAsFile: options.forceOpenWorkspaceAsFile,\n                    diffMode: options.diffMode,\n                    addMode: options.addMode,\n                    noRecentEntry: options.noRecentEntry,\n                    waitMarkerFileURI: options.waitMarkerFileURI\n                });\n            });\n        }\n        openNewWindow(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#openNewWindow ' + JSON.stringify(options));\n                this.windowsMainService.openNewWindow(windows_1.OpenContext.API, options);\n            });\n        }\n        getWindows() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#getWindows');\n                const windows = this.windowsMainService.getWindows();\n                const result = windows.map(w => ({ id: w.id, workspace: w.openedWorkspace, folderUri: w.openedFolderUri, title: w.win.getTitle(), filename: w.getRepresentedFilename() }));\n                return result;\n            });\n        }\n        getWindowCount() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#getWindowCount');\n                return this.windowsMainService.getWindows().length;\n            });\n        }\n        log(severity, ...messages) {\n            return __awaiter(this, void 0, void 0, function* () {\n                console[severity].apply(console, ...messages);\n            });\n        }\n        showItemInFolder(path) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#showItemInFolder');\n                if (path.scheme === network_1.Schemas.file) {\n                    electron_1.shell.showItemInFolder(path.fsPath);\n                }\n            });\n        }\n        getActiveWindowId() {\n            return __awaiter(this, void 0, void 0, function* () {\n                return this._activeWindowId;\n            });\n        }\n        openExternal(url) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#openExternal');\n                return electron_1.shell.openExternal(url);\n            });\n        }\n        startCrashReporter(config) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#startCrashReporter');\n                electron_1.crashReporter.start(config);\n            });\n        }\n        quit() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#quit');\n                this.windowsMainService.quit();\n            });\n        }\n        relaunch(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#relaunch');\n                this.lifecycleService.relaunch(options);\n            });\n        }\n        whenSharedProcessReady() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#whenSharedProcessReady');\n                return this.sharedProcess.whenReady();\n            });\n        }\n        toggleSharedProcess() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#toggleSharedProcess');\n                this.sharedProcess.toggle();\n            });\n        }\n        openAboutDialog() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('windowsService#openAboutDialog');\n                let version = electron_1.app.getVersion();\n                if (product_1.default.target) {\n                    version = `${version} (${product_1.default.target} setup)`;\n                }\n                const isSnap = process.platform === 'linux' && process.env.SNAP && process.env.SNAP_REVISION;\n                const detail = nls.localize('aboutDetail', \"Version: {0}\\nCommit: {1}\\nDate: {2}\\nElectron: {3}\\nChrome: {4}\\nNode.js: {5}\\nV8: {6}\\nOS: {7}\", version, product_1.default.commit || 'Unknown', product_1.default.date || 'Unknown', process.versions['electron'], process.versions['chrome'], process.versions['node'], process.versions['v8'], `${os.type()} ${os.arch()} ${os.release()}${isSnap ? ' snap' : ''}`);\n                const ok = nls.localize('okButton', \"OK\");\n                const copy = labels_1.mnemonicButtonLabel(nls.localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"));\n                let buttons;\n                if (platform_1.isLinux) {\n                    buttons = [copy, ok];\n                }\n                else {\n                    buttons = [ok, copy];\n                }\n                this.windowsMainService.showMessageBox({\n                    title: product_1.default.nameLong,\n                    type: 'info',\n                    message: product_1.default.nameLong,\n                    detail: `\\n${detail}`,\n                    buttons,\n                    noLink: true,\n                    defaultId: buttons.indexOf(ok)\n                }, this.windowsMainService.getFocusedWindow() || this.windowsMainService.getLastActiveWindow()).then(result => {\n                    if (buttons[result.button] === copy) {\n                        electron_1.clipboard.writeText(detail);\n                    }\n                });\n            });\n        }\n        handleURL(uri) {\n            return __awaiter(this, void 0, void 0, function* () {\n                // Catch file URLs\n                if (uri.authority === network_1.Schemas.file && !!uri.path) {\n                    this.openFileForURI({ uri: uri_1.URI.file(uri.fsPath) }); // using fsPath on a non-file URI...\n                    return true;\n                }\n                return false;\n            });\n        }\n        openFileForURI(uri) {\n            const cli = objects_1.assign(Object.create(null), this.environmentService.args, { goto: true });\n            const urisToOpen = [uri];\n            this.windowsMainService.open({ context: windows_1.OpenContext.API, cli, urisToOpen });\n        }\n        resolveProxy(windowId, url) {\n            return __awaiter(this, void 0, void 0, function* () {\n                return new Promise(resolve => {\n                    const codeWindow = this.windowsMainService.getWindowById(windowId);\n                    if (codeWindow) {\n                        codeWindow.win.webContents.session.resolveProxy(url, proxy => {\n                            resolve(proxy);\n                        });\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        withWindow(windowId, fn, fallback) {\n            const codeWindow = this.windowsMainService.getWindowById(windowId);\n            if (codeWindow) {\n                return fn(codeWindow);\n            }\n            if (fallback) {\n                return fallback();\n            }\n            return undefined;\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    WindowsService = __decorate([\n        __param(1, windows_2.IWindowsMainService),\n        __param(2, environment_1.IEnvironmentService),\n        __param(3, url_1.IURLService),\n        __param(4, lifecycleMain_1.ILifecycleService),\n        __param(5, history_1.IHistoryMainService),\n        __param(6, log_1.ILogService)\n    ], WindowsService);\n    exports.WindowsService = WindowsService;\n});\n",null]}