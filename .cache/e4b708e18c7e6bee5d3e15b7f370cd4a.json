{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/actions\", \"vs/editor/browser/editorExtensions\", \"vs/nls\", \"vs/workbench/services/editor/common/editorService\"], function (require, exports, actions_1, editorExtensions_1, nls, editorService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ShowWebViewEditorFindWidgetCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.showFind();\n            }\n        }\n    }\n    ShowWebViewEditorFindWidgetCommand.ID = 'editor.action.webvieweditor.showFind';\n    exports.ShowWebViewEditorFindWidgetCommand = ShowWebViewEditorFindWidgetCommand;\n    class HideWebViewEditorFindCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.hideFind();\n            }\n        }\n    }\n    HideWebViewEditorFindCommand.ID = 'editor.action.webvieweditor.hideFind';\n    exports.HideWebViewEditorFindCommand = HideWebViewEditorFindCommand;\n    class SelectAllWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.selectAll();\n            }\n        }\n    }\n    SelectAllWebviewEditorCommand.ID = 'editor.action.webvieweditor.selectAll';\n    exports.SelectAllWebviewEditorCommand = SelectAllWebviewEditorCommand;\n    class CopyWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.copy();\n            }\n        }\n    }\n    CopyWebviewEditorCommand.ID = 'editor.action.webvieweditor.copy';\n    exports.CopyWebviewEditorCommand = CopyWebviewEditorCommand;\n    class PasteWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.paste();\n            }\n        }\n    }\n    PasteWebviewEditorCommand.ID = 'editor.action.webvieweditor.paste';\n    exports.PasteWebviewEditorCommand = PasteWebviewEditorCommand;\n    class CutWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.cut();\n            }\n        }\n    }\n    CutWebviewEditorCommand.ID = 'editor.action.webvieweditor.cut';\n    exports.CutWebviewEditorCommand = CutWebviewEditorCommand;\n    class UndoWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.undo();\n            }\n        }\n    }\n    UndoWebviewEditorCommand.ID = 'editor.action.webvieweditor.undo';\n    exports.UndoWebviewEditorCommand = UndoWebviewEditorCommand;\n    class RedoWebviewEditorCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const webViewEditor = getActiveWebviewEditor(accessor);\n            if (webViewEditor) {\n                webViewEditor.redo();\n            }\n        }\n    }\n    RedoWebviewEditorCommand.ID = 'editor.action.webvieweditor.redo';\n    exports.RedoWebviewEditorCommand = RedoWebviewEditorCommand;\n    class OpenWebviewDeveloperToolsAction extends actions_1.Action {\n        constructor(id, label) {\n            super(id, label);\n        }\n        run() {\n            const elements = document.querySelectorAll('webview.ready');\n            for (let i = 0; i < elements.length; i++) {\n                try {\n                    elements.item(i).openDevTools();\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            return Promise.resolve(true);\n        }\n    }\n    OpenWebviewDeveloperToolsAction.ID = 'workbench.action.webview.openDeveloperTools';\n    OpenWebviewDeveloperToolsAction.LABEL = nls.localize('openToolsLabel', \"Open Webview Developer Tools\");\n    exports.OpenWebviewDeveloperToolsAction = OpenWebviewDeveloperToolsAction;\n    let ReloadWebviewAction = class ReloadWebviewAction extends actions_1.Action {\n        constructor(id, label, editorService) {\n            super(id, label);\n            this.editorService = editorService;\n        }\n        run() {\n            for (const webview of this.getVisibleWebviews()) {\n                webview.reload();\n            }\n            return Promise.resolve(true);\n        }\n        getVisibleWebviews() {\n            return this.editorService.visibleControls\n                .filter(control => control && control.isWebviewEditor)\n                .map(control => control);\n        }\n    };\n    ReloadWebviewAction.ID = 'workbench.action.webview.reloadWebviewAction';\n    ReloadWebviewAction.LABEL = nls.localize('refreshWebviewLabel', \"Reload Webviews\");\n    ReloadWebviewAction = __decorate([\n        __param(2, editorService_1.IEditorService)\n    ], ReloadWebviewAction);\n    exports.ReloadWebviewAction = ReloadWebviewAction;\n    function getActiveWebviewEditor(accessor) {\n        const editorService = accessor.get(editorService_1.IEditorService);\n        const activeControl = editorService.activeControl;\n        return activeControl.isWebviewEditor ? activeControl : null;\n    }\n});\n",null]}