{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/windowsService.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/windowsService.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar electron = require(\"electron\");\nvar events_1 = require(\"@coder/events\");\nvar logger_1 = require(\"@coder/logger\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar client_1 = require(\"../client\");\nvar dialog_1 = require(\"../dialog\");\nvar workbench_1 = require(\"../workbench\");\n// tslint:disable completed-docs\n// VS Code overrides window.open to call openExternal, but we then call\n// window.open which results in an infinite loop. Store the function but also\n// make it unable to be set (doesn't work otherwise).\nvar windowOpen = window.open;\nObject.defineProperty(window, \"open\", {\n    set: function () { },\n    get: function () { return windowOpen; },\n});\n/**\n * Instead of going to the shared process, we'll directly run these methods on\n * the client. This setup means we can only control the current window.\n */\nvar WindowsService = /** @class */ (function () {\n    function WindowsService() {\n        this.openEmitter = new events_1.Emitter();\n        this.focusEmitter = new events_1.Emitter();\n        this.blurEmitter = new events_1.Emitter();\n        this.maximizeEmitter = new events_1.Emitter();\n        this.unmaximizeEmitter = new events_1.Emitter();\n        this.recentlyOpenedChangeEmitter = new events_1.Emitter();\n        this.onWindowOpen = this.openEmitter.event;\n        this.onWindowFocus = this.focusEmitter.event;\n        this.onWindowBlur = this.blurEmitter.event;\n        this.onWindowMaximize = this.maximizeEmitter.event;\n        this.onWindowUnmaximize = this.unmaximizeEmitter.event;\n        this.onRecentlyOpenedChange = this.recentlyOpenedChangeEmitter.event;\n        this.window = new electron.BrowserWindow();\n    }\n    // Dialogs\n    WindowsService.prototype.pickFileFolderAndOpen = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                dialog_1.showOpenDialog(tslib_1.__assign({}, (options.dialogOptions || {}), { properties: {\n                        openFile: true,\n                        openDirectory: true,\n                    } })).then(function (path) {\n                    // tslint:disable-next-line:no-any\n                    electron.ipcMain.send(\"vscode:openFiles\", {\n                        filesToOpen: [{\n                                fileUri: uri_1.URI.file(path),\n                            }],\n                    });\n                }).catch(function (ex) {\n                    logger_1.logger.error(ex.message);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    WindowsService.prototype.pickFileAndOpen = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                dialog_1.showOpenDialog(tslib_1.__assign({}, (options.dialogOptions || {}), { properties: {\n                        openFile: true,\n                    } })).then(function (path) {\n                    // tslint:disable-next-line:no-any\n                    electron.ipcMain.send(\"vscode:openFiles\", {\n                        filesToOpen: [{\n                                fileUri: uri_1.URI.file(path),\n                            }],\n                    });\n                }).catch(function (ex) {\n                    logger_1.logger.error(ex.message);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    WindowsService.prototype.pickFolderAndOpen = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (!options.dialogOptions) {\n                    options.dialogOptions = {};\n                }\n                if (!options.dialogOptions.title) {\n                    options.dialogOptions.title = \"Open Folder\";\n                }\n                dialog_1.showOpenDialog(tslib_1.__assign({}, (options.dialogOptions || {}), { properties: {\n                        openDirectory: true,\n                    } })).then(function (path) {\n                    workbench_1.workbench.workspace = uri_1.URI.file(path);\n                }).catch(function (ex) {\n                    logger_1.logger.error(ex.message);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    WindowsService.prototype.pickWorkspaceAndOpen = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                dialog_1.showOpenDialog(tslib_1.__assign({}, (options.dialogOptions || {}), { properties: {\n                        openDirectory: true,\n                    } })).then(function (path) {\n                    // tslint:disable-next-line:no-any\n                    electron.ipcMain.send(\"vscode:addFolders\", {\n                        foldersToAdd: [uri_1.URI.file(path)],\n                    });\n                }).catch(function (ex) {\n                    logger_1.logger.error(ex.message);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    WindowsService.prototype.showMessageBox = function (windowId, options) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            electron.dialog.showMessageBox(_this.getWindowById(windowId), options, function (response, checkboxChecked) {\n                resolve({\n                    button: response,\n                    checkboxChecked: checkboxChecked,\n                });\n            });\n        });\n    };\n    WindowsService.prototype.showSaveDialog = function (windowId, options) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            electron.dialog.showSaveDialog(_this.getWindowById(windowId), options, function (filename, _bookmark) {\n                resolve(filename);\n            });\n        });\n    };\n    WindowsService.prototype.showOpenDialog = function (_windowId, options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, dialog_1.showOpenDialog(tslib_1.__assign({}, (options || {}), { properties: {\n                                openDirectory: options && options.properties && options.properties.includes(\"openDirectory\") || false,\n                                openFile: options && options.properties && options.properties.includes(\"openFile\") || false,\n                            } }))];\n                    case 1: return [2 /*return*/, [_a.sent()]];\n                }\n            });\n        });\n    };\n    WindowsService.prototype.reloadWindow = function (windowId, _args) {\n        return Promise.resolve(this.getWindowById(windowId).reload());\n    };\n    WindowsService.prototype.openDevTools = function (_windowId, _options) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.toggleDevTools = function (_windowId) {\n        throw new Error(\"Toggling developer tools from JavaScript is not supported.\");\n    };\n    WindowsService.prototype.closeWorkspace = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.enterWorkspace = function (_windowId, uri) {\n        if (uri.path.endsWith(\".json\")) {\n            workbench_1.workbench.workspace = {\n                id: \"Untitled\",\n                configPath: uri,\n            };\n        }\n        else {\n            workbench_1.workbench.workspace = uri;\n        }\n        return undefined;\n    };\n    WindowsService.prototype.createAndEnterWorkspace = function (_windowId, _folders, _path) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.saveAndEnterWorkspace = function (_windowId, _path) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.toggleFullScreen = function (windowId) {\n        var win = this.getWindowById(windowId);\n        return Promise.resolve(win.setFullScreen(!win.isFullScreen()));\n    };\n    WindowsService.prototype.setRepresentedFilename = function (windowId, fileName) {\n        return Promise.resolve(this.getWindowById(windowId).setRepresentedFilename(fileName));\n    };\n    WindowsService.prototype.addRecentlyOpened = function (_files) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.removeFromRecentlyOpened = function (_paths) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.clearRecentlyOpened = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.getRecentlyOpened = function (_windowId) {\n        // TODO: properly implement.\n        return Promise.resolve({\n            workspaces: [],\n            files: [],\n        });\n    };\n    WindowsService.prototype.focusWindow = function (windowId) {\n        return Promise.resolve(this.getWindowById(windowId).focus());\n    };\n    WindowsService.prototype.closeWindow = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.isFocused = function (windowId) {\n        return Promise.resolve(this.getWindowById(windowId).isFocused());\n    };\n    WindowsService.prototype.isMaximized = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.maximizeWindow = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.unmaximizeWindow = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.minimizeWindow = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.onWindowTitleDoubleClick = function (_windowId) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.setDocumentEdited = function (_windowId, _flag) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.quit = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.relaunch = function (_options) {\n        throw new Error(\"not implemented\");\n    };\n    // macOS Native Tabs\n    WindowsService.prototype.newWindowTab = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.showPreviousWindowTab = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.showNextWindowTab = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.moveWindowTabToNewWindow = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.mergeAllWindowTabs = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.toggleWindowTabsBar = function () {\n        throw new Error(\"not implemented\");\n    };\n    // macOS TouchBar\n    WindowsService.prototype.updateTouchBar = function (_windowId, _items) {\n        throw new Error(\"not implemented\");\n    };\n    // Shared process\n    WindowsService.prototype.whenSharedProcessReady = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, client_1.client.sharedProcessData];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WindowsService.prototype.toggleSharedProcess = function () {\n        throw new Error(\"not implemented\");\n    };\n    // Global methods\n    WindowsService.prototype.openWindow = function (_windowId, _uris, _options) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.openNewWindow = function (_options) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.showWindow = function (windowId) {\n        return Promise.resolve(this.getWindowById(windowId).show());\n    };\n    WindowsService.prototype.getWindows = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.getWindowCount = function () {\n        return Promise.resolve(1);\n    };\n    WindowsService.prototype.log = function (_severity) {\n        var _messages = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            _messages[_i - 1] = arguments[_i];\n        }\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.showItemInFolder = function (uri) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                workbench_1.workbench.workspace = uri;\n                return [2 /*return*/];\n            });\n        });\n    };\n    WindowsService.prototype.getActiveWindowId = function () {\n        return Promise.resolve(1);\n    };\n    WindowsService.prototype.openExternal = function (_url) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, typeof window.open(_url, \"_blank\") !== \"undefined\"];\n            });\n        });\n    };\n    WindowsService.prototype.startCrashReporter = function (_config) {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.openAboutDialog = function () {\n        throw new Error(\"not implemented\");\n    };\n    WindowsService.prototype.resolveProxy = function (windowId, url) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this.getWindowById(windowId).webContents.session.resolveProxy(url, function (proxy) {\n                resolve(proxy);\n            });\n        });\n    };\n    /**\n     * Get window by ID. For now this is always the current window.\n     */\n    WindowsService.prototype.getWindowById = function (_windowId) {\n        return this.window;\n    };\n    return WindowsService;\n}());\nexports.WindowsService = WindowsService;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/windowsService.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/windowsService.ts"],"names":[],"mappings":"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","sourcesContent":["import * as electron from \"electron\";\nimport { Emitter } from \"@coder/events\";\nimport { logger } from \"@coder/logger\";\nimport { IWindowsService, INativeOpenDialogOptions, MessageBoxOptions, SaveDialogOptions, OpenDialogOptions, IMessageBoxResult, IDevToolsOptions, IEnterWorkspaceResult, CrashReporterStartOptions, INewWindowOptions, IOpenFileRequest, IAddFoldersRequest, IURIToOpen, IOpenSettings } from \"vs/platform/windows/common/windows\";\nimport { ParsedArgs } from \"vs/platform/environment/common/environment\";\nimport { IWorkspaceIdentifier, IWorkspaceFolderCreationData, ISingleFolderWorkspaceIdentifier } from \"vs/platform/workspaces/common/workspaces\";\nimport { URI } from \"vs/base/common/uri\";\nimport { IRecentlyOpened, IRecent } from \"vs/platform/history/common/history\";\nimport { ISerializableCommandAction } from \"vs/platform/actions/common/actions\";\nimport { client } from \"../client\";\nimport { showOpenDialog } from \"../dialog\";\nimport { workbench } from \"../workbench\";\n\n// tslint:disable completed-docs\n\n// VS Code overrides window.open to call openExternal, but we then call\n// window.open which results in an infinite loop. Store the function but also\n// make it unable to be set (doesn't work otherwise).\nconst windowOpen = window.open;\nObject.defineProperty(window, \"open\", {\n\tset: (): void => { /* Not allowed. */ },\n\tget: (): Function => windowOpen,\n});\n\n/**\n * Instead of going to the shared process, we'll directly run these methods on\n * the client. This setup means we can only control the current window.\n */\nexport class WindowsService implements IWindowsService {\n\t// tslint:disable-next-line no-any\n\tpublic _serviceBrand: any;\n\n\tprivate readonly openEmitter = new Emitter<number>();\n\tprivate readonly focusEmitter = new Emitter<number>();\n\tprivate readonly blurEmitter = new Emitter<number>();\n\tprivate readonly maximizeEmitter = new Emitter<number>();\n\tprivate readonly unmaximizeEmitter = new Emitter<number>();\n\tprivate readonly recentlyOpenedChangeEmitter = new Emitter<void>();\n\n\tpublic readonly onWindowOpen = this.openEmitter.event;\n\tpublic readonly onWindowFocus = this.focusEmitter.event;\n\tpublic readonly onWindowBlur = this.blurEmitter.event;\n\tpublic readonly onWindowMaximize = this.maximizeEmitter.event;\n\tpublic readonly onWindowUnmaximize = this.unmaximizeEmitter.event;\n\tpublic readonly onRecentlyOpenedChange = this.recentlyOpenedChangeEmitter.event;\n\n\tprivate readonly window = new electron.BrowserWindow();\n\n\t// Dialogs\n\tpublic async pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\tshowOpenDialog({\n\t\t\t...(options.dialogOptions || {}),\n\t\t\tproperties: {\n\t\t\t\topenFile: true,\n\t\t\t\topenDirectory: true,\n\t\t\t},\n\t\t}).then((path) => {\n\t\t\t// tslint:disable-next-line:no-any\n\t\t\t(<any>electron.ipcMain).send(\"vscode:openFiles\", {\n\t\t\t\tfilesToOpen: [{\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t}],\n\t\t\t} as IOpenFileRequest);\n\t\t}).catch((ex) => {\n\t\t\tlogger.error(ex.message);\n\t\t});\n\t}\n\n\tpublic async pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\tshowOpenDialog({\n\t\t\t...(options.dialogOptions || {}),\n\t\t\tproperties: {\n\t\t\t\topenFile: true,\n\t\t\t},\n\t\t}).then((path) => {\n\t\t\t// tslint:disable-next-line:no-any\n\t\t\t(<any>electron.ipcMain).send(\"vscode:openFiles\", {\n\t\t\t\tfilesToOpen: [{\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t}],\n\t\t\t} as IOpenFileRequest);\n\t\t}).catch((ex) => {\n\t\t\tlogger.error(ex.message);\n\t\t});\n\t}\n\n\tpublic async pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\tif (!options.dialogOptions) {\n\t\t\toptions.dialogOptions = {};\n\t\t}\n\t\tif (!options.dialogOptions.title) {\n\t\t\toptions.dialogOptions.title = \"Open Folder\";\n\t\t}\n\t\tshowOpenDialog({\n\t\t\t...(options.dialogOptions || {}),\n\t\t\tproperties: {\n\t\t\t\topenDirectory: true,\n\t\t\t},\n\t\t}).then((path) => {\n\t\t\tworkbench.workspace = URI.file(path);\n\t\t}).catch((ex) => {\n\t\t\tlogger.error(ex.message);\n\t\t});\n\t}\n\n\tpublic async pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void> {\n\t\tshowOpenDialog({\n\t\t\t...(options.dialogOptions || {}),\n\t\t\tproperties: {\n\t\t\t\topenDirectory: true,\n\t\t\t},\n\t\t}).then((path) => {\n\t\t\t// tslint:disable-next-line:no-any\n\t\t\t(<any>electron.ipcMain).send(\"vscode:addFolders\", {\n\t\t\t\tfoldersToAdd: [URI.file(path)],\n\t\t\t} as IAddFoldersRequest);\n\t\t}).catch((ex) => {\n\t\t\tlogger.error(ex.message);\n\t\t});\n\t}\n\n\tpublic showMessageBox(windowId: number, options: MessageBoxOptions): Promise<IMessageBoxResult> {\n\t\treturn new Promise((resolve): void => {\n\t\t\telectron.dialog.showMessageBox(this.getWindowById(windowId), options, (response, checkboxChecked) => {\n\t\t\t\tresolve({\n\t\t\t\t\tbutton: response,\n\t\t\t\t\tcheckboxChecked,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic showSaveDialog(windowId: number, options: SaveDialogOptions): Promise<string> {\n\t\treturn new Promise((resolve): void => {\n\t\t\telectron.dialog.showSaveDialog(this.getWindowById(windowId), options, (filename, _bookmark) => {\n\t\t\t\tresolve(filename);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async showOpenDialog(_windowId: number, options: OpenDialogOptions): Promise<string[]> {\n\t\treturn [await showOpenDialog({\n\t\t\t...(options || {}),\n\t\t\tproperties: {\n\t\t\t\topenDirectory: options && options.properties && options.properties.includes(\"openDirectory\") || false,\n\t\t\t\topenFile: options && options.properties && options.properties.includes(\"openFile\") || false,\n\t\t\t},\n\t\t})];\n\t}\n\n\tpublic reloadWindow(windowId: number, _args?: ParsedArgs): Promise<void> {\n\t\treturn Promise.resolve(this.getWindowById(windowId).reload());\n\t}\n\n\tpublic openDevTools(_windowId: number, _options?: IDevToolsOptions): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic toggleDevTools(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"Toggling developer tools from JavaScript is not supported.\");\n\t}\n\n\tpublic closeWorkspace(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic enterWorkspace(_windowId: number, uri: URI): Promise<IEnterWorkspaceResult> {\n\t\tif (uri.path.endsWith(\".json\")) {\n\t\t\tworkbench.workspace = {\n\t\t\t\tid: \"Untitled\",\n\t\t\t\tconfigPath: uri,\n\t\t\t};\n\t\t} else {\n\t\t\tworkbench.workspace = uri;\n\t\t}\n\n\t\treturn undefined!;\n\t}\n\n\tpublic createAndEnterWorkspace(_windowId: number, _folders?: IWorkspaceFolderCreationData[], _path?: string): Promise<IEnterWorkspaceResult> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic saveAndEnterWorkspace(_windowId: number, _path: string): Promise<IEnterWorkspaceResult> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic toggleFullScreen(windowId: number): Promise<void> {\n\t\tconst win = this.getWindowById(windowId);\n\n\t\treturn Promise.resolve(win.setFullScreen(!win.isFullScreen()));\n\t}\n\n\tpublic setRepresentedFilename(windowId: number, fileName: string): Promise<void> {\n\t\treturn Promise.resolve(this.getWindowById(windowId).setRepresentedFilename(fileName));\n\t}\n\n\tpublic addRecentlyOpened(_files: IRecent[]): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic removeFromRecentlyOpened(_paths: (IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI | string)[]): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic clearRecentlyOpened(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic getRecentlyOpened(_windowId: number): Promise<IRecentlyOpened> {\n\t\t// TODO: properly implement.\n\t\treturn Promise.resolve({\n\t\t\tworkspaces: [],\n\t\t\tfiles: [],\n\t\t});\n\t}\n\n\tpublic focusWindow(windowId: number): Promise<void> {\n\t\treturn Promise.resolve(this.getWindowById(windowId).focus());\n\t}\n\n\tpublic closeWindow(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic isFocused(windowId: number): Promise<boolean> {\n\t\treturn Promise.resolve(this.getWindowById(windowId).isFocused());\n\t}\n\n\tpublic isMaximized(_windowId: number): Promise<boolean> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic maximizeWindow(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic unmaximizeWindow(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic minimizeWindow(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic onWindowTitleDoubleClick(_windowId: number): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic setDocumentEdited(_windowId: number, _flag: boolean): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic quit(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic relaunch(_options: { addArgs?: string[], removeArgs?: string[] }): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\t// macOS Native Tabs\n\tpublic newWindowTab(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic showPreviousWindowTab(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic showNextWindowTab(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic moveWindowTabToNewWindow(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic mergeAllWindowTabs(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic toggleWindowTabsBar(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\t// macOS TouchBar\n\tpublic updateTouchBar(_windowId: number, _items: ISerializableCommandAction[][]): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\t// Shared process\n\tpublic async whenSharedProcessReady(): Promise<void> {\n\t\tawait client.sharedProcessData;\n\t}\n\n\tpublic toggleSharedProcess(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\t// Global methods\n\tpublic openWindow(_windowId: number, _uris: IURIToOpen[], _options?: IOpenSettings): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic openNewWindow(_options?: INewWindowOptions): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic showWindow(windowId: number): Promise<void> {\n\t\treturn Promise.resolve(this.getWindowById(windowId).show());\n\t}\n\n\tpublic getWindows(): Promise<{ id: number; workspace?: IWorkspaceIdentifier; folderUri?: ISingleFolderWorkspaceIdentifier; title: string; filename?: string; }[]> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic getWindowCount(): Promise<number> {\n\t\treturn Promise.resolve(1);\n\t}\n\n\tpublic log(_severity: string, ..._messages: string[]): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic async showItemInFolder(uri: URI): Promise<void> {\n\t\tworkbench.workspace = uri;\n\t}\n\n\tpublic getActiveWindowId(): Promise<number | undefined> {\n\t\treturn Promise.resolve(1);\n\t}\n\n\tpublic async openExternal(_url: string): Promise<boolean> {\n\t\treturn typeof window.open(_url, \"_blank\") !== \"undefined\";\n\t}\n\n\tpublic startCrashReporter(_config: CrashReporterStartOptions): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic openAboutDialog(): Promise<void> {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tpublic resolveProxy(windowId: number, url: string): Promise<string | undefined> {\n\t\treturn new Promise((resolve): void => {\n\t\t\tthis.getWindowById(windowId).webContents.session.resolveProxy(url, (proxy) => {\n\t\t\t\tresolve(proxy);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get window by ID. For now this is always the current window.\n\t */\n\tprivate getWindowById(_windowId: number): electron.BrowserWindow {\n\t\treturn this.window;\n\t}\n}\n"]}]}