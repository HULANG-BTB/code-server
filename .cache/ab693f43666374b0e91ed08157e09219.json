{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar feedback_1 = require(\"vs/workbench/contrib/feedback/electron-browser/feedback\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar TwitterFeedbackService = /** @class */ (function () {\n    function TwitterFeedbackService() {\n    }\n    TwitterFeedbackService.prototype.combineHashTagsAsString = function () {\n        return TwitterFeedbackService.HASHTAGS.join(',');\n    };\n    TwitterFeedbackService.prototype.submitFeedback = function (feedback) {\n        var queryString = \"?\" + (feedback.sentiment === 1 ? \"hashtags=\" + this.combineHashTagsAsString() + \"&\" : null) + \"ref_src=twsrc%5Etfw&related=twitterapi%2Ctwitter&text=\" + encodeURIComponent(feedback.feedback) + \"&tw_p=tweetbutton&via=\" + TwitterFeedbackService.VIA_NAME;\n        var url = TwitterFeedbackService.TWITTER_URL + queryString;\n        window.open(url);\n    };\n    TwitterFeedbackService.prototype.getCharacterLimit = function (sentiment) {\n        var length = 0;\n        if (sentiment === 1) {\n            TwitterFeedbackService.HASHTAGS.forEach(function (element) {\n                length += element.length + 2;\n            });\n        }\n        if (TwitterFeedbackService.VIA_NAME) {\n            length += (\" via @\" + TwitterFeedbackService.VIA_NAME).length;\n        }\n        return 280 - length;\n    };\n    TwitterFeedbackService.TWITTER_URL = 'https://twitter.com/intent/tweet';\n    TwitterFeedbackService.VIA_NAME = 'code';\n    TwitterFeedbackService.HASHTAGS = ['HappyCoding'];\n    return TwitterFeedbackService;\n}());\nvar FeedbackStatusbarItem = /** @class */ (function (_super) {\n    tslib_1.__extends(FeedbackStatusbarItem, _super);\n    function FeedbackStatusbarItem(instantiationService, contextViewService, contextService, contextMenuService, configurationService, themeService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.instantiationService = instantiationService;\n        _this.contextViewService = contextViewService;\n        _this.contextService = contextService;\n        _this.contextMenuService = contextMenuService;\n        _this.configurationService = configurationService;\n        _this.enabled = _this.configurationService.getValue(feedback_1.FEEDBACK_VISIBLE_CONFIG);\n        _this.hideAction = _this._register(_this.instantiationService.createInstance(HideAction));\n        _this.registerListeners();\n        return _this;\n    }\n    FeedbackStatusbarItem.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.contextService.onDidChangeWorkbenchState(function () { return _this.updateStyles(); }));\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(e); }));\n    };\n    FeedbackStatusbarItem.prototype.onConfigurationUpdated = function (event) {\n        if (event.affectsConfiguration(feedback_1.FEEDBACK_VISIBLE_CONFIG)) {\n            this.enabled = this.configurationService.getValue(feedback_1.FEEDBACK_VISIBLE_CONFIG);\n            this.update();\n        }\n    };\n    FeedbackStatusbarItem.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n        if (this.dropdown && this.dropdown.label) {\n            this.dropdown.label.style.backgroundColor = (this.getColor(this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY ? theme_1.STATUS_BAR_FOREGROUND : theme_1.STATUS_BAR_NO_FOLDER_FOREGROUND));\n        }\n    };\n    FeedbackStatusbarItem.prototype.render = function (element) {\n        var _this = this;\n        this.container = element;\n        // Prevent showing dropdown on anything but left click\n        this.toDispose.push(dom_1.addDisposableListener(this.container, 'mousedown', function (e) {\n            if (e.button !== 0) {\n                dom_1.EventHelper.stop(e, true);\n            }\n        }, true));\n        // Offer context menu to hide status bar entry\n        this.toDispose.push(dom_1.addDisposableListener(this.container, 'contextmenu', function (e) {\n            dom_1.EventHelper.stop(e, true);\n            _this.contextMenuService.showContextMenu({\n                getAnchor: function () { return _this.container; },\n                getActions: function () { return [_this.hideAction]; }\n            });\n        }));\n        return this.update();\n    };\n    FeedbackStatusbarItem.prototype.update = function () {\n        var _this = this;\n        var enabled = product_1.default.sendASmile && this.enabled;\n        // Create\n        if (enabled) {\n            if (!this.dropdown) {\n                this.dropdown = this._register(this.instantiationService.createInstance(feedback_1.FeedbackDropdown, this.container, {\n                    contextViewProvider: this.contextViewService,\n                    feedbackService: this.instantiationService.createInstance(TwitterFeedbackService),\n                    onFeedbackVisibilityChange: function (visible) {\n                        if (visible) {\n                            dom_1.addClass(_this.container, 'has-beak');\n                        }\n                        else {\n                            dom_1.removeClass(_this.container, 'has-beak');\n                        }\n                    }\n                }));\n                this.updateStyles();\n                return this.dropdown;\n            }\n        }\n        // Dispose\n        else {\n            lifecycle_1.dispose(this.dropdown);\n            this.dropdown = undefined;\n            dom_1.clearNode(this.container);\n        }\n        return lifecycle_1.Disposable.None;\n    };\n    FeedbackStatusbarItem = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, contextView_1.IContextViewService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, contextView_1.IContextMenuService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, themeService_1.IThemeService)\n    ], FeedbackStatusbarItem);\n    return FeedbackStatusbarItem;\n}(theme_1.Themable));\nexports.FeedbackStatusbarItem = FeedbackStatusbarItem;\nvar HideAction = /** @class */ (function (_super) {\n    tslib_1.__extends(HideAction, _super);\n    function HideAction(configurationService) {\n        var _this = _super.call(this, 'feedback.hide', nls_1.localize('hide', \"Hide\")) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    HideAction.prototype.run = function (extensionId) {\n        return this.configurationService.updateValue(feedback_1.FEEDBACK_VISIBLE_CONFIG, false);\n    };\n    HideAction = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService)\n    ], HideAction);\n    return HideAction;\n}(actions_1.Action));\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var statusBarItemHoverBackground = theme.getColor(theme_1.STATUS_BAR_ITEM_HOVER_BACKGROUND);\n    if (statusBarItemHoverBackground) {\n        collector.addRule(\".monaco-workbench .part.statusbar > .statusbar-item .monaco-dropdown.send-feedback:hover { background-color: \" + statusBarItemHoverBackground + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedbackStatusbarItem.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { IStatusbarItem } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { FeedbackDropdown, IFeedback, IFeedbackDelegate, FEEDBACK_VISIBLE_CONFIG, IFeedbackDropdownOptions } from 'vs/workbench/contrib/feedback/electron-browser/feedback';\nimport { IContextViewService, IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport product from 'vs/platform/product/node/product';\nimport { Themable, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_ITEM_HOVER_BACKGROUND } from 'vs/workbench/common/theme';\nimport { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { clearNode, EventHelper, addClass, removeClass, addDisposableListener } from 'vs/base/browser/dom';\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\n\nclass TwitterFeedbackService implements IFeedbackDelegate {\n\n\tprivate static TWITTER_URL: string = 'https://twitter.com/intent/tweet';\n\tprivate static VIA_NAME: string = 'code';\n\tprivate static HASHTAGS: string[] = ['HappyCoding'];\n\n\tprivate combineHashTagsAsString(): string {\n\t\treturn TwitterFeedbackService.HASHTAGS.join(',');\n\t}\n\n\tsubmitFeedback(feedback: IFeedback): void {\n\t\tconst queryString = `?${feedback.sentiment === 1 ? `hashtags=${this.combineHashTagsAsString()}&` : null}ref_src=twsrc%5Etfw&related=twitterapi%2Ctwitter&text=${encodeURIComponent(feedback.feedback)}&tw_p=tweetbutton&via=${TwitterFeedbackService.VIA_NAME}`;\n\t\tconst url = TwitterFeedbackService.TWITTER_URL + queryString;\n\n\t\twindow.open(url);\n\t}\n\n\tgetCharacterLimit(sentiment: number): number {\n\t\tlet length: number = 0;\n\t\tif (sentiment === 1) {\n\t\t\tTwitterFeedbackService.HASHTAGS.forEach(element => {\n\t\t\t\tlength += element.length + 2;\n\t\t\t});\n\t\t}\n\n\t\tif (TwitterFeedbackService.VIA_NAME) {\n\t\t\tlength += ` via @${TwitterFeedbackService.VIA_NAME}`.length;\n\t\t}\n\n\t\treturn 280 - length;\n\t}\n}\n\nexport class FeedbackStatusbarItem extends Themable implements IStatusbarItem {\n\tprivate dropdown: FeedbackDropdown | undefined;\n\tprivate enabled: boolean;\n\tprivate container: HTMLElement;\n\tprivate hideAction: HideAction;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.enabled = this.configurationService.getValue(FEEDBACK_VISIBLE_CONFIG);\n\n\t\tthis.hideAction = this._register(this.instantiationService.createInstance(HideAction));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateStyles()));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t}\n\n\tprivate onConfigurationUpdated(event: IConfigurationChangeEvent): void {\n\t\tif (event.affectsConfiguration(FEEDBACK_VISIBLE_CONFIG)) {\n\t\t\tthis.enabled = this.configurationService.getValue(FEEDBACK_VISIBLE_CONFIG);\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\tprotected updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tif (this.dropdown && this.dropdown.label) {\n\t\t\tthis.dropdown.label.style.backgroundColor = (this.getColor(this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_FOREGROUND : STATUS_BAR_NO_FOLDER_FOREGROUND));\n\t\t}\n\t}\n\n\trender(element: HTMLElement): IDisposable {\n\t\tthis.container = element;\n\n\t\t// Prevent showing dropdown on anything but left click\n\t\tthis.toDispose.push(addDisposableListener(this.container, 'mousedown', (e: MouseEvent) => {\n\t\t\tif (e.button !== 0) {\n\t\t\t\tEventHelper.stop(e, true);\n\t\t\t}\n\t\t}, true));\n\n\t\t// Offer context menu to hide status bar entry\n\t\tthis.toDispose.push(addDisposableListener(this.container, 'contextmenu', e => {\n\t\t\tEventHelper.stop(e, true);\n\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => this.container,\n\t\t\t\tgetActions: () => [this.hideAction]\n\t\t\t});\n\t\t}));\n\n\t\treturn this.update();\n\t}\n\n\tprivate update(): IDisposable {\n\t\tconst enabled = product.sendASmile && this.enabled;\n\n\t\t// Create\n\t\tif (enabled) {\n\t\t\tif (!this.dropdown) {\n\t\t\t\tthis.dropdown = this._register(this.instantiationService.createInstance(FeedbackDropdown, this.container, {\n\t\t\t\t\tcontextViewProvider: this.contextViewService,\n\t\t\t\t\tfeedbackService: this.instantiationService.createInstance(TwitterFeedbackService),\n\t\t\t\t\tonFeedbackVisibilityChange: visible => {\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\taddClass(this.container, 'has-beak');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoveClass(this.container, 'has-beak');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} as IFeedbackDropdownOptions));\n\n\t\t\t\tthis.updateStyles();\n\n\t\t\t\treturn this.dropdown;\n\t\t\t}\n\t\t}\n\n\t\t// Dispose\n\t\telse {\n\t\t\tdispose(this.dropdown);\n\t\t\tthis.dropdown = undefined;\n\t\t\tclearNode(this.container);\n\t\t}\n\n\t\treturn Disposable.None;\n\t}\n}\n\nclass HideAction extends Action {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper('feedback.hide', localize('hide', \"Hide\"));\n\t}\n\n\trun(extensionId: string): Promise<any> {\n\t\treturn this.configurationService.updateValue(FEEDBACK_VISIBLE_CONFIG, false);\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\tconst statusBarItemHoverBackground = theme.getColor(STATUS_BAR_ITEM_HOVER_BACKGROUND);\n\tif (statusBarItemHoverBackground) {\n\t\tcollector.addRule(`.monaco-workbench .part.statusbar > .statusbar-item .monaco-dropdown.send-feedback:hover { background-color: ${statusBarItemHoverBackground}; }`);\n\t}\n});\n"]}]}