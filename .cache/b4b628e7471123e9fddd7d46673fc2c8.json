{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/panelpart\");\nvar nls = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar compositeBarActions_1 = require(\"vs/workbench/browser/parts/compositeBarActions\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar ClosePanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClosePanelAction, _super);\n    function ClosePanelAction(id, name, layoutService) {\n        var _this = _super.call(this, id, name, 'hide-panel-action') || this;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    ClosePanelAction.prototype.run = function () {\n        this.layoutService.setPanelHidden(true);\n        return Promise.resolve();\n    };\n    ClosePanelAction.ID = 'workbench.action.closePanel';\n    ClosePanelAction.LABEL = nls.localize('closePanel', \"Close Panel\");\n    ClosePanelAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], ClosePanelAction);\n    return ClosePanelAction;\n}(actions_1.Action));\nexports.ClosePanelAction = ClosePanelAction;\nvar TogglePanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TogglePanelAction, _super);\n    function TogglePanelAction(id, name, layoutService) {\n        var _this = _super.call(this, id, name, layoutService.isVisible(layoutService_1.Parts.PANEL_PART) ? 'panel expanded' : 'panel') || this;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    TogglePanelAction.prototype.run = function () {\n        this.layoutService.setPanelHidden(this.layoutService.isVisible(layoutService_1.Parts.PANEL_PART));\n        return Promise.resolve();\n    };\n    TogglePanelAction.ID = 'workbench.action.togglePanel';\n    TogglePanelAction.LABEL = nls.localize('togglePanel', \"Toggle Panel\");\n    TogglePanelAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], TogglePanelAction);\n    return TogglePanelAction;\n}(actions_1.Action));\nexports.TogglePanelAction = TogglePanelAction;\nvar FocusPanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusPanelAction, _super);\n    function FocusPanelAction(id, label, panelService, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.panelService = panelService;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    FocusPanelAction.prototype.run = function () {\n        // Show panel\n        if (!this.layoutService.isVisible(layoutService_1.Parts.PANEL_PART)) {\n            this.layoutService.setPanelHidden(false);\n            return Promise.resolve();\n        }\n        // Focus into active panel\n        var panel = this.panelService.getActivePanel();\n        if (panel) {\n            panel.focus();\n        }\n        return Promise.resolve();\n    };\n    FocusPanelAction.ID = 'workbench.action.focusPanel';\n    FocusPanelAction.LABEL = nls.localize('focusPanel', \"Focus into Panel\");\n    FocusPanelAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService)\n    ], FocusPanelAction);\n    return FocusPanelAction;\n}(actions_1.Action));\nvar TogglePanelPositionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TogglePanelPositionAction, _super);\n    function TogglePanelPositionAction(id, label, layoutService, editorGroupsService) {\n        var _this = _super.call(this, id, label, layoutService.getPanelPosition() === layoutService_1.Position.RIGHT ? 'move-panel-to-bottom' : 'move-panel-to-right') || this;\n        _this.layoutService = layoutService;\n        _this.toDispose = [];\n        var setClassAndLabel = function () {\n            var positionRight = _this.layoutService.getPanelPosition() === layoutService_1.Position.RIGHT;\n            _this.class = positionRight ? 'move-panel-to-bottom' : 'move-panel-to-right';\n            _this.label = positionRight ? TogglePanelPositionAction.MOVE_TO_BOTTOM_LABEL : TogglePanelPositionAction.MOVE_TO_RIGHT_LABEL;\n        };\n        _this.toDispose.push(editorGroupsService.onDidLayout(function () { return setClassAndLabel(); }));\n        setClassAndLabel();\n        return _this;\n    }\n    TogglePanelPositionAction.prototype.run = function () {\n        var position = this.layoutService.getPanelPosition();\n        this.layoutService.setPanelPosition(position === layoutService_1.Position.BOTTOM ? layoutService_1.Position.RIGHT : layoutService_1.Position.BOTTOM);\n        return Promise.resolve();\n    };\n    TogglePanelPositionAction.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n    };\n    TogglePanelPositionAction.ID = 'workbench.action.togglePanelPosition';\n    TogglePanelPositionAction.LABEL = nls.localize('toggledPanelPosition', \"Toggle Panel Position\");\n    TogglePanelPositionAction.MOVE_TO_RIGHT_LABEL = nls.localize('moveToRight', \"Move Panel Right\");\n    TogglePanelPositionAction.MOVE_TO_BOTTOM_LABEL = nls.localize('moveToBottom', \"Move Panel to Bottom\");\n    TogglePanelPositionAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService)\n    ], TogglePanelPositionAction);\n    return TogglePanelPositionAction;\n}(actions_1.Action));\nexports.TogglePanelPositionAction = TogglePanelPositionAction;\nvar ToggleMaximizedPanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleMaximizedPanelAction, _super);\n    function ToggleMaximizedPanelAction(id, label, layoutService, editorGroupsService) {\n        var _this = _super.call(this, id, label, layoutService.isPanelMaximized() ? 'minimize-panel-action' : 'maximize-panel-action') || this;\n        _this.layoutService = layoutService;\n        _this.toDispose = [];\n        _this.toDispose.push(editorGroupsService.onDidLayout(function () {\n            var maximized = _this.layoutService.isPanelMaximized();\n            _this.class = maximized ? 'minimize-panel-action' : 'maximize-panel-action';\n            _this.label = maximized ? ToggleMaximizedPanelAction.RESTORE_LABEL : ToggleMaximizedPanelAction.MAXIMIZE_LABEL;\n        }));\n        return _this;\n    }\n    ToggleMaximizedPanelAction.prototype.run = function () {\n        if (!this.layoutService.isVisible(layoutService_1.Parts.PANEL_PART)) {\n            this.layoutService.setPanelHidden(false);\n        }\n        this.layoutService.toggleMaximizedPanel();\n        return Promise.resolve();\n    };\n    ToggleMaximizedPanelAction.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n    };\n    ToggleMaximizedPanelAction.ID = 'workbench.action.toggleMaximizedPanel';\n    ToggleMaximizedPanelAction.LABEL = nls.localize('toggleMaximizedPanel', \"Toggle Maximized Panel\");\n    ToggleMaximizedPanelAction.MAXIMIZE_LABEL = nls.localize('maximizePanel', \"Maximize Panel Size\");\n    ToggleMaximizedPanelAction.RESTORE_LABEL = nls.localize('minimizePanel', \"Restore Panel Size\");\n    ToggleMaximizedPanelAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService)\n    ], ToggleMaximizedPanelAction);\n    return ToggleMaximizedPanelAction;\n}(actions_1.Action));\nexports.ToggleMaximizedPanelAction = ToggleMaximizedPanelAction;\nvar PanelActivityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PanelActivityAction, _super);\n    function PanelActivityAction(activity, panelService) {\n        var _this = _super.call(this, activity) || this;\n        _this.panelService = panelService;\n        return _this;\n    }\n    PanelActivityAction.prototype.run = function (event) {\n        this.panelService.openPanel(this.activity.id, true);\n        this.activate();\n        return Promise.resolve();\n    };\n    PanelActivityAction = tslib_1.__decorate([\n        tslib_1.__param(1, panelService_1.IPanelService)\n    ], PanelActivityAction);\n    return PanelActivityAction;\n}(compositeBarActions_1.ActivityAction));\nexports.PanelActivityAction = PanelActivityAction;\nvar SwitchPanelViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchPanelViewAction, _super);\n    function SwitchPanelViewAction(id, name, panelService) {\n        var _this = _super.call(this, id, name) || this;\n        _this.panelService = panelService;\n        return _this;\n    }\n    SwitchPanelViewAction.prototype.run = function (offset) {\n        var pinnedPanels = this.panelService.getPinnedPanels();\n        var activePanel = this.panelService.getActivePanel();\n        if (!activePanel) {\n            return Promise.resolve();\n        }\n        var targetPanelId;\n        for (var i = 0; i < pinnedPanels.length; i++) {\n            if (pinnedPanels[i].id === activePanel.getId()) {\n                targetPanelId = pinnedPanels[(i + pinnedPanels.length + offset) % pinnedPanels.length].id;\n                break;\n            }\n        }\n        if (typeof targetPanelId === 'string') {\n            this.panelService.openPanel(targetPanelId, true);\n        }\n        return Promise.resolve();\n    };\n    SwitchPanelViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService)\n    ], SwitchPanelViewAction);\n    return SwitchPanelViewAction;\n}(actions_1.Action));\nexports.SwitchPanelViewAction = SwitchPanelViewAction;\nvar PreviousPanelViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PreviousPanelViewAction, _super);\n    function PreviousPanelViewAction(id, name, panelService) {\n        return _super.call(this, id, name, panelService) || this;\n    }\n    PreviousPanelViewAction.prototype.run = function () {\n        return _super.prototype.run.call(this, -1);\n    };\n    PreviousPanelViewAction.ID = 'workbench.action.previousPanelView';\n    PreviousPanelViewAction.LABEL = nls.localize('previousPanelView', 'Previous Panel View');\n    PreviousPanelViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService)\n    ], PreviousPanelViewAction);\n    return PreviousPanelViewAction;\n}(SwitchPanelViewAction));\nexports.PreviousPanelViewAction = PreviousPanelViewAction;\nvar NextPanelViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(NextPanelViewAction, _super);\n    function NextPanelViewAction(id, name, panelService) {\n        return _super.call(this, id, name, panelService) || this;\n    }\n    NextPanelViewAction.prototype.run = function () {\n        return _super.prototype.run.call(this, 1);\n    };\n    NextPanelViewAction.ID = 'workbench.action.nextPanelView';\n    NextPanelViewAction.LABEL = nls.localize('nextPanelView', 'Next Panel View');\n    NextPanelViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService)\n    ], NextPanelViewAction);\n    return NextPanelViewAction;\n}(SwitchPanelViewAction));\nexports.NextPanelViewAction = NextPanelViewAction;\nvar actionRegistry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(TogglePanelAction, TogglePanelAction.ID, TogglePanelAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_J }), 'View: Toggle Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(FocusPanelAction, FocusPanelAction.ID, FocusPanelAction.LABEL), 'View: Focus into Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, ToggleMaximizedPanelAction.LABEL), 'View: Toggle Maximized Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL), 'View: Close Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(TogglePanelPositionAction, TogglePanelPositionAction.ID, TogglePanelPositionAction.LABEL), 'View: Toggle Panel Position', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, undefined), 'View: Toggle Panel Position', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(PreviousPanelViewAction, PreviousPanelViewAction.ID, PreviousPanelViewAction.LABEL), 'View: Open Previous Panel View', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(NextPanelViewAction, NextPanelViewAction.ID, NextPanelViewAction.LABEL), 'View: Open Next Panel View', nls.localize('view', \"View\"));\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: TogglePanelAction.ID,\n        title: nls.localize({ key: 'miTogglePanel', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Panel\")\n    },\n    order: 5\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: TogglePanelPositionAction.ID,\n        title: TogglePanelPositionAction.LABEL\n    },\n    order: 3\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/panel/panelActions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oCAAkC;AAClC,4BAA8B;AAC9B,sDAAgE;AAChE,oDAA0D;AAC1D,kDAAgD;AAChD,iEAAgE;AAChE,8DAAgG;AAChG,uDAA0G;AAC1G,gFAAgF;AAChF,oFAA8G;AAC9G,sFAAgF;AAEhF,+FAA+F;AAE/F;IAAsC,4CAAM;IAK3C,0BACC,EAAU,EACV,IAAY,EAC8B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,SACpC;QAH0C,mBAAa,GAAb,aAAa,CAAyB;;IAGjF,CAAC;IAED,8BAAG,GAAH;QACC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAde,mBAAE,GAAG,6BAA6B,CAAC;IAC5C,sBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAH7C,gBAAgB;QAQ1B,mBAAA,uCAAuB,CAAA;OARb,gBAAgB,CAiB5B;IAAD,uBAAC;CAAA,AAjBD,CAAsC,gBAAM,GAiB3C;AAjBY,4CAAgB;AAmB7B;IAAuC,6CAAM;IAK5C,2BACC,EAAU,EACV,IAAY,EAC8B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,SACvF;QAH0C,mBAAa,GAAb,aAAa,CAAyB;;IAGjF,CAAC;IAED,+BAAG,GAAH;QACC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QAClF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAde,oBAAE,GAAG,8BAA8B,CAAC;IAC7C,uBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IAH/C,iBAAiB;QAQ3B,mBAAA,uCAAuB,CAAA;OARb,iBAAiB,CAiB7B;IAAD,wBAAC;CAAA,AAjBD,CAAuC,gBAAM,GAiB5C;AAjBY,8CAAiB;AAmB9B;IAA+B,4CAAM;IAKpC,0BACC,EAAU,EACV,KAAa,EACmB,YAA2B,EACjB,aAAsC;QAJjF,YAMC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAJgC,kBAAY,GAAZ,YAAY,CAAe;QACjB,mBAAa,GAAb,aAAa,CAAyB;;IAGjF,CAAC;IAED,8BAAG,GAAH;QAEC,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,EAAE;YACpD,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SACzB;QAED,0BAA0B;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QAC/C,IAAI,KAAK,EAAE;YACV,KAAK,CAAC,KAAK,EAAE,CAAC;SACd;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IA3Be,mBAAE,GAAG,6BAA6B,CAAC;IACnC,sBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;IAHlE,gBAAgB;QAQnB,mBAAA,4BAAa,CAAA;QACb,mBAAA,uCAAuB,CAAA;OATpB,gBAAgB,CA8BrB;IAAD,uBAAC;CAAA,AA9BD,CAA+B,gBAAM,GA8BpC;AAED;IAA+C,qDAAM;IAUpD,mCACC,EAAU,EACV,KAAa,EAC6B,aAAsC,EAC1D,mBAAyC;QAJhE,YAMC,kBAAM,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,gBAAgB,EAAE,KAAK,wBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,qBAAqB,CAAC,SAatH;QAhB0C,mBAAa,GAAb,aAAa,CAAyB;QAKhF,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,IAAM,gBAAgB,GAAG;YACxB,IAAM,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,KAAK,wBAAQ,CAAC,KAAK,CAAC;YAC/E,KAAI,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,qBAAqB,CAAC;YAC5E,KAAI,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC,CAAC,yBAAyB,CAAC,mBAAmB,CAAC;QAC7H,CAAC,CAAC;QAEF,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,cAAM,OAAA,gBAAgB,EAAE,EAAlB,CAAkB,CAAC,CAAC,CAAC;QAE/E,gBAAgB,EAAE,CAAC;;IACpB,CAAC;IAED,uCAAG,GAAH;QACC,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAEvD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,KAAK,wBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,wBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,wBAAQ,CAAC,MAAM,CAAC,CAAC;QACrG,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,2CAAO,GAAP;QACC,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,SAAS,GAAG,mBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAxCe,4BAAE,GAAG,sCAAsC,CAAC;IAC5C,+BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC;IAE9D,6CAAmB,GAAG,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;IACtE,8CAAoB,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,sBAAsB,CAAC,CAAC;IANxF,yBAAyB;QAanC,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,0CAAoB,CAAA;OAdV,yBAAyB,CA2CrC;IAAD,gCAAC;CAAA,AA3CD,CAA+C,gBAAM,GA2CpD;AA3CY,8DAAyB;AA6CtC;IAAgD,sDAAM;IAUrD,oCACC,EAAU,EACV,KAAa,EAC6B,aAAsC,EAC1D,mBAAyC;QAJhE,YAMC,kBAAM,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,uBAAuB,CAAC,SAStG;QAZ0C,mBAAa,GAAb,aAAa,CAAyB;QAKhF,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;YACnD,IAAM,SAAS,GAAG,KAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;YACxD,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,uBAAuB,CAAC;YAC3E,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC,CAAC,0BAA0B,CAAC,cAAc,CAAC;QAC/G,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,wCAAG,GAAH;QACC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,UAAU,CAAC,EAAE;YACpD,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC;QAC1C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,4CAAO,GAAP;QACC,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,SAAS,GAAG,mBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAtCe,6BAAE,GAAG,uCAAuC,CAAC;IAC7C,gCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;IAE/D,yCAAc,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;IACtE,wCAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC;IANhF,0BAA0B;QAapC,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,0CAAoB,CAAA;OAdV,0BAA0B,CAyCtC;IAAD,iCAAC;CAAA,AAzCD,CAAgD,gBAAM,GAyCrD;AAzCY,gEAA0B;AA2CvC;IAAyC,+CAAc;IAEtD,6BACC,QAAmB,EACa,YAA2B;QAF5D,YAIC,kBAAM,QAAQ,CAAC,SACf;QAHgC,kBAAY,GAAZ,YAAY,CAAe;;IAG5D,CAAC;IAED,iCAAG,GAAH,UAAI,KAAU;QACb,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAbW,mBAAmB;QAI7B,mBAAA,4BAAa,CAAA;OAJH,mBAAmB,CAc/B;IAAD,0BAAC;CAAA,AAdD,CAAyC,oCAAc,GActD;AAdY,kDAAmB;AAgBhC;IAA2C,iDAAM;IAEhD,+BACC,EAAU,EACV,IAAY,EACoB,YAA2B;QAH5D,YAKC,kBAAM,EAAE,EAAE,IAAI,CAAC,SACf;QAHgC,kBAAY,GAAZ,YAAY,CAAe;;IAG5D,CAAC;IAED,mCAAG,GAAH,UAAI,MAAc;QACjB,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;QACzD,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SACzB;QACD,IAAI,aAAiC,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE,EAAE;gBAC/C,aAAa,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;gBAC1F,MAAM;aACN;SACD;QACD,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACjD;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IA3BW,qBAAqB;QAK/B,mBAAA,4BAAa,CAAA;OALH,qBAAqB,CA4BjC;IAAD,4BAAC;CAAA,AA5BD,CAA2C,gBAAM,GA4BhD;AA5BY,sDAAqB;AA8BlC;IAA6C,mDAAqB;IAKjE,iCACC,EAAU,EACV,IAAY,EACG,YAA2B;eAE1C,kBAAM,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC;IAC9B,CAAC;IAED,qCAAG,GAAH;QACC,OAAO,iBAAM,GAAG,YAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IAbe,0BAAE,GAAG,oCAAoC,CAAC;IACnD,6BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,CAAC;IAH5D,uBAAuB;QAQjC,mBAAA,4BAAa,CAAA;OARH,uBAAuB,CAgBnC;IAAD,8BAAC;CAAA,AAhBD,CAA6C,qBAAqB,GAgBjE;AAhBY,0DAAuB;AAkBpC;IAAyC,+CAAqB;IAK7D,6BACC,EAAU,EACV,IAAY,EACG,YAA2B;eAE1C,kBAAM,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC;IAC9B,CAAC;IAED,iCAAG,GAAH;QACC,OAAO,iBAAM,GAAG,YAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAbe,sBAAE,GAAG,gCAAgC,CAAC;IAC/C,yBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;IAHpD,mBAAmB;QAQ7B,mBAAA,4BAAa,CAAA;OARH,mBAAmB,CAgB/B;IAAD,0BAAC;CAAA,AAhBD,CAAyC,qBAAqB,GAgB7D;AAhBY,kDAAmB;AAkBhC,IAAM,cAAc,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAmB,CAAC,gBAAgB,CAAC,CAAC;AACnG,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,EAAE,iBAAiB,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,CAAC,EAAE,oBAAoB,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACpO,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,KAAK,CAAC,EAAE,wBAAwB,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACxL,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,EAAE,EAAE,0BAA0B,CAAC,KAAK,CAAC,EAAE,8BAA8B,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAC5N,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,KAAK,CAAC,EAAE,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACnL,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,yBAAyB,EAAE,yBAAyB,CAAC,EAAE,EAAE,yBAAyB,CAAC,KAAK,CAAC,EAAE,6BAA6B,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACxN,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,EAAE,EAAE,SAAS,CAAC,EAAE,6BAA6B,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACpM,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,uBAAuB,EAAE,uBAAuB,CAAC,EAAE,EAAE,uBAAuB,CAAC,KAAK,CAAC,EAAE,gCAAgC,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACrN,cAAc,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAE,4BAA4B,EAAE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAErM,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,iBAAiB,CAAC,EAAE;QACxB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,gBAAgB,CAAC;KACnG;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,yBAAyB,CAAC,EAAE;QAChC,KAAK,EAAE,yBAAyB,CAAC,KAAK;KACtC;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panelpart';\nimport * as nls from 'vs/nls';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Action } from 'vs/base/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { SyncActionDescriptor, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/actions';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService, Parts, Position } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ActivityAction } from 'vs/workbench/browser/parts/compositeBarActions';\nimport { IActivity } from 'vs/workbench/common/activity';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nexport class ClosePanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.closePanel';\n\tstatic LABEL = nls.localize('closePanel', \"Close Panel\");\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, name, 'hide-panel-action');\n\t}\n\n\trun(): Promise<any> {\n\t\tthis.layoutService.setPanelHidden(true);\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class TogglePanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.togglePanel';\n\tstatic LABEL = nls.localize('togglePanel', \"Toggle Panel\");\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, name, layoutService.isVisible(Parts.PANEL_PART) ? 'panel expanded' : 'panel');\n\t}\n\n\trun(): Promise<any> {\n\t\tthis.layoutService.setPanelHidden(this.layoutService.isVisible(Parts.PANEL_PART));\n\t\treturn Promise.resolve();\n\t}\n}\n\nclass FocusPanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.focusPanel';\n\tstatic readonly LABEL = nls.localize('focusPanel', \"Focus into Panel\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\n\t\t// Show panel\n\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tthis.layoutService.setPanelHidden(false);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// Focus into active panel\n\t\tlet panel = this.panelService.getActivePanel();\n\t\tif (panel) {\n\t\t\tpanel.focus();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class TogglePanelPositionAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.togglePanelPosition';\n\tstatic readonly LABEL = nls.localize('toggledPanelPosition', \"Toggle Panel Position\");\n\n\tprivate static readonly MOVE_TO_RIGHT_LABEL = nls.localize('moveToRight', \"Move Panel Right\");\n\tprivate static readonly MOVE_TO_BOTTOM_LABEL = nls.localize('moveToBottom', \"Move Panel to Bottom\");\n\n\tprivate toDispose: IDisposable[];\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService\n\t) {\n\t\tsuper(id, label, layoutService.getPanelPosition() === Position.RIGHT ? 'move-panel-to-bottom' : 'move-panel-to-right');\n\n\t\tthis.toDispose = [];\n\n\t\tconst setClassAndLabel = () => {\n\t\t\tconst positionRight = this.layoutService.getPanelPosition() === Position.RIGHT;\n\t\t\tthis.class = positionRight ? 'move-panel-to-bottom' : 'move-panel-to-right';\n\t\t\tthis.label = positionRight ? TogglePanelPositionAction.MOVE_TO_BOTTOM_LABEL : TogglePanelPositionAction.MOVE_TO_RIGHT_LABEL;\n\t\t};\n\n\t\tthis.toDispose.push(editorGroupsService.onDidLayout(() => setClassAndLabel()));\n\n\t\tsetClassAndLabel();\n\t}\n\n\trun(): Promise<any> {\n\t\tconst position = this.layoutService.getPanelPosition();\n\n\t\tthis.layoutService.setPanelPosition(position === Position.BOTTOM ? Position.RIGHT : Position.BOTTOM);\n\t\treturn Promise.resolve();\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nexport class ToggleMaximizedPanelAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleMaximizedPanel';\n\tstatic readonly LABEL = nls.localize('toggleMaximizedPanel', \"Toggle Maximized Panel\");\n\n\tprivate static readonly MAXIMIZE_LABEL = nls.localize('maximizePanel', \"Maximize Panel Size\");\n\tprivate static readonly RESTORE_LABEL = nls.localize('minimizePanel', \"Restore Panel Size\");\n\n\tprivate toDispose: IDisposable[];\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService\n\t) {\n\t\tsuper(id, label, layoutService.isPanelMaximized() ? 'minimize-panel-action' : 'maximize-panel-action');\n\n\t\tthis.toDispose = [];\n\n\t\tthis.toDispose.push(editorGroupsService.onDidLayout(() => {\n\t\t\tconst maximized = this.layoutService.isPanelMaximized();\n\t\t\tthis.class = maximized ? 'minimize-panel-action' : 'maximize-panel-action';\n\t\t\tthis.label = maximized ? ToggleMaximizedPanelAction.RESTORE_LABEL : ToggleMaximizedPanelAction.MAXIMIZE_LABEL;\n\t\t}));\n\t}\n\n\trun(): Promise<any> {\n\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tthis.layoutService.setPanelHidden(false);\n\t\t}\n\n\t\tthis.layoutService.toggleMaximizedPanel();\n\t\treturn Promise.resolve();\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nexport class PanelActivityAction extends ActivityAction {\n\n\tconstructor(\n\t\tactivity: IActivity,\n\t\t@IPanelService private readonly panelService: IPanelService\n\t) {\n\t\tsuper(activity);\n\t}\n\n\trun(event: any): Promise<any> {\n\t\tthis.panelService.openPanel(this.activity.id, true);\n\t\tthis.activate();\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class SwitchPanelViewAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService private readonly panelService: IPanelService\n\t) {\n\t\tsuper(id, name);\n\t}\n\n\trun(offset: number): Promise<any> {\n\t\tconst pinnedPanels = this.panelService.getPinnedPanels();\n\t\tconst activePanel = this.panelService.getActivePanel();\n\t\tif (!activePanel) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tlet targetPanelId: string | undefined;\n\t\tfor (let i = 0; i < pinnedPanels.length; i++) {\n\t\t\tif (pinnedPanels[i].id === activePanel.getId()) {\n\t\t\t\ttargetPanelId = pinnedPanels[(i + pinnedPanels.length + offset) % pinnedPanels.length].id;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof targetPanelId === 'string') {\n\t\t\tthis.panelService.openPanel(targetPanelId, true);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class PreviousPanelViewAction extends SwitchPanelViewAction {\n\n\tstatic readonly ID = 'workbench.action.previousPanelView';\n\tstatic LABEL = nls.localize('previousPanelView', 'Previous Panel View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper(id, name, panelService);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn super.run(-1);\n\t}\n}\n\nexport class NextPanelViewAction extends SwitchPanelViewAction {\n\n\tstatic readonly ID = 'workbench.action.nextPanelView';\n\tstatic LABEL = nls.localize('nextPanelView', 'Next Panel View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper(id, name, panelService);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn super.run(1);\n\t}\n}\n\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(TogglePanelAction, TogglePanelAction.ID, TogglePanelAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_J }), 'View: Toggle Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusPanelAction, FocusPanelAction.ID, FocusPanelAction.LABEL), 'View: Focus into Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, ToggleMaximizedPanelAction.LABEL), 'View: Toggle Maximized Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL), 'View: Close Panel', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(TogglePanelPositionAction, TogglePanelPositionAction.ID, TogglePanelPositionAction.LABEL), 'View: Toggle Panel Position', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, undefined), 'View: Toggle Panel Position', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(PreviousPanelViewAction, PreviousPanelViewAction.ID, PreviousPanelViewAction.LABEL), 'View: Open Previous Panel View', nls.localize('view', \"View\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(NextPanelViewAction, NextPanelViewAction.ID, NextPanelViewAction.LABEL), 'View: Open Next Panel View', nls.localize('view', \"View\"));\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: TogglePanelAction.ID,\n\t\ttitle: nls.localize({ key: 'miTogglePanel', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Panel\")\n\t},\n\torder: 5\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: TogglePanelPositionAction.ID,\n\t\ttitle: TogglePanelPositionAction.LABEL\n\t},\n\torder: 3\n});\n"]}]}