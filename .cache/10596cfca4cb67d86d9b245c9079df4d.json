{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\"], function (require, exports, strings) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    if (typeof TextDecoder !== 'undefined') {\n        exports.createStringBuilder = (capacity) => new StringBuilder(capacity);\n    }\n    else {\n        exports.createStringBuilder = (capacity) => new CompatStringBuilder();\n    }\n    class StringBuilder {\n        constructor(capacity) {\n            this._decoder = new TextDecoder('UTF-16LE');\n            this._capacity = capacity | 0;\n            this._buffer = new Uint16Array(this._capacity);\n            this._completedStrings = null;\n            this._bufferLength = 0;\n        }\n        reset() {\n            this._completedStrings = null;\n            this._bufferLength = 0;\n        }\n        build() {\n            if (this._completedStrings !== null) {\n                this._flushBuffer();\n                return this._completedStrings.join('');\n            }\n            return this._buildBuffer();\n        }\n        _buildBuffer() {\n            if (this._bufferLength === 0) {\n                return '';\n            }\n            const view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n            return this._decoder.decode(view);\n        }\n        _flushBuffer() {\n            const bufferString = this._buildBuffer();\n            this._bufferLength = 0;\n            if (this._completedStrings === null) {\n                this._completedStrings = [bufferString];\n            }\n            else {\n                this._completedStrings[this._completedStrings.length] = bufferString;\n            }\n        }\n        write1(charCode) {\n            const remainingSpace = this._capacity - this._bufferLength;\n            if (remainingSpace <= 1) {\n                if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n                    this._flushBuffer();\n                }\n            }\n            this._buffer[this._bufferLength++] = charCode;\n        }\n        appendASCII(charCode) {\n            if (this._bufferLength === this._capacity) {\n                // buffer is full\n                this._flushBuffer();\n            }\n            this._buffer[this._bufferLength++] = charCode;\n        }\n        appendASCIIString(str) {\n            const strLen = str.length;\n            if (this._bufferLength + strLen >= this._capacity) {\n                // This string does not fit in the remaining buffer space\n                this._flushBuffer();\n                this._completedStrings[this._completedStrings.length] = str;\n                return;\n            }\n            for (let i = 0; i < strLen; i++) {\n                this._buffer[this._bufferLength++] = str.charCodeAt(i);\n            }\n        }\n    }\n    class CompatStringBuilder {\n        constructor() {\n            this._pieces = [];\n            this._piecesLen = 0;\n        }\n        reset() {\n            this._pieces = [];\n            this._piecesLen = 0;\n        }\n        build() {\n            return this._pieces.join('');\n        }\n        write1(charCode) {\n            this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n        }\n        appendASCII(charCode) {\n            this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n        }\n        appendASCIIString(str) {\n            this._pieces[this._piecesLen++] = str;\n        }\n    }\n});\n",null]}