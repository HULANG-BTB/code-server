{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/selectionClipboard.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/selectionClipboard.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar process = require(\"vs/base/common/process\");\nvar platform = require(\"vs/base/common/platform\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar SelectionClipboard = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectionClipboard, _super);\n    function SelectionClipboard(editor, clipboardService) {\n        var _this = _super.call(this) || this;\n        if (platform.isLinux) {\n            var isEnabled_1 = editor.getConfiguration().contribInfo.selectionClipboard;\n            _this._register(editor.onDidChangeConfiguration(function (e) {\n                if (e.contribInfo) {\n                    isEnabled_1 = editor.getConfiguration().contribInfo.selectionClipboard;\n                }\n            }));\n            _this._register(editor.onMouseDown(function (e) {\n                if (!isEnabled_1) {\n                    return;\n                }\n                if (!editor.hasModel()) {\n                    return;\n                }\n                if (e.event.middleButton) {\n                    e.event.preventDefault();\n                    editor.focus();\n                    if (e.target.position) {\n                        editor.setPosition(e.target.position);\n                    }\n                    if (e.target.type === editorBrowser_1.MouseTargetType.SCROLLBAR) {\n                        return;\n                    }\n                    process.nextTick(function () {\n                        // TODO@Alex: electron weirdness: calling clipboard.readText('selection') generates a paste event, so no need to execute paste ourselves\n                        clipboardService.readText('selection');\n                        // keybindingService.executeCommand(Handler.Paste, {\n                        // \ttext: clipboard.readText('selection'),\n                        // \tpasteOnNewLine: false\n                        // });\n                    });\n                }\n            }));\n            var setSelectionToClipboard_1 = _this._register(new async_1.RunOnceScheduler(function () {\n                if (!editor.hasModel()) {\n                    return;\n                }\n                var model = editor.getModel();\n                var selections = editor.getSelections();\n                selections = selections.slice(0);\n                selections.sort(range_1.Range.compareRangesUsingStarts);\n                var resultLength = 0;\n                for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n                    var sel = selections_1[_i];\n                    if (sel.isEmpty()) {\n                        // Only write if all cursors have selection\n                        return;\n                    }\n                    resultLength += model.getValueLengthInRange(sel);\n                }\n                if (resultLength > SelectionClipboard.SELECTION_LENGTH_LIMIT) {\n                    // This is a large selection!\n                    // => do not write it to the selection clipboard\n                    return;\n                }\n                var result = [];\n                for (var _a = 0, selections_2 = selections; _a < selections_2.length; _a++) {\n                    var sel = selections_2[_a];\n                    result.push(model.getValueInRange(sel, model_1.EndOfLinePreference.TextDefined));\n                }\n                var textToCopy = result.join(model.getEOL());\n                clipboardService.writeText(textToCopy, 'selection');\n            }, 100));\n            _this._register(editor.onDidChangeCursorSelection(function (e) {\n                if (!isEnabled_1) {\n                    return;\n                }\n                setSelectionToClipboard_1.schedule();\n            }));\n        }\n        return _this;\n    }\n    SelectionClipboard.prototype.getId = function () {\n        return SelectionClipboard.ID;\n    };\n    SelectionClipboard.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    SelectionClipboard.SELECTION_LENGTH_LIMIT = 65536;\n    SelectionClipboard.ID = 'editor.contrib.selectionClipboard';\n    SelectionClipboard = tslib_1.__decorate([\n        tslib_1.__param(1, clipboardService_1.IClipboardService)\n    ], SelectionClipboard);\n    return SelectionClipboard;\n}(lifecycle_1.Disposable));\nexports.SelectionClipboard = SelectionClipboard;\neditorExtensions_1.registerEditorContribution(SelectionClipboard);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/selectionClipboard.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/selectionClipboard.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as process from 'vs/base/common/process';\nimport * as platform from 'vs/base/common/platform';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IConfigurationChangedEvent } from 'vs/editor/common/config/editorOptions';\nimport { ICursorSelectionChangedEvent } from 'vs/editor/common/controller/cursorEvents';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference } from 'vs/editor/common/model';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\n\nexport class SelectionClipboard extends Disposable implements IEditorContribution {\n\tprivate static SELECTION_LENGTH_LIMIT = 65536;\n\tprivate static readonly ID = 'editor.contrib.selectionClipboard';\n\n\tconstructor(editor: ICodeEditor, @IClipboardService clipboardService: IClipboardService) {\n\t\tsuper();\n\n\t\tif (platform.isLinux) {\n\t\t\tlet isEnabled = editor.getConfiguration().contribInfo.selectionClipboard;\n\n\t\t\tthis._register(editor.onDidChangeConfiguration((e: IConfigurationChangedEvent) => {\n\t\t\t\tif (e.contribInfo) {\n\t\t\t\t\tisEnabled = editor.getConfiguration().contribInfo.selectionClipboard;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis._register(editor.onMouseDown((e: IEditorMouseEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.event.middleButton) {\n\t\t\t\t\te.event.preventDefault();\n\t\t\t\t\teditor.focus();\n\n\t\t\t\t\tif (e.target.position) {\n\t\t\t\t\t\teditor.setPosition(e.target.position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.target.type === MouseTargetType.SCROLLBAR) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\t\t// TODO@Alex: electron weirdness: calling clipboard.readText('selection') generates a paste event, so no need to execute paste ourselves\n\t\t\t\t\t\tclipboardService.readText('selection');\n\t\t\t\t\t\t// keybindingService.executeCommand(Handler.Paste, {\n\t\t\t\t\t\t// \ttext: clipboard.readText('selection'),\n\t\t\t\t\t\t// \tpasteOnNewLine: false\n\t\t\t\t\t\t// });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet setSelectionToClipboard = this._register(new RunOnceScheduler(() => {\n\t\t\t\tif (!editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet model = editor.getModel();\n\t\t\t\tlet selections = editor.getSelections();\n\t\t\t\tselections = selections.slice(0);\n\t\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\t\tlet resultLength = 0;\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\t\t// Only write if all cursors have selection\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresultLength += model.getValueLengthInRange(sel);\n\t\t\t\t}\n\n\t\t\t\tif (resultLength > SelectionClipboard.SELECTION_LENGTH_LIMIT) {\n\t\t\t\t\t// This is a large selection!\n\t\t\t\t\t// => do not write it to the selection clipboard\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet result: string[] = [];\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tresult.push(model.getValueInRange(sel, EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\n\t\t\t\tlet textToCopy = result.join(model.getEOL());\n\t\t\t\tclipboardService.writeText(textToCopy, 'selection');\n\t\t\t}, 100));\n\n\t\t\tthis._register(editor.onDidChangeCursorSelection((e: ICursorSelectionChangedEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetSelectionToClipboard.schedule();\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn SelectionClipboard.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nregisterEditorContribution(SelectionClipboard);\n"]}]}