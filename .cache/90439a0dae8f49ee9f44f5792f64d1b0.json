{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar languageConfiguration_1 = require(\"vs/editor/common/modes/languageConfiguration\");\nvar CharacterPairSupport = /** @class */ (function () {\n    function CharacterPairSupport(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(function (el) { return new languageConfiguration_1.StandardAutoClosingPairConditional(el); });\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(function (b) { return new languageConfiguration_1.StandardAutoClosingPairConditional({ open: b[0], close: b[1] }); });\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    CharacterPairSupport.prototype.getAutoClosingPairs = function () {\n        return this._autoClosingPairs;\n    };\n    CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\n        return this._autoCloseBefore;\n    };\n    CharacterPairSupport.prototype.shouldAutoClosePair = function (character, context, column) {\n        // Always complete on empty line\n        if (context.getTokenCount() === 0) {\n            return true;\n        }\n        var tokenIndex = context.findTokenIndexAtOffset(column - 2);\n        var standardTokenType = context.getStandardTokenType(tokenIndex);\n        for (var _i = 0, _a = this._autoClosingPairs; _i < _a.length; _i++) {\n            var autoClosingPair = _a[_i];\n            if (autoClosingPair.open === character) {\n                return autoClosingPair.isOK(standardTokenType);\n            }\n        }\n        return false;\n    };\n    CharacterPairSupport.prototype.getSurroundingPairs = function () {\n        return this._surroundingPairs;\n    };\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = ' \\n\\t';\n    return CharacterPairSupport;\n}());\nexports.CharacterPairSupport = CharacterPairSupport;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,sFAAgK;AAGhK;IASC,8BAAY,MAAyJ;QACpK,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC5B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,IAAI,0DAAkC,CAAC,EAAE,CAAC,EAA1C,CAA0C,CAAC,CAAC;SACvG;aAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;YAC3B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,0DAAkC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAnE,CAAmE,CAAC,CAAC;SACvH;aAAM;YACN,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;SAC5B;QAED,IAAI,CAAC,gBAAgB,GAAG,OAAO,MAAM,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,oBAAoB,CAAC,yCAAyC,CAAC;QAE7J,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,iBAAiB,CAAC;IAC5E,CAAC;IAEM,kDAAmB,GAA1B;QACC,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAC/B,CAAC;IAEM,oDAAqB,GAA5B;QACC,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAEM,kDAAmB,GAA1B,UAA2B,SAAiB,EAAE,OAAyB,EAAE,MAAc;QACtF,gCAAgC;QAChC,IAAI,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACZ;QAED,IAAI,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,IAAI,iBAAiB,GAAG,OAAO,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAEjE,KAA8B,UAAsB,EAAtB,KAAA,IAAI,CAAC,iBAAiB,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;YAAjD,IAAM,eAAe,SAAA;YACzB,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,EAAE;gBACvC,OAAO,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aAC/C;SACD;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,kDAAmB,GAA1B;QACC,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAC/B,CAAC;IAjDe,8DAAyC,GAAG,gBAAgB,CAAC;IAC7D,wDAAmC,GAAG,OAAO,CAAC;IAiD/D,2BAAC;CAAA,AApDD,IAoDC;AApDY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharacterPair, IAutoClosingPair, IAutoClosingPairConditional, StandardAutoClosingPairConditional } from 'vs/editor/common/modes/languageConfiguration';\nimport { ScopedLineTokens } from 'vs/editor/common/modes/supports';\n\nexport class CharacterPairSupport {\n\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = ' \\n\\t';\n\n\tprivate readonly _autoClosingPairs: StandardAutoClosingPairConditional[];\n\tprivate readonly _surroundingPairs: IAutoClosingPair[];\n\tprivate readonly _autoCloseBefore: string;\n\n\tconstructor(config: { brackets?: CharacterPair[]; autoClosingPairs?: IAutoClosingPairConditional[], surroundingPairs?: IAutoClosingPair[], autoCloseBefore?: string }) {\n\t\tif (config.autoClosingPairs) {\n\t\t\tthis._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n\t\t} else if (config.brackets) {\n\t\t\tthis._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n\t\t} else {\n\t\t\tthis._autoClosingPairs = [];\n\t\t}\n\n\t\tthis._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n\n\t\tthis._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n\t}\n\n\tpublic getAutoClosingPairs(): IAutoClosingPair[] {\n\t\treturn this._autoClosingPairs;\n\t}\n\n\tpublic getAutoCloseBeforeSet(): string {\n\t\treturn this._autoCloseBefore;\n\t}\n\n\tpublic shouldAutoClosePair(character: string, context: ScopedLineTokens, column: number): boolean {\n\t\t// Always complete on empty line\n\t\tif (context.getTokenCount() === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet tokenIndex = context.findTokenIndexAtOffset(column - 2);\n\t\tlet standardTokenType = context.getStandardTokenType(tokenIndex);\n\n\t\tfor (const autoClosingPair of this._autoClosingPairs) {\n\t\t\tif (autoClosingPair.open === character) {\n\t\t\t\treturn autoClosingPair.isOK(standardTokenType);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[] {\n\t\treturn this._surroundingPairs;\n\t}\n}\n"]}]}