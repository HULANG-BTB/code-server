{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDecorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDecorations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar decorations_1 = require(\"vs/workbench/services/decorations/browser/decorations\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar DecorationRequestsQueue = /** @class */ (function () {\n    function DecorationRequestsQueue(_proxy) {\n        this._proxy = _proxy;\n        this._idPool = 0;\n        this._requests = Object.create(null);\n        this._resolver = Object.create(null);\n        //\n    }\n    DecorationRequestsQueue.prototype.enqueue = function (handle, uri, token) {\n        var _this = this;\n        var id = ++this._idPool;\n        var result = new Promise(function (resolve) {\n            _this._requests[id] = { id: id, handle: handle, uri: uri };\n            _this._resolver[id] = resolve;\n            _this._processQueue();\n        });\n        token.onCancellationRequested(function () {\n            delete _this._requests[id];\n            delete _this._resolver[id];\n        });\n        return result;\n    };\n    DecorationRequestsQueue.prototype._processQueue = function () {\n        var _this = this;\n        if (typeof this._timer === 'number') {\n            // already queued\n            return;\n        }\n        this._timer = setTimeout(function () {\n            // make request\n            var requests = _this._requests;\n            var resolver = _this._resolver;\n            _this._proxy.$provideDecorations(collections_1.values(requests), cancellation_1.CancellationToken.None).then(function (data) {\n                for (var id in resolver) {\n                    resolver[id](data[id]);\n                }\n            });\n            // reset\n            _this._requests = [];\n            _this._resolver = [];\n            _this._timer = undefined;\n        }, 0);\n    };\n    return DecorationRequestsQueue;\n}());\nvar MainThreadDecorations = /** @class */ (function () {\n    function MainThreadDecorations(context, _decorationsService) {\n        this._decorationsService = _decorationsService;\n        this._provider = new Map();\n        this._proxy = context.getProxy(extHost_protocol_1.ExtHostContext.ExtHostDecorations);\n        this._requestQueue = new DecorationRequestsQueue(this._proxy);\n    }\n    MainThreadDecorations.prototype.dispose = function () {\n        this._provider.forEach(function (value) { return lifecycle_1.dispose(value); });\n        this._provider.clear();\n    };\n    MainThreadDecorations.prototype.$registerDecorationProvider = function (handle, label) {\n        var _this = this;\n        var emitter = new event_1.Emitter();\n        var registration = this._decorationsService.registerDecorationsProvider({\n            label: label,\n            onDidChange: emitter.event,\n            provideDecorations: function (uri, token) {\n                return _this._requestQueue.enqueue(handle, uri, token).then(function (data) {\n                    if (!data) {\n                        return undefined;\n                    }\n                    var weight = data[0], bubble = data[1], tooltip = data[2], letter = data[3], themeColor = data[4], source = data[5];\n                    return {\n                        weight: weight || 0,\n                        bubble: bubble || false,\n                        color: themeColor && themeColor.id,\n                        tooltip: tooltip,\n                        letter: letter,\n                        source: source,\n                    };\n                });\n            }\n        });\n        this._provider.set(handle, [emitter, registration]);\n    };\n    MainThreadDecorations.prototype.$onDidChange = function (handle, resources) {\n        var provider = this._provider.get(handle);\n        if (provider) {\n            var emitter = provider[0];\n            emitter.fire(resources && resources.map(uri_1.URI.revive));\n        }\n    };\n    MainThreadDecorations.prototype.$unregisterDecorationProvider = function (handle) {\n        var provider = this._provider.get(handle);\n        if (provider) {\n            lifecycle_1.dispose(provider);\n            this._provider.delete(handle);\n        }\n    };\n    MainThreadDecorations = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadDecorations),\n        tslib_1.__param(1, decorations_1.IDecorationsService)\n    ], MainThreadDecorations);\n    return MainThreadDecorations;\n}());\nexports.MainThreadDecorations = MainThreadDecorations;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDecorations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDecorations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Emitter } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainContext, IExtHostContext, MainThreadDecorationsShape, ExtHostDecorationsShape, DecorationData, DecorationRequest } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDecorationsService, IDecorationData } from 'vs/workbench/services/decorations/browser/decorations';\nimport { values } from 'vs/base/common/collections';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nclass DecorationRequestsQueue {\n\n\tprivate _idPool = 0;\n\tprivate _requests: { [id: number]: DecorationRequest } = Object.create(null);\n\tprivate _resolver: { [id: number]: (data: DecorationData) => any } = Object.create(null);\n\n\tprivate _timer: any;\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostDecorationsShape\n\t) {\n\t\t//\n\t}\n\n\tenqueue(handle: number, uri: URI, token: CancellationToken): Promise<DecorationData> {\n\t\tconst id = ++this._idPool;\n\t\tconst result = new Promise<DecorationData>(resolve => {\n\t\t\tthis._requests[id] = { id, handle, uri };\n\t\t\tthis._resolver[id] = resolve;\n\t\t\tthis._processQueue();\n\t\t});\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tdelete this._requests[id];\n\t\t\tdelete this._resolver[id];\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate _processQueue(): void {\n\t\tif (typeof this._timer === 'number') {\n\t\t\t// already queued\n\t\t\treturn;\n\t\t}\n\t\tthis._timer = setTimeout(() => {\n\t\t\t// make request\n\t\t\tconst requests = this._requests;\n\t\t\tconst resolver = this._resolver;\n\t\t\tthis._proxy.$provideDecorations(values(requests), CancellationToken.None).then(data => {\n\t\t\t\tfor (const id in resolver) {\n\t\t\t\t\tresolver[id](data[id]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// reset\n\t\t\tthis._requests = [];\n\t\t\tthis._resolver = [];\n\t\t\tthis._timer = undefined;\n\t\t}, 0);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadDecorations)\nexport class MainThreadDecorations implements MainThreadDecorationsShape {\n\n\tprivate readonly _provider = new Map<number, [Emitter<URI[]>, IDisposable]>();\n\tprivate readonly _proxy: ExtHostDecorationsShape;\n\tprivate readonly _requestQueue: DecorationRequestsQueue;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IDecorationsService private readonly _decorationsService: IDecorationsService\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostDecorations);\n\t\tthis._requestQueue = new DecorationRequestsQueue(this._proxy);\n\t}\n\n\tdispose() {\n\t\tthis._provider.forEach(value => dispose(value));\n\t\tthis._provider.clear();\n\t}\n\n\t$registerDecorationProvider(handle: number, label: string): void {\n\t\tconst emitter = new Emitter<URI[]>();\n\t\tconst registration = this._decorationsService.registerDecorationsProvider({\n\t\t\tlabel,\n\t\t\tonDidChange: emitter.event,\n\t\t\tprovideDecorations: (uri, token) => {\n\t\t\t\treturn this._requestQueue.enqueue(handle, uri, token).then(data => {\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst [weight, bubble, tooltip, letter, themeColor, source] = data;\n\t\t\t\t\treturn <IDecorationData>{\n\t\t\t\t\t\tweight: weight || 0,\n\t\t\t\t\t\tbubble: bubble || false,\n\t\t\t\t\t\tcolor: themeColor && themeColor.id,\n\t\t\t\t\t\ttooltip,\n\t\t\t\t\t\tletter,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._provider.set(handle, [emitter, registration]);\n\t}\n\n\t$onDidChange(handle: number, resources: UriComponents[]): void {\n\t\tconst provider = this._provider.get(handle);\n\t\tif (provider) {\n\t\t\tconst [emitter] = provider;\n\t\t\temitter.fire(resources && resources.map(URI.revive));\n\t\t}\n\t}\n\n\t$unregisterDecorationProvider(handle: number): void {\n\t\tconst provider = this._provider.get(handle);\n\t\tif (provider) {\n\t\t\tdispose(provider);\n\t\t\tthis._provider.delete(handle);\n\t\t}\n\t}\n}\n"]}]}