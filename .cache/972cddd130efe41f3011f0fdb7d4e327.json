{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/gotoError/gotoErrorWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/gotoError/gotoErrorWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/browser/dom\", \"vs/base/common/lifecycle\", \"vs/platform/markers/common/markers\", \"vs/editor/common/core/range\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/base/common/color\", \"vs/editor/common/view/editorColorRegistry\", \"vs/base/browser/ui/scrollbar/scrollableElement\", \"vs/base/common/scrollable\", \"vs/editor/common/editorCommon\", \"vs/base/common/labels\", \"vs/base/common/arrays\", \"vs/base/common/event\", \"vs/editor/contrib/referenceSearch/peekViewWidget\", \"vs/base/common/resources\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/editor/contrib/referenceSearch/referencesWidget\", \"vs/platform/accessibility/common/accessibility\", \"vs/css!./media/gotoErrorWidget\"], function (require, exports, nls, dom, lifecycle_1, markers_1, range_1, colorRegistry_1, themeService_1, color_1, editorColorRegistry_1, scrollableElement_1, scrollable_1, editorCommon_1, labels_1, arrays_1, event_1, peekViewWidget_1, resources_1, actionbar_1, referencesWidget_1, accessibility_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class MessageWidget {\n        constructor(parent, editor, onRelatedInformation) {\n            this._lines = 0;\n            this._longestLineLength = 0;\n            this._relatedDiagnostics = new WeakMap();\n            this._disposables = [];\n            this._editor = editor;\n            const domNode = document.createElement('div');\n            domNode.className = 'descriptioncontainer';\n            domNode.setAttribute('aria-live', 'assertive');\n            domNode.setAttribute('role', 'alert');\n            this._messageBlock = document.createElement('div');\n            dom.addClass(this._messageBlock, 'message');\n            domNode.appendChild(this._messageBlock);\n            this._relatedBlock = document.createElement('div');\n            domNode.appendChild(this._relatedBlock);\n            this._disposables.push(dom.addStandardDisposableListener(this._relatedBlock, 'click', event => {\n                event.preventDefault();\n                const related = this._relatedDiagnostics.get(event.target);\n                if (related) {\n                    onRelatedInformation(related);\n                }\n            }));\n            this._scrollable = new scrollableElement_1.ScrollableElement(domNode, {\n                horizontal: scrollable_1.ScrollbarVisibility.Auto,\n                vertical: scrollable_1.ScrollbarVisibility.Auto,\n                useShadows: false,\n                horizontalScrollbarSize: 3,\n                verticalScrollbarSize: 3\n            });\n            parent.appendChild(this._scrollable.getDomNode());\n            this._disposables.push(this._scrollable.onScroll(e => {\n                domNode.style.left = `-${e.scrollLeft}px`;\n                domNode.style.top = `-${e.scrollTop}px`;\n            }));\n            this._disposables.push(this._scrollable);\n        }\n        dispose() {\n            lifecycle_1.dispose(this._disposables);\n        }\n        update({ source, message, relatedInformation, code }) {\n            const lines = message.split(/\\r\\n|\\r|\\n/g);\n            this._lines = lines.length;\n            this._longestLineLength = 0;\n            for (const line of lines) {\n                this._longestLineLength = Math.max(line.length, this._longestLineLength);\n            }\n            dom.clearNode(this._messageBlock);\n            this._editor.applyFontInfo(this._messageBlock);\n            let lastLineElement = this._messageBlock;\n            for (const line of lines) {\n                lastLineElement = document.createElement('div');\n                lastLineElement.innerText = line;\n                if (line === '') {\n                    lastLineElement.style.height = this._messageBlock.style.lineHeight;\n                }\n                this._messageBlock.appendChild(lastLineElement);\n            }\n            if (source || code) {\n                const detailsElement = document.createElement('span');\n                dom.addClass(detailsElement, 'details');\n                lastLineElement.appendChild(detailsElement);\n                if (source) {\n                    const sourceElement = document.createElement('span');\n                    sourceElement.innerText = source;\n                    dom.addClass(sourceElement, 'source');\n                    detailsElement.appendChild(sourceElement);\n                }\n                if (code) {\n                    const codeElement = document.createElement('span');\n                    codeElement.innerText = `(${code})`;\n                    dom.addClass(codeElement, 'code');\n                    detailsElement.appendChild(codeElement);\n                }\n            }\n            dom.clearNode(this._relatedBlock);\n            this._editor.applyFontInfo(this._relatedBlock);\n            if (arrays_1.isNonEmptyArray(relatedInformation)) {\n                const relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));\n                relatedInformationNode.style.paddingTop = `${Math.floor(this._editor.getConfiguration().lineHeight * 0.66)}px`;\n                this._lines += 1;\n                for (const related of relatedInformation) {\n                    let container = document.createElement('div');\n                    let relatedResource = document.createElement('a');\n                    dom.addClass(relatedResource, 'filename');\n                    relatedResource.innerHTML = `${labels_1.getBaseLabel(related.resource)}(${related.startLineNumber}, ${related.startColumn}): `;\n                    relatedResource.title = labels_1.getPathLabel(related.resource, undefined);\n                    this._relatedDiagnostics.set(relatedResource, related);\n                    let relatedMessage = document.createElement('span');\n                    relatedMessage.innerText = related.message;\n                    container.appendChild(relatedResource);\n                    container.appendChild(relatedMessage);\n                    this._lines += 1;\n                    relatedInformationNode.appendChild(container);\n                }\n            }\n            const fontInfo = this._editor.getConfiguration().fontInfo;\n            const scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);\n            const scrollHeight = fontInfo.lineHeight * this._lines;\n            this._scrollable.setScrollDimensions({ scrollWidth, scrollHeight });\n        }\n        layout(height, width) {\n            this._scrollable.getDomNode().style.height = `${height}px`;\n            this._scrollable.getDomNode().style.width = `${width}px`;\n            this._scrollable.setScrollDimensions({ width, height });\n        }\n        getHeightInLines() {\n            return Math.min(17, this._lines);\n        }\n    }\n    class MarkerNavigationWidget extends peekViewWidget_1.PeekViewWidget {\n        constructor(editor, actions, _themeService) {\n            super(editor, { showArrow: true, showFrame: true, isAccessible: true });\n            this.actions = actions;\n            this._themeService = _themeService;\n            this._callOnDispose = [];\n            this._onDidSelectRelatedInformation = new event_1.Emitter();\n            this.onDidSelectRelatedInformation = this._onDidSelectRelatedInformation.event;\n            this._severity = markers_1.MarkerSeverity.Warning;\n            this._backgroundColor = color_1.Color.white;\n            this._applyTheme(_themeService.getTheme());\n            this._callOnDispose.push(_themeService.onThemeChange(this._applyTheme.bind(this)));\n            this.create();\n        }\n        _applyTheme(theme) {\n            this._backgroundColor = theme.getColor(exports.editorMarkerNavigationBackground);\n            let colorId = exports.editorMarkerNavigationError;\n            if (this._severity === markers_1.MarkerSeverity.Warning) {\n                colorId = exports.editorMarkerNavigationWarning;\n            }\n            else if (this._severity === markers_1.MarkerSeverity.Info) {\n                colorId = exports.editorMarkerNavigationInfo;\n            }\n            const frameColor = theme.getColor(colorId);\n            this.style({\n                arrowColor: frameColor,\n                frameColor: frameColor,\n                headerBackgroundColor: this._backgroundColor,\n                primaryHeadingColor: theme.getColor(referencesWidget_1.peekViewTitleForeground),\n                secondaryHeadingColor: theme.getColor(referencesWidget_1.peekViewTitleInfoForeground)\n            }); // style() will trigger _applyStyles\n        }\n        _applyStyles() {\n            if (this._parentContainer) {\n                this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';\n            }\n            super._applyStyles();\n        }\n        dispose() {\n            this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n            super.dispose();\n        }\n        focus() {\n            this._parentContainer.focus();\n        }\n        _fillHead(container) {\n            super._fillHead(container);\n            this._actionbarWidget.push(this.actions, { label: false, icon: true });\n        }\n        _getActionBarOptions() {\n            return {\n                orientation: actionbar_1.ActionsOrientation.HORIZONTAL_REVERSE\n            };\n        }\n        _fillBody(container) {\n            this._parentContainer = container;\n            dom.addClass(container, 'marker-widget');\n            this._parentContainer.tabIndex = 0;\n            this._parentContainer.setAttribute('role', 'tooltip');\n            this._container = document.createElement('div');\n            container.appendChild(this._container);\n            this._message = new MessageWidget(this._container, this.editor, related => this._onDidSelectRelatedInformation.fire(related));\n            this._disposables.push(this._message);\n        }\n        show(where, heightInLines) {\n            throw new Error('call showAtMarker');\n        }\n        showAtMarker(marker, markerIdx, markerCount) {\n            // update:\n            // * title\n            // * message\n            this._container.classList.remove('stale');\n            this._message.update(marker);\n            // update frame color (only applied on 'show')\n            this._severity = marker.severity;\n            this._applyTheme(this._themeService.getTheme());\n            // show\n            let range = range_1.Range.lift(marker);\n            const editorPosition = this.editor.getPosition();\n            let position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();\n            super.show(position, this.computeRequiredHeight());\n            const model = this.editor.getModel();\n            if (model) {\n                const detail = markerCount > 1\n                    ? nls.localize('problems', \"{0} of {1} problems\", markerIdx, markerCount)\n                    : nls.localize('change', \"{0} of {1} problem\", markerIdx, markerCount);\n                this.setTitle(resources_1.basename(model.uri), detail);\n            }\n            let headingIconClassName = 'error';\n            if (this._severity === markers_1.MarkerSeverity.Warning) {\n                headingIconClassName = 'warning';\n            }\n            else if (this._severity === markers_1.MarkerSeverity.Info) {\n                headingIconClassName = 'info';\n            }\n            this.setTitleIcon(headingIconClassName);\n            this.editor.revealPositionInCenter(position, editorCommon_1.ScrollType.Smooth);\n            if (this.editor.getConfiguration().accessibilitySupport !== accessibility_1.AccessibilitySupport.Disabled) {\n                this.focus();\n            }\n        }\n        updateMarker(marker) {\n            this._container.classList.remove('stale');\n            this._message.update(marker);\n        }\n        showStale() {\n            this._container.classList.add('stale');\n            this._relayout();\n        }\n        _doLayoutBody(heightInPixel, widthInPixel) {\n            super._doLayoutBody(heightInPixel, widthInPixel);\n            this._heightInPixel = heightInPixel;\n            this._message.layout(heightInPixel, widthInPixel);\n            this._container.style.height = `${heightInPixel}px`;\n        }\n        _onWidth(widthInPixel) {\n            this._message.layout(this._heightInPixel, widthInPixel);\n        }\n        _relayout() {\n            super._relayout(this.computeRequiredHeight());\n        }\n        computeRequiredHeight() {\n            return 3 + this._message.getHeightInLines();\n        }\n    }\n    exports.MarkerNavigationWidget = MarkerNavigationWidget;\n    // theming\n    let errorDefault = colorRegistry_1.oneOf(editorColorRegistry_1.editorErrorForeground, editorColorRegistry_1.editorErrorBorder);\n    let warningDefault = colorRegistry_1.oneOf(editorColorRegistry_1.editorWarningForeground, editorColorRegistry_1.editorWarningBorder);\n    let infoDefault = colorRegistry_1.oneOf(editorColorRegistry_1.editorInfoForeground, editorColorRegistry_1.editorInfoBorder);\n    exports.editorMarkerNavigationError = colorRegistry_1.registerColor('editorMarkerNavigationError.background', { dark: errorDefault, light: errorDefault, hc: errorDefault }, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));\n    exports.editorMarkerNavigationWarning = colorRegistry_1.registerColor('editorMarkerNavigationWarning.background', { dark: warningDefault, light: warningDefault, hc: warningDefault }, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));\n    exports.editorMarkerNavigationInfo = colorRegistry_1.registerColor('editorMarkerNavigationInfo.background', { dark: infoDefault, light: infoDefault, hc: infoDefault }, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));\n    exports.editorMarkerNavigationBackground = colorRegistry_1.registerColor('editorMarkerNavigation.background', { dark: '#2D2D30', light: color_1.Color.white, hc: '#0C141F' }, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const link = theme.getColor(colorRegistry_1.textLinkForeground);\n        if (link) {\n            collector.addRule(`.monaco-editor .marker-widget a { color: ${link}; }`);\n        }\n    });\n});\n",null]}