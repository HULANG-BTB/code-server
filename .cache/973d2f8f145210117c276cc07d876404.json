{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/platform/registry/common/platform\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, event_1, platform_1, instantiation_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Mime type used by the output editor.\n     */\n    exports.OUTPUT_MIME = 'text/x-code-output';\n    /**\n     * Output resource scheme.\n     */\n    exports.OUTPUT_SCHEME = 'output';\n    /**\n     * Id used by the output editor.\n     */\n    exports.OUTPUT_MODE_ID = 'Log';\n    /**\n     * Mime type used by the log output editor.\n     */\n    exports.LOG_MIME = 'text/x-code-log-output';\n    /**\n     * Log resource scheme.\n     */\n    exports.LOG_SCHEME = 'log';\n    /**\n     * Id used by the log output editor.\n     */\n    exports.LOG_MODE_ID = 'log';\n    /**\n     * Output panel id\n     */\n    exports.OUTPUT_PANEL_ID = 'workbench.panel.output';\n    exports.Extensions = {\n        OutputChannels: 'workbench.contributions.outputChannels'\n    };\n    exports.OUTPUT_SERVICE_ID = 'outputService';\n    exports.MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;\n    exports.CONTEXT_IN_OUTPUT = new contextkey_1.RawContextKey('inOutput', false);\n    exports.CONTEXT_ACTIVE_LOG_OUTPUT = new contextkey_1.RawContextKey('activeLogOutput', false);\n    exports.IOutputService = instantiation_1.createDecorator(exports.OUTPUT_SERVICE_ID);\n    class OutputChannelRegistry {\n        constructor() {\n            this.channels = new Map();\n            this._onDidRegisterChannel = new event_1.Emitter();\n            this.onDidRegisterChannel = this._onDidRegisterChannel.event;\n            this._onDidRemoveChannel = new event_1.Emitter();\n            this.onDidRemoveChannel = this._onDidRemoveChannel.event;\n        }\n        registerChannel(descriptor) {\n            if (!this.channels.has(descriptor.id)) {\n                this.channels.set(descriptor.id, descriptor);\n                this._onDidRegisterChannel.fire(descriptor.id);\n            }\n        }\n        getChannels() {\n            const result = [];\n            this.channels.forEach(value => result.push(value));\n            return result;\n        }\n        getChannel(id) {\n            return this.channels.get(id);\n        }\n        removeChannel(id) {\n            this.channels.delete(id);\n            this._onDidRemoveChannel.fire(id);\n        }\n    }\n    platform_1.Registry.add(exports.Extensions.OutputChannels, new OutputChannelRegistry());\n});\n",null]}