{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostMessageService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostMessageService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"../common/extHost.protocol\"], function (require, exports, extHost_protocol_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function isMessageItem(item) {\n        return item && item.title;\n    }\n    class ExtHostMessageService {\n        constructor(mainContext) {\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadMessageService);\n        }\n        showMessage(extension, severity, message, optionsOrFirstItem, rest) {\n            const options = { extension };\n            let items;\n            if (typeof optionsOrFirstItem === 'string' || isMessageItem(optionsOrFirstItem)) {\n                items = [optionsOrFirstItem, ...rest];\n            }\n            else {\n                options.modal = optionsOrFirstItem && optionsOrFirstItem.modal;\n                items = rest;\n            }\n            const commands = [];\n            for (let handle = 0; handle < items.length; handle++) {\n                const command = items[handle];\n                if (typeof command === 'string') {\n                    commands.push({ title: command, handle, isCloseAffordance: false });\n                }\n                else if (typeof command === 'object') {\n                    let { title, isCloseAffordance } = command;\n                    commands.push({ title, isCloseAffordance: !!isCloseAffordance, handle });\n                }\n                else {\n                    console.warn('Invalid message item:', command);\n                }\n            }\n            return this._proxy.$showMessage(severity, message, options, commands).then(handle => {\n                if (typeof handle === 'number') {\n                    return items[handle];\n                }\n                return undefined;\n            });\n        }\n    }\n    exports.ExtHostMessageService = ExtHostMessageService;\n});\n",null]}