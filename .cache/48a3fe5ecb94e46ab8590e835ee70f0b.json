{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"vs/css!./codeInsetWidget\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar CodeInsetHelper = /** @class */ (function () {\n    function CodeInsetHelper() {\n        this._removeDecorations = [];\n        this._addDecorations = [];\n        this._addDecorationsCallbacks = [];\n    }\n    CodeInsetHelper.prototype.addDecoration = function (decoration, callback) {\n        this._addDecorations.push(decoration);\n        this._addDecorationsCallbacks.push(callback);\n    };\n    CodeInsetHelper.prototype.removeDecoration = function (decorationId) {\n        this._removeDecorations.push(decorationId);\n    };\n    CodeInsetHelper.prototype.commit = function (changeAccessor) {\n        var resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);\n        for (var i = 0, len = resultingDecorations.length; i < len; i++) {\n            this._addDecorationsCallbacks[i](resultingDecorations[i]);\n        }\n    };\n    return CodeInsetHelper;\n}());\nexports.CodeInsetHelper = CodeInsetHelper;\nvar CodeInsetWidget = /** @class */ (function () {\n    function CodeInsetWidget(data, // all the insets on the same line (often just one)\n    editor, helper) {\n        var _this = this;\n        this._viewZoneId = undefined;\n        this._editor = editor;\n        this._data = data;\n        this._decorationIds = new Array(this._data.length);\n        this._data.forEach(function (codeInsetData, i) {\n            helper.addDecoration({\n                range: codeInsetData.symbol.range,\n                options: textModel_1.ModelDecorationOptions.EMPTY\n            }, function (id) { return _this._decorationIds[i] = id; });\n            // the range contains all insets on this line\n            if (!_this._range) {\n                _this._range = range_1.Range.lift(codeInsetData.symbol.range);\n            }\n            else {\n                _this._range = range_1.Range.plusRange(_this._range, codeInsetData.symbol.range);\n            }\n        });\n    }\n    CodeInsetWidget.prototype.dispose = function (helper, viewZoneChangeAccessor) {\n        while (this._decorationIds.length) {\n            var decoration = this._decorationIds.pop();\n            if (decoration) {\n                helper.removeDecoration(decoration);\n            }\n        }\n        if (viewZoneChangeAccessor) {\n            if (typeof this._viewZoneId !== 'undefined') {\n                viewZoneChangeAccessor.removeZone(this._viewZoneId);\n            }\n            this._viewZone = undefined;\n        }\n        if (this._webview) {\n            this._webview.dispose();\n        }\n    };\n    CodeInsetWidget.prototype.isValid = function () {\n        var _this = this;\n        return this._editor.hasModel() && this._decorationIds.some(function (id, i) {\n            var range = _this._editor.getModel().getDecorationRange(id);\n            var symbol = _this._data[i].symbol;\n            return !!range && range_1.Range.isEmpty(symbol.range) === range.isEmpty();\n        });\n    };\n    CodeInsetWidget.prototype.updateCodeInsetSymbols = function (data, helper) {\n        var _this = this;\n        while (this._decorationIds.length) {\n            var decoration = this._decorationIds.pop();\n            if (decoration) {\n                helper.removeDecoration(decoration);\n            }\n        }\n        this._data = data;\n        this._decorationIds = new Array(this._data.length);\n        this._data.forEach(function (codeInsetData, i) {\n            helper.addDecoration({\n                range: codeInsetData.symbol.range,\n                options: textModel_1.ModelDecorationOptions.EMPTY\n            }, function (id) { return _this._decorationIds[i] = id; });\n        });\n    };\n    CodeInsetWidget.prototype.computeIfNecessary = function (model) {\n        // Read editor current state\n        for (var i = 0; i < this._decorationIds.length; i++) {\n            var range = model.getDecorationRange(this._decorationIds[i]);\n            if (range) {\n                this._data[i].symbol.range = range;\n            }\n        }\n        return this._data;\n    };\n    CodeInsetWidget.prototype.getLineNumber = function () {\n        if (this._editor.hasModel()) {\n            var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n            if (range) {\n                return range.startLineNumber;\n            }\n        }\n        return -1;\n    };\n    CodeInsetWidget.prototype.adoptWebview = function (webview) {\n        var _this = this;\n        var lineNumber = this._range.endLineNumber;\n        this._editor.changeViewZones(function (accessor) {\n            if (_this._viewZoneId) {\n                accessor.removeZone(_this._viewZoneId);\n                _this._webview.dispose();\n            }\n            var div = document.createElement('div');\n            webview.mountTo(div);\n            webview.onMessage(function (e) {\n                // The webview contents can use a \"size-info\" message to report its size.\n                if (e && e.type === 'size-info') {\n                    var margin = e.payload.height > 0 ? 5 : 0;\n                    _this._viewZone.heightInPx = e.payload.height + margin;\n                    _this._editor.changeViewZones(function (accessor) {\n                        if (_this._viewZoneId) {\n                            accessor.layoutZone(_this._viewZoneId);\n                        }\n                    });\n                }\n            });\n            _this._viewZone = {\n                afterLineNumber: lineNumber,\n                heightInPx: 50,\n                domNode: div\n            };\n            _this._viewZoneId = accessor.addZone(_this._viewZone);\n            _this._webview = webview;\n        });\n    };\n    CodeInsetWidget.prototype.reposition = function (viewZoneChangeAccessor) {\n        if (this.isValid() && this._editor.hasModel()) {\n            var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n            if (range) {\n                this._viewZone.afterLineNumber = range.endLineNumber;\n            }\n            if (this._viewZoneId) {\n                viewZoneChangeAccessor.layoutZone(this._viewZoneId);\n            }\n        }\n    };\n    return CodeInsetWidget;\n}());\nexports.CodeInsetWidget = CodeInsetWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./codeInsetWidget';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as editorBrowser from 'vs/editor/browser/editorBrowser';\nimport { ICodeInsetData } from '../common/codeInset';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { IModelDeltaDecoration, IModelDecorationsChangeAccessor, ITextModel } from 'vs/editor/common/model';\nimport { WebviewElement } from 'vs/workbench/contrib/webview/electron-browser/webviewElement';\n\n\nexport interface IDecorationIdCallback {\n\t(decorationId: string): void;\n}\n\nexport class CodeInsetHelper {\n\n\tprivate _removeDecorations: string[];\n\tprivate _addDecorations: IModelDeltaDecoration[];\n\tprivate _addDecorationsCallbacks: IDecorationIdCallback[];\n\n\tconstructor() {\n\t\tthis._removeDecorations = [];\n\t\tthis._addDecorations = [];\n\t\tthis._addDecorationsCallbacks = [];\n\t}\n\n\taddDecoration(decoration: IModelDeltaDecoration, callback: IDecorationIdCallback): void {\n\t\tthis._addDecorations.push(decoration);\n\t\tthis._addDecorationsCallbacks.push(callback);\n\t}\n\n\tremoveDecoration(decorationId: string): void {\n\t\tthis._removeDecorations.push(decorationId);\n\t}\n\n\tcommit(changeAccessor: IModelDecorationsChangeAccessor): void {\n\t\tlet resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);\n\t\tfor (let i = 0, len = resultingDecorations.length; i < len; i++) {\n\t\t\tthis._addDecorationsCallbacks[i](resultingDecorations[i]);\n\t\t}\n\t}\n}\n\nexport class CodeInsetWidget {\n\n\tprivate readonly _editor: editorBrowser.ICodeEditor;\n\tprivate _webview: WebviewElement;\n\tprivate _viewZone: editorBrowser.IViewZone;\n\tprivate _viewZoneId?: number = undefined;\n\tprivate _decorationIds: string[];\n\tprivate _data: ICodeInsetData[];\n\tprivate _range: Range;\n\n\tconstructor(\n\t\tdata: ICodeInsetData[], // all the insets on the same line (often just one)\n\t\teditor: editorBrowser.ICodeEditor,\n\t\thelper: CodeInsetHelper\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._data = data;\n\t\tthis._decorationIds = new Array<string>(this._data.length);\n\n\t\tthis._data.forEach((codeInsetData, i) => {\n\n\t\t\thelper.addDecoration({\n\t\t\t\trange: codeInsetData.symbol.range,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY\n\t\t\t}, id => this._decorationIds[i] = id);\n\n\t\t\t// the range contains all insets on this line\n\t\t\tif (!this._range) {\n\t\t\t\tthis._range = Range.lift(codeInsetData.symbol.range);\n\t\t\t} else {\n\t\t\t\tthis._range = Range.plusRange(this._range, codeInsetData.symbol.range);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic dispose(helper: CodeInsetHelper, viewZoneChangeAccessor: editorBrowser.IViewZoneChangeAccessor | null): void {\n\t\twhile (this._decorationIds.length) {\n\t\t\tconst decoration = this._decorationIds.pop();\n\t\t\tif (decoration) {\n\t\t\t\thelper.removeDecoration(decoration);\n\t\t\t}\n\t\t}\n\t\tif (viewZoneChangeAccessor) {\n\t\t\tif (typeof this._viewZoneId !== 'undefined') {\n\t\t\t\tviewZoneChangeAccessor.removeZone(this._viewZoneId);\n\t\t\t}\n\t\t\tthis._viewZone = undefined!;\n\t\t}\n\t\tif (this._webview) {\n\t\t\tthis._webview.dispose();\n\t\t}\n\t}\n\n\tpublic isValid(): boolean {\n\t\treturn this._editor.hasModel() && this._decorationIds.some((id, i) => {\n\t\t\tconst range = this._editor.getModel()!.getDecorationRange(id);\n\t\t\tconst symbol = this._data[i].symbol;\n\t\t\treturn !!range && Range.isEmpty(symbol.range) === range.isEmpty();\n\t\t});\n\t}\n\n\tpublic updateCodeInsetSymbols(data: ICodeInsetData[], helper: CodeInsetHelper): void {\n\t\twhile (this._decorationIds.length) {\n\t\t\tconst decoration = this._decorationIds.pop();\n\t\t\tif (decoration) {\n\t\t\t\thelper.removeDecoration(decoration);\n\t\t\t}\n\t\t}\n\t\tthis._data = data;\n\t\tthis._decorationIds = new Array<string>(this._data.length);\n\t\tthis._data.forEach((codeInsetData, i) => {\n\t\t\thelper.addDecoration({\n\t\t\t\trange: codeInsetData.symbol.range,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY\n\t\t\t}, id => this._decorationIds[i] = id);\n\t\t});\n\t}\n\n\tpublic computeIfNecessary(model: ITextModel): ICodeInsetData[] {\n\t\t// Read editor current state\n\t\tfor (let i = 0; i < this._decorationIds.length; i++) {\n\t\t\tconst range = model.getDecorationRange(this._decorationIds[i]);\n\t\t\tif (range) {\n\t\t\t\tthis._data[i].symbol.range = range;\n\t\t\t}\n\t\t}\n\t\treturn this._data;\n\t}\n\n\tpublic getLineNumber(): number {\n\t\tif (this._editor.hasModel()) {\n\t\t\tconst range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n\t\t\tif (range) {\n\t\t\t\treturn range.startLineNumber;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic adoptWebview(webview: WebviewElement): void {\n\n\t\tconst lineNumber = this._range.endLineNumber;\n\t\tthis._editor.changeViewZones(accessor => {\n\n\t\t\tif (this._viewZoneId) {\n\t\t\t\taccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._webview.dispose();\n\t\t\t}\n\n\t\t\tconst div = document.createElement('div');\n\t\t\twebview.mountTo(div);\n\t\t\twebview.onMessage((e: { type: string, payload: any }) => {\n\t\t\t\t// The webview contents can use a \"size-info\" message to report its size.\n\t\t\t\tif (e && e.type === 'size-info') {\n\t\t\t\t\tconst margin = e.payload.height > 0 ? 5 : 0;\n\t\t\t\t\tthis._viewZone.heightInPx = e.payload.height + margin;\n\t\t\t\t\tthis._editor.changeViewZones(accessor => {\n\t\t\t\t\t\tif (this._viewZoneId) {\n\t\t\t\t\t\t\taccessor.layoutZone(this._viewZoneId);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._viewZone = {\n\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\theightInPx: 50,\n\t\t\t\tdomNode: div\n\t\t\t};\n\t\t\tthis._viewZoneId = accessor.addZone(this._viewZone);\n\t\t\tthis._webview = webview;\n\t\t});\n\t}\n\n\tpublic reposition(viewZoneChangeAccessor: editorBrowser.IViewZoneChangeAccessor): void {\n\t\tif (this.isValid() && this._editor.hasModel()) {\n\t\t\tconst range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n\t\t\tif (range) {\n\t\t\t\tthis._viewZone.afterLineNumber = range.endLineNumber;\n\t\t\t}\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tviewZoneChangeAccessor.layoutZone(this._viewZoneId);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}