{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar oneCursor_1 = require(\"vs/editor/common/controller/oneCursor\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar CursorCollection = /** @class */ (function () {\n    function CursorCollection(context) {\n        this.context = context;\n        this.primaryCursor = new oneCursor_1.OneCursor(context);\n        this.secondaryCursors = [];\n        this.lastAddedCursorIndex = 0;\n    }\n    CursorCollection.prototype.dispose = function () {\n        this.primaryCursor.dispose(this.context);\n        this.killSecondaryCursors();\n    };\n    CursorCollection.prototype.startTrackingSelections = function () {\n        this.primaryCursor.startTrackingSelection(this.context);\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].startTrackingSelection(this.context);\n        }\n    };\n    CursorCollection.prototype.stopTrackingSelections = function () {\n        this.primaryCursor.stopTrackingSelection(this.context);\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].stopTrackingSelection(this.context);\n        }\n    };\n    CursorCollection.prototype.updateContext = function (context) {\n        this.context = context;\n    };\n    CursorCollection.prototype.ensureValidState = function () {\n        this.primaryCursor.ensureValidState(this.context);\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].ensureValidState(this.context);\n        }\n    };\n    CursorCollection.prototype.readSelectionFromMarkers = function () {\n        var result = [];\n        result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n        }\n        return result;\n    };\n    CursorCollection.prototype.getAll = function () {\n        var result = [];\n        result[0] = this.primaryCursor.asCursorState();\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].asCursorState();\n        }\n        return result;\n    };\n    CursorCollection.prototype.getViewPositions = function () {\n        var result = [];\n        result[0] = this.primaryCursor.viewState.position;\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].viewState.position;\n        }\n        return result;\n    };\n    CursorCollection.prototype.getSelections = function () {\n        var result = [];\n        result[0] = this.primaryCursor.modelState.selection;\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].modelState.selection;\n        }\n        return result;\n    };\n    CursorCollection.prototype.getViewSelections = function () {\n        var result = [];\n        result[0] = this.primaryCursor.viewState.selection;\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].viewState.selection;\n        }\n        return result;\n    };\n    CursorCollection.prototype.setSelections = function (selections) {\n        this.setStates(cursorCommon_1.CursorState.fromModelSelections(selections));\n    };\n    CursorCollection.prototype.getPrimaryCursor = function () {\n        return this.primaryCursor.asCursorState();\n    };\n    CursorCollection.prototype.setStates = function (states) {\n        if (states === null) {\n            return;\n        }\n        this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    };\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    CursorCollection.prototype._setSecondaryStates = function (secondaryStates) {\n        var secondaryCursorsLength = this.secondaryCursors.length;\n        var secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            var createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (var i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            var removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (var i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n            }\n        }\n        for (var i = 0; i < secondaryStatesLength; i++) {\n            this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    };\n    CursorCollection.prototype.killSecondaryCursors = function () {\n        this._setSecondaryStates([]);\n    };\n    CursorCollection.prototype._addSecondaryCursor = function () {\n        this.secondaryCursors.push(new oneCursor_1.OneCursor(this.context));\n        this.lastAddedCursorIndex = this.secondaryCursors.length;\n    };\n    CursorCollection.prototype.getLastAddedCursorIndex = function () {\n        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    };\n    CursorCollection.prototype._removeSecondaryCursor = function (removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.secondaryCursors[removeIndex].dispose(this.context);\n        this.secondaryCursors.splice(removeIndex, 1);\n    };\n    CursorCollection.prototype._getAll = function () {\n        var result = [];\n        result[0] = this.primaryCursor;\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i];\n        }\n        return result;\n    };\n    CursorCollection.prototype.normalize = function () {\n        if (this.secondaryCursors.length === 0) {\n            return;\n        }\n        var cursors = this._getAll();\n        var sortedCursors = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort(function (a, b) {\n            if (a.selection.startLineNumber === b.selection.startLineNumber) {\n                return a.selection.startColumn - b.selection.startColumn;\n            }\n            return a.selection.startLineNumber - b.selection.startLineNumber;\n        });\n        for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            var current = sortedCursors[sortedCursorIndex];\n            var next = sortedCursors[sortedCursorIndex + 1];\n            var currentSelection = current.selection;\n            var nextSelection = next.selection;\n            if (!this.context.config.multiCursorMergeOverlapping) {\n                continue;\n            }\n            var shouldMergeCursors = void 0;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                var looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                var looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    var resultingRange = looserSelection.plusRange(winnerSelection);\n                    var looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    var winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    var resultingSelectionIsLTR = void 0;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    var resultingSelection = void 0;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new selection_1.Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new selection_1.Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    var resultingState = cursorCommon_1.CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (var _i = 0, sortedCursors_1 = sortedCursors; _i < sortedCursors_1.length; _i++) {\n                    var sortedCursor = sortedCursors_1[_i];\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    };\n    return CursorCollection;\n}());\nexports.CursorCollection = CursorCollection;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorContext, CursorState, PartialCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { OneCursor } from 'vs/editor/common/controller/oneCursor';\nimport { Position } from 'vs/editor/common/core/position';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\n\nexport class CursorCollection {\n\n\tprivate context: CursorContext;\n\n\tprivate primaryCursor: OneCursor;\n\tprivate secondaryCursors: OneCursor[];\n\n\t// An index which identifies the last cursor that was added / moved (think Ctrl+drag)\n\tprivate lastAddedCursorIndex: number;\n\n\tconstructor(context: CursorContext) {\n\t\tthis.context = context;\n\t\tthis.primaryCursor = new OneCursor(context);\n\t\tthis.secondaryCursors = [];\n\t\tthis.lastAddedCursorIndex = 0;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.primaryCursor.dispose(this.context);\n\t\tthis.killSecondaryCursors();\n\t}\n\n\tpublic startTrackingSelections(): void {\n\t\tthis.primaryCursor.startTrackingSelection(this.context);\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tthis.secondaryCursors[i].startTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic stopTrackingSelections(): void {\n\t\tthis.primaryCursor.stopTrackingSelection(this.context);\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tthis.secondaryCursors[i].stopTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic updateContext(context: CursorContext): void {\n\t\tthis.context = context;\n\t}\n\n\tpublic ensureValidState(): void {\n\t\tthis.primaryCursor.ensureValidState(this.context);\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tthis.secondaryCursors[i].ensureValidState(this.context);\n\t\t}\n\t}\n\n\tpublic readSelectionFromMarkers(): Selection[] {\n\t\tlet result: Selection[] = [];\n\t\tresult[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getAll(): CursorState[] {\n\t\tlet result: CursorState[] = [];\n\t\tresult[0] = this.primaryCursor.asCursorState();\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i].asCursorState();\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewPositions(): Position[] {\n\t\tlet result: Position[] = [];\n\t\tresult[0] = this.primaryCursor.viewState.position;\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i].viewState.position;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\tlet result: Selection[] = [];\n\t\tresult[0] = this.primaryCursor.modelState.selection;\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i].modelState.selection;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewSelections(): Selection[] {\n\t\tlet result: Selection[] = [];\n\t\tresult[0] = this.primaryCursor.viewState.selection;\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i].viewState.selection;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic setSelections(selections: ISelection[]): void {\n\t\tthis.setStates(CursorState.fromModelSelections(selections));\n\t}\n\n\tpublic getPrimaryCursor(): CursorState {\n\t\treturn this.primaryCursor.asCursorState();\n\t}\n\n\tpublic setStates(states: PartialCursorState[] | null): void {\n\t\tif (states === null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n\t\tthis._setSecondaryStates(states.slice(1));\n\t}\n\n\t/**\n\t * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n\t */\n\tprivate _setSecondaryStates(secondaryStates: PartialCursorState[]): void {\n\t\tconst secondaryCursorsLength = this.secondaryCursors.length;\n\t\tconst secondaryStatesLength = secondaryStates.length;\n\n\t\tif (secondaryCursorsLength < secondaryStatesLength) {\n\t\t\tlet createCnt = secondaryStatesLength - secondaryCursorsLength;\n\t\t\tfor (let i = 0; i < createCnt; i++) {\n\t\t\t\tthis._addSecondaryCursor();\n\t\t\t}\n\t\t} else if (secondaryCursorsLength > secondaryStatesLength) {\n\t\t\tlet removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\t\t\tfor (let i = 0; i < removeCnt; i++) {\n\t\t\t\tthis._removeSecondaryCursor(this.secondaryCursors.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < secondaryStatesLength; i++) {\n\t\t\tthis.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n\t\t}\n\t}\n\n\tpublic killSecondaryCursors(): void {\n\t\tthis._setSecondaryStates([]);\n\t}\n\n\tprivate _addSecondaryCursor(): void {\n\t\tthis.secondaryCursors.push(new OneCursor(this.context));\n\t\tthis.lastAddedCursorIndex = this.secondaryCursors.length;\n\t}\n\n\tpublic getLastAddedCursorIndex(): number {\n\t\tif (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.lastAddedCursorIndex;\n\t}\n\n\tprivate _removeSecondaryCursor(removeIndex: number): void {\n\t\tif (this.lastAddedCursorIndex >= removeIndex + 1) {\n\t\t\tthis.lastAddedCursorIndex--;\n\t\t}\n\t\tthis.secondaryCursors[removeIndex].dispose(this.context);\n\t\tthis.secondaryCursors.splice(removeIndex, 1);\n\t}\n\n\tprivate _getAll(): OneCursor[] {\n\t\tlet result: OneCursor[] = [];\n\t\tresult[0] = this.primaryCursor;\n\t\tfor (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n\t\t\tresult[i + 1] = this.secondaryCursors[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic normalize(): void {\n\t\tif (this.secondaryCursors.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet cursors = this._getAll();\n\n\t\tinterface SortedCursor {\n\t\t\tindex: number;\n\t\t\tselection: Selection;\n\t\t}\n\t\tlet sortedCursors: SortedCursor[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tsortedCursors.push({\n\t\t\t\tindex: i,\n\t\t\t\tselection: cursors[i].modelState.selection,\n\t\t\t});\n\t\t}\n\t\tsortedCursors.sort((a, b) => {\n\t\t\tif (a.selection.startLineNumber === b.selection.startLineNumber) {\n\t\t\t\treturn a.selection.startColumn - b.selection.startColumn;\n\t\t\t}\n\t\t\treturn a.selection.startLineNumber - b.selection.startLineNumber;\n\t\t});\n\n\t\tfor (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n\t\t\tconst current = sortedCursors[sortedCursorIndex];\n\t\t\tconst next = sortedCursors[sortedCursorIndex + 1];\n\n\t\t\tconst currentSelection = current.selection;\n\t\t\tconst nextSelection = next.selection;\n\n\t\t\tif (!this.context.config.multiCursorMergeOverlapping) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet shouldMergeCursors: boolean;\n\t\t\tif (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n\t\t\t\t// Merge touching cursors if one of them is collapsed\n\t\t\t\tshouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n\t\t\t} else {\n\t\t\t\t// Merge only overlapping cursors (i.e. allow touching ranges)\n\t\t\t\tshouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n\t\t\t}\n\n\t\t\tif (shouldMergeCursors) {\n\t\t\t\tconst winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n\t\t\t\tconst looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n\n\t\t\t\tconst looserIndex = sortedCursors[looserSortedCursorIndex].index;\n\t\t\t\tconst winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n\n\t\t\t\tconst looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n\t\t\t\tconst winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n\n\t\t\t\tif (!looserSelection.equalsSelection(winnerSelection)) {\n\t\t\t\t\tconst resultingRange = looserSelection.plusRange(winnerSelection);\n\t\t\t\t\tconst looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n\t\t\t\t\tconst winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n\n\t\t\t\t\t// Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\t\t\t\t\tlet resultingSelectionIsLTR: boolean;\n\t\t\t\t\tif (looserIndex === this.lastAddedCursorIndex) {\n\t\t\t\t\t\tresultingSelectionIsLTR = looserSelectionIsLTR;\n\t\t\t\t\t\tthis.lastAddedCursorIndex = winnerIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Winner takes it all\n\t\t\t\t\t\tresultingSelectionIsLTR = winnerSelectionIsLTR;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet resultingSelection: Selection;\n\t\t\t\t\tif (resultingSelectionIsLTR) {\n\t\t\t\t\t\tresultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n\t\t\t\t\t}\n\n\t\t\t\t\tsortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n\t\t\t\t\tconst resultingState = CursorState.fromModelSelection(resultingSelection);\n\t\t\t\t\tcursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n\t\t\t\t}\n\n\t\t\t\tfor (const sortedCursor of sortedCursors) {\n\t\t\t\t\tif (sortedCursor.index > looserIndex) {\n\t\t\t\t\t\tsortedCursor.index--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcursors.splice(looserIndex, 1);\n\t\t\t\tsortedCursors.splice(looserSortedCursorIndex, 1);\n\t\t\t\tthis._removeSecondaryCursor(looserIndex - 1);\n\n\t\t\t\tsortedCursorIndex--;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}