{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar markersModel_1 = require(\"./markersModel\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar nls_1 = require(\"vs/nls\");\nvar constants_1 = require(\"./constants\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nexports.IMarkersWorkbenchService = instantiation_1.createDecorator('markersWorkbenchService');\nvar MarkersWorkbenchService = /** @class */ (function (_super) {\n    tslib_1.__extends(MarkersWorkbenchService, _super);\n    function MarkersWorkbenchService(markerService, instantiationService) {\n        var _this = _super.call(this) || this;\n        _this.markerService = markerService;\n        _this.markersModel = _this._register(instantiationService.createInstance(markersModel_1.MarkersModel, _this.readMarkers()));\n        for (var _i = 0, _a = arrays_1.groupBy(_this.readMarkers(), markersModel_1.compareMarkersByUri); _i < _a.length; _i++) {\n            var group = _a[_i];\n            _this.markersModel.setResourceMarkers(group[0].resource, group);\n        }\n        _this._register(markerService.onMarkerChanged(function (resources) { return _this.onMarkerChanged(resources); }));\n        return _this;\n    }\n    MarkersWorkbenchService.prototype.onMarkerChanged = function (resources) {\n        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n            var resource = resources_1[_i];\n            this.markersModel.setResourceMarkers(resource, this.readMarkers(resource));\n        }\n    };\n    MarkersWorkbenchService.prototype.readMarkers = function (resource) {\n        return this.markerService.read({ resource: resource, severities: markers_1.MarkerSeverity.Error | markers_1.MarkerSeverity.Warning | markers_1.MarkerSeverity.Info });\n    };\n    MarkersWorkbenchService = tslib_1.__decorate([\n        tslib_1.__param(0, markers_1.IMarkerService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], MarkersWorkbenchService);\n    return MarkersWorkbenchService;\n}(lifecycle_1.Disposable));\nexports.MarkersWorkbenchService = MarkersWorkbenchService;\nvar ActivityUpdater = /** @class */ (function (_super) {\n    tslib_1.__extends(ActivityUpdater, _super);\n    function ActivityUpdater(activityService, markerService) {\n        var _this = _super.call(this) || this;\n        _this.activityService = activityService;\n        _this.markerService = markerService;\n        _this._register(_this.markerService.onMarkerChanged(function () { return _this.updateBadge(); }));\n        _this.updateBadge();\n        return _this;\n    }\n    ActivityUpdater.prototype.updateBadge = function () {\n        var _a = this.markerService.getStatistics(), errors = _a.errors, warnings = _a.warnings, infos = _a.infos;\n        var total = errors + warnings + infos;\n        var message = nls_1.localize('totalProblems', 'Total {0} Problems', total);\n        this.activityService.showActivity(constants_1.default.MARKERS_PANEL_ID, new activity_1.NumberBadge(total, function () { return message; }));\n    };\n    ActivityUpdater = tslib_1.__decorate([\n        tslib_1.__param(0, activity_1.IActivityService),\n        tslib_1.__param(1, markers_1.IMarkerService)\n    ], ActivityUpdater);\n    return ActivityUpdater;\n}(lifecycle_1.Disposable));\nexports.ActivityUpdater = ActivityUpdater;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { MarkersModel, compareMarkersByUri } from './markersModel';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IMarkerService, MarkerSeverity, IMarker } from 'vs/platform/markers/common/markers';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { localize } from 'vs/nls';\nimport Constants from './constants';\nimport { URI } from 'vs/base/common/uri';\nimport { groupBy } from 'vs/base/common/arrays';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\n\nexport const IMarkersWorkbenchService = createDecorator<IMarkersWorkbenchService>('markersWorkbenchService');\n\nexport interface IFilter {\n\tfilterText: string;\n\tuseFilesExclude: boolean;\n}\n\nexport interface IMarkersWorkbenchService {\n\t_serviceBrand: any;\n\treadonly markersModel: MarkersModel;\n}\n\nexport class MarkersWorkbenchService extends Disposable implements IMarkersWorkbenchService {\n\t_serviceBrand: any;\n\n\treadonly markersModel: MarkersModel;\n\n\tconstructor(\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis.markersModel = this._register(instantiationService.createInstance(MarkersModel, this.readMarkers()));\n\n\t\tfor (const group of groupBy(this.readMarkers(), compareMarkersByUri)) {\n\t\t\tthis.markersModel.setResourceMarkers(group[0].resource, group);\n\t\t}\n\n\t\tthis._register(markerService.onMarkerChanged(resources => this.onMarkerChanged(resources)));\n\t}\n\n\tprivate onMarkerChanged(resources: URI[]): void {\n\t\tfor (const resource of resources) {\n\t\t\tthis.markersModel.setResourceMarkers(resource, this.readMarkers(resource));\n\t\t}\n\t}\n\n\tprivate readMarkers(resource?: URI): IMarker[] {\n\t\treturn this.markerService.read({ resource, severities: MarkerSeverity.Error | MarkerSeverity.Warning | MarkerSeverity.Info });\n\t}\n\n}\n\nexport class ActivityUpdater extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IMarkerService private readonly markerService: IMarkerService\n\t) {\n\t\tsuper();\n\t\tthis._register(this.markerService.onMarkerChanged(() => this.updateBadge()));\n\t\tthis.updateBadge();\n\t}\n\n\tprivate updateBadge(): void {\n\t\tconst { errors, warnings, infos } = this.markerService.getStatistics();\n\t\tconst total = errors + warnings + infos;\n\t\tconst message = localize('totalProblems', 'Total {0} Problems', total);\n\t\tthis.activityService.showActivity(Constants.MARKERS_PANEL_ID, new NumberBadge(total, () => message));\n\t}\n}"]}]}