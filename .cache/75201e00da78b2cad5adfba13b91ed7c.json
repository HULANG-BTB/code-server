{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar WordSelectionRangeProvider = /** @class */ (function () {\n    function WordSelectionRangeProvider() {\n    }\n    WordSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {\n        var result = [];\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n            var position = positions_1[_i];\n            var bucket = [];\n            result.push(bucket);\n            this._addInWordRanges(bucket, model, position);\n            this._addWordRanges(bucket, model, position);\n            this._addWhitespaceLine(bucket, model, position);\n            bucket.push({ range: model.getFullModelRange(), kind: 'statement.all' });\n        }\n        return result;\n    };\n    WordSelectionRangeProvider.prototype._addInWordRanges = function (bucket, model, pos) {\n        var obj = model.getWordAtPosition(pos);\n        if (!obj) {\n            return;\n        }\n        var word = obj.word, startColumn = obj.startColumn;\n        var offset = pos.column - startColumn;\n        var start = offset;\n        var end = offset;\n        var lastCh = 0;\n        // LEFT anchor (start)\n        for (; start >= 0; start--) {\n            var ch = word.charCodeAt(start);\n            if (ch === charCode_1.CharCode.Underline || ch === charCode_1.CharCode.Dash) {\n                // foo-bar OR foo_bar\n                break;\n            }\n            else if (strings_1.isLowerAsciiLetter(ch) && strings_1.isUpperAsciiLetter(lastCh)) {\n                // fooBar\n                break;\n            }\n            lastCh = ch;\n        }\n        start += 1;\n        // RIGHT anchor (end)\n        for (; end < word.length; end++) {\n            var ch = word.charCodeAt(end);\n            if (strings_1.isUpperAsciiLetter(ch) && strings_1.isLowerAsciiLetter(lastCh)) {\n                // fooBar\n                break;\n            }\n            else if (ch === charCode_1.CharCode.Underline || ch === charCode_1.CharCode.Dash) {\n                // foo-bar OR foo_bar\n                break;\n            }\n            lastCh = ch;\n        }\n        if (start < end) {\n            bucket.push({ range: new range_1.Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end), kind: 'statement.word.part' });\n        }\n    };\n    WordSelectionRangeProvider.prototype._addWordRanges = function (bucket, model, pos) {\n        var word = model.getWordAtPosition(pos);\n        if (word) {\n            bucket.push({ range: new range_1.Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn), kind: 'statement.word' });\n        }\n    };\n    WordSelectionRangeProvider.prototype._addWhitespaceLine = function (bucket, model, pos) {\n        if (model.getLineLength(pos.lineNumber) > 0\n            && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0\n            && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) {\n            bucket.push({ range: new range_1.Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber)), kind: 'statement.line' });\n        }\n    };\n    return WordSelectionRangeProvider;\n}());\nexports.WordSelectionRangeProvider = WordSelectionRangeProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/wordSelections.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SelectionRangeProvider, SelectionRange } from 'vs/editor/common/modes';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { isUpperAsciiLetter, isLowerAsciiLetter } from 'vs/base/common/strings';\n\nexport class WordSelectionRangeProvider implements SelectionRangeProvider {\n\n\tprovideSelectionRanges(model: ITextModel, positions: Position[]): SelectionRange[][] {\n\t\tconst result: SelectionRange[][] = [];\n\t\tfor (const position of positions) {\n\t\t\tconst bucket: SelectionRange[] = [];\n\t\t\tresult.push(bucket);\n\t\t\tthis._addInWordRanges(bucket, model, position);\n\t\t\tthis._addWordRanges(bucket, model, position);\n\t\t\tthis._addWhitespaceLine(bucket, model, position);\n\t\t\tbucket.push({ range: model.getFullModelRange(), kind: 'statement.all' });\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _addInWordRanges(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tconst obj = model.getWordAtPosition(pos);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet { word, startColumn } = obj;\n\t\tlet offset = pos.column - startColumn;\n\t\tlet start = offset;\n\t\tlet end = offset;\n\t\tlet lastCh: number = 0;\n\n\t\t// LEFT anchor (start)\n\t\tfor (; start >= 0; start--) {\n\t\t\tlet ch = word.charCodeAt(start);\n\t\t\tif (ch === CharCode.Underline || ch === CharCode.Dash) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t} else if (isLowerAsciiLetter(ch) && isUpperAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\t\tstart += 1;\n\n\t\t// RIGHT anchor (end)\n\t\tfor (; end < word.length; end++) {\n\t\t\tlet ch = word.charCodeAt(end);\n\t\t\tif (isUpperAsciiLetter(ch) && isLowerAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t} else if (ch === CharCode.Underline || ch === CharCode.Dash) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\n\t\tif (start < end) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end), kind: 'statement.word.part' });\n\t\t}\n\t}\n\n\tprivate _addWordRanges(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (word) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn), kind: 'statement.word' });\n\t\t}\n\t}\n\n\tprivate _addWhitespaceLine(bucket: SelectionRange[], model: ITextModel, pos: Position): void {\n\t\tif (model.getLineLength(pos.lineNumber) > 0\n\t\t\t&& model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0\n\t\t\t&& model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0\n\t\t) {\n\t\t\tbucket.push({ range: new Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber)), kind: 'statement.line' });\n\t\t}\n\t}\n}\n"]}]}