{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar mime = require(\"vs/base/common/mime\");\nvar strings = require(\"vs/base/common/strings\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar nullMode_1 = require(\"vs/editor/common/modes/nullMode\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar types_1 = require(\"vs/base/common/types\");\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar LanguagesRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(LanguagesRegistry, _super);\n    function LanguagesRegistry(useModesRegistry, warnOnOverwrite) {\n        if (useModesRegistry === void 0) { useModesRegistry = true; }\n        if (warnOnOverwrite === void 0) { warnOnOverwrite = false; }\n        var _this = _super.call(this) || this;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this._warnOnOverwrite = warnOnOverwrite;\n        _this._nextLanguageId2 = 1;\n        _this._languageIdToLanguage = [];\n        _this._languageToLanguageId = Object.create(null);\n        _this._languages = {};\n        _this._mimeTypesMap = {};\n        _this._nameMap = {};\n        _this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            _this._initializeFromRegistry();\n            _this._register(modesRegistry_1.ModesRegistry.onDidChangeLanguages(function (m) { return _this._initializeFromRegistry(); }));\n        }\n        return _this;\n    }\n    LanguagesRegistry.prototype._initializeFromRegistry = function () {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        var desc = modesRegistry_1.ModesRegistry.getLanguages();\n        this._registerLanguages(desc);\n    };\n    LanguagesRegistry.prototype._registerLanguages = function (desc) {\n        var _this = this;\n        for (var _i = 0, desc_1 = desc; _i < desc_1.length; _i++) {\n            var d = desc_1[_i];\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach(function (langId) {\n            var language = _this._languages[langId];\n            if (language.name) {\n                _this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach(function (alias) {\n                _this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach(function (mimetype) {\n                _this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerOverrideIdentifiers(modesRegistry_1.ModesRegistry.getLanguages().map(function (language) { return language.id; }));\n        this._onDidChange.fire();\n    };\n    LanguagesRegistry.prototype._getLanguageId = function (language) {\n        if (this._languageToLanguageId[language]) {\n            return this._languageToLanguageId[language];\n        }\n        var languageId = this._nextLanguageId2++;\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId[language] = languageId;\n        return languageId;\n    };\n    LanguagesRegistry.prototype._registerLanguage = function (lang) {\n        var langId = lang.id;\n        var resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            var languageId = this._getLanguageId(langId);\n            resolvedLanguage = {\n                identifier: new modes_1.LanguageIdentifier(langId, languageId),\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    };\n    LanguagesRegistry.prototype._mergeLanguage = function (resolvedLanguage, lang) {\n        var _a;\n        var langId = lang.id;\n        var primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            (_a = resolvedLanguage.mimetypes).push.apply(_a, lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = \"text/x-\" + langId;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            for (var _i = 0, _b = lang.extensions; _i < _b.length; _i++) {\n                var extension = _b[_i];\n                mime.registerTextMime({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n                resolvedLanguage.extensions.push(extension);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (var _c = 0, _d = lang.filenames; _c < _d.length; _c++) {\n                var filename = _d[_c];\n                mime.registerTextMime({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (var _e = 0, _f = lang.filenamePatterns; _e < _f.length; _e++) {\n                var filenamePattern = _f[_e];\n                mime.registerTextMime({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            var firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                var firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    mime.registerTextMime({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                errors_1.onUnexpectedError(err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        var langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (var _g = 0, langAliases_1 = langAliases; _g < langAliases_1.length; _g++) {\n                var langAlias = langAliases_1[_g];\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        var containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            var bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n    };\n    LanguagesRegistry.prototype.isRegisteredMode = function (mimetypeOrModeId) {\n        // Is this a known mime type ?\n        if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\n            return true;\n        }\n        // Is this a known mode id ?\n        return hasOwnProperty.call(this._languages, mimetypeOrModeId);\n    };\n    LanguagesRegistry.prototype.getRegisteredModes = function () {\n        return Object.keys(this._languages);\n    };\n    LanguagesRegistry.prototype.getRegisteredLanguageNames = function () {\n        return Object.keys(this._nameMap);\n    };\n    LanguagesRegistry.prototype.getLanguageName = function (modeId) {\n        if (!hasOwnProperty.call(this._languages, modeId)) {\n            return null;\n        }\n        return this._languages[modeId].name;\n    };\n    LanguagesRegistry.prototype.getModeIdForLanguageNameLowercase = function (languageNameLower) {\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower].language;\n    };\n    LanguagesRegistry.prototype.getConfigurationFiles = function (modeId) {\n        if (!hasOwnProperty.call(this._languages, modeId)) {\n            return [];\n        }\n        return this._languages[modeId].configurationFiles || [];\n    };\n    LanguagesRegistry.prototype.getMimeForMode = function (modeId) {\n        if (!hasOwnProperty.call(this._languages, modeId)) {\n            return null;\n        }\n        var language = this._languages[modeId];\n        return types_1.withUndefinedAsNull(language.mimetypes[0]);\n    };\n    LanguagesRegistry.prototype.extractModeIds = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n        var _this = this;\n        if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\n            return [];\n        }\n        return (commaSeparatedMimetypesOrCommaSeparatedIds.\n            split(',').\n            map(function (mimeTypeOrId) { return mimeTypeOrId.trim(); }).\n            map(function (mimeTypeOrId) {\n            if (hasOwnProperty.call(_this._mimeTypesMap, mimeTypeOrId)) {\n                return _this._mimeTypesMap[mimeTypeOrId].language;\n            }\n            return mimeTypeOrId;\n        }).\n            filter(function (modeId) {\n            return hasOwnProperty.call(_this._languages, modeId);\n        }));\n    };\n    LanguagesRegistry.prototype.getLanguageIdentifier = function (_modeId) {\n        if (_modeId === nullMode_1.NULL_MODE_ID || _modeId === modes_1.LanguageId.Null) {\n            return nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n        }\n        var modeId;\n        if (typeof _modeId === 'string') {\n            modeId = _modeId;\n        }\n        else {\n            modeId = this._languageIdToLanguage[_modeId];\n            if (!modeId) {\n                return null;\n            }\n        }\n        if (!hasOwnProperty.call(this._languages, modeId)) {\n            return null;\n        }\n        return this._languages[modeId].identifier;\n    };\n    LanguagesRegistry.prototype.getModeIdsFromLanguageName = function (languageName) {\n        if (!languageName) {\n            return [];\n        }\n        if (hasOwnProperty.call(this._nameMap, languageName)) {\n            return [this._nameMap[languageName].language];\n        }\n        return [];\n    };\n    LanguagesRegistry.prototype.getModeIdsFromFilepathOrFirstLine = function (filepath, firstLine) {\n        if (!filepath && !firstLine) {\n            return [];\n        }\n        var mimeTypes = mime.guessMimeTypes(filepath, firstLine);\n        return this.extractModeIds(mimeTypes.join(','));\n    };\n    LanguagesRegistry.prototype.getExtensions = function (languageName) {\n        if (!hasOwnProperty.call(this._nameMap, languageName)) {\n            return [];\n        }\n        var languageId = this._nameMap[languageName];\n        return this._languages[languageId.language].extensions;\n    };\n    LanguagesRegistry.prototype.getFilenames = function (languageName) {\n        if (!hasOwnProperty.call(this._nameMap, languageName)) {\n            return [];\n        }\n        var languageId = this._nameMap[languageName];\n        return this._languages[languageId.language].filenames;\n    };\n    return LanguagesRegistry;\n}(lifecycle_1.Disposable));\nexports.LanguagesRegistry = LanguagesRegistry;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as mime from 'vs/base/common/mime';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { ModesRegistry } from 'vs/editor/common/modes/modesRegistry';\nimport { NULL_LANGUAGE_IDENTIFIER, NULL_MODE_ID } from 'vs/editor/common/modes/nullMode';\nimport { ILanguageExtensionPoint } from 'vs/editor/common/services/modeService';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport interface IResolvedLanguage {\n\tidentifier: LanguageIdentifier;\n\tname: string | null;\n\tmimetypes: string[];\n\taliases: string[];\n\textensions: string[];\n\tfilenames: string[];\n\tconfigurationFiles: URI[];\n}\n\nexport class LanguagesRegistry extends Disposable {\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _warnOnOverwrite: boolean;\n\n\tprivate _nextLanguageId2: number;\n\tprivate readonly _languageIdToLanguage: string[];\n\tprivate readonly _languageToLanguageId: { [id: string]: number; };\n\n\tprivate _languages: { [id: string]: IResolvedLanguage; };\n\tprivate _mimeTypesMap: { [mimeType: string]: LanguageIdentifier; };\n\tprivate _nameMap: { [name: string]: LanguageIdentifier; };\n\tprivate _lowercaseNameMap: { [name: string]: LanguageIdentifier; };\n\n\tconstructor(useModesRegistry = true, warnOnOverwrite = false) {\n\t\tsuper();\n\n\t\tthis._warnOnOverwrite = warnOnOverwrite;\n\n\t\tthis._nextLanguageId2 = 1;\n\t\tthis._languageIdToLanguage = [];\n\t\tthis._languageToLanguageId = Object.create(null);\n\n\t\tthis._languages = {};\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\n\t\tif (useModesRegistry) {\n\t\t\tthis._initializeFromRegistry();\n\t\t\tthis._register(ModesRegistry.onDidChangeLanguages((m) => this._initializeFromRegistry()));\n\t\t}\n\t}\n\n\tprivate _initializeFromRegistry(): void {\n\t\tthis._languages = {};\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\n\t\tconst desc = ModesRegistry.getLanguages();\n\t\tthis._registerLanguages(desc);\n\t}\n\n\t_registerLanguages(desc: ILanguageExtensionPoint[]): void {\n\n\t\tfor (const d of desc) {\n\t\t\tthis._registerLanguage(d);\n\t\t}\n\n\t\t// Rebuild fast path maps\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\t\tObject.keys(this._languages).forEach((langId) => {\n\t\t\tlet language = this._languages[langId];\n\t\t\tif (language.name) {\n\t\t\t\tthis._nameMap[language.name] = language.identifier;\n\t\t\t}\n\t\t\tlanguage.aliases.forEach((alias) => {\n\t\t\t\tthis._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n\t\t\t});\n\t\t\tlanguage.mimetypes.forEach((mimetype) => {\n\t\t\t\tthis._mimeTypesMap[mimetype] = language.identifier;\n\t\t\t});\n\t\t});\n\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerOverrideIdentifiers(ModesRegistry.getLanguages().map(language => language.id));\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate _getLanguageId(language: string): number {\n\t\tif (this._languageToLanguageId[language]) {\n\t\t\treturn this._languageToLanguageId[language];\n\t\t}\n\n\t\tconst languageId = this._nextLanguageId2++;\n\t\tthis._languageIdToLanguage[languageId] = language;\n\t\tthis._languageToLanguageId[language] = languageId;\n\n\t\treturn languageId;\n\t}\n\n\tprivate _registerLanguage(lang: ILanguageExtensionPoint): void {\n\t\tconst langId = lang.id;\n\n\t\tlet resolvedLanguage: IResolvedLanguage;\n\t\tif (hasOwnProperty.call(this._languages, langId)) {\n\t\t\tresolvedLanguage = this._languages[langId];\n\t\t} else {\n\t\t\tconst languageId = this._getLanguageId(langId);\n\t\t\tresolvedLanguage = {\n\t\t\t\tidentifier: new LanguageIdentifier(langId, languageId),\n\t\t\t\tname: null,\n\t\t\t\tmimetypes: [],\n\t\t\t\taliases: [],\n\t\t\t\textensions: [],\n\t\t\t\tfilenames: [],\n\t\t\t\tconfigurationFiles: []\n\t\t\t};\n\t\t\tthis._languages[langId] = resolvedLanguage;\n\t\t}\n\n\t\tthis._mergeLanguage(resolvedLanguage, lang);\n\t}\n\n\tprivate _mergeLanguage(resolvedLanguage: IResolvedLanguage, lang: ILanguageExtensionPoint): void {\n\t\tconst langId = lang.id;\n\n\t\tlet primaryMime: string | null = null;\n\n\t\tif (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n\t\t\tresolvedLanguage.mimetypes.push(...lang.mimetypes);\n\t\t\tprimaryMime = lang.mimetypes[0];\n\t\t}\n\n\t\tif (!primaryMime) {\n\t\t\tprimaryMime = `text/x-${langId}`;\n\t\t\tresolvedLanguage.mimetypes.push(primaryMime);\n\t\t}\n\n\t\tif (Array.isArray(lang.extensions)) {\n\t\t\tfor (let extension of lang.extensions) {\n\t\t\t\tmime.registerTextMime({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n\t\t\t\tresolvedLanguage.extensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenames)) {\n\t\t\tfor (let filename of lang.filenames) {\n\t\t\t\tmime.registerTextMime({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n\t\t\t\tresolvedLanguage.filenames.push(filename);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenamePatterns)) {\n\t\t\tfor (let filenamePattern of lang.filenamePatterns) {\n\t\t\t\tmime.registerTextMime({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n\t\t\tlet firstLineRegexStr = lang.firstLine;\n\t\t\tif (firstLineRegexStr.charAt(0) !== '^') {\n\t\t\t\tfirstLineRegexStr = '^' + firstLineRegexStr;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet firstLineRegex = new RegExp(firstLineRegexStr);\n\t\t\t\tif (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n\t\t\t\t\tmime.registerTextMime({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// Most likely, the regex was bad\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\tresolvedLanguage.aliases.push(langId);\n\n\t\tlet langAliases: Array<string | null> | null = null;\n\t\tif (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n\t\t\tif (lang.aliases.length === 0) {\n\t\t\t\t// signal that this language should not get a name\n\t\t\t\tlangAliases = [null];\n\t\t\t} else {\n\t\t\t\tlangAliases = lang.aliases;\n\t\t\t}\n\t\t}\n\n\t\tif (langAliases !== null) {\n\t\t\tfor (const langAlias of langAliases) {\n\t\t\t\tif (!langAlias || langAlias.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresolvedLanguage.aliases.push(langAlias);\n\t\t\t}\n\t\t}\n\n\t\tlet containsAliases = (langAliases !== null && langAliases.length > 0);\n\t\tif (containsAliases && langAliases![0] === null) {\n\t\t\t// signal that this language should not get a name\n\t\t} else {\n\t\t\tlet bestName = (containsAliases ? langAliases![0] : null) || langId;\n\t\t\tif (containsAliases || !resolvedLanguage.name) {\n\t\t\t\tresolvedLanguage.name = bestName;\n\t\t\t}\n\t\t}\n\n\t\tif (lang.configuration) {\n\t\t\tresolvedLanguage.configurationFiles.push(lang.configuration);\n\t\t}\n\t}\n\n\tpublic isRegisteredMode(mimetypeOrModeId: string): boolean {\n\t\t// Is this a known mime type ?\n\t\tif (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\n\t\t\treturn true;\n\t\t}\n\t\t// Is this a known mode id ?\n\t\treturn hasOwnProperty.call(this._languages, mimetypeOrModeId);\n\t}\n\n\tpublic getRegisteredModes(): string[] {\n\t\treturn Object.keys(this._languages);\n\t}\n\n\tpublic getRegisteredLanguageNames(): string[] {\n\t\treturn Object.keys(this._nameMap);\n\t}\n\n\tpublic getLanguageName(modeId: string): string | null {\n\t\tif (!hasOwnProperty.call(this._languages, modeId)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._languages[modeId].name;\n\t}\n\n\tpublic getModeIdForLanguageNameLowercase(languageNameLower: string): string | null {\n\t\tif (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._lowercaseNameMap[languageNameLower].language;\n\t}\n\n\tpublic getConfigurationFiles(modeId: string): URI[] {\n\t\tif (!hasOwnProperty.call(this._languages, modeId)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._languages[modeId].configurationFiles || [];\n\t}\n\n\tpublic getMimeForMode(modeId: string): string | null {\n\t\tif (!hasOwnProperty.call(this._languages, modeId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst language = this._languages[modeId];\n\t\treturn withUndefinedAsNull(language.mimetypes[0]);\n\t}\n\n\tpublic extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): string[] {\n\t\tif (!commaSeparatedMimetypesOrCommaSeparatedIds) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn (\n\t\t\tcommaSeparatedMimetypesOrCommaSeparatedIds.\n\t\t\t\tsplit(',').\n\t\t\t\tmap((mimeTypeOrId) => mimeTypeOrId.trim()).\n\t\t\t\tmap((mimeTypeOrId) => {\n\t\t\t\t\tif (hasOwnProperty.call(this._mimeTypesMap, mimeTypeOrId)) {\n\t\t\t\t\t\treturn this._mimeTypesMap[mimeTypeOrId].language;\n\t\t\t\t\t}\n\t\t\t\t\treturn mimeTypeOrId;\n\t\t\t\t}).\n\t\t\t\tfilter((modeId) => {\n\t\t\t\t\treturn hasOwnProperty.call(this._languages, modeId);\n\t\t\t\t})\n\t\t);\n\t}\n\n\tpublic getLanguageIdentifier(_modeId: string | LanguageId): LanguageIdentifier | null {\n\t\tif (_modeId === NULL_MODE_ID || _modeId === LanguageId.Null) {\n\t\t\treturn NULL_LANGUAGE_IDENTIFIER;\n\t\t}\n\n\t\tlet modeId: string;\n\t\tif (typeof _modeId === 'string') {\n\t\t\tmodeId = _modeId;\n\t\t} else {\n\t\t\tmodeId = this._languageIdToLanguage[_modeId];\n\t\t\tif (!modeId) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasOwnProperty.call(this._languages, modeId)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._languages[modeId].identifier;\n\t}\n\n\tpublic getModeIdsFromLanguageName(languageName: string): string[] {\n\t\tif (!languageName) {\n\t\t\treturn [];\n\t\t}\n\t\tif (hasOwnProperty.call(this._nameMap, languageName)) {\n\t\t\treturn [this._nameMap[languageName].language];\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic getModeIdsFromFilepathOrFirstLine(filepath: string | null, firstLine?: string): string[] {\n\t\tif (!filepath && !firstLine) {\n\t\t\treturn [];\n\t\t}\n\t\tlet mimeTypes = mime.guessMimeTypes(filepath, firstLine);\n\t\treturn this.extractModeIds(mimeTypes.join(','));\n\t}\n\n\tpublic getExtensions(languageName: string): string[] {\n\t\tif (!hasOwnProperty.call(this._nameMap, languageName)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst languageId = this._nameMap[languageName];\n\t\treturn this._languages[languageId.language].extensions;\n\t}\n\n\tpublic getFilenames(languageName: string): string[] {\n\t\tif (!hasOwnProperty.call(this._nameMap, languageName)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst languageId = this._nameMap[languageName];\n\t\treturn this._languages[languageId.language].filenames;\n\t}\n}\n"]}]}