{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/centered/centeredViewLayout.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/centered/centeredViewLayout.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar splitview_1 = require(\"vs/base/browser/ui/splitview/splitview\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar GOLDEN_RATIO = {\n    leftMarginRatio: 0.1909,\n    rightMarginRatio: 0.1909\n};\nfunction createEmptyView(background) {\n    var element = dom_1.$('.centered-layout-margin');\n    element.style.height = '100%';\n    element.style.backgroundColor = background.toString();\n    return {\n        element: element,\n        layout: function () { return undefined; },\n        minimumSize: 60,\n        maximumSize: Number.POSITIVE_INFINITY,\n        onDidChange: event_1.Event.None\n    };\n}\nfunction toSplitViewView(view, getHeight) {\n    return {\n        element: view.element,\n        get maximumSize() { return view.maximumWidth; },\n        get minimumSize() { return view.minimumWidth; },\n        onDidChange: event_1.Event.map(view.onDidChange, function (e) { return e && e.width; }),\n        layout: function (size) { return view.layout(size, getHeight(), splitview_1.Orientation.HORIZONTAL); }\n    };\n}\nvar CenteredViewLayout = /** @class */ (function () {\n    function CenteredViewLayout(container, view, state) {\n        if (state === void 0) { state = { leftMarginRatio: GOLDEN_RATIO.leftMarginRatio, rightMarginRatio: GOLDEN_RATIO.rightMarginRatio }; }\n        this.container = container;\n        this.view = view;\n        this.state = state;\n        this.width = 0;\n        this.height = 0;\n        this.didLayout = false;\n        this.splitViewDisposables = [];\n        this.container.appendChild(this.view.element);\n        // Make sure to hide the split view overflow like sashes #52892\n        this.container.style.overflow = 'hidden';\n    }\n    Object.defineProperty(CenteredViewLayout.prototype, \"minimumWidth\", {\n        get: function () { return this.splitView ? this.splitView.minimumSize : this.view.minimumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CenteredViewLayout.prototype, \"maximumWidth\", {\n        get: function () { return this.splitView ? this.splitView.maximumSize : this.view.maximumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CenteredViewLayout.prototype, \"minimumHeight\", {\n        get: function () { return this.view.minimumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CenteredViewLayout.prototype, \"maximumHeight\", {\n        get: function () { return this.view.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    CenteredViewLayout.prototype.layout = function (width, height) {\n        this.width = width;\n        this.height = height;\n        if (this.splitView) {\n            this.splitView.layout(width);\n            if (!this.didLayout) {\n                this.resizeMargins();\n            }\n        }\n        else {\n            this.view.layout(width, height, splitview_1.Orientation.HORIZONTAL);\n        }\n        this.didLayout = true;\n    };\n    CenteredViewLayout.prototype.resizeMargins = function () {\n        if (!this.splitView) {\n            return;\n        }\n        this.splitView.resizeView(0, this.state.leftMarginRatio * this.width);\n        this.splitView.resizeView(2, this.state.rightMarginRatio * this.width);\n    };\n    CenteredViewLayout.prototype.isActive = function () {\n        return !!this.splitView;\n    };\n    CenteredViewLayout.prototype.styles = function (style) {\n        this.style = style;\n        if (this.splitView && this.emptyViews) {\n            this.splitView.style(this.style);\n            this.emptyViews[0].element.style.backgroundColor = this.style.background.toString();\n            this.emptyViews[1].element.style.backgroundColor = this.style.background.toString();\n        }\n    };\n    CenteredViewLayout.prototype.activate = function (active) {\n        var _this = this;\n        if (active === this.isActive()) {\n            return;\n        }\n        if (active) {\n            this.container.removeChild(this.view.element);\n            this.splitView = new splitview_1.SplitView(this.container, {\n                inverseAltBehavior: true,\n                orientation: splitview_1.Orientation.HORIZONTAL,\n                styles: this.style\n            });\n            this.splitViewDisposables.push(this.splitView.onDidSashChange(function () {\n                if (_this.splitView) {\n                    _this.state.leftMarginRatio = _this.splitView.getViewSize(0) / _this.width;\n                    _this.state.rightMarginRatio = _this.splitView.getViewSize(2) / _this.width;\n                }\n            }));\n            this.splitViewDisposables.push(this.splitView.onDidSashReset(function () {\n                _this.state.leftMarginRatio = GOLDEN_RATIO.leftMarginRatio;\n                _this.state.rightMarginRatio = GOLDEN_RATIO.rightMarginRatio;\n                _this.resizeMargins();\n            }));\n            this.splitView.layout(this.width);\n            this.splitView.addView(toSplitViewView(this.view, function () { return _this.height; }), 0);\n            this.emptyViews = [createEmptyView(this.style.background), createEmptyView(this.style.background)];\n            this.splitView.addView(this.emptyViews[0], this.state.leftMarginRatio * this.width, 0);\n            this.splitView.addView(this.emptyViews[1], this.state.rightMarginRatio * this.width, 2);\n        }\n        else {\n            if (this.splitView) {\n                this.container.removeChild(this.splitView.el);\n            }\n            this.splitViewDisposables = lifecycle_1.dispose(this.splitViewDisposables);\n            if (this.splitView) {\n                this.splitView.dispose();\n            }\n            this.splitView = undefined;\n            this.emptyViews = undefined;\n            this.container.appendChild(this.view.element);\n        }\n    };\n    CenteredViewLayout.prototype.isDefault = function (state) {\n        return state.leftMarginRatio === GOLDEN_RATIO.leftMarginRatio && state.rightMarginRatio === GOLDEN_RATIO.rightMarginRatio;\n    };\n    CenteredViewLayout.prototype.dispose = function () {\n        this.splitViewDisposables = lifecycle_1.dispose(this.splitViewDisposables);\n        if (this.splitView) {\n            this.splitView.dispose();\n            this.splitView = undefined;\n        }\n    };\n    return CenteredViewLayout;\n}());\nexports.CenteredViewLayout = CenteredViewLayout;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/centered/centeredViewLayout.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/centered/centeredViewLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SplitView, Orientation, ISplitViewStyles, IView as ISplitViewView } from 'vs/base/browser/ui/splitview/splitview';\nimport { $ } from 'vs/base/browser/dom';\nimport { Event } from 'vs/base/common/event';\nimport { IView } from 'vs/base/browser/ui/grid/gridview';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { Color } from 'vs/base/common/color';\n\nexport interface CenteredViewState {\n\tleftMarginRatio: number;\n\trightMarginRatio: number;\n}\n\nconst GOLDEN_RATIO = {\n\tleftMarginRatio: 0.1909,\n\trightMarginRatio: 0.1909\n};\n\nfunction createEmptyView(background: Color): ISplitViewView {\n\tconst element = $('.centered-layout-margin');\n\telement.style.height = '100%';\n\telement.style.backgroundColor = background.toString();\n\n\treturn {\n\t\telement,\n\t\tlayout: () => undefined,\n\t\tminimumSize: 60,\n\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\tonDidChange: Event.None\n\t};\n}\n\nfunction toSplitViewView(view: IView, getHeight: () => number): ISplitViewView {\n\treturn {\n\t\telement: view.element,\n\t\tget maximumSize() { return view.maximumWidth; },\n\t\tget minimumSize() { return view.minimumWidth; },\n\t\tonDidChange: Event.map(view.onDidChange, e => e && e.width),\n\t\tlayout: size => view.layout(size, getHeight(), Orientation.HORIZONTAL)\n\t};\n}\n\nexport interface ICenteredViewStyles extends ISplitViewStyles {\n\tbackground: Color;\n}\n\nexport class CenteredViewLayout {\n\n\tprivate splitView?: SplitView;\n\tprivate width: number = 0;\n\tprivate height: number = 0;\n\tprivate style: ICenteredViewStyles;\n\tprivate didLayout = false;\n\tprivate emptyViews: ISplitViewView[] | undefined;\n\tprivate splitViewDisposables: IDisposable[] = [];\n\n\tconstructor(private container: HTMLElement, private view: IView, public readonly state: CenteredViewState = { leftMarginRatio: GOLDEN_RATIO.leftMarginRatio, rightMarginRatio: GOLDEN_RATIO.rightMarginRatio }) {\n\t\tthis.container.appendChild(this.view.element);\n\t\t// Make sure to hide the split view overflow like sashes #52892\n\t\tthis.container.style.overflow = 'hidden';\n\t}\n\n\tget minimumWidth(): number { return this.splitView ? this.splitView.minimumSize : this.view.minimumWidth; }\n\tget maximumWidth(): number { return this.splitView ? this.splitView.maximumSize : this.view.maximumWidth; }\n\tget minimumHeight(): number { return this.view.minimumHeight; }\n\tget maximumHeight(): number { return this.view.maximumHeight; }\n\n\tlayout(width: number, height: number): void {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tif (this.splitView) {\n\t\t\tthis.splitView.layout(width);\n\t\t\tif (!this.didLayout) {\n\t\t\t\tthis.resizeMargins();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.view.layout(width, height, Orientation.HORIZONTAL);\n\t\t}\n\t\tthis.didLayout = true;\n\t}\n\n\tprivate resizeMargins(): void {\n\t\tif (!this.splitView) {\n\t\t\treturn;\n\t\t}\n\t\tthis.splitView.resizeView(0, this.state.leftMarginRatio * this.width);\n\t\tthis.splitView.resizeView(2, this.state.rightMarginRatio * this.width);\n\t}\n\n\tisActive(): boolean {\n\t\treturn !!this.splitView;\n\t}\n\n\tstyles(style: ICenteredViewStyles): void {\n\t\tthis.style = style;\n\t\tif (this.splitView && this.emptyViews) {\n\t\t\tthis.splitView.style(this.style);\n\t\t\tthis.emptyViews[0].element.style.backgroundColor = this.style.background.toString();\n\t\t\tthis.emptyViews[1].element.style.backgroundColor = this.style.background.toString();\n\t\t}\n\t}\n\n\tactivate(active: boolean): void {\n\t\tif (active === this.isActive()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (active) {\n\t\t\tthis.container.removeChild(this.view.element);\n\t\t\tthis.splitView = new SplitView(this.container, {\n\t\t\t\tinverseAltBehavior: true,\n\t\t\t\torientation: Orientation.HORIZONTAL,\n\t\t\t\tstyles: this.style\n\t\t\t});\n\n\t\t\tthis.splitViewDisposables.push(this.splitView.onDidSashChange(() => {\n\t\t\t\tif (this.splitView) {\n\t\t\t\t\tthis.state.leftMarginRatio = this.splitView.getViewSize(0) / this.width;\n\t\t\t\t\tthis.state.rightMarginRatio = this.splitView.getViewSize(2) / this.width;\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis.splitViewDisposables.push(this.splitView.onDidSashReset(() => {\n\t\t\t\tthis.state.leftMarginRatio = GOLDEN_RATIO.leftMarginRatio;\n\t\t\t\tthis.state.rightMarginRatio = GOLDEN_RATIO.rightMarginRatio;\n\t\t\t\tthis.resizeMargins();\n\t\t\t}));\n\n\t\t\tthis.splitView.layout(this.width);\n\t\t\tthis.splitView.addView(toSplitViewView(this.view, () => this.height), 0);\n\t\t\tthis.emptyViews = [createEmptyView(this.style.background), createEmptyView(this.style.background)];\n\t\t\tthis.splitView.addView(this.emptyViews[0], this.state.leftMarginRatio * this.width, 0);\n\t\t\tthis.splitView.addView(this.emptyViews[1], this.state.rightMarginRatio * this.width, 2);\n\t\t} else {\n\t\t\tif (this.splitView) {\n\t\t\t\tthis.container.removeChild(this.splitView.el);\n\t\t\t}\n\t\t\tthis.splitViewDisposables = dispose(this.splitViewDisposables);\n\t\t\tif (this.splitView) {\n\t\t\t\tthis.splitView.dispose();\n\t\t\t}\n\t\t\tthis.splitView = undefined;\n\t\t\tthis.emptyViews = undefined;\n\t\t\tthis.container.appendChild(this.view.element);\n\t\t}\n\t}\n\n\tisDefault(state: CenteredViewState): boolean {\n\t\treturn state.leftMarginRatio === GOLDEN_RATIO.leftMarginRatio && state.rightMarginRatio === GOLDEN_RATIO.rightMarginRatio;\n\t}\n\n\tdispose(): void {\n\t\tthis.splitViewDisposables = dispose(this.splitViewDisposables);\n\n\t\tif (this.splitView) {\n\t\t\tthis.splitView.dispose();\n\t\t\tthis.splitView = undefined;\n\t\t}\n\t}\n}\n"]}]}