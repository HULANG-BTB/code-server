{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocumentContentProviders.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocumentContentProviders.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/uri\", \"vs/workbench/api/node/extHostTypes\", \"../common/extHost.protocol\", \"vs/base/common/network\", \"vs/base/common/cancellation\"], function (require, exports, errors_1, uri_1, extHostTypes_1, extHost_protocol_1, network_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostDocumentContentProvider {\n        constructor(mainContext, _documentsAndEditors, _logService) {\n            this._documentsAndEditors = _documentsAndEditors;\n            this._logService = _logService;\n            this._documentContentProviders = new Map();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadDocumentContentProviders);\n        }\n        dispose() {\n            // todo@joh\n        }\n        registerTextDocumentContentProvider(scheme, provider) {\n            // todo@remote\n            // check with scheme from fs-providers!\n            if (scheme === network_1.Schemas.file || scheme === network_1.Schemas.untitled) {\n                throw new Error(`scheme '${scheme}' already registered`);\n            }\n            const handle = ExtHostDocumentContentProvider._handlePool++;\n            this._documentContentProviders.set(handle, provider);\n            this._proxy.$registerTextContentProvider(handle, scheme);\n            let subscription;\n            if (typeof provider.onDidChange === 'function') {\n                subscription = provider.onDidChange(uri => {\n                    if (uri.scheme !== scheme) {\n                        this._logService.warn(`Provider for scheme '${scheme}' is firing event for schema '${uri.scheme}' which will be IGNORED`);\n                        return;\n                    }\n                    if (this._documentsAndEditors.getDocument(uri)) {\n                        this.$provideTextDocumentContent(handle, uri).then(value => {\n                            if (!value) {\n                                return;\n                            }\n                            const document = this._documentsAndEditors.getDocument(uri);\n                            if (!document) {\n                                // disposed in the meantime\n                                return;\n                            }\n                            // create lines and compare\n                            const lines = value.split(/\\r\\n|\\r|\\n/);\n                            // broadcast event when content changed\n                            if (!document.equalLines(lines)) {\n                                return this._proxy.$onVirtualDocumentChange(uri, value);\n                            }\n                        }, errors_1.onUnexpectedError);\n                    }\n                });\n            }\n            return new extHostTypes_1.Disposable(() => {\n                if (this._documentContentProviders.delete(handle)) {\n                    this._proxy.$unregisterTextContentProvider(handle);\n                }\n                if (subscription) {\n                    subscription.dispose();\n                    subscription = undefined;\n                }\n            });\n        }\n        $provideTextDocumentContent(handle, uri) {\n            const provider = this._documentContentProviders.get(handle);\n            if (!provider) {\n                return Promise.reject(new Error(`unsupported uri-scheme: ${uri.scheme}`));\n            }\n            return Promise.resolve(provider.provideTextDocumentContent(uri_1.URI.revive(uri), cancellation_1.CancellationToken.None));\n        }\n    }\n    ExtHostDocumentContentProvider._handlePool = 0;\n    exports.ExtHostDocumentContentProvider = ExtHostDocumentContentProvider;\n});\n",null]}