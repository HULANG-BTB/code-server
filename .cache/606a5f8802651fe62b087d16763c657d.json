{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/storage/common/storage\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/product/node/product\", \"vs/platform/opener/common/opener\", \"vs/platform/notification/common/notification\", \"vs/base/common/uri\", \"vs/nls\", \"vs/base/common/errors\", \"vs/platform/windows/common/windows\", \"vs/workbench/contrib/experiments/node/experimentService\", \"vs/platform/configuration/common/configuration\", \"vs/base/common/platform\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/base/common/cancellation\"], function (require, exports, storage_1, telemetry_1, product_1, opener_1, notification_1, uri_1, nls_1, errors_1, windows_1, experimentService_1, configuration_1, platform_1, extensionManagement_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TelemetryOptOut = class TelemetryOptOut {\n        constructor(storageService, openerService, notificationService, windowService, windowsService, telemetryService, experimentService, configurationService, galleryService) {\n            this.notificationService = notificationService;\n            this.telemetryService = telemetryService;\n            this.experimentService = experimentService;\n            this.configurationService = configurationService;\n            this.galleryService = galleryService;\n            if (!product_1.default.telemetryOptOutUrl || storageService.get(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, storage_1.StorageScope.GLOBAL)) {\n                return;\n            }\n            const experimentId = 'telemetryOptOut';\n            Promise.all([\n                windowService.isFocused(),\n                windowsService.getWindowCount(),\n                experimentService.getExperimentById(experimentId)\n            ]).then(([focused, count, experimentState]) => {\n                if (!focused && count > 1) {\n                    return;\n                }\n                storageService.store(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, true, storage_1.StorageScope.GLOBAL);\n                this.optOutUrl = product_1.default.telemetryOptOutUrl;\n                this.privacyUrl = product_1.default.privacyStatementUrl || product_1.default.telemetryOptOutUrl;\n                if (experimentState && experimentState.state === experimentService_1.ExperimentState.Run && telemetryService.isOptedIn) {\n                    this.runExperiment(experimentId);\n                    return;\n                }\n                const optOutNotice = nls_1.localize('telemetryOptOut.optOutNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt out]({1}).\", this.privacyUrl, this.optOutUrl);\n                const optInNotice = nls_1.localize('telemetryOptOut.optInNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt in]({1}).\", this.privacyUrl, this.optOutUrl);\n                notificationService.prompt(notification_1.Severity.Info, telemetryService.isOptedIn ? optOutNotice : optInNotice, [{\n                        label: nls_1.localize('telemetryOptOut.readMore', \"Read More\"),\n                        run: () => openerService.open(uri_1.URI.parse(this.optOutUrl))\n                    }], { sticky: true });\n            })\n                .then(undefined, errors_1.onUnexpectedError);\n        }\n        runExperiment(experimentId) {\n            const promptMessageKey = 'telemetryOptOut.optOutOption';\n            const yesLabelKey = 'telemetryOptOut.OptIn';\n            const noLabelKey = 'telemetryOptOut.OptOut';\n            let promptMessage = nls_1.localize('telemetryOptOut.optOutOption', \"Please help Microsoft improve Visual Studio Code by allowing the collection of usage data. Read our [privacy statement]({0}) for more details.\", this.privacyUrl);\n            let yesLabel = nls_1.localize('telemetryOptOut.OptIn', \"Yes, glad to help\");\n            let noLabel = nls_1.localize('telemetryOptOut.OptOut', \"No, thanks\");\n            let queryPromise = Promise.resolve(undefined);\n            if (platform_1.locale && platform_1.locale !== platform_1.language && platform_1.locale !== 'en' && platform_1.locale.indexOf('en-') === -1) {\n                queryPromise = this.galleryService.query({ text: `tag:lp-${platform_1.locale}` }, cancellation_1.CancellationToken.None).then(tagResult => {\n                    if (!tagResult || !tagResult.total) {\n                        return undefined;\n                    }\n                    const extensionToFetchTranslationsFrom = tagResult.firstPage.filter(e => e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0)[0] || tagResult.firstPage[0];\n                    if (!extensionToFetchTranslationsFrom.assets || !extensionToFetchTranslationsFrom.assets.coreTranslations) {\n                        return undefined;\n                    }\n                    return this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, platform_1.locale)\n                        .then(translation => {\n                        const translationsFromPack = translation && translation.contents ? translation.contents['vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut'] : {};\n                        if (!!translationsFromPack[promptMessageKey] && !!translationsFromPack[yesLabelKey] && !!translationsFromPack[noLabelKey]) {\n                            promptMessage = translationsFromPack[promptMessageKey].replace('{0}', this.privacyUrl) + ' (Please help Microsoft improve Visual Studio Code by allowing the collection of usage data.)';\n                            yesLabel = translationsFromPack[yesLabelKey] + ' (Yes)';\n                            noLabel = translationsFromPack[noLabelKey] + ' (No)';\n                        }\n                        return undefined;\n                    });\n                });\n            }\n            const logTelemetry = (optout) => {\n                /* __GDPR__\n                    \"experiments:optout\" : {\n                        \"optOut\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                    }\n                */\n                this.telemetryService.publicLog('experiments:optout', typeof optout === 'boolean' ? { optout } : {});\n            };\n            queryPromise.then(() => {\n                this.notificationService.prompt(notification_1.Severity.Info, promptMessage, [\n                    {\n                        label: yesLabel,\n                        run: () => {\n                            logTelemetry(false);\n                        }\n                    },\n                    {\n                        label: noLabel,\n                        run: () => {\n                            logTelemetry(true);\n                            this.configurationService.updateValue('telemetry.enableTelemetry', false);\n                            this.configurationService.updateValue('telemetry.enableCrashReporter', false);\n                        }\n                    }\n                ], {\n                    sticky: true,\n                    onCancel: logTelemetry\n                });\n                this.experimentService.markAsCompleted(experimentId);\n            });\n        }\n    };\n    TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN = 'workbench.telemetryOptOutShown';\n    TelemetryOptOut = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, opener_1.IOpenerService),\n        __param(2, notification_1.INotificationService),\n        __param(3, windows_1.IWindowService),\n        __param(4, windows_1.IWindowsService),\n        __param(5, telemetry_1.ITelemetryService),\n        __param(6, experimentService_1.IExperimentService),\n        __param(7, configuration_1.IConfigurationService),\n        __param(8, extensionManagement_1.IExtensionGalleryService)\n    ], TelemetryOptOut);\n    exports.TelemetryOptOut = TelemetryOptOut;\n});\n",null]}