{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/debugViewlet\");\nvar nls = require(\"vs/nls\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar viewsViewlet_1 = require(\"vs/workbench/browser/parts/views/viewsViewlet\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugActions_1 = require(\"vs/workbench/contrib/debug/browser/debugActions\");\nvar debugActionItems_1 = require(\"vs/workbench/contrib/debug/browser/debugActionItems\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar debugToolBar_1 = require(\"vs/workbench/contrib/debug/browser/debugToolBar\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar menuItemActionItem_1 = require(\"vs/platform/actions/browser/menuItemActionItem\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar DebugViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugViewlet, _super);\n    function DebugViewlet(layoutService, telemetryService, progressService, debugService, instantiationService, contextService, storageService, themeService, contextMenuService, extensionService, configurationService, keybindingService, contextViewService, menuService, contextKeyService, notificationService) {\n        var _this = _super.call(this, debug_1.VIEWLET_ID, debug_1.VIEWLET_ID + \".state\", false, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) || this;\n        _this.progressService = progressService;\n        _this.debugService = debugService;\n        _this.keybindingService = keybindingService;\n        _this.contextViewService = contextViewService;\n        _this.menuService = menuService;\n        _this.contextKeyService = contextKeyService;\n        _this.notificationService = notificationService;\n        _this.panelListeners = new Map();\n        _this._register(_this.debugService.onDidChangeState(function (state) { return _this.onDebugServiceStateChange(state); }));\n        _this._register(_this.debugService.onDidNewSession(function () { return _this.updateToolBar(); }));\n        _this._register(_this.contextService.onDidChangeWorkbenchState(function () { return _this.updateTitleArea(); }));\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('debug.toolBarLocation')) {\n                _this.updateTitleArea();\n            }\n        }));\n        return _this;\n    }\n    DebugViewlet.prototype.create = function (parent) {\n        _super.prototype.create.call(this, parent);\n        DOM.addClass(parent, 'debug-viewlet');\n    };\n    DebugViewlet.prototype.focus = function () {\n        _super.prototype.focus.call(this);\n        if (this.startDebugActionItem) {\n            this.startDebugActionItem.focus();\n        }\n    };\n    Object.defineProperty(DebugViewlet.prototype, \"startAction\", {\n        get: function () {\n            return this._register(this.instantiationService.createInstance(debugActions_1.StartAction, debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugViewlet.prototype, \"configureAction\", {\n        get: function () {\n            return this._register(this.instantiationService.createInstance(debugActions_1.ConfigureAction, debugActions_1.ConfigureAction.ID, debugActions_1.ConfigureAction.LABEL));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugViewlet.prototype, \"toggleReplAction\", {\n        get: function () {\n            return this._register(this.instantiationService.createInstance(ToggleReplAction, ToggleReplAction.ID, ToggleReplAction.LABEL));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugViewlet.prototype, \"selectAndStartAction\", {\n        get: function () {\n            return this._register(this.instantiationService.createInstance(debugActions_1.SelectAndStartAction, debugActions_1.SelectAndStartAction.ID, nls.localize('startAdditionalSession', \"Start Additional Session\")));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugViewlet.prototype.getActions = function () {\n        if (this.showInitialDebugActions) {\n            return [this.startAction, this.configureAction, this.toggleReplAction];\n        }\n        if (!this.debugToolBarMenu) {\n            this.debugToolBarMenu = this.menuService.createMenu(actions_1.MenuId.DebugToolBar, this.contextKeyService);\n            this.toDispose.push(this.debugToolBarMenu);\n        }\n        return debugToolBar_1.DebugToolBar.getActions(this.debugToolBarMenu, this.debugService, this.instantiationService);\n    };\n    Object.defineProperty(DebugViewlet.prototype, \"showInitialDebugActions\", {\n        get: function () {\n            var state = this.debugService.state;\n            return state === debug_1.State.Inactive || this.configurationService.getValue('debug').toolBarLocation !== 'docked';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugViewlet.prototype.getSecondaryActions = function () {\n        if (this.showInitialDebugActions) {\n            return [];\n        }\n        return [this.selectAndStartAction, this.configureAction, this.toggleReplAction];\n    };\n    DebugViewlet.prototype.getActionItem = function (action) {\n        if (action.id === debugActions_1.StartAction.ID) {\n            this.startDebugActionItem = this.instantiationService.createInstance(debugActionItems_1.StartDebugActionItem, null, action);\n            return this.startDebugActionItem;\n        }\n        if (action.id === debugActions_1.FocusSessionAction.ID) {\n            return new debugActionItems_1.FocusSessionActionItem(action, this.debugService, this.themeService, this.contextViewService);\n        }\n        if (action instanceof actions_1.MenuItemAction) {\n            return new menuItemActionItem_1.MenuItemActionItem(action, this.keybindingService, this.notificationService, this.contextMenuService);\n        }\n        return undefined;\n    };\n    DebugViewlet.prototype.focusView = function (id) {\n        var view = this.getView(id);\n        if (view) {\n            view.focus();\n        }\n    };\n    DebugViewlet.prototype.onDebugServiceStateChange = function (state) {\n        if (this.progressRunner) {\n            this.progressRunner.done();\n        }\n        if (state === debug_1.State.Initializing) {\n            this.progressRunner = this.progressService.show(true);\n        }\n        this.updateToolBar();\n    };\n    DebugViewlet.prototype.updateToolBar = function () {\n        if (this.configurationService.getValue('debug').toolBarLocation === 'docked') {\n            this.updateTitleArea();\n        }\n    };\n    DebugViewlet.prototype.addPanels = function (panels) {\n        var _this = this;\n        _super.prototype.addPanels.call(this, panels);\n        for (var _i = 0, panels_1 = panels; _i < panels_1.length; _i++) {\n            var panel = panels_1[_i].panel;\n            // attach event listener to\n            if (panel.id === debug_1.BREAKPOINTS_VIEW_ID) {\n                this.breakpointView = panel;\n                this.updateBreakpointsMaxSize();\n            }\n            else {\n                this.panelListeners.set(panel.id, panel.onDidChange(function () { return _this.updateBreakpointsMaxSize(); }));\n            }\n        }\n    };\n    DebugViewlet.prototype.removePanels = function (panels) {\n        _super.prototype.removePanels.call(this, panels);\n        for (var _i = 0, panels_2 = panels; _i < panels_2.length; _i++) {\n            var panel = panels_2[_i];\n            lifecycle_1.dispose(this.panelListeners.get(panel.id));\n            this.panelListeners.delete(panel.id);\n        }\n    };\n    DebugViewlet.prototype.updateBreakpointsMaxSize = function () {\n        var _this = this;\n        if (this.breakpointView) {\n            // We need to update the breakpoints view since all other views are collapsed #25384\n            var allOtherCollapsed = this.panels.every(function (view) { return !view.isExpanded() || view === _this.breakpointView; });\n            this.breakpointView.maximumBodySize = allOtherCollapsed ? Number.POSITIVE_INFINITY : this.breakpointView.minimumBodySize;\n        }\n    };\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], DebugViewlet.prototype, \"startAction\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], DebugViewlet.prototype, \"configureAction\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], DebugViewlet.prototype, \"toggleReplAction\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], DebugViewlet.prototype, \"selectAndStartAction\", null);\n    DebugViewlet = tslib_1.__decorate([\n        tslib_1.__param(0, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, progress_1.IProgressService),\n        tslib_1.__param(3, debug_1.IDebugService),\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, storage_1.IStorageService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, contextView_1.IContextMenuService),\n        tslib_1.__param(9, extensions_1.IExtensionService),\n        tslib_1.__param(10, configuration_1.IConfigurationService),\n        tslib_1.__param(11, keybinding_1.IKeybindingService),\n        tslib_1.__param(12, contextView_1.IContextViewService),\n        tslib_1.__param(13, actions_1.IMenuService),\n        tslib_1.__param(14, contextkey_1.IContextKeyService),\n        tslib_1.__param(15, notification_1.INotificationService)\n    ], DebugViewlet);\n    return DebugViewlet;\n}(viewsViewlet_1.ViewContainerViewlet));\nexports.DebugViewlet = DebugViewlet;\nvar ToggleReplAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleReplAction, _super);\n    function ToggleReplAction(id, label, layoutService, panelService) {\n        return _super.call(this, id, label, debug_1.REPL_ID, panelService, layoutService, 'debug-action toggle-repl') || this;\n    }\n    ToggleReplAction.ID = 'debug.toggleRepl';\n    ToggleReplAction.LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugConsoleAction' }, 'Debug Console');\n    ToggleReplAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, panelService_1.IPanelService)\n    ], ToggleReplAction);\n    return ToggleReplAction;\n}(panel_1.TogglePanelAction));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugViewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/debugViewlet';\nimport * as nls from 'vs/nls';\nimport { IAction } from 'vs/base/common/actions';\nimport * as DOM from 'vs/base/browser/dom';\nimport { IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ViewContainerViewlet } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IDebugService, VIEWLET_ID, State, BREAKPOINTS_VIEW_ID, IDebugConfiguration, REPL_ID } from 'vs/workbench/contrib/debug/common/debug';\nimport { StartAction, ConfigureAction, SelectAndStartAction, FocusSessionAction } from 'vs/workbench/contrib/debug/browser/debugActions';\nimport { StartDebugActionItem, FocusSessionActionItem } from 'vs/workbench/contrib/debug/browser/debugActionItems';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProgressService, IProgressRunner } from 'vs/platform/progress/common/progress';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { memoize } from 'vs/base/common/decorators';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { DebugToolBar } from 'vs/workbench/contrib/debug/browser/debugToolBar';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ViewletPanel } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { IMenu, MenuId, IMenuService, MenuItemAction } from 'vs/platform/actions/common/actions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { MenuItemActionItem } from 'vs/platform/actions/browser/menuItemActionItem';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TogglePanelAction } from 'vs/workbench/browser/panel';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\n\nexport class DebugViewlet extends ViewContainerViewlet {\n\n\tprivate startDebugActionItem: StartDebugActionItem;\n\tprivate progressRunner: IProgressRunner;\n\tprivate breakpointView: ViewletPanel;\n\tprivate panelListeners = new Map<string, IDisposable>();\n\tprivate debugToolBarMenu: IMenu;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper(VIEWLET_ID, `${VIEWLET_ID}.state`, false, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\n\t\tthis._register(this.debugService.onDidChangeState(state => this.onDebugServiceStateChange(state)));\n\t\tthis._register(this.debugService.onDidNewSession(() => this.updateToolBar()));\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateTitleArea()));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.toolBarLocation')) {\n\t\t\t\tthis.updateTitleArea();\n\t\t\t}\n\t\t}));\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tDOM.addClass(parent, 'debug-viewlet');\n\t}\n\n\tfocus(): void {\n\t\tsuper.focus();\n\n\t\tif (this.startDebugActionItem) {\n\t\t\tthis.startDebugActionItem.focus();\n\t\t}\n\t}\n\n\t@memoize\n\tprivate get startAction(): StartAction {\n\t\treturn this._register(this.instantiationService.createInstance(StartAction, StartAction.ID, StartAction.LABEL));\n\t}\n\n\t@memoize\n\tprivate get configureAction(): ConfigureAction {\n\t\treturn this._register(this.instantiationService.createInstance(ConfigureAction, ConfigureAction.ID, ConfigureAction.LABEL));\n\t}\n\n\t@memoize\n\tprivate get toggleReplAction(): ToggleReplAction {\n\t\treturn this._register(this.instantiationService.createInstance(ToggleReplAction, ToggleReplAction.ID, ToggleReplAction.LABEL));\n\t}\n\n\t@memoize\n\tprivate get selectAndStartAction(): SelectAndStartAction {\n\t\treturn this._register(this.instantiationService.createInstance(SelectAndStartAction, SelectAndStartAction.ID, nls.localize('startAdditionalSession', \"Start Additional Session\")));\n\t}\n\n\tgetActions(): IAction[] {\n\t\tif (this.showInitialDebugActions) {\n\t\t\treturn [this.startAction, this.configureAction, this.toggleReplAction];\n\t\t}\n\n\t\tif (!this.debugToolBarMenu) {\n\t\t\tthis.debugToolBarMenu = this.menuService.createMenu(MenuId.DebugToolBar, this.contextKeyService);\n\t\t\tthis.toDispose.push(this.debugToolBarMenu);\n\t\t}\n\t\treturn DebugToolBar.getActions(this.debugToolBarMenu, this.debugService, this.instantiationService);\n\t}\n\n\tget showInitialDebugActions(): boolean {\n\t\tconst state = this.debugService.state;\n\t\treturn state === State.Inactive || this.configurationService.getValue<IDebugConfiguration>('debug').toolBarLocation !== 'docked';\n\t}\n\n\tgetSecondaryActions(): IAction[] {\n\t\tif (this.showInitialDebugActions) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [this.selectAndStartAction, this.configureAction, this.toggleReplAction];\n\t}\n\n\tgetActionItem(action: IAction): IActionItem | undefined {\n\t\tif (action.id === StartAction.ID) {\n\t\t\tthis.startDebugActionItem = this.instantiationService.createInstance(StartDebugActionItem, null, action);\n\t\t\treturn this.startDebugActionItem;\n\t\t}\n\t\tif (action.id === FocusSessionAction.ID) {\n\t\t\treturn new FocusSessionActionItem(action, this.debugService, this.themeService, this.contextViewService);\n\t\t}\n\t\tif (action instanceof MenuItemAction) {\n\t\t\treturn new MenuItemActionItem(action, this.keybindingService, this.notificationService, this.contextMenuService);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tfocusView(id: string): void {\n\t\tconst view = this.getView(id);\n\t\tif (view) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\tprivate onDebugServiceStateChange(state: State): void {\n\t\tif (this.progressRunner) {\n\t\t\tthis.progressRunner.done();\n\t\t}\n\n\t\tif (state === State.Initializing) {\n\t\t\tthis.progressRunner = this.progressService.show(true);\n\t\t}\n\n\t\tthis.updateToolBar();\n\t}\n\n\tprivate updateToolBar(): void {\n\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').toolBarLocation === 'docked') {\n\t\t\tthis.updateTitleArea();\n\t\t}\n\t}\n\n\taddPanels(panels: { panel: ViewletPanel, size: number, index?: number }[]): void {\n\t\tsuper.addPanels(panels);\n\n\t\tfor (const { panel } of panels) {\n\t\t\t// attach event listener to\n\t\t\tif (panel.id === BREAKPOINTS_VIEW_ID) {\n\t\t\t\tthis.breakpointView = panel;\n\t\t\t\tthis.updateBreakpointsMaxSize();\n\t\t\t} else {\n\t\t\t\tthis.panelListeners.set(panel.id, panel.onDidChange(() => this.updateBreakpointsMaxSize()));\n\t\t\t}\n\t\t}\n\t}\n\n\tremovePanels(panels: ViewletPanel[]): void {\n\t\tsuper.removePanels(panels);\n\t\tfor (const panel of panels) {\n\t\t\tdispose(this.panelListeners.get(panel.id));\n\t\t\tthis.panelListeners.delete(panel.id);\n\t\t}\n\t}\n\n\tprivate updateBreakpointsMaxSize(): void {\n\t\tif (this.breakpointView) {\n\t\t\t// We need to update the breakpoints view since all other views are collapsed #25384\n\t\t\tconst allOtherCollapsed = this.panels.every(view => !view.isExpanded() || view === this.breakpointView);\n\t\t\tthis.breakpointView.maximumBodySize = allOtherCollapsed ? Number.POSITIVE_INFINITY : this.breakpointView.minimumBodySize;\n\t\t}\n\t}\n}\n\nclass ToggleReplAction extends TogglePanelAction {\n\tstatic readonly ID = 'debug.toggleRepl';\n\tstatic LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugConsoleAction' }, 'Debug Console');\n\n\tconstructor(id: string, label: string,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper(id, label, REPL_ID, panelService, layoutService, 'debug-action toggle-repl');\n\t}\n}\n"]}]}