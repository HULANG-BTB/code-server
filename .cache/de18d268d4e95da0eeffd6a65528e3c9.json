{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar types = require(\"vs/base/common/types\");\nvar strings = require(\"vs/base/common/strings\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nexports.Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nvar ConfigurationScope;\n(function (ConfigurationScope) {\n    ConfigurationScope[ConfigurationScope[\"APPLICATION\"] = 1] = \"APPLICATION\";\n    ConfigurationScope[ConfigurationScope[\"WINDOW\"] = 2] = \"WINDOW\";\n    ConfigurationScope[ConfigurationScope[\"RESOURCE\"] = 3] = \"RESOURCE\";\n})(ConfigurationScope = exports.ConfigurationScope || (exports.ConfigurationScope = {}));\nexports.allSettings = { properties: {}, patternProperties: {} };\nexports.applicationSettings = { properties: {}, patternProperties: {} };\nexports.windowSettings = { properties: {}, patternProperties: {} };\nexports.resourceSettings = { properties: {}, patternProperties: {} };\nexports.editorConfigurationSchemaId = 'vscode://schemas/settings/editor';\nvar contributionRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\nvar ConfigurationRegistry = /** @class */ (function () {\n    function ConfigurationRegistry() {\n        this.overrideIdentifiers = [];\n        this._onDidSchemaChange = new event_1.Emitter();\n        this.onDidSchemaChange = this._onDidSchemaChange.event;\n        this._onDidUpdateConfiguration = new event_1.Emitter();\n        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n        this.defaultOverridesConfigurationNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultOverridesConfigurationNode];\n        this.editorConfigurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting' };\n        this.configurationProperties = {};\n        this.excludedConfigurationProperties = {};\n        this.computeOverridePropertyPattern();\n        contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n    }\n    ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\n        if (validate === void 0) { validate = true; }\n        this.registerConfigurations([configuration], validate);\n    };\n    ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\n        var _this = this;\n        if (validate === void 0) { validate = true; }\n        var properties = [];\n        configurations.forEach(function (configuration) {\n            properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n            _this.configurationContributors.push(configuration);\n            _this.registerJSONConfiguration(configuration);\n            _this.updateSchemaForOverrideSettingsConfiguration(configuration);\n        });\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire(properties);\n    };\n    ConfigurationRegistry.prototype.deregisterConfigurations = function (configurations) {\n        var _this = this;\n        var properties = [];\n        var deregisterConfiguration = function (configuration) {\n            if (configuration.properties) {\n                for (var key in configuration.properties) {\n                    properties.push(key);\n                    delete _this.configurationProperties[key];\n                    delete _this.editorConfigurationSchema.properties[key];\n                    // Delete from schema\n                    delete exports.allSettings.properties[key];\n                    switch (configuration.properties[key].scope) {\n                        case ConfigurationScope.APPLICATION:\n                            delete exports.applicationSettings.properties[key];\n                            break;\n                        case ConfigurationScope.WINDOW:\n                            delete exports.windowSettings.properties[key];\n                            break;\n                        case ConfigurationScope.RESOURCE:\n                            delete exports.resourceSettings.properties[key];\n                            break;\n                    }\n                }\n            }\n            if (configuration.allOf) {\n                configuration.allOf.forEach(function (node) { return deregisterConfiguration(node); });\n            }\n        };\n        for (var _i = 0, configurations_1 = configurations; _i < configurations_1.length; _i++) {\n            var configuration = configurations_1[_i];\n            deregisterConfiguration(configuration);\n            var index = this.configurationContributors.indexOf(configuration);\n            if (index !== -1) {\n                this.configurationContributors.splice(index, 1);\n            }\n        }\n        contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire(properties);\n    };\n    ConfigurationRegistry.prototype.registerDefaultConfigurations = function (defaultConfigurations) {\n        var properties = [];\n        for (var _i = 0, defaultConfigurations_1 = defaultConfigurations; _i < defaultConfigurations_1.length; _i++) {\n            var defaultConfiguration = defaultConfigurations_1[_i];\n            for (var key in defaultConfiguration.defaults) {\n                var defaultValue = defaultConfiguration.defaults[key];\n                if (exports.OVERRIDE_PROPERTY_PATTERN.test(key) && typeof defaultValue === 'object') {\n                    var propertySchema = {\n                        type: 'object',\n                        default: defaultValue,\n                        description: nls.localize('overrideSettings.description', \"Configure editor settings to be overridden for {0} language.\", key),\n                        $ref: exports.editorConfigurationSchemaId\n                    };\n                    exports.allSettings.properties[key] = propertySchema;\n                    this.defaultOverridesConfigurationNode.properties[key] = propertySchema;\n                    this.configurationProperties[key] = propertySchema;\n                    properties.push(key);\n                }\n            }\n        }\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire(properties);\n    };\n    ConfigurationRegistry.prototype.deregisterDefaultConfigurations = function (defaultConfigurations) {\n        var properties = [];\n        for (var _i = 0, defaultConfigurations_2 = defaultConfigurations; _i < defaultConfigurations_2.length; _i++) {\n            var defaultConfiguration = defaultConfigurations_2[_i];\n            for (var key in defaultConfiguration.defaults) {\n                properties.push(key);\n                delete exports.allSettings.properties[key];\n                delete this.defaultOverridesConfigurationNode.properties[key];\n                delete this.configurationProperties[key];\n            }\n        }\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire(properties);\n    };\n    ConfigurationRegistry.prototype.notifyConfigurationSchemaUpdated = function () {\n        var configurations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            configurations[_i] = arguments[_i];\n        }\n        this._onDidSchemaChange.fire();\n    };\n    ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\n        var _a;\n        (_a = this.overrideIdentifiers).push.apply(_a, overrideIdentifiers);\n        this.updateOverridePropertyPatternKey();\n    };\n    ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope, overridable) {\n        if (validate === void 0) { validate = true; }\n        if (scope === void 0) { scope = ConfigurationScope.WINDOW; }\n        if (overridable === void 0) { overridable = false; }\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        overridable = configuration.overridable || overridable;\n        var propertyKeys = [];\n        var properties = configuration.properties;\n        if (properties) {\n            for (var key in properties) {\n                var message = void 0;\n                if (validate && (message = validateProperty(key))) {\n                    console.warn(message);\n                    delete properties[key];\n                    continue;\n                }\n                // fill in default values\n                var property = properties[key];\n                var defaultValue = property.default;\n                if (types.isUndefined(defaultValue)) {\n                    property.default = getDefaultValue(property.type);\n                }\n                // Inherit overridable property from parent\n                if (overridable) {\n                    property.overridable = true;\n                }\n                if (exports.OVERRIDE_PROPERTY_PATTERN.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                }\n                propertyKeys.push(key);\n            }\n        }\n        var subNodes = configuration.allOf;\n        if (subNodes) {\n            for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\n                var node = subNodes_1[_i];\n                propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope, overridable));\n            }\n        }\n        return propertyKeys;\n    };\n    ConfigurationRegistry.prototype.getConfigurations = function () {\n        return this.configurationContributors;\n    };\n    ConfigurationRegistry.prototype.getConfigurationProperties = function () {\n        return this.configurationProperties;\n    };\n    ConfigurationRegistry.prototype.getExcludedConfigurationProperties = function () {\n        return this.excludedConfigurationProperties;\n    };\n    ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\n        function register(configuration) {\n            var properties = configuration.properties;\n            if (properties) {\n                for (var key in properties) {\n                    exports.allSettings.properties[key] = properties[key];\n                    switch (properties[key].scope) {\n                        case ConfigurationScope.APPLICATION:\n                            exports.applicationSettings.properties[key] = properties[key];\n                            break;\n                        case ConfigurationScope.WINDOW:\n                            exports.windowSettings.properties[key] = properties[key];\n                            break;\n                        case ConfigurationScope.RESOURCE:\n                            exports.resourceSettings.properties[key] = properties[key];\n                            break;\n                    }\n                }\n            }\n            var subNodes = configuration.allOf;\n            if (subNodes) {\n                subNodes.forEach(register);\n            }\n        }\n        register(configuration);\n    };\n    ConfigurationRegistry.prototype.updateSchemaForOverrideSettingsConfiguration = function (configuration) {\n        if (configuration.id !== SETTINGS_OVERRRIDE_NODE_ID) {\n            this.update(configuration);\n            contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n        }\n    };\n    ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\n        var patternProperties = exports.allSettings.patternProperties[this.overridePropertyPattern];\n        if (!patternProperties) {\n            patternProperties = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: 'Unknown Identifier. Use language identifiers',\n                $ref: exports.editorConfigurationSchemaId\n            };\n        }\n        delete exports.allSettings.patternProperties[this.overridePropertyPattern];\n        delete exports.applicationSettings.patternProperties[this.overridePropertyPattern];\n        delete exports.windowSettings.patternProperties[this.overridePropertyPattern];\n        delete exports.resourceSettings.patternProperties[this.overridePropertyPattern];\n        this.computeOverridePropertyPattern();\n        exports.allSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n        exports.applicationSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n        exports.windowSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n        exports.resourceSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n        this._onDidSchemaChange.fire();\n    };\n    ConfigurationRegistry.prototype.update = function (configuration) {\n        var _this = this;\n        var properties = configuration.properties;\n        if (properties) {\n            for (var key in properties) {\n                if (properties[key].overridable) {\n                    this.editorConfigurationSchema.properties[key] = this.getConfigurationProperties()[key];\n                }\n            }\n        }\n        var subNodes = configuration.allOf;\n        if (subNodes) {\n            subNodes.forEach(function (subNode) { return _this.update(subNode); });\n        }\n    };\n    ConfigurationRegistry.prototype.computeOverridePropertyPattern = function () {\n        this.overridePropertyPattern = this.overrideIdentifiers.length ? OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(function (identifier) { return strings.createRegExp(identifier, false).source; }).join('|')) : OVERRIDE_PROPERTY;\n    };\n    return ConfigurationRegistry;\n}());\nvar SETTINGS_OVERRRIDE_NODE_ID = 'override';\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nvar OVERRIDE_PATTERN_WITH_SUBSTITUTION = '\\\\[(${0})\\\\]$';\nexports.OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nfunction getDefaultValue(type) {\n    var t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nexports.getDefaultValue = getDefaultValue;\nvar configurationRegistry = new ConfigurationRegistry();\nplatform_1.Registry.add(exports.Extensions.Configuration, configurationRegistry);\nfunction validateProperty(property) {\n    if (exports.OVERRIDE_PROPERTY_PATTERN.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    return null;\n}\nexports.validateProperty = validateProperty;\nfunction getScopes() {\n    var scopes = {};\n    var configurationProperties = configurationRegistry.getConfigurationProperties();\n    for (var _i = 0, _a = Object.keys(configurationProperties); _i < _a.length; _i++) {\n        var key = _a[_i];\n        scopes[key] = configurationProperties[key].scope;\n    }\n    scopes['launch'] = ConfigurationScope.RESOURCE;\n    scopes['task'] = ConfigurationScope.RESOURCE;\n    return scopes;\n}\nexports.getScopes = getScopes;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as types from 'vs/base/common/types';\nimport * as strings from 'vs/base/common/strings';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Register multiple configurations to the registry.\n\t */\n\tregisterConfigurations(configurations: IConfigurationNode[], validate?: boolean): void;\n\n\t/**\n\t * Deregister multiple configurations from the registry.\n\t */\n\tderegisterConfigurations(configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Register multiple default configurations to the registry.\n\t */\n\tregisterDefaultConfigurations(defaultConfigurations: IDefaultConfigurationExtension[]): void;\n\n\t/**\n\t * Deregister multiple default configurations from the registry.\n\t */\n\tderegisterDefaultConfigurations(defaultConfigurations: IDefaultConfigurationExtension[]): void;\n\n\t/**\n\t * Signal that the schema of a configuration setting has changes. It is currently only supported to change enumeration values.\n\t * Property or default value changes are not allowed.\n\t */\n\tnotifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Event that fires whenver a configuration has been\n\t * registered.\n\t */\n\tonDidSchemaChange: Event<void>;\n\n\t/**\n\t * Event that fires whenver a configuration has been\n\t * registered.\n\t */\n\tonDidUpdateConfiguration: Event<string[]>;\n\n\t/**\n\t * Returns all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n\n\t/**\n\t * Returns all configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema };\n\n\t/**\n\t * Returns all excluded configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetExcludedConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema };\n\n\t/**\n\t * Register the identifiers for editor configurations\n\t */\n\tregisterOverrideIdentifiers(identifiers: string[]): void;\n}\n\nexport const enum ConfigurationScope {\n\tAPPLICATION = 1,\n\tWINDOW,\n\tRESOURCE,\n}\n\nexport interface IConfigurationPropertySchema extends IJSONSchema {\n\toverridable?: boolean;\n\tscope?: ConfigurationScope;\n\tincluded?: boolean;\n\ttags?: string[];\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tproperties?: { [path: string]: IConfigurationPropertySchema; };\n\tallOf?: IConfigurationNode[];\n\toverridable?: boolean;\n\tscope?: ConfigurationScope;\n\tcontributedByExtension?: boolean;\n}\n\nexport interface IDefaultConfigurationExtension {\n\tid: ExtensionIdentifier;\n\tname: string;\n\tdefaults: { [key: string]: {} };\n}\n\nexport const allSettings: { properties: {}, patternProperties: {} } = { properties: {}, patternProperties: {} };\nexport const applicationSettings: { properties: {}, patternProperties: {} } = { properties: {}, patternProperties: {} };\nexport const windowSettings: { properties: {}, patternProperties: {} } = { properties: {}, patternProperties: {} };\nexport const resourceSettings: { properties: {}, patternProperties: {} } = { properties: {}, patternProperties: {} };\n\nexport const editorConfigurationSchemaId = 'vscode://schemas/settings/editor';\nconst contributionRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\n\tprivate readonly defaultOverridesConfigurationNode: IConfigurationNode;\n\tprivate readonly configurationContributors: IConfigurationNode[];\n\tprivate readonly configurationProperties: { [qualifiedKey: string]: IJSONSchema };\n\tprivate readonly excludedConfigurationProperties: { [qualifiedKey: string]: IJSONSchema };\n\tprivate readonly editorConfigurationSchema: IJSONSchema;\n\tprivate readonly overrideIdentifiers: string[] = [];\n\tprivate overridePropertyPattern: string;\n\n\tprivate readonly _onDidSchemaChange = new Emitter<void>();\n\treadonly onDidSchemaChange: Event<void> = this._onDidSchemaChange.event;\n\n\tprivate readonly _onDidUpdateConfiguration: Emitter<string[]> = new Emitter<string[]>();\n\treadonly onDidUpdateConfiguration: Event<string[]> = this._onDidUpdateConfiguration.event;\n\n\tconstructor() {\n\t\tthis.defaultOverridesConfigurationNode = {\n\t\t\tid: 'defaultOverrides',\n\t\t\ttitle: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n\t\t\tproperties: {}\n\t\t};\n\t\tthis.configurationContributors = [this.defaultOverridesConfigurationNode];\n\t\tthis.editorConfigurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting' };\n\t\tthis.configurationProperties = {};\n\t\tthis.excludedConfigurationProperties = {};\n\t\tthis.computeOverridePropertyPattern();\n\n\t\tcontributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode, validate: boolean = true): void {\n\t\tthis.registerConfigurations([configuration], validate);\n\t}\n\n\tpublic registerConfigurations(configurations: IConfigurationNode[], validate: boolean = true): void {\n\t\tconst properties: string[] = [];\n\t\tconfigurations.forEach(configuration => {\n\t\t\tproperties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n\t\t\tthis.configurationContributors.push(configuration);\n\t\t\tthis.registerJSONConfiguration(configuration);\n\t\t\tthis.updateSchemaForOverrideSettingsConfiguration(configuration);\n\t\t});\n\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic deregisterConfigurations(configurations: IConfigurationNode[]): void {\n\t\tconst properties: string[] = [];\n\t\tconst deregisterConfiguration = (configuration: IConfigurationNode) => {\n\t\t\tif (configuration.properties) {\n\t\t\t\tfor (const key in configuration.properties) {\n\t\t\t\t\tproperties.push(key);\n\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tdelete this.editorConfigurationSchema.properties![key];\n\n\t\t\t\t\t// Delete from schema\n\t\t\t\t\tdelete allSettings.properties[key];\n\t\t\t\t\tswitch (configuration.properties[key].scope) {\n\t\t\t\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\t\t\t\tdelete applicationSettings.properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\t\t\t\tdelete windowSettings.properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\t\t\t\tdelete resourceSettings.properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (configuration.allOf) {\n\t\t\t\tconfiguration.allOf.forEach(node => deregisterConfiguration(node));\n\t\t\t}\n\t\t};\n\t\tfor (const configuration of configurations) {\n\t\t\tderegisterConfiguration(configuration);\n\t\t\tconst index = this.configurationContributors.indexOf(configuration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.configurationContributors.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\tcontributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic registerDefaultConfigurations(defaultConfigurations: IDefaultConfigurationExtension[]): void {\n\t\tconst properties: string[] = [];\n\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tfor (const key in defaultConfiguration.defaults) {\n\t\t\t\tconst defaultValue = defaultConfiguration.defaults[key];\n\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key) && typeof defaultValue === 'object') {\n\t\t\t\t\tconst propertySchema: IConfigurationPropertySchema = {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tdefault: defaultValue,\n\t\t\t\t\t\tdescription: nls.localize('overrideSettings.description', \"Configure editor settings to be overridden for {0} language.\", key),\n\t\t\t\t\t\t$ref: editorConfigurationSchemaId\n\t\t\t\t\t};\n\t\t\t\t\tallSettings.properties[key] = propertySchema;\n\t\t\t\t\tthis.defaultOverridesConfigurationNode.properties![key] = propertySchema;\n\t\t\t\t\tthis.configurationProperties[key] = propertySchema;\n\t\t\t\t\tproperties.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic deregisterDefaultConfigurations(defaultConfigurations: IDefaultConfigurationExtension[]): void {\n\t\tconst properties: string[] = [];\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tfor (const key in defaultConfiguration.defaults) {\n\t\t\t\tproperties.push(key);\n\t\t\t\tdelete allSettings.properties[key];\n\t\t\t\tdelete this.defaultOverridesConfigurationNode.properties![key];\n\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t}\n\t\t}\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire(properties);\n\t}\n\n\tpublic notifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]) {\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tpublic registerOverrideIdentifiers(overrideIdentifiers: string[]): void {\n\t\tthis.overrideIdentifiers.push(...overrideIdentifiers);\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate validateAndRegisterProperties(configuration: IConfigurationNode, validate: boolean = true, scope: ConfigurationScope = ConfigurationScope.WINDOW, overridable: boolean = false): string[] {\n\t\tscope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n\t\toverridable = configuration.overridable || overridable;\n\t\tlet propertyKeys: string[] = [];\n\t\tlet properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (let key in properties) {\n\t\t\t\tlet message;\n\t\t\t\tif (validate && (message = validateProperty(key))) {\n\t\t\t\t\tconsole.warn(message);\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// fill in default values\n\t\t\t\tlet property = properties[key];\n\t\t\t\tlet defaultValue = property.default;\n\t\t\t\tif (types.isUndefined(defaultValue)) {\n\t\t\t\t\tproperty.default = getDefaultValue(property.type);\n\t\t\t\t}\n\t\t\t\t// Inherit overridable property from parent\n\t\t\t\tif (overridable) {\n\t\t\t\t\tproperty.overridable = true;\n\t\t\t\t}\n\n\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\t\t\tproperty.scope = undefined; // No scope for overridable properties `[${identifier}]`\n\t\t\t\t} else {\n\t\t\t\t\tproperty.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n\t\t\t\t}\n\n\t\t\t\t// Add to properties maps\n\t\t\t\t// Property is included by default if 'included' is unspecified\n\t\t\t\tif (properties[key].hasOwnProperty('included') && !properties[key].included) {\n\t\t\t\t\tthis.excludedConfigurationProperties[key] = properties[key];\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationProperties[key] = properties[key];\n\t\t\t\t}\n\n\t\t\t\tpropertyKeys.push(key);\n\t\t\t}\n\t\t}\n\t\tlet subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tfor (let node of subNodes) {\n\t\t\t\tpropertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope, overridable));\n\t\t\t}\n\t\t}\n\t\treturn propertyKeys;\n\t}\n\n\tgetConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors;\n\t}\n\n\tgetConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema } {\n\t\treturn this.configurationProperties;\n\t}\n\n\tgetExcludedConfigurationProperties(): { [qualifiedKey: string]: IConfigurationPropertySchema } {\n\t\treturn this.excludedConfigurationProperties;\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tfunction register(configuration: IConfigurationNode) {\n\t\t\tlet properties = configuration.properties;\n\t\t\tif (properties) {\n\t\t\t\tfor (const key in properties) {\n\t\t\t\t\tallSettings.properties[key] = properties[key];\n\t\t\t\t\tswitch (properties[key].scope) {\n\t\t\t\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\t\t\t\tapplicationSettings.properties[key] = properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\t\t\t\twindowSettings.properties[key] = properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\t\t\t\tresourceSettings.properties[key] = properties[key];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet subNodes = configuration.allOf;\n\t\t\tif (subNodes) {\n\t\t\t\tsubNodes.forEach(register);\n\t\t\t}\n\t\t}\n\t\tregister(configuration);\n\t}\n\n\tprivate updateSchemaForOverrideSettingsConfiguration(configuration: IConfigurationNode): void {\n\t\tif (configuration.id !== SETTINGS_OVERRRIDE_NODE_ID) {\n\t\t\tthis.update(configuration);\n\t\t\tcontributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);\n\t\t}\n\t}\n\n\tprivate updateOverridePropertyPatternKey(): void {\n\t\tlet patternProperties: IJSONSchema = allSettings.patternProperties[this.overridePropertyPattern];\n\t\tif (!patternProperties) {\n\t\t\tpatternProperties = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\t\terrorMessage: 'Unknown Identifier. Use language identifiers',\n\t\t\t\t$ref: editorConfigurationSchemaId\n\t\t\t};\n\t\t}\n\n\t\tdelete allSettings.patternProperties[this.overridePropertyPattern];\n\t\tdelete applicationSettings.patternProperties[this.overridePropertyPattern];\n\t\tdelete windowSettings.patternProperties[this.overridePropertyPattern];\n\t\tdelete resourceSettings.patternProperties[this.overridePropertyPattern];\n\n\t\tthis.computeOverridePropertyPattern();\n\n\t\tallSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n\t\tapplicationSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n\t\twindowSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n\t\tresourceSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate update(configuration: IConfigurationNode): void {\n\t\tlet properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (let key in properties) {\n\t\t\t\tif (properties[key].overridable) {\n\t\t\t\t\tthis.editorConfigurationSchema.properties![key] = this.getConfigurationProperties()[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tsubNodes.forEach(subNode => this.update(subNode));\n\t\t}\n\t}\n\n\tprivate computeOverridePropertyPattern(): void {\n\t\tthis.overridePropertyPattern = this.overrideIdentifiers.length ? OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(identifier => strings.createRegExp(identifier, false).source).join('|')) : OVERRIDE_PROPERTY;\n\t}\n}\n\nconst SETTINGS_OVERRRIDE_NODE_ID = 'override';\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nconst OVERRIDE_PATTERN_WITH_SUBSTITUTION = '\\\\[(${0})\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\n\nexport function getDefaultValue(type: string | string[] | undefined): any {\n\tconst t = Array.isArray(type) ? (<string[]>type)[0] : <string>type;\n\tswitch (t) {\n\t\tcase 'boolean':\n\t\t\treturn false;\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn 0;\n\t\tcase 'string':\n\t\t\treturn '';\n\t\tcase 'array':\n\t\t\treturn [];\n\t\tcase 'object':\n\t\t\treturn {};\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\n\nexport function validateProperty(property: string): string | null {\n\tif (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n\t\treturn nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n\t}\n\tif (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n\t\treturn nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n\t}\n\treturn null;\n}\n\nexport function getScopes(): { [key: string]: ConfigurationScope } {\n\tconst scopes = {};\n\tconst configurationProperties = configurationRegistry.getConfigurationProperties();\n\tfor (const key of Object.keys(configurationProperties)) {\n\t\tscopes[key] = configurationProperties[key].scope;\n\t}\n\tscopes['launch'] = ConfigurationScope.RESOURCE;\n\tscopes['task'] = ConfigurationScope.RESOURCE;\n\treturn scopes;\n}\n"]}]}