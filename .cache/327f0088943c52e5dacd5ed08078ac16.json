{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/strings\"], function (require, exports, nls, strings) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Severity;\n    (function (Severity) {\n        Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n        Severity[Severity[\"Info\"] = 1] = \"Info\";\n        Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n        Severity[Severity[\"Error\"] = 3] = \"Error\";\n    })(Severity || (Severity = {}));\n    (function (Severity) {\n        const _error = 'error';\n        const _warning = 'warning';\n        const _warn = 'warn';\n        const _info = 'info';\n        const _displayStrings = Object.create(null);\n        _displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\n        _displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\n        _displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\n        /**\n         * Parses 'error', 'warning', 'warn', 'info' in call casings\n         * and falls back to ignore.\n         */\n        function fromValue(value) {\n            if (!value) {\n                return Severity.Ignore;\n            }\n            if (strings.equalsIgnoreCase(_error, value)) {\n                return Severity.Error;\n            }\n            if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n                return Severity.Warning;\n            }\n            if (strings.equalsIgnoreCase(_info, value)) {\n                return Severity.Info;\n            }\n            return Severity.Ignore;\n        }\n        Severity.fromValue = fromValue;\n    })(Severity || (Severity = {}));\n    exports.default = Severity;\n});\n",null]}