{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryNodeUtils.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryNodeUtils.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar product_1 = require(\"vs/platform/product/node/product\");\nfunction addGAParameters(telemetryService, environmentService, uri, origin, experiment) {\n    if (experiment === void 0) { experiment = '1'; }\n    if (environmentService.isBuilt && !environmentService.isExtensionDevelopment && !environmentService.args['disable-telemetry'] && !!product_1.default.enableTelemetry) {\n        if (uri.scheme === 'https' && uri.authority === 'code.visualstudio.com') {\n            return telemetryService.getTelemetryInfo()\n                .then(function (info) {\n                return uri.with({ query: (uri.query ? uri.query + '&' : '') + \"utm_source=VsCode&utm_medium=\" + encodeURIComponent(origin) + \"&utm_campaign=\" + encodeURIComponent(info.instanceId) + \"&utm_content=\" + encodeURIComponent(experiment) });\n            });\n        }\n    }\n    return Promise.resolve(uri);\n}\nexports.addGAParameters = addGAParameters;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryNodeUtils.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryNodeUtils.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,4DAAuD;AAIvD,SAAgB,eAAe,CAAC,gBAAmC,EAAE,kBAAuC,EAAE,GAAQ,EAAE,MAAc,EAAE,UAAgB;IAAhB,2BAAA,EAAA,gBAAgB;IACvJ,IAAI,kBAAkB,CAAC,OAAO,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,iBAAO,CAAC,eAAe,EAAE;QAC3J,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,IAAI,GAAG,CAAC,SAAS,KAAK,uBAAuB,EAAE;YACxE,OAAO,gBAAgB,CAAC,gBAAgB,EAAE;iBACxC,IAAI,CAAC,UAAA,IAAI;gBACT,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,sCAAgC,kBAAkB,CAAC,MAAM,CAAC,sBAAiB,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAgB,kBAAkB,CAAC,UAAU,CAAG,EAAE,CAAC,CAAC;YAC/N,CAAC,CAAC,CAAC;SACJ;KACD;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC;AAVD,0CAUC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { URI } from 'vs/base/common/uri';\nimport product from 'vs/platform/product/node/product';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport function addGAParameters(telemetryService: ITelemetryService, environmentService: IEnvironmentService, uri: URI, origin: string, experiment = '1'): Promise<URI> {\n\tif (environmentService.isBuilt && !environmentService.isExtensionDevelopment && !environmentService.args['disable-telemetry'] && !!product.enableTelemetry) {\n\t\tif (uri.scheme === 'https' && uri.authority === 'code.visualstudio.com') {\n\t\t\treturn telemetryService.getTelemetryInfo()\n\t\t\t\t.then(info => {\n\t\t\t\t\treturn uri.with({ query: `${uri.query ? uri.query + '&' : ''}utm_source=VsCode&utm_medium=${encodeURIComponent(origin)}&utm_campaign=${encodeURIComponent(info.instanceId)}&utm_content=${encodeURIComponent(experiment)}` });\n\t\t\t\t});\n\t\t}\n\t}\n\treturn Promise.resolve(uri);\n}\n"]}]}