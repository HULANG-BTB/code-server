{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/inactiveExtensionUrlHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/inactiveExtensionUrlHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar url_1 = require(\"vs/platform/url/common/url\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar extensions_2 = require(\"vs/platform/extensions/common/extensions\");\nvar extensions_3 = require(\"vs/platform/instantiation/common/extensions\");\nvar FIVE_MINUTES = 5 * 60 * 1000;\nvar THIRTY_SECONDS = 30 * 1000;\nvar URL_TO_HANDLE = 'extensionUrlHandler.urlToHandle';\nfunction isExtensionId(value) {\n    return /^[a-z0-9][a-z0-9\\-]*\\.[a-z0-9][a-z0-9\\-]*$/i.test(value);\n}\nexports.IExtensionUrlHandler = instantiation_1.createDecorator('inactiveExtensionUrlHandler');\n/**\n * This class handles URLs which are directed towards inactive extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nvar ExtensionUrlHandler = /** @class */ (function () {\n    function ExtensionUrlHandler(urlService, extensionService, dialogService, notificationService, extensionManagementService, extensionEnablementService, windowService, galleryService, storageService) {\n        var _this = this;\n        this.extensionService = extensionService;\n        this.dialogService = dialogService;\n        this.notificationService = notificationService;\n        this.extensionManagementService = extensionManagementService;\n        this.extensionEnablementService = extensionEnablementService;\n        this.windowService = windowService;\n        this.galleryService = galleryService;\n        this.storageService = storageService;\n        this.extensionHandlers = new Map();\n        this.uriBuffer = new Map();\n        var interval = setInterval(function () { return _this.garbageCollect(); }, THIRTY_SECONDS);\n        var urlToHandleValue = this.storageService.get(URL_TO_HANDLE, storage_1.StorageScope.WORKSPACE);\n        if (urlToHandleValue) {\n            this.storageService.remove(URL_TO_HANDLE, storage_1.StorageScope.WORKSPACE);\n            this.handleURL(uri_1.URI.revive(JSON.parse(urlToHandleValue)), true);\n        }\n        this.disposable = lifecycle_1.combinedDisposable([\n            urlService.registerHandler(this),\n            lifecycle_1.toDisposable(function () { return clearInterval(interval); })\n        ]);\n    }\n    ExtensionUrlHandler.prototype.handleURL = function (uri, confirmed) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extensionId, wasHandlerAvailable, extension, uriString, result, handler, timestamp, uris;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!isExtensionId(uri.authority)) {\n                            return [2 /*return*/, false];\n                        }\n                        extensionId = uri.authority;\n                        wasHandlerAvailable = this.extensionHandlers.has(extensions_2.ExtensionIdentifier.toKey(extensionId));\n                        return [4 /*yield*/, this.extensionService.getExtension(extensionId)];\n                    case 1:\n                        extension = _a.sent();\n                        if (!!extension) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.handleUnhandledURL(uri, { id: extensionId })];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 3:\n                        if (!!confirmed) return [3 /*break*/, 5];\n                        uriString = uri.toString();\n                        if (uriString.length > 40) {\n                            uriString = uriString.substring(0, 30) + \"...\" + uriString.substring(uriString.length - 5);\n                        }\n                        return [4 /*yield*/, this.dialogService.confirm({\n                                message: nls_1.localize('confirmUrl', \"Allow an extension to open this URL?\", extensionId),\n                                detail: (extension.displayName || extension.name) + \" (\" + extensionId + \") wants to open a URL:\\n\\n\" + uriString,\n                                primaryButton: nls_1.localize('open', \"&&Open\"),\n                                type: 'question'\n                            })];\n                    case 4:\n                        result = _a.sent();\n                        if (!result.confirmed) {\n                            return [2 /*return*/, true];\n                        }\n                        _a.label = 5;\n                    case 5:\n                        handler = this.extensionHandlers.get(extensions_2.ExtensionIdentifier.toKey(extensionId));\n                        if (!handler) return [3 /*break*/, 8];\n                        if (!!wasHandlerAvailable) return [3 /*break*/, 7];\n                        return [4 /*yield*/, handler.handleURL(uri)];\n                    case 6: \n                    // forward it directly\n                    return [2 /*return*/, _a.sent()];\n                    case 7: \n                    // let the ExtensionUrlHandler instance handle this\n                    return [2 /*return*/, false];\n                    case 8:\n                        timestamp = new Date().getTime();\n                        uris = this.uriBuffer.get(extensions_2.ExtensionIdentifier.toKey(extensionId));\n                        if (!uris) {\n                            uris = [];\n                            this.uriBuffer.set(extensions_2.ExtensionIdentifier.toKey(extensionId), uris);\n                        }\n                        uris.push({ timestamp: timestamp, uri: uri });\n                        // activate the extension\n                        return [4 /*yield*/, this.extensionService.activateByEvent(\"onUri:\" + extensions_2.ExtensionIdentifier.toKey(extensionId))];\n                    case 9:\n                        // activate the extension\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    ExtensionUrlHandler.prototype.registerExtensionHandler = function (extensionId, handler) {\n        this.extensionHandlers.set(extensions_2.ExtensionIdentifier.toKey(extensionId), handler);\n        var uris = this.uriBuffer.get(extensions_2.ExtensionIdentifier.toKey(extensionId)) || [];\n        for (var _i = 0, uris_1 = uris; _i < uris_1.length; _i++) {\n            var uri = uris_1[_i].uri;\n            handler.handleURL(uri);\n        }\n        this.uriBuffer.delete(extensions_2.ExtensionIdentifier.toKey(extensionId));\n    };\n    ExtensionUrlHandler.prototype.unregisterExtensionHandler = function (extensionId) {\n        this.extensionHandlers.delete(extensions_2.ExtensionIdentifier.toKey(extensionId));\n    };\n    ExtensionUrlHandler.prototype.handleUnhandledURL = function (uri, extensionIdentifier) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var installedExtensions, extension, enabled, result, result, galleryExtension, result, notificationHandle_1, reloadMessage, reloadActionLabel, e_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.extensionManagementService.getInstalled()];\n                    case 1:\n                        installedExtensions = _a.sent();\n                        extension = installedExtensions.filter(function (e) { return extensionManagementUtil_1.areSameExtensions(e.identifier, extensionIdentifier); })[0];\n                        if (!extension) return [3 /*break*/, 9];\n                        enabled = this.extensionEnablementService.isEnabled(extension);\n                        if (!enabled) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.dialogService.confirm({\n                                message: nls_1.localize('reloadAndHandle', \"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\", extension.manifest.displayName || extension.manifest.name),\n                                detail: (extension.manifest.displayName || extension.manifest.name) + \" (\" + extensionIdentifier.id + \") wants to open a URL:\\n\\n\" + uri.toString(),\n                                primaryButton: nls_1.localize('reloadAndOpen', \"&&Reload Window and Open\"),\n                                type: 'question'\n                            })];\n                    case 2:\n                        result = _a.sent();\n                        if (!result.confirmed) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.reloadAndHandle(uri)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 4: return [4 /*yield*/, this.dialogService.confirm({\n                            message: nls_1.localize('enableAndHandle', \"Extension '{0}' is disabled. Would you like to enable the extension and reload the window to open the URL?\", extension.manifest.displayName || extension.manifest.name),\n                            detail: (extension.manifest.displayName || extension.manifest.name) + \" (\" + extensionIdentifier.id + \") wants to open a URL:\\n\\n\" + uri.toString(),\n                            primaryButton: nls_1.localize('enableAndReload', \"&&Enable and Open\"),\n                            type: 'question'\n                        })];\n                    case 5:\n                        result = _a.sent();\n                        if (!result.confirmed) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.extensionEnablementService.setEnablement([extension], extensionManagement_1.EnablementState.Enabled)];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.reloadAndHandle(uri)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 15];\n                    case 9: return [4 /*yield*/, this.galleryService.getCompatibleExtension(extensionIdentifier)];\n                    case 10:\n                        galleryExtension = _a.sent();\n                        if (!galleryExtension) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.dialogService.confirm({\n                                message: nls_1.localize('installAndHandle', \"Extension '{0}' is not installed. Would you like to install the extension and reload the window to open this URL?\", galleryExtension.displayName || galleryExtension.name),\n                                detail: (galleryExtension.displayName || galleryExtension.name) + \" (\" + extensionIdentifier.id + \") wants to open a URL:\\n\\n\" + uri.toString(),\n                                primaryButton: nls_1.localize('install', \"&&Install\"),\n                                type: 'question'\n                            })];\n                    case 11:\n                        result = _a.sent();\n                        if (!result.confirmed) {\n                            return [2 /*return*/];\n                        }\n                        notificationHandle_1 = this.notificationService.notify({ severity: notification_1.Severity.Info, message: nls_1.localize('Installing', \"Installing Extension '{0}'...\", galleryExtension.displayName || galleryExtension.name) });\n                        notificationHandle_1.progress.infinite();\n                        notificationHandle_1.onDidClose(function () { return notificationHandle_1 = null; });\n                        _a.label = 12;\n                    case 12:\n                        _a.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, this.extensionManagementService.installFromGallery(galleryExtension)];\n                    case 13:\n                        _a.sent();\n                        reloadMessage = nls_1.localize('reload', \"Would you like to reload the window and open the URL '{0}'?\", uri.toString());\n                        reloadActionLabel = nls_1.localize('Reload', \"Reload Window and Open\");\n                        if (notificationHandle_1) {\n                            notificationHandle_1.progress.done();\n                            notificationHandle_1.updateMessage(reloadMessage);\n                            notificationHandle_1.updateActions({\n                                primary: [new actions_1.Action('reloadWindow', reloadActionLabel, undefined, true, function () { return _this.reloadAndHandle(uri); })]\n                            });\n                        }\n                        else {\n                            this.notificationService.prompt(notification_1.Severity.Info, reloadMessage, [{ label: reloadActionLabel, run: function () { return _this.reloadAndHandle(uri); } }], { sticky: true });\n                        }\n                        return [3 /*break*/, 15];\n                    case 14:\n                        e_1 = _a.sent();\n                        if (notificationHandle_1) {\n                            notificationHandle_1.progress.done();\n                            notificationHandle_1.updateSeverity(notification_1.Severity.Error);\n                            notificationHandle_1.updateMessage(e_1);\n                        }\n                        else {\n                            this.notificationService.error(e_1);\n                        }\n                        return [3 /*break*/, 15];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionUrlHandler.prototype.reloadAndHandle = function (url) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.storageService.store(URL_TO_HANDLE, JSON.stringify(url.toJSON()), storage_1.StorageScope.WORKSPACE);\n                        return [4 /*yield*/, this.windowService.reloadWindow()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // forget about all uris buffered more than 5 minutes ago\n    ExtensionUrlHandler.prototype.garbageCollect = function () {\n        var now = new Date().getTime();\n        var uriBuffer = new Map();\n        this.uriBuffer.forEach(function (uris, extensionId) {\n            uris = uris.filter(function (_a) {\n                var timestamp = _a.timestamp;\n                return now - timestamp < FIVE_MINUTES;\n            });\n            if (uris.length > 0) {\n                uriBuffer.set(extensionId, uris);\n            }\n        });\n        this.uriBuffer = uriBuffer;\n    };\n    ExtensionUrlHandler.prototype.dispose = function () {\n        this.disposable.dispose();\n        this.extensionHandlers.clear();\n        this.uriBuffer.clear();\n    };\n    ExtensionUrlHandler = tslib_1.__decorate([\n        tslib_1.__param(0, url_1.IURLService),\n        tslib_1.__param(1, extensions_1.IExtensionService),\n        tslib_1.__param(2, dialogs_1.IDialogService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(5, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(6, windows_1.IWindowService),\n        tslib_1.__param(7, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(8, storage_1.IStorageService)\n    ], ExtensionUrlHandler);\n    return ExtensionUrlHandler;\n}());\nexports.ExtensionUrlHandler = ExtensionUrlHandler;\nextensions_3.registerSingleton(exports.IExtensionUrlHandler, ExtensionUrlHandler);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/inactiveExtensionUrlHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/inactiveExtensionUrlHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { IDisposable, combinedDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { EnablementState, IExtensionEnablementService, IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationHandle, INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IURLHandler, IURLService } from 'vs/platform/url/common/url';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\nconst THIRTY_SECONDS = 30 * 1000;\nconst URL_TO_HANDLE = 'extensionUrlHandler.urlToHandle';\n\nfunction isExtensionId(value: string): boolean {\n\treturn /^[a-z0-9][a-z0-9\\-]*\\.[a-z0-9][a-z0-9\\-]*$/i.test(value);\n}\n\nexport const IExtensionUrlHandler = createDecorator<IExtensionUrlHandler>('inactiveExtensionUrlHandler');\n\nexport interface IExtensionUrlHandler {\n\treadonly _serviceBrand: any;\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IURLHandler): void;\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void;\n}\n\n/**\n * This class handles URLs which are directed towards inactive extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nexport class ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {\n\n\treadonly _serviceBrand: any;\n\n\tprivate extensionHandlers = new Map<string, IURLHandler>();\n\tprivate uriBuffer = new Map<string, { timestamp: number, uri: URI }[]>();\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionEnablementService private readonly extensionEnablementService: IExtensionEnablementService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tconst interval = setInterval(() => this.garbageCollect(), THIRTY_SECONDS);\n\t\tconst urlToHandleValue = this.storageService.get(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\tif (urlToHandleValue) {\n\t\t\tthis.storageService.remove(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\t\tthis.handleURL(URI.revive(JSON.parse(urlToHandleValue)), true);\n\t\t}\n\n\t\tthis.disposable = combinedDisposable([\n\t\t\turlService.registerHandler(this),\n\t\t\ttoDisposable(() => clearInterval(interval))\n\t\t]);\n\t}\n\n\tasync handleURL(uri: URI, confirmed?: boolean): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = uri.authority;\n\t\tconst wasHandlerAvailable = this.extensionHandlers.has(ExtensionIdentifier.toKey(extensionId));\n\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\n\t\tif (!extension) {\n\t\t\tawait this.handleUnhandledURL(uri, { id: extensionId });\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!confirmed) {\n\t\t\tlet uriString = uri.toString();\n\n\t\t\tif (uriString.length > 40) {\n\t\t\t\turiString = `${uriString.substring(0, 30)}...${uriString.substring(uriString.length - 5)}`;\n\t\t\t}\n\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('confirmUrl', \"Allow an extension to open this URL?\", extensionId),\n\t\t\t\tdetail: `${extension.displayName || extension.name} (${extensionId}) wants to open a URL:\\n\\n${uriString}`,\n\t\t\t\tprimaryButton: localize('open', \"&&Open\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst handler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (handler) {\n\t\t\tif (!wasHandlerAvailable) {\n\t\t\t\t// forward it directly\n\t\t\t\treturn await handler.handleURL(uri);\n\t\t\t}\n\n\t\t\t// let the ExtensionUrlHandler instance handle this\n\t\t\treturn false;\n\t\t}\n\n\t\t// collect URI for eventual extension activation\n\t\tconst timestamp = new Date().getTime();\n\t\tlet uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!uris) {\n\t\t\turis = [];\n\t\t\tthis.uriBuffer.set(ExtensionIdentifier.toKey(extensionId), uris);\n\t\t}\n\n\t\turis.push({ timestamp, uri });\n\n\t\t// activate the extension\n\t\tawait this.extensionService.activateByEvent(`onUri:${ExtensionIdentifier.toKey(extensionId)}`);\n\t\treturn true;\n\t}\n\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IURLHandler): void {\n\t\tthis.extensionHandlers.set(ExtensionIdentifier.toKey(extensionId), handler);\n\n\t\tconst uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId)) || [];\n\n\t\tfor (const { uri } of uris) {\n\t\t\thandler.handleURL(uri);\n\t\t}\n\n\t\tthis.uriBuffer.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void {\n\t\tthis.extensionHandlers.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tprivate async handleUnhandledURL(uri: URI, extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled();\n\t\tconst extension = installedExtensions.filter(e => areSameExtensions(e.identifier, extensionIdentifier))[0];\n\n\t\t// Extension is installed\n\t\tif (extension) {\n\t\t\tconst enabled = this.extensionEnablementService.isEnabled(extension);\n\n\t\t\t// Extension is not running. Reload the window to handle.\n\t\t\tif (enabled) {\n\t\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\t\tmessage: localize('reloadAndHandle', \"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\t\tprimaryButton: localize('reloadAndOpen', \"&&Reload Window and Open\"),\n\t\t\t\t\ttype: 'question'\n\t\t\t\t});\n\n\t\t\t\tif (!result.confirmed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.reloadAndHandle(uri);\n\t\t\t}\n\n\t\t\t// Extension is disabled. Enable the extension and reload the window to handle.\n\t\t\telse {\n\t\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\t\tmessage: localize('enableAndHandle', \"Extension '{0}' is disabled. Would you like to enable the extension and reload the window to open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\t\tprimaryButton: localize('enableAndReload', \"&&Enable and Open\"),\n\t\t\t\t\ttype: 'question'\n\t\t\t\t});\n\n\t\t\t\tif (!result.confirmed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.extensionEnablementService.setEnablement([extension], EnablementState.Enabled);\n\t\t\t\tawait this.reloadAndHandle(uri);\n\t\t\t}\n\t\t}\n\n\t\t// Extension is not installed\n\t\telse {\n\t\t\tconst galleryExtension = await this.galleryService.getCompatibleExtension(extensionIdentifier);\n\n\t\t\tif (!galleryExtension) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('installAndHandle', \"Extension '{0}' is not installed. Would you like to install the extension and reload the window to open this URL?\", galleryExtension.displayName || galleryExtension.name),\n\t\t\t\tdetail: `${galleryExtension.displayName || galleryExtension.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\tprimaryButton: localize('install', \"&&Install\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet notificationHandle: INotificationHandle | null = this.notificationService.notify({ severity: Severity.Info, message: localize('Installing', \"Installing Extension '{0}'...\", galleryExtension.displayName || galleryExtension.name) });\n\t\t\tnotificationHandle.progress.infinite();\n\t\t\tnotificationHandle.onDidClose(() => notificationHandle = null);\n\n\t\t\ttry {\n\t\t\t\tawait this.extensionManagementService.installFromGallery(galleryExtension);\n\t\t\t\tconst reloadMessage = localize('reload', \"Would you like to reload the window and open the URL '{0}'?\", uri.toString());\n\t\t\t\tconst reloadActionLabel = localize('Reload', \"Reload Window and Open\");\n\n\t\t\t\tif (notificationHandle) {\n\t\t\t\t\tnotificationHandle.progress.done();\n\t\t\t\t\tnotificationHandle.updateMessage(reloadMessage);\n\t\t\t\t\tnotificationHandle.updateActions({\n\t\t\t\t\t\tprimary: [new Action('reloadWindow', reloadActionLabel, undefined, true, () => this.reloadAndHandle(uri))]\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.notificationService.prompt(Severity.Info, reloadMessage, [{ label: reloadActionLabel, run: () => this.reloadAndHandle(uri) }], { sticky: true });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (notificationHandle) {\n\t\t\t\t\tnotificationHandle.progress.done();\n\t\t\t\t\tnotificationHandle.updateSeverity(Severity.Error);\n\t\t\t\t\tnotificationHandle.updateMessage(e);\n\t\t\t\t} else {\n\t\t\t\t\tthis.notificationService.error(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async reloadAndHandle(url: URI): Promise<void> {\n\t\tthis.storageService.store(URL_TO_HANDLE, JSON.stringify(url.toJSON()), StorageScope.WORKSPACE);\n\t\tawait this.windowService.reloadWindow();\n\t}\n\n\t// forget about all uris buffered more than 5 minutes ago\n\tprivate garbageCollect(): void {\n\t\tconst now = new Date().getTime();\n\t\tconst uriBuffer = new Map<string, { timestamp: number, uri: URI }[]>();\n\n\t\tthis.uriBuffer.forEach((uris, extensionId) => {\n\t\t\turis = uris.filter(({ timestamp }) => now - timestamp < FIVE_MINUTES);\n\n\t\t\tif (uris.length > 0) {\n\t\t\t\turiBuffer.set(extensionId, uris);\n\t\t\t}\n\t\t});\n\n\t\tthis.uriBuffer = uriBuffer;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.extensionHandlers.clear();\n\t\tthis.uriBuffer.clear();\n\t}\n}\n\nregisterSingleton(IExtensionUrlHandler, ExtensionUrlHandler);\n"]}]}