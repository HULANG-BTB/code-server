{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionQuery.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionQuery.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\"], function (require, exports, arrays_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Query {\n        constructor(value, sortBy, groupBy) {\n            this.value = value;\n            this.sortBy = sortBy;\n            this.groupBy = groupBy;\n            this.value = value.trim();\n        }\n        static suggestions(query) {\n            const commands = ['installed', 'outdated', 'enabled', 'disabled', 'builtin', 'recommended', 'sort', 'category', 'tag', 'ext'];\n            const subcommands = {\n                'sort': ['installs', 'rating', 'name'],\n                'category': ['\"programming languages\"', 'snippets', 'linters', 'themes', 'debuggers', 'formatters', 'keymaps', '\"scm providers\"', 'other', '\"extension packs\"', '\"language packs\"'],\n                'tag': [''],\n                'ext': ['']\n            };\n            let queryContains = (substr) => query.indexOf(substr) > -1;\n            let hasSort = subcommands.sort.some(subcommand => queryContains(`@sort:${subcommand}`));\n            let hasCategory = subcommands.category.some(subcommand => queryContains(`@category:${subcommand}`));\n            return arrays_1.flatten(commands.map(command => {\n                if (hasSort && command === 'sort' || hasCategory && command === 'category') {\n                    return [];\n                }\n                if (subcommands[command]) {\n                    return subcommands[command].map((subcommand) => `@${command}:${subcommand}${subcommand === '' ? '' : ' '}`);\n                }\n                else {\n                    return [`@${command} `];\n                }\n            }));\n        }\n        static parse(value) {\n            let sortBy = '';\n            value = value.replace(/@sort:(\\w+)(-\\w*)?/g, (match, by, order) => {\n                sortBy = by;\n                return '';\n            });\n            let groupBy = '';\n            value = value.replace(/@group:(\\w+)(-\\w*)?/g, (match, by, order) => {\n                groupBy = by;\n                return '';\n            });\n            return new Query(value, sortBy, groupBy);\n        }\n        toString() {\n            let result = this.value;\n            if (this.sortBy) {\n                result = `${result}${result ? ' ' : ''}@sort:${this.sortBy}`;\n            }\n            if (this.groupBy) {\n                result = `${result}${result ? ' ' : ''}@group:${this.groupBy}`;\n            }\n            return result;\n        }\n        isValid() {\n            return !/@outdated/.test(this.value);\n        }\n        equals(other) {\n            return this.value === other.value && this.sortBy === other.sortBy;\n        }\n    }\n    exports.Query = Query;\n});\n",null]}