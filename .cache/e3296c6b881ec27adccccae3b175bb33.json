{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\"], function (require, exports, errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class LazyPromise {\n        constructor() {\n            this._actual = null;\n            this._actualOk = null;\n            this._actualErr = null;\n            this._hasValue = false;\n            this._value = null;\n            this._hasErr = false;\n            this._err = null;\n        }\n        _ensureActual() {\n            if (!this._actual) {\n                this._actual = new Promise((c, e) => {\n                    this._actualOk = c;\n                    this._actualErr = e;\n                    if (this._hasValue) {\n                        this._actualOk(this._value);\n                    }\n                    if (this._hasErr) {\n                        this._actualErr(this._err);\n                    }\n                });\n            }\n            return this._actual;\n        }\n        resolveOk(value) {\n            if (this._hasValue || this._hasErr) {\n                return;\n            }\n            this._hasValue = true;\n            this._value = value;\n            if (this._actual) {\n                this._actualOk(value);\n            }\n        }\n        resolveErr(err) {\n            if (this._hasValue || this._hasErr) {\n                return;\n            }\n            this._hasErr = true;\n            this._err = err;\n            if (this._actual) {\n                this._actualErr(err);\n            }\n            else {\n                // If nobody's listening at this point, it is safe to assume they never will,\n                // since resolving this promise is always \"async\"\n                errors_1.onUnexpectedError(err);\n            }\n        }\n        then(success, error) {\n            return this._ensureActual().then(success, error);\n        }\n        catch(error) {\n            return this._ensureActual().then(undefined, error);\n        }\n        finally(callback) {\n            return this._ensureActual().finally(callback);\n        }\n    }\n    exports.LazyPromise = LazyPromise;\n});\n",null]}