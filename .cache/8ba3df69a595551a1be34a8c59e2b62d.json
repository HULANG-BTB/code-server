{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentsAndEditors.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentsAndEditors.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar bulkEditService_1 = require(\"vs/editor/browser/services/bulkEditService\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar mainThreadDocuments_1 = require(\"vs/workbench/api/browser/mainThreadDocuments\");\nvar mainThreadEditor_1 = require(\"vs/workbench/api/browser/mainThreadEditor\");\nvar mainThreadEditors_1 = require(\"vs/workbench/api/browser/mainThreadEditors\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar editor_1 = require(\"vs/workbench/api/common/shared/editor\");\nvar textEditor_1 = require(\"vs/workbench/browser/parts/editor/textEditor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar delta;\n(function (delta) {\n    function ofSets(before, after) {\n        var removed = [];\n        var added = [];\n        before.forEach(function (element) {\n            if (!after.has(element)) {\n                removed.push(element);\n            }\n        });\n        after.forEach(function (element) {\n            if (!before.has(element)) {\n                added.push(element);\n            }\n        });\n        return { removed: removed, added: added };\n    }\n    delta.ofSets = ofSets;\n    function ofMaps(before, after) {\n        var removed = [];\n        var added = [];\n        before.forEach(function (value, index) {\n            if (!after.has(index)) {\n                removed.push(value);\n            }\n        });\n        after.forEach(function (value, index) {\n            if (!before.has(index)) {\n                added.push(value);\n            }\n        });\n        return { removed: removed, added: added };\n    }\n    delta.ofMaps = ofMaps;\n})(delta || (delta = {}));\nvar TextEditorSnapshot = /** @class */ (function () {\n    function TextEditorSnapshot(editor) {\n        this.editor = editor;\n        this.id = editor.getId() + \",\" + editor.getModel().id;\n    }\n    return TextEditorSnapshot;\n}());\nvar DocumentAndEditorStateDelta = /** @class */ (function () {\n    function DocumentAndEditorStateDelta(removedDocuments, addedDocuments, removedEditors, addedEditors, oldActiveEditor, newActiveEditor) {\n        this.removedDocuments = removedDocuments;\n        this.addedDocuments = addedDocuments;\n        this.removedEditors = removedEditors;\n        this.addedEditors = addedEditors;\n        this.oldActiveEditor = oldActiveEditor;\n        this.newActiveEditor = newActiveEditor;\n        this.isEmpty = this.removedDocuments.length === 0\n            && this.addedDocuments.length === 0\n            && this.removedEditors.length === 0\n            && this.addedEditors.length === 0\n            && oldActiveEditor === newActiveEditor;\n    }\n    DocumentAndEditorStateDelta.prototype.toString = function () {\n        var ret = 'DocumentAndEditorStateDelta\\n';\n        ret += \"\\tRemoved Documents: [\" + this.removedDocuments.map(function (d) { return d.uri.toString(true); }).join(', ') + \"]\\n\";\n        ret += \"\\tAdded Documents: [\" + this.addedDocuments.map(function (d) { return d.uri.toString(true); }).join(', ') + \"]\\n\";\n        ret += \"\\tRemoved Editors: [\" + this.removedEditors.map(function (e) { return e.id; }).join(', ') + \"]\\n\";\n        ret += \"\\tAdded Editors: [\" + this.addedEditors.map(function (e) { return e.id; }).join(', ') + \"]\\n\";\n        ret += \"\\tNew Active Editor: \" + this.newActiveEditor + \"\\n\";\n        return ret;\n    };\n    return DocumentAndEditorStateDelta;\n}());\nvar DocumentAndEditorState = /** @class */ (function () {\n    function DocumentAndEditorState(documents, textEditors, activeEditor) {\n        this.documents = documents;\n        this.textEditors = textEditors;\n        this.activeEditor = activeEditor;\n        //\n    }\n    DocumentAndEditorState.compute = function (before, after) {\n        if (!before) {\n            return new DocumentAndEditorStateDelta([], map_1.values(after.documents), [], map_1.values(after.textEditors), undefined, after.activeEditor);\n        }\n        var documentDelta = delta.ofSets(before.documents, after.documents);\n        var editorDelta = delta.ofMaps(before.textEditors, after.textEditors);\n        var oldActiveEditor = before.activeEditor !== after.activeEditor ? before.activeEditor : undefined;\n        var newActiveEditor = before.activeEditor !== after.activeEditor ? after.activeEditor : undefined;\n        return new DocumentAndEditorStateDelta(documentDelta.removed, documentDelta.added, editorDelta.removed, editorDelta.added, oldActiveEditor, newActiveEditor);\n    };\n    return DocumentAndEditorState;\n}());\nvar ActiveEditorOrder;\n(function (ActiveEditorOrder) {\n    ActiveEditorOrder[ActiveEditorOrder[\"Editor\"] = 0] = \"Editor\";\n    ActiveEditorOrder[ActiveEditorOrder[\"Panel\"] = 1] = \"Panel\";\n})(ActiveEditorOrder || (ActiveEditorOrder = {}));\nvar MainThreadDocumentAndEditorStateComputer = /** @class */ (function () {\n    function MainThreadDocumentAndEditorStateComputer(_onDidChangeState, _modelService, _codeEditorService, _editorService, _panelService) {\n        var _this = this;\n        this._onDidChangeState = _onDidChangeState;\n        this._modelService = _modelService;\n        this._codeEditorService = _codeEditorService;\n        this._editorService = _editorService;\n        this._panelService = _panelService;\n        this._toDispose = [];\n        this._toDisposeOnEditorRemove = new Map();\n        this._activeEditorOrder = ActiveEditorOrder.Editor;\n        this._modelService.onModelAdded(this._updateStateOnModelAdd, this, this._toDispose);\n        this._modelService.onModelRemoved(function (_) { return _this._updateState(); }, this, this._toDispose);\n        this._editorService.onDidActiveEditorChange(function (_) { return _this._updateState(); }, this, this._toDispose);\n        this._codeEditorService.onCodeEditorAdd(this._onDidAddEditor, this, this._toDispose);\n        this._codeEditorService.onCodeEditorRemove(this._onDidRemoveEditor, this, this._toDispose);\n        this._codeEditorService.listCodeEditors().forEach(this._onDidAddEditor, this);\n        this._panelService.onDidPanelOpen(function (_) { return _this._activeEditorOrder = ActiveEditorOrder.Panel; }, undefined, this._toDispose);\n        this._panelService.onDidPanelClose(function (_) { return _this._activeEditorOrder = ActiveEditorOrder.Editor; }, undefined, this._toDispose);\n        this._editorService.onDidVisibleEditorsChange(function (_) { return _this._activeEditorOrder = ActiveEditorOrder.Editor; }, undefined, this._toDispose);\n        this._updateState();\n    }\n    MainThreadDocumentAndEditorStateComputer.prototype.dispose = function () {\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._onDidAddEditor = function (e) {\n        var _this = this;\n        this._toDisposeOnEditorRemove.set(e.getId(), lifecycle_1.combinedDisposable([\n            e.onDidChangeModel(function () { return _this._updateState(); }),\n            e.onDidFocusEditorText(function () { return _this._updateState(); }),\n            e.onDidFocusEditorWidget(function () { return _this._updateState(e); })\n        ]));\n        this._updateState();\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._onDidRemoveEditor = function (e) {\n        var sub = this._toDisposeOnEditorRemove.get(e.getId());\n        if (sub) {\n            this._toDisposeOnEditorRemove.delete(e.getId());\n            sub.dispose();\n            this._updateState();\n        }\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._updateStateOnModelAdd = function (model) {\n        if (!modelService_1.shouldSynchronizeModel(model)) {\n            // ignore\n            return;\n        }\n        if (!this._currentState) {\n            // too early\n            this._updateState();\n            return;\n        }\n        // small (fast) delta\n        this._currentState = new DocumentAndEditorState(this._currentState.documents.add(model), this._currentState.textEditors, this._currentState.activeEditor);\n        this._onDidChangeState(new DocumentAndEditorStateDelta([], [model], [], [], undefined, undefined));\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._updateState = function (widgetFocusCandidate) {\n        // models: ignore too large models\n        var models = new Set();\n        for (var _i = 0, _a = this._modelService.getModels(); _i < _a.length; _i++) {\n            var model = _a[_i];\n            if (modelService_1.shouldSynchronizeModel(model)) {\n                models.add(model);\n            }\n        }\n        // editor: only take those that have a not too large model\n        var editors = new Map();\n        var activeEditor = null; // Strict null work. This doesn't like being undefined!\n        for (var _b = 0, _c = this._codeEditorService.listCodeEditors(); _b < _c.length; _b++) {\n            var editor = _c[_b];\n            if (editor.isSimpleWidget) {\n                continue;\n            }\n            var model = editor.getModel();\n            if (editor.hasModel() && model && modelService_1.shouldSynchronizeModel(model)\n                && !model.isDisposed() // model disposed\n                && Boolean(this._modelService.getModel(model.uri)) // model disposing, the flag didn't flip yet but the model service already removed it\n            ) {\n                var apiEditor = new TextEditorSnapshot(editor);\n                editors.set(apiEditor.id, apiEditor);\n                if (editor.hasTextFocus() || (widgetFocusCandidate === editor && editor.hasWidgetFocus())) {\n                    // text focus has priority, widget focus is tricky because multiple\n                    // editors might claim widget focus at the same time. therefore we use a\n                    // candidate (which is the editor that has raised an widget focus event)\n                    // in addition to the widget focus check\n                    activeEditor = apiEditor.id;\n                }\n            }\n        }\n        // active editor: if none of the previous editors had focus we try\n        // to match output panels or the active workbench editor with\n        // one of editor we have just computed\n        if (!activeEditor) {\n            var candidate_1;\n            if (this._activeEditorOrder === ActiveEditorOrder.Editor) {\n                candidate_1 = this._getActiveEditorFromEditorPart() || this._getActiveEditorFromPanel();\n            }\n            else {\n                candidate_1 = this._getActiveEditorFromPanel() || this._getActiveEditorFromEditorPart();\n            }\n            if (candidate_1) {\n                editors.forEach(function (snapshot) {\n                    if (candidate_1 === snapshot.editor) {\n                        activeEditor = snapshot.id;\n                    }\n                });\n            }\n        }\n        // compute new state and compare against old\n        var newState = new DocumentAndEditorState(models, editors, activeEditor);\n        var delta = DocumentAndEditorState.compute(this._currentState, newState);\n        if (!delta.isEmpty) {\n            this._currentState = newState;\n            this._onDidChangeState(delta);\n        }\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._getActiveEditorFromPanel = function () {\n        var panel = this._panelService.getActivePanel();\n        if (panel instanceof textEditor_1.BaseTextEditor && editorBrowser_1.isCodeEditor(panel.getControl())) {\n            return panel.getControl();\n        }\n        else {\n            return undefined;\n        }\n    };\n    MainThreadDocumentAndEditorStateComputer.prototype._getActiveEditorFromEditorPart = function () {\n        var result = this._editorService.activeTextEditorWidget;\n        if (editorBrowser_1.isDiffEditor(result)) {\n            result = result.getModifiedEditor();\n        }\n        return result;\n    };\n    MainThreadDocumentAndEditorStateComputer = tslib_1.__decorate([\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, panelService_1.IPanelService)\n    ], MainThreadDocumentAndEditorStateComputer);\n    return MainThreadDocumentAndEditorStateComputer;\n}());\nvar MainThreadDocumentsAndEditors = /** @class */ (function () {\n    function MainThreadDocumentsAndEditors(extHostContext, _modelService, _textFileService, _editorService, codeEditorService, modeService, fileService, textModelResolverService, untitledEditorService, _editorGroupService, bulkEditService, panelService) {\n        var _this = this;\n        this._modelService = _modelService;\n        this._textFileService = _textFileService;\n        this._editorService = _editorService;\n        this._editorGroupService = _editorGroupService;\n        this._textEditors = Object.create(null);\n        this._onTextEditorAdd = new event_1.Emitter();\n        this._onTextEditorRemove = new event_1.Emitter();\n        this._onDocumentAdd = new event_1.Emitter();\n        this._onDocumentRemove = new event_1.Emitter();\n        this.onTextEditorAdd = this._onTextEditorAdd.event;\n        this.onTextEditorRemove = this._onTextEditorRemove.event;\n        this.onDocumentAdd = this._onDocumentAdd.event;\n        this.onDocumentRemove = this._onDocumentRemove.event;\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostDocumentsAndEditors);\n        var mainThreadDocuments = new mainThreadDocuments_1.MainThreadDocuments(this, extHostContext, this._modelService, modeService, this._textFileService, fileService, textModelResolverService, untitledEditorService);\n        extHostContext.set(extHost_protocol_1.MainContext.MainThreadDocuments, mainThreadDocuments);\n        var mainThreadTextEditors = new mainThreadEditors_1.MainThreadTextEditors(this, extHostContext, codeEditorService, bulkEditService, this._editorService, this._editorGroupService);\n        extHostContext.set(extHost_protocol_1.MainContext.MainThreadTextEditors, mainThreadTextEditors);\n        // It is expected that the ctor of the state computer calls our `_onDelta`.\n        this._stateComputer = new MainThreadDocumentAndEditorStateComputer(function (delta) { return _this._onDelta(delta); }, _modelService, codeEditorService, this._editorService, panelService);\n        this._toDispose = [\n            mainThreadDocuments,\n            mainThreadTextEditors,\n            this._stateComputer,\n            this._onTextEditorAdd,\n            this._onTextEditorRemove,\n            this._onDocumentAdd,\n            this._onDocumentRemove,\n        ];\n    }\n    MainThreadDocumentsAndEditors.prototype.dispose = function () {\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n    };\n    MainThreadDocumentsAndEditors.prototype._onDelta = function (delta) {\n        var _this = this;\n        var removedDocuments;\n        var removedEditors = [];\n        var addedEditors = [];\n        // removed models\n        removedDocuments = delta.removedDocuments.map(function (m) { return m.uri; });\n        // added editors\n        for (var _i = 0, _a = delta.addedEditors; _i < _a.length; _i++) {\n            var apiEditor = _a[_i];\n            var mainThreadEditor = new mainThreadEditor_1.MainThreadTextEditor(apiEditor.id, apiEditor.editor.getModel(), apiEditor.editor, { onGainedFocus: function () { }, onLostFocus: function () { } }, this._modelService);\n            this._textEditors[apiEditor.id] = mainThreadEditor;\n            addedEditors.push(mainThreadEditor);\n        }\n        // removed editors\n        for (var _b = 0, _c = delta.removedEditors; _b < _c.length; _b++) {\n            var id = _c[_b].id;\n            var mainThreadEditor = this._textEditors[id];\n            if (mainThreadEditor) {\n                mainThreadEditor.dispose();\n                delete this._textEditors[id];\n                removedEditors.push(id);\n            }\n        }\n        var extHostDelta = Object.create(null);\n        var empty = true;\n        if (delta.newActiveEditor !== undefined) {\n            empty = false;\n            extHostDelta.newActiveEditor = delta.newActiveEditor;\n        }\n        if (removedDocuments.length > 0) {\n            empty = false;\n            extHostDelta.removedDocuments = removedDocuments;\n        }\n        if (removedEditors.length > 0) {\n            empty = false;\n            extHostDelta.removedEditors = removedEditors;\n        }\n        if (delta.addedDocuments.length > 0) {\n            empty = false;\n            extHostDelta.addedDocuments = delta.addedDocuments.map(function (m) { return _this._toModelAddData(m); });\n        }\n        if (delta.addedEditors.length > 0) {\n            empty = false;\n            extHostDelta.addedEditors = addedEditors.map(function (e) { return _this._toTextEditorAddData(e); });\n        }\n        if (!empty) {\n            // first update ext host\n            this._proxy.$acceptDocumentsAndEditorsDelta(extHostDelta);\n            // second update dependent state listener\n            this._onDocumentRemove.fire(removedDocuments);\n            this._onDocumentAdd.fire(delta.addedDocuments);\n            this._onTextEditorRemove.fire(removedEditors);\n            this._onTextEditorAdd.fire(addedEditors);\n        }\n    };\n    MainThreadDocumentsAndEditors.prototype._toModelAddData = function (model) {\n        return {\n            uri: model.uri,\n            versionId: model.getVersionId(),\n            lines: model.getLinesContent(),\n            EOL: model.getEOL(),\n            modeId: model.getLanguageIdentifier().language,\n            isDirty: this._textFileService.isDirty(model.uri)\n        };\n    };\n    MainThreadDocumentsAndEditors.prototype._toTextEditorAddData = function (textEditor) {\n        var props = textEditor.getProperties();\n        return {\n            id: textEditor.getId(),\n            documentUri: textEditor.getModel().uri,\n            options: props.options,\n            selections: props.selections,\n            visibleRanges: props.visibleRanges,\n            editorPosition: this._findEditorPosition(textEditor)\n        };\n    };\n    MainThreadDocumentsAndEditors.prototype._findEditorPosition = function (editor) {\n        for (var _i = 0, _a = this._editorService.visibleControls; _i < _a.length; _i++) {\n            var workbenchEditor = _a[_i];\n            if (editor.matches(workbenchEditor)) {\n                return editor_1.editorGroupToViewColumn(this._editorGroupService, workbenchEditor.group);\n            }\n        }\n        return undefined;\n    };\n    MainThreadDocumentsAndEditors.prototype.findTextEditorIdFor = function (editor) {\n        for (var id in this._textEditors) {\n            if (this._textEditors[id].matches(editor)) {\n                return id;\n            }\n        }\n        return undefined;\n    };\n    MainThreadDocumentsAndEditors.prototype.getEditor = function (id) {\n        return this._textEditors[id];\n    };\n    MainThreadDocumentsAndEditors = tslib_1.__decorate([\n        extHostCustomers_1.extHostCustomer,\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, textfiles_1.ITextFileService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(5, modeService_1.IModeService),\n        tslib_1.__param(6, files_1.IFileService),\n        tslib_1.__param(7, resolverService_1.ITextModelService),\n        tslib_1.__param(8, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(9, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(10, bulkEditService_1.IBulkEditService),\n        tslib_1.__param(11, panelService_1.IPanelService)\n    ], MainThreadDocumentsAndEditors);\n    return MainThreadDocumentsAndEditors;\n}());\nexports.MainThreadDocumentsAndEditors = MainThreadDocumentsAndEditors;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentsAndEditors.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentsAndEditors.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, combinedDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { values } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor, isCodeEditor, isDiffEditor, IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService, shouldSynchronizeModel } from 'vs/editor/common/services/modelService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { extHostCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { MainThreadDocuments } from 'vs/workbench/api/browser/mainThreadDocuments';\nimport { MainThreadTextEditor } from 'vs/workbench/api/browser/mainThreadEditor';\nimport { MainThreadTextEditors } from 'vs/workbench/api/browser/mainThreadEditors';\nimport { ExtHostContext, ExtHostDocumentsAndEditorsShape, IDocumentsAndEditorsDelta, IExtHostContext, IModelAddedData, ITextEditorAddData, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { EditorViewColumn, editorGroupToViewColumn } from 'vs/workbench/api/common/shared/editor';\nimport { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { IEditor as IWorkbenchEditor } from 'vs/workbench/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\n\nnamespace delta {\n\n\texport function ofSets<T>(before: Set<T>, after: Set<T>): { removed: T[], added: T[] } {\n\t\tconst removed: T[] = [];\n\t\tconst added: T[] = [];\n\t\tbefore.forEach(element => {\n\t\t\tif (!after.has(element)) {\n\t\t\t\tremoved.push(element);\n\t\t\t}\n\t\t});\n\t\tafter.forEach(element => {\n\t\t\tif (!before.has(element)) {\n\t\t\t\tadded.push(element);\n\t\t\t}\n\t\t});\n\t\treturn { removed, added };\n\t}\n\n\texport function ofMaps<K, V>(before: Map<K, V>, after: Map<K, V>): { removed: V[], added: V[] } {\n\t\tconst removed: V[] = [];\n\t\tconst added: V[] = [];\n\t\tbefore.forEach((value, index) => {\n\t\t\tif (!after.has(index)) {\n\t\t\t\tremoved.push(value);\n\t\t\t}\n\t\t});\n\t\tafter.forEach((value, index) => {\n\t\t\tif (!before.has(index)) {\n\t\t\t\tadded.push(value);\n\t\t\t}\n\t\t});\n\t\treturn { removed, added };\n\t}\n}\n\nclass TextEditorSnapshot {\n\n\treadonly id: string;\n\n\tconstructor(\n\t\treadonly editor: IActiveCodeEditor,\n\t) {\n\t\tthis.id = `${editor.getId()},${editor.getModel().id}`;\n\t}\n}\n\nclass DocumentAndEditorStateDelta {\n\n\treadonly isEmpty: boolean;\n\n\tconstructor(\n\t\treadonly removedDocuments: ITextModel[],\n\t\treadonly addedDocuments: ITextModel[],\n\t\treadonly removedEditors: TextEditorSnapshot[],\n\t\treadonly addedEditors: TextEditorSnapshot[],\n\t\treadonly oldActiveEditor: string | null | undefined,\n\t\treadonly newActiveEditor: string | null | undefined,\n\t) {\n\t\tthis.isEmpty = this.removedDocuments.length === 0\n\t\t\t&& this.addedDocuments.length === 0\n\t\t\t&& this.removedEditors.length === 0\n\t\t\t&& this.addedEditors.length === 0\n\t\t\t&& oldActiveEditor === newActiveEditor;\n\t}\n\n\ttoString(): string {\n\t\tlet ret = 'DocumentAndEditorStateDelta\\n';\n\t\tret += `\\tRemoved Documents: [${this.removedDocuments.map(d => d.uri.toString(true)).join(', ')}]\\n`;\n\t\tret += `\\tAdded Documents: [${this.addedDocuments.map(d => d.uri.toString(true)).join(', ')}]\\n`;\n\t\tret += `\\tRemoved Editors: [${this.removedEditors.map(e => e.id).join(', ')}]\\n`;\n\t\tret += `\\tAdded Editors: [${this.addedEditors.map(e => e.id).join(', ')}]\\n`;\n\t\tret += `\\tNew Active Editor: ${this.newActiveEditor}\\n`;\n\t\treturn ret;\n\t}\n}\n\nclass DocumentAndEditorState {\n\n\tstatic compute(before: DocumentAndEditorState, after: DocumentAndEditorState): DocumentAndEditorStateDelta {\n\t\tif (!before) {\n\t\t\treturn new DocumentAndEditorStateDelta(\n\t\t\t\t[], values(after.documents),\n\t\t\t\t[], values(after.textEditors),\n\t\t\t\tundefined, after.activeEditor\n\t\t\t);\n\t\t}\n\t\tconst documentDelta = delta.ofSets(before.documents, after.documents);\n\t\tconst editorDelta = delta.ofMaps(before.textEditors, after.textEditors);\n\t\tconst oldActiveEditor = before.activeEditor !== after.activeEditor ? before.activeEditor : undefined;\n\t\tconst newActiveEditor = before.activeEditor !== after.activeEditor ? after.activeEditor : undefined;\n\n\t\treturn new DocumentAndEditorStateDelta(\n\t\t\tdocumentDelta.removed, documentDelta.added,\n\t\t\teditorDelta.removed, editorDelta.added,\n\t\t\toldActiveEditor, newActiveEditor\n\t\t);\n\t}\n\n\tconstructor(\n\t\treadonly documents: Set<ITextModel>,\n\t\treadonly textEditors: Map<string, TextEditorSnapshot>,\n\t\treadonly activeEditor: string | null | undefined,\n\t) {\n\t\t//\n\t}\n}\n\nconst enum ActiveEditorOrder {\n\tEditor, Panel\n}\n\nclass MainThreadDocumentAndEditorStateComputer {\n\n\tprivate _toDispose: IDisposable[] = [];\n\tprivate _toDisposeOnEditorRemove = new Map<string, IDisposable>();\n\tprivate _currentState: DocumentAndEditorState;\n\tprivate _activeEditorOrder: ActiveEditorOrder = ActiveEditorOrder.Editor;\n\n\tconstructor(\n\t\tprivate readonly _onDidChangeState: (delta: DocumentAndEditorStateDelta) => void,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IPanelService private readonly _panelService: IPanelService\n\t) {\n\t\tthis._modelService.onModelAdded(this._updateStateOnModelAdd, this, this._toDispose);\n\t\tthis._modelService.onModelRemoved(_ => this._updateState(), this, this._toDispose);\n\t\tthis._editorService.onDidActiveEditorChange(_ => this._updateState(), this, this._toDispose);\n\n\t\tthis._codeEditorService.onCodeEditorAdd(this._onDidAddEditor, this, this._toDispose);\n\t\tthis._codeEditorService.onCodeEditorRemove(this._onDidRemoveEditor, this, this._toDispose);\n\t\tthis._codeEditorService.listCodeEditors().forEach(this._onDidAddEditor, this);\n\n\t\tthis._panelService.onDidPanelOpen(_ => this._activeEditorOrder = ActiveEditorOrder.Panel, undefined, this._toDispose);\n\t\tthis._panelService.onDidPanelClose(_ => this._activeEditorOrder = ActiveEditorOrder.Editor, undefined, this._toDispose);\n\t\tthis._editorService.onDidVisibleEditorsChange(_ => this._activeEditorOrder = ActiveEditorOrder.Editor, undefined, this._toDispose);\n\n\t\tthis._updateState();\n\t}\n\n\tdispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\tprivate _onDidAddEditor(e: ICodeEditor): void {\n\t\tthis._toDisposeOnEditorRemove.set(e.getId(), combinedDisposable([\n\t\t\te.onDidChangeModel(() => this._updateState()),\n\t\t\te.onDidFocusEditorText(() => this._updateState()),\n\t\t\te.onDidFocusEditorWidget(() => this._updateState(e))\n\t\t]));\n\t\tthis._updateState();\n\t}\n\n\tprivate _onDidRemoveEditor(e: ICodeEditor): void {\n\t\tconst sub = this._toDisposeOnEditorRemove.get(e.getId());\n\t\tif (sub) {\n\t\t\tthis._toDisposeOnEditorRemove.delete(e.getId());\n\t\t\tsub.dispose();\n\t\t\tthis._updateState();\n\t\t}\n\t}\n\n\tprivate _updateStateOnModelAdd(model: ITextModel): void {\n\t\tif (!shouldSynchronizeModel(model)) {\n\t\t\t// ignore\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._currentState) {\n\t\t\t// too early\n\t\t\tthis._updateState();\n\t\t\treturn;\n\t\t}\n\n\t\t// small (fast) delta\n\t\tthis._currentState = new DocumentAndEditorState(\n\t\t\tthis._currentState.documents.add(model),\n\t\t\tthis._currentState.textEditors,\n\t\t\tthis._currentState.activeEditor\n\t\t);\n\n\t\tthis._onDidChangeState(new DocumentAndEditorStateDelta(\n\t\t\t[], [model],\n\t\t\t[], [],\n\t\t\tundefined, undefined\n\t\t));\n\t}\n\n\tprivate _updateState(widgetFocusCandidate?: ICodeEditor): void {\n\n\t\t// models: ignore too large models\n\t\tconst models = new Set<ITextModel>();\n\t\tfor (const model of this._modelService.getModels()) {\n\t\t\tif (shouldSynchronizeModel(model)) {\n\t\t\t\tmodels.add(model);\n\t\t\t}\n\t\t}\n\n\t\t// editor: only take those that have a not too large model\n\t\tconst editors = new Map<string, TextEditorSnapshot>();\n\t\tlet activeEditor: string | null = null; // Strict null work. This doesn't like being undefined!\n\n\t\tfor (const editor of this._codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.isSimpleWidget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\t\t\tif (editor.hasModel() && model && shouldSynchronizeModel(model)\n\t\t\t\t&& !model.isDisposed() // model disposed\n\t\t\t\t&& Boolean(this._modelService.getModel(model.uri)) // model disposing, the flag didn't flip yet but the model service already removed it\n\t\t\t) {\n\t\t\t\tconst apiEditor = new TextEditorSnapshot(editor);\n\t\t\t\teditors.set(apiEditor.id, apiEditor);\n\t\t\t\tif (editor.hasTextFocus() || (widgetFocusCandidate === editor && editor.hasWidgetFocus())) {\n\t\t\t\t\t// text focus has priority, widget focus is tricky because multiple\n\t\t\t\t\t// editors might claim widget focus at the same time. therefore we use a\n\t\t\t\t\t// candidate (which is the editor that has raised an widget focus event)\n\t\t\t\t\t// in addition to the widget focus check\n\t\t\t\t\tactiveEditor = apiEditor.id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// active editor: if none of the previous editors had focus we try\n\t\t// to match output panels or the active workbench editor with\n\t\t// one of editor we have just computed\n\t\tif (!activeEditor) {\n\t\t\tlet candidate: IEditor | undefined;\n\t\t\tif (this._activeEditorOrder === ActiveEditorOrder.Editor) {\n\t\t\t\tcandidate = this._getActiveEditorFromEditorPart() || this._getActiveEditorFromPanel();\n\t\t\t} else {\n\t\t\t\tcandidate = this._getActiveEditorFromPanel() || this._getActiveEditorFromEditorPart();\n\t\t\t}\n\n\t\t\tif (candidate) {\n\t\t\t\teditors.forEach(snapshot => {\n\t\t\t\t\tif (candidate === snapshot.editor) {\n\t\t\t\t\t\tactiveEditor = snapshot.id;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// compute new state and compare against old\n\t\tconst newState = new DocumentAndEditorState(models, editors, activeEditor);\n\t\tconst delta = DocumentAndEditorState.compute(this._currentState, newState);\n\t\tif (!delta.isEmpty) {\n\t\t\tthis._currentState = newState;\n\t\t\tthis._onDidChangeState(delta);\n\t\t}\n\t}\n\n\tprivate _getActiveEditorFromPanel(): IEditor | undefined {\n\t\tconst panel = this._panelService.getActivePanel();\n\t\tif (panel instanceof BaseTextEditor && isCodeEditor(panel.getControl())) {\n\t\t\treturn panel.getControl();\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _getActiveEditorFromEditorPart(): IEditor | undefined {\n\t\tlet result = this._editorService.activeTextEditorWidget;\n\t\tif (isDiffEditor(result)) {\n\t\t\tresult = result.getModifiedEditor();\n\t\t}\n\t\treturn result;\n\t}\n}\n\n@extHostCustomer\nexport class MainThreadDocumentsAndEditors {\n\n\tprivate _toDispose: IDisposable[];\n\tprivate readonly _proxy: ExtHostDocumentsAndEditorsShape;\n\tprivate readonly _stateComputer: MainThreadDocumentAndEditorStateComputer;\n\tprivate _textEditors = <{ [id: string]: MainThreadTextEditor }>Object.create(null);\n\n\tprivate _onTextEditorAdd = new Emitter<MainThreadTextEditor[]>();\n\tprivate _onTextEditorRemove = new Emitter<string[]>();\n\tprivate _onDocumentAdd = new Emitter<ITextModel[]>();\n\tprivate _onDocumentRemove = new Emitter<URI[]>();\n\n\treadonly onTextEditorAdd: Event<MainThreadTextEditor[]> = this._onTextEditorAdd.event;\n\treadonly onTextEditorRemove: Event<string[]> = this._onTextEditorRemove.event;\n\treadonly onDocumentAdd: Event<ITextModel[]> = this._onDocumentAdd.event;\n\treadonly onDocumentRemove: Event<URI[]> = this._onDocumentRemove.event;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IUntitledEditorService untitledEditorService: IUntitledEditorService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IBulkEditService bulkEditService: IBulkEditService,\n\t\t@IPanelService panelService: IPanelService\n\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDocumentsAndEditors);\n\n\t\tconst mainThreadDocuments = new MainThreadDocuments(this, extHostContext, this._modelService, modeService, this._textFileService, fileService, textModelResolverService, untitledEditorService);\n\t\textHostContext.set(MainContext.MainThreadDocuments, mainThreadDocuments);\n\n\t\tconst mainThreadTextEditors = new MainThreadTextEditors(this, extHostContext, codeEditorService, bulkEditService, this._editorService, this._editorGroupService);\n\t\textHostContext.set(MainContext.MainThreadTextEditors, mainThreadTextEditors);\n\n\t\t// It is expected that the ctor of the state computer calls our `_onDelta`.\n\t\tthis._stateComputer = new MainThreadDocumentAndEditorStateComputer(delta => this._onDelta(delta), _modelService, codeEditorService, this._editorService, panelService);\n\n\t\tthis._toDispose = [\n\t\t\tmainThreadDocuments,\n\t\t\tmainThreadTextEditors,\n\t\t\tthis._stateComputer,\n\t\t\tthis._onTextEditorAdd,\n\t\t\tthis._onTextEditorRemove,\n\t\t\tthis._onDocumentAdd,\n\t\t\tthis._onDocumentRemove,\n\t\t];\n\t}\n\n\tdispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\tprivate _onDelta(delta: DocumentAndEditorStateDelta): void {\n\n\t\tlet removedDocuments: URI[];\n\t\tconst removedEditors: string[] = [];\n\t\tconst addedEditors: MainThreadTextEditor[] = [];\n\n\t\t// removed models\n\t\tremovedDocuments = delta.removedDocuments.map(m => m.uri);\n\n\t\t// added editors\n\t\tfor (const apiEditor of delta.addedEditors) {\n\t\t\tconst mainThreadEditor = new MainThreadTextEditor(apiEditor.id, apiEditor.editor.getModel(),\n\t\t\t\tapiEditor.editor, { onGainedFocus() { }, onLostFocus() { } }, this._modelService);\n\n\t\t\tthis._textEditors[apiEditor.id] = mainThreadEditor;\n\t\t\taddedEditors.push(mainThreadEditor);\n\t\t}\n\n\t\t// removed editors\n\t\tfor (const { id } of delta.removedEditors) {\n\t\t\tconst mainThreadEditor = this._textEditors[id];\n\t\t\tif (mainThreadEditor) {\n\t\t\t\tmainThreadEditor.dispose();\n\t\t\t\tdelete this._textEditors[id];\n\t\t\t\tremovedEditors.push(id);\n\t\t\t}\n\t\t}\n\n\t\tconst extHostDelta: IDocumentsAndEditorsDelta = Object.create(null);\n\t\tlet empty = true;\n\t\tif (delta.newActiveEditor !== undefined) {\n\t\t\tempty = false;\n\t\t\textHostDelta.newActiveEditor = delta.newActiveEditor;\n\t\t}\n\t\tif (removedDocuments.length > 0) {\n\t\t\tempty = false;\n\t\t\textHostDelta.removedDocuments = removedDocuments;\n\t\t}\n\t\tif (removedEditors.length > 0) {\n\t\t\tempty = false;\n\t\t\textHostDelta.removedEditors = removedEditors;\n\t\t}\n\t\tif (delta.addedDocuments.length > 0) {\n\t\t\tempty = false;\n\t\t\textHostDelta.addedDocuments = delta.addedDocuments.map(m => this._toModelAddData(m));\n\t\t}\n\t\tif (delta.addedEditors.length > 0) {\n\t\t\tempty = false;\n\t\t\textHostDelta.addedEditors = addedEditors.map(e => this._toTextEditorAddData(e));\n\t\t}\n\n\t\tif (!empty) {\n\t\t\t// first update ext host\n\t\t\tthis._proxy.$acceptDocumentsAndEditorsDelta(extHostDelta);\n\t\t\t// second update dependent state listener\n\t\t\tthis._onDocumentRemove.fire(removedDocuments);\n\t\t\tthis._onDocumentAdd.fire(delta.addedDocuments);\n\t\t\tthis._onTextEditorRemove.fire(removedEditors);\n\t\t\tthis._onTextEditorAdd.fire(addedEditors);\n\t\t}\n\t}\n\n\tprivate _toModelAddData(model: ITextModel): IModelAddedData {\n\t\treturn {\n\t\t\turi: model.uri,\n\t\t\tversionId: model.getVersionId(),\n\t\t\tlines: model.getLinesContent(),\n\t\t\tEOL: model.getEOL(),\n\t\t\tmodeId: model.getLanguageIdentifier().language,\n\t\t\tisDirty: this._textFileService.isDirty(model.uri)\n\t\t};\n\t}\n\n\tprivate _toTextEditorAddData(textEditor: MainThreadTextEditor): ITextEditorAddData {\n\t\tconst props = textEditor.getProperties();\n\t\treturn {\n\t\t\tid: textEditor.getId(),\n\t\t\tdocumentUri: textEditor.getModel().uri,\n\t\t\toptions: props.options,\n\t\t\tselections: props.selections,\n\t\t\tvisibleRanges: props.visibleRanges,\n\t\t\teditorPosition: this._findEditorPosition(textEditor)\n\t\t};\n\t}\n\n\tprivate _findEditorPosition(editor: MainThreadTextEditor): EditorViewColumn | undefined {\n\t\tfor (const workbenchEditor of this._editorService.visibleControls) {\n\t\t\tif (editor.matches(workbenchEditor)) {\n\t\t\t\treturn editorGroupToViewColumn(this._editorGroupService, workbenchEditor.group);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfindTextEditorIdFor(editor: IWorkbenchEditor): string | undefined {\n\t\tfor (const id in this._textEditors) {\n\t\t\tif (this._textEditors[id].matches(editor)) {\n\t\t\t\treturn id;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetEditor(id: string): MainThreadTextEditor {\n\t\treturn this._textEditors[id];\n\t}\n}\n"]}]}