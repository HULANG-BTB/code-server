{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/logger/src/logger.ts","dependencies":[{"path":"/home/coding/workspace/packages/logger/src/logger.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Log level.\n */\nvar Level;\n(function (Level) {\n    Level[Level[\"Trace\"] = 0] = \"Trace\";\n    Level[Level[\"Debug\"] = 1] = \"Debug\";\n    Level[Level[\"Info\"] = 2] = \"Info\";\n    Level[Level[\"Warning\"] = 3] = \"Warning\";\n    Level[Level[\"Error\"] = 4] = \"Error\";\n})(Level = exports.Level || (exports.Level = {}));\n/**\n * A field to log.\n */\nclass Field {\n    constructor(identifier, value) {\n        this.identifier = identifier;\n        this.value = value;\n    }\n    /**\n     * Convert field to JSON.\n     */\n    toJSON() {\n        return {\n            identifier: this.identifier,\n            value: this.value,\n        };\n    }\n}\nexports.Field = Field;\n/**\n * Represents the time something takes.\n */\nclass Time {\n    constructor(expected, ms) {\n        this.expected = expected;\n        this.ms = ms;\n    }\n}\nexports.Time = Time;\n/**\n * Creates a time field\n */\nexports.time = (expected) => {\n    return new Time(expected, Date.now());\n};\nexports.field = (name, value) => {\n    return new Field(name, value);\n};\n/**\n * This formats & builds text for logging.\n * It should only be used to build one log item at a time since it stores the\n * currently built items and appends to that.\n */\nclass Formatter {\n    constructor() {\n        this.format = \"\";\n        this.args = [];\n    }\n    /**\n     * Flush out the built arguments.\n     */\n    flush() {\n        const args = [this.format, ...this.args];\n        this.format = \"\";\n        this.args = [];\n        return args;\n    }\n    /**\n     * Get the format string for the value type.\n     */\n    getType(arg) {\n        switch (typeof arg) {\n            case \"object\":\n                return \"%o\";\n            case \"number\":\n                return \"%d\";\n            default:\n                return \"%s\";\n        }\n    }\n}\nexports.Formatter = Formatter;\n/**\n * Browser formatter.\n */\nclass BrowserFormatter extends Formatter {\n    tag(name, color) {\n        this.format += `%c ${name} `;\n        this.args.push(`border: 1px solid #222; background-color: ${color}; padding-top: 1px;`\n            + \" padding-bottom: 1px; font-size: 12px; font-weight: bold; color: white;\"\n            + (name.length === 4 ? \"padding-left: 3px; padding-right: 4px;\" : \"\"));\n        // A space to separate the tag from the title.\n        this.push(\" \");\n    }\n    push(arg, color = \"inherit\", weight = \"normal\") {\n        if (color || weight) {\n            this.format += \"%c\";\n            this.args.push((color ? `color: ${color};` : \"\") +\n                (weight ? `font-weight: ${weight};` : \"\"));\n        }\n        this.format += this.getType(arg);\n        this.args.push(arg);\n    }\n    // tslint:disable-next-line no-any\n    fields(fields) {\n        // tslint:disable-next-line no-console\n        console.groupCollapsed(...this.flush());\n        fields.forEach((field) => {\n            this.push(field.identifier, \"#3794ff\", \"bold\");\n            if (typeof field.value !== \"undefined\" && field.value.constructor && field.value.constructor.name) {\n                this.push(` (${field.value.constructor.name})`);\n            }\n            this.push(\": \");\n            this.push(field.value);\n            // tslint:disable-next-line no-console\n            console.log(...this.flush());\n        });\n        // tslint:disable-next-line no-console\n        console.groupEnd();\n    }\n}\nexports.BrowserFormatter = BrowserFormatter;\n/**\n * Server (Node) formatter.\n */\nclass ServerFormatter extends Formatter {\n    tag(name, color) {\n        const [r, g, b] = this.hexToRgb(color);\n        while (name.length < 5) {\n            name += \" \";\n        }\n        this.format += \"\\u001B[1m\";\n        this.format += `\\u001B[38;2;${r};${g};${b}m${name} \\u001B[0m`;\n    }\n    push(arg, color, weight) {\n        if (weight === \"bold\") {\n            this.format += \"\\u001B[1m\";\n        }\n        if (color) {\n            const [r, g, b] = this.hexToRgb(color);\n            this.format += `\\u001B[38;2;${r};${g};${b}m`;\n        }\n        this.format += this.getType(arg);\n        if (weight || color) {\n            this.format += \"\\u001B[0m\";\n        }\n        this.args.push(arg);\n    }\n    // tslint:disable-next-line no-any\n    fields(fields) {\n        // tslint:disable-next-line no-any\n        const obj = {};\n        this.format += \"\\u001B[38;2;140;140;140m\";\n        fields.forEach((field) => {\n            obj[field.identifier] = field.value;\n        });\n        this.args.push(JSON.stringify(obj));\n        console.log(...this.flush()); // tslint:disable-line no-console\n    }\n    /**\n     * Convert fully-formed hex to rgb.\n     */\n    hexToRgb(hex) {\n        const integer = parseInt(hex.substr(1), 16);\n        return [\n            (integer >> 16) & 0xFF,\n            (integer >> 8) & 0xFF,\n            integer & 0xFF,\n        ];\n    }\n}\nexports.ServerFormatter = ServerFormatter;\n/**\n * Class for logging.\n */\nclass Logger {\n    constructor(_formatter, name, defaultFields, extenders = []) {\n        this._formatter = _formatter;\n        this.name = name;\n        this.defaultFields = defaultFields;\n        this.extenders = extenders;\n        this.level = Level.Info;\n        this.muted = false;\n        if (name) {\n            this.nameColor = this.hashStringToColor(name);\n        }\n        const envLevel = typeof global !== \"undefined\" && typeof global.process !== \"undefined\" ? global.process.env.LOG_LEVEL : process.env.LOG_LEVEL;\n        if (envLevel) {\n            switch (envLevel) {\n                case \"trace\":\n                    this.level = Level.Trace;\n                    break;\n                case \"debug\":\n                    this.level = Level.Debug;\n                    break;\n                case \"info\":\n                    this.level = Level.Info;\n                    break;\n                case \"warn\":\n                    this.level = Level.Warning;\n                    break;\n                case \"error\":\n                    this.level = Level.Error;\n                    break;\n            }\n        }\n    }\n    set formatter(formatter) {\n        this._formatter = formatter;\n    }\n    /**\n     * Supresses all output\n     */\n    mute() {\n        this.muted = true;\n    }\n    extend(extender) {\n        this.extenders.push(extender);\n    }\n    info(message, ...fields) {\n        this.handle({\n            type: \"info\",\n            message,\n            fields,\n            tagColor: \"#008FBF\",\n            level: Level.Info,\n        });\n    }\n    warn(message, ...fields) {\n        this.handle({\n            type: \"warn\",\n            message,\n            fields,\n            tagColor: \"#FF9D00\",\n            level: Level.Warning,\n        });\n    }\n    trace(message, ...fields) {\n        this.handle({\n            type: \"trace\",\n            message,\n            fields,\n            tagColor: \"#888888\",\n            level: Level.Trace,\n        });\n    }\n    debug(message, ...fields) {\n        this.handle({\n            type: \"debug\",\n            message,\n            fields,\n            tagColor: \"#84009E\",\n            level: Level.Debug,\n        });\n    }\n    error(message, ...fields) {\n        this.handle({\n            type: \"error\",\n            message,\n            fields,\n            tagColor: \"#B00000\",\n            level: Level.Error,\n        });\n    }\n    /**\n     * Returns a sub-logger with a name.\n     * Each name is deterministically generated a color.\n     */\n    named(name, ...fields) {\n        const l = new Logger(this._formatter, name, fields, this.extenders);\n        if (this.muted) {\n            l.mute();\n        }\n        return l;\n    }\n    /**\n     * Outputs a message.\n     */\n    handle(options) {\n        if (this.level > options.level || this.muted) {\n            return;\n        }\n        let passedFields = options.fields || [];\n        if (typeof options.message === \"function\") {\n            const values = options.message();\n            options.message = values.shift();\n            passedFields = values;\n        }\n        const fields = (this.defaultFields\n            ? passedFields.filter((f) => !!f).concat(this.defaultFields)\n            : passedFields.filter((f) => !!f)); // tslint:disable-line no-any\n        const now = Date.now();\n        let times = [];\n        const hasFields = fields && fields.length > 0;\n        if (hasFields) {\n            times = fields.filter((f) => f.value instanceof Time);\n        }\n        this._formatter.tag(options.type.toUpperCase(), options.tagColor);\n        if (this.name && this.nameColor) {\n            this._formatter.tag(this.name.toUpperCase(), this.nameColor);\n        }\n        this._formatter.push(options.message);\n        if (times.length > 0) {\n            times.forEach((time) => {\n                const diff = now - time.value.ms;\n                const expPer = diff / time.value.expected;\n                const min = 125 * (1 - expPer);\n                const max = 125 + min;\n                const green = expPer < 1 ? max : min;\n                const red = expPer >= 1 ? max : min;\n                this._formatter.push(` ${time.identifier}=`, \"#3794ff\");\n                this._formatter.push(`${diff}ms`, this.rgbToHex(red > 0 ? red : 0, green > 0 ? green : 0, 0));\n            });\n        }\n        // tslint:disable no-console\n        if (hasFields) {\n            this._formatter.fields(fields);\n        }\n        else {\n            console.log(...this._formatter.flush());\n        }\n        // tslint:enable no-console\n        this.extenders.forEach((extender) => {\n            extender({\n                section: this.name,\n                fields: options.fields,\n                level: options.level,\n                message: options.message,\n                type: options.type,\n            });\n        });\n    }\n    /**\n     * Hashes a string.\n     */\n    djb2(str) {\n        let hash = 5381;\n        for (let i = 0; i < str.length; i++) {\n            hash = ((hash << 5) + hash) + str.charCodeAt(i); /* hash * 33 + c */\n        }\n        return hash;\n    }\n    /**\n     * Convert rgb to hex.\n     */\n    rgbToHex(r, g, b) {\n        const integer = ((Math.round(r) & 0xFF) << 16)\n            + ((Math.round(g) & 0xFF) << 8)\n            + (Math.round(b) & 0xFF);\n        const str = integer.toString(16);\n        return \"#\" + \"000000\".substring(str.length) + str;\n    }\n    /**\n     * Generates a deterministic color from a string using hashing.\n     */\n    hashStringToColor(str) {\n        const hash = this.djb2(str);\n        return this.rgbToHex((hash & 0xFF0000) >> 16, (hash & 0x00FF00) >> 8, hash & 0x0000FF);\n    }\n}\nexports.Logger = Logger;\nexports.logger = new Logger(typeof process === \"undefined\" || typeof process.stdout === \"undefined\"\n    ? new BrowserFormatter()\n    : new ServerFormatter());\n",{"version":3,"file":"/home/coding/workspace/packages/logger/src/logger.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/logger/src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Log level.\n */\nexport enum Level {\n\tTrace,\n\tDebug,\n\tInfo,\n\tWarning,\n\tError,\n}\n\n/**\n * A field to log.\n */\nexport class Field<T> {\n\tpublic constructor(\n\t\tpublic readonly identifier: string,\n\t\tpublic readonly value: T,\n\t) { }\n\n\t/**\n\t * Convert field to JSON.\n\t */\n\tpublic toJSON(): object {\n\t\treturn {\n\t\t\tidentifier: this.identifier,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\n/**\n * Represents the time something takes.\n */\nexport class Time {\n\tpublic constructor(\n\t\tpublic readonly expected: number,\n\t\tpublic readonly ms: number,\n\t) { }\n}\n\n// `undefined` is allowed to make it easy to conditionally display a field.\n// For example: `error && field(\"error\", error)`\n// tslint:disable-next-line no-any\nexport type FieldArray = Array<Field<any> | undefined>;\n\n// Functions can be used to remove the need to perform operations when the\n// logging level won't output the result anyway.\nexport type LogCallback = () => [string, ...FieldArray];\n\n/**\n * Creates a time field\n */\nexport const time = (expected: number): Time => {\n\treturn new Time(expected, Date.now());\n};\n\nexport const field = <T>(name: string, value: T): Field<T> => {\n\treturn new Field(name, value);\n};\n\nexport type Extender = (msg: {\n\tmessage: string,\n\tlevel: Level,\n\ttype: \"trace\" | \"info\" | \"warn\" | \"debug\" | \"error\",\n\tfields?: FieldArray,\n\tsection?: string,\n}) => void;\n\n/**\n * This formats & builds text for logging.\n * It should only be used to build one log item at a time since it stores the\n * currently built items and appends to that.\n */\nexport abstract class Formatter {\n\tprotected format = \"\";\n\tprotected args = <string[]>[];\n\n\t/**\n\t * Add a tag.\n\t */\n\tpublic abstract tag(name: string, color: string): void;\n\n\t/**\n\t * Add string or arbitrary variable.\n\t */\n\tpublic abstract push(arg: string, color?: string, weight?: string): void;\n\tpublic abstract push(arg: any): void; // tslint:disable-line no-any\n\n\t// tslint:disable-next-line no-any\n\tpublic abstract fields(fields: Array<Field<any>>): void;\n\n\t/**\n\t * Flush out the built arguments.\n\t */\n\tpublic flush(): any[] { // tslint:disable-line no-any\n\t\tconst args = [this.format, ...this.args];\n\t\tthis.format = \"\";\n\t\tthis.args = [];\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * Get the format string for the value type.\n\t */\n\tprotected getType(arg: any): string { // tslint:disable-line no-any\n\t\tswitch (typeof arg) {\n\t\t\tcase \"object\":\n\t\t\t\treturn \"%o\";\n\t\t\tcase \"number\":\n\t\t\t\treturn \"%d\";\n\t\t\tdefault:\n\t\t\t\treturn \"%s\";\n\t\t}\n\t}\n}\n\n/**\n * Browser formatter.\n */\nexport class BrowserFormatter extends Formatter {\n\tpublic tag(name: string, color: string): void {\n\t\tthis.format += `%c ${name} `;\n\t\tthis.args.push(\n\t\t\t`border: 1px solid #222; background-color: ${color}; padding-top: 1px;`\n\t\t\t+ \" padding-bottom: 1px; font-size: 12px; font-weight: bold; color: white;\"\n\t\t\t+ (name.length === 4 ? \"padding-left: 3px; padding-right: 4px;\" : \"\"),\n\t\t);\n\t\t// A space to separate the tag from the title.\n\t\tthis.push(\" \");\n\t}\n\n\tpublic push(arg: any, color: string = \"inherit\", weight: string = \"normal\"): void { // tslint:disable-line no-any\n\t\tif (color || weight) {\n\t\t\tthis.format += \"%c\";\n\t\t\tthis.args.push(\n\t\t\t\t(color ? `color: ${color};` : \"\") +\n\t\t\t\t(weight ? `font-weight: ${weight};` : \"\"),\n\t\t\t);\n\t\t}\n\t\tthis.format += this.getType(arg);\n\t\tthis.args.push(arg);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic fields(fields: Array<Field<any>>): void {\n\t\t// tslint:disable-next-line no-console\n\t\tconsole.groupCollapsed(...this.flush());\n\t\tfields.forEach((field) => {\n\t\t\tthis.push(field.identifier, \"#3794ff\", \"bold\");\n\t\t\tif (typeof field.value !== \"undefined\" && field.value.constructor && field.value.constructor.name) {\n\t\t\t\tthis.push(` (${field.value.constructor.name})`);\n\t\t\t}\n\t\t\tthis.push(\": \");\n\t\t\tthis.push(field.value);\n\t\t\t// tslint:disable-next-line no-console\n\t\t\tconsole.log(...this.flush());\n\t\t});\n\t\t// tslint:disable-next-line no-console\n\t\tconsole.groupEnd();\n\t}\n}\n\n/**\n * Server (Node) formatter.\n */\nexport class ServerFormatter extends Formatter {\n\tpublic tag(name: string, color: string): void {\n\t\tconst [r, g, b] = this.hexToRgb(color);\n\t\twhile (name.length < 5) {\n\t\t\tname += \" \";\n\t\t}\n\t\tthis.format += \"\\u001B[1m\";\n\t\tthis.format += `\\u001B[38;2;${r};${g};${b}m${name} \\u001B[0m`;\n\t}\n\n\tpublic push(arg: any, color?: string, weight?: string): void { // tslint:disable-line no-any\n\t\tif (weight === \"bold\") {\n\t\t\tthis.format += \"\\u001B[1m\";\n\t\t}\n\t\tif (color) {\n\t\t\tconst [r, g, b] = this.hexToRgb(color);\n\t\t\tthis.format += `\\u001B[38;2;${r};${g};${b}m`;\n\t\t}\n\t\tthis.format += this.getType(arg);\n\t\tif (weight || color) {\n\t\t\tthis.format += \"\\u001B[0m\";\n\t\t}\n\t\tthis.args.push(arg);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic fields(fields: Array<Field<any>>): void {\n\t\t// tslint:disable-next-line no-any\n\t\tconst obj: { [key: string]: any} = {};\n\t\tthis.format += \"\\u001B[38;2;140;140;140m\";\n\t\tfields.forEach((field) => {\n\t\t\tobj[field.identifier] = field.value;\n\t\t});\n\t\tthis.args.push(JSON.stringify(obj));\n\t\tconsole.log(...this.flush()); // tslint:disable-line no-console\n\t}\n\n\t/**\n\t * Convert fully-formed hex to rgb.\n\t */\n\tprivate hexToRgb(hex: string): [number, number, number] {\n\t\tconst integer = parseInt(hex.substr(1), 16);\n\n\t\treturn [\n\t\t\t(integer >> 16) & 0xFF,\n\t\t\t(integer >> 8) & 0xFF,\n\t\t\tinteger & 0xFF,\n\t\t];\n\t}\n}\n\n/**\n * Class for logging.\n */\nexport class Logger {\n\tpublic level = Level.Info;\n\n\tprivate readonly nameColor?: string;\n\tprivate muted: boolean = false;\n\n\tpublic constructor(\n\t\tprivate _formatter: Formatter,\n\t\tprivate readonly name?: string,\n\t\tprivate readonly defaultFields?: FieldArray,\n\t\tprivate readonly extenders: Extender[] = [],\n\t) {\n\t\tif (name) {\n\t\t\tthis.nameColor = this.hashStringToColor(name);\n\t\t}\n\t\tconst envLevel = typeof global !== \"undefined\" && typeof global.process !== \"undefined\" ? global.process.env.LOG_LEVEL : process.env.LOG_LEVEL;\n\t\tif (envLevel) {\n\t\t\tswitch (envLevel) {\n\t\t\t\tcase \"trace\": this.level = Level.Trace; break;\n\t\t\t\tcase \"debug\": this.level = Level.Debug; break;\n\t\t\t\tcase \"info\": this.level = Level.Info; break;\n\t\t\t\tcase \"warn\": this.level = Level.Warning; break;\n\t\t\t\tcase \"error\": this.level = Level.Error; break;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic set formatter(formatter: Formatter) {\n\t\tthis._formatter = formatter;\n\t}\n\n\t/**\n\t * Supresses all output\n\t */\n\tpublic mute(): void {\n\t\tthis.muted = true;\n\t}\n\n\tpublic extend(extender: Extender): void {\n\t\tthis.extenders.push(extender);\n\t}\n\n\t/**\n\t * Outputs information.\n\t */\n\tpublic info(fn: LogCallback): void;\n\tpublic info(message: string, ...fields: FieldArray): void;\n\tpublic info(message: LogCallback | string, ...fields: FieldArray): void {\n\t\tthis.handle({\n\t\t\ttype: \"info\",\n\t\t\tmessage,\n\t\t\tfields,\n\t\t\ttagColor: \"#008FBF\",\n\t\t\tlevel: Level.Info,\n\t\t});\n\t}\n\n\t/**\n\t * Outputs a warning.\n\t */\n\tpublic warn(fn: LogCallback): void;\n\tpublic warn(message: string, ...fields: FieldArray): void;\n\tpublic warn(message: LogCallback | string, ...fields: FieldArray): void {\n\t\tthis.handle({\n\t\t\ttype: \"warn\",\n\t\t\tmessage,\n\t\t\tfields,\n\t\t\ttagColor: \"#FF9D00\",\n\t\t\tlevel: Level.Warning,\n\t\t});\n\t}\n\n\t/**\n\t * Outputs a trace message.\n\t */\n\tpublic trace(fn: LogCallback): void;\n\tpublic trace(message: string, ...fields: FieldArray): void;\n\tpublic trace(message: LogCallback | string, ...fields: FieldArray): void {\n\t\tthis.handle({\n\t\t\ttype: \"trace\",\n\t\t\tmessage,\n\t\t\tfields,\n\t\t\ttagColor: \"#888888\",\n\t\t\tlevel: Level.Trace,\n\t\t});\n\t}\n\n\t/**\n\t * Outputs a debug message.\n\t */\n\tpublic debug(fn: LogCallback): void;\n\tpublic debug(message: string, ...fields: FieldArray): void;\n\tpublic debug(message: LogCallback | string, ...fields: FieldArray): void {\n\t\tthis.handle({\n\t\t\ttype: \"debug\",\n\t\t\tmessage,\n\t\t\tfields,\n\t\t\ttagColor: \"#84009E\",\n\t\t\tlevel: Level.Debug,\n\t\t});\n\t}\n\n\t/**\n\t * Outputs an error.\n\t */\n\tpublic error(fn: LogCallback): void;\n\tpublic error(message: string, ...fields: FieldArray): void;\n\tpublic error(message: LogCallback | string, ...fields: FieldArray): void {\n\t\tthis.handle({\n\t\t\ttype: \"error\",\n\t\t\tmessage,\n\t\t\tfields,\n\t\t\ttagColor: \"#B00000\",\n\t\t\tlevel: Level.Error,\n\t\t});\n\t}\n\n\t/**\n\t * Returns a sub-logger with a name.\n\t * Each name is deterministically generated a color.\n\t */\n\tpublic named(name: string, ...fields: FieldArray): Logger {\n\t\tconst l = new Logger(this._formatter, name, fields, this.extenders);\n\t\tif (this.muted) {\n\t\t\tl.mute();\n\t\t}\n\n\t\treturn l;\n\t}\n\n\t/**\n\t * Outputs a message.\n\t */\n\tprivate handle(options: {\n\t\ttype: \"trace\" | \"info\" | \"warn\" | \"debug\" | \"error\";\n\t\tmessage: string | LogCallback;\n\t\tfields?: FieldArray;\n\t\tlevel: Level;\n\t\ttagColor: string;\n\t}): void {\n\t\tif (this.level > options.level || this.muted) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet passedFields = options.fields || [];\n\t\tif (typeof options.message === \"function\") {\n\t\t\tconst values = options.message();\n\t\t\toptions.message = values.shift() as string;\n\t\t\tpassedFields = values as FieldArray;\n\t\t}\n\n\t\tconst fields = (this.defaultFields\n\t\t\t? passedFields.filter((f) => !!f).concat(this.defaultFields)\n\t\t\t: passedFields.filter((f) => !!f)) as Array<Field<any>>; // tslint:disable-line no-any\n\n\t\tconst now = Date.now();\n\t\tlet times: Array<Field<Time>> = [];\n\t\tconst hasFields = fields && fields.length > 0;\n\t\tif (hasFields) {\n\t\t\ttimes = fields.filter((f) => f.value instanceof Time);\n\t\t}\n\n\t\tthis._formatter.tag(options.type.toUpperCase(), options.tagColor);\n\t\tif (this.name && this.nameColor) {\n\t\t\tthis._formatter.tag(this.name.toUpperCase(), this.nameColor);\n\t\t}\n\t\tthis._formatter.push(options.message);\n\t\tif (times.length > 0) {\n\t\t\ttimes.forEach((time) => {\n\t\t\t\tconst diff = now - time.value.ms;\n\t\t\t\tconst expPer = diff / time.value.expected;\n\t\t\t\tconst min = 125 * (1 - expPer);\n\t\t\t\tconst max = 125 + min;\n\t\t\t\tconst green = expPer < 1 ? max : min;\n\t\t\t\tconst red = expPer >= 1 ? max : min;\n\t\t\t\tthis._formatter.push(` ${time.identifier}=`, \"#3794ff\");\n\t\t\t\tthis._formatter.push(`${diff}ms`, this.rgbToHex(red > 0 ? red : 0, green > 0 ? green : 0, 0));\n\t\t\t});\n\t\t}\n\n\t\t// tslint:disable no-console\n\t\tif (hasFields) {\n\t\t\tthis._formatter.fields(fields);\n\t\t} else {\n\t\t\tconsole.log(...this._formatter.flush());\n\t\t}\n\t\t// tslint:enable no-console\n\n\t\tthis.extenders.forEach((extender) => {\n\t\t\textender({\n\t\t\t\tsection: this.name,\n\t\t\t\tfields: options.fields,\n\t\t\t\tlevel: options.level,\n\t\t\t\tmessage: options.message as string,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Hashes a string.\n\t */\n\tprivate djb2(str: string): number {\n\t\tlet hash = 5381;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\thash = ((hash << 5) + hash) + str.charCodeAt(i); /* hash * 33 + c */\n\t\t}\n\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Convert rgb to hex.\n\t */\n\tprivate rgbToHex(r: number, g: number, b: number): string {\n\t\tconst integer = ((Math.round(r) & 0xFF) << 16)\n\t\t\t+ ((Math.round(g) & 0xFF) << 8)\n\t\t\t+ (Math.round(b) & 0xFF);\n\n\t\tconst str = integer.toString(16);\n\n\t\treturn \"#\" + \"000000\".substring(str.length) + str;\n\t}\n\n\t/**\n\t * Generates a deterministic color from a string using hashing.\n\t */\n\tprivate hashStringToColor(str: string): string {\n\t\tconst hash = this.djb2(str);\n\n\t\treturn this.rgbToHex(\n\t\t\t(hash & 0xFF0000) >> 16,\n\t\t\t(hash & 0x00FF00) >> 8,\n\t\t\thash & 0x0000FF,\n\t\t);\n\t}\n}\n\nexport const logger = new Logger(\n\ttypeof process === \"undefined\" || typeof process.stdout === \"undefined\"\n\t\t? new BrowserFormatter()\n\t\t: new ServerFormatter(),\n);\n"]}]}