{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingLabels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingLabels.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/platform\"], function (require, exports, nls, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ModifierLabelProvider {\n        constructor(mac, windows, linux = windows) {\n            this.modifierLabels = [null]; // index 0 will never me accessed.\n            this.modifierLabels[platform_1.OperatingSystem.Macintosh] = mac;\n            this.modifierLabels[platform_1.OperatingSystem.Windows] = windows;\n            this.modifierLabels[platform_1.OperatingSystem.Linux] = linux;\n        }\n        toLabel(OS, parts, keyLabelProvider) {\n            if (parts.length === 0) {\n                return null;\n            }\n            const result = [];\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const part = parts[i];\n                const keyLabel = keyLabelProvider(part);\n                if (keyLabel === null) {\n                    // this keybinding cannot be expressed...\n                    return null;\n                }\n                result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n            }\n            return result.join(' ');\n        }\n    }\n    exports.ModifierLabelProvider = ModifierLabelProvider;\n    /**\n     * A label provider that prints modifiers in a suitable format for displaying in the UI.\n     */\n    exports.UILabelProvider = new ModifierLabelProvider({\n        ctrlKey: '⌃',\n        shiftKey: '⇧',\n        altKey: '⌥',\n        metaKey: '⌘',\n        separator: '',\n    }, {\n        ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n        shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n        altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n        metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\n        separator: '+',\n    }, {\n        ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n        shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n        altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n        metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\n        separator: '+',\n    });\n    /**\n     * A label provider that prints modifiers in a suitable format for ARIA.\n     */\n    exports.AriaLabelProvider = new ModifierLabelProvider({\n        ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n        shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n        altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n        metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\n        separator: '+',\n    }, {\n        ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n        shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n        altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n        metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\n        separator: '+',\n    }, {\n        ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n        shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n        altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n        metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\n        separator: '+',\n    });\n    /**\n     * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n     * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n     */\n    exports.ElectronAcceleratorLabelProvider = new ModifierLabelProvider({\n        ctrlKey: 'Ctrl',\n        shiftKey: 'Shift',\n        altKey: 'Alt',\n        metaKey: 'Cmd',\n        separator: '+',\n    }, {\n        ctrlKey: 'Ctrl',\n        shiftKey: 'Shift',\n        altKey: 'Alt',\n        metaKey: 'Super',\n        separator: '+',\n    });\n    /**\n     * A label provider that prints modifiers in a suitable format for user settings.\n     */\n    exports.UserSettingsLabelProvider = new ModifierLabelProvider({\n        ctrlKey: 'ctrl',\n        shiftKey: 'shift',\n        altKey: 'alt',\n        metaKey: 'cmd',\n        separator: '+',\n    }, {\n        ctrlKey: 'ctrl',\n        shiftKey: 'shift',\n        altKey: 'alt',\n        metaKey: 'win',\n        separator: '+',\n    }, {\n        ctrlKey: 'ctrl',\n        shiftKey: 'shift',\n        altKey: 'alt',\n        metaKey: 'meta',\n        separator: '+',\n    });\n    function _simpleAsString(modifiers, key, labels) {\n        if (key === null) {\n            return '';\n        }\n        const result = [];\n        // translate modifier keys: Ctrl-Shift-Alt-Meta\n        if (modifiers.ctrlKey) {\n            result.push(labels.ctrlKey);\n        }\n        if (modifiers.shiftKey) {\n            result.push(labels.shiftKey);\n        }\n        if (modifiers.altKey) {\n            result.push(labels.altKey);\n        }\n        if (modifiers.metaKey) {\n            result.push(labels.metaKey);\n        }\n        // the actual key\n        result.push(key);\n        return result.join(labels.separator);\n    }\n});\n",null]}