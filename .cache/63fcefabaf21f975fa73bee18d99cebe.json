{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/perfviewEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/perfviewEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/uri\", \"vs/workbench/common/editor/resourceEditorInput\", \"vs/editor/common/services/resolverService\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/editor/common/services/modeService\", \"vs/platform/instantiation/common/instantiation\", \"vs/editor/common/services/modelService\", \"vs/workbench/services/timer/electron-browser/timerService\", \"vs/base/common/strings\", \"vs/workbench/services/extensions/common/extensions\", \"vs/base/common/performance\", \"vs/base/common/lifecycle\", \"vs/editor/browser/services/codeEditorService\", \"vs/workbench/contrib/codeEditor/browser/toggleWordWrap\", \"vs/base/common/arrays\", \"vs/platform/environment/common/environment\", \"vs/platform/product/node/product\", \"vs/platform/product/node/package\"], function (require, exports, nls_1, uri_1, resourceEditorInput_1, resolverService_1, lifecycle_1, modeService_1, instantiation_1, modelService_1, timerService_1, strings_1, extensions_1, perf, lifecycle_2, codeEditorService_1, toggleWordWrap_1, arrays_1, environment_1, product_1, package_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let PerfviewContrib = class PerfviewContrib {\n        constructor(instaService, textModelResolverService) {\n            this._registration = textModelResolverService.registerTextModelContentProvider('perf', instaService.createInstance(PerfModelContentProvider));\n        }\n        dispose() {\n            this._registration.dispose();\n        }\n    };\n    PerfviewContrib = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, resolverService_1.ITextModelService)\n    ], PerfviewContrib);\n    exports.PerfviewContrib = PerfviewContrib;\n    let PerfviewInput = class PerfviewInput extends resourceEditorInput_1.ResourceEditorInput {\n        constructor(textModelResolverService) {\n            super(nls_1.localize('name', \"Startup Performance\"), null, PerfviewInput.Uri, textModelResolverService);\n        }\n        getTypeId() {\n            return PerfviewInput.Id;\n        }\n    };\n    PerfviewInput.Id = 'PerfviewInput';\n    PerfviewInput.Uri = uri_1.URI.from({ scheme: 'perf', path: 'Startup Performance' });\n    PerfviewInput = __decorate([\n        __param(0, resolverService_1.ITextModelService)\n    ], PerfviewInput);\n    exports.PerfviewInput = PerfviewInput;\n    let PerfModelContentProvider = class PerfModelContentProvider {\n        constructor(_modelService, _modeService, _editorService, _lifecycleService, _timerService, _envService, _extensionService) {\n            this._modelService = _modelService;\n            this._modeService = _modeService;\n            this._editorService = _editorService;\n            this._lifecycleService = _lifecycleService;\n            this._timerService = _timerService;\n            this._envService = _envService;\n            this._extensionService = _extensionService;\n            this._modelDisposables = [];\n        }\n        provideTextContent(resource) {\n            if (!this._model || this._model.isDisposed()) {\n                lifecycle_2.dispose(this._modelDisposables);\n                const langId = this._modeService.create('markdown');\n                this._model = this._modelService.getModel(resource) || this._modelService.createModel('Loading...', langId, resource);\n                this._modelDisposables.push(langId.onDidChange(e => {\n                    if (this._model) {\n                        this._model.setMode(e);\n                    }\n                }));\n                this._modelDisposables.push(langId);\n                this._modelDisposables.push(this._extensionService.onDidChangeExtensionsStatus(this._updateModel, this));\n                toggleWordWrap_1.writeTransientState(this._model, { forceWordWrap: 'off', forceWordWrapMinified: false }, this._editorService);\n            }\n            this._updateModel();\n            return Promise.resolve(this._model);\n        }\n        _updateModel() {\n            Promise.all([\n                this._timerService.startupMetrics,\n                this._lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually),\n                this._extensionService.whenInstalledExtensionsRegistered()\n            ]).then(([metrics]) => {\n                if (this._model && !this._model.isDisposed()) {\n                    let stats = this._envService.args['prof-modules'] ? LoaderStats.get() : undefined;\n                    let md = new MarkdownBuilder();\n                    this._addSummary(md, metrics);\n                    md.blank();\n                    this._addSummaryTable(md, metrics, stats);\n                    md.blank();\n                    this._addExtensionsTable(md);\n                    md.blank();\n                    this._addRawPerfMarks(md);\n                    md.blank();\n                    this._addLoaderStats(md, stats);\n                    this._model.setValue(md.value);\n                }\n            });\n        }\n        _addSummary(md, metrics) {\n            md.heading(2, 'System Info');\n            md.li(`${product_1.default.nameShort}: ${package_1.default.version} (${product_1.default.commit || '0000000'})`);\n            md.li(`OS: ${metrics.platform}(${metrics.release})`);\n            if (metrics.cpus) {\n                md.li(`CPUs: ${metrics.cpus.model}(${metrics.cpus.count} x ${metrics.cpus.speed})`);\n            }\n            if (typeof metrics.totalmem === 'number' && typeof metrics.freemem === 'number') {\n                md.li(`Memory(System): ${(metrics.totalmem / (1024 * 1024 * 1024)).toFixed(2)} GB(${(metrics.freemem / (1024 * 1024 * 1024)).toFixed(2)}GB free)`);\n            }\n            if (metrics.meminfo) {\n                md.li(`Memory(Process): ${(metrics.meminfo.workingSetSize / 1024).toFixed(2)} MB working set(${(metrics.meminfo.peakWorkingSetSize / 1024).toFixed(2)}MB peak, ${(metrics.meminfo.privateBytes / 1024).toFixed(2)}MB private, ${(metrics.meminfo.sharedBytes / 1024).toFixed(2)}MB shared)`);\n            }\n            md.li(`VM(likelyhood): ${metrics.isVMLikelyhood}%`);\n            md.li(`Initial Startup: ${metrics.initialStartup}`);\n            md.li(`Has ${metrics.windowCount - 1} other windows`);\n            md.li(`Screen Reader Active: ${metrics.hasAccessibilitySupport}`);\n            md.li(`Empty Workspace: ${metrics.emptyWorkbench}`);\n        }\n        _addSummaryTable(md, metrics, stats) {\n            const table = [];\n            table.push(['start => app.isReady', metrics.timers.ellapsedAppReady, '[main]', `initial startup: ${metrics.initialStartup}`]);\n            table.push(['nls:start => nls:end', metrics.timers.ellapsedNlsGeneration, '[main]', `initial startup: ${metrics.initialStartup}`]);\n            table.push(['require(main.bundle.js)', metrics.initialStartup ? perf.getDuration('willLoadMainBundle', 'didLoadMainBundle') : undefined, '[main]', `initial startup: ${metrics.initialStartup}`]);\n            table.push(['app.isReady => window.loadUrl()', metrics.timers.ellapsedWindowLoad, '[main]', `initial startup: ${metrics.initialStartup}`]);\n            table.push(['window.loadUrl() => begin to require(workbench.main.js)', metrics.timers.ellapsedWindowLoadToRequire, '[main->renderer]', lifecycle_1.StartupKindToString(metrics.windowKind)]);\n            table.push(['require(workbench.main.js)', metrics.timers.ellapsedRequire, '[renderer]', `cached data: ${(metrics.didUseCachedData ? 'YES' : 'NO')}${stats ? `, node_modules took ${stats.nodeRequireTotal}ms` : ''}`]);\n            table.push(['require & init workspace storage', metrics.timers.ellapsedWorkspaceStorageInit, '[renderer]', undefined]);\n            table.push(['init workspace service', metrics.timers.ellapsedWorkspaceServiceInit, '[renderer]', undefined]);\n            table.push(['register extensions & spawn extension host', metrics.timers.ellapsedExtensions, '[renderer]', undefined]);\n            table.push(['restore viewlet', metrics.timers.ellapsedViewletRestore, '[renderer]', metrics.viewletId]);\n            table.push(['restore panel', metrics.timers.ellapsedPanelRestore, '[renderer]', metrics.panelId]);\n            table.push(['restore editors', metrics.timers.ellapsedEditorRestore, '[renderer]', `${metrics.editorIds.length}: ${metrics.editorIds.join(', ')}`]);\n            table.push(['overall workbench load', metrics.timers.ellapsedWorkbench, '[renderer]', undefined]);\n            table.push(['workbench ready', metrics.ellapsed, '[main->renderer]', undefined]);\n            table.push(['extensions registered', metrics.timers.ellapsedExtensionsReady, '[renderer]', undefined]);\n            md.heading(2, 'Performance Marks');\n            md.table(['What', 'Duration', 'Process', 'Info'], table);\n        }\n        _addExtensionsTable(md) {\n            const eager = [];\n            const normal = [];\n            let extensionsStatus = this._extensionService.getExtensionsStatus();\n            for (let id in extensionsStatus) {\n                const { activationTimes: times } = extensionsStatus[id];\n                if (!times) {\n                    continue;\n                }\n                if (times.startup) {\n                    eager.push([id, times.startup, times.codeLoadingTime, times.activateCallTime, times.activateResolvedTime, times.activationEvent]);\n                }\n                else {\n                    normal.push([id, times.startup, times.codeLoadingTime, times.activateCallTime, times.activateResolvedTime, times.activationEvent]);\n                }\n            }\n            const table = eager.concat(normal);\n            if (table.length > 0) {\n                md.heading(2, 'Extension Activation Stats');\n                md.table(['Extension', 'Eager', 'Load Code', 'Call Activate', 'Finish Activate', 'Event'], table);\n            }\n        }\n        _addRawPerfMarks(md) {\n            md.heading(2, 'Raw Perf Marks');\n            md.value += '```\\n';\n            md.value += `Name\\tTimestamp\\tDelta\\tTotal\\n`;\n            let lastStartTime = -1;\n            let total = 0;\n            for (const { name, timestamp: startTime } of perf.getEntries()) {\n                let delta = lastStartTime !== -1 ? startTime - lastStartTime : 0;\n                total += delta;\n                md.value += `${name}\\t${startTime}\\t${delta}\\t${total}\\n`;\n                lastStartTime = startTime;\n            }\n            md.value += '```\\n';\n        }\n        _addLoaderStats(md, stats) {\n            if (stats) {\n                md.heading(2, 'Loader Stats');\n                md.heading(3, 'Load AMD-module');\n                md.table(['Module', 'Duration'], stats.amdLoad);\n                md.blank();\n                md.heading(3, 'Load commonjs-module');\n                md.table(['Module', 'Duration'], stats.nodeRequire);\n                md.blank();\n                md.heading(3, 'Invoke AMD-module factory');\n                md.table(['Module', 'Duration'], stats.amdInvoke);\n                md.blank();\n                md.heading(3, 'Invoke commonjs-module');\n                md.table(['Module', 'Duration'], stats.nodeEval);\n            }\n        }\n    };\n    PerfModelContentProvider = __decorate([\n        __param(0, modelService_1.IModelService),\n        __param(1, modeService_1.IModeService),\n        __param(2, codeEditorService_1.ICodeEditorService),\n        __param(3, lifecycle_1.ILifecycleService),\n        __param(4, timerService_1.ITimerService),\n        __param(5, environment_1.IEnvironmentService),\n        __param(6, extensions_1.IExtensionService)\n    ], PerfModelContentProvider);\n    class LoaderStats {\n        static get() {\n            const amdLoadScript = new Map();\n            const amdInvokeFactory = new Map();\n            const nodeRequire = new Map();\n            const nodeEval = new Map();\n            function mark(map, stat) {\n                if (map.has(stat.detail)) {\n                    // console.warn('BAD events, DOUBLE start', stat);\n                    // map.delete(stat.detail);\n                    return;\n                }\n                map.set(stat.detail, -stat.timestamp);\n            }\n            function diff(map, stat) {\n                let duration = map.get(stat.detail);\n                if (!duration) {\n                    // console.warn('BAD events, end WITHOUT start', stat);\n                    // map.delete(stat.detail);\n                    return;\n                }\n                if (duration >= 0) {\n                    // console.warn('BAD events, DOUBLE end', stat);\n                    // map.delete(stat.detail);\n                    return;\n                }\n                map.set(stat.detail, duration + stat.timestamp);\n            }\n            const stats = arrays_1.mergeSort(require.getStats().slice(0), (a, b) => a.timestamp - b.timestamp);\n            for (const stat of stats) {\n                switch (stat.type) {\n                    case LoaderEventType.BeginLoadingScript:\n                        mark(amdLoadScript, stat);\n                        break;\n                    case LoaderEventType.EndLoadingScriptOK:\n                    case LoaderEventType.EndLoadingScriptError:\n                        diff(amdLoadScript, stat);\n                        break;\n                    case LoaderEventType.BeginInvokeFactory:\n                        mark(amdInvokeFactory, stat);\n                        break;\n                    case LoaderEventType.EndInvokeFactory:\n                        diff(amdInvokeFactory, stat);\n                        break;\n                    case LoaderEventType.NodeBeginNativeRequire:\n                        mark(nodeRequire, stat);\n                        break;\n                    case LoaderEventType.NodeEndNativeRequire:\n                        diff(nodeRequire, stat);\n                        break;\n                    case LoaderEventType.NodeBeginEvaluatingScript:\n                        mark(nodeEval, stat);\n                        break;\n                    case LoaderEventType.NodeEndEvaluatingScript:\n                        diff(nodeEval, stat);\n                        break;\n                }\n            }\n            let nodeRequireTotal = 0;\n            nodeRequire.forEach(value => nodeRequireTotal += value);\n            function to2dArray(map) {\n                let res = [];\n                map.forEach((value, index) => res.push([index, value]));\n                return res;\n            }\n            return {\n                amdLoad: to2dArray(amdLoadScript),\n                amdInvoke: to2dArray(amdInvokeFactory),\n                nodeRequire: to2dArray(nodeRequire),\n                nodeEval: to2dArray(nodeEval),\n                nodeRequireTotal\n            };\n        }\n    }\n    class MarkdownBuilder {\n        constructor() {\n            this.value = '';\n        }\n        heading(level, value) {\n            this.value += `${strings_1.repeat('#', level)} ${value}\\n\\n`;\n            return this;\n        }\n        blank() {\n            this.value += '\\n';\n            return this;\n        }\n        li(value) {\n            this.value += `* ${value}\\n`;\n            return this;\n        }\n        table(header, rows) {\n            let lengths = [];\n            header.forEach((cell, ci) => {\n                lengths[ci] = cell.length;\n            });\n            rows.forEach(row => {\n                row.forEach((cell, ci) => {\n                    if (typeof cell === 'undefined') {\n                        cell = row[ci] = '-';\n                    }\n                    const len = cell.toString().length;\n                    lengths[ci] = Math.max(len, lengths[ci]);\n                });\n            });\n            // header\n            header.forEach((cell, ci) => { this.value += `| ${cell + strings_1.repeat(' ', lengths[ci] - cell.toString().length)} `; });\n            this.value += '|\\n';\n            header.forEach((_cell, ci) => { this.value += `| ${strings_1.repeat('-', lengths[ci])} `; });\n            this.value += '|\\n';\n            // cells\n            rows.forEach(row => {\n                row.forEach((cell, ci) => {\n                    if (typeof cell !== 'undefined') {\n                        this.value += `| ${cell + strings_1.repeat(' ', lengths[ci] - cell.toString().length)} `;\n                    }\n                });\n                this.value += '|\\n';\n            });\n        }\n    }\n});\n",null]}