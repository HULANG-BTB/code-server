{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar taskService_1 = require(\"vs/workbench/contrib/tasks/common/taskService\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE = 'tasks.run.allowAutomatic';\nvar RunAutomaticTasks = /** @class */ (function (_super) {\n    tslib_1.__extends(RunAutomaticTasks, _super);\n    function RunAutomaticTasks(taskService, storageService) {\n        var _this = _super.call(this) || this;\n        _this.taskService = taskService;\n        var isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, storage_1.StorageScope.WORKSPACE, undefined);\n        _this.tryRunTasks(isFolderAutomaticAllowed);\n        return _this;\n    }\n    RunAutomaticTasks.prototype.tryRunTasks = function (isAllowed) {\n        var _this = this;\n        // Only run if allowed. Prompting for permission occurs when a user first tries to run a task.\n        if (isAllowed === true) {\n            this.taskService.getWorkspaceTasks(tasks_1.TaskRunSource.FolderOpen).then(function (workspaceTaskResult) {\n                var tasks = RunAutomaticTasks.findAutoTasks(_this.taskService, workspaceTaskResult).tasks;\n                if (tasks.length > 0) {\n                    RunAutomaticTasks.runTasks(_this.taskService, tasks);\n                }\n            });\n        }\n    };\n    RunAutomaticTasks.runTasks = function (taskService, tasks) {\n        tasks.forEach(function (task) {\n            if (task instanceof Promise) {\n                task.then(function (promiseResult) {\n                    if (promiseResult) {\n                        taskService.run(promiseResult);\n                    }\n                });\n            }\n            else {\n                taskService.run(task);\n            }\n        });\n    };\n    RunAutomaticTasks.findAutoTasks = function (taskService, workspaceTaskResult) {\n        var tasks = new Array();\n        var taskNames = new Array();\n        if (workspaceTaskResult) {\n            workspaceTaskResult.forEach(function (resultElement) {\n                if (resultElement.set) {\n                    resultElement.set.tasks.forEach(function (task) {\n                        if (task.runOptions.runOn === tasks_1.RunOnOptions.folderOpen) {\n                            tasks.push(task);\n                            taskNames.push(task._label);\n                        }\n                    });\n                }\n                if (resultElement.configurations) {\n                    collections_1.forEach(resultElement.configurations.byIdentifier, function (configedTask) {\n                        if (configedTask.value.runOptions.runOn === tasks_1.RunOnOptions.folderOpen) {\n                            tasks.push(new Promise(function (resolve) {\n                                taskService.getTask(resultElement.workspaceFolder, configedTask.value._id, true).then(function (task) { return resolve(task); });\n                            }));\n                            if (configedTask.value._label) {\n                                taskNames.push(configedTask.value._label);\n                            }\n                            else {\n                                taskNames.push(configedTask.value.configures.task);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n        return { tasks: tasks, taskNames: taskNames };\n    };\n    RunAutomaticTasks.promptForPermission = function (taskService, storageService, notificationService, workspaceTaskResult) {\n        var isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, storage_1.StorageScope.WORKSPACE, undefined);\n        if (isFolderAutomaticAllowed !== undefined) {\n            return;\n        }\n        var _a = RunAutomaticTasks.findAutoTasks(taskService, workspaceTaskResult), tasks = _a.tasks, taskNames = _a.taskNames;\n        if (taskNames.length > 0) {\n            // We have automatic tasks, prompt to allow.\n            this.showPrompt(notificationService, storageService, taskService, taskNames).then(function (allow) {\n                if (allow) {\n                    RunAutomaticTasks.runTasks(taskService, tasks);\n                }\n            });\n        }\n    };\n    RunAutomaticTasks.showPrompt = function (notificationService, storageService, taskService, taskNames) {\n        return new Promise(function (resolve) {\n            notificationService.prompt(notification_1.Severity.Info, nls.localize('tasks.run.allowAutomatic', \"This folder has tasks ({0}) defined in \\'tasks.json\\' that run automatically when you open this folder. Do you allow automatic tasks to run when you open this folder?\", taskNames.join(', ')), [{\n                    label: nls.localize('allow', \"Allow and run\"),\n                    run: function () {\n                        resolve(true);\n                        storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, true, storage_1.StorageScope.WORKSPACE);\n                    }\n                },\n                {\n                    label: nls.localize('disallow', \"Disallow\"),\n                    run: function () {\n                        resolve(false);\n                        storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, false, storage_1.StorageScope.WORKSPACE);\n                    }\n                },\n                {\n                    label: nls.localize('openTasks', \"Open tasks.json\"),\n                    run: function () {\n                        taskService.openConfig(undefined);\n                        resolve(false);\n                    }\n                }]);\n        });\n    };\n    RunAutomaticTasks = tslib_1.__decorate([\n        tslib_1.__param(0, taskService_1.ITaskService),\n        tslib_1.__param(1, storage_1.IStorageService)\n    ], RunAutomaticTasks);\n    return RunAutomaticTasks;\n}(lifecycle_1.Disposable));\nexports.RunAutomaticTasks = RunAutomaticTasks;\nvar AllowAutomaticTaskRunning = /** @class */ (function (_super) {\n    tslib_1.__extends(AllowAutomaticTaskRunning, _super);\n    function AllowAutomaticTaskRunning(id, label, storageService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.storageService = storageService;\n        return _this;\n    }\n    AllowAutomaticTaskRunning.prototype.run = function (event) {\n        this.storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, true, storage_1.StorageScope.WORKSPACE);\n        return Promise.resolve(undefined);\n    };\n    AllowAutomaticTaskRunning.ID = 'workbench.action.tasks.allowAutomaticRunning';\n    AllowAutomaticTaskRunning.LABEL = nls.localize('workbench.action.tasks.allowAutomaticRunning', \"Allow Automatic Tasks in Folder\");\n    AllowAutomaticTaskRunning = tslib_1.__decorate([\n        tslib_1.__param(2, storage_1.IStorageService)\n    ], AllowAutomaticTaskRunning);\n    return AllowAutomaticTaskRunning;\n}(actions_1.Action));\nexports.AllowAutomaticTaskRunning = AllowAutomaticTaskRunning;\nvar DisallowAutomaticTaskRunning = /** @class */ (function (_super) {\n    tslib_1.__extends(DisallowAutomaticTaskRunning, _super);\n    function DisallowAutomaticTaskRunning(id, label, storageService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.storageService = storageService;\n        return _this;\n    }\n    DisallowAutomaticTaskRunning.prototype.run = function (event) {\n        this.storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, false, storage_1.StorageScope.WORKSPACE);\n        return Promise.resolve(undefined);\n    };\n    DisallowAutomaticTaskRunning.ID = 'workbench.action.tasks.disallowAutomaticRunning';\n    DisallowAutomaticTaskRunning.LABEL = nls.localize('workbench.action.tasks.disallowAutomaticRunning', \"Disallow Automatic Tasks in Folder\");\n    DisallowAutomaticTaskRunning = tslib_1.__decorate([\n        tslib_1.__param(2, storage_1.IStorageService)\n    ], DisallowAutomaticTaskRunning);\n    return DisallowAutomaticTaskRunning;\n}(actions_1.Action));\nexports.DisallowAutomaticTaskRunning = DisallowAutomaticTaskRunning;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITaskService, WorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { forEach } from 'vs/base/common/collections';\nimport { RunOnOptions, Task, TaskRunSource } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\n\nconst ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE = 'tasks.run.allowAutomatic';\n\nexport class RunAutomaticTasks extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IStorageService storageService: IStorageService) {\n\t\tsuper();\n\t\tconst isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, StorageScope.WORKSPACE, undefined);\n\t\tthis.tryRunTasks(isFolderAutomaticAllowed);\n\t}\n\n\tprivate tryRunTasks(isAllowed: boolean | undefined) {\n\t\t// Only run if allowed. Prompting for permission occurs when a user first tries to run a task.\n\t\tif (isAllowed === true) {\n\t\t\tthis.taskService.getWorkspaceTasks(TaskRunSource.FolderOpen).then(workspaceTaskResult => {\n\t\t\t\tlet { tasks } = RunAutomaticTasks.findAutoTasks(this.taskService, workspaceTaskResult);\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\tRunAutomaticTasks.runTasks(this.taskService, tasks);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static runTasks(taskService: ITaskService, tasks: Array<Task | Promise<Task>>) {\n\t\ttasks.forEach(task => {\n\t\t\tif (task instanceof Promise) {\n\t\t\t\ttask.then(promiseResult => {\n\t\t\t\t\tif (promiseResult) {\n\t\t\t\t\t\ttaskService.run(promiseResult);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttaskService.run(task);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static findAutoTasks(taskService: ITaskService, workspaceTaskResult: Map<string, WorkspaceFolderTaskResult>): { tasks: Array<Task | Promise<Task>>, taskNames: Array<string> } {\n\t\tconst tasks = new Array<Task | Promise<Task>>();\n\t\tconst taskNames = new Array<string>();\n\t\tif (workspaceTaskResult) {\n\t\t\tworkspaceTaskResult.forEach(resultElement => {\n\t\t\t\tif (resultElement.set) {\n\t\t\t\t\tresultElement.set.tasks.forEach(task => {\n\t\t\t\t\t\tif (task.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t\ttaskNames.push(task._label);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (resultElement.configurations) {\n\t\t\t\t\tforEach(resultElement.configurations.byIdentifier, (configedTask) => {\n\t\t\t\t\t\tif (configedTask.value.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(new Promise<Task>(resolve => {\n\t\t\t\t\t\t\t\ttaskService.getTask(resultElement.workspaceFolder, configedTask.value._id, true).then(task => resolve(task));\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tif (configedTask.value._label) {\n\t\t\t\t\t\t\t\ttaskNames.push(configedTask.value._label);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskNames.push(configedTask.value.configures.task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn { tasks, taskNames };\n\t}\n\n\tpublic static promptForPermission(taskService: ITaskService, storageService: IStorageService, notificationService: INotificationService,\n\t\tworkspaceTaskResult: Map<string, WorkspaceFolderTaskResult>) {\n\t\tconst isFolderAutomaticAllowed = storageService.getBoolean(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, StorageScope.WORKSPACE, undefined);\n\t\tif (isFolderAutomaticAllowed !== undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet { tasks, taskNames } = RunAutomaticTasks.findAutoTasks(taskService, workspaceTaskResult);\n\t\tif (taskNames.length > 0) {\n\t\t\t// We have automatic tasks, prompt to allow.\n\t\t\tthis.showPrompt(notificationService, storageService, taskService, taskNames).then(allow => {\n\t\t\t\tif (allow) {\n\t\t\t\t\tRunAutomaticTasks.runTasks(taskService, tasks);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static showPrompt(notificationService: INotificationService, storageService: IStorageService, taskService: ITaskService,\n\t\ttaskNames: Array<string>): Promise<boolean> {\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tnotificationService.prompt(Severity.Info, nls.localize('tasks.run.allowAutomatic', \"This folder has tasks ({0}) defined in \\'tasks.json\\' that run automatically when you open this folder. Do you allow automatic tasks to run when you open this folder?\", taskNames.join(', ')),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('allow', \"Allow and run\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\tstorageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, true, StorageScope.WORKSPACE);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('disallow', \"Disallow\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\tstorageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, false, StorageScope.WORKSPACE);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('openTasks', \"Open tasks.json\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\ttaskService.openConfig(undefined);\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t}\n\n}\n\nexport class AllowAutomaticTaskRunning extends Action {\n\n\tpublic static readonly ID = 'workbench.action.tasks.allowAutomaticRunning';\n\tpublic static readonly LABEL = nls.localize('workbench.action.tasks.allowAutomaticRunning', \"Allow Automatic Tasks in Folder\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, true, StorageScope.WORKSPACE);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class DisallowAutomaticTaskRunning extends Action {\n\n\tpublic static readonly ID = 'workbench.action.tasks.disallowAutomaticRunning';\n\tpublic static readonly LABEL = nls.localize('workbench.action.tasks.disallowAutomaticRunning', \"Disallow Automatic Tasks in Folder\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.storageService.store(ARE_AUTOMATIC_TASKS_ALLOWED_IN_WORKSPACE, false, StorageScope.WORKSPACE);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}