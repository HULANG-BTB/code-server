{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/request/node/requestService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/request/node/requestService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar request_1 = require(\"vs/base/node/request\");\nvar proxy_1 = require(\"vs/base/node/proxy\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar log_1 = require(\"vs/platform/log/common/log\");\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nvar RequestService = /** @class */ (function () {\n    function RequestService(configurationService, logService) {\n        var _this = this;\n        this.logService = logService;\n        this.disposables = [];\n        this.configure(configurationService.getValue());\n        configurationService.onDidChangeConfiguration(function () { return _this.configure(configurationService.getValue()); }, this, this.disposables);\n    }\n    RequestService.prototype.configure = function (config) {\n        this.proxyUrl = config.http && config.http.proxy;\n        this.strictSSL = !!(config.http && config.http.proxyStrictSSL);\n        this.authorization = config.http && config.http.proxyAuthorization;\n    };\n    RequestService.prototype.request = function (options, token, requestFn) {\n        var _this = this;\n        if (requestFn === void 0) { requestFn = request_1.request; }\n        this.logService.trace('RequestService#request', options.url);\n        var _a = this, proxyUrl = _a.proxyUrl, strictSSL = _a.strictSSL;\n        var agentPromise = options.agent ? Promise.resolve(options.agent) : Promise.resolve(proxy_1.getProxyAgent(options.url || '', { proxyUrl: proxyUrl, strictSSL: strictSSL }));\n        return agentPromise.then(function (agent) {\n            options.agent = agent;\n            options.strictSSL = strictSSL;\n            if (_this.authorization) {\n                options.headers = objects_1.assign(options.headers || {}, { 'Proxy-Authorization': _this.authorization });\n            }\n            return requestFn(options, token);\n        });\n    };\n    RequestService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, log_1.ILogService)\n    ], RequestService);\n    return RequestService;\n}());\nexports.RequestService = RequestService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/request/node/requestService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/request/node/requestService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,kDAAgD;AAChD,gDAAmG;AACnG,4CAAmD;AAEnD,gFAAuF;AACvF,kDAAyD;AAGzD;;;GAGG;AACH;IASC,wBACwB,oBAA2C,EACpC,UAAuB;QAFtD,iBAMC;QAJ8B,eAAU,GAAV,UAAU,CAAa;QAJ9C,gBAAW,GAAkB,EAAE,CAAC;QAMvC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,QAAQ,EAAsB,CAAC,CAAC;QACpE,oBAAoB,CAAC,wBAAwB,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,EAA/C,CAA+C,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9H,CAAC;IAEO,kCAAS,GAAjB,UAAkB,MAA0B;QAC3C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACjD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACpE,CAAC;IAED,gCAAO,GAAP,UAAQ,OAAwB,EAAE,KAAwB,EAAE,SAAqC;QAAjG,iBAgBC;QAhB2D,0BAAA,EAAA,YAA8B,iBAAO;QAChG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAEvD,IAAA,SAA8B,EAA5B,sBAAQ,EAAE,wBAAkB,CAAC;QACrC,IAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAa,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC,CAAC;QAEjJ,OAAO,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK;YAC7B,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;YACtB,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;YAE9B,IAAI,KAAI,CAAC,aAAa,EAAE;gBACvB,OAAO,CAAC,OAAO,GAAG,gBAAM,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,EAAE,EAAE,qBAAqB,EAAE,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC;aAC/F;YAED,OAAO,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC;IAvCW,cAAc;QAUxB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,iBAAW,CAAA;OAXD,cAAc,CAwC1B;IAAD,qBAAC;CAAA,AAxCD,IAwCC;AAxCY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { assign } from 'vs/base/common/objects';\nimport { IRequestOptions, IRequestContext, IRequestFunction, request } from 'vs/base/node/request';\nimport { getProxyAgent } from 'vs/base/node/proxy';\nimport { IRequestService, IHTTPConfiguration } from 'vs/platform/request/node/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService implements IRequestService {\n\n\t_serviceBrand: any;\n\n\tprivate proxyUrl?: string;\n\tprivate strictSSL: boolean;\n\tprivate authorization?: string;\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis.configure(configurationService.getValue<IHTTPConfiguration>());\n\t\tconfigurationService.onDidChangeConfiguration(() => this.configure(configurationService.getValue()), this, this.disposables);\n\t}\n\n\tprivate configure(config: IHTTPConfiguration) {\n\t\tthis.proxyUrl = config.http && config.http.proxy;\n\t\tthis.strictSSL = !!(config.http && config.http.proxyStrictSSL);\n\t\tthis.authorization = config.http && config.http.proxyAuthorization;\n\t}\n\n\trequest(options: IRequestOptions, token: CancellationToken, requestFn: IRequestFunction = request): Promise<IRequestContext> {\n\t\tthis.logService.trace('RequestService#request', options.url);\n\n\t\tconst { proxyUrl, strictSSL } = this;\n\t\tconst agentPromise = options.agent ? Promise.resolve(options.agent) : Promise.resolve(getProxyAgent(options.url || '', { proxyUrl, strictSSL }));\n\n\t\treturn agentPromise.then(agent => {\n\t\t\toptions.agent = agent;\n\t\t\toptions.strictSSL = strictSSL;\n\n\t\t\tif (this.authorization) {\n\t\t\t\toptions.headers = assign(options.headers || {}, { 'Proxy-Authorization': this.authorization });\n\t\t\t}\n\n\t\t\treturn requestFn(options, token);\n\t\t});\n\t}\n}\n"]}]}