{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/indentRangeProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/indentRangeProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar foldingRanges_1 = require(\"vs/editor/contrib/folding/foldingRanges\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;\nexports.ID_INDENT_PROVIDER = 'indent';\nvar IndentRangeProvider = /** @class */ (function () {\n    function IndentRangeProvider(editorModel) {\n        this.editorModel = editorModel;\n        this.id = exports.ID_INDENT_PROVIDER;\n    }\n    IndentRangeProvider.prototype.dispose = function () {\n    };\n    IndentRangeProvider.prototype.compute = function (cancelationToken) {\n        var foldingRules = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);\n        var offSide = foldingRules && !!foldingRules.offSide;\n        var markers = foldingRules && foldingRules.markers;\n        return Promise.resolve(computeRanges(this.editorModel, offSide, markers));\n    };\n    return IndentRangeProvider;\n}());\nexports.IndentRangeProvider = IndentRangeProvider;\n// public only for testing\nvar RangesCollector = /** @class */ (function () {\n    function RangesCollector(foldingRangesLimit) {\n        this._startIndexes = [];\n        this._endIndexes = [];\n        this._indentOccurrences = [];\n        this._length = 0;\n        this._foldingRangesLimit = foldingRangesLimit;\n    }\n    RangesCollector.prototype.insertFirst = function (startLineNumber, endLineNumber, indent) {\n        if (startLineNumber > foldingRanges_1.MAX_LINE_NUMBER || endLineNumber > foldingRanges_1.MAX_LINE_NUMBER) {\n            return;\n        }\n        var index = this._length;\n        this._startIndexes[index] = startLineNumber;\n        this._endIndexes[index] = endLineNumber;\n        this._length++;\n        if (indent < 1000) {\n            this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n        }\n    };\n    RangesCollector.prototype.toIndentRanges = function (model) {\n        if (this._length <= this._foldingRangesLimit) {\n            // reverse and create arrays of the exact length\n            var startIndexes = new Uint32Array(this._length);\n            var endIndexes = new Uint32Array(this._length);\n            for (var i = this._length - 1, k = 0; i >= 0; i--, k++) {\n                startIndexes[k] = this._startIndexes[i];\n                endIndexes[k] = this._endIndexes[i];\n            }\n            return new foldingRanges_1.FoldingRegions(startIndexes, endIndexes);\n        }\n        else {\n            var entries = 0;\n            var maxIndent = this._indentOccurrences.length;\n            for (var i = 0; i < this._indentOccurrences.length; i++) {\n                var n = this._indentOccurrences[i];\n                if (n) {\n                    if (n + entries > this._foldingRangesLimit) {\n                        maxIndent = i;\n                        break;\n                    }\n                    entries += n;\n                }\n            }\n            var tabSize = model.getOptions().tabSize;\n            // reverse and create arrays of the exact length\n            var startIndexes = new Uint32Array(this._foldingRangesLimit);\n            var endIndexes = new Uint32Array(this._foldingRangesLimit);\n            for (var i = this._length - 1, k = 0; i >= 0; i--) {\n                var startIndex = this._startIndexes[i];\n                var lineContent = model.getLineContent(startIndex);\n                var indent = textModel_1.TextModel.computeIndentLevel(lineContent, tabSize);\n                if (indent < maxIndent || (indent === maxIndent && entries++ < this._foldingRangesLimit)) {\n                    startIndexes[k] = startIndex;\n                    endIndexes[k] = this._endIndexes[i];\n                    k++;\n                }\n            }\n            return new foldingRanges_1.FoldingRegions(startIndexes, endIndexes);\n        }\n    };\n    return RangesCollector;\n}());\nexports.RangesCollector = RangesCollector;\nfunction computeRanges(model, offSide, markers, foldingRangesLimit) {\n    if (foldingRangesLimit === void 0) { foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT; }\n    var tabSize = model.getOptions().tabSize;\n    var result = new RangesCollector(foldingRangesLimit);\n    var pattern = undefined;\n    if (markers) {\n        pattern = new RegExp(\"(\" + markers.start.source + \")|(?:\" + markers.end.source + \")\");\n    }\n    var previousRegions = [];\n    previousRegions.push({ indent: -1, line: model.getLineCount() + 1, marker: false }); // sentinel, to make sure there's at least one entry\n    for (var line = model.getLineCount(); line > 0; line--) {\n        var lineContent = model.getLineContent(line);\n        var indent = textModel_1.TextModel.computeIndentLevel(lineContent, tabSize);\n        var previous = previousRegions[previousRegions.length - 1];\n        if (indent === -1) {\n            if (offSide && !previous.marker) {\n                // for offSide languages, empty lines are associated to the next block\n                previous.line = line;\n            }\n            continue; // only whitespace\n        }\n        var m = void 0;\n        if (pattern && (m = lineContent.match(pattern))) {\n            // folding pattern match\n            if (m[1]) { // start pattern match\n                // discard all regions until the folding pattern\n                var i = previousRegions.length - 1;\n                while (i > 0 && !previousRegions[i].marker) {\n                    i--;\n                }\n                if (i > 0) {\n                    previousRegions.length = i + 1;\n                    previous = previousRegions[i];\n                    // new folding range from pattern, includes the end line\n                    result.insertFirst(line, previous.line, indent);\n                    previous.marker = false;\n                    previous.indent = indent;\n                    previous.line = line;\n                    continue;\n                }\n                else {\n                    // no end marker found, treat line as a regular line\n                }\n            }\n            else { // end pattern match\n                previousRegions.push({ indent: -2, line: line, marker: true });\n                continue;\n            }\n        }\n        if (previous.indent > indent) {\n            // discard all regions with larger indent\n            do {\n                previousRegions.pop();\n                previous = previousRegions[previousRegions.length - 1];\n            } while (previous.indent > indent);\n            // new folding range\n            var endLineNumber = previous.line - 1;\n            if (endLineNumber - line >= 1) { // needs at east size 1\n                result.insertFirst(line, endLineNumber, indent);\n            }\n        }\n        if (previous.indent === indent) {\n            previous.line = line;\n        }\n        else { // previous.indent < indent\n            // new region with a bigger indent\n            previousRegions.push({ indent: indent, line: line, marker: false });\n        }\n    }\n    return result.toIndentRanges(model);\n}\nexports.computeRanges = computeRanges;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/indentRangeProvider.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/indentRangeProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel } from 'vs/editor/common/model';\nimport { FoldingMarkers } from 'vs/editor/common/modes/languageConfiguration';\nimport { FoldingRegions, MAX_LINE_NUMBER } from 'vs/editor/contrib/folding/foldingRanges';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { RangeProvider } from './folding';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nconst MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;\n\nexport const ID_INDENT_PROVIDER = 'indent';\n\nexport class IndentRangeProvider implements RangeProvider {\n\treadonly id = ID_INDENT_PROVIDER;\n\n\tconstructor(private readonly editorModel: ITextModel) {\n\t}\n\n\tdispose() {\n\t}\n\n\tcompute(cancelationToken: CancellationToken): Promise<FoldingRegions> {\n\t\tlet foldingRules = LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);\n\t\tlet offSide = foldingRules && !!foldingRules.offSide;\n\t\tlet markers = foldingRules && foldingRules.markers;\n\t\treturn Promise.resolve(computeRanges(this.editorModel, offSide, markers));\n\t}\n}\n\n// public only for testing\nexport class RangesCollector {\n\tprivate readonly _startIndexes: number[];\n\tprivate readonly _endIndexes: number[];\n\tprivate readonly _indentOccurrences: number[];\n\tprivate _length: number;\n\tprivate readonly _foldingRangesLimit: number;\n\n\tconstructor(foldingRangesLimit: number) {\n\t\tthis._startIndexes = [];\n\t\tthis._endIndexes = [];\n\t\tthis._indentOccurrences = [];\n\t\tthis._length = 0;\n\t\tthis._foldingRangesLimit = foldingRangesLimit;\n\t}\n\n\tpublic insertFirst(startLineNumber: number, endLineNumber: number, indent: number) {\n\t\tif (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = this._length;\n\t\tthis._startIndexes[index] = startLineNumber;\n\t\tthis._endIndexes[index] = endLineNumber;\n\t\tthis._length++;\n\t\tif (indent < 1000) {\n\t\t\tthis._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n\t\t}\n\t}\n\n\tpublic toIndentRanges(model: ITextModel) {\n\t\tif (this._length <= this._foldingRangesLimit) {\n\t\t\t// reverse and create arrays of the exact length\n\t\t\tlet startIndexes = new Uint32Array(this._length);\n\t\t\tlet endIndexes = new Uint32Array(this._length);\n\t\t\tfor (let i = this._length - 1, k = 0; i >= 0; i-- , k++) {\n\t\t\t\tstartIndexes[k] = this._startIndexes[i];\n\t\t\t\tendIndexes[k] = this._endIndexes[i];\n\t\t\t}\n\t\t\treturn new FoldingRegions(startIndexes, endIndexes);\n\t\t} else {\n\t\t\tlet entries = 0;\n\t\t\tlet maxIndent = this._indentOccurrences.length;\n\t\t\tfor (let i = 0; i < this._indentOccurrences.length; i++) {\n\t\t\t\tlet n = this._indentOccurrences[i];\n\t\t\t\tif (n) {\n\t\t\t\t\tif (n + entries > this._foldingRangesLimit) {\n\t\t\t\t\t\tmaxIndent = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tentries += n;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst tabSize = model.getOptions().tabSize;\n\t\t\t// reverse and create arrays of the exact length\n\t\t\tlet startIndexes = new Uint32Array(this._foldingRangesLimit);\n\t\t\tlet endIndexes = new Uint32Array(this._foldingRangesLimit);\n\t\t\tfor (let i = this._length - 1, k = 0; i >= 0; i--) {\n\t\t\t\tlet startIndex = this._startIndexes[i];\n\t\t\t\tlet lineContent = model.getLineContent(startIndex);\n\t\t\t\tlet indent = TextModel.computeIndentLevel(lineContent, tabSize);\n\t\t\t\tif (indent < maxIndent || (indent === maxIndent && entries++ < this._foldingRangesLimit)) {\n\t\t\t\t\tstartIndexes[k] = startIndex;\n\t\t\t\t\tendIndexes[k] = this._endIndexes[i];\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new FoldingRegions(startIndexes, endIndexes);\n\t\t}\n\n\t}\n}\n\n\ninterface PreviousRegion { indent: number; line: number; marker: boolean; }\n\nexport function computeRanges(model: ITextModel, offSide: boolean, markers?: FoldingMarkers, foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT): FoldingRegions {\n\tconst tabSize = model.getOptions().tabSize;\n\tlet result = new RangesCollector(foldingRangesLimit);\n\n\tlet pattern: RegExp | undefined = undefined;\n\tif (markers) {\n\t\tpattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);\n\t}\n\n\tlet previousRegions: PreviousRegion[] = [];\n\tpreviousRegions.push({ indent: -1, line: model.getLineCount() + 1, marker: false }); // sentinel, to make sure there's at least one entry\n\n\tfor (let line = model.getLineCount(); line > 0; line--) {\n\t\tlet lineContent = model.getLineContent(line);\n\t\tlet indent = TextModel.computeIndentLevel(lineContent, tabSize);\n\t\tlet previous = previousRegions[previousRegions.length - 1];\n\t\tif (indent === -1) {\n\t\t\tif (offSide && !previous.marker) {\n\t\t\t\t// for offSide languages, empty lines are associated to the next block\n\t\t\t\tprevious.line = line;\n\t\t\t}\n\t\t\tcontinue; // only whitespace\n\t\t}\n\t\tlet m;\n\t\tif (pattern && (m = lineContent.match(pattern))) {\n\t\t\t// folding pattern match\n\t\t\tif (m[1]) { // start pattern match\n\t\t\t\t// discard all regions until the folding pattern\n\t\t\t\tlet i = previousRegions.length - 1;\n\t\t\t\twhile (i > 0 && !previousRegions[i].marker) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tpreviousRegions.length = i + 1;\n\t\t\t\t\tprevious = previousRegions[i];\n\n\t\t\t\t\t// new folding range from pattern, includes the end line\n\t\t\t\t\tresult.insertFirst(line, previous.line, indent);\n\t\t\t\t\tprevious.marker = false;\n\t\t\t\t\tprevious.indent = indent;\n\t\t\t\t\tprevious.line = line;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// no end marker found, treat line as a regular line\n\t\t\t\t}\n\t\t\t} else { // end pattern match\n\t\t\t\tpreviousRegions.push({ indent: -2, line, marker: true });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (previous.indent > indent) {\n\t\t\t// discard all regions with larger indent\n\t\t\tdo {\n\t\t\t\tpreviousRegions.pop();\n\t\t\t\tprevious = previousRegions[previousRegions.length - 1];\n\t\t\t} while (previous.indent > indent);\n\n\t\t\t// new folding range\n\t\t\tlet endLineNumber = previous.line - 1;\n\t\t\tif (endLineNumber - line >= 1) { // needs at east size 1\n\t\t\t\tresult.insertFirst(line, endLineNumber, indent);\n\t\t\t}\n\t\t}\n\t\tif (previous.indent === indent) {\n\t\t\tprevious.line = line;\n\t\t} else { // previous.indent < indent\n\t\t\t// new region with a bigger indent\n\t\t\tpreviousRegions.push({ indent, line, marker: false });\n\t\t}\n\t}\n\treturn result.toIndentRanges(model);\n}\n"]}]}