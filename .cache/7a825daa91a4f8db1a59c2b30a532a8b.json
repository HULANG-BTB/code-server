{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesModels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesModels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar event_1 = require(\"vs/base/common/event\");\nvar json_1 = require(\"vs/base/common/json\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map = require(\"vs/base/common/map\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar nls = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar types_1 = require(\"vs/base/common/types\");\nexports.nullRange = { startLineNumber: -1, startColumn: -1, endLineNumber: -1, endColumn: -1 };\nfunction isNullRange(range) { return range.startLineNumber === -1 && range.startColumn === -1 && range.endLineNumber === -1 && range.endColumn === -1; }\nexports.isNullRange = isNullRange;\nvar AbstractSettingsModel = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractSettingsModel, _super);\n    function AbstractSettingsModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._currentResultGroups = new Map();\n        return _this;\n    }\n    AbstractSettingsModel.prototype.updateResultGroup = function (id, resultGroup) {\n        if (resultGroup) {\n            this._currentResultGroups.set(id, resultGroup);\n        }\n        else {\n            this._currentResultGroups.delete(id);\n        }\n        this.removeDuplicateResults();\n        return this.update();\n    };\n    /**\n     * Remove duplicates between result groups, preferring results in earlier groups\n     */\n    AbstractSettingsModel.prototype.removeDuplicateResults = function () {\n        var _this = this;\n        var settingKeys = new Set();\n        map.keys(this._currentResultGroups)\n            .sort(function (a, b) { return _this._currentResultGroups.get(a).order - _this._currentResultGroups.get(b).order; })\n            .forEach(function (groupId) {\n            var group = _this._currentResultGroups.get(groupId);\n            group.result.filterMatches = group.result.filterMatches.filter(function (s) { return !settingKeys.has(s.setting.key); });\n            group.result.filterMatches.forEach(function (s) { return settingKeys.add(s.setting.key); });\n        });\n    };\n    AbstractSettingsModel.prototype.filterSettings = function (filter, groupFilter, settingMatcher) {\n        var allGroups = this.filterGroups;\n        var filterMatches = [];\n        for (var _i = 0, allGroups_1 = allGroups; _i < allGroups_1.length; _i++) {\n            var group = allGroups_1[_i];\n            var groupMatched = groupFilter(group);\n            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {\n                var section = _b[_a];\n                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {\n                    var setting = _d[_c];\n                    var settingMatchResult = settingMatcher(setting, group);\n                    if (groupMatched || settingMatchResult) {\n                        filterMatches.push({\n                            setting: setting,\n                            matches: settingMatchResult && settingMatchResult.matches,\n                            score: settingMatchResult ? settingMatchResult.score : 0\n                        });\n                    }\n                }\n            }\n        }\n        return filterMatches.sort(function (a, b) { return b.score - a.score; });\n    };\n    AbstractSettingsModel.prototype.getPreference = function (key) {\n        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {\n                var section = _c[_b];\n                for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {\n                    var setting = _e[_d];\n                    if (key === setting.key) {\n                        return setting;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    AbstractSettingsModel.prototype.collectMetadata = function (groups) {\n        var metadata = Object.create(null);\n        var hasMetadata = false;\n        groups.forEach(function (g) {\n            if (g.result.metadata) {\n                metadata[g.id] = g.result.metadata;\n                hasMetadata = true;\n            }\n        });\n        return hasMetadata ? metadata : null;\n    };\n    Object.defineProperty(AbstractSettingsModel.prototype, \"filterGroups\", {\n        get: function () {\n            return this.settingsGroups;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractSettingsModel;\n}(editor_1.EditorModel));\nexports.AbstractSettingsModel = AbstractSettingsModel;\nvar SettingsEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsEditorModel, _super);\n    function SettingsEditorModel(reference, _configurationTarget) {\n        var _this = _super.call(this) || this;\n        _this._configurationTarget = _configurationTarget;\n        _this._onDidChangeGroups = _this._register(new event_1.Emitter());\n        _this.onDidChangeGroups = _this._onDidChangeGroups.event;\n        _this.settingsModel = reference.object.textEditorModel;\n        _this._register(_this.onDispose(function () { return reference.dispose(); }));\n        _this._register(_this.settingsModel.onDidChangeContent(function () {\n            _this._settingsGroups = undefined;\n            _this._onDidChangeGroups.fire();\n        }));\n        return _this;\n    }\n    Object.defineProperty(SettingsEditorModel.prototype, \"uri\", {\n        get: function () {\n            return this.settingsModel.uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditorModel.prototype, \"configurationTarget\", {\n        get: function () {\n            return this._configurationTarget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditorModel.prototype, \"settingsGroups\", {\n        get: function () {\n            if (!this._settingsGroups) {\n                this.parse();\n            }\n            return this._settingsGroups;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditorModel.prototype, \"content\", {\n        get: function () {\n            return this.settingsModel.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SettingsEditorModel.prototype.findValueMatches = function (filter, setting) {\n        return this.settingsModel.findMatches(filter, setting.valueRange, false, false, null, false).map(function (match) { return match.range; });\n    };\n    SettingsEditorModel.prototype.isSettingsProperty = function (property, previousParents) {\n        return previousParents.length === 0; // Settings is root\n    };\n    SettingsEditorModel.prototype.parse = function () {\n        var _this = this;\n        this._settingsGroups = parse(this.settingsModel, function (property, previousParents) { return _this.isSettingsProperty(property, previousParents); });\n    };\n    SettingsEditorModel.prototype.update = function () {\n        var resultGroups = map.values(this._currentResultGroups);\n        if (!resultGroups.length) {\n            return undefined;\n        }\n        // Transform resultGroups into IFilterResult - ISetting ranges are already correct here\n        var filteredSettings = [];\n        var matches = [];\n        resultGroups.forEach(function (group) {\n            group.result.filterMatches.forEach(function (filterMatch) {\n                filteredSettings.push(filterMatch.setting);\n                if (filterMatch.matches) {\n                    matches.push.apply(matches, filterMatch.matches);\n                }\n            });\n        });\n        var filteredGroup;\n        var modelGroup = this.settingsGroups[0]; // Editable model has one or zero groups\n        if (modelGroup) {\n            filteredGroup = {\n                id: modelGroup.id,\n                range: modelGroup.range,\n                sections: [{\n                        settings: filteredSettings\n                    }],\n                title: modelGroup.title,\n                titleRange: modelGroup.titleRange,\n                contributedByExtension: !!modelGroup.contributedByExtension\n            };\n        }\n        var metadata = this.collectMetadata(resultGroups);\n        return {\n            allGroups: this.settingsGroups,\n            filteredGroups: filteredGroup ? [filteredGroup] : [],\n            matches: matches,\n            metadata: metadata\n        };\n    };\n    return SettingsEditorModel;\n}(AbstractSettingsModel));\nexports.SettingsEditorModel = SettingsEditorModel;\nvar Settings2EditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(Settings2EditorModel, _super);\n    function Settings2EditorModel(_defaultSettings, configurationService) {\n        var _this = _super.call(this) || this;\n        _this._defaultSettings = _defaultSettings;\n        _this._onDidChangeGroups = _this._register(new event_1.Emitter());\n        _this.onDidChangeGroups = _this._onDidChangeGroups.event;\n        _this.dirty = false;\n        _this._register(configurationService.onDidChangeConfiguration(function (e) {\n            if (e.source === configuration_1.ConfigurationTarget.DEFAULT) {\n                _this.dirty = true;\n                _this._onDidChangeGroups.fire();\n            }\n        }));\n        _this._register(platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidSchemaChange(function (e) {\n            _this.dirty = true;\n            _this._onDidChangeGroups.fire();\n        }));\n        return _this;\n    }\n    Object.defineProperty(Settings2EditorModel.prototype, \"filterGroups\", {\n        get: function () {\n            // Don't filter \"commonly used\"\n            return this.settingsGroups.slice(1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Settings2EditorModel.prototype, \"settingsGroups\", {\n        get: function () {\n            var groups = this._defaultSettings.getSettingsGroups(this.dirty);\n            this.dirty = false;\n            return groups;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Settings2EditorModel.prototype.findValueMatches = function (filter, setting) {\n        // TODO @roblou\n        return [];\n    };\n    Settings2EditorModel.prototype.update = function () {\n        throw new Error('Not supported');\n    };\n    Settings2EditorModel = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], Settings2EditorModel);\n    return Settings2EditorModel;\n}(AbstractSettingsModel));\nexports.Settings2EditorModel = Settings2EditorModel;\nfunction parse(model, isSettingsProperty) {\n    var settings = [];\n    var overrideSetting = null;\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    var settingsPropertyIndex = -1;\n    var range = {\n        startLineNumber: 0,\n        startColumn: 0,\n        endLineNumber: 0,\n        endColumn: 0\n    };\n    function onValue(value, offset, length) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n        if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n            // settings value started\n            var setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n            if (setting) {\n                var valueStartPosition = model.getPositionAt(offset);\n                var valueEndPosition = model.getPositionAt(offset + length);\n                setting.value = value;\n                setting.valueRange = {\n                    startLineNumber: valueStartPosition.lineNumber,\n                    startColumn: valueStartPosition.column,\n                    endLineNumber: valueEndPosition.lineNumber,\n                    endColumn: valueEndPosition.column\n                };\n                setting.range = objects_1.assign(setting.range, {\n                    endLineNumber: valueEndPosition.lineNumber,\n                    endColumn: valueEndPosition.column\n                });\n            }\n        }\n    }\n    var visitor = {\n        onObjectBegin: function (offset, length) {\n            if (isSettingsProperty(currentProperty, previousParents)) {\n                // Settings started\n                settingsPropertyIndex = previousParents.length;\n                var position = model.getPositionAt(offset);\n                range.startLineNumber = position.lineNumber;\n                range.startColumn = position.column;\n            }\n            var object = {};\n            onValue(object, offset, length);\n            currentParent = object;\n            currentProperty = null;\n            previousParents.push(currentParent);\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentProperty = name;\n            if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n                // setting started\n                var settingStartPosition = model.getPositionAt(offset);\n                var setting = {\n                    description: [],\n                    descriptionIsMarkdown: false,\n                    key: name,\n                    keyRange: {\n                        startLineNumber: settingStartPosition.lineNumber,\n                        startColumn: settingStartPosition.column + 1,\n                        endLineNumber: settingStartPosition.lineNumber,\n                        endColumn: settingStartPosition.column + length\n                    },\n                    range: {\n                        startLineNumber: settingStartPosition.lineNumber,\n                        startColumn: settingStartPosition.column,\n                        endLineNumber: 0,\n                        endColumn: 0\n                    },\n                    value: null,\n                    valueRange: exports.nullRange,\n                    descriptionRanges: [],\n                    overrides: [],\n                    overrideOf: types_1.withNullAsUndefined(overrideSetting)\n                };\n                if (previousParents.length === settingsPropertyIndex + 1) {\n                    settings.push(setting);\n                    if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(name)) {\n                        overrideSetting = setting;\n                    }\n                }\n                else {\n                    overrideSetting.overrides.push(setting);\n                }\n            }\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent = previousParents.pop();\n            if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n                // setting ended\n                var setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n                if (setting) {\n                    var valueEndPosition = model.getPositionAt(offset + length);\n                    setting.valueRange = objects_1.assign(setting.valueRange, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                    setting.range = objects_1.assign(setting.range, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                }\n                if (previousParents.length === settingsPropertyIndex + 1) {\n                    overrideSetting = null;\n                }\n            }\n            if (previousParents.length === settingsPropertyIndex) {\n                // settings ended\n                var position = model.getPositionAt(offset);\n                range.endLineNumber = position.lineNumber;\n                range.endColumn = position.column;\n            }\n        },\n        onArrayBegin: function (offset, length) {\n            var array = [];\n            onValue(array, offset, length);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent = previousParents.pop();\n            if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n                // setting value ended\n                var setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n                if (setting) {\n                    var valueEndPosition = model.getPositionAt(offset + length);\n                    setting.valueRange = objects_1.assign(setting.valueRange, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                    setting.range = objects_1.assign(setting.range, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                }\n            }\n        },\n        onLiteralValue: onValue,\n        onError: function (error) {\n            var setting = settings[settings.length - 1];\n            if (setting && (isNullRange(setting.range) || isNullRange(setting.keyRange) || isNullRange(setting.valueRange))) {\n                settings.pop();\n            }\n        }\n    };\n    if (!model.isDisposed()) {\n        json_1.visit(model.getValue(), visitor);\n    }\n    return settings.length > 0 ? [{\n            sections: [\n                {\n                    settings: settings\n                }\n            ],\n            title: '',\n            titleRange: exports.nullRange,\n            range: range\n        }] : [];\n}\nvar WorkspaceConfigurationEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceConfigurationEditorModel, _super);\n    function WorkspaceConfigurationEditorModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(WorkspaceConfigurationEditorModel.prototype, \"configurationGroups\", {\n        get: function () {\n            return this._configurationGroups;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceConfigurationEditorModel.prototype.parse = function () {\n        _super.prototype.parse.call(this);\n        this._configurationGroups = parse(this.settingsModel, function (property, previousParents) { return previousParents.length === 0; });\n    };\n    WorkspaceConfigurationEditorModel.prototype.isSettingsProperty = function (property, previousParents) {\n        return property === 'settings' && previousParents.length === 1;\n    };\n    return WorkspaceConfigurationEditorModel;\n}(SettingsEditorModel));\nexports.WorkspaceConfigurationEditorModel = WorkspaceConfigurationEditorModel;\nvar DefaultSettings = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultSettings, _super);\n    function DefaultSettings(_mostCommonlyUsedSettingsKeys, target) {\n        var _this = _super.call(this) || this;\n        _this._mostCommonlyUsedSettingsKeys = _mostCommonlyUsedSettingsKeys;\n        _this.target = target;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        return _this;\n    }\n    DefaultSettings.prototype.getContent = function (forceUpdate) {\n        if (forceUpdate === void 0) { forceUpdate = false; }\n        if (!this._content || forceUpdate) {\n            this.initialize();\n        }\n        return this._content;\n    };\n    DefaultSettings.prototype.getSettingsGroups = function (forceUpdate) {\n        if (forceUpdate === void 0) { forceUpdate = false; }\n        if (!this._allSettingsGroups || forceUpdate) {\n            this.initialize();\n        }\n        return this._allSettingsGroups;\n    };\n    DefaultSettings.prototype.initialize = function () {\n        this._allSettingsGroups = this.parse();\n        this._content = this.toContent(this._allSettingsGroups);\n    };\n    DefaultSettings.prototype.parse = function () {\n        var settingsGroups = this.getRegisteredGroups();\n        this.initAllSettingsMap(settingsGroups);\n        var mostCommonlyUsed = this.getMostCommonlyUsedSettings(settingsGroups);\n        return [mostCommonlyUsed].concat(settingsGroups);\n    };\n    DefaultSettings.prototype.getRegisteredGroups = function () {\n        var _this = this;\n        var configurations = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurations().slice();\n        var groups = this.removeEmptySettingsGroups(configurations.sort(this.compareConfigurationNodes)\n            .reduce(function (result, config, index, array) { return _this.parseConfig(config, result, array); }, []));\n        return this.sortGroups(groups);\n    };\n    DefaultSettings.prototype.sortGroups = function (groups) {\n        groups.forEach(function (group) {\n            group.sections.forEach(function (section) {\n                section.settings.sort(function (a, b) { return a.key.localeCompare(b.key); });\n            });\n        });\n        return groups;\n    };\n    DefaultSettings.prototype.initAllSettingsMap = function (allSettingsGroups) {\n        this._settingsByName = new Map();\n        for (var _i = 0, allSettingsGroups_1 = allSettingsGroups; _i < allSettingsGroups_1.length; _i++) {\n            var group = allSettingsGroups_1[_i];\n            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {\n                var section = _b[_a];\n                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {\n                    var setting = _d[_c];\n                    this._settingsByName.set(setting.key, setting);\n                }\n            }\n        }\n    };\n    DefaultSettings.prototype.getMostCommonlyUsedSettings = function (allSettingsGroups) {\n        var _this = this;\n        var settings = arrays_1.coalesce(this._mostCommonlyUsedSettingsKeys.map(function (key) {\n            var setting = _this._settingsByName.get(key);\n            if (setting) {\n                return {\n                    description: setting.description,\n                    key: setting.key,\n                    value: setting.value,\n                    keyRange: exports.nullRange,\n                    range: exports.nullRange,\n                    valueRange: exports.nullRange,\n                    overrides: [],\n                    scope: configurationRegistry_1.ConfigurationScope.RESOURCE,\n                    type: setting.type,\n                    enum: setting.enum,\n                    enumDescriptions: setting.enumDescriptions,\n                    descriptionRanges: []\n                };\n            }\n            return null;\n        }));\n        return {\n            id: 'mostCommonlyUsed',\n            range: exports.nullRange,\n            title: nls.localize('commonlyUsed', \"Commonly Used\"),\n            titleRange: exports.nullRange,\n            sections: [\n                {\n                    settings: settings\n                }\n            ]\n        };\n    };\n    DefaultSettings.prototype.parseConfig = function (config, result, configurations, settingsGroup, seenSettings) {\n        var _this = this;\n        seenSettings = seenSettings ? seenSettings : {};\n        var title = config.title;\n        if (!title) {\n            var configWithTitleAndSameId = arrays_1.find(configurations, function (c) { return (c.id === config.id) && c.title; });\n            if (configWithTitleAndSameId) {\n                title = configWithTitleAndSameId.title;\n            }\n        }\n        if (title) {\n            if (!settingsGroup) {\n                settingsGroup = arrays_1.find(result, function (g) { return g.title === title; });\n                if (!settingsGroup) {\n                    settingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: title || '', titleRange: exports.nullRange, range: exports.nullRange, contributedByExtension: !!config.contributedByExtension };\n                    result.push(settingsGroup);\n                }\n            }\n            else {\n                settingsGroup.sections[settingsGroup.sections.length - 1].title = title;\n            }\n        }\n        if (config.properties) {\n            if (!settingsGroup) {\n                settingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: config.id || '', titleRange: exports.nullRange, range: exports.nullRange, contributedByExtension: !!config.contributedByExtension };\n                result.push(settingsGroup);\n            }\n            var configurationSettings = [];\n            for (var _i = 0, _a = settingsGroup.sections[settingsGroup.sections.length - 1].settings.concat(this.parseSettings(config.properties)); _i < _a.length; _i++) {\n                var setting = _a[_i];\n                if (!seenSettings[setting.key]) {\n                    configurationSettings.push(setting);\n                    seenSettings[setting.key] = true;\n                }\n            }\n            if (configurationSettings.length) {\n                settingsGroup.sections[settingsGroup.sections.length - 1].settings = configurationSettings;\n            }\n        }\n        if (config.allOf) {\n            config.allOf.forEach(function (c) { return _this.parseConfig(c, result, configurations, settingsGroup, seenSettings); });\n        }\n        return result;\n    };\n    DefaultSettings.prototype.removeEmptySettingsGroups = function (settingsGroups) {\n        var result = [];\n        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {\n            var settingsGroup = settingsGroups_1[_i];\n            settingsGroup.sections = settingsGroup.sections.filter(function (section) { return section.settings.length > 0; });\n            if (settingsGroup.sections.length) {\n                result.push(settingsGroup);\n            }\n        }\n        return result;\n    };\n    DefaultSettings.prototype.parseSettings = function (settingsObject) {\n        var result = [];\n        for (var key in settingsObject) {\n            var prop = settingsObject[key];\n            if (this.matchesScope(prop)) {\n                var value = prop.default;\n                var description = (prop.description || prop.markdownDescription || '').split('\\n');\n                var overrides = configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key) ? this.parseOverrideSettings(prop.default) : [];\n                result.push({\n                    key: key,\n                    value: value,\n                    description: description,\n                    descriptionIsMarkdown: !prop.description,\n                    range: exports.nullRange,\n                    keyRange: exports.nullRange,\n                    valueRange: exports.nullRange,\n                    descriptionRanges: [],\n                    overrides: overrides,\n                    scope: prop.scope,\n                    type: prop.type,\n                    enum: prop.enum,\n                    enumDescriptions: prop.enumDescriptions || prop.markdownEnumDescriptions,\n                    enumDescriptionsAreMarkdown: !prop.enumDescriptions,\n                    tags: prop.tags,\n                    deprecationMessage: prop.deprecationMessage,\n                    validator: createValidator(prop)\n                });\n            }\n        }\n        return result;\n    };\n    DefaultSettings.prototype.parseOverrideSettings = function (overrideSettings) {\n        return Object.keys(overrideSettings).map(function (key) { return ({\n            key: key,\n            value: overrideSettings[key],\n            description: [],\n            descriptionIsMarkdown: false,\n            range: exports.nullRange,\n            keyRange: exports.nullRange,\n            valueRange: exports.nullRange,\n            descriptionRanges: [],\n            overrides: []\n        }); });\n    };\n    DefaultSettings.prototype.matchesScope = function (property) {\n        if (this.target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n            return property.scope === configurationRegistry_1.ConfigurationScope.RESOURCE;\n        }\n        if (this.target === configuration_1.ConfigurationTarget.WORKSPACE) {\n            return property.scope === configurationRegistry_1.ConfigurationScope.WINDOW || property.scope === configurationRegistry_1.ConfigurationScope.RESOURCE;\n        }\n        return true;\n    };\n    DefaultSettings.prototype.compareConfigurationNodes = function (c1, c2) {\n        if (typeof c1.order !== 'number') {\n            return 1;\n        }\n        if (typeof c2.order !== 'number') {\n            return -1;\n        }\n        if (c1.order === c2.order) {\n            var title1 = c1.title || '';\n            var title2 = c2.title || '';\n            return title1.localeCompare(title2);\n        }\n        return c1.order - c2.order;\n    };\n    DefaultSettings.prototype.toContent = function (settingsGroups) {\n        var builder = new SettingsContentBuilder();\n        builder.pushLine('[');\n        settingsGroups.forEach(function (settingsGroup, i) {\n            builder.pushGroup(settingsGroup);\n            builder.pushLine(',');\n        });\n        builder.pushLine(']');\n        return builder.getContent();\n    };\n    return DefaultSettings;\n}(lifecycle_1.Disposable));\nexports.DefaultSettings = DefaultSettings;\nvar DefaultSettingsEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultSettingsEditorModel, _super);\n    function DefaultSettingsEditorModel(_uri, reference, defaultSettings) {\n        var _this = _super.call(this) || this;\n        _this._uri = _uri;\n        _this.defaultSettings = defaultSettings;\n        _this._onDidChangeGroups = _this._register(new event_1.Emitter());\n        _this.onDidChangeGroups = _this._onDidChangeGroups.event;\n        _this._register(defaultSettings.onDidChange(function () { return _this._onDidChangeGroups.fire(); }));\n        _this._model = reference.object.textEditorModel;\n        _this._register(_this.onDispose(function () { return reference.dispose(); }));\n        return _this;\n    }\n    Object.defineProperty(DefaultSettingsEditorModel.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultSettingsEditorModel.prototype, \"target\", {\n        get: function () {\n            return this.defaultSettings.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultSettingsEditorModel.prototype, \"settingsGroups\", {\n        get: function () {\n            return this.defaultSettings.getSettingsGroups();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultSettingsEditorModel.prototype, \"filterGroups\", {\n        get: function () {\n            // Don't look at \"commonly used\" for filter\n            return this.settingsGroups.slice(1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultSettingsEditorModel.prototype.update = function () {\n        if (this._model.isDisposed()) {\n            return undefined;\n        }\n        // Grab current result groups, only render non-empty groups\n        var resultGroups = map\n            .values(this._currentResultGroups)\n            .sort(function (a, b) { return a.order - b.order; });\n        var nonEmptyResultGroups = resultGroups.filter(function (group) { return group.result.filterMatches.length; });\n        var startLine = arrays_1.tail(this.settingsGroups).range.endLineNumber + 2;\n        var _a = this.writeResultGroups(nonEmptyResultGroups, startLine), filteredGroups = _a.settingsGroups, matches = _a.matches;\n        var metadata = this.collectMetadata(resultGroups);\n        return resultGroups.length ?\n            {\n                allGroups: this.settingsGroups,\n                filteredGroups: filteredGroups,\n                matches: matches,\n                metadata: metadata\n            } :\n            undefined;\n    };\n    /**\n     * Translate the ISearchResultGroups to text, and write it to the editor model\n     */\n    DefaultSettingsEditorModel.prototype.writeResultGroups = function (groups, startLine) {\n        var _this = this;\n        var contentBuilderOffset = startLine - 1;\n        var builder = new SettingsContentBuilder(contentBuilderOffset);\n        var settingsGroups = [];\n        var matches = [];\n        builder.pushLine(',');\n        groups.forEach(function (resultGroup) {\n            var settingsGroup = _this.getGroup(resultGroup);\n            settingsGroups.push(settingsGroup);\n            matches.push.apply(matches, _this.writeSettingsGroupToBuilder(builder, settingsGroup, resultGroup.result.filterMatches));\n        });\n        // note: 1-indexed line numbers here\n        var groupContent = builder.getContent() + '\\n';\n        var groupEndLine = this._model.getLineCount();\n        var cursorPosition = new selection_1.Selection(startLine, 1, startLine, 1);\n        var edit = {\n            text: groupContent,\n            forceMoveMarkers: true,\n            range: new range_1.Range(startLine, 1, groupEndLine, 1),\n            identifier: { major: 1, minor: 0 }\n        };\n        this._model.pushEditOperations([cursorPosition], [edit], function () { return [cursorPosition]; });\n        // Force tokenization now - otherwise it may be slightly delayed, causing a flash of white text\n        var tokenizeTo = Math.min(startLine + 60, this._model.getLineCount());\n        this._model.forceTokenization(tokenizeTo);\n        return { matches: matches, settingsGroups: settingsGroups };\n    };\n    DefaultSettingsEditorModel.prototype.writeSettingsGroupToBuilder = function (builder, settingsGroup, filterMatches) {\n        filterMatches = filterMatches\n            .map(function (filteredMatch) {\n            // Fix match ranges to offset from setting start line\n            return {\n                setting: filteredMatch.setting,\n                score: filteredMatch.score,\n                matches: filteredMatch.matches && filteredMatch.matches.map(function (match) {\n                    return new range_1.Range(match.startLineNumber - filteredMatch.setting.range.startLineNumber, match.startColumn, match.endLineNumber - filteredMatch.setting.range.startLineNumber, match.endColumn);\n                })\n            };\n        });\n        builder.pushGroup(settingsGroup);\n        builder.pushLine(',');\n        // builder has rewritten settings ranges, fix match ranges\n        var fixedMatches = arrays_1.flatten(filterMatches\n            .map(function (m) { return m.matches || []; })\n            .map(function (settingMatches, i) {\n            var setting = settingsGroup.sections[0].settings[i];\n            return settingMatches.map(function (range) {\n                return new range_1.Range(range.startLineNumber + setting.range.startLineNumber, range.startColumn, range.endLineNumber + setting.range.startLineNumber, range.endColumn);\n            });\n        }));\n        return fixedMatches;\n    };\n    DefaultSettingsEditorModel.prototype.copySetting = function (setting) {\n        return {\n            description: setting.description,\n            scope: setting.scope,\n            type: setting.type,\n            enum: setting.enum,\n            enumDescriptions: setting.enumDescriptions,\n            key: setting.key,\n            value: setting.value,\n            range: setting.range,\n            overrides: [],\n            overrideOf: setting.overrideOf,\n            tags: setting.tags,\n            deprecationMessage: setting.deprecationMessage,\n            keyRange: exports.nullRange,\n            valueRange: exports.nullRange,\n            descriptionIsMarkdown: undefined,\n            descriptionRanges: []\n        };\n    };\n    DefaultSettingsEditorModel.prototype.findValueMatches = function (filter, setting) {\n        return [];\n    };\n    DefaultSettingsEditorModel.prototype.getPreference = function (key) {\n        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {\n                var section = _c[_b];\n                for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {\n                    var setting = _e[_d];\n                    if (setting.key === key) {\n                        return setting;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    DefaultSettingsEditorModel.prototype.getGroup = function (resultGroup) {\n        var _this = this;\n        return {\n            id: resultGroup.id,\n            range: exports.nullRange,\n            title: resultGroup.label,\n            titleRange: exports.nullRange,\n            sections: [\n                {\n                    settings: resultGroup.result.filterMatches.map(function (m) { return _this.copySetting(m.setting); })\n                }\n            ]\n        };\n    };\n    return DefaultSettingsEditorModel;\n}(AbstractSettingsModel));\nexports.DefaultSettingsEditorModel = DefaultSettingsEditorModel;\nvar SettingsContentBuilder = /** @class */ (function () {\n    function SettingsContentBuilder(_rangeOffset) {\n        if (_rangeOffset === void 0) { _rangeOffset = 0; }\n        this._rangeOffset = _rangeOffset;\n        this._contentByLines = [];\n    }\n    Object.defineProperty(SettingsContentBuilder.prototype, \"lineCountWithOffset\", {\n        get: function () {\n            return this._contentByLines.length + this._rangeOffset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsContentBuilder.prototype, \"lastLine\", {\n        get: function () {\n            return this._contentByLines[this._contentByLines.length - 1] || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SettingsContentBuilder.prototype.pushLine = function () {\n        var lineText = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            lineText[_i] = arguments[_i];\n        }\n        var _a;\n        (_a = this._contentByLines).push.apply(_a, lineText);\n    };\n    SettingsContentBuilder.prototype.pushGroup = function (settingsGroups) {\n        this._contentByLines.push('{');\n        this._contentByLines.push('');\n        this._contentByLines.push('');\n        var lastSetting = this._pushGroup(settingsGroups, '  ');\n        if (lastSetting) {\n            // Strip the comma from the last setting\n            var lineIdx = lastSetting.range.endLineNumber - this._rangeOffset;\n            var content = this._contentByLines[lineIdx - 2];\n            this._contentByLines[lineIdx - 2] = content.substring(0, content.length - 1);\n        }\n        this._contentByLines.push('}');\n    };\n    SettingsContentBuilder.prototype._pushGroup = function (group, indent) {\n        var lastSetting = null;\n        var groupStart = this.lineCountWithOffset + 1;\n        for (var _i = 0, _a = group.sections; _i < _a.length; _i++) {\n            var section = _a[_i];\n            if (section.title) {\n                var sectionTitleStart = this.lineCountWithOffset + 1;\n                this.addDescription([section.title], indent, this._contentByLines);\n                section.titleRange = { startLineNumber: sectionTitleStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n            }\n            if (section.settings.length) {\n                for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {\n                    var setting = _c[_b];\n                    this.pushSetting(setting, indent);\n                    lastSetting = setting;\n                }\n            }\n        }\n        group.range = { startLineNumber: groupStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n        return lastSetting;\n    };\n    SettingsContentBuilder.prototype.getContent = function () {\n        return this._contentByLines.join('\\n');\n    };\n    SettingsContentBuilder.prototype.pushSetting = function (setting, indent) {\n        var settingStart = this.lineCountWithOffset + 1;\n        this.pushSettingDescription(setting, indent);\n        var preValueContent = indent;\n        var keyString = JSON.stringify(setting.key);\n        preValueContent += keyString;\n        setting.keyRange = { startLineNumber: this.lineCountWithOffset + 1, startColumn: preValueContent.indexOf(setting.key) + 1, endLineNumber: this.lineCountWithOffset + 1, endColumn: setting.key.length };\n        preValueContent += ': ';\n        var valueStart = this.lineCountWithOffset + 1;\n        this.pushValue(setting, preValueContent, indent);\n        setting.valueRange = { startLineNumber: valueStart, startColumn: preValueContent.length + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length + 1 };\n        this._contentByLines[this._contentByLines.length - 1] += ',';\n        this._contentByLines.push('');\n        setting.range = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n    };\n    SettingsContentBuilder.prototype.pushSettingDescription = function (setting, indent) {\n        var _this = this;\n        var fixSettingLink = function (line) { return line.replace(/`#(.*)#`/g, function (match, settingName) { return \"`\" + settingName + \"`\"; }); };\n        setting.descriptionRanges = [];\n        var descriptionPreValue = indent + '// ';\n        for (var _i = 0, _a = (setting.deprecationMessage ? [setting.deprecationMessage].concat(setting.description) : setting.description); _i < _a.length; _i++) {\n            var line = _a[_i];\n            line = fixSettingLink(line);\n            this._contentByLines.push(descriptionPreValue + line);\n            setting.descriptionRanges.push({ startLineNumber: this.lineCountWithOffset, startColumn: this.lastLine.indexOf(line) + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length });\n        }\n        if (setting.enumDescriptions && setting.enumDescriptions.some(function (desc) { return !!desc; })) {\n            setting.enumDescriptions.forEach(function (desc, i) {\n                var displayEnum = escapeInvisibleChars(String(setting.enum[i]));\n                var line = desc ?\n                    displayEnum + \": \" + fixSettingLink(desc) :\n                    displayEnum;\n                _this._contentByLines.push(indent + \"//  - \" + line);\n                setting.descriptionRanges.push({ startLineNumber: _this.lineCountWithOffset, startColumn: _this.lastLine.indexOf(line) + 1, endLineNumber: _this.lineCountWithOffset, endColumn: _this.lastLine.length });\n            });\n        }\n    };\n    SettingsContentBuilder.prototype.pushValue = function (setting, preValueConent, indent) {\n        var valueString = JSON.stringify(setting.value, null, indent);\n        if (valueString && (typeof setting.value === 'object')) {\n            if (setting.overrides && setting.overrides.length) {\n                this._contentByLines.push(preValueConent + ' {');\n                for (var _i = 0, _a = setting.overrides; _i < _a.length; _i++) {\n                    var subSetting = _a[_i];\n                    this.pushSetting(subSetting, indent + indent);\n                    this._contentByLines.pop();\n                }\n                var lastSetting = setting.overrides[setting.overrides.length - 1];\n                var content = this._contentByLines[lastSetting.range.endLineNumber - 2];\n                this._contentByLines[lastSetting.range.endLineNumber - 2] = content.substring(0, content.length - 1);\n                this._contentByLines.push(indent + '}');\n            }\n            else {\n                var mulitLineValue = valueString.split('\\n');\n                this._contentByLines.push(preValueConent + mulitLineValue[0]);\n                for (var i = 1; i < mulitLineValue.length; i++) {\n                    this._contentByLines.push(indent + mulitLineValue[i]);\n                }\n            }\n        }\n        else {\n            this._contentByLines.push(preValueConent + valueString);\n        }\n    };\n    SettingsContentBuilder.prototype.addDescription = function (description, indent, result) {\n        for (var _i = 0, description_1 = description; _i < description_1.length; _i++) {\n            var line = description_1[_i];\n            result.push(indent + '// ' + line);\n        }\n    };\n    return SettingsContentBuilder;\n}());\nfunction createValidator(prop) {\n    return function (value) {\n        var exclusiveMax;\n        var exclusiveMin;\n        if (typeof prop.exclusiveMaximum === 'boolean') {\n            exclusiveMax = prop.exclusiveMaximum ? prop.maximum : undefined;\n        }\n        else {\n            exclusiveMax = prop.exclusiveMaximum;\n        }\n        if (typeof prop.exclusiveMinimum === 'boolean') {\n            exclusiveMin = prop.exclusiveMinimum ? prop.minimum : undefined;\n        }\n        else {\n            exclusiveMin = prop.exclusiveMinimum;\n        }\n        var patternRegex;\n        if (typeof prop.pattern === 'string') {\n            patternRegex = new RegExp(prop.pattern);\n        }\n        var type = Array.isArray(prop.type) ? prop.type : [prop.type];\n        var canBeType = function (t) { return type.indexOf(t) > -1; };\n        var isNullable = canBeType('null');\n        var isNumeric = (canBeType('number') || canBeType('integer')) && (type.length === 1 || type.length === 2 && isNullable);\n        var isIntegral = (canBeType('integer')) && (type.length === 1 || type.length === 2 && isNullable);\n        var numericValidations = isNumeric ? [\n            {\n                enabled: exclusiveMax !== undefined && (prop.maximum === undefined || exclusiveMax <= prop.maximum),\n                isValid: (function (value) { return value < exclusiveMax; }),\n                message: nls.localize('validations.exclusiveMax', \"Value must be strictly less than {0}.\", exclusiveMax)\n            },\n            {\n                enabled: exclusiveMin !== undefined && (prop.minimum === undefined || exclusiveMin >= prop.minimum),\n                isValid: (function (value) { return value > exclusiveMin; }),\n                message: nls.localize('validations.exclusiveMin', \"Value must be strictly greater than {0}.\", exclusiveMin)\n            },\n            {\n                enabled: prop.maximum !== undefined && (exclusiveMax === undefined || exclusiveMax > prop.maximum),\n                isValid: (function (value) { return value <= prop.maximum; }),\n                message: nls.localize('validations.max', \"Value must be less than or equal to {0}.\", prop.maximum)\n            },\n            {\n                enabled: prop.minimum !== undefined && (exclusiveMin === undefined || exclusiveMin < prop.minimum),\n                isValid: (function (value) { return value >= prop.minimum; }),\n                message: nls.localize('validations.min', \"Value must be greater than or equal to {0}.\", prop.minimum)\n            },\n            {\n                enabled: prop.multipleOf !== undefined,\n                isValid: (function (value) { return value % prop.multipleOf === 0; }),\n                message: nls.localize('validations.multipleOf', \"Value must be a multiple of {0}.\", prop.multipleOf)\n            },\n            {\n                enabled: isIntegral,\n                isValid: (function (value) { return value % 1 === 0; }),\n                message: nls.localize('validations.expectedInteger', \"Value must be an integer.\")\n            },\n        ].filter(function (validation) { return validation.enabled; }) : [];\n        var stringValidations = [\n            {\n                enabled: prop.maxLength !== undefined,\n                isValid: (function (value) { return value.length <= prop.maxLength; }),\n                message: nls.localize('validations.maxLength', \"Value must be {0} or fewer characters long.\", prop.maxLength)\n            },\n            {\n                enabled: prop.minLength !== undefined,\n                isValid: (function (value) { return value.length >= prop.minLength; }),\n                message: nls.localize('validations.minLength', \"Value must be {0} or more characters long.\", prop.minLength)\n            },\n            {\n                enabled: patternRegex !== undefined,\n                isValid: (function (value) { return patternRegex.test(value); }),\n                message: prop.patternErrorMessage || nls.localize('validations.regex', \"Value must match regex `{0}`.\", prop.pattern)\n            },\n        ].filter(function (validation) { return validation.enabled; });\n        if (prop.type === 'string' && stringValidations.length === 0) {\n            return null;\n        }\n        if (isNullable && value === '') {\n            return '';\n        }\n        var errors = [];\n        if (isNumeric) {\n            if (value === '' || isNaN(+value)) {\n                errors.push(nls.localize('validations.expectedNumeric', \"Value must be a number.\"));\n            }\n            else {\n                errors.push.apply(errors, numericValidations.filter(function (validator) { return !validator.isValid(+value); }).map(function (validator) { return validator.message; }));\n            }\n        }\n        if (prop.type === 'string') {\n            errors.push.apply(errors, stringValidations.filter(function (validator) { return !validator.isValid('' + value); }).map(function (validator) { return validator.message; }));\n        }\n        if (errors.length) {\n            return prop.errorMessage ? [prop.errorMessage].concat(errors).join(' ') : errors.join(' ');\n        }\n        return '';\n    };\n}\nexports.createValidator = createValidator;\nvar RawSettingsContentBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(RawSettingsContentBuilder, _super);\n    function RawSettingsContentBuilder(indent) {\n        if (indent === void 0) { indent = '\\t'; }\n        var _this = _super.call(this, 0) || this;\n        _this.indent = indent;\n        return _this;\n    }\n    RawSettingsContentBuilder.prototype.pushGroup = function (settingsGroups) {\n        this._pushGroup(settingsGroups, this.indent);\n    };\n    return RawSettingsContentBuilder;\n}(SettingsContentBuilder));\nvar DefaultRawSettingsEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultRawSettingsEditorModel, _super);\n    function DefaultRawSettingsEditorModel(defaultSettings) {\n        var _this = _super.call(this) || this;\n        _this.defaultSettings = defaultSettings;\n        _this._content = null;\n        _this._register(defaultSettings.onDidChange(function () { return _this._content = null; }));\n        return _this;\n    }\n    Object.defineProperty(DefaultRawSettingsEditorModel.prototype, \"content\", {\n        get: function () {\n            if (this._content === null) {\n                var builder = new RawSettingsContentBuilder();\n                builder.pushLine('{');\n                for (var _i = 0, _a = this.defaultSettings.getRegisteredGroups(); _i < _a.length; _i++) {\n                    var settingsGroup = _a[_i];\n                    builder.pushGroup(settingsGroup);\n                }\n                builder.pushLine('}');\n                this._content = builder.getContent();\n            }\n            return this._content;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DefaultRawSettingsEditorModel;\n}(lifecycle_1.Disposable));\nexports.DefaultRawSettingsEditorModel = DefaultRawSettingsEditorModel;\nfunction escapeInvisibleChars(enumValue) {\n    return enumValue && enumValue\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r');\n}\nfunction defaultKeybindingsContents(keybindingService) {\n    var defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', \"Override key bindings by placing them into your key bindings file.\");\n    return defaultsHeader + '\\n' + keybindingService.getDefaultKeybindingsContent();\n}\nexports.defaultKeybindingsContents = defaultKeybindingsContents;\nvar DefaultKeybindingsEditorModel = /** @class */ (function () {\n    function DefaultKeybindingsEditorModel(_uri, keybindingService) {\n        this._uri = _uri;\n        this.keybindingService = keybindingService;\n    }\n    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, \"content\", {\n        get: function () {\n            if (!this._content) {\n                this._content = defaultKeybindingsContents(this.keybindingService);\n            }\n            return this._content;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultKeybindingsEditorModel.prototype.getPreference = function () {\n        return null;\n    };\n    DefaultKeybindingsEditorModel.prototype.dispose = function () {\n        // Not disposable\n    };\n    DefaultKeybindingsEditorModel = tslib_1.__decorate([\n        tslib_1.__param(1, keybinding_1.IKeybindingService)\n    ], DefaultKeybindingsEditorModel);\n    return DefaultKeybindingsEditorModel;\n}());\nexports.DefaultKeybindingsEditorModel = DefaultKeybindingsEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesModels.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesModels.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,gDAAsE;AAEtE,8CAAsD;AACtD,4CAAyD;AACzD,sDAAkE;AAClE,wCAA0C;AAC1C,kDAAgD;AAEhD,qDAA4D;AAC5D,6DAA4D;AAG5D,4BAA8B;AAC9B,gFAA4G;AAC5G,gGAA6M;AAC7M,uEAA8E;AAC9E,iEAAgE;AAChE,qDAAyD;AAEzD,8CAA2D;AAE9C,QAAA,SAAS,GAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;AAC5G,SAAgB,WAAW,CAAC,KAAa,IAAa,OAAO,KAAK,CAAC,eAAe,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,WAAW,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAAhL,kCAAgL;AAEhL;IAAoD,iDAAW;IAA/D;QAAA,qEA0FC;QAxFU,0BAAoB,GAAG,IAAI,GAAG,EAA8B,CAAC;;IAwFxE,CAAC;IAtFA,iDAAiB,GAAjB,UAAkB,EAAU,EAAE,WAA2C;QACxE,IAAI,WAAW,EAAE;YAChB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;SAC/C;aAAM;YACN,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACrC;QAED,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,sDAAsB,GAA9B;QAAA,iBASC;QARA,IAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;QACtC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;aACjC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,KAAK,GAAG,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,KAAK,EAAjF,CAAiF,CAAC;aACjG,OAAO,CAAC,UAAA,OAAO;YACf,IAAM,KAAK,GAAG,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;YACtD,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC;YACrG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAA9B,CAA8B,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8CAAc,GAAd,UAAe,MAAc,EAAE,WAAyB,EAAE,cAA+B;QACxF,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;QAEpC,IAAM,aAAa,GAAoB,EAAE,CAAC;QAC1C,KAAoB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;YAA1B,IAAM,KAAK,kBAAA;YACf,IAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YACxC,KAAsB,UAAc,EAAd,KAAA,KAAK,CAAC,QAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;gBAAjC,IAAM,OAAO,SAAA;gBACjB,KAAsB,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAnC,IAAM,OAAO,SAAA;oBACjB,IAAM,kBAAkB,GAAG,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAE1D,IAAI,YAAY,IAAI,kBAAkB,EAAE;wBACvC,aAAa,CAAC,IAAI,CAAC;4BAClB,OAAO,SAAA;4BACP,OAAO,EAAE,kBAAkB,IAAI,kBAAkB,CAAC,OAAO;4BACzD,KAAK,EAAE,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBACxD,CAAC,CAAC;qBACH;iBACD;aACD;SACD;QAED,OAAO,aAAa,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAjB,CAAiB,CAAC,CAAC;IACxD,CAAC;IAED,6CAAa,GAAb,UAAc,GAAW;QACxB,KAAoB,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;YAApC,IAAM,KAAK,SAAA;YACf,KAAsB,UAAc,EAAd,KAAA,KAAK,CAAC,QAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;gBAAjC,IAAM,OAAO,SAAA;gBACjB,KAAsB,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAnC,IAAM,OAAO,SAAA;oBACjB,IAAI,GAAG,KAAK,OAAO,CAAC,GAAG,EAAE;wBACxB,OAAO,OAAO,CAAC;qBACf;iBACD;aACD;SACD;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAES,+CAAe,GAAzB,UAA0B,MAA4B;QACrD,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC;YACf,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACtB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACnC,WAAW,GAAG,IAAI,CAAC;aACnB;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;IACtC,CAAC;IAGD,sBAAc,+CAAY;aAA1B;YACC,OAAO,IAAI,CAAC,cAAc,CAAC;QAC5B,CAAC;;;OAAA;IAOF,4BAAC;AAAD,CAAC,AA1FD,CAAoD,oBAAW,GA0F9D;AA1FqB,sDAAqB;AA4F3C;IAAyC,+CAAqB;IAQ7D,6BAAY,SAAuC,EAAU,oBAAyC;QAAtG,YACC,iBAAO,SAOP;QAR4D,0BAAoB,GAApB,oBAAoB,CAAqB;QAHrF,wBAAkB,GAAkB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAChF,uBAAiB,GAAgB,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAIvE,KAAI,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,eAAgB,CAAC;QACvD,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,SAAS,CAAC,cAAM,OAAA,SAAS,CAAC,OAAO,EAAE,EAAnB,CAAmB,CAAC,CAAC,CAAC;QAC1D,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC;YACpD,KAAI,CAAC,eAAe,GAAG,SAAS,CAAC;YACjC,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,sBAAI,oCAAG;aAAP;YACC,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;QAC/B,CAAC;;;OAAA;IAED,sBAAI,oDAAmB;aAAvB;YACC,OAAO,IAAI,CAAC,oBAAoB,CAAC;QAClC,CAAC;;;OAAA;IAED,sBAAI,+CAAc;aAAlB;YACC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBAC1B,IAAI,CAAC,KAAK,EAAE,CAAC;aACb;YACD,OAAO,IAAI,CAAC,eAAgB,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAI,wCAAO;aAAX;YACC,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACtC,CAAC;;;OAAA;IAED,8CAAgB,GAAhB,UAAiB,MAAc,EAAE,OAAiB;QACjD,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,CAAC;IACxH,CAAC;IAES,gDAAkB,GAA5B,UAA6B,QAAgB,EAAE,eAAyB;QACvE,OAAO,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,mBAAmB;IACzD,CAAC;IAES,mCAAK,GAAf;QAAA,iBAEC;QADA,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,UAAC,QAAgB,EAAE,eAAyB,IAAc,OAAA,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAlD,CAAkD,CAAC,CAAC;IAChK,CAAC;IAES,oCAAM,GAAhB;QACC,IAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC3D,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACzB,OAAO,SAAS,CAAC;SACjB;QAED,uFAAuF;QACvF,IAAM,gBAAgB,GAAe,EAAE,CAAC;QACxC,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,YAAY,CAAC,OAAO,CAAC,UAAA,KAAK;YACzB,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,WAAW;gBAC7C,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC3C,IAAI,WAAW,CAAC,OAAO,EAAE;oBACxB,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,WAAW,CAAC,OAAO,EAAE;iBACrC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,aAAyC,CAAC;QAC9C,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,wCAAwC;QACnF,IAAI,UAAU,EAAE;YACf,aAAa,GAAG;gBACf,EAAE,EAAE,UAAU,CAAC,EAAE;gBACjB,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,QAAQ,EAAE,CAAC;wBACV,QAAQ,EAAE,gBAAgB;qBAC1B,CAAC;gBACF,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,UAAU,EAAE,UAAU,CAAC,UAAU;gBACjC,sBAAsB,EAAE,CAAC,CAAC,UAAU,CAAC,sBAAsB;aAC3D,CAAC;SACF;QAED,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACpD,OAAO;YACN,SAAS,EAAE,IAAI,CAAC,cAAc;YAC9B,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE;YACpD,OAAO,SAAA;YACP,QAAQ,UAAA;SACR,CAAC;IACH,CAAC;IACF,0BAAC;AAAD,CAAC,AA1FD,CAAyC,qBAAqB,GA0F7D;AA1FY,kDAAmB;AA4FhC;IAA0C,gDAAqB;IAM9D,8BACS,gBAAiC,EAClB,oBAA2C;QAFnE,YAIC,iBAAO,SAYP;QAfQ,sBAAgB,GAAhB,gBAAgB,CAAiB;QANzB,wBAAkB,GAAkB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAChF,uBAAiB,GAAgB,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAEhE,WAAK,GAAG,KAAK,CAAC;QAQrB,KAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,UAAA,CAAC;YAC7D,IAAI,CAAC,CAAC,MAAM,KAAK,mCAAmB,CAAC,OAAO,EAAE;gBAC7C,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;aAC/B;QACF,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,SAAS,CAAC,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC,UAAA,CAAC;YAC/F,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,sBAAc,8CAAY;aAA1B;YACC,+BAA+B;YAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC;;;OAAA;IAED,sBAAI,gDAAc;aAAlB;YACC,IAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,OAAO,MAAM,CAAC;QACf,CAAC;;;OAAA;IAED,+CAAgB,GAAhB,UAAiB,MAAc,EAAE,OAAiB;QACjD,eAAe;QACf,OAAO,EAAE,CAAC;IACX,CAAC;IAES,qCAAM,GAAhB;QACC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IAClC,CAAC;IA1CW,oBAAoB;QAQ9B,mBAAA,qCAAqB,CAAA;OARX,oBAAoB,CA2ChC;IAAD,2BAAC;CAAA,AA3CD,CAA0C,qBAAqB,GA2C9D;AA3CY,oDAAoB;AA6CjC,SAAS,KAAK,CAAC,KAAiB,EAAE,kBAAmF;IACpH,IAAM,QAAQ,GAAe,EAAE,CAAC;IAChC,IAAI,eAAe,GAAoB,IAAI,CAAC;IAE5C,IAAI,eAAe,GAAkB,IAAI,CAAC;IAC1C,IAAI,aAAa,GAAQ,EAAE,CAAC;IAC5B,IAAM,eAAe,GAAU,EAAE,CAAC;IAClC,IAAI,qBAAqB,GAAW,CAAC,CAAC,CAAC;IACvC,IAAM,KAAK,GAAG;QACb,eAAe,EAAE,CAAC;QAClB,WAAW,EAAE,CAAC;QACd,aAAa,EAAE,CAAC;QAChB,SAAS,EAAE,CAAC;KACZ,CAAC;IAEF,SAAS,OAAO,CAAC,KAAU,EAAE,MAAc,EAAE,MAAc;QAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACzB,aAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnC;aAAM,IAAI,eAAe,EAAE;YAC3B,aAAa,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC;SACvC;QACD,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,eAAe,KAAK,IAAI,CAAC,EAAE;YAC/I,yBAAyB;YACzB,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,eAAgB,CAAC,SAAU,CAAC,eAAgB,CAAC,SAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC3K,IAAI,OAAO,EAAE;gBACZ,IAAM,kBAAkB,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACvD,IAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;gBAC9D,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;gBACtB,OAAO,CAAC,UAAU,GAAG;oBACpB,eAAe,EAAE,kBAAkB,CAAC,UAAU;oBAC9C,WAAW,EAAE,kBAAkB,CAAC,MAAM;oBACtC,aAAa,EAAE,gBAAgB,CAAC,UAAU;oBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;iBAClC,CAAC;gBACF,OAAO,CAAC,KAAK,GAAG,gBAAM,CAAC,OAAO,CAAC,KAAK,EAAE;oBACrC,aAAa,EAAE,gBAAgB,CAAC,UAAU;oBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;iBAClC,CAAC,CAAC;aACH;SACD;IACF,CAAC;IACD,IAAM,OAAO,GAAgB;QAC5B,aAAa,EAAE,UAAC,MAAc,EAAE,MAAc;YAC7C,IAAI,kBAAkB,CAAC,eAAgB,EAAE,eAAe,CAAC,EAAE;gBAC1D,mBAAmB;gBACnB,qBAAqB,GAAG,eAAe,CAAC,MAAM,CAAC;gBAC/C,IAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC7C,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC;gBAC5C,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC;aACpC;YACD,IAAM,MAAM,GAAG,EAAE,CAAC;YAClB,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAChC,aAAa,GAAG,MAAM,CAAC;YACvB,eAAe,GAAG,IAAI,CAAC;YACvB,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC;QACD,gBAAgB,EAAE,UAAC,IAAY,EAAE,MAAc,EAAE,MAAc;YAC9D,eAAe,GAAG,IAAI,CAAC;YACvB,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,eAAe,KAAK,IAAI,CAAC,EAAE;gBAC/I,kBAAkB;gBAClB,IAAM,oBAAoB,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACzD,IAAM,OAAO,GAAa;oBACzB,WAAW,EAAE,EAAE;oBACf,qBAAqB,EAAE,KAAK;oBAC5B,GAAG,EAAE,IAAI;oBACT,QAAQ,EAAE;wBACT,eAAe,EAAE,oBAAoB,CAAC,UAAU;wBAChD,WAAW,EAAE,oBAAoB,CAAC,MAAM,GAAG,CAAC;wBAC5C,aAAa,EAAE,oBAAoB,CAAC,UAAU;wBAC9C,SAAS,EAAE,oBAAoB,CAAC,MAAM,GAAG,MAAM;qBAC/C;oBACD,KAAK,EAAE;wBACN,eAAe,EAAE,oBAAoB,CAAC,UAAU;wBAChD,WAAW,EAAE,oBAAoB,CAAC,MAAM;wBACxC,aAAa,EAAE,CAAC;wBAChB,SAAS,EAAE,CAAC;qBACZ;oBACD,KAAK,EAAE,IAAI;oBACX,UAAU,EAAE,iBAAS;oBACrB,iBAAiB,EAAE,EAAE;oBACrB,SAAS,EAAE,EAAE;oBACb,UAAU,EAAE,2BAAmB,CAAC,eAAe,CAAC;iBAChD,CAAC;gBACF,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,EAAE;oBACzD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACvB,IAAI,iDAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBACzC,eAAe,GAAG,OAAO,CAAC;qBAC1B;iBACD;qBAAM;oBACN,eAAgB,CAAC,SAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC1C;aACD;QACF,CAAC;QACD,WAAW,EAAE,UAAC,MAAc,EAAE,MAAc;YAC3C,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;YACtC,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,eAAe,KAAK,IAAI,CAAC,EAAE;gBAC/I,gBAAgB;gBAChB,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,eAAgB,CAAC,SAAU,CAAC,eAAgB,CAAC,SAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC3K,IAAI,OAAO,EAAE;oBACZ,IAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;oBAC9D,OAAO,CAAC,UAAU,GAAG,gBAAM,CAAC,OAAO,CAAC,UAAU,EAAE;wBAC/C,aAAa,EAAE,gBAAgB,CAAC,UAAU;wBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;qBAClC,CAAC,CAAC;oBACH,OAAO,CAAC,KAAK,GAAG,gBAAM,CAAC,OAAO,CAAC,KAAK,EAAE;wBACrC,aAAa,EAAE,gBAAgB,CAAC,UAAU;wBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;qBAClC,CAAC,CAAC;iBACH;gBAED,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,EAAE;oBACzD,eAAe,GAAG,IAAI,CAAC;iBACvB;aACD;YACD,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,EAAE;gBACrD,iBAAiB;gBACjB,IAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC7C,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC;gBAC1C,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC;aAClC;QACF,CAAC;QACD,YAAY,EAAE,UAAC,MAAc,EAAE,MAAc;YAC5C,IAAM,KAAK,GAAU,EAAE,CAAC;YACxB,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAC/B,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpC,aAAa,GAAG,KAAK,CAAC;YACtB,eAAe,GAAG,IAAI,CAAC;QACxB,CAAC;QACD,UAAU,EAAE,UAAC,MAAc,EAAE,MAAc;YAC1C,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;YACtC,IAAI,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,IAAI,eAAe,KAAK,IAAI,CAAC,EAAE;gBAC/I,sBAAsB;gBACtB,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,KAAK,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,eAAgB,CAAC,SAAU,CAAC,eAAgB,CAAC,SAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC3K,IAAI,OAAO,EAAE;oBACZ,IAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;oBAC9D,OAAO,CAAC,UAAU,GAAG,gBAAM,CAAC,OAAO,CAAC,UAAU,EAAE;wBAC/C,aAAa,EAAE,gBAAgB,CAAC,UAAU;wBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;qBAClC,CAAC,CAAC;oBACH,OAAO,CAAC,KAAK,GAAG,gBAAM,CAAC,OAAO,CAAC,KAAK,EAAE;wBACrC,aAAa,EAAE,gBAAgB,CAAC,UAAU;wBAC1C,SAAS,EAAE,gBAAgB,CAAC,MAAM;qBAClC,CAAC,CAAC;iBACH;aACD;QACF,CAAC;QACD,cAAc,EAAE,OAAO;QACvB,OAAO,EAAE,UAAC,KAAK;YACd,IAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;gBAChH,QAAQ,CAAC,GAAG,EAAE,CAAC;aACf;QACF,CAAC;KACD,CAAC;IACF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;QACxB,YAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;KACjC;IACD,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAiB;YAC7C,QAAQ,EAAE;gBACT;oBACC,QAAQ,UAAA;iBACR;aACD;YACD,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,iBAAS;YACrB,KAAK,OAAA;SACL,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACT,CAAC;AAED;IAAuD,6DAAmB;IAA1E;;IAiBA,CAAC;IAbA,sBAAI,kEAAmB;aAAvB;YACC,OAAO,IAAI,CAAC,oBAAoB,CAAC;QAClC,CAAC;;;OAAA;IAES,iDAAK,GAAf;QACC,iBAAM,KAAK,WAAE,CAAC;QACd,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,UAAC,QAAgB,EAAE,eAAyB,IAAc,OAAA,eAAe,CAAC,MAAM,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC;IAC/I,CAAC;IAES,8DAAkB,GAA5B,UAA6B,QAAgB,EAAE,eAAyB;QACvE,OAAO,QAAQ,KAAK,UAAU,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC;IAChE,CAAC;IAEF,wCAAC;AAAD,CAAC,AAjBD,CAAuD,mBAAmB,GAiBzE;AAjBY,8EAAiC;AAmB9C;IAAqC,2CAAU;IAS9C,yBACS,6BAAuC,EACtC,MAA2B;QAFrC,YAIC,iBAAO,SACP;QAJQ,mCAA6B,GAA7B,6BAA6B,CAAU;QACtC,YAAM,GAAN,MAAM,CAAqB;QAL5B,kBAAY,GAAkB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAClE,iBAAW,GAAgB,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC;;IAO5D,CAAC;IAED,oCAAU,GAAV,UAAW,WAAmB;QAAnB,4BAAA,EAAA,mBAAmB;QAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,WAAW,EAAE;YAClC,IAAI,CAAC,UAAU,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED,2CAAiB,GAAjB,UAAkB,WAAmB;QAAnB,4BAAA,EAAA,mBAAmB;QACpC,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,WAAW,EAAE;YAC5C,IAAI,CAAC,UAAU,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAChC,CAAC;IAEO,oCAAU,GAAlB;QACC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACzD,CAAC;IAEO,+BAAK,GAAb;QACC,IAAM,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAClD,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QACxC,IAAM,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,cAAc,CAAC,CAAC;QAC1E,QAAQ,gBAAgB,SAAK,cAAc,EAAE;IAC9C,CAAC;IAED,6CAAmB,GAAnB;QAAA,iBAMC;QALA,IAAM,cAAc,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,CAAC;QACjH,IAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC;aAC/F,MAAM,CAAC,UAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAvC,CAAuC,EAAE,EAAE,CAAC,CAAC,CAAC;QAEzF,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAEO,oCAAU,GAAlB,UAAmB,MAAwB;QAC1C,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YACnB,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC7B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,4CAAkB,GAA1B,UAA2B,iBAAmC;QAC7D,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAoB,CAAC;QACnD,KAAoB,UAAiB,EAAjB,uCAAiB,EAAjB,+BAAiB,EAAjB,IAAiB,EAAE;YAAlC,IAAM,KAAK,0BAAA;YACf,KAAsB,UAAc,EAAd,KAAA,KAAK,CAAC,QAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;gBAAjC,IAAM,OAAO,SAAA;gBACjB,KAAsB,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAnC,IAAM,OAAO,SAAA;oBACjB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;iBAC/C;aACD;SACD;IACF,CAAC;IAEO,qDAA2B,GAAnC,UAAoC,iBAAmC;QAAvE,iBAiCC;QAhCA,IAAM,QAAQ,GAAG,iBAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,UAAA,GAAG;YACnE,IAAM,OAAO,GAAG,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,OAAO,EAAE;gBACZ,OAAiB;oBAChB,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,QAAQ,EAAE,iBAAS;oBACnB,KAAK,EAAE,iBAAS;oBAChB,UAAU,EAAE,iBAAS;oBACrB,SAAS,EAAE,EAAE;oBACb,KAAK,EAAE,0CAAkB,CAAC,QAAQ;oBAClC,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;oBAC1C,iBAAiB,EAAE,EAAE;iBACrB,CAAC;aACF;YACD,OAAO,IAAI,CAAC;QACb,CAAC,CAAC,CAAC,CAAC;QAEJ,OAAuB;YACtB,EAAE,EAAE,kBAAkB;YACtB,KAAK,EAAE,iBAAS;YAChB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC;YACpD,UAAU,EAAE,iBAAS;YACrB,QAAQ,EAAE;gBACT;oBACC,QAAQ,UAAA;iBACR;aACD;SACD,CAAC;IACH,CAAC;IAEO,qCAAW,GAAnB,UAAoB,MAA0B,EAAE,MAAwB,EAAE,cAAoC,EAAE,aAA8B,EAAE,YAAyC;QAAzL,iBAwCC;QAvCA,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,EAAE;YACX,IAAM,wBAAwB,GAAG,aAAI,CAAC,cAAc,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAA/B,CAA+B,CAAC,CAAC;YAC5F,IAAI,wBAAwB,EAAE;gBAC7B,KAAK,GAAG,wBAAwB,CAAC,KAAK,CAAC;aACvC;SACD;QACD,IAAI,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,EAAE;gBACnB,aAAa,GAAG,aAAI,CAAC,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,KAAK,EAAjB,CAAiB,CAAC,CAAC;gBACrD,IAAI,CAAC,aAAa,EAAE;oBACnB,aAAa,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,EAAE,UAAU,EAAE,iBAAS,EAAE,KAAK,EAAE,iBAAS,EAAE,sBAAsB,EAAE,CAAC,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;oBAC5L,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC3B;aACD;iBAAM;gBACN,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;aACxE;SACD;QACD,IAAI,MAAM,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,aAAa,EAAE;gBACnB,aAAa,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,iBAAS,EAAE,KAAK,EAAE,iBAAS,EAAE,sBAAsB,EAAE,CAAC,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;gBAChM,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC3B;YACD,IAAM,qBAAqB,GAAe,EAAE,CAAC;YAC7C,KAAsB,UAAiH,EAAjH,KAAI,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,QAAK,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAjH,cAAiH,EAAjH,IAAiH,EAAE;gBAApI,IAAM,OAAO,SAAA;gBACjB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC/B,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACpC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;iBACjC;aACD;YACD,IAAI,qBAAqB,CAAC,MAAM,EAAE;gBACjC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,GAAG,qBAAqB,CAAC;aAC3F;SACD;QACD,IAAI,MAAM,CAAC,KAAK,EAAE;YACjB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,aAAa,EAAE,YAAY,CAAC,EAAxE,CAAwE,CAAC,CAAC;SACpG;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,mDAAyB,GAAjC,UAAkC,cAAgC;QACjE,IAAM,MAAM,GAAqB,EAAE,CAAC;QACpC,KAA4B,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;YAAvC,IAAM,aAAa,uBAAA;YACvB,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAA3B,CAA2B,CAAC,CAAC;YAC/F,IAAI,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAClC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC3B;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,uCAAa,GAArB,UAAsB,cAAiE;QACtF,IAAM,MAAM,GAAe,EAAE,CAAC;QAC9B,KAAK,IAAM,GAAG,IAAI,cAAc,EAAE;YACjC,IAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;gBAC5B,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC3B,IAAM,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACrF,IAAM,SAAS,GAAG,iDAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtG,MAAM,CAAC,IAAI,CAAC;oBACX,GAAG,KAAA;oBACH,KAAK,OAAA;oBACL,WAAW,aAAA;oBACX,qBAAqB,EAAE,CAAC,IAAI,CAAC,WAAW;oBACxC,KAAK,EAAE,iBAAS;oBAChB,QAAQ,EAAE,iBAAS;oBACnB,UAAU,EAAE,iBAAS;oBACrB,iBAAiB,EAAE,EAAE;oBACrB,SAAS,WAAA;oBACT,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,wBAAwB;oBACxE,2BAA2B,EAAE,CAAC,IAAI,CAAC,gBAAgB;oBACnD,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;oBAC3C,SAAS,EAAE,eAAe,CAAC,IAAI,CAAC;iBAChC,CAAC,CAAC;aACH;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,+CAAqB,GAA7B,UAA8B,gBAAqB;QAClD,OAAO,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC;YAClD,GAAG,KAAA;YACH,KAAK,EAAE,gBAAgB,CAAC,GAAG,CAAC;YAC5B,WAAW,EAAE,EAAE;YACf,qBAAqB,EAAE,KAAK;YAC5B,KAAK,EAAE,iBAAS;YAChB,QAAQ,EAAE,iBAAS;YACnB,UAAU,EAAE,iBAAS;YACrB,iBAAiB,EAAE,EAAE;YACrB,SAAS,EAAE,EAAE;SACb,CAAC,EAVgD,CAUhD,CAAC,CAAC;IACL,CAAC;IAEO,sCAAY,GAApB,UAAqB,QAA4B;QAChD,IAAI,IAAI,CAAC,MAAM,KAAK,mCAAmB,CAAC,gBAAgB,EAAE;YACzD,OAAO,QAAQ,CAAC,KAAK,KAAK,0CAAkB,CAAC,QAAQ,CAAC;SACtD;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,mCAAmB,CAAC,SAAS,EAAE;YAClD,OAAO,QAAQ,CAAC,KAAK,KAAK,0CAAkB,CAAC,MAAM,IAAI,QAAQ,CAAC,KAAK,KAAK,0CAAkB,CAAC,QAAQ,CAAC;SACtG;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAEO,mDAAyB,GAAjC,UAAkC,EAAsB,EAAE,EAAsB;QAC/E,IAAI,OAAO,EAAE,CAAC,KAAK,KAAK,QAAQ,EAAE;YACjC,OAAO,CAAC,CAAC;SACT;QACD,IAAI,OAAO,EAAE,CAAC,KAAK,KAAK,QAAQ,EAAE;YACjC,OAAO,CAAC,CAAC,CAAC;SACV;QACD,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,EAAE;YAC1B,IAAM,MAAM,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC;YAC9B,IAAM,MAAM,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC;YAC9B,OAAO,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACpC;QACD,OAAO,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;IAC5B,CAAC;IAEO,mCAAS,GAAjB,UAAkB,cAAgC;QACjD,IAAM,OAAO,GAAG,IAAI,sBAAsB,EAAE,CAAC;QAC7C,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtB,cAAc,CAAC,OAAO,CAAC,UAAC,aAAa,EAAE,CAAC;YACvC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtB,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAEF,sBAAC;AAAD,CAAC,AAnPD,CAAqC,sBAAU,GAmP9C;AAnPY,0CAAe;AAqP5B;IAAgD,sDAAqB;IAOpE,oCACS,IAAS,EACjB,SAAuC,EACtB,eAAgC;QAHlD,YAKC,iBAAO,SAKP;QATQ,UAAI,GAAJ,IAAI,CAAK;QAEA,qBAAe,GAAf,eAAe,CAAiB;QANjC,wBAAkB,GAAkB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAQ,CAAC,CAAC;QAChF,uBAAiB,GAAgB,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QASvE,KAAI,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAA9B,CAA8B,CAAC,CAAC,CAAC;QAClF,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,eAAgB,CAAC;QAChD,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,SAAS,CAAC,cAAM,OAAA,SAAS,CAAC,OAAO,EAAE,EAAnB,CAAmB,CAAC,CAAC,CAAC;;IAC3D,CAAC;IAED,sBAAI,2CAAG;aAAP;YACC,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;;;OAAA;IAED,sBAAI,8CAAM;aAAV;YACC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;QACpC,CAAC;;;OAAA;IAED,sBAAI,sDAAc;aAAlB;YACC,OAAO,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;QACjD,CAAC;;;OAAA;IAED,sBAAc,oDAAY;aAA1B;YACC,2CAA2C;YAC3C,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC;;;OAAA;IAES,2CAAM,GAAhB;QACC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE;YAC7B,OAAO,SAAS,CAAC;SACjB;QAED,2DAA2D;QAC3D,IAAM,YAAY,GAAG,GAAG;aACtB,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;aACjC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAjB,CAAiB,CAAC,CAAC;QACpC,IAAM,oBAAoB,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAjC,CAAiC,CAAC,CAAC;QAE7F,IAAM,SAAS,GAAG,aAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC;QAC9D,IAAA,4DAAqG,EAAnG,kCAA8B,EAAE,oBAAmE,CAAC;QAE5G,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACpD,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC;YACZ;gBACd,SAAS,EAAE,IAAI,CAAC,cAAc;gBAC9B,cAAc,gBAAA;gBACd,OAAO,SAAA;gBACP,QAAQ,UAAA;aACR,CAAC,CAAC;YACH,SAAS,CAAC;IACZ,CAAC;IAED;;OAEG;IACK,sDAAiB,GAAzB,UAA0B,MAA4B,EAAE,SAAiB;QAAzE,iBA+BC;QA9BA,IAAM,oBAAoB,GAAG,SAAS,GAAG,CAAC,CAAC;QAC3C,IAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;QAEjE,IAAM,cAAc,GAAqB,EAAE,CAAC;QAC5C,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,UAAA,WAAW;YACzB,IAAM,aAAa,GAAG,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACjD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACnC,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,KAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,aAAa,EAAE,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;QAC7G,CAAC,CAAC,CAAC;QAEH,oCAAoC;QACpC,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC;QACjD,IAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAChD,IAAM,cAAc,GAAG,IAAI,qBAAS,CAAC,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QACjE,IAAM,IAAI,GAAmC;YAC5C,IAAI,EAAE,YAAY;YAClB,gBAAgB,EAAE,IAAI;YACtB,KAAK,EAAE,IAAI,aAAK,CAAC,SAAS,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;YAC/C,UAAU,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;SAClC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,cAAM,OAAA,CAAC,cAAc,CAAC,EAAhB,CAAgB,CAAC,CAAC;QAEjF,+FAA+F;QAC/F,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAE1C,OAAO,EAAE,OAAO,SAAA,EAAE,cAAc,gBAAA,EAAE,CAAC;IACpC,CAAC;IAEO,gEAA2B,GAAnC,UAAoC,OAA+B,EAAE,aAA6B,EAAE,aAA8B;QACjI,aAAa,GAAG,aAAa;aAC3B,GAAG,CAAC,UAAA,aAAa;YACjB,qDAAqD;YACrD,OAAsB;gBACrB,OAAO,EAAE,aAAa,CAAC,OAAO;gBAC9B,KAAK,EAAE,aAAa,CAAC,KAAK;gBAC1B,OAAO,EAAE,aAAa,CAAC,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK;oBAChE,OAAO,IAAI,aAAK,CACf,KAAK,CAAC,eAAe,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,EACnE,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,EACjE,KAAK,CAAC,SAAS,CAAC,CAAC;gBACnB,CAAC,CAAC;aACF,CAAC;QACH,CAAC,CAAC,CAAC;QAEJ,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEtB,0DAA0D;QAC1D,IAAM,YAAY,GAAG,gBAAO,CAC3B,aAAa;aACX,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,IAAI,EAAE,EAAf,CAAe,CAAC;aACzB,GAAG,CAAC,UAAC,cAAc,EAAE,CAAC;YACtB,IAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtD,OAAO,cAAc,CAAC,GAAG,CAAC,UAAA,KAAK;gBAC9B,OAAO,IAAI,aAAK,CACf,KAAK,CAAC,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC,eAAe,EACrD,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,eAAe,EACnD,KAAK,CAAC,SAAS,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,CAAC;QAEN,OAAO,YAAY,CAAC;IACrB,CAAC;IAEO,gDAAW,GAAnB,UAAoB,OAAiB;QACpC,OAAO;YACN,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,SAAS,EAAE,EAAE;YACb,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,QAAQ,EAAE,iBAAS;YACnB,UAAU,EAAE,iBAAS;YACrB,qBAAqB,EAAE,SAAS;YAChC,iBAAiB,EAAE,EAAE;SACrB,CAAC;IACH,CAAC;IAED,qDAAgB,GAAhB,UAAiB,MAAc,EAAE,OAAiB;QACjD,OAAO,EAAE,CAAC;IACX,CAAC;IAED,kDAAa,GAAb,UAAc,GAAW;QACxB,KAAoB,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;YAApC,IAAM,KAAK,SAAA;YACf,KAAsB,UAAc,EAAd,KAAA,KAAK,CAAC,QAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;gBAAjC,IAAM,OAAO,SAAA;gBACjB,KAAsB,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAnC,IAAM,OAAO,SAAA;oBACjB,IAAI,OAAO,CAAC,GAAG,KAAK,GAAG,EAAE;wBACxB,OAAO,OAAO,CAAC;qBACf;iBACD;aACD;SACD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAEO,6CAAQ,GAAhB,UAAiB,WAA+B;QAAhD,iBAYC;QAXA,OAAuB;YACtB,EAAE,EAAE,WAAW,CAAC,EAAE;YAClB,KAAK,EAAE,iBAAS;YAChB,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,UAAU,EAAE,iBAAS;YACrB,QAAQ,EAAE;gBACT;oBACC,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,EAA3B,CAA2B,CAAC;iBAChF;aACD;SACD,CAAC;IACH,CAAC;IACF,iCAAC;AAAD,CAAC,AA1LD,CAAgD,qBAAqB,GA0LpE;AA1LY,gEAA0B;AA4LvC;IAWC,gCAAoB,YAAgB;QAAhB,6BAAA,EAAA,gBAAgB;QAAhB,iBAAY,GAAZ,YAAY,CAAI;QACnC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC3B,CAAC;IAVD,sBAAY,uDAAmB;aAA/B;YACC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;QACxD,CAAC;;;OAAA;IAED,sBAAY,4CAAQ;aAApB;YACC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACpE,CAAC;;;OAAA;IAMD,yCAAQ,GAAR;QAAS,kBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;;QAC7B,CAAA,KAAA,IAAI,CAAC,eAAe,CAAA,CAAC,IAAI,WAAI,QAAQ,EAAE;IACxC,CAAC;IAED,0CAAS,GAAT,UAAU,cAA8B;QACvC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAE1D,IAAI,WAAW,EAAE;YAChB,wCAAwC;YACxC,IAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;YACpE,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC7E;QAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAES,2CAAU,GAApB,UAAqB,KAAqB,EAAE,MAAc;QACzD,IAAI,WAAW,GAAoB,IAAI,CAAC;QACxC,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAChD,KAAsB,UAAc,EAAd,KAAA,KAAK,CAAC,QAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;YAAjC,IAAM,OAAO,SAAA;YACjB,IAAI,OAAO,CAAC,KAAK,EAAE;gBAClB,IAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;gBACvD,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBACnE,OAAO,CAAC,UAAU,GAAG,EAAE,eAAe,EAAE,iBAAiB,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;aACtJ;YAED,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAC5B,KAAsB,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAnC,IAAM,OAAO,SAAA;oBACjB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAClC,WAAW,GAAG,OAAO,CAAC;iBACtB;aACD;SAED;QACD,KAAK,CAAC,KAAK,GAAG,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACxI,OAAO,WAAW,CAAC;IACpB,CAAC;IAED,2CAAU,GAAV;QACC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAEO,4CAAW,GAAnB,UAAoB,OAAiB,EAAE,MAAc;QACpD,IAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAElD,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE7C,IAAI,eAAe,GAAG,MAAM,CAAC;QAC7B,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,eAAe,IAAI,SAAS,CAAC;QAC7B,OAAO,CAAC,QAAQ,GAAG,EAAE,eAAe,EAAE,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,WAAW,EAAE,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QAExM,eAAe,IAAI,IAAI,CAAC;QACxB,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;QAEjD,OAAO,CAAC,UAAU,GAAG,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC5K,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,OAAO,CAAC,KAAK,GAAG,EAAE,eAAe,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC7I,CAAC;IAEO,uDAAsB,GAA9B,UAA+B,OAAiB,EAAE,MAAc;QAAhE,iBAwBC;QAvBA,IAAM,cAAc,GAAG,UAAC,IAAY,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,WAAW,IAAK,OAAA,MAAK,WAAW,MAAI,EAApB,CAAoB,CAAC,EAAvE,CAAuE,CAAC;QAEjH,OAAO,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC/B,IAAM,mBAAmB,GAAG,MAAM,GAAG,KAAK,CAAC;QAC3C,KAAiB,UAAyG,EAAzG,MAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,EAAE,OAAO,CAAC,kBAAkB,SAAK,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAzG,cAAyG,EAAzG,IAAyG,EAAE;YAAvH,IAAI,IAAI,SAAA;YACZ,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;YAE5B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAC;YACtD,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,mBAAmB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;SACtM;QAED,IAAI,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,EAAE;YAC9E,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;gBACxC,IAAM,WAAW,GAAG,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,IAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnE,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC;oBACf,WAAW,UAAK,cAAc,CAAC,IAAI,CAAG,CAAC,CAAC;oBAC3C,WAAW,CAAC;gBAEb,KAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,cAAS,IAAM,CAAC,CAAC;gBAEpD,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE,KAAI,CAAC,mBAAmB,EAAE,WAAW,EAAE,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,aAAa,EAAE,KAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YACvM,CAAC,CAAC,CAAC;SACH;IACF,CAAC;IAEO,0CAAS,GAAjB,UAAkB,OAAiB,EAAE,cAAsB,EAAE,MAAc;QAC1E,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAChE,IAAI,WAAW,IAAI,CAAC,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE;YACvD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE;gBAClD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;gBACjD,KAAyB,UAAiB,EAAjB,KAAA,OAAO,CAAC,SAAS,EAAjB,cAAiB,EAAjB,IAAiB,EAAE;oBAAvC,IAAM,UAAU,SAAA;oBACpB,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,GAAG,MAAM,CAAC,CAAC;oBAC9C,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;iBAC3B;gBACD,IAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACpE,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;gBAC1E,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACrG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;aACxC;iBAAM;gBACN,IAAM,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC/C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtD;aACD;SACD;aAAM;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,CAAC;SACxD;IACF,CAAC;IAEO,+CAAc,GAAtB,UAAuB,WAAqB,EAAE,MAAc,EAAE,MAAgB;QAC7E,KAAmB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;YAA3B,IAAM,IAAI,oBAAA;YACd,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;SACnC;IACF,CAAC;IACF,6BAAC;AAAD,CAAC,AAzID,IAyIC;AAED,SAAgB,eAAe,CAAC,IAAkC;IACjE,OAAO,UAAA,KAAK;QACX,IAAI,YAAgC,CAAC;QACrC,IAAI,YAAgC,CAAC;QAErC,IAAI,OAAO,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YAC/C,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;SAChE;aAAM;YACN,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC;SACrC;QAED,IAAI,OAAO,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YAC/C,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;SAChE;aAAM;YACN,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC;SACrC;QAED,IAAI,YAAgC,CAAC;QACrC,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;YACrC,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxC;QAED,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChE,IAAM,SAAS,GAAG,UAAC,CAAS,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAApB,CAAoB,CAAC;QAEtD,IAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;QACrC,IAAM,SAAS,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,CAAC;QAC1H,IAAM,UAAU,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,CAAC;QAIpG,IAAM,kBAAkB,GAAwB,SAAS,CAAC,CAAC,CAAC;YAC3D;gBACC,OAAO,EAAE,YAAY,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC;gBACnG,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,GAAG,YAAa,EAArB,CAAqB,CAAC;gBACnD,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,uCAAuC,EAAE,YAAY,CAAC;aACxG;YACD;gBACC,OAAO,EAAE,YAAY,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC;gBACnG,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,GAAG,YAAa,EAArB,CAAqB,CAAC;gBACnD,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,0CAA0C,EAAE,YAAY,CAAC;aAC3G;YAED;gBACC,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;gBAClG,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,IAAI,IAAI,CAAC,OAAQ,EAAtB,CAAsB,CAAC;gBACpD,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,0CAA0C,EAAE,IAAI,CAAC,OAAO,CAAC;aAClG;YACD;gBACC,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;gBAClG,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,IAAI,IAAI,CAAC,OAAQ,EAAtB,CAAsB,CAAC;gBACpD,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,6CAA6C,EAAE,IAAI,CAAC,OAAO,CAAC;aACrG;YACD;gBACC,OAAO,EAAE,IAAI,CAAC,UAAU,KAAK,SAAS;gBACtC,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,GAAG,IAAI,CAAC,UAAW,KAAK,CAAC,EAA9B,CAA8B,CAAC;gBAC5D,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,wBAAwB,EAAE,kCAAkC,EAAE,IAAI,CAAC,UAAU,CAAC;aACpG;YACD;gBACC,OAAO,EAAE,UAAU;gBACnB,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,GAAG,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC;gBAC7C,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,2BAA2B,CAAC;aACjF;SACD,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,OAAO,EAAlB,CAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEhD,IAAM,iBAAiB,GAAwB;YAC9C;gBACC,OAAO,EAAE,IAAI,CAAC,SAAS,KAAK,SAAS;gBACrC,OAAO,EAAE,CAAC,UAAC,KAA0B,IAAK,OAAA,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,SAAU,EAA/B,CAA+B,CAAC;gBAC1E,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,6CAA6C,EAAE,IAAI,CAAC,SAAS,CAAC;aAC7G;YACD;gBACC,OAAO,EAAE,IAAI,CAAC,SAAS,KAAK,SAAS;gBACrC,OAAO,EAAE,CAAC,UAAC,KAA0B,IAAK,OAAA,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,SAAU,EAA/B,CAA+B,CAAC;gBAC1E,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,4CAA4C,EAAE,IAAI,CAAC,SAAS,CAAC;aAC5G;YACD;gBACC,OAAO,EAAE,YAAY,KAAK,SAAS;gBACnC,OAAO,EAAE,CAAC,UAAC,KAAa,IAAK,OAAA,YAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC;gBACvD,OAAO,EAAE,IAAI,CAAC,mBAAmB,IAAI,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,+BAA+B,EAAE,IAAI,CAAC,OAAO,CAAC;aACrH;SACD,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,OAAO,EAAlB,CAAkB,CAAC,CAAC;QAE3C,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAC9E,IAAI,UAAU,IAAI,KAAK,KAAK,EAAE,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAE9C,IAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,IAAI,SAAS,EAAE;YACd,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;gBAClC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC,CAAC,CAAC;aACpF;iBAAM;gBACN,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,kBAAkB,CAAC,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,OAAO,EAAjB,CAAiB,CAAC,EAAE;aACvH;SACD;QAED,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC3B,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,iBAAiB,CAAC,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,EAA9B,CAA8B,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,OAAO,EAAjB,CAAiB,CAAC,EAAE;SAC1H;QACD,IAAI,MAAM,CAAC,MAAM,EAAE;YAClB,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,SAAK,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACvF;QACD,OAAO,EAAE,CAAC;IACX,CAAC,CAAC;AACH,CAAC;AAxGD,0CAwGC;AAED;IAAwC,qDAAsB;IAE7D,mCAAoB,MAAqB;QAArB,uBAAA,EAAA,aAAqB;QAAzC,YACC,kBAAM,CAAC,CAAC,SACR;QAFmB,YAAM,GAAN,MAAM,CAAe;;IAEzC,CAAC;IAED,6CAAS,GAAT,UAAU,cAA8B;QACvC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAEF,gCAAC;AAAD,CAAC,AAVD,CAAwC,sBAAsB,GAU7D;AAED;IAAmD,yDAAU;IAI5D,uCAAoB,eAAgC;QAApD,YACC,iBAAO,SAEP;QAHmB,qBAAe,GAAf,eAAe,CAAiB;QAF5C,cAAQ,GAAkB,IAAI,CAAC;QAItC,KAAI,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,EAApB,CAAoB,CAAC,CAAC,CAAC;;IACzE,CAAC;IAED,sBAAI,kDAAO;aAAX;YACC,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;gBAC3B,IAAM,OAAO,GAAG,IAAI,yBAAyB,EAAE,CAAC;gBAChD,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACtB,KAA4B,UAA0C,EAA1C,KAAA,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,EAA1C,cAA0C,EAA1C,IAA0C,EAAE;oBAAnE,IAAM,aAAa,SAAA;oBACvB,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;iBACjC;gBACD,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;aACrC;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;;;OAAA;IACF,oCAAC;AAAD,CAAC,AArBD,CAAmD,sBAAU,GAqB5D;AArBY,sEAA6B;AAuB1C,SAAS,oBAAoB,CAAC,SAAiB;IAC9C,OAAO,SAAS,IAAI,SAAS;SAC3B,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;SACrB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACzB,CAAC;AAED,SAAgB,0BAA0B,CAAC,iBAAqC;IAC/E,IAAM,cAAc,GAAG,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,oEAAoE,CAAC,CAAC;IAC9I,OAAO,cAAc,GAAG,IAAI,GAAG,iBAAiB,CAAC,4BAA4B,EAAE,CAAC;AACjF,CAAC;AAHD,gEAGC;AAED;IAIC,uCAAoB,IAAS,EACS,iBAAqC;QADvD,SAAI,GAAJ,IAAI,CAAK;QACS,sBAAiB,GAAjB,iBAAiB,CAAoB;IAC3E,CAAC;IAED,sBAAI,8CAAG;aAAP;YACC,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;;;OAAA;IAED,sBAAI,kDAAO;aAAX;YACC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnB,IAAI,CAAC,QAAQ,GAAG,0BAA0B,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACnE;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;;;OAAA;IAED,qDAAa,GAAb;QACC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,+CAAO,GAAP;QACC,iBAAiB;IAClB,CAAC;IAzBW,6BAA6B;QAKvC,mBAAA,+BAAkB,CAAA;OALR,6BAA6B,CA0BzC;IAAD,oCAAC;CAAA,AA1BD,IA0BC;AA1BY,sEAA6B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { flatten, tail, find, coalesce } from 'vs/base/common/arrays';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { JSONVisitor, visit } from 'vs/base/common/json';\nimport { Disposable, IReference } from 'vs/base/common/lifecycle';\nimport * as map from 'vs/base/common/map';\nimport { assign } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { ITextEditorModel } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope, Extensions, IConfigurationNode, IConfigurationPropertySchema, IConfigurationRegistry, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { IFilterMetadata, IFilterResult, IGroupFilter, IKeybindingsEditorModel, ISearchResultGroup, ISetting, ISettingMatch, ISettingMatcher, ISettingsEditorModel, ISettingsGroup } from 'vs/workbench/services/preferences/common/preferences';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport const nullRange: IRange = { startLineNumber: -1, startColumn: -1, endLineNumber: -1, endColumn: -1 };\nexport function isNullRange(range: IRange): boolean { return range.startLineNumber === -1 && range.startColumn === -1 && range.endLineNumber === -1 && range.endColumn === -1; }\n\nexport abstract class AbstractSettingsModel extends EditorModel {\n\n\tprotected _currentResultGroups = new Map<string, ISearchResultGroup>();\n\n\tupdateResultGroup(id: string, resultGroup: ISearchResultGroup | undefined): IFilterResult | undefined {\n\t\tif (resultGroup) {\n\t\t\tthis._currentResultGroups.set(id, resultGroup);\n\t\t} else {\n\t\t\tthis._currentResultGroups.delete(id);\n\t\t}\n\n\t\tthis.removeDuplicateResults();\n\t\treturn this.update();\n\t}\n\n\t/**\n\t * Remove duplicates between result groups, preferring results in earlier groups\n\t */\n\tprivate removeDuplicateResults(): void {\n\t\tconst settingKeys = new Set<string>();\n\t\tmap.keys(this._currentResultGroups)\n\t\t\t.sort((a, b) => this._currentResultGroups.get(a)!.order - this._currentResultGroups.get(b)!.order)\n\t\t\t.forEach(groupId => {\n\t\t\t\tconst group = this._currentResultGroups.get(groupId)!;\n\t\t\t\tgroup.result.filterMatches = group.result.filterMatches.filter(s => !settingKeys.has(s.setting.key));\n\t\t\t\tgroup.result.filterMatches.forEach(s => settingKeys.add(s.setting.key));\n\t\t\t});\n\t}\n\n\tfilterSettings(filter: string, groupFilter: IGroupFilter, settingMatcher: ISettingMatcher): ISettingMatch[] {\n\t\tconst allGroups = this.filterGroups;\n\n\t\tconst filterMatches: ISettingMatch[] = [];\n\t\tfor (const group of allGroups) {\n\t\t\tconst groupMatched = groupFilter(group);\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tconst settingMatchResult = settingMatcher(setting, group);\n\n\t\t\t\t\tif (groupMatched || settingMatchResult) {\n\t\t\t\t\t\tfilterMatches.push({\n\t\t\t\t\t\t\tsetting,\n\t\t\t\t\t\t\tmatches: settingMatchResult && settingMatchResult.matches,\n\t\t\t\t\t\t\tscore: settingMatchResult ? settingMatchResult.score : 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn filterMatches.sort((a, b) => b.score - a.score);\n\t}\n\n\tgetPreference(key: string): ISetting | undefined {\n\t\tfor (const group of this.settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (key === setting.key) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected collectMetadata(groups: ISearchResultGroup[]): IStringDictionary<IFilterMetadata> {\n\t\tconst metadata = Object.create(null);\n\t\tlet hasMetadata = false;\n\t\tgroups.forEach(g => {\n\t\t\tif (g.result.metadata) {\n\t\t\t\tmetadata[g.id] = g.result.metadata;\n\t\t\t\thasMetadata = true;\n\t\t\t}\n\t\t});\n\n\t\treturn hasMetadata ? metadata : null;\n\t}\n\n\n\tprotected get filterGroups(): ISettingsGroup[] {\n\t\treturn this.settingsGroups;\n\t}\n\n\tabstract settingsGroups: ISettingsGroup[];\n\n\tabstract findValueMatches(filter: string, setting: ISetting): IRange[];\n\n\tprotected abstract update(): IFilterResult | undefined;\n}\n\nexport class SettingsEditorModel extends AbstractSettingsModel implements ISettingsEditorModel {\n\n\tprivate _settingsGroups: ISettingsGroup[] | undefined;\n\tprotected settingsModel: ITextModel;\n\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tconstructor(reference: IReference<ITextEditorModel>, private _configurationTarget: ConfigurationTarget) {\n\t\tsuper();\n\t\tthis.settingsModel = reference.object.textEditorModel!;\n\t\tthis._register(this.onDispose(() => reference.dispose()));\n\t\tthis._register(this.settingsModel.onDidChangeContent(() => {\n\t\t\tthis._settingsGroups = undefined;\n\t\t\tthis._onDidChangeGroups.fire();\n\t\t}));\n\t}\n\n\tget uri(): URI {\n\t\treturn this.settingsModel.uri;\n\t}\n\n\tget configurationTarget(): ConfigurationTarget {\n\t\treturn this._configurationTarget;\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\tif (!this._settingsGroups) {\n\t\t\tthis.parse();\n\t\t}\n\t\treturn this._settingsGroups!;\n\t}\n\n\tget content(): string {\n\t\treturn this.settingsModel.getValue();\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\treturn this.settingsModel.findMatches(filter, setting.valueRange, false, false, null, false).map(match => match.range);\n\t}\n\n\tprotected isSettingsProperty(property: string, previousParents: string[]): boolean {\n\t\treturn previousParents.length === 0; // Settings is root\n\t}\n\n\tprotected parse(): void {\n\t\tthis._settingsGroups = parse(this.settingsModel, (property: string, previousParents: string[]): boolean => this.isSettingsProperty(property, previousParents));\n\t}\n\n\tprotected update(): IFilterResult | undefined {\n\t\tconst resultGroups = map.values(this._currentResultGroups);\n\t\tif (!resultGroups.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Transform resultGroups into IFilterResult - ISetting ranges are already correct here\n\t\tconst filteredSettings: ISetting[] = [];\n\t\tconst matches: IRange[] = [];\n\t\tresultGroups.forEach(group => {\n\t\t\tgroup.result.filterMatches.forEach(filterMatch => {\n\t\t\t\tfilteredSettings.push(filterMatch.setting);\n\t\t\t\tif (filterMatch.matches) {\n\t\t\t\t\tmatches.push(...filterMatch.matches);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tlet filteredGroup: ISettingsGroup | undefined;\n\t\tconst modelGroup = this.settingsGroups[0]; // Editable model has one or zero groups\n\t\tif (modelGroup) {\n\t\t\tfilteredGroup = {\n\t\t\t\tid: modelGroup.id,\n\t\t\t\trange: modelGroup.range,\n\t\t\t\tsections: [{\n\t\t\t\t\tsettings: filteredSettings\n\t\t\t\t}],\n\t\t\t\ttitle: modelGroup.title,\n\t\t\t\ttitleRange: modelGroup.titleRange,\n\t\t\t\tcontributedByExtension: !!modelGroup.contributedByExtension\n\t\t\t};\n\t\t}\n\n\t\tconst metadata = this.collectMetadata(resultGroups);\n\t\treturn {\n\t\t\tallGroups: this.settingsGroups,\n\t\t\tfilteredGroups: filteredGroup ? [filteredGroup] : [],\n\t\t\tmatches,\n\t\t\tmetadata\n\t\t};\n\t}\n}\n\nexport class Settings2EditorModel extends AbstractSettingsModel implements ISettingsEditorModel {\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tprivate dirty = false;\n\n\tconstructor(\n\t\tprivate _defaultSettings: DefaultSettings,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\tthis.dirty = true;\n\t\t\t\tthis._onDidChangeGroups.fire();\n\t\t\t}\n\t\t}));\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidSchemaChange(e => {\n\t\t\tthis.dirty = true;\n\t\t\tthis._onDidChangeGroups.fire();\n\t\t}));\n\t}\n\n\tprotected get filterGroups(): ISettingsGroup[] {\n\t\t// Don't filter \"commonly used\"\n\t\treturn this.settingsGroups.slice(1);\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\tconst groups = this._defaultSettings.getSettingsGroups(this.dirty);\n\t\tthis.dirty = false;\n\t\treturn groups;\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\t// TODO @roblou\n\t\treturn [];\n\t}\n\n\tprotected update(): IFilterResult {\n\t\tthrow new Error('Not supported');\n\t}\n}\n\nfunction parse(model: ITextModel, isSettingsProperty: (currentProperty: string, previousParents: string[]) => boolean): ISettingsGroup[] {\n\tconst settings: ISetting[] = [];\n\tlet overrideSetting: ISetting | null = null;\n\n\tlet currentProperty: string | null = null;\n\tlet currentParent: any = [];\n\tconst previousParents: any[] = [];\n\tlet settingsPropertyIndex: number = -1;\n\tconst range = {\n\t\tstartLineNumber: 0,\n\t\tstartColumn: 0,\n\t\tendLineNumber: 0,\n\t\tendColumn: 0\n\t};\n\n\tfunction onValue(value: any, offset: number, length: number) {\n\t\tif (Array.isArray(currentParent)) {\n\t\t\t(<any[]>currentParent).push(value);\n\t\t} else if (currentProperty) {\n\t\t\tcurrentParent[currentProperty] = value;\n\t\t}\n\t\tif (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n\t\t\t// settings value started\n\t\t\tconst setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting!.overrides![overrideSetting!.overrides!.length - 1];\n\t\t\tif (setting) {\n\t\t\t\tconst valueStartPosition = model.getPositionAt(offset);\n\t\t\t\tconst valueEndPosition = model.getPositionAt(offset + length);\n\t\t\t\tsetting.value = value;\n\t\t\t\tsetting.valueRange = {\n\t\t\t\t\tstartLineNumber: valueStartPosition.lineNumber,\n\t\t\t\t\tstartColumn: valueStartPosition.column,\n\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t};\n\t\t\t\tsetting.range = assign(setting.range, {\n\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tconst visitor: JSONVisitor = {\n\t\tonObjectBegin: (offset: number, length: number) => {\n\t\t\tif (isSettingsProperty(currentProperty!, previousParents)) {\n\t\t\t\t// Settings started\n\t\t\t\tsettingsPropertyIndex = previousParents.length;\n\t\t\t\tconst position = model.getPositionAt(offset);\n\t\t\t\trange.startLineNumber = position.lineNumber;\n\t\t\t\trange.startColumn = position.column;\n\t\t\t}\n\t\t\tconst object = {};\n\t\t\tonValue(object, offset, length);\n\t\t\tcurrentParent = object;\n\t\t\tcurrentProperty = null;\n\t\t\tpreviousParents.push(currentParent);\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tcurrentProperty = name;\n\t\t\tif (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n\t\t\t\t// setting started\n\t\t\t\tconst settingStartPosition = model.getPositionAt(offset);\n\t\t\t\tconst setting: ISetting = {\n\t\t\t\t\tdescription: [],\n\t\t\t\t\tdescriptionIsMarkdown: false,\n\t\t\t\t\tkey: name,\n\t\t\t\t\tkeyRange: {\n\t\t\t\t\t\tstartLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tstartColumn: settingStartPosition.column + 1,\n\t\t\t\t\t\tendLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tendColumn: settingStartPosition.column + length\n\t\t\t\t\t},\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tstartColumn: settingStartPosition.column,\n\t\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\t\tendColumn: 0\n\t\t\t\t\t},\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\toverrides: [],\n\t\t\t\t\toverrideOf: withNullAsUndefined(overrideSetting)\n\t\t\t\t};\n\t\t\t\tif (previousParents.length === settingsPropertyIndex + 1) {\n\t\t\t\t\tsettings.push(setting);\n\t\t\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(name)) {\n\t\t\t\t\t\toverrideSetting = setting;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toverrideSetting!.overrides!.push(setting);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t\tif (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n\t\t\t\t// setting ended\n\t\t\t\tconst setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting!.overrides![overrideSetting!.overrides!.length - 1];\n\t\t\t\tif (setting) {\n\t\t\t\t\tconst valueEndPosition = model.getPositionAt(offset + length);\n\t\t\t\t\tsetting.valueRange = assign(setting.valueRange, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t\t});\n\t\t\t\t\tsetting.range = assign(setting.range, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (previousParents.length === settingsPropertyIndex + 1) {\n\t\t\t\t\toverrideSetting = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (previousParents.length === settingsPropertyIndex) {\n\t\t\t\t// settings ended\n\t\t\t\tconst position = model.getPositionAt(offset);\n\t\t\t\trange.endLineNumber = position.lineNumber;\n\t\t\t\trange.endColumn = position.column;\n\t\t\t}\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\tconst array: any[] = [];\n\t\t\tonValue(array, offset, length);\n\t\t\tpreviousParents.push(currentParent);\n\t\t\tcurrentParent = array;\n\t\t\tcurrentProperty = null;\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t\tif (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n\t\t\t\t// setting value ended\n\t\t\t\tconst setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting!.overrides![overrideSetting!.overrides!.length - 1];\n\t\t\t\tif (setting) {\n\t\t\t\t\tconst valueEndPosition = model.getPositionAt(offset + length);\n\t\t\t\t\tsetting.valueRange = assign(setting.valueRange, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t\t});\n\t\t\t\t\tsetting.range = assign(setting.range, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonLiteralValue: onValue,\n\t\tonError: (error) => {\n\t\t\tconst setting = settings[settings.length - 1];\n\t\t\tif (setting && (isNullRange(setting.range) || isNullRange(setting.keyRange) || isNullRange(setting.valueRange))) {\n\t\t\t\tsettings.pop();\n\t\t\t}\n\t\t}\n\t};\n\tif (!model.isDisposed()) {\n\t\tvisit(model.getValue(), visitor);\n\t}\n\treturn settings.length > 0 ? [<ISettingsGroup>{\n\t\tsections: [\n\t\t\t{\n\t\t\t\tsettings\n\t\t\t}\n\t\t],\n\t\ttitle: '',\n\t\ttitleRange: nullRange,\n\t\trange\n\t}] : [];\n}\n\nexport class WorkspaceConfigurationEditorModel extends SettingsEditorModel {\n\n\tprivate _configurationGroups: ISettingsGroup[];\n\n\tget configurationGroups(): ISettingsGroup[] {\n\t\treturn this._configurationGroups;\n\t}\n\n\tprotected parse(): void {\n\t\tsuper.parse();\n\t\tthis._configurationGroups = parse(this.settingsModel, (property: string, previousParents: string[]): boolean => previousParents.length === 0);\n\t}\n\n\tprotected isSettingsProperty(property: string, previousParents: string[]): boolean {\n\t\treturn property === 'settings' && previousParents.length === 1;\n\t}\n\n}\n\nexport class DefaultSettings extends Disposable {\n\n\tprivate _allSettingsGroups: ISettingsGroup[];\n\tprivate _content: string;\n\tprivate _settingsByName: Map<string, ISetting>;\n\n\treadonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate _mostCommonlyUsedSettingsKeys: string[],\n\t\treadonly target: ConfigurationTarget,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetContent(forceUpdate = false): string {\n\t\tif (!this._content || forceUpdate) {\n\t\t\tthis.initialize();\n\t\t}\n\n\t\treturn this._content;\n\t}\n\n\tgetSettingsGroups(forceUpdate = false): ISettingsGroup[] {\n\t\tif (!this._allSettingsGroups || forceUpdate) {\n\t\t\tthis.initialize();\n\t\t}\n\n\t\treturn this._allSettingsGroups;\n\t}\n\n\tprivate initialize(): void {\n\t\tthis._allSettingsGroups = this.parse();\n\t\tthis._content = this.toContent(this._allSettingsGroups);\n\t}\n\n\tprivate parse(): ISettingsGroup[] {\n\t\tconst settingsGroups = this.getRegisteredGroups();\n\t\tthis.initAllSettingsMap(settingsGroups);\n\t\tconst mostCommonlyUsed = this.getMostCommonlyUsedSettings(settingsGroups);\n\t\treturn [mostCommonlyUsed, ...settingsGroups];\n\t}\n\n\tgetRegisteredGroups(): ISettingsGroup[] {\n\t\tconst configurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurations().slice();\n\t\tconst groups = this.removeEmptySettingsGroups(configurations.sort(this.compareConfigurationNodes)\n\t\t\t.reduce((result, config, index, array) => this.parseConfig(config, result, array), []));\n\n\t\treturn this.sortGroups(groups);\n\t}\n\n\tprivate sortGroups(groups: ISettingsGroup[]): ISettingsGroup[] {\n\t\tgroups.forEach(group => {\n\t\t\tgroup.sections.forEach(section => {\n\t\t\t\tsection.settings.sort((a, b) => a.key.localeCompare(b.key));\n\t\t\t});\n\t\t});\n\n\t\treturn groups;\n\t}\n\n\tprivate initAllSettingsMap(allSettingsGroups: ISettingsGroup[]): void {\n\t\tthis._settingsByName = new Map<string, ISetting>();\n\t\tfor (const group of allSettingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis._settingsByName.set(setting.key, setting);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(allSettingsGroups: ISettingsGroup[]): ISettingsGroup {\n\t\tconst settings = coalesce(this._mostCommonlyUsedSettingsKeys.map(key => {\n\t\t\tconst setting = this._settingsByName.get(key);\n\t\t\tif (setting) {\n\t\t\t\treturn <ISetting>{\n\t\t\t\t\tdescription: setting.description,\n\t\t\t\t\tkey: setting.key,\n\t\t\t\t\tvalue: setting.value,\n\t\t\t\t\tkeyRange: nullRange,\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\toverrides: [],\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE,\n\t\t\t\t\ttype: setting.type,\n\t\t\t\t\tenum: setting.enum,\n\t\t\t\t\tenumDescriptions: setting.enumDescriptions,\n\t\t\t\t\tdescriptionRanges: []\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn null;\n\t\t}));\n\n\t\treturn <ISettingsGroup>{\n\t\t\tid: 'mostCommonlyUsed',\n\t\t\trange: nullRange,\n\t\t\ttitle: nls.localize('commonlyUsed', \"Commonly Used\"),\n\t\t\ttitleRange: nullRange,\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tsettings\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n\tprivate parseConfig(config: IConfigurationNode, result: ISettingsGroup[], configurations: IConfigurationNode[], settingsGroup?: ISettingsGroup, seenSettings?: { [key: string]: boolean }): ISettingsGroup[] {\n\t\tseenSettings = seenSettings ? seenSettings : {};\n\t\tlet title = config.title;\n\t\tif (!title) {\n\t\t\tconst configWithTitleAndSameId = find(configurations, c => (c.id === config.id) && c.title);\n\t\t\tif (configWithTitleAndSameId) {\n\t\t\t\ttitle = configWithTitleAndSameId.title;\n\t\t\t}\n\t\t}\n\t\tif (title) {\n\t\t\tif (!settingsGroup) {\n\t\t\t\tsettingsGroup = find(result, g => g.title === title);\n\t\t\t\tif (!settingsGroup) {\n\t\t\t\t\tsettingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: title || '', titleRange: nullRange, range: nullRange, contributedByExtension: !!config.contributedByExtension };\n\t\t\t\t\tresult.push(settingsGroup);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsettingsGroup.sections[settingsGroup.sections.length - 1].title = title;\n\t\t\t}\n\t\t}\n\t\tif (config.properties) {\n\t\t\tif (!settingsGroup) {\n\t\t\t\tsettingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: config.id || '', titleRange: nullRange, range: nullRange, contributedByExtension: !!config.contributedByExtension };\n\t\t\t\tresult.push(settingsGroup);\n\t\t\t}\n\t\t\tconst configurationSettings: ISetting[] = [];\n\t\t\tfor (const setting of [...settingsGroup.sections[settingsGroup.sections.length - 1].settings, ...this.parseSettings(config.properties)]) {\n\t\t\t\tif (!seenSettings[setting.key]) {\n\t\t\t\t\tconfigurationSettings.push(setting);\n\t\t\t\t\tseenSettings[setting.key] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (configurationSettings.length) {\n\t\t\t\tsettingsGroup.sections[settingsGroup.sections.length - 1].settings = configurationSettings;\n\t\t\t}\n\t\t}\n\t\tif (config.allOf) {\n\t\t\tconfig.allOf.forEach(c => this.parseConfig(c, result, configurations, settingsGroup, seenSettings));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate removeEmptySettingsGroups(settingsGroups: ISettingsGroup[]): ISettingsGroup[] {\n\t\tconst result: ISettingsGroup[] = [];\n\t\tfor (const settingsGroup of settingsGroups) {\n\t\t\tsettingsGroup.sections = settingsGroup.sections.filter(section => section.settings.length > 0);\n\t\t\tif (settingsGroup.sections.length) {\n\t\t\t\tresult.push(settingsGroup);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseSettings(settingsObject: { [path: string]: IConfigurationPropertySchema; }): ISetting[] {\n\t\tconst result: ISetting[] = [];\n\t\tfor (const key in settingsObject) {\n\t\t\tconst prop = settingsObject[key];\n\t\t\tif (this.matchesScope(prop)) {\n\t\t\t\tconst value = prop.default;\n\t\t\t\tconst description = (prop.description || prop.markdownDescription || '').split('\\n');\n\t\t\t\tconst overrides = OVERRIDE_PROPERTY_PATTERN.test(key) ? this.parseOverrideSettings(prop.default) : [];\n\t\t\t\tresult.push({\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tdescription,\n\t\t\t\t\tdescriptionIsMarkdown: !prop.description,\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\tkeyRange: nullRange,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\toverrides,\n\t\t\t\t\tscope: prop.scope,\n\t\t\t\t\ttype: prop.type,\n\t\t\t\t\tenum: prop.enum,\n\t\t\t\t\tenumDescriptions: prop.enumDescriptions || prop.markdownEnumDescriptions,\n\t\t\t\t\tenumDescriptionsAreMarkdown: !prop.enumDescriptions,\n\t\t\t\t\ttags: prop.tags,\n\t\t\t\t\tdeprecationMessage: prop.deprecationMessage,\n\t\t\t\t\tvalidator: createValidator(prop)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseOverrideSettings(overrideSettings: any): ISetting[] {\n\t\treturn Object.keys(overrideSettings).map((key) => ({\n\t\t\tkey,\n\t\t\tvalue: overrideSettings[key],\n\t\t\tdescription: [],\n\t\t\tdescriptionIsMarkdown: false,\n\t\t\trange: nullRange,\n\t\t\tkeyRange: nullRange,\n\t\t\tvalueRange: nullRange,\n\t\t\tdescriptionRanges: [],\n\t\t\toverrides: []\n\t\t}));\n\t}\n\n\tprivate matchesScope(property: IConfigurationNode): boolean {\n\t\tif (this.target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn property.scope === ConfigurationScope.RESOURCE;\n\t\t}\n\t\tif (this.target === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn property.scope === ConfigurationScope.WINDOW || property.scope === ConfigurationScope.RESOURCE;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate compareConfigurationNodes(c1: IConfigurationNode, c2: IConfigurationNode): number {\n\t\tif (typeof c1.order !== 'number') {\n\t\t\treturn 1;\n\t\t}\n\t\tif (typeof c2.order !== 'number') {\n\t\t\treturn -1;\n\t\t}\n\t\tif (c1.order === c2.order) {\n\t\t\tconst title1 = c1.title || '';\n\t\t\tconst title2 = c2.title || '';\n\t\t\treturn title1.localeCompare(title2);\n\t\t}\n\t\treturn c1.order - c2.order;\n\t}\n\n\tprivate toContent(settingsGroups: ISettingsGroup[]): string {\n\t\tconst builder = new SettingsContentBuilder();\n\t\tbuilder.pushLine('[');\n\t\tsettingsGroups.forEach((settingsGroup, i) => {\n\t\t\tbuilder.pushGroup(settingsGroup);\n\t\t\tbuilder.pushLine(',');\n\t\t});\n\t\tbuilder.pushLine(']');\n\t\treturn builder.getContent();\n\t}\n\n}\n\nexport class DefaultSettingsEditorModel extends AbstractSettingsModel implements ISettingsEditorModel {\n\n\tprivate _model: ITextModel;\n\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tconstructor(\n\t\tprivate _uri: URI,\n\t\treference: IReference<ITextEditorModel>,\n\t\tprivate readonly defaultSettings: DefaultSettings\n\t) {\n\t\tsuper();\n\n\t\tthis._register(defaultSettings.onDidChange(() => this._onDidChangeGroups.fire()));\n\t\tthis._model = reference.object.textEditorModel!;\n\t\tthis._register(this.onDispose(() => reference.dispose()));\n\t}\n\n\tget uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tget target(): ConfigurationTarget {\n\t\treturn this.defaultSettings.target;\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\treturn this.defaultSettings.getSettingsGroups();\n\t}\n\n\tprotected get filterGroups(): ISettingsGroup[] {\n\t\t// Don't look at \"commonly used\" for filter\n\t\treturn this.settingsGroups.slice(1);\n\t}\n\n\tprotected update(): IFilterResult | undefined {\n\t\tif (this._model.isDisposed()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Grab current result groups, only render non-empty groups\n\t\tconst resultGroups = map\n\t\t\t.values(this._currentResultGroups)\n\t\t\t.sort((a, b) => a.order - b.order);\n\t\tconst nonEmptyResultGroups = resultGroups.filter(group => group.result.filterMatches.length);\n\n\t\tconst startLine = tail(this.settingsGroups).range.endLineNumber + 2;\n\t\tconst { settingsGroups: filteredGroups, matches } = this.writeResultGroups(nonEmptyResultGroups, startLine);\n\n\t\tconst metadata = this.collectMetadata(resultGroups);\n\t\treturn resultGroups.length ?\n\t\t\t<IFilterResult>{\n\t\t\t\tallGroups: this.settingsGroups,\n\t\t\t\tfilteredGroups,\n\t\t\t\tmatches,\n\t\t\t\tmetadata\n\t\t\t} :\n\t\t\tundefined;\n\t}\n\n\t/**\n\t * Translate the ISearchResultGroups to text, and write it to the editor model\n\t */\n\tprivate writeResultGroups(groups: ISearchResultGroup[], startLine: number): { matches: IRange[], settingsGroups: ISettingsGroup[] } {\n\t\tconst contentBuilderOffset = startLine - 1;\n\t\tconst builder = new SettingsContentBuilder(contentBuilderOffset);\n\n\t\tconst settingsGroups: ISettingsGroup[] = [];\n\t\tconst matches: IRange[] = [];\n\t\tbuilder.pushLine(',');\n\t\tgroups.forEach(resultGroup => {\n\t\t\tconst settingsGroup = this.getGroup(resultGroup);\n\t\t\tsettingsGroups.push(settingsGroup);\n\t\t\tmatches.push(...this.writeSettingsGroupToBuilder(builder, settingsGroup, resultGroup.result.filterMatches));\n\t\t});\n\n\t\t// note: 1-indexed line numbers here\n\t\tconst groupContent = builder.getContent() + '\\n';\n\t\tconst groupEndLine = this._model.getLineCount();\n\t\tconst cursorPosition = new Selection(startLine, 1, startLine, 1);\n\t\tconst edit: IIdentifiedSingleEditOperation = {\n\t\t\ttext: groupContent,\n\t\t\tforceMoveMarkers: true,\n\t\t\trange: new Range(startLine, 1, groupEndLine, 1),\n\t\t\tidentifier: { major: 1, minor: 0 }\n\t\t};\n\n\t\tthis._model.pushEditOperations([cursorPosition], [edit], () => [cursorPosition]);\n\n\t\t// Force tokenization now - otherwise it may be slightly delayed, causing a flash of white text\n\t\tconst tokenizeTo = Math.min(startLine + 60, this._model.getLineCount());\n\t\tthis._model.forceTokenization(tokenizeTo);\n\n\t\treturn { matches, settingsGroups };\n\t}\n\n\tprivate writeSettingsGroupToBuilder(builder: SettingsContentBuilder, settingsGroup: ISettingsGroup, filterMatches: ISettingMatch[]): IRange[] {\n\t\tfilterMatches = filterMatches\n\t\t\t.map(filteredMatch => {\n\t\t\t\t// Fix match ranges to offset from setting start line\n\t\t\t\treturn <ISettingMatch>{\n\t\t\t\t\tsetting: filteredMatch.setting,\n\t\t\t\t\tscore: filteredMatch.score,\n\t\t\t\t\tmatches: filteredMatch.matches && filteredMatch.matches.map(match => {\n\t\t\t\t\t\treturn new Range(\n\t\t\t\t\t\t\tmatch.startLineNumber - filteredMatch.setting.range.startLineNumber,\n\t\t\t\t\t\t\tmatch.startColumn,\n\t\t\t\t\t\t\tmatch.endLineNumber - filteredMatch.setting.range.startLineNumber,\n\t\t\t\t\t\t\tmatch.endColumn);\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t});\n\n\t\tbuilder.pushGroup(settingsGroup);\n\t\tbuilder.pushLine(',');\n\n\t\t// builder has rewritten settings ranges, fix match ranges\n\t\tconst fixedMatches = flatten(\n\t\t\tfilterMatches\n\t\t\t\t.map(m => m.matches || [])\n\t\t\t\t.map((settingMatches, i) => {\n\t\t\t\t\tconst setting = settingsGroup.sections[0].settings[i];\n\t\t\t\t\treturn settingMatches.map(range => {\n\t\t\t\t\t\treturn new Range(\n\t\t\t\t\t\t\trange.startLineNumber + setting.range.startLineNumber,\n\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\trange.endLineNumber + setting.range.startLineNumber,\n\t\t\t\t\t\t\trange.endColumn);\n\t\t\t\t\t});\n\t\t\t\t}));\n\n\t\treturn fixedMatches;\n\t}\n\n\tprivate copySetting(setting: ISetting): ISetting {\n\t\treturn {\n\t\t\tdescription: setting.description,\n\t\t\tscope: setting.scope,\n\t\t\ttype: setting.type,\n\t\t\tenum: setting.enum,\n\t\t\tenumDescriptions: setting.enumDescriptions,\n\t\t\tkey: setting.key,\n\t\t\tvalue: setting.value,\n\t\t\trange: setting.range,\n\t\t\toverrides: [],\n\t\t\toverrideOf: setting.overrideOf,\n\t\t\ttags: setting.tags,\n\t\t\tdeprecationMessage: setting.deprecationMessage,\n\t\t\tkeyRange: nullRange,\n\t\t\tvalueRange: nullRange,\n\t\t\tdescriptionIsMarkdown: undefined,\n\t\t\tdescriptionRanges: []\n\t\t};\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\treturn [];\n\t}\n\n\tgetPreference(key: string): ISetting | undefined {\n\t\tfor (const group of this.settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (setting.key === key) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getGroup(resultGroup: ISearchResultGroup): ISettingsGroup {\n\t\treturn <ISettingsGroup>{\n\t\t\tid: resultGroup.id,\n\t\t\trange: nullRange,\n\t\t\ttitle: resultGroup.label,\n\t\t\ttitleRange: nullRange,\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tsettings: resultGroup.result.filterMatches.map(m => this.copySetting(m.setting))\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n}\n\nclass SettingsContentBuilder {\n\tprivate _contentByLines: string[];\n\n\tprivate get lineCountWithOffset(): number {\n\t\treturn this._contentByLines.length + this._rangeOffset;\n\t}\n\n\tprivate get lastLine(): string {\n\t\treturn this._contentByLines[this._contentByLines.length - 1] || '';\n\t}\n\n\tconstructor(private _rangeOffset = 0) {\n\t\tthis._contentByLines = [];\n\t}\n\n\tpushLine(...lineText: string[]): void {\n\t\tthis._contentByLines.push(...lineText);\n\t}\n\n\tpushGroup(settingsGroups: ISettingsGroup): void {\n\t\tthis._contentByLines.push('{');\n\t\tthis._contentByLines.push('');\n\t\tthis._contentByLines.push('');\n\t\tconst lastSetting = this._pushGroup(settingsGroups, '  ');\n\n\t\tif (lastSetting) {\n\t\t\t// Strip the comma from the last setting\n\t\t\tconst lineIdx = lastSetting.range.endLineNumber - this._rangeOffset;\n\t\t\tconst content = this._contentByLines[lineIdx - 2];\n\t\t\tthis._contentByLines[lineIdx - 2] = content.substring(0, content.length - 1);\n\t\t}\n\n\t\tthis._contentByLines.push('}');\n\t}\n\n\tprotected _pushGroup(group: ISettingsGroup, indent: string): ISetting | null {\n\t\tlet lastSetting: ISetting | null = null;\n\t\tconst groupStart = this.lineCountWithOffset + 1;\n\t\tfor (const section of group.sections) {\n\t\t\tif (section.title) {\n\t\t\t\tconst sectionTitleStart = this.lineCountWithOffset + 1;\n\t\t\t\tthis.addDescription([section.title], indent, this._contentByLines);\n\t\t\t\tsection.titleRange = { startLineNumber: sectionTitleStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n\t\t\t}\n\n\t\t\tif (section.settings.length) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis.pushSetting(setting, indent);\n\t\t\t\t\tlastSetting = setting;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tgroup.range = { startLineNumber: groupStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n\t\treturn lastSetting;\n\t}\n\n\tgetContent(): string {\n\t\treturn this._contentByLines.join('\\n');\n\t}\n\n\tprivate pushSetting(setting: ISetting, indent: string): void {\n\t\tconst settingStart = this.lineCountWithOffset + 1;\n\n\t\tthis.pushSettingDescription(setting, indent);\n\n\t\tlet preValueContent = indent;\n\t\tconst keyString = JSON.stringify(setting.key);\n\t\tpreValueContent += keyString;\n\t\tsetting.keyRange = { startLineNumber: this.lineCountWithOffset + 1, startColumn: preValueContent.indexOf(setting.key) + 1, endLineNumber: this.lineCountWithOffset + 1, endColumn: setting.key.length };\n\n\t\tpreValueContent += ': ';\n\t\tconst valueStart = this.lineCountWithOffset + 1;\n\t\tthis.pushValue(setting, preValueContent, indent);\n\n\t\tsetting.valueRange = { startLineNumber: valueStart, startColumn: preValueContent.length + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length + 1 };\n\t\tthis._contentByLines[this._contentByLines.length - 1] += ',';\n\t\tthis._contentByLines.push('');\n\t\tsetting.range = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n\t}\n\n\tprivate pushSettingDescription(setting: ISetting, indent: string): void {\n\t\tconst fixSettingLink = (line: string) => line.replace(/`#(.*)#`/g, (match, settingName) => `\\`${settingName}\\``);\n\n\t\tsetting.descriptionRanges = [];\n\t\tconst descriptionPreValue = indent + '// ';\n\t\tfor (let line of (setting.deprecationMessage ? [setting.deprecationMessage, ...setting.description] : setting.description)) {\n\t\t\tline = fixSettingLink(line);\n\n\t\t\tthis._contentByLines.push(descriptionPreValue + line);\n\t\t\tsetting.descriptionRanges.push({ startLineNumber: this.lineCountWithOffset, startColumn: this.lastLine.indexOf(line) + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length });\n\t\t}\n\n\t\tif (setting.enumDescriptions && setting.enumDescriptions.some(desc => !!desc)) {\n\t\t\tsetting.enumDescriptions.forEach((desc, i) => {\n\t\t\t\tconst displayEnum = escapeInvisibleChars(String(setting.enum![i]));\n\t\t\t\tconst line = desc ?\n\t\t\t\t\t`${displayEnum}: ${fixSettingLink(desc)}` :\n\t\t\t\t\tdisplayEnum;\n\n\t\t\t\tthis._contentByLines.push(`${indent}//  - ${line}`);\n\n\t\t\t\tsetting.descriptionRanges.push({ startLineNumber: this.lineCountWithOffset, startColumn: this.lastLine.indexOf(line) + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length });\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate pushValue(setting: ISetting, preValueConent: string, indent: string): void {\n\t\tconst valueString = JSON.stringify(setting.value, null, indent);\n\t\tif (valueString && (typeof setting.value === 'object')) {\n\t\t\tif (setting.overrides && setting.overrides.length) {\n\t\t\t\tthis._contentByLines.push(preValueConent + ' {');\n\t\t\t\tfor (const subSetting of setting.overrides) {\n\t\t\t\t\tthis.pushSetting(subSetting, indent + indent);\n\t\t\t\t\tthis._contentByLines.pop();\n\t\t\t\t}\n\t\t\t\tconst lastSetting = setting.overrides[setting.overrides.length - 1];\n\t\t\t\tconst content = this._contentByLines[lastSetting.range.endLineNumber - 2];\n\t\t\t\tthis._contentByLines[lastSetting.range.endLineNumber - 2] = content.substring(0, content.length - 1);\n\t\t\t\tthis._contentByLines.push(indent + '}');\n\t\t\t} else {\n\t\t\t\tconst mulitLineValue = valueString.split('\\n');\n\t\t\t\tthis._contentByLines.push(preValueConent + mulitLineValue[0]);\n\t\t\t\tfor (let i = 1; i < mulitLineValue.length; i++) {\n\t\t\t\t\tthis._contentByLines.push(indent + mulitLineValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._contentByLines.push(preValueConent + valueString);\n\t\t}\n\t}\n\n\tprivate addDescription(description: string[], indent: string, result: string[]) {\n\t\tfor (const line of description) {\n\t\t\tresult.push(indent + '// ' + line);\n\t\t}\n\t}\n}\n\nexport function createValidator(prop: IConfigurationPropertySchema): (value: any) => (string | null) {\n\treturn value => {\n\t\tlet exclusiveMax: number | undefined;\n\t\tlet exclusiveMin: number | undefined;\n\n\t\tif (typeof prop.exclusiveMaximum === 'boolean') {\n\t\t\texclusiveMax = prop.exclusiveMaximum ? prop.maximum : undefined;\n\t\t} else {\n\t\t\texclusiveMax = prop.exclusiveMaximum;\n\t\t}\n\n\t\tif (typeof prop.exclusiveMinimum === 'boolean') {\n\t\t\texclusiveMin = prop.exclusiveMinimum ? prop.minimum : undefined;\n\t\t} else {\n\t\t\texclusiveMin = prop.exclusiveMinimum;\n\t\t}\n\n\t\tlet patternRegex: RegExp | undefined;\n\t\tif (typeof prop.pattern === 'string') {\n\t\t\tpatternRegex = new RegExp(prop.pattern);\n\t\t}\n\n\t\tconst type = Array.isArray(prop.type) ? prop.type : [prop.type];\n\t\tconst canBeType = (t: string) => type.indexOf(t) > -1;\n\n\t\tconst isNullable = canBeType('null');\n\t\tconst isNumeric = (canBeType('number') || canBeType('integer')) && (type.length === 1 || type.length === 2 && isNullable);\n\t\tconst isIntegral = (canBeType('integer')) && (type.length === 1 || type.length === 2 && isNullable);\n\n\t\ttype Validator<T> = { enabled: boolean, isValid: (value: T) => boolean; message: string };\n\n\t\tconst numericValidations: Validator<number>[] = isNumeric ? [\n\t\t\t{\n\t\t\t\tenabled: exclusiveMax !== undefined && (prop.maximum === undefined || exclusiveMax <= prop.maximum),\n\t\t\t\tisValid: ((value: number) => value < exclusiveMax!),\n\t\t\t\tmessage: nls.localize('validations.exclusiveMax', \"Value must be strictly less than {0}.\", exclusiveMax)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: exclusiveMin !== undefined && (prop.minimum === undefined || exclusiveMin >= prop.minimum),\n\t\t\t\tisValid: ((value: number) => value > exclusiveMin!),\n\t\t\t\tmessage: nls.localize('validations.exclusiveMin', \"Value must be strictly greater than {0}.\", exclusiveMin)\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tenabled: prop.maximum !== undefined && (exclusiveMax === undefined || exclusiveMax > prop.maximum),\n\t\t\t\tisValid: ((value: number) => value <= prop.maximum!),\n\t\t\t\tmessage: nls.localize('validations.max', \"Value must be less than or equal to {0}.\", prop.maximum)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: prop.minimum !== undefined && (exclusiveMin === undefined || exclusiveMin < prop.minimum),\n\t\t\t\tisValid: ((value: number) => value >= prop.minimum!),\n\t\t\t\tmessage: nls.localize('validations.min', \"Value must be greater than or equal to {0}.\", prop.minimum)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: prop.multipleOf !== undefined,\n\t\t\t\tisValid: ((value: number) => value % prop.multipleOf! === 0),\n\t\t\t\tmessage: nls.localize('validations.multipleOf', \"Value must be a multiple of {0}.\", prop.multipleOf)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: isIntegral,\n\t\t\t\tisValid: ((value: number) => value % 1 === 0),\n\t\t\t\tmessage: nls.localize('validations.expectedInteger', \"Value must be an integer.\")\n\t\t\t},\n\t\t].filter(validation => validation.enabled) : [];\n\n\t\tconst stringValidations: Validator<string>[] = [\n\t\t\t{\n\t\t\t\tenabled: prop.maxLength !== undefined,\n\t\t\t\tisValid: ((value: { length: number; }) => value.length <= prop.maxLength!),\n\t\t\t\tmessage: nls.localize('validations.maxLength', \"Value must be {0} or fewer characters long.\", prop.maxLength)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: prop.minLength !== undefined,\n\t\t\t\tisValid: ((value: { length: number; }) => value.length >= prop.minLength!),\n\t\t\t\tmessage: nls.localize('validations.minLength', \"Value must be {0} or more characters long.\", prop.minLength)\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: patternRegex !== undefined,\n\t\t\t\tisValid: ((value: string) => patternRegex!.test(value)),\n\t\t\t\tmessage: prop.patternErrorMessage || nls.localize('validations.regex', \"Value must match regex `{0}`.\", prop.pattern)\n\t\t\t},\n\t\t].filter(validation => validation.enabled);\n\n\t\tif (prop.type === 'string' && stringValidations.length === 0) { return null; }\n\t\tif (isNullable && value === '') { return ''; }\n\n\t\tconst errors: string[] = [];\n\n\t\tif (isNumeric) {\n\t\t\tif (value === '' || isNaN(+value)) {\n\t\t\t\terrors.push(nls.localize('validations.expectedNumeric', \"Value must be a number.\"));\n\t\t\t} else {\n\t\t\t\terrors.push(...numericValidations.filter(validator => !validator.isValid(+value)).map(validator => validator.message));\n\t\t\t}\n\t\t}\n\n\t\tif (prop.type === 'string') {\n\t\t\terrors.push(...stringValidations.filter(validator => !validator.isValid('' + value)).map(validator => validator.message));\n\t\t}\n\t\tif (errors.length) {\n\t\t\treturn prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');\n\t\t}\n\t\treturn '';\n\t};\n}\n\nclass RawSettingsContentBuilder extends SettingsContentBuilder {\n\n\tconstructor(private indent: string = '\\t') {\n\t\tsuper(0);\n\t}\n\n\tpushGroup(settingsGroups: ISettingsGroup): void {\n\t\tthis._pushGroup(settingsGroups, this.indent);\n\t}\n\n}\n\nexport class DefaultRawSettingsEditorModel extends Disposable {\n\n\tprivate _content: string | null = null;\n\n\tconstructor(private defaultSettings: DefaultSettings) {\n\t\tsuper();\n\t\tthis._register(defaultSettings.onDidChange(() => this._content = null));\n\t}\n\n\tget content(): string {\n\t\tif (this._content === null) {\n\t\t\tconst builder = new RawSettingsContentBuilder();\n\t\t\tbuilder.pushLine('{');\n\t\t\tfor (const settingsGroup of this.defaultSettings.getRegisteredGroups()) {\n\t\t\t\tbuilder.pushGroup(settingsGroup);\n\t\t\t}\n\t\t\tbuilder.pushLine('}');\n\t\t\tthis._content = builder.getContent();\n\t\t}\n\t\treturn this._content;\n\t}\n}\n\nfunction escapeInvisibleChars(enumValue: string): string {\n\treturn enumValue && enumValue\n\t\t.replace(/\\n/g, '\\\\n')\n\t\t.replace(/\\r/g, '\\\\r');\n}\n\nexport function defaultKeybindingsContents(keybindingService: IKeybindingService): string {\n\tconst defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', \"Override key bindings by placing them into your key bindings file.\");\n\treturn defaultsHeader + '\\n' + keybindingService.getDefaultKeybindingsContent();\n}\n\nexport class DefaultKeybindingsEditorModel implements IKeybindingsEditorModel<any> {\n\n\tprivate _content: string;\n\n\tconstructor(private _uri: URI,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService) {\n\t}\n\n\tget uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tget content(): string {\n\t\tif (!this._content) {\n\t\t\tthis._content = defaultKeybindingsContents(this.keybindingService);\n\t\t}\n\t\treturn this._content;\n\t}\n\n\tgetPreference(): any {\n\t\treturn null;\n\t}\n\n\tdispose(): void {\n\t\t// Not disposable\n\t}\n}\n"]}]}