{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/minimap/minimap.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/minimap/minimap.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./minimap\");\nvar dom = require(\"vs/base/browser/dom\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar globalMouseMoveMonitor_1 = require(\"vs/base/browser/globalMouseMoveMonitor\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar platform = require(\"vs/base/common/platform\");\nvar strings = require(\"vs/base/common/strings\");\nvar viewLayer_1 = require(\"vs/editor/browser/view/viewLayer\");\nvar viewPart_1 = require(\"vs/editor/browser/view/viewPart\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar minimapCharRenderer_1 = require(\"vs/editor/common/view/minimapCharRenderer\");\nvar runtimeMinimapCharRenderer_1 = require(\"vs/editor/common/view/runtimeMinimapCharRenderer\");\nvar viewEvents = require(\"vs/editor/common/view/viewEvents\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nfunction getMinimapLineHeight(renderMinimap) {\n    if (renderMinimap === editorOptions_1.RenderMinimap.Large) {\n        return minimapCharRenderer_1.Constants.x2_CHAR_HEIGHT;\n    }\n    if (renderMinimap === editorOptions_1.RenderMinimap.LargeBlocks) {\n        return minimapCharRenderer_1.Constants.x2_CHAR_HEIGHT + 2;\n    }\n    if (renderMinimap === editorOptions_1.RenderMinimap.Small) {\n        return minimapCharRenderer_1.Constants.x1_CHAR_HEIGHT;\n    }\n    // RenderMinimap.SmallBlocks\n    return minimapCharRenderer_1.Constants.x1_CHAR_HEIGHT + 1;\n}\nfunction getMinimapCharWidth(renderMinimap) {\n    if (renderMinimap === editorOptions_1.RenderMinimap.Large) {\n        return minimapCharRenderer_1.Constants.x2_CHAR_WIDTH;\n    }\n    if (renderMinimap === editorOptions_1.RenderMinimap.LargeBlocks) {\n        return minimapCharRenderer_1.Constants.x2_CHAR_WIDTH;\n    }\n    if (renderMinimap === editorOptions_1.RenderMinimap.Small) {\n        return minimapCharRenderer_1.Constants.x1_CHAR_WIDTH;\n    }\n    // RenderMinimap.SmallBlocks\n    return minimapCharRenderer_1.Constants.x1_CHAR_WIDTH;\n}\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nvar MOUSE_DRAG_RESET_DISTANCE = 140;\nvar MinimapOptions = /** @class */ (function () {\n    function MinimapOptions(configuration) {\n        var pixelRatio = configuration.editor.pixelRatio;\n        var layoutInfo = configuration.editor.layoutInfo;\n        var viewInfo = configuration.editor.viewInfo;\n        var fontInfo = configuration.editor.fontInfo;\n        this.renderMinimap = layoutInfo.renderMinimap | 0;\n        this.scrollBeyondLastLine = viewInfo.scrollBeyondLastLine;\n        this.showSlider = viewInfo.minimap.showSlider;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = configuration.editor.lineHeight;\n        this.minimapLeft = layoutInfo.minimapLeft;\n        this.minimapWidth = layoutInfo.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = Math.max(1, Math.floor(pixelRatio * this.minimapWidth));\n        this.canvasInnerHeight = Math.max(1, Math.floor(pixelRatio * this.minimapHeight));\n        this.canvasOuterWidth = this.canvasInnerWidth / pixelRatio;\n        this.canvasOuterHeight = this.canvasInnerHeight / pixelRatio;\n    }\n    MinimapOptions.prototype.equals = function (other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.showSlider === other.showSlider\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight);\n    };\n    return MinimapOptions;\n}());\nvar MinimapLayout = /** @class */ (function () {\n    function MinimapLayout(scrollTop, scrollHeight, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this._computedSliderRatio = computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    MinimapLayout.prototype.getDesiredScrollTopFromDelta = function (delta) {\n        var desiredSliderPosition = this.sliderTop + delta;\n        return Math.round(desiredSliderPosition / this._computedSliderRatio);\n    };\n    MinimapLayout.create = function (options, viewportStartLineNumber, viewportEndLineNumber, viewportHeight, viewportContainsWhitespaceGaps, lineCount, scrollTop, scrollHeight, previousLayout) {\n        var pixelRatio = options.pixelRatio;\n        var minimapLineHeight = getMinimapLineHeight(options.renderMinimap);\n        var minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        var lineHeight = options.lineHeight;\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        var sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            var viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            var expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        var maxMinimapSliderTop;\n        if (options.scrollBeyondLastLine) {\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (lineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, lineCount * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        var computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        var sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= lineCount) {\n            // All lines fit in the minimap\n            var startLineNumber = 1;\n            var endLineNumber = lineCount;\n            return new MinimapLayout(scrollTop, scrollHeight, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n        }\n        else {\n            var startLineNumber = Math.max(1, Math.floor(viewportStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                }\n            }\n            var endLineNumber = Math.min(lineCount, startLineNumber + minimapLinesFitting - 1);\n            return new MinimapLayout(scrollTop, scrollHeight, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n        }\n    };\n    return MinimapLayout;\n}());\nvar MinimapLine = /** @class */ (function () {\n    function MinimapLine(dy) {\n        this.dy = dy;\n    }\n    MinimapLine.prototype.onContentChanged = function () {\n        this.dy = -1;\n    };\n    MinimapLine.prototype.onTokensChanged = function () {\n        this.dy = -1;\n    };\n    MinimapLine.INVALID = new MinimapLine(-1);\n    return MinimapLine;\n}());\nvar RenderData = /** @class */ (function () {\n    function RenderData(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new viewLayer_1.RenderedLinesCollection(function () { return MinimapLine.INVALID; });\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    RenderData.prototype.linesEquals = function (layout) {\n        if (this.renderedLayout.startLineNumber !== layout.startLineNumber) {\n            return false;\n        }\n        if (this.renderedLayout.endLineNumber !== layout.endLineNumber) {\n            return false;\n        }\n        var tmp = this._renderedLines._get();\n        var lines = tmp.lines;\n        for (var i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    };\n    RenderData.prototype._get = function () {\n        var tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    };\n    RenderData.prototype.onLinesChanged = function (e) {\n        return this._renderedLines.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n    };\n    RenderData.prototype.onLinesDeleted = function (e) {\n        this._renderedLines.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n    };\n    RenderData.prototype.onLinesInserted = function (e) {\n        this._renderedLines.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n    };\n    RenderData.prototype.onTokensChanged = function (e) {\n        return this._renderedLines.onTokensChanged(e.ranges);\n    };\n    return RenderData;\n}());\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nvar MinimapBuffers = /** @class */ (function () {\n    function MinimapBuffers(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    MinimapBuffers.prototype.getBuffer = function () {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        var result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    };\n    MinimapBuffers._createBackgroundFillData = function (WIDTH, HEIGHT, background) {\n        var backgroundR = background.r;\n        var backgroundG = background.g;\n        var backgroundB = background.b;\n        var result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        var offset = 0;\n        for (var i = 0; i < HEIGHT; i++) {\n            for (var j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = 255;\n                offset += 4;\n            }\n        }\n        return result;\n    };\n    return MinimapBuffers;\n}());\nvar Minimap = /** @class */ (function (_super) {\n    tslib_1.__extends(Minimap, _super);\n    function Minimap(context) {\n        var _this = _super.call(this, context) || this;\n        _this._options = new MinimapOptions(_this._context.configuration);\n        _this._lastRenderData = null;\n        _this._buffers = null;\n        _this._domNode = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        viewPart_1.PartFingerprints.write(_this._domNode, viewPart_1.PartFingerprint.Minimap);\n        _this._domNode.setClassName(_this._getMinimapDomNodeClassName());\n        _this._domNode.setPosition('absolute');\n        _this._domNode.setAttribute('role', 'presentation');\n        _this._domNode.setAttribute('aria-hidden', 'true');\n        _this._shadow = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this._shadow.setClassName('minimap-shadow-hidden');\n        _this._domNode.appendChild(_this._shadow);\n        _this._canvas = fastDomNode_1.createFastDomNode(document.createElement('canvas'));\n        _this._canvas.setPosition('absolute');\n        _this._canvas.setLeft(0);\n        _this._domNode.appendChild(_this._canvas);\n        _this._slider = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this._slider.setPosition('absolute');\n        _this._slider.setClassName('minimap-slider');\n        _this._slider.setLayerHinting(true);\n        _this._domNode.appendChild(_this._slider);\n        _this._sliderHorizontal = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this._sliderHorizontal.setPosition('absolute');\n        _this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        _this._slider.appendChild(_this._sliderHorizontal);\n        _this._tokensColorTracker = minimapCharRenderer_1.MinimapTokensColorTracker.getInstance();\n        _this._applyLayout();\n        _this._mouseDownListener = dom.addStandardDisposableListener(_this._canvas.domNode, 'mousedown', function (e) {\n            e.preventDefault();\n            var renderMinimap = _this._options.renderMinimap;\n            if (renderMinimap === editorOptions_1.RenderMinimap.None) {\n                return;\n            }\n            if (!_this._lastRenderData) {\n                return;\n            }\n            var minimapLineHeight = getMinimapLineHeight(renderMinimap);\n            var internalOffsetY = _this._options.pixelRatio * e.browserEvent.offsetY;\n            var lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            var lineNumber = lineIndex + _this._lastRenderData.renderedLayout.startLineNumber;\n            lineNumber = Math.min(lineNumber, _this._context.model.getLineCount());\n            _this._context.privateViewEventBus.emit(new viewEvents.ViewRevealRangeRequestEvent(new range_1.Range(lineNumber, 1, lineNumber, 1), viewEvents.VerticalRevealType.Center, false, editorCommon_1.ScrollType.Smooth));\n        });\n        _this._sliderMouseMoveMonitor = new globalMouseMoveMonitor_1.GlobalMouseMoveMonitor();\n        _this._sliderMouseDownListener = dom.addStandardDisposableListener(_this._slider.domNode, 'mousedown', function (e) {\n            e.preventDefault();\n            if (e.leftButton && _this._lastRenderData) {\n                var initialMousePosition_1 = e.posy;\n                var initialMouseOrthogonalPosition_1 = e.posx;\n                var initialSliderState_1 = _this._lastRenderData.renderedLayout;\n                _this._slider.toggleClassName('active', true);\n                _this._sliderMouseMoveMonitor.startMonitoring(globalMouseMoveMonitor_1.standardMouseMoveMerger, function (mouseMoveData) {\n                    var mouseOrthogonalDelta = Math.abs(mouseMoveData.posx - initialMouseOrthogonalPosition_1);\n                    if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n                        // The mouse has wondered away from the scrollbar => reset dragging\n                        _this._context.viewLayout.setScrollPositionNow({\n                            scrollTop: initialSliderState_1.scrollTop\n                        });\n                        return;\n                    }\n                    var mouseDelta = mouseMoveData.posy - initialMousePosition_1;\n                    _this._context.viewLayout.setScrollPositionNow({\n                        scrollTop: initialSliderState_1.getDesiredScrollTopFromDelta(mouseDelta)\n                    });\n                }, function () {\n                    _this._slider.toggleClassName('active', false);\n                });\n            }\n        });\n        return _this;\n    }\n    Minimap.prototype.dispose = function () {\n        this._mouseDownListener.dispose();\n        this._sliderMouseMoveMonitor.dispose();\n        this._sliderMouseDownListener.dispose();\n        _super.prototype.dispose.call(this);\n    };\n    Minimap.prototype._getMinimapDomNodeClassName = function () {\n        if (this._options.showSlider === 'always') {\n            return 'minimap slider-always';\n        }\n        return 'minimap slider-mouseover';\n    };\n    Minimap.prototype.getDomNode = function () {\n        return this._domNode;\n    };\n    Minimap.prototype._applyLayout = function () {\n        this._domNode.setLeft(this._options.minimapLeft);\n        this._domNode.setWidth(this._options.minimapWidth);\n        this._domNode.setHeight(this._options.minimapHeight);\n        this._shadow.setHeight(this._options.minimapHeight);\n        this._canvas.setWidth(this._options.canvasOuterWidth);\n        this._canvas.setHeight(this._options.canvasOuterHeight);\n        this._canvas.domNode.width = this._options.canvasInnerWidth;\n        this._canvas.domNode.height = this._options.canvasInnerHeight;\n        this._slider.setWidth(this._options.minimapWidth);\n    };\n    Minimap.prototype._getBuffer = function () {\n        if (!this._buffers) {\n            this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._options.canvasInnerWidth, this._options.canvasInnerHeight, this._tokensColorTracker.getColor(modes_1.ColorId.DefaultBackground));\n        }\n        return this._buffers.getBuffer();\n    };\n    Minimap.prototype._onOptionsMaybeChanged = function () {\n        var opts = new MinimapOptions(this._context.configuration);\n        if (this._options.equals(opts)) {\n            return false;\n        }\n        this._options = opts;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        return true;\n    };\n    // ---- begin view event handlers\n    Minimap.prototype.onConfigurationChanged = function (e) {\n        return this._onOptionsMaybeChanged();\n    };\n    Minimap.prototype.onFlushed = function (e) {\n        this._lastRenderData = null;\n        return true;\n    };\n    Minimap.prototype.onLinesChanged = function (e) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(e);\n        }\n        return false;\n    };\n    Minimap.prototype.onLinesDeleted = function (e) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesDeleted(e);\n        }\n        return true;\n    };\n    Minimap.prototype.onLinesInserted = function (e) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesInserted(e);\n        }\n        return true;\n    };\n    Minimap.prototype.onScrollChanged = function (e) {\n        return true;\n    };\n    Minimap.prototype.onTokensChanged = function (e) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(e);\n        }\n        return false;\n    };\n    Minimap.prototype.onTokensColorsChanged = function (e) {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    };\n    Minimap.prototype.onZonesChanged = function (e) {\n        this._lastRenderData = null;\n        return true;\n    };\n    // --- end event handlers\n    Minimap.prototype.prepareRender = function (ctx) {\n        // Nothing to read\n    };\n    Minimap.prototype.render = function (renderingCtx) {\n        var renderMinimap = this._options.renderMinimap;\n        if (renderMinimap === editorOptions_1.RenderMinimap.None) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        var layout = MinimapLayout.create(this._options, renderingCtx.visibleRange.startLineNumber, renderingCtx.visibleRange.endLineNumber, renderingCtx.viewportHeight, (renderingCtx.viewportData.whitespaceViewportData.length > 0), this._context.model.getLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        var scrollLeftChars = renderingCtx.scrollLeft / this._options.typicalHalfwidthCharacterWidth;\n        var horizontalSliderLeft = Math.min(this._options.minimapWidth, Math.round(scrollLeftChars * getMinimapCharWidth(this._options.renderMinimap) / this._options.pixelRatio));\n        this._sliderHorizontal.setLeft(horizontalSliderLeft);\n        this._sliderHorizontal.setWidth(this._options.minimapWidth - horizontalSliderLeft);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this._lastRenderData = this.renderLines(layout);\n    };\n    Minimap.prototype.renderLines = function (layout) {\n        var renderMinimap = this._options.renderMinimap;\n        var startLineNumber = layout.startLineNumber;\n        var endLineNumber = layout.endLineNumber;\n        var minimapLineHeight = getMinimapLineHeight(renderMinimap);\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            var _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        var imageData = this._getBuffer();\n        // Render untouched lines by using last rendered data.\n        var _a = Minimap._renderUntouchedLines(imageData, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData), _dirtyY1 = _a[0], _dirtyY2 = _a[1], needed = _a[2];\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        var lineInfo = this._context.model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        var tabSize = lineInfo.tabSize;\n        var background = this._tokensColorTracker.getColor(modes_1.ColorId.DefaultBackground);\n        var useLighterFont = this._tokensColorTracker.backgroundIsLight();\n        // Render the rest of lines\n        var dy = 0;\n        var renderedLines = [];\n        for (var lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                Minimap._renderLine(imageData, background, useLighterFont, renderMinimap, this._tokensColorTracker, runtimeMinimapCharRenderer_1.getOrCreateMinimapCharRenderer(), dy, tabSize, lineInfo.data[lineIndex]);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        var dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        var dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        var dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        var ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    };\n    Minimap._renderUntouchedLines = function (target, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        var needed = [];\n        if (!lastRenderData) {\n            for (var i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        var _lastData = lastRenderData._get();\n        var lastTargetData = _lastData.imageData.data;\n        var lastStartLineNumber = _lastData.rendLineNumberStart;\n        var lastLines = _lastData.lines;\n        var lastLinesLength = lastLines.length;\n        var WIDTH = target.width;\n        var targetData = target.data;\n        var maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        var dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        var dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        var copySourceStart = -1;\n        var copySourceEnd = -1;\n        var copyDestStart = -1;\n        var copyDestEnd = -1;\n        var dest_dy = 0;\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - startLineNumber;\n            var lastLineIndex = lineNumber - lastStartLineNumber;\n            var source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            var sourceStart = source_dy * WIDTH * 4;\n            var sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            var destStart = dest_dy * WIDTH * 4;\n            var destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        var dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        var dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    };\n    Minimap._renderLine = function (target, backgroundColor, useLighterFont, renderMinimap, colorTracker, minimapCharRenderer, dy, tabSize, lineData) {\n        var content = lineData.content;\n        var tokens = lineData.tokens;\n        var charWidth = getMinimapCharWidth(renderMinimap);\n        var maxDx = target.width - charWidth;\n        var dx = 0;\n        var charIndex = 0;\n        var tabsCharDelta = 0;\n        for (var tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            var tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            var tokenColorId = tokens.getForeground(tokenIndex);\n            var tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                var charCode = content.charCodeAt(charIndex);\n                if (charCode === charCode_1.CharCode.Tab) {\n                    var insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === charCode_1.CharCode.Space) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    var count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (var i = 0; i < count; i++) {\n                        if (renderMinimap === editorOptions_1.RenderMinimap.Large) {\n                            minimapCharRenderer.x2RenderChar(target, dx, dy, charCode, tokenColor, backgroundColor, useLighterFont);\n                        }\n                        else if (renderMinimap === editorOptions_1.RenderMinimap.Small) {\n                            minimapCharRenderer.x1RenderChar(target, dx, dy, charCode, tokenColor, backgroundColor, useLighterFont);\n                        }\n                        else if (renderMinimap === editorOptions_1.RenderMinimap.LargeBlocks) {\n                            minimapCharRenderer.x2BlockRenderChar(target, dx, dy, tokenColor, backgroundColor, useLighterFont);\n                        }\n                        else {\n                            // RenderMinimap.SmallBlocks\n                            minimapCharRenderer.x1BlockRenderChar(target, dx, dy, tokenColor, backgroundColor, useLighterFont);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    return Minimap;\n}(viewPart_1.ViewPart));\nexports.Minimap = Minimap;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var sliderBackground = theme.getColor(colorRegistry_1.scrollbarSliderBackground);\n    if (sliderBackground) {\n        var halfSliderBackground = sliderBackground.transparent(0.5);\n        collector.addRule(\".monaco-editor .minimap-slider, .monaco-editor .minimap-slider .minimap-slider-horizontal { background: \" + halfSliderBackground + \"; }\");\n    }\n    var sliderHoverBackground = theme.getColor(colorRegistry_1.scrollbarSliderHoverBackground);\n    if (sliderHoverBackground) {\n        var halfSliderHoverBackground = sliderHoverBackground.transparent(0.5);\n        collector.addRule(\".monaco-editor .minimap-slider:hover, .monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: \" + halfSliderHoverBackground + \"; }\");\n    }\n    var sliderActiveBackground = theme.getColor(colorRegistry_1.scrollbarSliderActiveBackground);\n    if (sliderActiveBackground) {\n        var halfSliderActiveBackground = sliderActiveBackground.transparent(0.5);\n        collector.addRule(\".monaco-editor .minimap-slider.active, .monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: \" + halfSliderActiveBackground + \"; }\");\n    }\n    var shadow = theme.getColor(colorRegistry_1.scrollbarShadow);\n    if (shadow) {\n        collector.addRule(\".monaco-editor .minimap-shadow-visible { box-shadow: \" + shadow + \" -6px 0 6px -6px inset; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/minimap/minimap.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/minimap/minimap.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./minimap';\nimport * as dom from 'vs/base/browser/dom';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { GlobalMouseMoveMonitor, IStandardMouseMoveEventData, standardMouseMoveMerger } from 'vs/base/browser/globalMouseMoveMonitor';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport * as strings from 'vs/base/common/strings';\nimport { ILine, RenderedLinesCollection } from 'vs/editor/browser/view/viewLayer';\nimport { PartFingerprint, PartFingerprints, ViewPart } from 'vs/editor/browser/view/viewPart';\nimport { RenderMinimap } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { RGBA8 } from 'vs/editor/common/core/rgba';\nimport { IConfiguration, ScrollType } from 'vs/editor/common/editorCommon';\nimport { ColorId } from 'vs/editor/common/modes';\nimport { Constants, MinimapCharRenderer, MinimapTokensColorTracker } from 'vs/editor/common/view/minimapCharRenderer';\nimport { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { getOrCreateMinimapCharRenderer } from 'vs/editor/common/view/runtimeMinimapCharRenderer';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { ViewLineData } from 'vs/editor/common/viewModel/viewModel';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\n\nfunction getMinimapLineHeight(renderMinimap: RenderMinimap): number {\n\tif (renderMinimap === RenderMinimap.Large) {\n\t\treturn Constants.x2_CHAR_HEIGHT;\n\t}\n\tif (renderMinimap === RenderMinimap.LargeBlocks) {\n\t\treturn Constants.x2_CHAR_HEIGHT + 2;\n\t}\n\tif (renderMinimap === RenderMinimap.Small) {\n\t\treturn Constants.x1_CHAR_HEIGHT;\n\t}\n\t// RenderMinimap.SmallBlocks\n\treturn Constants.x1_CHAR_HEIGHT + 1;\n}\n\nfunction getMinimapCharWidth(renderMinimap: RenderMinimap): number {\n\tif (renderMinimap === RenderMinimap.Large) {\n\t\treturn Constants.x2_CHAR_WIDTH;\n\t}\n\tif (renderMinimap === RenderMinimap.LargeBlocks) {\n\t\treturn Constants.x2_CHAR_WIDTH;\n\t}\n\tif (renderMinimap === RenderMinimap.Small) {\n\t\treturn Constants.x1_CHAR_WIDTH;\n\t}\n\t// RenderMinimap.SmallBlocks\n\treturn Constants.x1_CHAR_WIDTH;\n}\n\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\n\nclass MinimapOptions {\n\n\tpublic readonly renderMinimap: RenderMinimap;\n\n\tpublic readonly scrollBeyondLastLine: boolean;\n\n\tpublic readonly showSlider: 'always' | 'mouseover';\n\n\tpublic readonly pixelRatio: number;\n\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\n\tpublic readonly lineHeight: number;\n\n\t/**\n\t * container dom node left position (in CSS px)\n\t */\n\tpublic readonly minimapLeft: number;\n\t/**\n\t * container dom node width (in CSS px)\n\t */\n\tpublic readonly minimapWidth: number;\n\t/**\n\t * container dom node height (in CSS px)\n\t */\n\tpublic readonly minimapHeight: number;\n\n\t/**\n\t * canvas backing store width (in device px)\n\t */\n\tpublic readonly canvasInnerWidth: number;\n\t/**\n\t * canvas backing store height (in device px)\n\t */\n\tpublic readonly canvasInnerHeight: number;\n\n\t/**\n\t * canvas width (in CSS px)\n\t */\n\tpublic readonly canvasOuterWidth: number;\n\t/**\n\t * canvas height (in CSS px)\n\t */\n\tpublic readonly canvasOuterHeight: number;\n\n\tconstructor(configuration: IConfiguration) {\n\t\tconst pixelRatio = configuration.editor.pixelRatio;\n\t\tconst layoutInfo = configuration.editor.layoutInfo;\n\t\tconst viewInfo = configuration.editor.viewInfo;\n\t\tconst fontInfo = configuration.editor.fontInfo;\n\n\t\tthis.renderMinimap = layoutInfo.renderMinimap | 0;\n\t\tthis.scrollBeyondLastLine = viewInfo.scrollBeyondLastLine;\n\t\tthis.showSlider = viewInfo.minimap.showSlider;\n\t\tthis.pixelRatio = pixelRatio;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.lineHeight = configuration.editor.lineHeight;\n\t\tthis.minimapLeft = layoutInfo.minimapLeft;\n\t\tthis.minimapWidth = layoutInfo.minimapWidth;\n\t\tthis.minimapHeight = layoutInfo.height;\n\n\t\tthis.canvasInnerWidth = Math.max(1, Math.floor(pixelRatio * this.minimapWidth));\n\t\tthis.canvasInnerHeight = Math.max(1, Math.floor(pixelRatio * this.minimapHeight));\n\n\t\tthis.canvasOuterWidth = this.canvasInnerWidth / pixelRatio;\n\t\tthis.canvasOuterHeight = this.canvasInnerHeight / pixelRatio;\n\t}\n\n\tpublic equals(other: MinimapOptions): boolean {\n\t\treturn (this.renderMinimap === other.renderMinimap\n\t\t\t&& this.scrollBeyondLastLine === other.scrollBeyondLastLine\n\t\t\t&& this.showSlider === other.showSlider\n\t\t\t&& this.pixelRatio === other.pixelRatio\n\t\t\t&& this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n\t\t\t&& this.lineHeight === other.lineHeight\n\t\t\t&& this.minimapLeft === other.minimapLeft\n\t\t\t&& this.minimapWidth === other.minimapWidth\n\t\t\t&& this.minimapHeight === other.minimapHeight\n\t\t\t&& this.canvasInnerWidth === other.canvasInnerWidth\n\t\t\t&& this.canvasInnerHeight === other.canvasInnerHeight\n\t\t\t&& this.canvasOuterWidth === other.canvasOuterWidth\n\t\t\t&& this.canvasOuterHeight === other.canvasOuterHeight\n\t\t);\n\t}\n}\n\nclass MinimapLayout {\n\n\t/**\n\t * The given editor scrollTop (input).\n\t */\n\tpublic readonly scrollTop: number;\n\n\t/**\n\t* The given editor scrollHeight (input).\n\t*/\n\tpublic readonly scrollHeight: number;\n\n\tprivate readonly _computedSliderRatio: number;\n\n\t/**\n\t * slider dom node top (in CSS px)\n\t */\n\tpublic readonly sliderTop: number;\n\t/**\n\t * slider dom node height (in CSS px)\n\t */\n\tpublic readonly sliderHeight: number;\n\n\t/**\n\t * minimap render start line number.\n\t */\n\tpublic readonly startLineNumber: number;\n\t/**\n\t * minimap render end line number.\n\t */\n\tpublic readonly endLineNumber: number;\n\n\tconstructor(\n\t\tscrollTop: number,\n\t\tscrollHeight: number,\n\t\tcomputedSliderRatio: number,\n\t\tsliderTop: number,\n\t\tsliderHeight: number,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number\n\t) {\n\t\tthis.scrollTop = scrollTop;\n\t\tthis.scrollHeight = scrollHeight;\n\t\tthis._computedSliderRatio = computedSliderRatio;\n\t\tthis.sliderTop = sliderTop;\n\t\tthis.sliderHeight = sliderHeight;\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.endLineNumber = endLineNumber;\n\t}\n\n\t/**\n\t * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n\t */\n\tpublic getDesiredScrollTopFromDelta(delta: number): number {\n\t\tconst desiredSliderPosition = this.sliderTop + delta;\n\t\treturn Math.round(desiredSliderPosition / this._computedSliderRatio);\n\t}\n\n\tpublic static create(\n\t\toptions: MinimapOptions,\n\t\tviewportStartLineNumber: number,\n\t\tviewportEndLineNumber: number,\n\t\tviewportHeight: number,\n\t\tviewportContainsWhitespaceGaps: boolean,\n\t\tlineCount: number,\n\t\tscrollTop: number,\n\t\tscrollHeight: number,\n\t\tpreviousLayout: MinimapLayout | null\n\t): MinimapLayout {\n\t\tconst pixelRatio = options.pixelRatio;\n\t\tconst minimapLineHeight = getMinimapLineHeight(options.renderMinimap);\n\t\tconst minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n\t\tconst lineHeight = options.lineHeight;\n\n\t\t// The visible line count in a viewport can change due to a number of reasons:\n\t\t//  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n\t\t//    e.g. for a line height of 20, and a viewport height of 600\n\t\t//          * scrollTop = 0  => visible lines are [1, 30]\n\t\t//          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n\t\t//          * scrollTop = 20 => visible lines are [2, 31]\n\t\t//  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n\t\t//  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n\n\t\t// We must first establish a desirable slider height.\n\t\tlet sliderHeight: number;\n\t\tif (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n\t\t\t// case b) from above: there are whitespace gaps in the viewport.\n\t\t\t// In this case, the height of the slider directly reflects the visible line count.\n\t\t\tconst viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n\t\t\tsliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n\t\t} else {\n\t\t\t// The slider has a stable height\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\tsliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n\t\t}\n\n\t\tlet maxMinimapSliderTop: number;\n\t\tif (options.scrollBeyondLastLine) {\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its top\n\t\t\tmaxMinimapSliderTop = (lineCount - 1) * minimapLineHeight / pixelRatio;\n\t\t} else {\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its bottom\n\t\t\tmaxMinimapSliderTop = Math.max(0, lineCount * minimapLineHeight / pixelRatio - sliderHeight);\n\t\t}\n\t\tmaxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n\n\t\t// The slider can move from 0 to `maxMinimapSliderTop`\n\t\t// in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n\t\tconst computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n\t\tconst sliderTop = (scrollTop * computedSliderRatio);\n\n\t\tif (minimapLinesFitting >= lineCount) {\n\t\t\t// All lines fit in the minimap\n\t\t\tconst startLineNumber = 1;\n\t\t\tconst endLineNumber = lineCount;\n\n\t\t\treturn new MinimapLayout(scrollTop, scrollHeight, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n\t\t} else {\n\t\t\tlet startLineNumber = Math.max(1, Math.floor(viewportStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n\n\t\t\t// Avoid flickering caused by a partial viewport start line\n\t\t\t// by being consistent w.r.t. the previous layout decision\n\t\t\tif (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n\t\t\t\tif (previousLayout.scrollTop > scrollTop) {\n\t\t\t\t\t// Scrolling up => never increase `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n\t\t\t\t}\n\t\t\t\tif (previousLayout.scrollTop < scrollTop) {\n\t\t\t\t\t// Scrolling down => never decrease `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endLineNumber = Math.min(lineCount, startLineNumber + minimapLinesFitting - 1);\n\n\t\t\treturn new MinimapLayout(scrollTop, scrollHeight, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n\t\t}\n\t}\n}\n\nclass MinimapLine implements ILine {\n\n\tpublic static readonly INVALID = new MinimapLine(-1);\n\n\tdy: number;\n\n\tconstructor(dy: number) {\n\t\tthis.dy = dy;\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis.dy = -1;\n\t}\n\n\tpublic onTokensChanged(): void {\n\t\tthis.dy = -1;\n\t}\n}\n\nclass RenderData {\n\t/**\n\t * last rendered layout.\n\t */\n\tpublic readonly renderedLayout: MinimapLayout;\n\tprivate readonly _imageData: ImageData;\n\tprivate readonly _renderedLines: RenderedLinesCollection<MinimapLine>;\n\n\tconstructor(\n\t\trenderedLayout: MinimapLayout,\n\t\timageData: ImageData,\n\t\tlines: MinimapLine[]\n\t) {\n\t\tthis.renderedLayout = renderedLayout;\n\t\tthis._imageData = imageData;\n\t\tthis._renderedLines = new RenderedLinesCollection(\n\t\t\t() => MinimapLine.INVALID\n\t\t);\n\t\tthis._renderedLines._set(renderedLayout.startLineNumber, lines);\n\t}\n\n\t/**\n\t * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n\t */\n\tpublic linesEquals(layout: MinimapLayout): boolean {\n\t\tif (this.renderedLayout.startLineNumber !== layout.startLineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.renderedLayout.endLineNumber !== layout.endLineNumber) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tmp = this._renderedLines._get();\n\t\tconst lines = tmp.lines;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].dy === -1) {\n\t\t\t\t// This line is invalid\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t_get(): { imageData: ImageData; rendLineNumberStart: number; lines: MinimapLine[]; } {\n\t\tconst tmp = this._renderedLines._get();\n\t\treturn {\n\t\t\timageData: this._imageData,\n\t\t\trendLineNumberStart: tmp.rendLineNumberStart,\n\t\t\tlines: tmp.lines\n\t\t};\n\t}\n\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn this._renderedLines.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): void {\n\t\tthis._renderedLines.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): void {\n\t\tthis._renderedLines.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n\t}\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn this._renderedLines.onTokensChanged(e.ranges);\n\t}\n}\n\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n\n\tprivate readonly _backgroundFillData: Uint8ClampedArray;\n\tprivate readonly _buffers: [ImageData, ImageData];\n\tprivate _lastUsedBuffer: number;\n\n\tconstructor(ctx: CanvasRenderingContext2D, WIDTH: number, HEIGHT: number, background: RGBA8) {\n\t\tthis._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n\t\tthis._buffers = [\n\t\t\tctx.createImageData(WIDTH, HEIGHT),\n\t\t\tctx.createImageData(WIDTH, HEIGHT)\n\t\t];\n\t\tthis._lastUsedBuffer = 0;\n\t}\n\n\tpublic getBuffer(): ImageData {\n\t\t// rotate buffers\n\t\tthis._lastUsedBuffer = 1 - this._lastUsedBuffer;\n\t\tconst result = this._buffers[this._lastUsedBuffer];\n\n\t\t// fill with background color\n\t\tresult.data.set(this._backgroundFillData);\n\n\t\treturn result;\n\t}\n\n\tprivate static _createBackgroundFillData(WIDTH: number, HEIGHT: number, background: RGBA8): Uint8ClampedArray {\n\t\tconst backgroundR = background.r;\n\t\tconst backgroundG = background.g;\n\t\tconst backgroundB = background.b;\n\n\t\tconst result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < HEIGHT; i++) {\n\t\t\tfor (let j = 0; j < WIDTH; j++) {\n\t\t\t\tresult[offset] = backgroundR;\n\t\t\t\tresult[offset + 1] = backgroundG;\n\t\t\t\tresult[offset + 2] = backgroundB;\n\t\t\t\tresult[offset + 3] = 255;\n\t\t\t\toffset += 4;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport class Minimap extends ViewPart {\n\n\tprivate readonly _domNode: FastDomNode<HTMLElement>;\n\tprivate readonly _shadow: FastDomNode<HTMLElement>;\n\tprivate readonly _canvas: FastDomNode<HTMLCanvasElement>;\n\tprivate readonly _slider: FastDomNode<HTMLElement>;\n\tprivate readonly _sliderHorizontal: FastDomNode<HTMLElement>;\n\tprivate readonly _tokensColorTracker: MinimapTokensColorTracker;\n\tprivate readonly _mouseDownListener: IDisposable;\n\tprivate readonly _sliderMouseMoveMonitor: GlobalMouseMoveMonitor<IStandardMouseMoveEventData>;\n\tprivate readonly _sliderMouseDownListener: IDisposable;\n\n\tprivate _options: MinimapOptions;\n\tprivate _lastRenderData: RenderData | null;\n\tprivate _buffers: MinimapBuffers | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._options = new MinimapOptions(this._context.configuration);\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\n\t\tthis._domNode = createFastDomNode(document.createElement('div'));\n\t\tPartFingerprints.write(this._domNode, PartFingerprint.Minimap);\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t\tthis._domNode.setPosition('absolute');\n\t\tthis._domNode.setAttribute('role', 'presentation');\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._shadow = createFastDomNode(document.createElement('div'));\n\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\tthis._domNode.appendChild(this._shadow);\n\n\t\tthis._canvas = createFastDomNode(document.createElement('canvas'));\n\t\tthis._canvas.setPosition('absolute');\n\t\tthis._canvas.setLeft(0);\n\t\tthis._domNode.appendChild(this._canvas);\n\n\t\tthis._slider = createFastDomNode(document.createElement('div'));\n\t\tthis._slider.setPosition('absolute');\n\t\tthis._slider.setClassName('minimap-slider');\n\t\tthis._slider.setLayerHinting(true);\n\t\tthis._domNode.appendChild(this._slider);\n\n\t\tthis._sliderHorizontal = createFastDomNode(document.createElement('div'));\n\t\tthis._sliderHorizontal.setPosition('absolute');\n\t\tthis._sliderHorizontal.setClassName('minimap-slider-horizontal');\n\t\tthis._slider.appendChild(this._sliderHorizontal);\n\n\t\tthis._tokensColorTracker = MinimapTokensColorTracker.getInstance();\n\n\t\tthis._applyLayout();\n\n\t\tthis._mouseDownListener = dom.addStandardDisposableListener(this._canvas.domNode, 'mousedown', (e) => {\n\t\t\te.preventDefault();\n\n\t\t\tconst renderMinimap = this._options.renderMinimap;\n\t\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._lastRenderData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst minimapLineHeight = getMinimapLineHeight(renderMinimap);\n\t\t\tconst internalOffsetY = this._options.pixelRatio * e.browserEvent.offsetY;\n\t\t\tconst lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n\n\t\t\tlet lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber;\n\t\t\tlineNumber = Math.min(lineNumber, this._context.model.getLineCount());\n\n\t\t\tthis._context.privateViewEventBus.emit(new viewEvents.ViewRevealRangeRequestEvent(\n\t\t\t\tnew Range(lineNumber, 1, lineNumber, 1),\n\t\t\t\tviewEvents.VerticalRevealType.Center,\n\t\t\t\tfalse,\n\t\t\t\tScrollType.Smooth\n\t\t\t));\n\t\t});\n\n\t\tthis._sliderMouseMoveMonitor = new GlobalMouseMoveMonitor<IStandardMouseMoveEventData>();\n\n\t\tthis._sliderMouseDownListener = dom.addStandardDisposableListener(this._slider.domNode, 'mousedown', (e) => {\n\t\t\te.preventDefault();\n\t\t\tif (e.leftButton && this._lastRenderData) {\n\n\t\t\t\tconst initialMousePosition = e.posy;\n\t\t\t\tconst initialMouseOrthogonalPosition = e.posx;\n\t\t\t\tconst initialSliderState = this._lastRenderData.renderedLayout;\n\t\t\t\tthis._slider.toggleClassName('active', true);\n\n\t\t\t\tthis._sliderMouseMoveMonitor.startMonitoring(\n\t\t\t\t\tstandardMouseMoveMerger,\n\t\t\t\t\t(mouseMoveData: IStandardMouseMoveEventData) => {\n\t\t\t\t\t\tconst mouseOrthogonalDelta = Math.abs(mouseMoveData.posx - initialMouseOrthogonalPosition);\n\n\t\t\t\t\t\tif (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n\t\t\t\t\t\t\t// The mouse has wondered away from the scrollbar => reset dragging\n\t\t\t\t\t\t\tthis._context.viewLayout.setScrollPositionNow({\n\t\t\t\t\t\t\t\tscrollTop: initialSliderState.scrollTop\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst mouseDelta = mouseMoveData.posy - initialMousePosition;\n\t\t\t\t\t\tthis._context.viewLayout.setScrollPositionNow({\n\t\t\t\t\t\t\tscrollTop: initialSliderState.getDesiredScrollTopFromDelta(mouseDelta)\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthis._slider.toggleClassName('active', false);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._mouseDownListener.dispose();\n\t\tthis._sliderMouseMoveMonitor.dispose();\n\t\tthis._sliderMouseDownListener.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tprivate _getMinimapDomNodeClassName(): string {\n\t\tif (this._options.showSlider === 'always') {\n\t\t\treturn 'minimap slider-always';\n\t\t}\n\t\treturn 'minimap slider-mouseover';\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._domNode;\n\t}\n\n\tprivate _applyLayout(): void {\n\t\tthis._domNode.setLeft(this._options.minimapLeft);\n\t\tthis._domNode.setWidth(this._options.minimapWidth);\n\t\tthis._domNode.setHeight(this._options.minimapHeight);\n\t\tthis._shadow.setHeight(this._options.minimapHeight);\n\t\tthis._canvas.setWidth(this._options.canvasOuterWidth);\n\t\tthis._canvas.setHeight(this._options.canvasOuterHeight);\n\t\tthis._canvas.domNode.width = this._options.canvasInnerWidth;\n\t\tthis._canvas.domNode.height = this._options.canvasInnerHeight;\n\t\tthis._slider.setWidth(this._options.minimapWidth);\n\t}\n\n\tprivate _getBuffer(): ImageData {\n\t\tif (!this._buffers) {\n\t\t\tthis._buffers = new MinimapBuffers(\n\t\t\t\tthis._canvas.domNode.getContext('2d')!,\n\t\t\t\tthis._options.canvasInnerWidth,\n\t\t\t\tthis._options.canvasInnerHeight,\n\t\t\t\tthis._tokensColorTracker.getColor(ColorId.DefaultBackground)\n\t\t\t);\n\t\t}\n\t\treturn this._buffers!.getBuffer();\n\t}\n\n\tprivate _onOptionsMaybeChanged(): boolean {\n\t\tconst opts = new MinimapOptions(this._context.configuration);\n\t\tif (this._options.equals(opts)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._options = opts;\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\tthis._applyLayout();\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t\treturn true;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn this._onOptionsMaybeChanged();\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onLinesChanged(e);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\tthis._lastRenderData.onLinesDeleted(e);\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\tthis._lastRenderData.onLinesInserted(e);\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onTokensChanged(e);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onTokensColorsChanged(e: viewEvents.ViewTokensColorsChangedEvent): boolean {\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\treturn true;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\t// Nothing to read\n\t}\n\n\tpublic render(renderingCtx: RestrictedRenderingContext): void {\n\t\tconst renderMinimap = this._options.renderMinimap;\n\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\t\tthis._sliderHorizontal.setWidth(0);\n\t\t\tthis._sliderHorizontal.setHeight(0);\n\t\t\treturn;\n\t\t}\n\t\tif (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n\t\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\t} else {\n\t\t\tthis._shadow.setClassName('minimap-shadow-visible');\n\t\t}\n\n\t\tconst layout = MinimapLayout.create(\n\t\t\tthis._options,\n\t\t\trenderingCtx.visibleRange.startLineNumber,\n\t\t\trenderingCtx.visibleRange.endLineNumber,\n\t\t\trenderingCtx.viewportHeight,\n\t\t\t(renderingCtx.viewportData.whitespaceViewportData.length > 0),\n\t\t\tthis._context.model.getLineCount(),\n\t\t\trenderingCtx.scrollTop,\n\t\t\trenderingCtx.scrollHeight,\n\t\t\tthis._lastRenderData ? this._lastRenderData.renderedLayout : null\n\t\t);\n\t\tthis._slider.setTop(layout.sliderTop);\n\t\tthis._slider.setHeight(layout.sliderHeight);\n\n\t\t// Compute horizontal slider coordinates\n\t\tconst scrollLeftChars = renderingCtx.scrollLeft / this._options.typicalHalfwidthCharacterWidth;\n\t\tconst horizontalSliderLeft = Math.min(this._options.minimapWidth, Math.round(scrollLeftChars * getMinimapCharWidth(this._options.renderMinimap) / this._options.pixelRatio));\n\t\tthis._sliderHorizontal.setLeft(horizontalSliderLeft);\n\t\tthis._sliderHorizontal.setWidth(this._options.minimapWidth - horizontalSliderLeft);\n\t\tthis._sliderHorizontal.setTop(0);\n\t\tthis._sliderHorizontal.setHeight(layout.sliderHeight);\n\n\t\tthis._lastRenderData = this.renderLines(layout);\n\t}\n\n\tprivate renderLines(layout: MinimapLayout): RenderData {\n\t\tconst renderMinimap = this._options.renderMinimap;\n\t\tconst startLineNumber = layout.startLineNumber;\n\t\tconst endLineNumber = layout.endLineNumber;\n\t\tconst minimapLineHeight = getMinimapLineHeight(renderMinimap);\n\n\t\t// Check if nothing changed w.r.t. lines from last frame\n\t\tif (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n\t\t\tconst _lastData = this._lastRenderData._get();\n\t\t\t// Nice!! Nothing changed from last frame\n\t\t\treturn new RenderData(layout, _lastData.imageData, _lastData.lines);\n\t\t}\n\n\t\t// Oh well!! We need to repaint some lines...\n\n\t\tconst imageData = this._getBuffer();\n\n\t\t// Render untouched lines by using last rendered data.\n\t\tlet [_dirtyY1, _dirtyY2, needed] = Minimap._renderUntouchedLines(\n\t\t\timageData,\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tminimapLineHeight,\n\t\t\tthis._lastRenderData\n\t\t);\n\n\t\t// Fetch rendering info from view model for rest of lines that need rendering.\n\t\tconst lineInfo = this._context.model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n\t\tconst tabSize = lineInfo.tabSize;\n\t\tconst background = this._tokensColorTracker.getColor(ColorId.DefaultBackground);\n\t\tconst useLighterFont = this._tokensColorTracker.backgroundIsLight();\n\n\t\t// Render the rest of lines\n\t\tlet dy = 0;\n\t\tconst renderedLines: MinimapLine[] = [];\n\t\tfor (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n\t\t\tif (needed[lineIndex]) {\n\t\t\t\tMinimap._renderLine(\n\t\t\t\t\timageData,\n\t\t\t\t\tbackground,\n\t\t\t\t\tuseLighterFont,\n\t\t\t\t\trenderMinimap,\n\t\t\t\t\tthis._tokensColorTracker,\n\t\t\t\t\tgetOrCreateMinimapCharRenderer(),\n\t\t\t\t\tdy,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tlineInfo.data[lineIndex]!\n\t\t\t\t);\n\t\t\t}\n\t\t\trenderedLines[lineIndex] = new MinimapLine(dy);\n\t\t\tdy += minimapLineHeight;\n\t\t}\n\n\t\tconst dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n\t\tconst dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n\t\tconst dirtyHeight = dirtyY2 - dirtyY1;\n\n\t\t// Finally, paint to the canvas\n\t\tconst ctx = this._canvas.domNode.getContext('2d')!;\n\t\tctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n\n\t\t// Save rendered data for reuse on next frame if possible\n\t\treturn new RenderData(\n\t\t\tlayout,\n\t\t\timageData,\n\t\t\trenderedLines\n\t\t);\n\t}\n\n\tprivate static _renderUntouchedLines(\n\t\ttarget: ImageData,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tminimapLineHeight: number,\n\t\tlastRenderData: RenderData | null,\n\t): [number, number, boolean[]] {\n\n\t\tconst needed: boolean[] = [];\n\t\tif (!lastRenderData) {\n\t\t\tfor (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n\t\t\t\tneeded[i] = true;\n\t\t\t}\n\t\t\treturn [-1, -1, needed];\n\t\t}\n\n\t\tconst _lastData = lastRenderData._get();\n\t\tconst lastTargetData = _lastData.imageData.data;\n\t\tconst lastStartLineNumber = _lastData.rendLineNumberStart;\n\t\tconst lastLines = _lastData.lines;\n\t\tconst lastLinesLength = lastLines.length;\n\t\tconst WIDTH = target.width;\n\t\tconst targetData = target.data;\n\n\t\tconst maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n\t\tlet dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n\t\tlet dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n\n\t\tlet copySourceStart = -1;\n\t\tlet copySourceEnd = -1;\n\t\tlet copyDestStart = -1;\n\t\tlet copyDestEnd = -1;\n\n\t\tlet dest_dy = 0;\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\t\tconst lastLineIndex = lineNumber - lastStartLineNumber;\n\t\t\tconst source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n\n\t\t\tif (source_dy === -1) {\n\t\t\t\tneeded[lineIndex] = true;\n\t\t\t\tdest_dy += minimapLineHeight;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst sourceStart = source_dy * WIDTH * 4;\n\t\t\tconst sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n\t\t\tconst destStart = dest_dy * WIDTH * 4;\n\t\t\tconst destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n\n\t\t\tif (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n\t\t\t\t// contiguous zone => extend copy request\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t} else {\n\t\t\t\tif (copySourceStart !== -1) {\n\t\t\t\t\t// flush existing copy request\n\t\t\t\t\ttargetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n\t\t\t\t\tif (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n\t\t\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t\t\t}\n\t\t\t\t\tif (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n\t\t\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcopySourceStart = sourceStart;\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestStart = destStart;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t}\n\n\t\t\tneeded[lineIndex] = false;\n\t\t\tdest_dy += minimapLineHeight;\n\t\t}\n\n\t\tif (copySourceStart !== -1) {\n\t\t\t// flush existing copy request\n\t\t\ttargetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n\t\t\tif (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t}\n\t\t\tif (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t}\n\t\t}\n\n\t\tconst dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n\t\tconst dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n\n\t\treturn [dirtyY1, dirtyY2, needed];\n\t}\n\n\tprivate static _renderLine(\n\t\ttarget: ImageData,\n\t\tbackgroundColor: RGBA8,\n\t\tuseLighterFont: boolean,\n\t\trenderMinimap: RenderMinimap,\n\t\tcolorTracker: MinimapTokensColorTracker,\n\t\tminimapCharRenderer: MinimapCharRenderer,\n\t\tdy: number,\n\t\ttabSize: number,\n\t\tlineData: ViewLineData\n\t): void {\n\t\tconst content = lineData.content;\n\t\tconst tokens = lineData.tokens;\n\t\tconst charWidth = getMinimapCharWidth(renderMinimap);\n\t\tconst maxDx = target.width - charWidth;\n\n\t\tlet dx = 0;\n\t\tlet charIndex = 0;\n\t\tlet tabsCharDelta = 0;\n\n\t\tfor (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n\t\t\tconst tokenEndIndex = tokens.getEndOffset(tokenIndex);\n\t\t\tconst tokenColorId = tokens.getForeground(tokenIndex);\n\t\t\tconst tokenColor = colorTracker.getColor(tokenColorId);\n\n\t\t\tfor (; charIndex < tokenEndIndex; charIndex++) {\n\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst charCode = content.charCodeAt(charIndex);\n\n\t\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\t\tconst insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n\t\t\t\t\ttabsCharDelta += insertSpacesCount - 1;\n\t\t\t\t\t// No need to render anything since tab is invisible\n\t\t\t\t\tdx += insertSpacesCount * charWidth;\n\t\t\t\t} else if (charCode === CharCode.Space) {\n\t\t\t\t\t// No need to render anything since space is invisible\n\t\t\t\t\tdx += charWidth;\n\t\t\t\t} else {\n\t\t\t\t\t// Render twice for a full width character\n\t\t\t\t\tconst count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tif (renderMinimap === RenderMinimap.Large) {\n\t\t\t\t\t\t\tminimapCharRenderer.x2RenderChar(target, dx, dy, charCode, tokenColor, backgroundColor, useLighterFont);\n\t\t\t\t\t\t} else if (renderMinimap === RenderMinimap.Small) {\n\t\t\t\t\t\t\tminimapCharRenderer.x1RenderChar(target, dx, dy, charCode, tokenColor, backgroundColor, useLighterFont);\n\t\t\t\t\t\t} else if (renderMinimap === RenderMinimap.LargeBlocks) {\n\t\t\t\t\t\t\tminimapCharRenderer.x2BlockRenderChar(target, dx, dy, tokenColor, backgroundColor, useLighterFont);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// RenderMinimap.SmallBlocks\n\t\t\t\t\t\t\tminimapCharRenderer.x1BlockRenderChar(target, dx, dy, tokenColor, backgroundColor, useLighterFont);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx += charWidth;\n\n\t\t\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst sliderBackground = theme.getColor(scrollbarSliderBackground);\n\tif (sliderBackground) {\n\t\tconst halfSliderBackground = sliderBackground.transparent(0.5);\n\t\tcollector.addRule(`.monaco-editor .minimap-slider, .monaco-editor .minimap-slider .minimap-slider-horizontal { background: ${halfSliderBackground}; }`);\n\t}\n\tconst sliderHoverBackground = theme.getColor(scrollbarSliderHoverBackground);\n\tif (sliderHoverBackground) {\n\t\tconst halfSliderHoverBackground = sliderHoverBackground.transparent(0.5);\n\t\tcollector.addRule(`.monaco-editor .minimap-slider:hover, .monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: ${halfSliderHoverBackground}; }`);\n\t}\n\tconst sliderActiveBackground = theme.getColor(scrollbarSliderActiveBackground);\n\tif (sliderActiveBackground) {\n\t\tconst halfSliderActiveBackground = sliderActiveBackground.transparent(0.5);\n\t\tcollector.addRule(`.monaco-editor .minimap-slider.active, .monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: ${halfSliderActiveBackground}; }`);\n\t}\n\tconst shadow = theme.getColor(scrollbarShadow);\n\tif (shadow) {\n\t\tcollector.addRule(`.monaco-editor .minimap-shadow-visible { box-shadow: ${shadow} -6px 0 6px -6px inset; }`);\n\t}\n});\n"]}]}