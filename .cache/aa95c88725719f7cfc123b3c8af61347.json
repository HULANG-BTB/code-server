{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionEnablementService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionEnablementService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/platform/workspace/common/workspace\", \"vs/platform/storage/common/storage\", \"vs/platform/environment/common/environment\", \"vs/base/common/types\", \"vs/platform/extensions/common/extensions\"], function (require, exports, nls_1, event_1, lifecycle_1, extensionManagement_1, extensionManagementUtil_1, workspace_1, storage_1, environment_1, types_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const DISABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/disabled';\n    const ENABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/enabled';\n    let ExtensionEnablementService = class ExtensionEnablementService extends lifecycle_1.Disposable {\n        constructor(storageService, contextService, environmentService, extensionManagementService) {\n            super();\n            this.contextService = contextService;\n            this.environmentService = environmentService;\n            this.extensionManagementService = extensionManagementService;\n            this._onEnablementChanged = new event_1.Emitter();\n            this.onEnablementChanged = this._onEnablementChanged.event;\n            this.storageManger = this._register(new StorageManager(storageService));\n            this._register(this.storageManger.onDidChange(extensions => this.onDidChangeStorage(extensions)));\n            this._register(extensionManagementService.onDidInstallExtension(this._onDidInstallExtension, this));\n            this._register(extensionManagementService.onDidUninstallExtension(this._onDidUninstallExtension, this));\n        }\n        get hasWorkspace() {\n            return this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY;\n        }\n        get allUserExtensionsDisabled() {\n            return this.environmentService.disableExtensions === true;\n        }\n        getDisabledExtensions() {\n            return __awaiter(this, void 0, void 0, function* () {\n                let result = this._getDisabledExtensions(storage_1.StorageScope.GLOBAL);\n                if (this.hasWorkspace) {\n                    for (const e of this._getDisabledExtensions(storage_1.StorageScope.WORKSPACE)) {\n                        if (!result.some(r => extensionManagementUtil_1.areSameExtensions(r, e))) {\n                            result.push(e);\n                        }\n                    }\n                    const workspaceEnabledExtensions = this._getEnabledExtensions(storage_1.StorageScope.WORKSPACE);\n                    if (workspaceEnabledExtensions.length) {\n                        result = result.filter(r => !workspaceEnabledExtensions.some(e => extensionManagementUtil_1.areSameExtensions(e, r)));\n                    }\n                }\n                if (this.environmentService.disableExtensions) {\n                    const allInstalledExtensions = yield this.extensionManagementService.getInstalled();\n                    for (const installedExtension of allInstalledExtensions) {\n                        if (this._isExtensionDisabledInEnvironment(installedExtension)) {\n                            if (!result.some(r => extensionManagementUtil_1.areSameExtensions(r, installedExtension.identifier))) {\n                                result.push(installedExtension.identifier);\n                            }\n                        }\n                    }\n                }\n                return result;\n            });\n        }\n        getEnablementState(extension) {\n            if (this._isExtensionDisabledInEnvironment(extension)) {\n                return extensionManagement_1.EnablementState.Disabled;\n            }\n            const identifier = extension.identifier;\n            if (this.hasWorkspace) {\n                if (this._getEnabledExtensions(storage_1.StorageScope.WORKSPACE).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                    return extensionManagement_1.EnablementState.WorkspaceEnabled;\n                }\n                if (this._getDisabledExtensions(storage_1.StorageScope.WORKSPACE).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                    return extensionManagement_1.EnablementState.WorkspaceDisabled;\n                }\n            }\n            if (this._getDisabledExtensions(storage_1.StorageScope.GLOBAL).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                return extensionManagement_1.EnablementState.Disabled;\n            }\n            return extensionManagement_1.EnablementState.Enabled;\n        }\n        canChangeEnablement(extension) {\n            if (extension.manifest && extension.manifest.contributes && extension.manifest.contributes.localizations && extension.manifest.contributes.localizations.length) {\n                return false;\n            }\n            if (extension.type === extensions_1.ExtensionType.User && this.environmentService.disableExtensions) {\n                return false;\n            }\n            return true;\n        }\n        setEnablement(extensions, newState) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const workspace = newState === extensionManagement_1.EnablementState.WorkspaceDisabled || newState === extensionManagement_1.EnablementState.WorkspaceEnabled;\n                if (workspace && !this.hasWorkspace) {\n                    return Promise.reject(new Error(nls_1.localize('noWorkspace', \"No workspace.\")));\n                }\n                const result = yield Promise.all(extensions.map(e => this._setEnablement(e, newState)));\n                const changedExtensions = extensions.filter((e, index) => result[index]);\n                if (changedExtensions.length) {\n                    this._onEnablementChanged.fire(changedExtensions);\n                }\n                return result;\n            });\n        }\n        _setEnablement(extension, newState) {\n            const currentState = this._getEnablementState(extension.identifier);\n            if (currentState === newState) {\n                return Promise.resolve(false);\n            }\n            switch (newState) {\n                case extensionManagement_1.EnablementState.Enabled:\n                    this._enableExtension(extension.identifier);\n                    break;\n                case extensionManagement_1.EnablementState.Disabled:\n                    this._disableExtension(extension.identifier);\n                    break;\n                case extensionManagement_1.EnablementState.WorkspaceEnabled:\n                    this._enableExtensionInWorkspace(extension.identifier);\n                    break;\n                case extensionManagement_1.EnablementState.WorkspaceDisabled:\n                    this._disableExtensionInWorkspace(extension.identifier);\n                    break;\n            }\n            return Promise.resolve(true);\n        }\n        isEnabled(extension) {\n            const enablementState = this.getEnablementState(extension);\n            return enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled || enablementState === extensionManagement_1.EnablementState.Enabled;\n        }\n        _isExtensionDisabledInEnvironment(extension) {\n            if (this.allUserExtensionsDisabled) {\n                return extension.type === extensions_1.ExtensionType.User;\n            }\n            const disabledExtensions = this.environmentService.disableExtensions;\n            if (Array.isArray(disabledExtensions)) {\n                return disabledExtensions.some(id => extensionManagementUtil_1.areSameExtensions({ id }, extension.identifier));\n            }\n            return false;\n        }\n        _getEnablementState(identifier) {\n            if (this.hasWorkspace) {\n                if (this._getEnabledExtensions(storage_1.StorageScope.WORKSPACE).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                    return extensionManagement_1.EnablementState.WorkspaceEnabled;\n                }\n                if (this._getDisabledExtensions(storage_1.StorageScope.WORKSPACE).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                    return extensionManagement_1.EnablementState.WorkspaceDisabled;\n                }\n            }\n            if (this._getDisabledExtensions(storage_1.StorageScope.GLOBAL).filter(e => extensionManagementUtil_1.areSameExtensions(e, identifier))[0]) {\n                return extensionManagement_1.EnablementState.Disabled;\n            }\n            return extensionManagement_1.EnablementState.Enabled;\n        }\n        _enableExtension(identifier) {\n            this._removeFromDisabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._removeFromEnabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._removeFromDisabledExtensions(identifier, storage_1.StorageScope.GLOBAL);\n        }\n        _disableExtension(identifier) {\n            this._removeFromDisabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._removeFromEnabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._addToDisabledExtensions(identifier, storage_1.StorageScope.GLOBAL);\n        }\n        _enableExtensionInWorkspace(identifier) {\n            this._removeFromDisabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._addToEnabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n        }\n        _disableExtensionInWorkspace(identifier) {\n            this._addToDisabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n            this._removeFromEnabledExtensions(identifier, storage_1.StorageScope.WORKSPACE);\n        }\n        _addToDisabledExtensions(identifier, scope) {\n            if (scope === storage_1.StorageScope.WORKSPACE && !this.hasWorkspace) {\n                return Promise.resolve(false);\n            }\n            let disabledExtensions = this._getDisabledExtensions(scope);\n            if (disabledExtensions.every(e => !extensionManagementUtil_1.areSameExtensions(e, identifier))) {\n                disabledExtensions.push(identifier);\n                this._setDisabledExtensions(disabledExtensions, scope);\n                return Promise.resolve(true);\n            }\n            return Promise.resolve(false);\n        }\n        _removeFromDisabledExtensions(identifier, scope) {\n            if (scope === storage_1.StorageScope.WORKSPACE && !this.hasWorkspace) {\n                return false;\n            }\n            let disabledExtensions = this._getDisabledExtensions(scope);\n            for (let index = 0; index < disabledExtensions.length; index++) {\n                const disabledExtension = disabledExtensions[index];\n                if (extensionManagementUtil_1.areSameExtensions(disabledExtension, identifier)) {\n                    disabledExtensions.splice(index, 1);\n                    this._setDisabledExtensions(disabledExtensions, scope);\n                    return true;\n                }\n            }\n            return false;\n        }\n        _addToEnabledExtensions(identifier, scope) {\n            if (scope === storage_1.StorageScope.WORKSPACE && !this.hasWorkspace) {\n                return false;\n            }\n            let enabledExtensions = this._getEnabledExtensions(scope);\n            if (enabledExtensions.every(e => !extensionManagementUtil_1.areSameExtensions(e, identifier))) {\n                enabledExtensions.push(identifier);\n                this._setEnabledExtensions(enabledExtensions, scope);\n                return true;\n            }\n            return false;\n        }\n        _removeFromEnabledExtensions(identifier, scope) {\n            if (scope === storage_1.StorageScope.WORKSPACE && !this.hasWorkspace) {\n                return false;\n            }\n            let enabledExtensions = this._getEnabledExtensions(scope);\n            for (let index = 0; index < enabledExtensions.length; index++) {\n                const disabledExtension = enabledExtensions[index];\n                if (extensionManagementUtil_1.areSameExtensions(disabledExtension, identifier)) {\n                    enabledExtensions.splice(index, 1);\n                    this._setEnabledExtensions(enabledExtensions, scope);\n                    return true;\n                }\n            }\n            return false;\n        }\n        _getEnabledExtensions(scope) {\n            return this._getExtensions(ENABLED_EXTENSIONS_STORAGE_PATH, scope);\n        }\n        _setEnabledExtensions(enabledExtensions, scope) {\n            this._setExtensions(ENABLED_EXTENSIONS_STORAGE_PATH, enabledExtensions, scope);\n        }\n        _getDisabledExtensions(scope) {\n            return this._getExtensions(DISABLED_EXTENSIONS_STORAGE_PATH, scope);\n        }\n        _setDisabledExtensions(disabledExtensions, scope) {\n            this._setExtensions(DISABLED_EXTENSIONS_STORAGE_PATH, disabledExtensions, scope);\n        }\n        _getExtensions(storageId, scope) {\n            if (scope === storage_1.StorageScope.WORKSPACE && !this.hasWorkspace) {\n                return [];\n            }\n            return this.storageManger.get(storageId, scope);\n        }\n        _setExtensions(storageId, extensions, scope) {\n            this.storageManger.set(storageId, extensions, scope);\n        }\n        onDidChangeStorage(extensionIdentifiers) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const installedExtensions = yield this.extensionManagementService.getInstalled();\n                const extensions = installedExtensions.filter(installedExtension => extensionIdentifiers.some(identifier => extensionManagementUtil_1.areSameExtensions(identifier, installedExtension.identifier)));\n                this._onEnablementChanged.fire(extensions);\n            });\n        }\n        _onDidInstallExtension(event) {\n            if (event.local && event.operation === extensionManagement_1.InstallOperation.Install) {\n                const wasDisabled = !this.isEnabled(event.local);\n                this._reset(event.local.identifier);\n                if (wasDisabled) {\n                    this._onEnablementChanged.fire([event.local]);\n                }\n            }\n        }\n        _onDidUninstallExtension({ identifier, error }) {\n            if (!error) {\n                this._reset(identifier);\n            }\n        }\n        _reset(extension) {\n            this._removeFromDisabledExtensions(extension, storage_1.StorageScope.WORKSPACE);\n            this._removeFromEnabledExtensions(extension, storage_1.StorageScope.WORKSPACE);\n            this._removeFromDisabledExtensions(extension, storage_1.StorageScope.GLOBAL);\n        }\n    };\n    ExtensionEnablementService = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, workspace_1.IWorkspaceContextService),\n        __param(2, environment_1.IEnvironmentService),\n        __param(3, extensionManagement_1.IExtensionManagementService)\n    ], ExtensionEnablementService);\n    exports.ExtensionEnablementService = ExtensionEnablementService;\n    class StorageManager extends lifecycle_1.Disposable {\n        constructor(storageService) {\n            super();\n            this.storageService = storageService;\n            this.storage = Object.create(null);\n            this._onDidChange = this._register(new event_1.Emitter());\n            this.onDidChange = this._onDidChange.event;\n            this._register(storageService.onDidChangeStorage(e => this.onDidStorageChange(e)));\n        }\n        get(key, scope) {\n            let value;\n            if (scope === storage_1.StorageScope.GLOBAL) {\n                if (types_1.isUndefinedOrNull(this.storage[key])) {\n                    this.storage[key] = this._get(key, scope);\n                }\n                value = this.storage[key];\n            }\n            else {\n                value = this._get(key, scope);\n            }\n            return JSON.parse(value);\n        }\n        set(key, value, scope) {\n            let newValue = JSON.stringify(value.map(({ id, uuid }) => ({ id, uuid })));\n            const oldValue = this._get(key, scope);\n            if (oldValue !== newValue) {\n                if (scope === storage_1.StorageScope.GLOBAL) {\n                    if (value.length) {\n                        this.storage[key] = newValue;\n                    }\n                    else {\n                        delete this.storage[key];\n                    }\n                }\n                this._set(key, value.length ? newValue : undefined, scope);\n            }\n        }\n        onDidStorageChange(workspaceStorageChangeEvent) {\n            if (workspaceStorageChangeEvent.scope === storage_1.StorageScope.GLOBAL) {\n                if (!types_1.isUndefinedOrNull(this.storage[workspaceStorageChangeEvent.key])) {\n                    const newValue = this._get(workspaceStorageChangeEvent.key, workspaceStorageChangeEvent.scope);\n                    if (newValue !== this.storage[workspaceStorageChangeEvent.key]) {\n                        const oldValues = this.get(workspaceStorageChangeEvent.key, workspaceStorageChangeEvent.scope);\n                        delete this.storage[workspaceStorageChangeEvent.key];\n                        const newValues = this.get(workspaceStorageChangeEvent.key, workspaceStorageChangeEvent.scope);\n                        const added = oldValues.filter(oldValue => !newValues.some(newValue => extensionManagementUtil_1.areSameExtensions(oldValue, newValue)));\n                        const removed = newValues.filter(newValue => !oldValues.some(oldValue => extensionManagementUtil_1.areSameExtensions(oldValue, newValue)));\n                        if (added.length || removed.length) {\n                            this._onDidChange.fire([...added, ...removed]);\n                        }\n                    }\n                }\n            }\n        }\n        _get(key, scope) {\n            return this.storageService.get(key, scope, '[]');\n        }\n        _set(key, value, scope) {\n            if (value) {\n                this.storageService.store(key, value, scope);\n            }\n            else {\n                this.storageService.remove(key, scope);\n            }\n        }\n    }\n});\n",null]}