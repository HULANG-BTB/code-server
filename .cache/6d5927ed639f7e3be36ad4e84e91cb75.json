{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/markers/common/markers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/markers/common/markers.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/nls\", \"vs/base/common/severity\"], function (require, exports, instantiation_1, nls_1, severity_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var MarkerTag;\n    (function (MarkerTag) {\n        MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\n    })(MarkerTag = exports.MarkerTag || (exports.MarkerTag = {}));\n    var MarkerSeverity;\n    (function (MarkerSeverity) {\n        MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n        MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n        MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n        MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n    })(MarkerSeverity = exports.MarkerSeverity || (exports.MarkerSeverity = {}));\n    (function (MarkerSeverity) {\n        function compare(a, b) {\n            return b - a;\n        }\n        MarkerSeverity.compare = compare;\n        const _displayStrings = Object.create(null);\n        _displayStrings[MarkerSeverity.Error] = nls_1.localize('sev.error', \"Error\");\n        _displayStrings[MarkerSeverity.Warning] = nls_1.localize('sev.warning', \"Warning\");\n        _displayStrings[MarkerSeverity.Info] = nls_1.localize('sev.info', \"Info\");\n        function toString(a) {\n            return _displayStrings[a] || '';\n        }\n        MarkerSeverity.toString = toString;\n        function fromSeverity(severity) {\n            switch (severity) {\n                case severity_1.default.Error: return MarkerSeverity.Error;\n                case severity_1.default.Warning: return MarkerSeverity.Warning;\n                case severity_1.default.Info: return MarkerSeverity.Info;\n                case severity_1.default.Ignore: return MarkerSeverity.Hint;\n            }\n        }\n        MarkerSeverity.fromSeverity = fromSeverity;\n    })(MarkerSeverity = exports.MarkerSeverity || (exports.MarkerSeverity = {}));\n    var IMarkerData;\n    (function (IMarkerData) {\n        const emptyString = '';\n        function makeKey(markerData) {\n            let result = [emptyString];\n            if (markerData.source) {\n                result.push(markerData.source.replace('¦', '\\¦'));\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.code) {\n                result.push(markerData.code.replace('¦', '\\¦'));\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.severity !== undefined && markerData.severity !== null) {\n                result.push(MarkerSeverity.toString(markerData.severity));\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.message) {\n                result.push(markerData.message.replace('¦', '\\¦'));\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.startLineNumber !== undefined && markerData.startLineNumber !== null) {\n                result.push(markerData.startLineNumber.toString());\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.startColumn !== undefined && markerData.startColumn !== null) {\n                result.push(markerData.startColumn.toString());\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.endLineNumber !== undefined && markerData.endLineNumber !== null) {\n                result.push(markerData.endLineNumber.toString());\n            }\n            else {\n                result.push(emptyString);\n            }\n            if (markerData.endColumn !== undefined && markerData.endColumn !== null) {\n                result.push(markerData.endColumn.toString());\n            }\n            else {\n                result.push(emptyString);\n            }\n            result.push(emptyString);\n            return result.join('¦');\n        }\n        IMarkerData.makeKey = makeKey;\n    })(IMarkerData = exports.IMarkerData || (exports.IMarkerData = {}));\n    exports.IMarkerService = instantiation_1.createDecorator('markerService');\n});\n",null]}