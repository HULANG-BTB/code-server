{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar network_1 = require(\"vs/base/common/network\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nfunction getIconClasses(modelService, modeService, resource, fileKind) {\n    // we always set these base classes even if we do not have a path\n    var classes = fileKind === files_1.FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === files_1.FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        var name = void 0;\n        var path = void 0;\n        if (resource.scheme === network_1.Schemas.data) {\n            var metadata = resources_1.DataUri.parseMetaData(resource);\n            name = metadata.get(resources_1.DataUri.META_DATA_LABEL);\n            path = name;\n        }\n        else {\n            name = cssEscape(resources_1.basenameOrAuthority(resource).toLowerCase());\n            path = resource.path.toLowerCase();\n        }\n        // Folders\n        if (fileKind === files_1.FileKind.FOLDER) {\n            classes.push(name + \"-name-folder-icon\");\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(name + \"-name-file-icon\");\n                var dotSegments = name.split('.');\n                for (var i = 1; i < dotSegments.length; i++) {\n                    classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\n                }\n                classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\n            }\n            // Configured Language\n            var configuredLangId = getConfiguredLangId(modelService, modeService, resource);\n            configuredLangId = configuredLangId || (path ? modeService.getModeIdByFilepathOrFirstLine(path) : null);\n            if (configuredLangId) {\n                classes.push(cssEscape(configuredLangId) + \"-lang-file-icon\");\n            }\n        }\n    }\n    return classes;\n}\nexports.getIconClasses = getIconClasses;\nfunction getConfiguredLangId(modelService, modeService, resource) {\n    var configuredLangId = null;\n    if (resource) {\n        var modeId = null;\n        // Data URI: check for encoded metadata\n        if (resource.scheme === network_1.Schemas.data) {\n            var metadata = resources_1.DataUri.parseMetaData(resource);\n            var mime = metadata.get(resources_1.DataUri.META_DATA_MIME);\n            if (mime) {\n                modeId = modeService.getModeId(mime);\n            }\n        }\n        // Any other URI: check for model if existing\n        else {\n            var model = modelService.getModel(resource);\n            if (model) {\n                modeId = model.getLanguageIdentifier().language;\n            }\n        }\n        if (modeId && modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) {\n            configuredLangId = modeId; // only take if the mode is specific (aka no just plain text)\n        }\n    }\n    return configuredLangId;\n}\nexports.getConfiguredLangId = getConfiguredLangId;\nfunction cssEscape(val) {\n    return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n}\nexports.cssEscape = cssEscape;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { DataUri, basenameOrAuthority } from 'vs/base/common/resources';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { FileKind } from 'vs/platform/files/common/files';\n\nexport function getIconClasses(modelService: IModelService, modeService: IModeService, resource: uri | undefined, fileKind?: FileKind): string[] {\n\n\t// we always set these base classes even if we do not have a path\n\tconst classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\tif (resource) {\n\n\t\t// Get the path and name of the resource. For data-URIs, we need to parse specially\n\t\tlet name: string | undefined;\n\t\tlet path: string | undefined;\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tname = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\tpath = name;\n\t\t} else {\n\t\t\tname = cssEscape(basenameOrAuthority(resource).toLowerCase());\n\t\t\tpath = resource.path.toLowerCase();\n\t\t}\n\n\t\t// Folders\n\t\tif (fileKind === FileKind.FOLDER) {\n\t\t\tclasses.push(`${name}-name-folder-icon`);\n\t\t}\n\n\t\t// Files\n\t\telse {\n\n\t\t\t// Name & Extension(s)\n\t\t\tif (name) {\n\t\t\t\tclasses.push(`${name}-name-file-icon`);\n\t\t\t\tconst dotSegments = name.split('.');\n\t\t\t\tfor (let i = 1; i < dotSegments.length; i++) {\n\t\t\t\t\tclasses.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n\t\t\t\t}\n\t\t\t\tclasses.push(`ext-file-icon`); // extra segment to increase file-ext score\n\t\t\t}\n\n\t\t\t// Configured Language\n\t\t\tlet configuredLangId: string | null = getConfiguredLangId(modelService, modeService, resource);\n\t\t\tconfiguredLangId = configuredLangId || (path ? modeService.getModeIdByFilepathOrFirstLine(path) : null);\n\t\t\tif (configuredLangId) {\n\t\t\t\tclasses.push(`${cssEscape(configuredLangId)}-lang-file-icon`);\n\t\t\t}\n\t\t}\n\t}\n\treturn classes;\n}\n\nexport function getConfiguredLangId(modelService: IModelService, modeService: IModeService, resource: uri): string | null {\n\tlet configuredLangId: string | null = null;\n\tif (resource) {\n\t\tlet modeId: string | null = null;\n\n\t\t// Data URI: check for encoded metadata\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tconst mime = metadata.get(DataUri.META_DATA_MIME);\n\n\t\t\tif (mime) {\n\t\t\t\tmodeId = modeService.getModeId(mime);\n\t\t\t}\n\t\t}\n\n\t\t// Any other URI: check for model if existing\n\t\telse {\n\t\t\tconst model = modelService.getModel(resource);\n\t\t\tif (model) {\n\t\t\t\tmodeId = model.getLanguageIdentifier().language;\n\t\t\t}\n\t\t}\n\n\t\tif (modeId && modeId !== PLAINTEXT_MODE_ID) {\n\t\t\tconfiguredLangId = modeId; // only take if the mode is specific (aka no just plain text)\n\t\t}\n\t}\n\n\treturn configuredLangId;\n}\n\nexport function cssEscape(val: string): string {\n\treturn val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n}\n"]}]}