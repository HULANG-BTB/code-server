{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/breadcrumbs.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/breadcrumbs.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar nls_1 = require(\"vs/nls\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nexports.IBreadcrumbsService = instantiation_1.createDecorator('IEditorBreadcrumbsService');\nvar BreadcrumbsService = /** @class */ (function () {\n    function BreadcrumbsService() {\n        this._map = new Map();\n    }\n    BreadcrumbsService.prototype.register = function (group, widget) {\n        var _this = this;\n        if (this._map.has(group)) {\n            throw new Error(\"group (\" + group + \") has already a widget\");\n        }\n        this._map.set(group, widget);\n        return {\n            dispose: function () { return _this._map.delete(group); }\n        };\n    };\n    BreadcrumbsService.prototype.getWidget = function (group) {\n        return this._map.get(group);\n    };\n    return BreadcrumbsService;\n}());\nexports.BreadcrumbsService = BreadcrumbsService;\nextensions_1.registerSingleton(exports.IBreadcrumbsService, BreadcrumbsService, true);\n//#region config\nvar BreadcrumbsConfig = /** @class */ (function () {\n    function BreadcrumbsConfig() {\n        // internal\n    }\n    BreadcrumbsConfig._stub = function (name) {\n        return {\n            bindTo: function (service) {\n                var onDidChange = new event_1.Emitter();\n                var listener = service.onDidChangeConfiguration(function (e) {\n                    if (e.affectsConfiguration(name)) {\n                        onDidChange.fire(undefined);\n                    }\n                });\n                return new /** @class */ (function () {\n                    function class_1() {\n                        this.name = name;\n                        this.onDidChange = onDidChange.event;\n                    }\n                    class_1.prototype.getValue = function (overrides) {\n                        if (overrides) {\n                            return service.getValue(name, overrides);\n                        }\n                        else {\n                            return service.getValue(name);\n                        }\n                    };\n                    class_1.prototype.updateValue = function (newValue, overrides) {\n                        if (overrides) {\n                            return service.updateValue(name, newValue, overrides);\n                        }\n                        else {\n                            return service.updateValue(name, newValue);\n                        }\n                    };\n                    class_1.prototype.dispose = function () {\n                        listener.dispose();\n                        onDidChange.dispose();\n                    };\n                    return class_1;\n                }());\n            }\n        };\n    };\n    BreadcrumbsConfig.IsEnabled = BreadcrumbsConfig._stub('breadcrumbs.enabled');\n    BreadcrumbsConfig.UseQuickPick = BreadcrumbsConfig._stub('breadcrumbs.useQuickPick');\n    BreadcrumbsConfig.FilePath = BreadcrumbsConfig._stub('breadcrumbs.filePath');\n    BreadcrumbsConfig.SymbolPath = BreadcrumbsConfig._stub('breadcrumbs.symbolPath');\n    BreadcrumbsConfig.SymbolSortOrder = BreadcrumbsConfig._stub('breadcrumbs.symbolSortOrder');\n    BreadcrumbsConfig.FilterOnType = BreadcrumbsConfig._stub('breadcrumbs.filterOnType');\n    BreadcrumbsConfig.FileExcludes = BreadcrumbsConfig._stub('files.exclude');\n    return BreadcrumbsConfig;\n}());\nexports.BreadcrumbsConfig = BreadcrumbsConfig;\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    id: 'breadcrumbs',\n    title: nls_1.localize('title', \"Breadcrumb Navigation\"),\n    order: 101,\n    type: 'object',\n    properties: {\n        'breadcrumbs.enabled': {\n            description: nls_1.localize('enabled', \"Enable/disable navigation breadcrumbs.\"),\n            type: 'boolean',\n            default: false\n        },\n        // 'breadcrumbs.useQuickPick': {\n        // \tdescription: localize('useQuickPick', \"Use quick pick instead of breadcrumb-pickers.\"),\n        // \ttype: 'boolean',\n        // \tdefault: false\n        // },\n        'breadcrumbs.filePath': {\n            description: nls_1.localize('filepath', \"Controls whether and how file paths are shown in the breadcrumbs view.\"),\n            type: 'string',\n            default: 'on',\n            enum: ['on', 'off', 'last'],\n            enumDescriptions: [\n                nls_1.localize('filepath.on', \"Show the file path in the breadcrumbs view.\"),\n                nls_1.localize('filepath.off', \"Do not show the file path in the breadcrumbs view.\"),\n                nls_1.localize('filepath.last', \"Only show the last element of the file path in the breadcrumbs view.\"),\n            ]\n        },\n        'breadcrumbs.symbolPath': {\n            description: nls_1.localize('symbolpath', \"Controls whether and how symbols are shown in the breadcrumbs view.\"),\n            type: 'string',\n            default: 'on',\n            enum: ['on', 'off', 'last'],\n            enumDescriptions: [\n                nls_1.localize('symbolpath.on', \"Show all symbols in the breadcrumbs view.\"),\n                nls_1.localize('symbolpath.off', \"Do not show symbols in the breadcrumbs view.\"),\n                nls_1.localize('symbolpath.last', \"Only show the current symbol in the breadcrumbs view.\"),\n            ]\n        },\n        'breadcrumbs.symbolSortOrder': {\n            description: nls_1.localize('symbolSortOrder', \"Controls how symbols are sorted in the breadcrumbs outline view.\"),\n            type: 'string',\n            default: 'position',\n            enum: ['position', 'name', 'type'],\n            enumDescriptions: [\n                nls_1.localize('symbolSortOrder.position', \"Show symbol outline in file position order.\"),\n                nls_1.localize('symbolSortOrder.name', \"Show symbol outline in alphabetical order.\"),\n                nls_1.localize('symbolSortOrder.type', \"Show symbol outline in symbol type order.\"),\n            ]\n        },\n    }\n});\n//#endregion\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/breadcrumbs.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BreadcrumbsWidget } from 'vs/base/browser/ui/breadcrumbs/breadcrumbsWidget';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as glob from 'vs/base/common/glob';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationOverrides, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { GroupIdentifier } from 'vs/workbench/common/editor';\n\nexport const IBreadcrumbsService = createDecorator<IBreadcrumbsService>('IEditorBreadcrumbsService');\n\nexport interface IBreadcrumbsService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tregister(group: GroupIdentifier, widget: BreadcrumbsWidget): IDisposable;\n\n\tgetWidget(group: GroupIdentifier): BreadcrumbsWidget | undefined;\n}\n\n\nexport class BreadcrumbsService implements IBreadcrumbsService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate readonly _map = new Map<number, BreadcrumbsWidget>();\n\n\tregister(group: number, widget: BreadcrumbsWidget): IDisposable {\n\t\tif (this._map.has(group)) {\n\t\t\tthrow new Error(`group (${group}) has already a widget`);\n\t\t}\n\t\tthis._map.set(group, widget);\n\t\treturn {\n\t\t\tdispose: () => this._map.delete(group)\n\t\t};\n\t}\n\n\tgetWidget(group: number): BreadcrumbsWidget | undefined {\n\t\treturn this._map.get(group);\n\t}\n}\n\nregisterSingleton(IBreadcrumbsService, BreadcrumbsService, true);\n\n\n//#region config\n\nexport abstract class BreadcrumbsConfig<T> {\n\n\tname: string;\n\tonDidChange: Event<void>;\n\n\tabstract getValue(overrides?: IConfigurationOverrides): T;\n\tabstract updateValue(value: T, overrides?: IConfigurationOverrides): Promise<void>;\n\tabstract dispose(): void;\n\n\tprivate constructor() {\n\t\t// internal\n\t}\n\n\tstatic IsEnabled = BreadcrumbsConfig._stub<boolean>('breadcrumbs.enabled');\n\tstatic UseQuickPick = BreadcrumbsConfig._stub<boolean>('breadcrumbs.useQuickPick');\n\tstatic FilePath = BreadcrumbsConfig._stub<'on' | 'off' | 'last'>('breadcrumbs.filePath');\n\tstatic SymbolPath = BreadcrumbsConfig._stub<'on' | 'off' | 'last'>('breadcrumbs.symbolPath');\n\tstatic SymbolSortOrder = BreadcrumbsConfig._stub<'position' | 'name' | 'type'>('breadcrumbs.symbolSortOrder');\n\tstatic FilterOnType = BreadcrumbsConfig._stub<boolean>('breadcrumbs.filterOnType');\n\n\tstatic FileExcludes = BreadcrumbsConfig._stub<glob.IExpression>('files.exclude');\n\n\tprivate static _stub<T>(name: string): { bindTo(service: IConfigurationService): BreadcrumbsConfig<T> } {\n\t\treturn {\n\t\t\tbindTo(service) {\n\t\t\t\tlet onDidChange = new Emitter<void>();\n\n\t\t\t\tlet listener = service.onDidChangeConfiguration(e => {\n\t\t\t\t\tif (e.affectsConfiguration(name)) {\n\t\t\t\t\t\tonDidChange.fire(undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn new class implements BreadcrumbsConfig<T>{\n\t\t\t\t\treadonly name = name;\n\t\t\t\t\treadonly onDidChange = onDidChange.event;\n\t\t\t\t\tgetValue(overrides?: IConfigurationOverrides): T {\n\t\t\t\t\t\tif (overrides) {\n\t\t\t\t\t\t\treturn service.getValue(name, overrides);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn service.getValue(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tupdateValue(newValue: T, overrides?: IConfigurationOverrides): Promise<void> {\n\t\t\t\t\t\tif (overrides) {\n\t\t\t\t\t\t\treturn service.updateValue(name, newValue, overrides);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn service.updateValue(name, newValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdispose(): void {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tonDidChange.dispose();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\tid: 'breadcrumbs',\n\ttitle: localize('title', \"Breadcrumb Navigation\"),\n\torder: 101,\n\ttype: 'object',\n\tproperties: {\n\t\t'breadcrumbs.enabled': {\n\t\t\tdescription: localize('enabled', \"Enable/disable navigation breadcrumbs.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false\n\t\t},\n\t\t// 'breadcrumbs.useQuickPick': {\n\t\t// \tdescription: localize('useQuickPick', \"Use quick pick instead of breadcrumb-pickers.\"),\n\t\t// \ttype: 'boolean',\n\t\t// \tdefault: false\n\t\t// },\n\t\t'breadcrumbs.filePath': {\n\t\t\tdescription: localize('filepath', \"Controls whether and how file paths are shown in the breadcrumbs view.\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: 'on',\n\t\t\tenum: ['on', 'off', 'last'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('filepath.on', \"Show the file path in the breadcrumbs view.\"),\n\t\t\t\tlocalize('filepath.off', \"Do not show the file path in the breadcrumbs view.\"),\n\t\t\t\tlocalize('filepath.last', \"Only show the last element of the file path in the breadcrumbs view.\"),\n\t\t\t]\n\t\t},\n\t\t'breadcrumbs.symbolPath': {\n\t\t\tdescription: localize('symbolpath', \"Controls whether and how symbols are shown in the breadcrumbs view.\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: 'on',\n\t\t\tenum: ['on', 'off', 'last'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('symbolpath.on', \"Show all symbols in the breadcrumbs view.\"),\n\t\t\t\tlocalize('symbolpath.off', \"Do not show symbols in the breadcrumbs view.\"),\n\t\t\t\tlocalize('symbolpath.last', \"Only show the current symbol in the breadcrumbs view.\"),\n\t\t\t]\n\t\t},\n\t\t'breadcrumbs.symbolSortOrder': {\n\t\t\tdescription: localize('symbolSortOrder', \"Controls how symbols are sorted in the breadcrumbs outline view.\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: 'position',\n\t\t\tenum: ['position', 'name', 'type'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('symbolSortOrder.position', \"Show symbol outline in file position order.\"),\n\t\t\t\tlocalize('symbolSortOrder.name', \"Show symbol outline in alphabetical order.\"),\n\t\t\t\tlocalize('symbolSortOrder.type', \"Show symbol outline in symbol type order.\"),\n\t\t\t]\n\t\t},\n\t\t// 'breadcrumbs.filterOnType': {\n\t\t// \tdescription: localize('filterOnType', \"Controls whether the breadcrumb picker filters or highlights when typing.\"),\n\t\t// \ttype: 'boolean',\n\t\t// \tdefault: false\n\t\t// },\n\t}\n});\n\n//#endregion\n"]}]}