{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPart.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPart.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/workbench/browser/parts/editor/editor.contribution\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar part_1 = require(\"vs/workbench/browser/part\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar event_1 = require(\"vs/base/common/event\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar grid_1 = require(\"vs/base/browser/ui/grid/grid\");\nvar map_1 = require(\"vs/base/common/map\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar editor_1 = require(\"vs/workbench/browser/parts/editor/editor\");\nvar editorGroupView_1 = require(\"vs/workbench/browser/parts/editor/editorGroupView\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar editorGroup_1 = require(\"vs/workbench/common/editor/editorGroup\");\nvar editorDropTarget_1 = require(\"vs/workbench/browser/parts/editor/editorDropTarget\");\nvar nls_1 = require(\"vs/nls\");\nvar color_1 = require(\"vs/base/common/color\");\nvar centeredViewLayout_1 = require(\"vs/base/browser/ui/centered/centeredViewLayout\");\nvar gridview_1 = require(\"vs/base/browser/ui/grid/gridview\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar GridWidgetView = /** @class */ (function () {\n    function GridWidgetView() {\n        this.element = dom_1.$('.grid-view-container');\n        this._onDidChange = new event_1.Relay();\n        this.onDidChange = this._onDidChange.event;\n    }\n    Object.defineProperty(GridWidgetView.prototype, \"minimumWidth\", {\n        get: function () { return this.gridWidget ? this.gridWidget.minimumWidth : 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridWidgetView.prototype, \"maximumWidth\", {\n        get: function () { return this.gridWidget ? this.gridWidget.maximumWidth : Number.POSITIVE_INFINITY; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridWidgetView.prototype, \"minimumHeight\", {\n        get: function () { return this.gridWidget ? this.gridWidget.minimumHeight : 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridWidgetView.prototype, \"maximumHeight\", {\n        get: function () { return this.gridWidget ? this.gridWidget.maximumHeight : Number.POSITIVE_INFINITY; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridWidgetView.prototype, \"gridWidget\", {\n        get: function () {\n            return this._gridWidget;\n        },\n        set: function (grid) {\n            this.element.innerHTML = '';\n            if (grid) {\n                this.element.appendChild(grid.element);\n                this._onDidChange.input = grid.onDidChange;\n            }\n            else {\n                this._onDidChange.input = event_1.Event.None;\n            }\n            this._gridWidget = grid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GridWidgetView.prototype.layout = function (width, height) {\n        if (this.gridWidget) {\n            this.gridWidget.layout(width, height);\n        }\n    };\n    GridWidgetView.prototype.dispose = function () {\n        this._onDidChange.dispose();\n    };\n    return GridWidgetView;\n}());\nvar EditorPart = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorPart, _super);\n    function EditorPart(instantiationService, themeService, configurationService, storageService, layoutService) {\n        var _this = _super.call(this, layoutService_1.Parts.EDITOR_PART, { hasTitle: false }, themeService, storageService, layoutService) || this;\n        _this.instantiationService = instantiationService;\n        _this.configurationService = configurationService;\n        //#region Events\n        _this._onDidLayout = _this._register(new event_1.Emitter());\n        _this._onDidActiveGroupChange = _this._register(new event_1.Emitter());\n        _this._onDidActivateGroup = _this._register(new event_1.Emitter());\n        _this._onDidAddGroup = _this._register(new event_1.Emitter());\n        _this._onDidRemoveGroup = _this._register(new event_1.Emitter());\n        _this._onDidMoveGroup = _this._register(new event_1.Emitter());\n        _this.onDidSetGridWidget = _this._register(new event_1.Emitter());\n        _this._onDidSizeConstraintsChange = _this._register(new event_1.Relay());\n        _this._onDidPreferredSizeChange = _this._register(new event_1.Emitter());\n        _this.groupViews = new Map();\n        _this.mostRecentActiveGroups = [];\n        //#region IEditorGroupsAccessor\n        _this.enforcedPartOptions = [];\n        _this._onDidEditorPartOptionsChange = _this._register(new event_1.Emitter());\n        //#endregion\n        //#region Part\n        _this.priority = gridview_1.LayoutPriority.High;\n        _this.gridWidgetView = new GridWidgetView();\n        _this._partOptions = editor_1.getEditorPartOptions(_this.configurationService.getValue());\n        _this.workspaceMemento = _this.getMemento(storage_1.StorageScope.WORKSPACE);\n        _this.globalMemento = _this.getMemento(storage_1.StorageScope.GLOBAL);\n        _this._whenRestored = new Promise(function (resolve) { return (_this.whenRestoredResolve = resolve); });\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(EditorPart.prototype, \"onDidLayout\", {\n        get: function () { return this._onDidLayout.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidActiveGroupChange\", {\n        get: function () { return this._onDidActiveGroupChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidActivateGroup\", {\n        get: function () { return this._onDidActivateGroup.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidAddGroup\", {\n        get: function () { return this._onDidAddGroup.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidRemoveGroup\", {\n        get: function () { return this._onDidRemoveGroup.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidMoveGroup\", {\n        get: function () { return this._onDidMoveGroup.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidSizeConstraintsChange\", {\n        get: function () { return event_1.Event.any(this.onDidSetGridWidget.event, this._onDidSizeConstraintsChange.event); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidPreferredSizeChange\", {\n        get: function () { return this._onDidPreferredSizeChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"onDidEditorPartOptionsChange\", {\n        get: function () { return this._onDidEditorPartOptionsChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPart.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(e); }));\n    };\n    EditorPart.prototype.onConfigurationUpdated = function (event) {\n        if (editor_1.impactsEditorPartOptions(event)) {\n            this.handleChangedPartOptions();\n        }\n    };\n    EditorPart.prototype.handleChangedPartOptions = function () {\n        var oldPartOptions = this._partOptions;\n        var newPartOptions = editor_1.getEditorPartOptions(this.configurationService.getValue());\n        this.enforcedPartOptions.forEach(function (enforcedPartOptions) {\n            objects_1.assign(newPartOptions, enforcedPartOptions); // check for overrides\n        });\n        this._partOptions = newPartOptions;\n        this._onDidEditorPartOptionsChange.fire({ oldPartOptions: oldPartOptions, newPartOptions: newPartOptions });\n    };\n    Object.defineProperty(EditorPart.prototype, \"partOptions\", {\n        get: function () {\n            return this._partOptions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPart.prototype.enforcePartOptions = function (options) {\n        var _this = this;\n        this.enforcedPartOptions.push(options);\n        this.handleChangedPartOptions();\n        return lifecycle_1.toDisposable(function () {\n            _this.enforcedPartOptions.splice(_this.enforcedPartOptions.indexOf(options), 1);\n            _this.handleChangedPartOptions();\n        });\n    };\n    Object.defineProperty(EditorPart.prototype, \"dimension\", {\n        get: function () { return this._dimension; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"activeGroup\", {\n        get: function () {\n            return this._activeGroup;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"groups\", {\n        get: function () {\n            return map_1.values(this.groupViews);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"count\", {\n        get: function () {\n            return this.groupViews.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"orientation\", {\n        get: function () {\n            return (this.gridWidget && this.gridWidget.orientation === grid_1.Orientation.VERTICAL) ? editorGroupsService_1.GroupOrientation.VERTICAL : editorGroupsService_1.GroupOrientation.HORIZONTAL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"whenRestored\", {\n        get: function () {\n            return this._whenRestored;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPart.prototype.getGroups = function (order) {\n        var _this = this;\n        if (order === void 0) { order = editorGroupsService_1.GroupsOrder.CREATION_TIME; }\n        switch (order) {\n            case editorGroupsService_1.GroupsOrder.CREATION_TIME:\n                return this.groups;\n            case editorGroupsService_1.GroupsOrder.MOST_RECENTLY_ACTIVE:\n                var mostRecentActive = arrays_1.coalesce(this.mostRecentActiveGroups.map(function (groupId) { return _this.getGroup(groupId); }));\n                // there can be groups that got never active, even though they exist. in this case\n                // make sure to ust append them at the end so that all groups are returned properly\n                return arrays_1.distinct(mostRecentActive.concat(this.groups));\n            case editorGroupsService_1.GroupsOrder.GRID_APPEARANCE:\n                var views = [];\n                if (this.gridWidget) {\n                    this.fillGridNodes(views, this.gridWidget.getViews());\n                }\n                return views;\n        }\n    };\n    EditorPart.prototype.fillGridNodes = function (target, node) {\n        var _this = this;\n        if (grid_1.isGridBranchNode(node)) {\n            node.children.forEach(function (child) { return _this.fillGridNodes(target, child); });\n        }\n        else {\n            target.push(node.view);\n        }\n    };\n    EditorPart.prototype.getGroup = function (identifier) {\n        return this.groupViews.get(identifier);\n    };\n    EditorPart.prototype.findGroup = function (scope, source, wrap) {\n        if (source === void 0) { source = this.activeGroup; }\n        // by direction\n        if (typeof scope.direction === 'number') {\n            return this.doFindGroupByDirection(scope.direction, source, wrap);\n        }\n        // by location\n        if (typeof scope.location === 'number') {\n            return this.doFindGroupByLocation(scope.location, source, wrap);\n        }\n        throw new Error('invalid arguments');\n    };\n    EditorPart.prototype.doFindGroupByDirection = function (direction, source, wrap) {\n        var _this = this;\n        var sourceGroupView = this.assertGroupView(source);\n        // Find neighbours and sort by our MRU list\n        var neighbours = this.gridWidget.getNeighborViews(sourceGroupView, this.toGridViewDirection(direction), wrap);\n        neighbours.sort((function (n1, n2) { return _this.mostRecentActiveGroups.indexOf(n1.id) - _this.mostRecentActiveGroups.indexOf(n2.id); }));\n        return neighbours[0];\n    };\n    EditorPart.prototype.doFindGroupByLocation = function (location, source, wrap) {\n        var sourceGroupView = this.assertGroupView(source);\n        var groups = this.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n        var index = groups.indexOf(sourceGroupView);\n        switch (location) {\n            case editorGroupsService_1.GroupLocation.FIRST:\n                return groups[0];\n            case editorGroupsService_1.GroupLocation.LAST:\n                return groups[groups.length - 1];\n            case editorGroupsService_1.GroupLocation.NEXT:\n                var nextGroup = groups[index + 1];\n                if (!nextGroup && wrap) {\n                    nextGroup = this.doFindGroupByLocation(editorGroupsService_1.GroupLocation.FIRST, source);\n                }\n                return nextGroup;\n            case editorGroupsService_1.GroupLocation.PREVIOUS:\n                var previousGroup = groups[index - 1];\n                if (!previousGroup && wrap) {\n                    previousGroup = this.doFindGroupByLocation(editorGroupsService_1.GroupLocation.LAST, source);\n                }\n                return previousGroup;\n        }\n    };\n    EditorPart.prototype.activateGroup = function (group) {\n        var groupView = this.assertGroupView(group);\n        this.doSetGroupActive(groupView);\n        this._onDidActivateGroup.fire(groupView);\n        return groupView;\n    };\n    EditorPart.prototype.getSize = function (group) {\n        var groupView = this.assertGroupView(group);\n        return this.gridWidget.getViewSize(groupView);\n    };\n    EditorPart.prototype.setSize = function (group, size) {\n        var groupView = this.assertGroupView(group);\n        this.gridWidget.resizeView(groupView, size);\n    };\n    EditorPart.prototype.arrangeGroups = function (arrangement) {\n        if (this.count < 2) {\n            return; // require at least 2 groups to show\n        }\n        if (!this.gridWidget) {\n            return; // we have not been created yet\n        }\n        // Even all group sizes\n        if (arrangement === editorGroupsService_1.GroupsArrangement.EVEN) {\n            this.gridWidget.distributeViewSizes();\n        }\n        // Maximize the current active group\n        else {\n            this.gridWidget.maximizeViewSize(this.activeGroup);\n        }\n    };\n    EditorPart.prototype.setGroupOrientation = function (orientation) {\n        if (!this.gridWidget) {\n            return; // we have not been created yet\n        }\n        var newOrientation = (orientation === editorGroupsService_1.GroupOrientation.HORIZONTAL) ? grid_1.Orientation.HORIZONTAL : grid_1.Orientation.VERTICAL;\n        if (this.gridWidget.orientation !== newOrientation) {\n            this.gridWidget.orientation = newOrientation;\n            // Mark preferred size as changed\n            this.resetPreferredSize();\n        }\n    };\n    EditorPart.prototype.applyLayout = function (layout) {\n        var _this = this;\n        var restoreFocus = this.shouldRestoreFocus(this.container);\n        // Determine how many groups we need overall\n        var layoutGroupsCount = 0;\n        function countGroups(groups) {\n            groups.forEach(function (group) {\n                if (Array.isArray(group.groups)) {\n                    countGroups(group.groups);\n                }\n                else {\n                    layoutGroupsCount++;\n                }\n            });\n        }\n        countGroups(layout.groups);\n        // If we currently have too many groups, merge them into the last one\n        var currentGroupViews = this.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n        if (layoutGroupsCount < currentGroupViews.length) {\n            var lastGroupInLayout_1 = currentGroupViews[layoutGroupsCount - 1];\n            currentGroupViews.forEach(function (group, index) {\n                if (index >= layoutGroupsCount) {\n                    _this.mergeGroup(group, lastGroupInLayout_1);\n                }\n            });\n            currentGroupViews = this.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n        }\n        var activeGroup = this.activeGroup;\n        // Prepare grid descriptor to create new grid from\n        var gridDescriptor = grid_1.createSerializedGrid({\n            orientation: this.toGridViewOrientation(layout.orientation, this.isTwoDimensionalGrid() ?\n                this.gridWidget.orientation : // preserve original orientation for 2-dimensional grids\n                gridview_1.orthogonal(this.gridWidget.orientation) // otherwise flip (fix https://github.com/Microsoft/vscode/issues/52975)\n            ),\n            groups: layout.groups\n        });\n        // Recreate gridwidget with descriptor\n        this.doCreateGridControlWithState(gridDescriptor, activeGroup.id, currentGroupViews);\n        // Layout\n        this.doLayout(this._dimension);\n        // Update container\n        this.updateContainer();\n        // Mark preferred size as changed\n        this.resetPreferredSize();\n        // Events for groups that got added\n        this.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE).forEach(function (groupView) {\n            if (currentGroupViews.indexOf(groupView) === -1) {\n                _this._onDidAddGroup.fire(groupView);\n            }\n        });\n        // Update labels\n        this.updateGroupLabels();\n        // Restore focus as needed\n        if (restoreFocus) {\n            this._activeGroup.focus();\n        }\n    };\n    EditorPart.prototype.shouldRestoreFocus = function (target) {\n        var activeElement = document.activeElement;\n        if (activeElement === document.body) {\n            return true; // always restore focus if nothing is focused currently\n        }\n        // otherwise check for the active element being an ancestor of the target\n        return dom_1.isAncestor(activeElement, target);\n    };\n    EditorPart.prototype.isTwoDimensionalGrid = function () {\n        var views = this.gridWidget.getViews();\n        if (grid_1.isGridBranchNode(views)) {\n            // the grid is 2-dimensional if any children\n            // of the grid is a branch node\n            return views.children.some(function (child) { return grid_1.isGridBranchNode(child); });\n        }\n        return false;\n    };\n    EditorPart.prototype.addGroup = function (location, direction, options) {\n        var locationView = this.assertGroupView(location);\n        var group = this.doAddGroup(locationView, direction);\n        if (options && options.activate) {\n            this.doSetGroupActive(group);\n        }\n        return group;\n    };\n    EditorPart.prototype.doAddGroup = function (locationView, direction, groupToCopy) {\n        var newGroupView = this.doCreateGroupView(groupToCopy);\n        // Add to grid widget\n        this.gridWidget.addView(newGroupView, grid_1.Sizing.Distribute, locationView, this.toGridViewDirection(direction));\n        // Update container\n        this.updateContainer();\n        // Mark preferred size as changed\n        this.resetPreferredSize();\n        // Event\n        this._onDidAddGroup.fire(newGroupView);\n        // Update labels\n        this.updateGroupLabels();\n        return newGroupView;\n    };\n    EditorPart.prototype.doCreateGroupView = function (from) {\n        var _this = this;\n        // Label: just use the number of existing groups as label\n        var label = this.getGroupLabel(this.count + 1);\n        // Create group view\n        var groupView;\n        if (from instanceof editorGroupView_1.EditorGroupView) {\n            groupView = editorGroupView_1.EditorGroupView.createCopy(from, this, label, this.instantiationService);\n        }\n        else if (editorGroup_1.isSerializedEditorGroup(from)) {\n            groupView = editorGroupView_1.EditorGroupView.createFromSerialized(from, this, label, this.instantiationService);\n        }\n        else {\n            groupView = editorGroupView_1.EditorGroupView.createNew(this, label, this.instantiationService);\n        }\n        // Keep in map\n        this.groupViews.set(groupView.id, groupView);\n        // Track focus\n        var groupDisposables = [];\n        groupDisposables.push(groupView.onDidFocus(function () {\n            _this.doSetGroupActive(groupView);\n        }));\n        // Track editor change\n        groupDisposables.push(groupView.onDidGroupChange(function (e) {\n            if (e.kind === editorGroupsService_1.GroupChangeKind.EDITOR_ACTIVE) {\n                _this.updateContainer();\n            }\n        }));\n        // Track dispose\n        event_1.Event.once(groupView.onWillDispose)(function () {\n            groupDisposables = lifecycle_1.dispose(groupDisposables);\n            _this.groupViews.delete(groupView.id);\n            _this.doUpdateMostRecentActive(groupView);\n        });\n        return groupView;\n    };\n    EditorPart.prototype.doSetGroupActive = function (group) {\n        if (this._activeGroup === group) {\n            return; // return if this is already the active group\n        }\n        var previousActiveGroup = this._activeGroup;\n        this._activeGroup = group;\n        // Update list of most recently active groups\n        this.doUpdateMostRecentActive(group, true);\n        // Mark previous one as inactive\n        if (previousActiveGroup) {\n            previousActiveGroup.setActive(false);\n        }\n        // Mark group as new active\n        group.setActive(true);\n        // Maximize the group if it is currently minimized\n        if (this.gridWidget) {\n            var viewSize = this.gridWidget.getViewSize2(group);\n            if (viewSize.width === group.minimumWidth || viewSize.height === group.minimumHeight) {\n                this.arrangeGroups(editorGroupsService_1.GroupsArrangement.MINIMIZE_OTHERS);\n            }\n        }\n        // Event\n        this._onDidActiveGroupChange.fire(group);\n    };\n    EditorPart.prototype.doUpdateMostRecentActive = function (group, makeMostRecentlyActive) {\n        var index = this.mostRecentActiveGroups.indexOf(group.id);\n        // Remove from MRU list\n        if (index !== -1) {\n            this.mostRecentActiveGroups.splice(index, 1);\n        }\n        // Add to front as needed\n        if (makeMostRecentlyActive) {\n            this.mostRecentActiveGroups.unshift(group.id);\n        }\n    };\n    EditorPart.prototype.toGridViewDirection = function (direction) {\n        switch (direction) {\n            case editorGroupsService_1.GroupDirection.UP: return grid_1.Direction.Up;\n            case editorGroupsService_1.GroupDirection.DOWN: return grid_1.Direction.Down;\n            case editorGroupsService_1.GroupDirection.LEFT: return grid_1.Direction.Left;\n            case editorGroupsService_1.GroupDirection.RIGHT: return grid_1.Direction.Right;\n        }\n    };\n    EditorPart.prototype.toGridViewOrientation = function (orientation, fallback) {\n        if (typeof orientation === 'number') {\n            return orientation === editorGroupsService_1.GroupOrientation.HORIZONTAL ? grid_1.Orientation.HORIZONTAL : grid_1.Orientation.VERTICAL;\n        }\n        return fallback;\n    };\n    EditorPart.prototype.removeGroup = function (group) {\n        var groupView = this.assertGroupView(group);\n        if (this.groupViews.size === 1) {\n            return; // Cannot remove the last root group\n        }\n        // Remove empty group\n        if (groupView.isEmpty()) {\n            return this.doRemoveEmptyGroup(groupView);\n        }\n        // Remove group with editors\n        this.doRemoveGroupWithEditors(groupView);\n    };\n    EditorPart.prototype.doRemoveGroupWithEditors = function (groupView) {\n        var mostRecentlyActiveGroups = this.getGroups(editorGroupsService_1.GroupsOrder.MOST_RECENTLY_ACTIVE);\n        var lastActiveGroup;\n        if (this._activeGroup === groupView) {\n            lastActiveGroup = mostRecentlyActiveGroups[1];\n        }\n        else {\n            lastActiveGroup = mostRecentlyActiveGroups[0];\n        }\n        // Removing a group with editors should merge these editors into the\n        // last active group and then remove this group.\n        this.mergeGroup(groupView, lastActiveGroup);\n    };\n    EditorPart.prototype.doRemoveEmptyGroup = function (groupView) {\n        var restoreFocus = this.shouldRestoreFocus(this.container);\n        // Activate next group if the removed one was active\n        if (this._activeGroup === groupView) {\n            var mostRecentlyActiveGroups = this.getGroups(editorGroupsService_1.GroupsOrder.MOST_RECENTLY_ACTIVE);\n            var nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current group we are about to dispose\n            this.activateGroup(nextActiveGroup);\n        }\n        // Remove from grid widget & dispose\n        this.gridWidget.removeView(groupView, grid_1.Sizing.Distribute);\n        groupView.dispose();\n        // Restore focus if we had it previously (we run this after gridWidget.removeView() is called\n        // because removing a view can mean to reparent it and thus focus would be removed otherwise)\n        if (restoreFocus) {\n            this._activeGroup.focus();\n        }\n        // Update labels\n        this.updateGroupLabels();\n        // Update container\n        this.updateContainer();\n        // Mark preferred size as changed\n        this.resetPreferredSize();\n        // Event\n        this._onDidRemoveGroup.fire(groupView);\n    };\n    EditorPart.prototype.moveGroup = function (group, location, direction) {\n        var sourceView = this.assertGroupView(group);\n        var targetView = this.assertGroupView(location);\n        if (sourceView.id === targetView.id) {\n            throw new Error('Cannot move group into its own');\n        }\n        var restoreFocus = this.shouldRestoreFocus(sourceView.element);\n        // Move through grid widget API\n        this.gridWidget.moveView(sourceView, grid_1.Sizing.Distribute, targetView, this.toGridViewDirection(direction));\n        // Restore focus if we had it previously (we run this after gridWidget.removeView() is called\n        // because removing a view can mean to reparent it and thus focus would be removed otherwise)\n        if (restoreFocus) {\n            sourceView.focus();\n        }\n        // Event\n        this._onDidMoveGroup.fire(sourceView);\n        return sourceView;\n    };\n    EditorPart.prototype.copyGroup = function (group, location, direction) {\n        var groupView = this.assertGroupView(group);\n        var locationView = this.assertGroupView(location);\n        var restoreFocus = this.shouldRestoreFocus(groupView.element);\n        // Copy the group view\n        var copiedGroupView = this.doAddGroup(locationView, direction, groupView);\n        // Restore focus if we had it\n        if (restoreFocus) {\n            copiedGroupView.focus();\n        }\n        return copiedGroupView;\n    };\n    EditorPart.prototype.mergeGroup = function (group, target, options) {\n        var _this = this;\n        var sourceView = this.assertGroupView(group);\n        var targetView = this.assertGroupView(target);\n        // Move/Copy editors over into target\n        var index = (options && typeof options.index === 'number') ? options.index : targetView.count;\n        sourceView.editors.forEach(function (editor) {\n            var inactive = !sourceView.isActive(editor) || _this._activeGroup !== sourceView;\n            var copyOptions = { index: index, inactive: inactive, preserveFocus: inactive };\n            if (options && options.mode === editorGroupsService_1.MergeGroupMode.COPY_EDITORS) {\n                sourceView.copyEditor(editor, targetView, copyOptions);\n            }\n            else {\n                sourceView.moveEditor(editor, targetView, copyOptions);\n            }\n            index++;\n        });\n        // Remove source if the view is now empty and not already removed\n        if (sourceView.isEmpty() && !sourceView.disposed /* could have been disposed already via workbench.editor.closeEmptyGroups setting */) {\n            this.removeGroup(sourceView);\n        }\n        return targetView;\n    };\n    EditorPart.prototype.assertGroupView = function (group) {\n        var groupView;\n        if (typeof group === 'number') {\n            groupView = this.getGroup(group);\n        }\n        else {\n            groupView = group;\n        }\n        if (!groupView) {\n            throw new Error('Invalid editor group provided!');\n        }\n        return groupView;\n    };\n    Object.defineProperty(EditorPart.prototype, \"minimumWidth\", {\n        get: function () { return this.centeredLayoutWidget.minimumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"maximumWidth\", {\n        get: function () { return this.centeredLayoutWidget.maximumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"minimumHeight\", {\n        get: function () { return this.centeredLayoutWidget.minimumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"maximumHeight\", {\n        get: function () { return this.centeredLayoutWidget.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorPart.prototype, \"preferredSize\", {\n        get: function () {\n            if (!this._preferredSize) {\n                this._preferredSize = new dom_1.Dimension(this.gridWidget.minimumWidth, this.gridWidget.minimumHeight);\n            }\n            return this._preferredSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPart.prototype.resetPreferredSize = function () {\n        // Reset (will be computed upon next access)\n        this._preferredSize = undefined;\n        // Event\n        this._onDidPreferredSizeChange.fire();\n    };\n    Object.defineProperty(EditorPart.prototype, \"gridSeparatorBorder\", {\n        get: function () {\n            return this.theme.getColor(theme_1.EDITOR_GROUP_BORDER) || this.theme.getColor(colorRegistry_1.contrastBorder) || color_1.Color.transparent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPart.prototype.updateStyles = function () {\n        this.container.style.backgroundColor = this.getColor(colorRegistry_1.editorBackground);\n        var separatorBorderStyle = { separatorBorder: this.gridSeparatorBorder, background: this.theme.getColor(theme_1.EDITOR_PANE_BACKGROUND) || color_1.Color.transparent };\n        this.gridWidget.style(separatorBorderStyle);\n        this.centeredLayoutWidget.styles(separatorBorderStyle);\n    };\n    EditorPart.prototype.createContentArea = function (parent, options) {\n        // Container\n        this.element = parent;\n        this.container = document.createElement('div');\n        dom_1.addClass(this.container, 'content');\n        parent.appendChild(this.container);\n        // Grid control with center layout\n        this.doCreateGridControl(options);\n        this.centeredLayoutWidget = this._register(new centeredViewLayout_1.CenteredViewLayout(this.container, this.gridWidgetView, this.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY]));\n        // Drop support\n        this._register(this.instantiationService.createInstance(editorDropTarget_1.EditorDropTarget, this, this.container));\n        return this.container;\n    };\n    EditorPart.prototype.centerLayout = function (active) {\n        this.centeredLayoutWidget.activate(active);\n        this._activeGroup.focus();\n    };\n    EditorPart.prototype.isLayoutCentered = function () {\n        return this.centeredLayoutWidget.isActive();\n    };\n    EditorPart.prototype.doCreateGridControl = function (options) {\n        var _this = this;\n        // Grid Widget (with previous UI state)\n        var restoreError = false;\n        if (!options || options.restorePreviousState) {\n            restoreError = !this.doCreateGridControlWithPreviousState();\n        }\n        // Grid Widget (no previous UI state or failed to restore)\n        if (!this.gridWidget || restoreError) {\n            var initialGroup = this.doCreateGroupView();\n            this.doSetGridWidget(new grid_1.SerializableGrid(initialGroup));\n            // Ensure a group is active\n            this.doSetGroupActive(initialGroup);\n        }\n        // Signal restored\n        Promise.all(this.groups.map(function (group) { return group.whenRestored; })).finally(function () { return _this.whenRestoredResolve(); });\n        // Update container\n        this.updateContainer();\n    };\n    EditorPart.prototype.doCreateGridControlWithPreviousState = function () {\n        var uiState = this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n        if (uiState && uiState.serializedGrid) {\n            try {\n                // MRU\n                this.mostRecentActiveGroups = uiState.mostRecentActiveGroups;\n                // Grid Widget\n                this.doCreateGridControlWithState(uiState.serializedGrid, uiState.activeGroup);\n                // Ensure last active group has focus\n                this._activeGroup.focus();\n            }\n            catch (error) {\n                // Log error\n                errors_1.onUnexpectedError(new Error(\"Error restoring editor grid widget: \" + error + \" (with state: \" + JSON.stringify(uiState) + \")\"));\n                // Clear any state we have from the failing restore\n                this.groupViews.forEach(function (group) { return group.dispose(); });\n                this.groupViews.clear();\n                this.mostRecentActiveGroups = [];\n                return false; // failure\n            }\n        }\n        return true; // success\n    };\n    EditorPart.prototype.doCreateGridControlWithState = function (serializedGrid, activeGroupId, editorGroupViewsToReuse) {\n        var _this = this;\n        // Determine group views to reuse if any\n        var reuseGroupViews;\n        if (editorGroupViewsToReuse) {\n            reuseGroupViews = editorGroupViewsToReuse.slice(0); // do not modify original array\n        }\n        else {\n            reuseGroupViews = [];\n        }\n        // Create new\n        var groupViews = [];\n        var gridWidget = grid_1.SerializableGrid.deserialize(serializedGrid, {\n            fromJSON: function (serializedEditorGroup) {\n                var groupView;\n                if (reuseGroupViews.length > 0) {\n                    groupView = reuseGroupViews.shift();\n                }\n                else {\n                    groupView = _this.doCreateGroupView(serializedEditorGroup);\n                }\n                groupViews.push(groupView);\n                if (groupView.id === activeGroupId) {\n                    _this.doSetGroupActive(groupView);\n                }\n                return groupView;\n            }\n        }, { styles: { separatorBorder: this.gridSeparatorBorder } });\n        // If the active group was not found when restoring the grid\n        // make sure to make at least one group active. We always need\n        // an active group.\n        if (!this._activeGroup) {\n            this.doSetGroupActive(groupViews[0]);\n        }\n        // Validate MRU group views matches grid widget state\n        if (this.mostRecentActiveGroups.some(function (groupId) { return !_this.getGroup(groupId); })) {\n            this.mostRecentActiveGroups = groupViews.map(function (group) { return group.id; });\n        }\n        // Set it\n        this.doSetGridWidget(gridWidget);\n    };\n    EditorPart.prototype.doSetGridWidget = function (gridWidget) {\n        if (this.gridWidget) {\n            this.gridWidget.dispose();\n        }\n        this.gridWidget = gridWidget;\n        this.gridWidgetView.gridWidget = gridWidget;\n        this._onDidSizeConstraintsChange.input = gridWidget.onDidChange;\n        this.onDidSetGridWidget.fire(undefined);\n    };\n    EditorPart.prototype.updateContainer = function () {\n        dom_1.toggleClass(this.container, 'empty', this.isEmpty());\n    };\n    EditorPart.prototype.updateGroupLabels = function () {\n        var _this = this;\n        // Since our labels are created using the index of the\n        // group, adding/removing a group might produce gaps.\n        // So we iterate over all groups and reassign the label\n        // based on the index.\n        this.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE).forEach(function (group, index) {\n            group.setLabel(_this.getGroupLabel(index + 1));\n        });\n    };\n    EditorPart.prototype.getGroupLabel = function (index) {\n        return nls_1.localize('groupLabel', \"Group {0}\", index);\n    };\n    EditorPart.prototype.isEmpty = function () {\n        return this.groupViews.size === 1 && this._activeGroup.isEmpty();\n    };\n    EditorPart.prototype.layout = function (width, height) {\n        // Layout contents\n        var contentAreaSize = _super.prototype.layoutContents.call(this, width, height).contentSize;\n        // Layout editor container\n        this.doLayout(contentAreaSize);\n    };\n    EditorPart.prototype.doLayout = function (dimension) {\n        this._dimension = dimension;\n        // Layout Grid\n        this.centeredLayoutWidget.layout(this._dimension.width, this._dimension.height);\n        // Event\n        this._onDidLayout.fire(dimension);\n    };\n    EditorPart.prototype.saveState = function () {\n        // Persist grid UI state\n        if (this.gridWidget) {\n            var uiState = {\n                serializedGrid: this.gridWidget.serialize(),\n                activeGroup: this._activeGroup.id,\n                mostRecentActiveGroups: this.mostRecentActiveGroups\n            };\n            if (this.isEmpty()) {\n                delete this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n            }\n            else {\n                this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY] = uiState;\n            }\n        }\n        // Persist centered view state\n        var centeredLayoutState = this.centeredLayoutWidget.state;\n        if (this.centeredLayoutWidget.isDefault(centeredLayoutState)) {\n            delete this.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY];\n        }\n        else {\n            this.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY] = centeredLayoutState;\n        }\n        _super.prototype.saveState.call(this);\n    };\n    EditorPart.prototype.dispose = function () {\n        // Forward to all groups\n        this.groupViews.forEach(function (group) { return group.dispose(); });\n        this.groupViews.clear();\n        // Grid widget\n        if (this.gridWidget) {\n            this.gridWidget.dispose();\n        }\n        _super.prototype.dispose.call(this);\n    };\n    //#endregion\n    EditorPart.prototype.toJSON = function () {\n        return {\n            type: layoutService_1.Parts.EDITOR_PART\n        };\n    };\n    EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY = 'editorpart.state';\n    EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY = 'editorpart.centeredview';\n    EditorPart = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, themeService_1.IThemeService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService)\n    ], EditorPart);\n    return EditorPart;\n}(part_1.Part));\nexports.EditorPart = EditorPart;\nextensions_1.registerSingleton(editorGroupsService_1.IEditorGroupsService, EditorPart);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPart.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPart.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/workbench/browser/parts/editor/editor.contribution';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Part } from 'vs/workbench/browser/part';\nimport { Dimension, isAncestor, toggleClass, addClass, $ } from 'vs/base/browser/dom';\nimport { Event, Emitter, Relay } from 'vs/base/common/event';\nimport { contrastBorder, editorBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { GroupDirection, IAddGroupOptions, GroupsArrangement, GroupOrientation, IMergeGroupOptions, MergeGroupMode, ICopyEditorOptions, GroupsOrder, GroupChangeKind, GroupLocation, IFindGroupScope, EditorGroupLayout, GroupLayoutArgument, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IInstantiationService, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { Direction, SerializableGrid, Sizing, ISerializedGrid, Orientation, GridBranchNode, isGridBranchNode, GridNode, createSerializedGrid, Grid } from 'vs/base/browser/ui/grid/grid';\nimport { GroupIdentifier, IWorkbenchEditorConfiguration, IEditorPartOptions } from 'vs/workbench/common/editor';\nimport { values } from 'vs/base/common/map';\nimport { EDITOR_GROUP_BORDER, EDITOR_PANE_BACKGROUND } from 'vs/workbench/common/theme';\nimport { distinct, coalesce } from 'vs/base/common/arrays';\nimport { IEditorGroupsAccessor, IEditorGroupView, getEditorPartOptions, impactsEditorPartOptions, IEditorPartOptionsChangeEvent, IEditorPartCreationOptions } from 'vs/workbench/browser/parts/editor/editor';\nimport { EditorGroupView } from 'vs/workbench/browser/parts/editor/editorGroupView';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { assign } from 'vs/base/common/objects';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ISerializedEditorGroup, isSerializedEditorGroup } from 'vs/workbench/common/editor/editorGroup';\nimport { EditorDropTarget } from 'vs/workbench/browser/parts/editor/editorDropTarget';\nimport { localize } from 'vs/nls';\nimport { Color } from 'vs/base/common/color';\nimport { CenteredViewLayout } from 'vs/base/browser/ui/centered/centeredViewLayout';\nimport { IView, orthogonal, LayoutPriority } from 'vs/base/browser/ui/grid/gridview';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Parts, IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\ninterface IEditorPartUIState {\n\tserializedGrid: ISerializedGrid;\n\tactiveGroup: GroupIdentifier;\n\tmostRecentActiveGroups: GroupIdentifier[];\n}\n\nclass GridWidgetView<T extends IView> implements IView {\n\n\treadonly element: HTMLElement = $('.grid-view-container');\n\n\tget minimumWidth(): number { return this.gridWidget ? this.gridWidget.minimumWidth : 0; }\n\tget maximumWidth(): number { return this.gridWidget ? this.gridWidget.maximumWidth : Number.POSITIVE_INFINITY; }\n\tget minimumHeight(): number { return this.gridWidget ? this.gridWidget.minimumHeight : 0; }\n\tget maximumHeight(): number { return this.gridWidget ? this.gridWidget.maximumHeight : Number.POSITIVE_INFINITY; }\n\n\tprivate _onDidChange = new Relay<{ width: number; height: number; } | undefined>();\n\treadonly onDidChange: Event<{ width: number; height: number; } | undefined> = this._onDidChange.event;\n\n\tprivate _gridWidget: Grid<T>;\n\n\tget gridWidget(): Grid<T> {\n\t\treturn this._gridWidget;\n\t}\n\n\tset gridWidget(grid: Grid<T>) {\n\t\tthis.element.innerHTML = '';\n\n\t\tif (grid) {\n\t\t\tthis.element.appendChild(grid.element);\n\t\t\tthis._onDidChange.input = grid.onDidChange;\n\t\t} else {\n\t\t\tthis._onDidChange.input = Event.None;\n\t\t}\n\n\t\tthis._gridWidget = grid;\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tif (this.gridWidget) {\n\t\t\tthis.gridWidget.layout(width, height);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n}\n\nexport class EditorPart extends Part implements IEditorGroupsService, IEditorGroupsAccessor {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate static readonly EDITOR_PART_UI_STATE_STORAGE_KEY = 'editorpart.state';\n\tprivate static readonly EDITOR_PART_CENTERED_VIEW_STORAGE_KEY = 'editorpart.centeredview';\n\n\t//#region Events\n\n\tprivate readonly _onDidLayout: Emitter<Dimension> = this._register(new Emitter<Dimension>());\n\tget onDidLayout(): Event<Dimension> { return this._onDidLayout.event; }\n\n\tprivate readonly _onDidActiveGroupChange: Emitter<IEditorGroupView> = this._register(new Emitter<IEditorGroupView>());\n\tget onDidActiveGroupChange(): Event<IEditorGroupView> { return this._onDidActiveGroupChange.event; }\n\n\tprivate readonly _onDidActivateGroup: Emitter<IEditorGroupView> = this._register(new Emitter<IEditorGroupView>());\n\tget onDidActivateGroup(): Event<IEditorGroupView> { return this._onDidActivateGroup.event; }\n\n\tprivate readonly _onDidAddGroup: Emitter<IEditorGroupView> = this._register(new Emitter<IEditorGroupView>());\n\tget onDidAddGroup(): Event<IEditorGroupView> { return this._onDidAddGroup.event; }\n\n\tprivate readonly _onDidRemoveGroup: Emitter<IEditorGroupView> = this._register(new Emitter<IEditorGroupView>());\n\tget onDidRemoveGroup(): Event<IEditorGroupView> { return this._onDidRemoveGroup.event; }\n\n\tprivate readonly _onDidMoveGroup: Emitter<IEditorGroupView> = this._register(new Emitter<IEditorGroupView>());\n\tget onDidMoveGroup(): Event<IEditorGroupView> { return this._onDidMoveGroup.event; }\n\n\tprivate onDidSetGridWidget = this._register(new Emitter<{ width: number; height: number; } | undefined>());\n\tprivate _onDidSizeConstraintsChange = this._register(new Relay<{ width: number; height: number; } | undefined>());\n\tget onDidSizeConstraintsChange(): Event<{ width: number; height: number; } | undefined> { return Event.any(this.onDidSetGridWidget.event, this._onDidSizeConstraintsChange.event); }\n\n\tprivate readonly _onDidPreferredSizeChange: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidPreferredSizeChange(): Event<void> { return this._onDidPreferredSizeChange.event; }\n\n\t//#endregion\n\n\tprivate _preferredSize: Dimension | undefined;\n\n\tprivate workspaceMemento: object;\n\tprivate globalMemento: object;\n\n\tprivate _partOptions: IEditorPartOptions;\n\n\tprivate _activeGroup: IEditorGroupView;\n\tprivate groupViews: Map<GroupIdentifier, IEditorGroupView> = new Map<GroupIdentifier, IEditorGroupView>();\n\tprivate mostRecentActiveGroups: GroupIdentifier[] = [];\n\n\tprivate container: HTMLElement;\n\tprivate centeredLayoutWidget: CenteredViewLayout;\n\tprivate gridWidget: SerializableGrid<IEditorGroupView>;\n\tprivate gridWidgetView: GridWidgetView<IEditorGroupView>;\n\n\tprivate _whenRestored: Promise<void>;\n\tprivate whenRestoredResolve: () => void;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(Parts.EDITOR_PART, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.gridWidgetView = new GridWidgetView<IEditorGroupView>();\n\n\t\tthis._partOptions = getEditorPartOptions(this.configurationService.getValue<IWorkbenchEditorConfiguration>());\n\n\t\tthis.workspaceMemento = this.getMemento(StorageScope.WORKSPACE);\n\t\tthis.globalMemento = this.getMemento(StorageScope.GLOBAL);\n\n\t\tthis._whenRestored = new Promise(resolve => (this.whenRestoredResolve = resolve));\n\n\t\tthis.registerListeners();\n\t}\n\n\t//#region IEditorGroupsAccessor\n\n\tprivate enforcedPartOptions: IEditorPartOptions[] = [];\n\n\tprivate readonly _onDidEditorPartOptionsChange: Emitter<IEditorPartOptionsChangeEvent> = this._register(new Emitter<IEditorPartOptionsChangeEvent>());\n\tget onDidEditorPartOptionsChange(): Event<IEditorPartOptionsChangeEvent> { return this._onDidEditorPartOptionsChange.event; }\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t}\n\n\tprivate onConfigurationUpdated(event: IConfigurationChangeEvent): void {\n\t\tif (impactsEditorPartOptions(event)) {\n\t\t\tthis.handleChangedPartOptions();\n\t\t}\n\t}\n\n\tprivate handleChangedPartOptions(): void {\n\t\tconst oldPartOptions = this._partOptions;\n\t\tconst newPartOptions = getEditorPartOptions(this.configurationService.getValue<IWorkbenchEditorConfiguration>());\n\n\t\tthis.enforcedPartOptions.forEach(enforcedPartOptions => {\n\t\t\tassign(newPartOptions, enforcedPartOptions); // check for overrides\n\t\t});\n\n\t\tthis._partOptions = newPartOptions;\n\n\t\tthis._onDidEditorPartOptionsChange.fire({ oldPartOptions, newPartOptions });\n\t}\n\n\tget partOptions(): IEditorPartOptions {\n\t\treturn this._partOptions;\n\t}\n\n\tenforcePartOptions(options: IEditorPartOptions): IDisposable {\n\t\tthis.enforcedPartOptions.push(options);\n\t\tthis.handleChangedPartOptions();\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.enforcedPartOptions.splice(this.enforcedPartOptions.indexOf(options), 1);\n\t\t\tthis.handleChangedPartOptions();\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region IEditorGroupsService\n\n\tprivate _dimension: Dimension;\n\tget dimension(): Dimension { return this._dimension; }\n\n\tget activeGroup(): IEditorGroupView {\n\t\treturn this._activeGroup;\n\t}\n\n\tget groups(): IEditorGroupView[] {\n\t\treturn values(this.groupViews);\n\t}\n\n\tget count(): number {\n\t\treturn this.groupViews.size;\n\t}\n\n\tget orientation(): GroupOrientation {\n\t\treturn (this.gridWidget && this.gridWidget.orientation === Orientation.VERTICAL) ? GroupOrientation.VERTICAL : GroupOrientation.HORIZONTAL;\n\t}\n\n\tget whenRestored(): Promise<void> {\n\t\treturn this._whenRestored;\n\t}\n\n\tgetGroups(order = GroupsOrder.CREATION_TIME): IEditorGroupView[] {\n\t\tswitch (order) {\n\t\t\tcase GroupsOrder.CREATION_TIME:\n\t\t\t\treturn this.groups;\n\n\t\t\tcase GroupsOrder.MOST_RECENTLY_ACTIVE:\n\t\t\t\tconst mostRecentActive = coalesce(this.mostRecentActiveGroups.map(groupId => this.getGroup(groupId)));\n\n\t\t\t\t// there can be groups that got never active, even though they exist. in this case\n\t\t\t\t// make sure to ust append them at the end so that all groups are returned properly\n\t\t\t\treturn distinct([...mostRecentActive, ...this.groups]);\n\n\t\t\tcase GroupsOrder.GRID_APPEARANCE:\n\t\t\t\tconst views: IEditorGroupView[] = [];\n\t\t\t\tif (this.gridWidget) {\n\t\t\t\t\tthis.fillGridNodes(views, this.gridWidget.getViews());\n\t\t\t\t}\n\n\t\t\t\treturn views;\n\t\t}\n\t}\n\n\tprivate fillGridNodes(target: IEditorGroupView[], node: GridBranchNode<IEditorGroupView> | GridNode<IEditorGroupView>): void {\n\t\tif (isGridBranchNode(node)) {\n\t\t\tnode.children.forEach(child => this.fillGridNodes(target, child));\n\t\t} else {\n\t\t\ttarget.push(node.view);\n\t\t}\n\t}\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined {\n\t\treturn this.groupViews.get(identifier);\n\t}\n\n\tfindGroup(scope: IFindGroupScope, source: IEditorGroupView | GroupIdentifier = this.activeGroup, wrap?: boolean): IEditorGroupView {\n\n\t\t// by direction\n\t\tif (typeof scope.direction === 'number') {\n\t\t\treturn this.doFindGroupByDirection(scope.direction, source, wrap);\n\t\t}\n\n\t\t// by location\n\t\tif (typeof scope.location === 'number') {\n\t\t\treturn this.doFindGroupByLocation(scope.location, source, wrap);\n\t\t}\n\n\t\tthrow new Error('invalid arguments');\n\t}\n\n\tprivate doFindGroupByDirection(direction: GroupDirection, source: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\n\t\t// Find neighbours and sort by our MRU list\n\t\tconst neighbours = this.gridWidget.getNeighborViews(sourceGroupView, this.toGridViewDirection(direction), wrap);\n\t\tneighbours.sort(((n1, n2) => this.mostRecentActiveGroups.indexOf(n1.id) - this.mostRecentActiveGroups.indexOf(n2.id)));\n\n\t\treturn neighbours[0];\n\t}\n\n\tprivate doFindGroupByLocation(location: GroupLocation, source: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\t\tconst groups = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tconst index = groups.indexOf(sourceGroupView);\n\n\t\tswitch (location) {\n\t\t\tcase GroupLocation.FIRST:\n\t\t\t\treturn groups[0];\n\t\t\tcase GroupLocation.LAST:\n\t\t\t\treturn groups[groups.length - 1];\n\t\t\tcase GroupLocation.NEXT:\n\t\t\t\tlet nextGroup = groups[index + 1];\n\t\t\t\tif (!nextGroup && wrap) {\n\t\t\t\t\tnextGroup = this.doFindGroupByLocation(GroupLocation.FIRST, source);\n\t\t\t\t}\n\n\t\t\t\treturn nextGroup;\n\t\t\tcase GroupLocation.PREVIOUS:\n\t\t\t\tlet previousGroup = groups[index - 1];\n\t\t\t\tif (!previousGroup && wrap) {\n\t\t\t\t\tpreviousGroup = this.doFindGroupByLocation(GroupLocation.LAST, source);\n\t\t\t\t}\n\n\t\t\t\treturn previousGroup;\n\t\t}\n\t}\n\n\tactivateGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tthis.doSetGroupActive(groupView);\n\n\t\tthis._onDidActivateGroup.fire(groupView);\n\t\treturn groupView;\n\t}\n\n\tgetSize(group: IEditorGroupView | GroupIdentifier): number {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\treturn this.gridWidget.getViewSize(groupView);\n\t}\n\n\tsetSize(group: IEditorGroupView | GroupIdentifier, size: number): void {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\tthis.gridWidget.resizeView(groupView, size);\n\t}\n\n\tarrangeGroups(arrangement: GroupsArrangement): void {\n\t\tif (this.count < 2) {\n\t\t\treturn; // require at least 2 groups to show\n\t\t}\n\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\t// Even all group sizes\n\t\tif (arrangement === GroupsArrangement.EVEN) {\n\t\t\tthis.gridWidget.distributeViewSizes();\n\t\t}\n\n\t\t// Maximize the current active group\n\t\telse {\n\t\t\tthis.gridWidget.maximizeViewSize(this.activeGroup);\n\t\t}\n\t}\n\n\tsetGroupOrientation(orientation: GroupOrientation): void {\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\tconst newOrientation = (orientation === GroupOrientation.HORIZONTAL) ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\tif (this.gridWidget.orientation !== newOrientation) {\n\t\t\tthis.gridWidget.orientation = newOrientation;\n\n\t\t\t// Mark preferred size as changed\n\t\t\tthis.resetPreferredSize();\n\t\t}\n\t}\n\n\tapplyLayout(layout: EditorGroupLayout): void {\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.container);\n\n\t\t// Determine how many groups we need overall\n\t\tlet layoutGroupsCount = 0;\n\t\tfunction countGroups(groups: GroupLayoutArgument[]): void {\n\t\t\tgroups.forEach(group => {\n\t\t\t\tif (Array.isArray(group.groups)) {\n\t\t\t\t\tcountGroups(group.groups);\n\t\t\t\t} else {\n\t\t\t\t\tlayoutGroupsCount++;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tcountGroups(layout.groups);\n\n\t\t// If we currently have too many groups, merge them into the last one\n\t\tlet currentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tif (layoutGroupsCount < currentGroupViews.length) {\n\t\t\tconst lastGroupInLayout = currentGroupViews[layoutGroupsCount - 1];\n\t\t\tcurrentGroupViews.forEach((group, index) => {\n\t\t\t\tif (index >= layoutGroupsCount) {\n\t\t\t\t\tthis.mergeGroup(group, lastGroupInLayout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcurrentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t}\n\n\t\tconst activeGroup = this.activeGroup;\n\n\t\t// Prepare grid descriptor to create new grid from\n\t\tconst gridDescriptor = createSerializedGrid({\n\t\t\torientation: this.toGridViewOrientation(\n\t\t\t\tlayout.orientation,\n\t\t\t\tthis.isTwoDimensionalGrid() ?\n\t\t\t\t\tthis.gridWidget.orientation :\t\t\t// preserve original orientation for 2-dimensional grids\n\t\t\t\t\torthogonal(this.gridWidget.orientation) // otherwise flip (fix https://github.com/Microsoft/vscode/issues/52975)\n\t\t\t),\n\t\t\tgroups: layout.groups\n\t\t});\n\n\t\t// Recreate gridwidget with descriptor\n\t\tthis.doCreateGridControlWithState(gridDescriptor, activeGroup.id, currentGroupViews);\n\n\t\t// Layout\n\t\tthis.doLayout(this._dimension);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Mark preferred size as changed\n\t\tthis.resetPreferredSize();\n\n\t\t// Events for groups that got added\n\t\tthis.getGroups(GroupsOrder.GRID_APPEARANCE).forEach(groupView => {\n\t\t\tif (currentGroupViews.indexOf(groupView) === -1) {\n\t\t\t\tthis._onDidAddGroup.fire(groupView);\n\t\t\t}\n\t\t});\n\n\t\t// Update labels\n\t\tthis.updateGroupLabels();\n\n\t\t// Restore focus as needed\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\t}\n\n\tprivate shouldRestoreFocus(target: Element): boolean {\n\t\tconst activeElement = document.activeElement;\n\n\t\tif (activeElement === document.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestor(activeElement, target);\n\t}\n\n\tprivate isTwoDimensionalGrid(): boolean {\n\t\tconst views = this.gridWidget.getViews();\n\t\tif (isGridBranchNode(views)) {\n\t\t\t// the grid is 2-dimensional if any children\n\t\t\t// of the grid is a branch node\n\t\t\treturn views.children.some(child => isGridBranchNode(child));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection, options?: IAddGroupOptions): IEditorGroupView {\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tconst group = this.doAddGroup(locationView, direction);\n\n\t\tif (options && options.activate) {\n\t\t\tthis.doSetGroupActive(group);\n\t\t}\n\n\t\treturn group;\n\t}\n\n\tprivate doAddGroup(locationView: IEditorGroupView, direction: GroupDirection, groupToCopy?: IEditorGroupView): IEditorGroupView {\n\t\tconst newGroupView = this.doCreateGroupView(groupToCopy);\n\n\t\t// Add to grid widget\n\t\tthis.gridWidget.addView(\n\t\t\tnewGroupView,\n\t\t\tSizing.Distribute,\n\t\t\tlocationView,\n\t\t\tthis.toGridViewDirection(direction),\n\t\t);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Mark preferred size as changed\n\t\tthis.resetPreferredSize();\n\n\t\t// Event\n\t\tthis._onDidAddGroup.fire(newGroupView);\n\n\t\t// Update labels\n\t\tthis.updateGroupLabels();\n\n\t\treturn newGroupView;\n\t}\n\n\tprivate doCreateGroupView(from?: IEditorGroupView | ISerializedEditorGroup | null): IEditorGroupView {\n\n\t\t// Label: just use the number of existing groups as label\n\t\tconst label = this.getGroupLabel(this.count + 1);\n\n\t\t// Create group view\n\t\tlet groupView: IEditorGroupView;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tgroupView = EditorGroupView.createCopy(from, this, label, this.instantiationService);\n\t\t} else if (isSerializedEditorGroup(from)) {\n\t\t\tgroupView = EditorGroupView.createFromSerialized(from, this, label, this.instantiationService);\n\t\t} else {\n\t\t\tgroupView = EditorGroupView.createNew(this, label, this.instantiationService);\n\t\t}\n\n\t\t// Keep in map\n\t\tthis.groupViews.set(groupView.id, groupView);\n\n\t\t// Track focus\n\t\tlet groupDisposables: IDisposable[] = [];\n\t\tgroupDisposables.push(groupView.onDidFocus(() => {\n\t\t\tthis.doSetGroupActive(groupView);\n\t\t}));\n\n\t\t// Track editor change\n\t\tgroupDisposables.push(groupView.onDidGroupChange(e => {\n\t\t\tif (e.kind === GroupChangeKind.EDITOR_ACTIVE) {\n\t\t\t\tthis.updateContainer();\n\t\t\t}\n\t\t}));\n\n\t\t// Track dispose\n\t\tEvent.once(groupView.onWillDispose)(() => {\n\t\t\tgroupDisposables = dispose(groupDisposables);\n\t\t\tthis.groupViews.delete(groupView.id);\n\t\t\tthis.doUpdateMostRecentActive(groupView);\n\t\t});\n\n\t\treturn groupView;\n\t}\n\n\tprivate doSetGroupActive(group: IEditorGroupView): void {\n\t\tif (this._activeGroup === group) {\n\t\t\treturn; // return if this is already the active group\n\t\t}\n\n\t\tconst previousActiveGroup = this._activeGroup;\n\t\tthis._activeGroup = group;\n\n\t\t// Update list of most recently active groups\n\t\tthis.doUpdateMostRecentActive(group, true);\n\n\t\t// Mark previous one as inactive\n\t\tif (previousActiveGroup) {\n\t\t\tpreviousActiveGroup.setActive(false);\n\t\t}\n\n\t\t// Mark group as new active\n\t\tgroup.setActive(true);\n\n\t\t// Maximize the group if it is currently minimized\n\t\tif (this.gridWidget) {\n\t\t\tconst viewSize = this.gridWidget.getViewSize2(group);\n\t\t\tif (viewSize.width === group.minimumWidth || viewSize.height === group.minimumHeight) {\n\t\t\t\tthis.arrangeGroups(GroupsArrangement.MINIMIZE_OTHERS);\n\t\t\t}\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidActiveGroupChange.fire(group);\n\t}\n\n\tprivate doUpdateMostRecentActive(group: IEditorGroupView, makeMostRecentlyActive?: boolean): void {\n\t\tconst index = this.mostRecentActiveGroups.indexOf(group.id);\n\n\t\t// Remove from MRU list\n\t\tif (index !== -1) {\n\t\t\tthis.mostRecentActiveGroups.splice(index, 1);\n\t\t}\n\n\t\t// Add to front as needed\n\t\tif (makeMostRecentlyActive) {\n\t\t\tthis.mostRecentActiveGroups.unshift(group.id);\n\t\t}\n\t}\n\n\tprivate toGridViewDirection(direction: GroupDirection): Direction {\n\t\tswitch (direction) {\n\t\t\tcase GroupDirection.UP: return Direction.Up;\n\t\t\tcase GroupDirection.DOWN: return Direction.Down;\n\t\t\tcase GroupDirection.LEFT: return Direction.Left;\n\t\t\tcase GroupDirection.RIGHT: return Direction.Right;\n\t\t}\n\t}\n\n\tprivate toGridViewOrientation(orientation: GroupOrientation, fallback: Orientation): Orientation {\n\t\tif (typeof orientation === 'number') {\n\t\t\treturn orientation === GroupOrientation.HORIZONTAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier): void {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tif (this.groupViews.size === 1) {\n\t\t\treturn; // Cannot remove the last root group\n\t\t}\n\n\t\t// Remove empty group\n\t\tif (groupView.isEmpty()) {\n\t\t\treturn this.doRemoveEmptyGroup(groupView);\n\t\t}\n\n\t\t// Remove group with editors\n\t\tthis.doRemoveGroupWithEditors(groupView);\n\t}\n\n\tprivate doRemoveGroupWithEditors(groupView: IEditorGroupView): void {\n\t\tconst mostRecentlyActiveGroups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\n\t\tlet lastActiveGroup: IEditorGroupView;\n\t\tif (this._activeGroup === groupView) {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[1];\n\t\t} else {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[0];\n\t\t}\n\n\t\t// Removing a group with editors should merge these editors into the\n\t\t// last active group and then remove this group.\n\t\tthis.mergeGroup(groupView, lastActiveGroup);\n\t}\n\n\tprivate doRemoveEmptyGroup(groupView: IEditorGroupView): void {\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.container);\n\n\t\t// Activate next group if the removed one was active\n\t\tif (this._activeGroup === groupView) {\n\t\t\tconst mostRecentlyActiveGroups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current group we are about to dispose\n\t\t\tthis.activateGroup(nextActiveGroup);\n\t\t}\n\n\t\t// Remove from grid widget & dispose\n\t\tthis.gridWidget.removeView(groupView, Sizing.Distribute);\n\t\tgroupView.dispose();\n\n\t\t// Restore focus if we had it previously (we run this after gridWidget.removeView() is called\n\t\t// because removing a view can mean to reparent it and thus focus would be removed otherwise)\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\n\t\t// Update labels\n\t\tthis.updateGroupLabels();\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Mark preferred size as changed\n\t\tthis.resetPreferredSize();\n\n\t\t// Event\n\t\tthis._onDidRemoveGroup.fire(groupView);\n\t}\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(location);\n\n\t\tif (sourceView.id === targetView.id) {\n\t\t\tthrow new Error('Cannot move group into its own');\n\t\t}\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(sourceView.element);\n\n\t\t// Move through grid widget API\n\t\tthis.gridWidget.moveView(sourceView, Sizing.Distribute, targetView, this.toGridViewDirection(direction));\n\n\t\t// Restore focus if we had it previously (we run this after gridWidget.removeView() is called\n\t\t// because removing a view can mean to reparent it and thus focus would be removed otherwise)\n\t\tif (restoreFocus) {\n\t\t\tsourceView.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMoveGroup.fire(sourceView);\n\n\t\treturn sourceView;\n\t}\n\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(groupView.element);\n\n\t\t// Copy the group view\n\t\tconst copiedGroupView = this.doAddGroup(locationView, direction, groupView);\n\n\t\t// Restore focus if we had it\n\t\tif (restoreFocus) {\n\t\t\tcopiedGroupView.focus();\n\t\t}\n\n\t\treturn copiedGroupView;\n\t}\n\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): IEditorGroupView {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(target);\n\n\t\t// Move/Copy editors over into target\n\t\tlet index = (options && typeof options.index === 'number') ? options.index : targetView.count;\n\t\tsourceView.editors.forEach(editor => {\n\t\t\tconst inactive = !sourceView.isActive(editor) || this._activeGroup !== sourceView;\n\t\t\tconst copyOptions: ICopyEditorOptions = { index, inactive, preserveFocus: inactive };\n\n\t\t\tif (options && options.mode === MergeGroupMode.COPY_EDITORS) {\n\t\t\t\tsourceView.copyEditor(editor, targetView, copyOptions);\n\t\t\t} else {\n\t\t\t\tsourceView.moveEditor(editor, targetView, copyOptions);\n\t\t\t}\n\n\t\t\tindex++;\n\t\t});\n\n\t\t// Remove source if the view is now empty and not already removed\n\t\tif (sourceView.isEmpty() && !sourceView.disposed /* could have been disposed already via workbench.editor.closeEmptyGroups setting */) {\n\t\t\tthis.removeGroup(sourceView);\n\t\t}\n\n\t\treturn targetView;\n\t}\n\n\tprivate assertGroupView(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tlet groupView: IEditorGroupView | undefined;\n\t\tif (typeof group === 'number') {\n\t\t\tgroupView = this.getGroup(group);\n\t\t} else {\n\t\t\tgroupView = group;\n\t\t}\n\n\t\tif (!groupView) {\n\t\t\tthrow new Error('Invalid editor group provided!');\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\t//#endregion\n\n\t//#region Part\n\n\treadonly priority: LayoutPriority = LayoutPriority.High;\n\n\tget minimumWidth(): number { return this.centeredLayoutWidget.minimumWidth; }\n\tget maximumWidth(): number { return this.centeredLayoutWidget.maximumWidth; }\n\tget minimumHeight(): number { return this.centeredLayoutWidget.minimumHeight; }\n\tget maximumHeight(): number { return this.centeredLayoutWidget.maximumHeight; }\n\n\tget preferredSize(): Dimension {\n\t\tif (!this._preferredSize) {\n\t\t\tthis._preferredSize = new Dimension(this.gridWidget.minimumWidth, this.gridWidget.minimumHeight);\n\t\t}\n\n\t\treturn this._preferredSize;\n\t}\n\n\tprivate resetPreferredSize(): void {\n\n\t\t// Reset (will be computed upon next access)\n\t\tthis._preferredSize = undefined;\n\n\t\t// Event\n\t\tthis._onDidPreferredSizeChange.fire();\n\t}\n\n\tprivate get gridSeparatorBorder(): Color {\n\t\treturn this.theme.getColor(EDITOR_GROUP_BORDER) || this.theme.getColor(contrastBorder) || Color.transparent;\n\t}\n\n\tupdateStyles(): void {\n\t\tthis.container.style.backgroundColor = this.getColor(editorBackground);\n\n\t\tconst separatorBorderStyle = { separatorBorder: this.gridSeparatorBorder, background: this.theme.getColor(EDITOR_PANE_BACKGROUND) || Color.transparent };\n\t\tthis.gridWidget.style(separatorBorderStyle);\n\t\tthis.centeredLayoutWidget.styles(separatorBorderStyle);\n\t}\n\n\tcreateContentArea(parent: HTMLElement, options?: IEditorPartCreationOptions): HTMLElement {\n\n\t\t// Container\n\t\tthis.element = parent;\n\t\tthis.container = document.createElement('div');\n\t\taddClass(this.container, 'content');\n\t\tparent.appendChild(this.container);\n\n\t\t// Grid control with center layout\n\t\tthis.doCreateGridControl(options);\n\n\t\tthis.centeredLayoutWidget = this._register(new CenteredViewLayout(this.container, this.gridWidgetView, this.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY]));\n\n\t\t// Drop support\n\t\tthis._register(this.instantiationService.createInstance(EditorDropTarget, this, this.container));\n\n\t\treturn this.container;\n\t}\n\n\tcenterLayout(active: boolean): void {\n\t\tthis.centeredLayoutWidget.activate(active);\n\t\tthis._activeGroup.focus();\n\t}\n\n\tisLayoutCentered(): boolean {\n\t\treturn this.centeredLayoutWidget.isActive();\n\t}\n\n\tprivate doCreateGridControl(options?: IEditorPartCreationOptions): void {\n\n\t\t// Grid Widget (with previous UI state)\n\t\tlet restoreError = false;\n\t\tif (!options || options.restorePreviousState) {\n\t\t\trestoreError = !this.doCreateGridControlWithPreviousState();\n\t\t}\n\n\t\t// Grid Widget (no previous UI state or failed to restore)\n\t\tif (!this.gridWidget || restoreError) {\n\t\t\tconst initialGroup = this.doCreateGroupView();\n\t\t\tthis.doSetGridWidget(new SerializableGrid(initialGroup));\n\n\t\t\t// Ensure a group is active\n\t\t\tthis.doSetGroupActive(initialGroup);\n\t\t}\n\n\t\t// Signal restored\n\t\tPromise.all(this.groups.map(group => group.whenRestored)).finally(() => this.whenRestoredResolve());\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\t}\n\n\tprivate doCreateGridControlWithPreviousState(): boolean {\n\t\tconst uiState = this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY] as IEditorPartUIState;\n\t\tif (uiState && uiState.serializedGrid) {\n\t\t\ttry {\n\n\t\t\t\t// MRU\n\t\t\t\tthis.mostRecentActiveGroups = uiState.mostRecentActiveGroups;\n\n\t\t\t\t// Grid Widget\n\t\t\t\tthis.doCreateGridControlWithState(uiState.serializedGrid, uiState.activeGroup);\n\n\t\t\t\t// Ensure last active group has focus\n\t\t\t\tthis._activeGroup.focus();\n\t\t\t} catch (error) {\n\n\t\t\t\t// Log error\n\t\t\t\tonUnexpectedError(new Error(`Error restoring editor grid widget: ${error} (with state: ${JSON.stringify(uiState)})`));\n\n\t\t\t\t// Clear any state we have from the failing restore\n\t\t\t\tthis.groupViews.forEach(group => group.dispose());\n\t\t\t\tthis.groupViews.clear();\n\t\t\t\tthis.mostRecentActiveGroups = [];\n\n\t\t\t\treturn false; // failure\n\t\t\t}\n\t\t}\n\n\t\treturn true; // success\n\t}\n\n\tprivate doCreateGridControlWithState(serializedGrid: ISerializedGrid, activeGroupId: GroupIdentifier, editorGroupViewsToReuse?: IEditorGroupView[]): void {\n\n\t\t// Determine group views to reuse if any\n\t\tlet reuseGroupViews: IEditorGroupView[];\n\t\tif (editorGroupViewsToReuse) {\n\t\t\treuseGroupViews = editorGroupViewsToReuse.slice(0); // do not modify original array\n\t\t} else {\n\t\t\treuseGroupViews = [];\n\t\t}\n\n\t\t// Create new\n\t\tconst groupViews: IEditorGroupView[] = [];\n\t\tconst gridWidget = SerializableGrid.deserialize(serializedGrid, {\n\t\t\tfromJSON: (serializedEditorGroup: ISerializedEditorGroup | null) => {\n\t\t\t\tlet groupView: IEditorGroupView;\n\t\t\t\tif (reuseGroupViews.length > 0) {\n\t\t\t\t\tgroupView = reuseGroupViews.shift()!;\n\t\t\t\t} else {\n\t\t\t\t\tgroupView = this.doCreateGroupView(serializedEditorGroup);\n\t\t\t\t}\n\n\t\t\t\tgroupViews.push(groupView);\n\n\t\t\t\tif (groupView.id === activeGroupId) {\n\t\t\t\t\tthis.doSetGroupActive(groupView);\n\t\t\t\t}\n\n\t\t\t\treturn groupView;\n\t\t\t}\n\t\t}, { styles: { separatorBorder: this.gridSeparatorBorder } });\n\n\t\t// If the active group was not found when restoring the grid\n\t\t// make sure to make at least one group active. We always need\n\t\t// an active group.\n\t\tif (!this._activeGroup) {\n\t\t\tthis.doSetGroupActive(groupViews[0]);\n\t\t}\n\n\t\t// Validate MRU group views matches grid widget state\n\t\tif (this.mostRecentActiveGroups.some(groupId => !this.getGroup(groupId))) {\n\t\t\tthis.mostRecentActiveGroups = groupViews.map(group => group.id);\n\t\t}\n\n\t\t// Set it\n\t\tthis.doSetGridWidget(gridWidget);\n\t}\n\n\tprivate doSetGridWidget(gridWidget: SerializableGrid<IEditorGroupView>): void {\n\t\tif (this.gridWidget) {\n\t\t\tthis.gridWidget.dispose();\n\t\t}\n\n\t\tthis.gridWidget = gridWidget;\n\t\tthis.gridWidgetView.gridWidget = gridWidget;\n\n\t\tthis._onDidSizeConstraintsChange.input = gridWidget.onDidChange;\n\n\t\tthis.onDidSetGridWidget.fire(undefined);\n\t}\n\n\tprivate updateContainer(): void {\n\t\ttoggleClass(this.container, 'empty', this.isEmpty());\n\t}\n\n\tprivate updateGroupLabels(): void {\n\n\t\t// Since our labels are created using the index of the\n\t\t// group, adding/removing a group might produce gaps.\n\t\t// So we iterate over all groups and reassign the label\n\t\t// based on the index.\n\t\tthis.getGroups(GroupsOrder.GRID_APPEARANCE).forEach((group, index) => {\n\t\t\tgroup.setLabel(this.getGroupLabel(index + 1));\n\t\t});\n\t}\n\n\tprivate getGroupLabel(index: number): string {\n\t\treturn localize('groupLabel', \"Group {0}\", index);\n\t}\n\n\tprivate isEmpty(): boolean {\n\t\treturn this.groupViews.size === 1 && this._activeGroup.isEmpty();\n\t}\n\n\tlayout(width: number, height: number): void {\n\n\t\t// Layout contents\n\t\tconst contentAreaSize = super.layoutContents(width, height).contentSize;\n\n\t\t// Layout editor container\n\t\tthis.doLayout(contentAreaSize);\n\t}\n\n\tprivate doLayout(dimension: Dimension): void {\n\t\tthis._dimension = dimension;\n\n\t\t// Layout Grid\n\t\tthis.centeredLayoutWidget.layout(this._dimension.width, this._dimension.height);\n\n\t\t// Event\n\t\tthis._onDidLayout.fire(dimension);\n\t}\n\n\tprotected saveState(): void {\n\n\t\t// Persist grid UI state\n\t\tif (this.gridWidget) {\n\t\t\tconst uiState: IEditorPartUIState = {\n\t\t\t\tserializedGrid: this.gridWidget.serialize(),\n\t\t\t\tactiveGroup: this._activeGroup.id,\n\t\t\t\tmostRecentActiveGroups: this.mostRecentActiveGroups\n\t\t\t};\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\tdelete this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n\t\t\t} else {\n\t\t\t\tthis.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY] = uiState;\n\t\t\t}\n\t\t}\n\n\t\t// Persist centered view state\n\t\tconst centeredLayoutState = this.centeredLayoutWidget.state;\n\t\tif (this.centeredLayoutWidget.isDefault(centeredLayoutState)) {\n\t\t\tdelete this.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY];\n\t\t} else {\n\t\t\tthis.globalMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY] = centeredLayoutState;\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tdispose(): void {\n\n\t\t// Forward to all groups\n\t\tthis.groupViews.forEach(group => group.dispose());\n\t\tthis.groupViews.clear();\n\n\t\t// Grid widget\n\t\tif (this.gridWidget) {\n\t\t\tthis.gridWidget.dispose();\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.EDITOR_PART\n\t\t};\n\t}\n}\n\nregisterSingleton(IEditorGroupsService, EditorPart);"]}]}