{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/debugger.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/debugger.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar ipc_cp_1 = require(\"vs/base/parts/ipc/node/ipc.cp\");\nvar strings = require(\"vs/base/common/strings\");\nvar objects = require(\"vs/base/common/objects\");\nvar types_1 = require(\"vs/base/common/types\");\nvar telemetryIpc_1 = require(\"vs/platform/telemetry/node/telemetryIpc\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar debugAdapter_1 = require(\"vs/workbench/contrib/debug/node/debugAdapter\");\nvar configurationResolver_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolver\");\nvar ConfigurationResolverUtils = require(\"vs/workbench/services/configurationResolver/common/configurationResolverUtils\");\nvar telemetryService_1 = require(\"vs/platform/telemetry/common/telemetryService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar taskDefinitionRegistry_1 = require(\"vs/workbench/contrib/tasks/common/taskDefinitionRegistry\");\nvar amd_1 = require(\"vs/base/common/amd\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar network_1 = require(\"vs/base/common/network\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar Debugger = /** @class */ (function () {\n    function Debugger(configurationManager, dbgContribution, extensionDescription, configurationService, resourcePropertiesService, commandService, configurationResolverService, telemetryService) {\n        this.configurationManager = configurationManager;\n        this.configurationService = configurationService;\n        this.resourcePropertiesService = resourcePropertiesService;\n        this.commandService = commandService;\n        this.configurationResolverService = configurationResolverService;\n        this.telemetryService = telemetryService;\n        this.mergedExtensionDescriptions = [];\n        this.debuggerContribution = { type: dbgContribution.type };\n        this.merge(dbgContribution, extensionDescription);\n    }\n    Debugger.prototype.merge = function (otherDebuggerContribution, extensionDescription) {\n        /**\n         * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n         * if existing non-structured properties on the destination should be overwritten or not. Defaults to true (overwrite).\n         */\n        function mixin(destination, source, overwrite, level) {\n            if (level === void 0) { level = 0; }\n            if (!types_1.isObject(destination)) {\n                return source;\n            }\n            if (types_1.isObject(source)) {\n                Object.keys(source).forEach(function (key) {\n                    if (types_1.isObject(destination[key]) && types_1.isObject(source[key])) {\n                        mixin(destination[key], source[key], overwrite, level + 1);\n                    }\n                    else {\n                        if (key in destination) {\n                            if (overwrite) {\n                                if (level === 0 && key === 'type') {\n                                    // don't merge the 'type' property\n                                }\n                                else {\n                                    destination[key] = source[key];\n                                }\n                            }\n                        }\n                        else {\n                            destination[key] = source[key];\n                        }\n                    }\n                });\n            }\n            return destination;\n        }\n        // only if not already merged\n        if (this.mergedExtensionDescriptions.indexOf(extensionDescription) < 0) {\n            // remember all extensions that have been merged for this debugger\n            this.mergedExtensionDescriptions.push(extensionDescription);\n            // merge new debugger contribution into existing contributions (and don't overwrite values in built-in extensions)\n            mixin(this.debuggerContribution, otherDebuggerContribution, extensionDescription.isBuiltin);\n            // remember the extension that is considered the \"main\" debugger contribution\n            if (debugUtils_1.isDebuggerMainContribution(otherDebuggerContribution)) {\n                this.mainExtensionDescription = extensionDescription;\n            }\n        }\n    };\n    Debugger.prototype.createDebugAdapter = function (session, outputService) {\n        var _this = this;\n        return this.configurationManager.activateDebuggers('onDebugAdapterProtocolTracker', this.type).then(function (_) {\n            if (_this.inExtHost()) {\n                var da = _this.configurationManager.createDebugAdapter(session);\n                if (da) {\n                    return Promise.resolve(da);\n                }\n                throw new Error(nls.localize('cannot.find.da', \"Cannot find debug adapter for type '{0}'.\", _this.type));\n            }\n            else {\n                return _this.getAdapterDescriptor(session).then(function (adapterDescriptor) {\n                    switch (adapterDescriptor.type) {\n                        case 'executable':\n                            return new debugAdapter_1.ExecutableDebugAdapter(adapterDescriptor, _this.type, outputService);\n                        case 'server':\n                            return new debugAdapter_1.SocketDebugAdapter(adapterDescriptor);\n                        case 'implementation':\n                            // TODO@AW: this.inExtHost() should now return true\n                            return Promise.resolve(_this.configurationManager.createDebugAdapter(session));\n                        default:\n                            throw new Error('unknown descriptor type');\n                    }\n                }).catch(function (err) {\n                    if (err && err.message) {\n                        throw new Error(nls.localize('cannot.create.da.with.err', \"Cannot create debug adapter ({0}).\", err.message));\n                    }\n                    else {\n                        throw new Error(nls.localize('cannot.create.da', \"Cannot create debug adapter.\"));\n                    }\n                });\n            }\n        });\n    };\n    Debugger.prototype.getAdapterDescriptor = function (session) {\n        var _this = this;\n        // a \"debugServer\" attribute in the launch config takes precedence\n        if (typeof session.configuration.debugServer === 'number') {\n            return Promise.resolve({\n                type: 'server',\n                port: session.configuration.debugServer\n            });\n        }\n        // try the new \"createDebugAdapterDescriptor\" and the deprecated \"provideDebugAdapter\" API\n        return this.configurationManager.getDebugAdapterDescriptor(session).then(function (adapter) {\n            if (adapter) {\n                return adapter;\n            }\n            // try deprecated command based extension API \"adapterExecutableCommand\" to determine the executable\n            if (_this.debuggerContribution.adapterExecutableCommand) {\n                console.info('debugAdapterExecutable attribute in package.json is deprecated and support for it will be removed soon; please use DebugAdapterDescriptorFactory.createDebugAdapterDescriptor instead.');\n                var rootFolder = session.root ? session.root.uri.toString() : undefined;\n                return _this.commandService.executeCommand(_this.debuggerContribution.adapterExecutableCommand, rootFolder).then(function (ae) {\n                    if (ae) {\n                        return {\n                            type: 'executable',\n                            command: ae.command,\n                            args: ae.args || []\n                        };\n                    }\n                    throw new Error('command adapterExecutableCommand did not return proper command.');\n                });\n            }\n            // fallback: use executable information from package.json\n            var ae = debugAdapter_1.ExecutableDebugAdapter.platformAdapterExecutable(_this.mergedExtensionDescriptions, _this.type);\n            if (ae === undefined) {\n                throw new Error('no executable specified in package.json');\n            }\n            return ae;\n        });\n    };\n    Debugger.prototype.substituteVariables = function (folder, config) {\n        var _this = this;\n        if (this.inExtHost()) {\n            return this.configurationManager.substituteVariables(this.type, folder, config).then(function (config) {\n                return _this.configurationResolverService.resolveWithInteractionReplace(folder, config, 'launch', _this.variables);\n            });\n        }\n        else {\n            return this.configurationResolverService.resolveWithInteractionReplace(folder, config, 'launch', this.variables);\n        }\n    };\n    Debugger.prototype.runInTerminal = function (args) {\n        var config = this.configurationService.getValue('terminal');\n        return this.configurationManager.runInTerminal(this.inExtHost() ? this.type : '*', args, config);\n    };\n    Debugger.prototype.inExtHost = function () {\n        return true;\n    };\n    Object.defineProperty(Debugger.prototype, \"label\", {\n        get: function () {\n            return this.debuggerContribution.label || this.debuggerContribution.type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Debugger.prototype, \"type\", {\n        get: function () {\n            return this.debuggerContribution.type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Debugger.prototype, \"variables\", {\n        get: function () {\n            return this.debuggerContribution.variables;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Debugger.prototype, \"configurationSnippets\", {\n        get: function () {\n            return this.debuggerContribution.configurationSnippets;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Debugger.prototype, \"languages\", {\n        get: function () {\n            return this.debuggerContribution.languages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Debugger.prototype.hasInitialConfiguration = function () {\n        return !!this.debuggerContribution.initialConfigurations;\n    };\n    Debugger.prototype.hasConfigurationProvider = function () {\n        return this.configurationManager.hasDebugConfigurationProvider(this.type);\n    };\n    Debugger.prototype.getInitialConfigurationContent = function (initialConfigs) {\n        // at this point we got some configs from the package.json and/or from registered DebugConfigurationProviders\n        var initialConfigurations = this.debuggerContribution.initialConfigurations || [];\n        if (initialConfigs) {\n            initialConfigurations = initialConfigurations.concat(initialConfigs);\n        }\n        var eol = this.resourcePropertiesService.getEOL(uri_1.URI.from({ scheme: network_1.Schemas.untitled, path: '1' })) === '\\r\\n' ? '\\r\\n' : '\\n';\n        var configs = JSON.stringify(initialConfigurations, null, '\\t').split('\\n').map(function (line) { return '\\t' + line; }).join(eol).trim();\n        var comment1 = nls.localize('launch.config.comment1', \"Use IntelliSense to learn about possible attributes.\");\n        var comment2 = nls.localize('launch.config.comment2', \"Hover to view descriptions of existing attributes.\");\n        var comment3 = nls.localize('launch.config.comment3', \"For more information, visit: {0}\", 'https://go.microsoft.com/fwlink/?linkid=830387');\n        var content = [\n            '{',\n            \"\\t// \" + comment1,\n            \"\\t// \" + comment2,\n            \"\\t// \" + comment3,\n            \"\\t\\\"version\\\": \\\"0.2.0\\\",\",\n            \"\\t\\\"configurations\\\": \" + configs,\n            '}'\n        ].join(eol);\n        // fix formatting\n        var editorConfig = this.configurationService.getValue();\n        if (editorConfig.editor && editorConfig.editor.insertSpaces) {\n            content = content.replace(new RegExp('\\t', 'g'), strings.repeat(' ', editorConfig.editor.tabSize));\n        }\n        return Promise.resolve(content);\n    };\n    Debugger.prototype.getMainExtensionDescriptor = function () {\n        return this.mainExtensionDescription || this.mergedExtensionDescriptions[0];\n    };\n    Debugger.prototype.getCustomTelemetryService = function () {\n        var _this = this;\n        var aiKey = this.debuggerContribution.aiKey;\n        if (!aiKey) {\n            return Promise.resolve(undefined);\n        }\n        return this.telemetryService.getTelemetryInfo().then(function (info) {\n            var telemetryInfo = Object.create(null);\n            telemetryInfo['common.vscodemachineid'] = info.machineId;\n            telemetryInfo['common.vscodesessionid'] = info.sessionId;\n            return telemetryInfo;\n        }).then(function (data) {\n            var client = new ipc_cp_1.Client(amd_1.getPathFromAmdModule(require, 'bootstrap-fork'), {\n                serverName: 'Debug Telemetry',\n                timeout: 1000 * 60 * 5,\n                args: [_this.getMainExtensionDescriptor().publisher + \".\" + _this.type, JSON.stringify(data), aiKey],\n                env: {\n                    ELECTRON_RUN_AS_NODE: 1,\n                    PIPE_LOGGING: 'true',\n                    AMD_ENTRYPOINT: 'vs/workbench/contrib/debug/node/telemetryApp'\n                }\n            });\n            var channel = client.getChannel('telemetryAppender');\n            var appender = new telemetryIpc_1.TelemetryAppenderClient(channel);\n            return new telemetryService_1.TelemetryService({ appender: appender }, _this.configurationService);\n        });\n    };\n    Debugger.prototype.getSchemaAttributes = function () {\n        var _this = this;\n        if (!this.debuggerContribution.configurationAttributes) {\n            return null;\n        }\n        // fill in the default configuration attributes shared by all adapters.\n        var taskSchema = taskDefinitionRegistry_1.TaskDefinitionRegistry.getJsonSchema();\n        return Object.keys(this.debuggerContribution.configurationAttributes).map(function (request) {\n            var attributes = _this.debuggerContribution.configurationAttributes[request];\n            var defaultRequired = ['name', 'type', 'request'];\n            attributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;\n            attributes.additionalProperties = false;\n            attributes.type = 'object';\n            if (!attributes.properties) {\n                attributes.properties = {};\n            }\n            var properties = attributes.properties;\n            properties['type'] = {\n                enum: [_this.type],\n                description: nls.localize('debugType', \"Type of configuration.\"),\n                pattern: '^(?!node2)',\n                errorMessage: nls.localize('debugTypeNotRecognised', \"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.\"),\n                patternErrorMessage: nls.localize('node2NotSupported', \"\\\"node2\\\" is no longer supported, use \\\"node\\\" instead and set the \\\"protocol\\\" attribute to \\\"inspector\\\".\")\n            };\n            properties['name'] = {\n                type: 'string',\n                description: nls.localize('debugName', \"Name of configuration; appears in the launch configuration drop down menu.\"),\n                default: 'Launch'\n            };\n            properties['request'] = {\n                enum: [request],\n                description: nls.localize('debugRequest', \"Request type of configuration. Can be \\\"launch\\\" or \\\"attach\\\".\"),\n            };\n            properties['debugServer'] = {\n                type: 'number',\n                description: nls.localize('debugServer', \"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\"),\n                default: 4711\n            };\n            properties['preLaunchTask'] = {\n                anyOf: [taskSchema, {\n                        type: ['string', 'null'],\n                    }],\n                default: '',\n                description: nls.localize('debugPrelaunchTask', \"Task to run before debug session starts.\")\n            };\n            properties['postDebugTask'] = {\n                anyOf: [taskSchema, {\n                        type: ['string', 'null'],\n                    }],\n                default: '',\n                description: nls.localize('debugPostDebugTask', \"Task to run after debug session ends.\")\n            };\n            properties['internalConsoleOptions'] = debug_1.INTERNAL_CONSOLE_OPTIONS_SCHEMA;\n            // Clear out windows, linux and osx fields to not have cycles inside the properties object\n            delete properties['windows'];\n            delete properties['osx'];\n            delete properties['linux'];\n            var osProperties = objects.deepClone(properties);\n            properties['windows'] = {\n                type: 'object',\n                description: nls.localize('debugWindowsConfiguration', \"Windows specific launch configuration attributes.\"),\n                properties: osProperties\n            };\n            properties['osx'] = {\n                type: 'object',\n                description: nls.localize('debugOSXConfiguration', \"OS X specific launch configuration attributes.\"),\n                properties: osProperties\n            };\n            properties['linux'] = {\n                type: 'object',\n                description: nls.localize('debugLinuxConfiguration', \"Linux specific launch configuration attributes.\"),\n                properties: osProperties\n            };\n            Object.keys(properties).forEach(function (name) {\n                // Use schema allOf property to get independent error reporting #21113\n                ConfigurationResolverUtils.applyDeprecatedVariableMessage(properties[name]);\n            });\n            return attributes;\n        });\n    };\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], Debugger.prototype, \"getCustomTelemetryService\", null);\n    Debugger = tslib_1.__decorate([\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourcePropertiesService),\n        tslib_1.__param(5, commands_1.ICommandService),\n        tslib_1.__param(6, configurationResolver_1.IConfigurationResolverService),\n        tslib_1.__param(7, telemetry_1.ITelemetryService)\n    ], Debugger);\n    return Debugger;\n}());\nexports.Debugger = Debugger;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/debugger.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/debugger.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Client as TelemetryClient } from 'vs/base/parts/ipc/node/ipc.cp';\nimport * as strings from 'vs/base/common/strings';\nimport * as objects from 'vs/base/common/objects';\nimport { isObject } from 'vs/base/common/types';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/node/telemetryIpc';\nimport { IJSONSchema, IJSONSchemaSnippet } from 'vs/base/common/jsonSchema';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IConfig, IDebuggerContribution, IDebugAdapterExecutable, INTERNAL_CONSOLE_OPTIONS_SCHEMA, IConfigurationManager, IDebugAdapter, ITerminalSettings, IDebugger, IDebugSession, IAdapterDescriptor, IDebugAdapterServer } from 'vs/workbench/contrib/debug/common/debug';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { ExecutableDebugAdapter, SocketDebugAdapter } from 'vs/workbench/contrib/debug/node/debugAdapter';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport * as ConfigurationResolverUtils from 'vs/workbench/services/configurationResolver/common/configurationResolverUtils';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { memoize } from 'vs/base/common/decorators';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/resourceConfiguration';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { isDebuggerMainContribution } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport class Debugger implements IDebugger {\n\n\tprivate debuggerContribution: IDebuggerContribution;\n\tprivate mergedExtensionDescriptions: IExtensionDescription[] = [];\n\tprivate mainExtensionDescription: IExtensionDescription | undefined;\n\n\tconstructor(private configurationManager: IConfigurationManager, dbgContribution: IDebuggerContribution, extensionDescription: IExtensionDescription,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly resourcePropertiesService: ITextResourcePropertiesService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationResolverService private readonly configurationResolverService: IConfigurationResolverService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.debuggerContribution = { type: dbgContribution.type };\n\t\tthis.merge(dbgContribution, extensionDescription);\n\t}\n\n\tpublic merge(otherDebuggerContribution: IDebuggerContribution, extensionDescription: IExtensionDescription): void {\n\n\t\t/**\n\t\t * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n\t\t * if existing non-structured properties on the destination should be overwritten or not. Defaults to true (overwrite).\n\t\t */\n\t\tfunction mixin(destination: any, source: any, overwrite: boolean, level = 0): any {\n\n\t\t\tif (!isObject(destination)) {\n\t\t\t\treturn source;\n\t\t\t}\n\n\t\t\tif (isObject(source)) {\n\t\t\t\tObject.keys(source).forEach(key => {\n\t\t\t\t\tif (isObject(destination[key]) && isObject(source[key])) {\n\t\t\t\t\t\tmixin(destination[key], source[key], overwrite, level + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (key in destination) {\n\t\t\t\t\t\t\tif (overwrite) {\n\t\t\t\t\t\t\t\tif (level === 0 && key === 'type') {\n\t\t\t\t\t\t\t\t\t// don't merge the 'type' property\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn destination;\n\t\t}\n\n\t\t// only if not already merged\n\t\tif (this.mergedExtensionDescriptions.indexOf(extensionDescription) < 0) {\n\n\t\t\t// remember all extensions that have been merged for this debugger\n\t\t\tthis.mergedExtensionDescriptions.push(extensionDescription);\n\n\t\t\t// merge new debugger contribution into existing contributions (and don't overwrite values in built-in extensions)\n\t\t\tmixin(this.debuggerContribution, otherDebuggerContribution, extensionDescription.isBuiltin);\n\n\t\t\t// remember the extension that is considered the \"main\" debugger contribution\n\t\t\tif (isDebuggerMainContribution(otherDebuggerContribution)) {\n\t\t\t\tthis.mainExtensionDescription = extensionDescription;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic createDebugAdapter(session: IDebugSession, outputService: IOutputService): Promise<IDebugAdapter> {\n\t\treturn this.configurationManager.activateDebuggers('onDebugAdapterProtocolTracker', this.type).then(_ => {\n\t\t\tif (this.inExtHost()) {\n\t\t\t\tconst da = this.configurationManager.createDebugAdapter(session);\n\t\t\t\tif (da) {\n\t\t\t\t\treturn Promise.resolve(da);\n\t\t\t\t}\n\t\t\t\tthrow new Error(nls.localize('cannot.find.da', \"Cannot find debug adapter for type '{0}'.\", this.type));\n\t\t\t} else {\n\t\t\t\treturn this.getAdapterDescriptor(session).then(adapterDescriptor => {\n\t\t\t\t\tswitch (adapterDescriptor.type) {\n\t\t\t\t\t\tcase 'executable':\n\t\t\t\t\t\t\treturn new ExecutableDebugAdapter(adapterDescriptor, this.type, outputService);\n\t\t\t\t\t\tcase 'server':\n\t\t\t\t\t\t\treturn new SocketDebugAdapter(adapterDescriptor);\n\t\t\t\t\t\tcase 'implementation':\n\t\t\t\t\t\t\t// TODO@AW: this.inExtHost() should now return true\n\t\t\t\t\t\t\treturn Promise.resolve(this.configurationManager.createDebugAdapter(session));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error('unknown descriptor type');\n\t\t\t\t\t}\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tif (err && err.message) {\n\t\t\t\t\t\tthrow new Error(nls.localize('cannot.create.da.with.err', \"Cannot create debug adapter ({0}).\", err.message));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(nls.localize('cannot.create.da', \"Cannot create debug adapter.\"));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getAdapterDescriptor(session: IDebugSession): Promise<IAdapterDescriptor> {\n\n\t\t// a \"debugServer\" attribute in the launch config takes precedence\n\t\tif (typeof session.configuration.debugServer === 'number') {\n\t\t\treturn Promise.resolve(<IDebugAdapterServer>{\n\t\t\t\ttype: 'server',\n\t\t\t\tport: session.configuration.debugServer\n\t\t\t});\n\t\t}\n\n\t\t// try the new \"createDebugAdapterDescriptor\" and the deprecated \"provideDebugAdapter\" API\n\t\treturn this.configurationManager.getDebugAdapterDescriptor(session).then(adapter => {\n\n\t\t\tif (adapter) {\n\t\t\t\treturn adapter;\n\t\t\t}\n\n\t\t\t// try deprecated command based extension API \"adapterExecutableCommand\" to determine the executable\n\t\t\tif (this.debuggerContribution.adapterExecutableCommand) {\n\t\t\t\tconsole.info('debugAdapterExecutable attribute in package.json is deprecated and support for it will be removed soon; please use DebugAdapterDescriptorFactory.createDebugAdapterDescriptor instead.');\n\t\t\t\tconst rootFolder = session.root ? session.root.uri.toString() : undefined;\n\t\t\t\treturn this.commandService.executeCommand<IDebugAdapterExecutable>(this.debuggerContribution.adapterExecutableCommand, rootFolder).then(ae => {\n\t\t\t\t\tif (ae) {\n\t\t\t\t\t\treturn <IAdapterDescriptor>{\n\t\t\t\t\t\t\ttype: 'executable',\n\t\t\t\t\t\t\tcommand: ae.command,\n\t\t\t\t\t\t\targs: ae.args || []\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error('command adapterExecutableCommand did not return proper command.');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// fallback: use executable information from package.json\n\t\t\tconst ae = ExecutableDebugAdapter.platformAdapterExecutable(this.mergedExtensionDescriptions, this.type);\n\t\t\tif (ae === undefined) {\n\t\t\t\tthrow new Error('no executable specified in package.json');\n\t\t\t}\n\t\t\treturn ae;\n\t\t});\n\t}\n\n\tsubstituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tif (this.inExtHost()) {\n\t\t\treturn this.configurationManager.substituteVariables(this.type, folder, config).then(config => {\n\t\t\t\treturn this.configurationResolverService.resolveWithInteractionReplace(folder, config, 'launch', this.variables);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.configurationResolverService.resolveWithInteractionReplace(folder, config, 'launch', this.variables);\n\t\t}\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments): Promise<number | undefined> {\n\t\tconst config = this.configurationService.getValue<ITerminalSettings>('terminal');\n\t\treturn this.configurationManager.runInTerminal(this.inExtHost() ? this.type : '*', args, config);\n\t}\n\n\tprivate inExtHost(): boolean {\n\t\treturn true;\n\t}\n\n\tget label(): string {\n\t\treturn this.debuggerContribution.label || this.debuggerContribution.type;\n\t}\n\n\tget type(): string {\n\t\treturn this.debuggerContribution.type;\n\t}\n\n\tget variables(): { [key: string]: string } | undefined {\n\t\treturn this.debuggerContribution.variables;\n\t}\n\n\tget configurationSnippets(): IJSONSchemaSnippet[] | undefined {\n\t\treturn this.debuggerContribution.configurationSnippets;\n\t}\n\n\tget languages(): string[] | undefined {\n\t\treturn this.debuggerContribution.languages;\n\t}\n\n\thasInitialConfiguration(): boolean {\n\t\treturn !!this.debuggerContribution.initialConfigurations;\n\t}\n\n\thasConfigurationProvider(): boolean {\n\t\treturn this.configurationManager.hasDebugConfigurationProvider(this.type);\n\t}\n\n\tgetInitialConfigurationContent(initialConfigs?: IConfig[]): Promise<string> {\n\t\t// at this point we got some configs from the package.json and/or from registered DebugConfigurationProviders\n\t\tlet initialConfigurations = this.debuggerContribution.initialConfigurations || [];\n\t\tif (initialConfigs) {\n\t\t\tinitialConfigurations = initialConfigurations.concat(initialConfigs);\n\t\t}\n\n\t\tconst eol = this.resourcePropertiesService.getEOL(URI.from({ scheme: Schemas.untitled, path: '1' })) === '\\r\\n' ? '\\r\\n' : '\\n';\n\t\tconst configs = JSON.stringify(initialConfigurations, null, '\\t').split('\\n').map(line => '\\t' + line).join(eol).trim();\n\t\tconst comment1 = nls.localize('launch.config.comment1', \"Use IntelliSense to learn about possible attributes.\");\n\t\tconst comment2 = nls.localize('launch.config.comment2', \"Hover to view descriptions of existing attributes.\");\n\t\tconst comment3 = nls.localize('launch.config.comment3', \"For more information, visit: {0}\", 'https://go.microsoft.com/fwlink/?linkid=830387');\n\n\t\tlet content = [\n\t\t\t'{',\n\t\t\t`\\t// ${comment1}`,\n\t\t\t`\\t// ${comment2}`,\n\t\t\t`\\t// ${comment3}`,\n\t\t\t`\\t\"version\": \"0.2.0\",`,\n\t\t\t`\\t\"configurations\": ${configs}`,\n\t\t\t'}'\n\t\t].join(eol);\n\n\t\t// fix formatting\n\t\tconst editorConfig = this.configurationService.getValue<any>();\n\t\tif (editorConfig.editor && editorConfig.editor.insertSpaces) {\n\t\t\tcontent = content.replace(new RegExp('\\t', 'g'), strings.repeat(' ', editorConfig.editor.tabSize));\n\t\t}\n\n\t\treturn Promise.resolve(content);\n\t}\n\n\tpublic getMainExtensionDescriptor(): IExtensionDescription {\n\t\treturn this.mainExtensionDescription || this.mergedExtensionDescriptions[0];\n\t}\n\n\t@memoize\n\tgetCustomTelemetryService(): Promise<TelemetryService | undefined> {\n\n\t\tconst aiKey = this.debuggerContribution.aiKey;\n\n\t\tif (!aiKey) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this.telemetryService.getTelemetryInfo().then(info => {\n\t\t\tconst telemetryInfo: { [key: string]: string } = Object.create(null);\n\t\t\ttelemetryInfo['common.vscodemachineid'] = info.machineId;\n\t\t\ttelemetryInfo['common.vscodesessionid'] = info.sessionId;\n\t\t\treturn telemetryInfo;\n\t\t}).then(data => {\n\t\t\tconst client = new TelemetryClient(\n\t\t\t\tgetPathFromAmdModule(require, 'bootstrap-fork'),\n\t\t\t\t{\n\t\t\t\t\tserverName: 'Debug Telemetry',\n\t\t\t\t\ttimeout: 1000 * 60 * 5,\n\t\t\t\t\targs: [`${this.getMainExtensionDescriptor().publisher}.${this.type}`, JSON.stringify(data), aiKey],\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tELECTRON_RUN_AS_NODE: 1,\n\t\t\t\t\t\tPIPE_LOGGING: 'true',\n\t\t\t\t\t\tAMD_ENTRYPOINT: 'vs/workbench/contrib/debug/node/telemetryApp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst channel = client.getChannel('telemetryAppender');\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\n\t\t\treturn new TelemetryService({ appender }, this.configurationService);\n\t\t});\n\t}\n\n\tgetSchemaAttributes(): IJSONSchema[] | null {\n\n\t\tif (!this.debuggerContribution.configurationAttributes) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// fill in the default configuration attributes shared by all adapters.\n\t\tconst taskSchema = TaskDefinitionRegistry.getJsonSchema();\n\t\treturn Object.keys(this.debuggerContribution.configurationAttributes).map(request => {\n\t\t\tconst attributes: IJSONSchema = this.debuggerContribution.configurationAttributes[request];\n\t\t\tconst defaultRequired = ['name', 'type', 'request'];\n\t\t\tattributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;\n\t\t\tattributes.additionalProperties = false;\n\t\t\tattributes.type = 'object';\n\t\t\tif (!attributes.properties) {\n\t\t\t\tattributes.properties = {};\n\t\t\t}\n\t\t\tconst properties = attributes.properties;\n\t\t\tproperties['type'] = {\n\t\t\t\tenum: [this.type],\n\t\t\t\tdescription: nls.localize('debugType', \"Type of configuration.\"),\n\t\t\t\tpattern: '^(?!node2)',\n\t\t\t\terrorMessage: nls.localize('debugTypeNotRecognised', \"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.\"),\n\t\t\t\tpatternErrorMessage: nls.localize('node2NotSupported', \"\\\"node2\\\" is no longer supported, use \\\"node\\\" instead and set the \\\"protocol\\\" attribute to \\\"inspector\\\".\")\n\t\t\t};\n\t\t\tproperties['name'] = {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('debugName', \"Name of configuration; appears in the launch configuration drop down menu.\"),\n\t\t\t\tdefault: 'Launch'\n\t\t\t};\n\t\t\tproperties['request'] = {\n\t\t\t\tenum: [request],\n\t\t\t\tdescription: nls.localize('debugRequest', \"Request type of configuration. Can be \\\"launch\\\" or \\\"attach\\\".\"),\n\t\t\t};\n\t\t\tproperties['debugServer'] = {\n\t\t\t\ttype: 'number',\n\t\t\t\tdescription: nls.localize('debugServer', \"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\"),\n\t\t\t\tdefault: 4711\n\t\t\t};\n\t\t\tproperties['preLaunchTask'] = {\n\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\ttype: ['string', 'null'],\n\t\t\t\t}],\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: nls.localize('debugPrelaunchTask', \"Task to run before debug session starts.\")\n\t\t\t};\n\t\t\tproperties['postDebugTask'] = {\n\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\ttype: ['string', 'null'],\n\t\t\t\t}],\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: nls.localize('debugPostDebugTask', \"Task to run after debug session ends.\")\n\t\t\t};\n\t\t\tproperties['internalConsoleOptions'] = INTERNAL_CONSOLE_OPTIONS_SCHEMA;\n\t\t\t// Clear out windows, linux and osx fields to not have cycles inside the properties object\n\t\t\tdelete properties['windows'];\n\t\t\tdelete properties['osx'];\n\t\t\tdelete properties['linux'];\n\n\t\t\tconst osProperties = objects.deepClone(properties);\n\t\t\tproperties['windows'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugWindowsConfiguration', \"Windows specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tproperties['osx'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugOSXConfiguration', \"OS X specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tproperties['linux'] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('debugLinuxConfiguration', \"Linux specific launch configuration attributes.\"),\n\t\t\t\tproperties: osProperties\n\t\t\t};\n\t\t\tObject.keys(properties).forEach(name => {\n\t\t\t\t// Use schema allOf property to get independent error reporting #21113\n\t\t\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(properties[name]);\n\t\t\t});\n\t\t\treturn attributes;\n\t\t});\n\t}\n}\n"]}]}