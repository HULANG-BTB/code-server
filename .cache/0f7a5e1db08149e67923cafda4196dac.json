{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/selection\"], function (require, exports, selection_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ReplaceCommand {\n        constructor(range, text, insertsAutoWhitespace = false) {\n            this._range = range;\n            this._text = text;\n            this.insertsAutoWhitespace = insertsAutoWhitespace;\n        }\n        getEditOperations(model, builder) {\n            builder.addTrackedEditOperation(this._range, this._text);\n        }\n        computeCursorState(model, helper) {\n            let inverseEditOperations = helper.getInverseEditOperations();\n            let srcRange = inverseEditOperations[0].range;\n            return new selection_1.Selection(srcRange.endLineNumber, srcRange.endColumn, srcRange.endLineNumber, srcRange.endColumn);\n        }\n    }\n    exports.ReplaceCommand = ReplaceCommand;\n    class ReplaceCommandWithoutChangingPosition {\n        constructor(range, text, insertsAutoWhitespace = false) {\n            this._range = range;\n            this._text = text;\n            this.insertsAutoWhitespace = insertsAutoWhitespace;\n        }\n        getEditOperations(model, builder) {\n            builder.addTrackedEditOperation(this._range, this._text);\n        }\n        computeCursorState(model, helper) {\n            let inverseEditOperations = helper.getInverseEditOperations();\n            let srcRange = inverseEditOperations[0].range;\n            return new selection_1.Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.startLineNumber, srcRange.startColumn);\n        }\n    }\n    exports.ReplaceCommandWithoutChangingPosition = ReplaceCommandWithoutChangingPosition;\n    class ReplaceCommandWithOffsetCursorState {\n        constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n            this._range = range;\n            this._text = text;\n            this._columnDeltaOffset = columnDeltaOffset;\n            this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n            this.insertsAutoWhitespace = insertsAutoWhitespace;\n        }\n        getEditOperations(model, builder) {\n            builder.addTrackedEditOperation(this._range, this._text);\n        }\n        computeCursorState(model, helper) {\n            let inverseEditOperations = helper.getInverseEditOperations();\n            let srcRange = inverseEditOperations[0].range;\n            return new selection_1.Selection(srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset, srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset);\n        }\n    }\n    exports.ReplaceCommandWithOffsetCursorState = ReplaceCommandWithOffsetCursorState;\n    class ReplaceCommandThatPreservesSelection {\n        constructor(editRange, text, initialSelection) {\n            this._range = editRange;\n            this._text = text;\n            this._initialSelection = initialSelection;\n        }\n        getEditOperations(model, builder) {\n            builder.addEditOperation(this._range, this._text);\n            this._selectionId = builder.trackSelection(this._initialSelection);\n        }\n        computeCursorState(model, helper) {\n            return helper.getTrackedSelection(this._selectionId);\n        }\n    }\n    exports.ReplaceCommandThatPreservesSelection = ReplaceCommandThatPreservesSelection;\n});\n",null]}