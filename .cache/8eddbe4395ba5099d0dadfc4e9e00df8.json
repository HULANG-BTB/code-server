{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/browser/fileDialogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/browser/fileDialogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar network_1 = require(\"vs/base/common/network\");\nvar resources = require(\"vs/base/common/resources\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar remoteFileDialog_1 = require(\"vs/workbench/services/dialogs/browser/remoteFileDialog\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar remoteHosts_1 = require(\"vs/platform/remote/common/remoteHosts\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar FileDialogService = /** @class */ (function () {\n    function FileDialogService(windowService, contextService, historyService, environmentService, instantiationService, configurationService) {\n        this.windowService = windowService;\n        this.contextService = contextService;\n        this.historyService = historyService;\n        this.environmentService = environmentService;\n        this.instantiationService = instantiationService;\n        this.configurationService = configurationService;\n    }\n    FileDialogService.prototype.defaultFilePath = function (schemeFilter) {\n        if (schemeFilter === void 0) { schemeFilter = this.getSchemeFilterForWindow(); }\n        // Check for last active file first...\n        var candidate = this.historyService.getLastActiveFile(schemeFilter);\n        // ...then for last active file root\n        if (!candidate) {\n            candidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter);\n        }\n        else {\n            candidate = candidate && resources.dirname(candidate);\n        }\n        return candidate || undefined;\n    };\n    FileDialogService.prototype.defaultFolderPath = function (schemeFilter) {\n        if (schemeFilter === void 0) { schemeFilter = this.getSchemeFilterForWindow(); }\n        // Check for last active file root first...\n        var candidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter);\n        // ...then for last active file\n        if (!candidate) {\n            candidate = this.historyService.getLastActiveFile(schemeFilter);\n        }\n        return candidate && resources.dirname(candidate) || undefined;\n    };\n    FileDialogService.prototype.defaultWorkspacePath = function (schemeFilter) {\n        if (schemeFilter === void 0) { schemeFilter = this.getSchemeFilterForWindow(); }\n        // Check for current workspace config file first...\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            var configuration = this.contextService.getWorkspace().configuration;\n            if (configuration && !isUntitledWorkspace(configuration, this.environmentService)) {\n                return resources.dirname(configuration) || undefined;\n            }\n        }\n        // ...then fallback to default folder path\n        return this.defaultFolderPath(schemeFilter);\n    };\n    FileDialogService.prototype.toNativeOpenDialogOptions = function (options) {\n        return {\n            forceNewWindow: options.forceNewWindow,\n            telemetryExtraData: options.telemetryExtraData,\n            dialogOptions: {\n                defaultPath: options.defaultUri && options.defaultUri.fsPath\n            }\n        };\n    };\n    FileDialogService.prototype.shouldUseSimplified = function (schema) {\n        var setting = this.configurationService.getValue('workbench.dialogs.useSimplified');\n        return (schema !== network_1.Schemas.file) || ((setting === 'true') || (setting === true));\n    };\n    FileDialogService.prototype.ensureFileSchema = function (schema) {\n        return schema !== network_1.Schemas.file ? [schema, network_1.Schemas.file] : [schema];\n    };\n    FileDialogService.prototype.pickFileFolderAndOpen = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (!options.defaultUri) {\n            options.defaultUri = this.defaultFilePath(schema);\n        }\n        if (this.shouldUseSimplified(schema)) {\n            var title = nls.localize('openFileOrFolder.title', 'Open File Or Folder');\n            var availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n            return this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title: title, availableFileSystems: availableFileSystems }, !!options.forceNewWindow, true);\n        }\n        return this.windowService.pickFileFolderAndOpen(this.toNativeOpenDialogOptions(options));\n    };\n    FileDialogService.prototype.pickFileAndOpen = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (!options.defaultUri) {\n            options.defaultUri = this.defaultFilePath(schema);\n        }\n        if (this.shouldUseSimplified(schema)) {\n            var title = nls.localize('openFile.title', 'Open File');\n            var availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n            return this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title: title, availableFileSystems: availableFileSystems }, !!options.forceNewWindow, true);\n        }\n        return this.windowService.pickFileAndOpen(this.toNativeOpenDialogOptions(options));\n    };\n    FileDialogService.prototype.pickFolderAndOpen = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (!options.defaultUri) {\n            options.defaultUri = this.defaultFolderPath(schema);\n        }\n        if (this.shouldUseSimplified(schema)) {\n            var title = nls.localize('openFolder.title', 'Open Folder');\n            var availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n            return this.pickRemoteResourceAndOpen({ canSelectFiles: false, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title: title, availableFileSystems: availableFileSystems }, !!options.forceNewWindow, false);\n        }\n        return this.windowService.pickFolderAndOpen(this.toNativeOpenDialogOptions(options));\n    };\n    FileDialogService.prototype.pickWorkspaceAndOpen = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (!options.defaultUri) {\n            options.defaultUri = this.defaultWorkspacePath(schema);\n        }\n        if (this.shouldUseSimplified(schema)) {\n            var title = nls.localize('openWorkspace.title', 'Open Workspace');\n            var filters = [{ name: nls.localize('filterName.workspace', 'Workspace'), extensions: [workspaces_1.WORKSPACE_EXTENSION] }];\n            var availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n            return this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title: title, filters: filters, availableFileSystems: availableFileSystems }, !!options.forceNewWindow, false);\n        }\n        return this.windowService.pickWorkspaceAndOpen(this.toNativeOpenDialogOptions(options));\n    };\n    FileDialogService.prototype.toNativeSaveDialogOptions = function (options) {\n        return {\n            defaultPath: options.defaultUri && options.defaultUri.fsPath,\n            buttonLabel: options.saveLabel,\n            filters: options.filters,\n            title: options.title\n        };\n    };\n    FileDialogService.prototype.showSaveDialog = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (this.shouldUseSimplified(schema)) {\n            if (!options.availableFileSystems) {\n                options.availableFileSystems = [schema]; // by default only allow saving in the own file system\n            }\n            return this.saveRemoteResource(options);\n        }\n        return this.windowService.showSaveDialog(this.toNativeSaveDialogOptions(options)).then(function (result) {\n            if (result) {\n                return uri_1.URI.file(result);\n            }\n            return undefined;\n        });\n    };\n    FileDialogService.prototype.showOpenDialog = function (options) {\n        var schema = this.getFileSystemSchema(options);\n        if (schema !== network_1.Schemas.file) {\n            if (!options.availableFileSystems) {\n                options.availableFileSystems = [schema]; // by default only allow loading in the own file system\n            }\n            return this.pickRemoteResource(options).then(function (urisToOpen) {\n                return urisToOpen && urisToOpen.map(function (uto) { return uto.uri; });\n            });\n        }\n        var defaultUri = options.defaultUri;\n        var newOptions = {\n            title: options.title,\n            defaultPath: defaultUri && defaultUri.fsPath,\n            buttonLabel: options.openLabel,\n            filters: options.filters,\n            properties: []\n        };\n        newOptions.properties.push('createDirectory');\n        if (options.canSelectFiles) {\n            newOptions.properties.push('openFile');\n        }\n        if (options.canSelectFolders) {\n            newOptions.properties.push('openDirectory');\n        }\n        if (options.canSelectMany) {\n            newOptions.properties.push('multiSelections');\n        }\n        return this.windowService.showOpenDialog(newOptions).then(function (result) { return result ? result.map(uri_1.URI.file) : undefined; });\n    };\n    FileDialogService.prototype.pickRemoteResourceAndOpen = function (options, forceNewWindow, forceOpenWorkspaceAsFile) {\n        var _this = this;\n        return this.pickRemoteResource(options).then(function (urisToOpen) {\n            if (urisToOpen) {\n                return _this.windowService.openWindow(urisToOpen, { forceNewWindow: forceNewWindow, forceOpenWorkspaceAsFile: forceOpenWorkspaceAsFile });\n            }\n            return undefined;\n        });\n    };\n    FileDialogService.prototype.pickRemoteResource = function (options) {\n        var remoteFileDialog = this.instantiationService.createInstance(remoteFileDialog_1.RemoteFileDialog);\n        return remoteFileDialog.showOpenDialog(options);\n    };\n    FileDialogService.prototype.saveRemoteResource = function (options) {\n        var remoteFileDialog = this.instantiationService.createInstance(remoteFileDialog_1.RemoteFileDialog);\n        return remoteFileDialog.showSaveDialog(options);\n    };\n    FileDialogService.prototype.getSchemeFilterForWindow = function () {\n        return !this.windowService.getConfiguration().remoteAuthority ? network_1.Schemas.file : remoteHosts_1.REMOTE_HOST_SCHEME;\n    };\n    FileDialogService.prototype.getFileSystemSchema = function (options) {\n        return options.availableFileSystems && options.availableFileSystems[0] || options.defaultUri && options.defaultUri.scheme || this.getSchemeFilterForWindow();\n    };\n    FileDialogService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, history_1.IHistoryService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, configuration_1.IConfigurationService)\n    ], FileDialogService);\n    return FileDialogService;\n}());\nexports.FileDialogService = FileDialogService;\nfunction isUntitledWorkspace(path, environmentService) {\n    return resources.isEqualOrParent(path, environmentService.untitledWorkspacesHome);\n}\nextensions_1.registerSingleton(dialogs_1.IFileDialogService, FileDialogService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/browser/fileDialogService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/browser/fileDialogService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWindowService, INativeOpenDialogOptions, OpenDialogOptions, IURIToOpen, FileFilter } from 'vs/platform/windows/common/windows';\nimport { IPickAndOpenOptions, ISaveDialogOptions, IOpenDialogOptions, IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport * as resources from 'vs/base/common/resources';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { RemoteFileDialog } from 'vs/workbench/services/dialogs/browser/remoteFileDialog';\nimport { WORKSPACE_EXTENSION } from 'vs/platform/workspaces/common/workspaces';\nimport { REMOTE_HOST_SCHEME } from 'vs/platform/remote/common/remoteHosts';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class FileDialogService implements IFileDialogService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IHistoryService private readonly historyService: IHistoryService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) { }\n\n\tdefaultFilePath(schemeFilter = this.getSchemeFilterForWindow()): URI | undefined {\n\n\t\t// Check for last active file first...\n\t\tlet candidate = this.historyService.getLastActiveFile(schemeFilter);\n\n\t\t// ...then for last active file root\n\t\tif (!candidate) {\n\t\t\tcandidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter);\n\t\t} else {\n\t\t\tcandidate = candidate && resources.dirname(candidate);\n\t\t}\n\n\t\treturn candidate || undefined;\n\t}\n\n\tdefaultFolderPath(schemeFilter = this.getSchemeFilterForWindow()): URI | undefined {\n\n\t\t// Check for last active file root first...\n\t\tlet candidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter);\n\n\t\t// ...then for last active file\n\t\tif (!candidate) {\n\t\t\tcandidate = this.historyService.getLastActiveFile(schemeFilter);\n\t\t}\n\n\t\treturn candidate && resources.dirname(candidate) || undefined;\n\t}\n\n\tdefaultWorkspacePath(schemeFilter = this.getSchemeFilterForWindow()): URI | undefined {\n\n\t\t// Check for current workspace config file first...\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst configuration = this.contextService.getWorkspace().configuration;\n\t\t\tif (configuration && !isUntitledWorkspace(configuration, this.environmentService)) {\n\t\t\t\treturn resources.dirname(configuration) || undefined;\n\t\t\t}\n\t\t}\n\n\t\t// ...then fallback to default folder path\n\t\treturn this.defaultFolderPath(schemeFilter);\n\t}\n\n\tprivate toNativeOpenDialogOptions(options: IPickAndOpenOptions): INativeOpenDialogOptions {\n\t\treturn {\n\t\t\tforceNewWindow: options.forceNewWindow,\n\t\t\ttelemetryExtraData: options.telemetryExtraData,\n\t\t\tdialogOptions: {\n\t\t\t\tdefaultPath: options.defaultUri && options.defaultUri.fsPath\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate shouldUseSimplified(schema: string): boolean {\n\t\tconst setting = this.configurationService.getValue('workbench.dialogs.useSimplified');\n\t\treturn (schema !== Schemas.file) || ((setting === 'true') || (setting === true));\n\t}\n\n\tprivate ensureFileSchema(schema: string): string[] {\n\t\treturn schema !== Schemas.file ? [schema, Schemas.file] : [schema];\n\t}\n\n\tpickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<any> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\n\t\tif (!options.defaultUri) {\n\t\t\toptions.defaultUri = this.defaultFilePath(schema);\n\t\t}\n\n\t\tif (this.shouldUseSimplified(schema)) {\n\t\t\tconst title = nls.localize('openFileOrFolder.title', 'Open File Or Folder');\n\t\t\tconst availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n\t\t\treturn this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems }, !!options.forceNewWindow, true);\n\t\t}\n\n\t\treturn this.windowService.pickFileFolderAndOpen(this.toNativeOpenDialogOptions(options));\n\t}\n\n\tpickFileAndOpen(options: IPickAndOpenOptions): Promise<any> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\n\t\tif (!options.defaultUri) {\n\t\t\toptions.defaultUri = this.defaultFilePath(schema);\n\t\t}\n\n\t\tif (this.shouldUseSimplified(schema)) {\n\t\t\tconst title = nls.localize('openFile.title', 'Open File');\n\t\t\tconst availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n\t\t\treturn this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems }, !!options.forceNewWindow, true);\n\t\t}\n\n\t\treturn this.windowService.pickFileAndOpen(this.toNativeOpenDialogOptions(options));\n\t}\n\n\tpickFolderAndOpen(options: IPickAndOpenOptions): Promise<any> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\n\t\tif (!options.defaultUri) {\n\t\t\toptions.defaultUri = this.defaultFolderPath(schema);\n\t\t}\n\n\t\tif (this.shouldUseSimplified(schema)) {\n\t\t\tconst title = nls.localize('openFolder.title', 'Open Folder');\n\t\t\tconst availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n\t\t\treturn this.pickRemoteResourceAndOpen({ canSelectFiles: false, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems }, !!options.forceNewWindow, false);\n\t\t}\n\n\t\treturn this.windowService.pickFolderAndOpen(this.toNativeOpenDialogOptions(options));\n\t}\n\n\tpickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\n\t\tif (!options.defaultUri) {\n\t\t\toptions.defaultUri = this.defaultWorkspacePath(schema);\n\t\t}\n\n\t\tif (this.shouldUseSimplified(schema)) {\n\t\t\tconst title = nls.localize('openWorkspace.title', 'Open Workspace');\n\t\t\tconst filters: FileFilter[] = [{ name: nls.localize('filterName.workspace', 'Workspace'), extensions: [WORKSPACE_EXTENSION] }];\n\t\t\tconst availableFileSystems = this.ensureFileSchema(schema); // always allow file as well\n\t\t\treturn this.pickRemoteResourceAndOpen({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title, filters, availableFileSystems }, !!options.forceNewWindow, false);\n\t\t}\n\n\t\treturn this.windowService.pickWorkspaceAndOpen(this.toNativeOpenDialogOptions(options));\n\t}\n\n\tprivate toNativeSaveDialogOptions(options: ISaveDialogOptions): Electron.SaveDialogOptions {\n\t\treturn {\n\t\t\tdefaultPath: options.defaultUri && options.defaultUri.fsPath,\n\t\t\tbuttonLabel: options.saveLabel,\n\t\t\tfilters: options.filters,\n\t\t\ttitle: options.title\n\t\t};\n\t}\n\n\tshowSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\t\tif (this.shouldUseSimplified(schema)) {\n\t\t\tif (!options.availableFileSystems) {\n\t\t\t\toptions.availableFileSystems = [schema]; // by default only allow saving in the own file system\n\t\t\t}\n\t\t\treturn this.saveRemoteResource(options);\n\t\t}\n\n\t\treturn this.windowService.showSaveDialog(this.toNativeSaveDialogOptions(options)).then(result => {\n\t\t\tif (result) {\n\t\t\t\treturn URI.file(result);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tshowOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined> {\n\t\tconst schema = this.getFileSystemSchema(options);\n\t\tif (schema !== Schemas.file) {\n\t\t\tif (!options.availableFileSystems) {\n\t\t\t\toptions.availableFileSystems = [schema]; // by default only allow loading in the own file system\n\t\t\t}\n\t\t\treturn this.pickRemoteResource(options).then(urisToOpen => {\n\t\t\t\treturn urisToOpen && urisToOpen.map(uto => uto.uri);\n\t\t\t});\n\t\t}\n\n\t\tconst defaultUri = options.defaultUri;\n\n\t\tconst newOptions: OpenDialogOptions = {\n\t\t\ttitle: options.title,\n\t\t\tdefaultPath: defaultUri && defaultUri.fsPath,\n\t\t\tbuttonLabel: options.openLabel,\n\t\t\tfilters: options.filters,\n\t\t\tproperties: []\n\t\t};\n\n\t\tnewOptions.properties!.push('createDirectory');\n\n\t\tif (options.canSelectFiles) {\n\t\t\tnewOptions.properties!.push('openFile');\n\t\t}\n\n\t\tif (options.canSelectFolders) {\n\t\t\tnewOptions.properties!.push('openDirectory');\n\t\t}\n\n\t\tif (options.canSelectMany) {\n\t\t\tnewOptions.properties!.push('multiSelections');\n\t\t}\n\n\t\treturn this.windowService.showOpenDialog(newOptions).then(result => result ? result.map(URI.file) : undefined);\n\t}\n\n\tprivate pickRemoteResourceAndOpen(options: IOpenDialogOptions, forceNewWindow: boolean, forceOpenWorkspaceAsFile: boolean) {\n\t\treturn this.pickRemoteResource(options).then(urisToOpen => {\n\t\t\tif (urisToOpen) {\n\t\t\t\treturn this.windowService.openWindow(urisToOpen, { forceNewWindow, forceOpenWorkspaceAsFile });\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate pickRemoteResource(options: IOpenDialogOptions): Promise<IURIToOpen[] | undefined> {\n\t\tconst remoteFileDialog = this.instantiationService.createInstance(RemoteFileDialog);\n\t\treturn remoteFileDialog.showOpenDialog(options);\n\t}\n\n\tprivate saveRemoteResource(options: ISaveDialogOptions): Promise<URI | undefined> {\n\t\tconst remoteFileDialog = this.instantiationService.createInstance(RemoteFileDialog);\n\t\treturn remoteFileDialog.showSaveDialog(options);\n\t}\n\n\tprivate getSchemeFilterForWindow() {\n\t\treturn !this.windowService.getConfiguration().remoteAuthority ? Schemas.file : REMOTE_HOST_SCHEME;\n\t}\n\n\tprivate getFileSystemSchema(options: { availableFileSystems?: string[], defaultUri?: URI }): string {\n\t\treturn options.availableFileSystems && options.availableFileSystems[0] || options.defaultUri && options.defaultUri.scheme || this.getSchemeFilterForWindow();\n\t}\n\n}\n\nfunction isUntitledWorkspace(path: URI, environmentService: IEnvironmentService): boolean {\n\treturn resources.isEqualOrParent(path, environmentService.untitledWorkspacesHome);\n}\n\nregisterSingleton(IFileDialogService, FileDialogService, true);"]}]}