{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar Types = require(\"vs/base/common/types\");\nvar Objects = require(\"vs/base/common/objects\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar taskDefinitionRegistry_1 = require(\"vs/workbench/contrib/tasks/common/taskDefinitionRegistry\");\nexports.TASK_RUNNING_STATE = new contextkey_1.RawContextKey('taskRunning', false);\nvar ShellQuoting;\n(function (ShellQuoting) {\n    /**\n     * Use character escaping.\n     */\n    ShellQuoting[ShellQuoting[\"Escape\"] = 1] = \"Escape\";\n    /**\n     * Use strong quoting\n     */\n    ShellQuoting[ShellQuoting[\"Strong\"] = 2] = \"Strong\";\n    /**\n     * Use weak quoting.\n     */\n    ShellQuoting[ShellQuoting[\"Weak\"] = 3] = \"Weak\";\n})(ShellQuoting = exports.ShellQuoting || (exports.ShellQuoting = {}));\nexports.CUSTOMIZED_TASK_TYPE = '$customized';\n(function (ShellQuoting) {\n    function from(value) {\n        if (!value) {\n            return ShellQuoting.Strong;\n        }\n        switch (value.toLowerCase()) {\n            case 'escape':\n                return ShellQuoting.Escape;\n            case 'strong':\n                return ShellQuoting.Strong;\n            case 'weak':\n                return ShellQuoting.Weak;\n            default:\n                return ShellQuoting.Strong;\n        }\n    }\n    ShellQuoting.from = from;\n})(ShellQuoting = exports.ShellQuoting || (exports.ShellQuoting = {}));\nvar CommandOptions;\n(function (CommandOptions) {\n    CommandOptions.defaults = { cwd: '${workspaceFolder}' };\n})(CommandOptions = exports.CommandOptions || (exports.CommandOptions = {}));\nvar RevealKind;\n(function (RevealKind) {\n    /**\n     * Always brings the terminal to front if the task is executed.\n     */\n    RevealKind[RevealKind[\"Always\"] = 1] = \"Always\";\n    /**\n     * Only brings the terminal to front if a problem is detected executing the task\n     * (e.g. the task couldn't be started because).\n     */\n    RevealKind[RevealKind[\"Silent\"] = 2] = \"Silent\";\n    /**\n     * The terminal never comes to front when the task is executed.\n     */\n    RevealKind[RevealKind[\"Never\"] = 3] = \"Never\";\n})(RevealKind = exports.RevealKind || (exports.RevealKind = {}));\n(function (RevealKind) {\n    function fromString(value) {\n        switch (value.toLowerCase()) {\n            case 'always':\n                return RevealKind.Always;\n            case 'silent':\n                return RevealKind.Silent;\n            case 'never':\n                return RevealKind.Never;\n            default:\n                return RevealKind.Always;\n        }\n    }\n    RevealKind.fromString = fromString;\n})(RevealKind = exports.RevealKind || (exports.RevealKind = {}));\nvar PanelKind;\n(function (PanelKind) {\n    /**\n     * Shares a panel with other tasks. This is the default.\n     */\n    PanelKind[PanelKind[\"Shared\"] = 1] = \"Shared\";\n    /**\n     * Uses a dedicated panel for this tasks. The panel is not\n     * shared with other tasks.\n     */\n    PanelKind[PanelKind[\"Dedicated\"] = 2] = \"Dedicated\";\n    /**\n     * Creates a new panel whenever this task is executed.\n     */\n    PanelKind[PanelKind[\"New\"] = 3] = \"New\";\n})(PanelKind = exports.PanelKind || (exports.PanelKind = {}));\n(function (PanelKind) {\n    function fromString(value) {\n        switch (value.toLowerCase()) {\n            case 'shared':\n                return PanelKind.Shared;\n            case 'dedicated':\n                return PanelKind.Dedicated;\n            case 'new':\n                return PanelKind.New;\n            default:\n                return PanelKind.Shared;\n        }\n    }\n    PanelKind.fromString = fromString;\n})(PanelKind = exports.PanelKind || (exports.PanelKind = {}));\nvar PresentationOptions;\n(function (PresentationOptions) {\n    PresentationOptions.defaults = {\n        echo: true, reveal: RevealKind.Always, focus: false, panel: PanelKind.Shared, showReuseMessage: true, clear: false\n    };\n})(PresentationOptions = exports.PresentationOptions || (exports.PresentationOptions = {}));\nvar RuntimeType;\n(function (RuntimeType) {\n    RuntimeType[RuntimeType[\"Shell\"] = 1] = \"Shell\";\n    RuntimeType[RuntimeType[\"Process\"] = 2] = \"Process\";\n    RuntimeType[RuntimeType[\"CustomExecution\"] = 3] = \"CustomExecution\";\n})(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));\n(function (RuntimeType) {\n    function fromString(value) {\n        switch (value.toLowerCase()) {\n            case 'shell':\n                return RuntimeType.Shell;\n            case 'process':\n                return RuntimeType.Process;\n            case 'customExecution':\n                return RuntimeType.CustomExecution;\n            default:\n                return RuntimeType.Process;\n        }\n    }\n    RuntimeType.fromString = fromString;\n})(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));\nvar CommandString;\n(function (CommandString) {\n    function value(value) {\n        if (Types.isString(value)) {\n            return value;\n        }\n        else {\n            return value.value;\n        }\n    }\n    CommandString.value = value;\n})(CommandString = exports.CommandString || (exports.CommandString = {}));\nvar TaskGroup;\n(function (TaskGroup) {\n    TaskGroup.Clean = 'clean';\n    TaskGroup.Build = 'build';\n    TaskGroup.Rebuild = 'rebuild';\n    TaskGroup.Test = 'test';\n    function is(value) {\n        return value === TaskGroup.Clean || value === TaskGroup.Build || value === TaskGroup.Rebuild || value === TaskGroup.Test;\n    }\n    TaskGroup.is = is;\n})(TaskGroup = exports.TaskGroup || (exports.TaskGroup = {}));\nvar TaskScope;\n(function (TaskScope) {\n    TaskScope[TaskScope[\"Global\"] = 1] = \"Global\";\n    TaskScope[TaskScope[\"Workspace\"] = 2] = \"Workspace\";\n    TaskScope[TaskScope[\"Folder\"] = 3] = \"Folder\";\n})(TaskScope = exports.TaskScope || (exports.TaskScope = {}));\nvar TaskSourceKind;\n(function (TaskSourceKind) {\n    TaskSourceKind.Workspace = 'workspace';\n    TaskSourceKind.Extension = 'extension';\n    TaskSourceKind.InMemory = 'inMemory';\n})(TaskSourceKind = exports.TaskSourceKind || (exports.TaskSourceKind = {}));\nvar GroupType;\n(function (GroupType) {\n    GroupType[\"default\"] = \"default\";\n    GroupType[\"user\"] = \"user\";\n})(GroupType = exports.GroupType || (exports.GroupType = {}));\nvar RunOnOptions;\n(function (RunOnOptions) {\n    RunOnOptions[RunOnOptions[\"default\"] = 1] = \"default\";\n    RunOnOptions[RunOnOptions[\"folderOpen\"] = 2] = \"folderOpen\";\n})(RunOnOptions = exports.RunOnOptions || (exports.RunOnOptions = {}));\nvar RunOptions;\n(function (RunOptions) {\n    RunOptions.defaults = { reevaluateOnRerun: true, runOn: RunOnOptions.default };\n})(RunOptions = exports.RunOptions || (exports.RunOptions = {}));\nvar CommonTask = /** @class */ (function () {\n    function CommonTask(id, label, type, runOptions, configurationProperties, source) {\n        this._id = id;\n        if (label) {\n            this._label = label;\n        }\n        if (type) {\n            this.type = type;\n        }\n        this.runOptions = runOptions;\n        this.configurationProperties = configurationProperties;\n        this._source = source;\n    }\n    CommonTask.prototype.getDefinition = function (useSource) {\n        return undefined;\n    };\n    CommonTask.prototype.getMapKey = function () {\n        return this._id;\n    };\n    CommonTask.prototype.getRecentlyUsedKey = function () {\n        return undefined;\n    };\n    CommonTask.prototype.clone = function () {\n        return this.fromObject(Objects.assign({}, this));\n    };\n    CommonTask.prototype.getWorkspaceFolder = function () {\n        return undefined;\n    };\n    CommonTask.prototype.getTelemetryKind = function () {\n        return 'unknown';\n    };\n    CommonTask.prototype.matches = function (key, compareId) {\n        if (compareId === void 0) { compareId = false; }\n        if (key === undefined) {\n            return false;\n        }\n        if (Types.isString(key)) {\n            return key === this._label || key === this.configurationProperties.identifier || (compareId && key === this._id);\n        }\n        var identifier = this.getDefinition(true);\n        return identifier !== undefined && identifier._key === key._key;\n    };\n    CommonTask.prototype.getQualifiedLabel = function () {\n        var workspaceFolder = this.getWorkspaceFolder();\n        if (workspaceFolder) {\n            return this._label + \" (\" + workspaceFolder.name + \")\";\n        }\n        else {\n            return this._label;\n        }\n    };\n    CommonTask.prototype.getTaskExecution = function () {\n        var result = {\n            id: this._id,\n            task: this\n        };\n        return result;\n    };\n    CommonTask.prototype.addTaskLoadMessages = function (messages) {\n        if (this._taskLoadMessages === undefined) {\n            this._taskLoadMessages = [];\n        }\n        if (messages) {\n            this._taskLoadMessages = this._taskLoadMessages.concat(messages);\n        }\n    };\n    Object.defineProperty(CommonTask.prototype, \"taskLoadMessages\", {\n        get: function () {\n            return this._taskLoadMessages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CommonTask;\n}());\nexports.CommonTask = CommonTask;\nvar CustomTask = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomTask, _super);\n    function CustomTask(id, source, label, type, command, hasDefinedMatchers, runOptions, configurationProperties) {\n        var _this = _super.call(this, id, label, undefined, runOptions, configurationProperties, source) || this;\n        _this._source = source;\n        _this.hasDefinedMatchers = hasDefinedMatchers;\n        if (command) {\n            _this.command = command;\n        }\n        return _this;\n    }\n    CustomTask.prototype.customizes = function () {\n        if (this._source && this._source.customizes) {\n            return this._source.customizes;\n        }\n        return undefined;\n    };\n    CustomTask.prototype.getDefinition = function (useSource) {\n        if (useSource === void 0) { useSource = false; }\n        if (useSource && this._source.customizes !== undefined) {\n            return this._source.customizes;\n        }\n        else {\n            var type = void 0;\n            var commandRuntime = this.command ? this.command.runtime : undefined;\n            switch (commandRuntime) {\n                case RuntimeType.Shell:\n                    type = 'shell';\n                    break;\n                case RuntimeType.Process:\n                    type = 'process';\n                    break;\n                case RuntimeType.CustomExecution:\n                    type = 'customExecution';\n                    break;\n                case undefined:\n                    type = '$composite';\n                    break;\n                default:\n                    throw new Error('Unexpected task runtime');\n            }\n            var result = {\n                type: type,\n                _key: this._id,\n                id: this._id\n            };\n            return result;\n        }\n    };\n    CustomTask.is = function (value) {\n        return value instanceof CustomTask;\n    };\n    CustomTask.prototype.getMapKey = function () {\n        var workspaceFolder = this._source.config.workspaceFolder;\n        return workspaceFolder ? workspaceFolder.uri.toString() + \"|\" + this._id : this._id;\n    };\n    CustomTask.prototype.getRecentlyUsedKey = function () {\n        var workspaceFolder = this._source.config.workspaceFolder;\n        if (!workspaceFolder) {\n            return undefined;\n        }\n        var key = { type: exports.CUSTOMIZED_TASK_TYPE, folder: workspaceFolder.uri.toString(), id: this.configurationProperties.identifier };\n        return JSON.stringify(key);\n    };\n    CustomTask.prototype.getWorkspaceFolder = function () {\n        return this._source.config.workspaceFolder;\n    };\n    CustomTask.prototype.getTelemetryKind = function () {\n        if (this._source.customizes) {\n            return 'workspace>extension';\n        }\n        else {\n            return 'workspace';\n        }\n    };\n    CustomTask.prototype.fromObject = function (object) {\n        return new CustomTask(object._id, object._source, object._label, object.type, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n    };\n    return CustomTask;\n}(CommonTask));\nexports.CustomTask = CustomTask;\nvar ConfiguringTask = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfiguringTask, _super);\n    function ConfiguringTask(id, source, label, type, configures, runOptions, configurationProperties) {\n        var _this = _super.call(this, id, label, type, runOptions, configurationProperties, source) || this;\n        _this._source = source;\n        _this.configures = configures;\n        return _this;\n    }\n    ConfiguringTask.is = function (value) {\n        return value instanceof ConfiguringTask;\n    };\n    ConfiguringTask.prototype.fromObject = function (object) {\n        return object;\n    };\n    return ConfiguringTask;\n}(CommonTask));\nexports.ConfiguringTask = ConfiguringTask;\nvar ContributedTask = /** @class */ (function (_super) {\n    tslib_1.__extends(ContributedTask, _super);\n    function ContributedTask(id, source, label, type, defines, command, hasDefinedMatchers, runOptions, configurationProperties) {\n        var _this = _super.call(this, id, label, type, runOptions, configurationProperties, source) || this;\n        _this.defines = defines;\n        _this.hasDefinedMatchers = hasDefinedMatchers;\n        _this.command = command;\n        return _this;\n    }\n    ContributedTask.prototype.getDefinition = function () {\n        return this.defines;\n    };\n    ContributedTask.is = function (value) {\n        return value instanceof ContributedTask;\n    };\n    ContributedTask.prototype.getMapKey = function () {\n        var workspaceFolder = this._source.workspaceFolder;\n        return workspaceFolder\n            ? this._source.scope.toString() + \"|\" + workspaceFolder.uri.toString() + \"|\" + this._id\n            : this._source.scope.toString() + \"|\" + this._id;\n    };\n    ContributedTask.prototype.getRecentlyUsedKey = function () {\n        var key = { type: 'contributed', scope: this._source.scope, id: this._id };\n        if (this._source.scope === TaskScope.Folder && this._source.workspaceFolder) {\n            key.folder = this._source.workspaceFolder.uri.toString();\n        }\n        return JSON.stringify(key);\n    };\n    ContributedTask.prototype.getWorkspaceFolder = function () {\n        return this._source.workspaceFolder;\n    };\n    ContributedTask.prototype.getTelemetryKind = function () {\n        return 'extension';\n    };\n    ContributedTask.prototype.fromObject = function (object) {\n        return new ContributedTask(object._id, object._source, object._label, object.type, object.defines, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n    };\n    return ContributedTask;\n}(CommonTask));\nexports.ContributedTask = ContributedTask;\nvar InMemoryTask = /** @class */ (function (_super) {\n    tslib_1.__extends(InMemoryTask, _super);\n    function InMemoryTask(id, source, label, type, runOptions, configurationProperties) {\n        var _this = _super.call(this, id, label, type, runOptions, configurationProperties, source) || this;\n        _this._source = source;\n        return _this;\n    }\n    InMemoryTask.is = function (value) {\n        return value instanceof InMemoryTask;\n    };\n    InMemoryTask.prototype.getTelemetryKind = function () {\n        return 'composite';\n    };\n    InMemoryTask.prototype.fromObject = function (object) {\n        return new InMemoryTask(object._id, object._source, object._label, object.type, object.runOptions, object.configurationProperties);\n    };\n    return InMemoryTask;\n}(CommonTask));\nexports.InMemoryTask = InMemoryTask;\nvar ExecutionEngine;\n(function (ExecutionEngine) {\n    ExecutionEngine[ExecutionEngine[\"Process\"] = 1] = \"Process\";\n    ExecutionEngine[ExecutionEngine[\"Terminal\"] = 2] = \"Terminal\";\n})(ExecutionEngine = exports.ExecutionEngine || (exports.ExecutionEngine = {}));\n(function (ExecutionEngine) {\n    ExecutionEngine._default = ExecutionEngine.Terminal;\n})(ExecutionEngine = exports.ExecutionEngine || (exports.ExecutionEngine = {}));\nvar JsonSchemaVersion;\n(function (JsonSchemaVersion) {\n    JsonSchemaVersion[JsonSchemaVersion[\"V0_1_0\"] = 1] = \"V0_1_0\";\n    JsonSchemaVersion[JsonSchemaVersion[\"V2_0_0\"] = 2] = \"V2_0_0\";\n})(JsonSchemaVersion = exports.JsonSchemaVersion || (exports.JsonSchemaVersion = {}));\nvar TaskSorter = /** @class */ (function () {\n    function TaskSorter(workspaceFolders) {\n        this._order = new Map();\n        for (var i = 0; i < workspaceFolders.length; i++) {\n            this._order.set(workspaceFolders[i].uri.toString(), i);\n        }\n    }\n    TaskSorter.prototype.compare = function (a, b) {\n        var aw = a.getWorkspaceFolder();\n        var bw = b.getWorkspaceFolder();\n        if (aw && bw) {\n            var ai = this._order.get(aw.uri.toString());\n            ai = ai === undefined ? 0 : ai + 1;\n            var bi = this._order.get(bw.uri.toString());\n            bi = bi === undefined ? 0 : bi + 1;\n            if (ai === bi) {\n                return a._label.localeCompare(b._label);\n            }\n            else {\n                return ai - bi;\n            }\n        }\n        else if (!aw && bw) {\n            return -1;\n        }\n        else if (aw && !bw) {\n            return +1;\n        }\n        else {\n            return 0;\n        }\n    };\n    return TaskSorter;\n}());\nexports.TaskSorter = TaskSorter;\nvar TaskEventKind;\n(function (TaskEventKind) {\n    TaskEventKind[\"DependsOnStarted\"] = \"dependsOnStarted\";\n    TaskEventKind[\"Start\"] = \"start\";\n    TaskEventKind[\"ProcessStarted\"] = \"processStarted\";\n    TaskEventKind[\"Active\"] = \"active\";\n    TaskEventKind[\"Inactive\"] = \"inactive\";\n    TaskEventKind[\"Changed\"] = \"changed\";\n    TaskEventKind[\"Terminated\"] = \"terminated\";\n    TaskEventKind[\"ProcessEnded\"] = \"processEnded\";\n    TaskEventKind[\"End\"] = \"end\";\n})(TaskEventKind = exports.TaskEventKind || (exports.TaskEventKind = {}));\nvar TaskRunType;\n(function (TaskRunType) {\n    TaskRunType[\"SingleRun\"] = \"singleRun\";\n    TaskRunType[\"Background\"] = \"background\";\n})(TaskRunType = exports.TaskRunType || (exports.TaskRunType = {}));\nvar TaskRunSource;\n(function (TaskRunSource) {\n    TaskRunSource[TaskRunSource[\"System\"] = 0] = \"System\";\n    TaskRunSource[TaskRunSource[\"User\"] = 1] = \"User\";\n    TaskRunSource[TaskRunSource[\"FolderOpen\"] = 2] = \"FolderOpen\";\n    TaskRunSource[TaskRunSource[\"ConfigurationChange\"] = 3] = \"ConfigurationChange\";\n})(TaskRunSource = exports.TaskRunSource || (exports.TaskRunSource = {}));\nvar TaskEvent;\n(function (TaskEvent) {\n    function create(kind, task, processIdOrExitCodeOrTerminalId) {\n        if (task) {\n            var result = {\n                kind: kind,\n                taskId: task._id,\n                taskName: task.configurationProperties.name,\n                runType: task.configurationProperties.isBackground ? TaskRunType.Background : TaskRunType.SingleRun,\n                group: task.configurationProperties.group,\n                processId: undefined,\n                exitCode: undefined,\n                terminalId: undefined,\n                __task: task,\n            };\n            if (kind === TaskEventKind.Start) {\n                result.terminalId = processIdOrExitCodeOrTerminalId;\n            }\n            else if (kind === TaskEventKind.ProcessStarted) {\n                result.processId = processIdOrExitCodeOrTerminalId;\n            }\n            else if (kind === TaskEventKind.ProcessEnded) {\n                result.exitCode = processIdOrExitCodeOrTerminalId;\n            }\n            return Object.freeze(result);\n        }\n        else {\n            return Object.freeze({ kind: TaskEventKind.Changed });\n        }\n    }\n    TaskEvent.create = create;\n})(TaskEvent = exports.TaskEvent || (exports.TaskEvent = {}));\nvar KeyedTaskIdentifier;\n(function (KeyedTaskIdentifier) {\n    function sortedStringify(literal) {\n        var keys = Object.keys(literal).sort();\n        var result = '';\n        for (var position in keys) {\n            var stringified = literal[keys[position]];\n            if (stringified instanceof Object) {\n                stringified = sortedStringify(stringified);\n            }\n            else if (typeof stringified === 'string') {\n                stringified = stringified.replace(/,/g, ',,');\n            }\n            result += keys[position] + ',' + stringified + ',';\n        }\n        return result;\n    }\n    function create(value) {\n        var resultKey = sortedStringify(value);\n        var result = { _key: resultKey, type: value.taskType };\n        Objects.assign(result, value);\n        return result;\n    }\n    KeyedTaskIdentifier.create = create;\n})(KeyedTaskIdentifier = exports.KeyedTaskIdentifier || (exports.KeyedTaskIdentifier = {}));\nvar TaskDefinition;\n(function (TaskDefinition) {\n    function createTaskIdentifier(external, reporter) {\n        var definition = taskDefinitionRegistry_1.TaskDefinitionRegistry.get(external.type);\n        if (definition === undefined) {\n            // We have no task definition so we can't sanitize the literal. Take it as is\n            var copy = Objects.deepClone(external);\n            delete copy._key;\n            return KeyedTaskIdentifier.create(copy);\n        }\n        var literal = Object.create(null);\n        literal.type = definition.taskType;\n        var required = new Set();\n        definition.required.forEach(function (element) { return required.add(element); });\n        var properties = definition.properties;\n        for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            var property = _a[_i];\n            var value = external[property];\n            if (value !== undefined && value !== null) {\n                literal[property] = value;\n            }\n            else if (required.has(property)) {\n                var schema = properties[property];\n                if (schema.default !== undefined) {\n                    literal[property] = Objects.deepClone(schema.default);\n                }\n                else {\n                    switch (schema.type) {\n                        case 'boolean':\n                            literal[property] = false;\n                            break;\n                        case 'number':\n                        case 'integer':\n                            literal[property] = 0;\n                            break;\n                        case 'string':\n                            literal[property] = '';\n                            break;\n                        default:\n                            reporter.error(nls.localize('TaskDefinition.missingRequiredProperty', 'Error: the task identifier \\'{0}\\' is missing the required property \\'{1}\\'. The task identifier will be ignored.', JSON.stringify(external, undefined, 0), property));\n                            return undefined;\n                    }\n                }\n            }\n        }\n        return KeyedTaskIdentifier.create(literal);\n    }\n    TaskDefinition.createTaskIdentifier = createTaskIdentifier;\n})(TaskDefinition = exports.TaskDefinition || (exports.TaskDefinition = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Types from 'vs/base/common/types';\nimport { IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport * as Objects from 'vs/base/common/objects';\nimport { UriComponents } from 'vs/base/common/uri';\n\nimport { ProblemMatcher } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\n\nexport const TASK_RUNNING_STATE = new RawContextKey<boolean>('taskRunning', false);\n\nexport enum ShellQuoting {\n\t/**\n\t * Use character escaping.\n\t */\n\tEscape = 1,\n\n\t/**\n\t * Use strong quoting\n\t */\n\tStrong = 2,\n\n\t/**\n\t * Use weak quoting.\n\t */\n\tWeak = 3,\n}\n\nexport const CUSTOMIZED_TASK_TYPE = '$customized';\n\nexport namespace ShellQuoting {\n\texport function from(this: void, value: string): ShellQuoting {\n\t\tif (!value) {\n\t\t\treturn ShellQuoting.Strong;\n\t\t}\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'escape':\n\t\t\t\treturn ShellQuoting.Escape;\n\t\t\tcase 'strong':\n\t\t\t\treturn ShellQuoting.Strong;\n\t\t\tcase 'weak':\n\t\t\t\treturn ShellQuoting.Weak;\n\t\t\tdefault:\n\t\t\t\treturn ShellQuoting.Strong;\n\t\t}\n\t}\n}\n\nexport interface ShellQuotingOptions {\n\t/**\n\t * The character used to do character escaping.\n\t */\n\tescape?: string | {\n\t\tescapeChar: string;\n\t\tcharsToEscape: string;\n\t};\n\n\t/**\n\t * The character used for string quoting.\n\t */\n\tstrong?: string;\n\n\t/**\n\t * The character used for weak quoting.\n\t */\n\tweak?: string;\n}\n\nexport interface ShellConfiguration {\n\t/**\n\t * The shell executable.\n\t */\n\texecutable?: string;\n\n\t/**\n\t * The arguments to be passed to the shell executable.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Which kind of quotes the shell supports.\n\t */\n\tquoting?: ShellQuotingOptions;\n}\n\nexport interface CommandOptions {\n\n\t/**\n\t * The shell to use if the task is a shell command.\n\t */\n\tshell?: ShellConfiguration;\n\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: { [key: string]: string; };\n}\n\nexport namespace CommandOptions {\n\texport const defaults: CommandOptions = { cwd: '${workspaceFolder}' };\n}\n\nexport enum RevealKind {\n\t/**\n\t * Always brings the terminal to front if the task is executed.\n\t */\n\tAlways = 1,\n\n\t/**\n\t * Only brings the terminal to front if a problem is detected executing the task\n\t * (e.g. the task couldn't be started because).\n\t */\n\tSilent = 2,\n\n\t/**\n\t * The terminal never comes to front when the task is executed.\n\t */\n\tNever = 3\n}\n\nexport namespace RevealKind {\n\texport function fromString(this: void, value: string): RevealKind {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'always':\n\t\t\t\treturn RevealKind.Always;\n\t\t\tcase 'silent':\n\t\t\t\treturn RevealKind.Silent;\n\t\t\tcase 'never':\n\t\t\t\treturn RevealKind.Never;\n\t\t\tdefault:\n\t\t\t\treturn RevealKind.Always;\n\t\t}\n\t}\n}\n\nexport enum PanelKind {\n\n\t/**\n\t * Shares a panel with other tasks. This is the default.\n\t */\n\tShared = 1,\n\n\t/**\n\t * Uses a dedicated panel for this tasks. The panel is not\n\t * shared with other tasks.\n\t */\n\tDedicated = 2,\n\n\t/**\n\t * Creates a new panel whenever this task is executed.\n\t */\n\tNew = 3\n}\n\nexport namespace PanelKind {\n\texport function fromString(value: string): PanelKind {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'shared':\n\t\t\t\treturn PanelKind.Shared;\n\t\t\tcase 'dedicated':\n\t\t\t\treturn PanelKind.Dedicated;\n\t\t\tcase 'new':\n\t\t\t\treturn PanelKind.New;\n\t\t\tdefault:\n\t\t\t\treturn PanelKind.Shared;\n\t\t}\n\t}\n}\n\nexport interface PresentationOptions {\n\t/**\n\t * Controls whether the task output is reveal in the user interface.\n\t * Defaults to `RevealKind.Always`.\n\t */\n\treveal: RevealKind;\n\n\t/**\n\t * Controls whether the command associated with the task is echoed\n\t * in the user interface.\n\t */\n\techo: boolean;\n\n\t/**\n\t * Controls whether the panel showing the task output is taking focus.\n\t */\n\tfocus: boolean;\n\n\t/**\n\t * Controls if the task panel is used for this task only (dedicated),\n\t * shared between tasks (shared) or if a new panel is created on\n\t * every task execution (new). Defaults to `TaskInstanceKind.Shared`\n\t */\n\tpanel: PanelKind;\n\n\t/**\n\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t */\n\tshowReuseMessage: boolean;\n\n\t/**\n\t * Controls whether to clear the terminal before executing the task.\n\t */\n\tclear: boolean;\n\n\t/**\n\t * Controls whether the task is executed in a specific terminal group using split panes.\n\t */\n\tgroup?: string;\n}\n\nexport namespace PresentationOptions {\n\texport const defaults: PresentationOptions = {\n\t\techo: true, reveal: RevealKind.Always, focus: false, panel: PanelKind.Shared, showReuseMessage: true, clear: false\n\t};\n}\n\nexport enum RuntimeType {\n\tShell = 1,\n\tProcess = 2,\n\tCustomExecution = 3\n}\n\nexport namespace RuntimeType {\n\texport function fromString(value: string): RuntimeType {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'shell':\n\t\t\t\treturn RuntimeType.Shell;\n\t\t\tcase 'process':\n\t\t\t\treturn RuntimeType.Process;\n\t\t\tcase 'customExecution':\n\t\t\t\treturn RuntimeType.CustomExecution;\n\t\t\tdefault:\n\t\t\t\treturn RuntimeType.Process;\n\t\t}\n\t}\n}\n\nexport interface QuotedString {\n\tvalue: string;\n\tquoting: ShellQuoting;\n}\n\nexport type CommandString = string | QuotedString;\n\nexport namespace CommandString {\n\texport function value(value: CommandString): string {\n\t\tif (Types.isString(value)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn value.value;\n\t\t}\n\t}\n}\n\nexport interface CommandConfiguration {\n\n\t/**\n\t * The task type\n\t */\n\truntime?: RuntimeType;\n\n\t/**\n\t * The command to execute\n\t */\n\tname?: CommandString;\n\n\t/**\n\t * Additional command options.\n\t */\n\toptions?: CommandOptions;\n\n\t/**\n\t * Command arguments.\n\t */\n\targs?: CommandString[];\n\n\t/**\n\t * The task selector if needed.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * Whether to suppress the task name when merging global args\n\t *\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Describes how the task is presented in the UI.\n\t */\n\tpresentation?: PresentationOptions;\n}\n\nexport namespace TaskGroup {\n\texport const Clean: 'clean' = 'clean';\n\n\texport const Build: 'build' = 'build';\n\n\texport const Rebuild: 'rebuild' = 'rebuild';\n\n\texport const Test: 'test' = 'test';\n\n\texport function is(value: string): value is string {\n\t\treturn value === Clean || value === Build || value === Rebuild || value === Test;\n\t}\n}\n\nexport type TaskGroup = 'clean' | 'build' | 'rebuild' | 'test';\n\n\nexport const enum TaskScope {\n\tGlobal = 1,\n\tWorkspace = 2,\n\tFolder = 3\n}\n\nexport namespace TaskSourceKind {\n\texport const Workspace: 'workspace' = 'workspace';\n\texport const Extension: 'extension' = 'extension';\n\texport const InMemory: 'inMemory' = 'inMemory';\n}\n\nexport interface TaskSourceConfigElement {\n\tworkspaceFolder: IWorkspaceFolder;\n\tfile: string;\n\tindex: number;\n\telement: any;\n}\n\ninterface BaseTaskSource {\n\treadonly kind: string;\n\treadonly label: string;\n}\n\nexport interface WorkspaceTaskSource extends BaseTaskSource {\n\treadonly kind: 'workspace';\n\treadonly config: TaskSourceConfigElement;\n\treadonly customizes?: KeyedTaskIdentifier;\n}\n\nexport interface ExtensionTaskSource extends BaseTaskSource {\n\treadonly kind: 'extension';\n\treadonly extension?: string;\n\treadonly scope: TaskScope;\n\treadonly workspaceFolder: IWorkspaceFolder | undefined;\n}\n\nexport interface ExtensionTaskSourceTransfer {\n\t__workspaceFolder: UriComponents;\n\t__definition: { type: string;[name: string]: any };\n}\n\nexport interface InMemoryTaskSource extends BaseTaskSource {\n\treadonly kind: 'inMemory';\n}\n\nexport type TaskSource = WorkspaceTaskSource | ExtensionTaskSource | InMemoryTaskSource;\n\nexport interface TaskIdentifier {\n\ttype: string;\n\t[name: string]: any;\n}\n\nexport interface KeyedTaskIdentifier extends TaskIdentifier {\n\t_key: string;\n}\n\nexport interface TaskDependency {\n\tworkspaceFolder: IWorkspaceFolder;\n\ttask: string | KeyedTaskIdentifier | undefined;\n}\n\nexport const enum GroupType {\n\tdefault = 'default',\n\tuser = 'user'\n}\n\nexport interface ConfigurationProperties {\n\n\t/**\n\t * The task's name\n\t */\n\tname?: string;\n\n\t/**\n\t * The task's name\n\t */\n\tidentifier?: string;\n\n\t/**\n\t * the task's group;\n\t */\n\tgroup?: string;\n\n\t/**\n\t * The group type\n\t */\n\tgroupType?: GroupType;\n\n\t/**\n\t * The presentation options\n\t */\n\tpresentation?: PresentationOptions;\n\n\t/**\n\t * The command options;\n\t */\n\toptions?: CommandOptions;\n\n\t/**\n\t * Whether the task is a background task or not.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The other tasks this task depends on.\n\t */\n\tdependsOn?: TaskDependency[];\n\n\t/**\n\t * The problem watchers to use for this task\n\t */\n\tproblemMatchers?: Array<string | ProblemMatcher>;\n}\n\nexport enum RunOnOptions {\n\tdefault = 1,\n\tfolderOpen = 2\n}\n\nexport interface RunOptions {\n\treevaluateOnRerun?: boolean;\n\trunOn?: RunOnOptions;\n}\n\nexport namespace RunOptions {\n\texport const defaults: RunOptions = { reevaluateOnRerun: true, runOn: RunOnOptions.default };\n}\n\nexport abstract class CommonTask {\n\n\t/**\n\t * The task's internal id\n\t */\n\t_id: string;\n\n\t/**\n\t * The cached label.\n\t */\n\t_label: string;\n\n\ttype?: string;\n\n\trunOptions: RunOptions;\n\n\tconfigurationProperties: ConfigurationProperties;\n\n\t_source: BaseTaskSource;\n\n\tprivate _taskLoadMessages: string[] | undefined;\n\n\tprotected constructor(id: string, label: string | undefined, type: string | undefined, runOptions: RunOptions,\n\t\tconfigurationProperties: ConfigurationProperties, source: BaseTaskSource) {\n\t\tthis._id = id;\n\t\tif (label) {\n\t\t\tthis._label = label;\n\t\t}\n\t\tif (type) {\n\t\t\tthis.type = type;\n\t\t}\n\t\tthis.runOptions = runOptions;\n\t\tthis.configurationProperties = configurationProperties;\n\t\tthis._source = source;\n\t}\n\n\tpublic getDefinition(useSource?: boolean): KeyedTaskIdentifier | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic getMapKey(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic getRecentlyUsedKey(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic clone(): Task {\n\t\treturn this.fromObject(Objects.assign({}, <any>this));\n\t}\n\n\tprotected abstract fromObject(object: any): Task;\n\n\tpublic getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic getTelemetryKind(): string {\n\t\treturn 'unknown';\n\t}\n\n\tpublic matches(key: string | KeyedTaskIdentifier | undefined, compareId: boolean = false): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Types.isString(key)) {\n\t\t\treturn key === this._label || key === this.configurationProperties.identifier || (compareId && key === this._id);\n\t\t}\n\t\tlet identifier = this.getDefinition(true);\n\t\treturn identifier !== undefined && identifier._key === key._key;\n\t}\n\n\tpublic getQualifiedLabel(): string {\n\t\tlet workspaceFolder = this.getWorkspaceFolder();\n\t\tif (workspaceFolder) {\n\t\t\treturn `${this._label} (${workspaceFolder.name})`;\n\t\t} else {\n\t\t\treturn this._label;\n\t\t}\n\t}\n\n\tpublic getTaskExecution(): TaskExecution {\n\t\tlet result: TaskExecution = {\n\t\t\tid: this._id,\n\t\t\ttask: <any>this\n\t\t};\n\t\treturn result;\n\t}\n\n\tpublic addTaskLoadMessages(messages: string[] | undefined) {\n\t\tif (this._taskLoadMessages === undefined) {\n\t\t\tthis._taskLoadMessages = [];\n\t\t}\n\t\tif (messages) {\n\t\t\tthis._taskLoadMessages = this._taskLoadMessages.concat(messages);\n\t\t}\n\t}\n\n\tget taskLoadMessages(): string[] | undefined {\n\t\treturn this._taskLoadMessages;\n\t}\n}\n\nexport class CustomTask extends CommonTask {\n\n\ttype: '$customized'; // CUSTOMIZED_TASK_TYPE\n\n\t/**\n\t * Indicated the source of the task (e.g tasks.json or extension)\n\t */\n\t_source: WorkspaceTaskSource;\n\n\thasDefinedMatchers: boolean;\n\n\t/**\n\t * The command configuration\n\t */\n\tcommand: CommandConfiguration;\n\n\tpublic constructor(id: string, source: WorkspaceTaskSource, label: string, type: string, command: CommandConfiguration | undefined,\n\t\thasDefinedMatchers: boolean, runOptions: RunOptions, configurationProperties: ConfigurationProperties) {\n\t\tsuper(id, label, undefined, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t\tthis.hasDefinedMatchers = hasDefinedMatchers;\n\t\tif (command) {\n\t\t\tthis.command = command;\n\t\t}\n\t}\n\n\tpublic customizes(): KeyedTaskIdentifier | undefined {\n\t\tif (this._source && this._source.customizes) {\n\t\t\treturn this._source.customizes;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getDefinition(useSource: boolean = false): KeyedTaskIdentifier {\n\t\tif (useSource && this._source.customizes !== undefined) {\n\t\t\treturn this._source.customizes;\n\t\t} else {\n\t\t\tlet type: string;\n\t\t\tconst commandRuntime = this.command ? this.command.runtime : undefined;\n\t\t\tswitch (commandRuntime) {\n\t\t\t\tcase RuntimeType.Shell:\n\t\t\t\t\ttype = 'shell';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RuntimeType.Process:\n\t\t\t\t\ttype = 'process';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RuntimeType.CustomExecution:\n\t\t\t\t\ttype = 'customExecution';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase undefined:\n\t\t\t\t\ttype = '$composite';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unexpected task runtime');\n\t\t\t}\n\n\t\t\tlet result: KeyedTaskIdentifier = {\n\t\t\t\ttype,\n\t\t\t\t_key: this._id,\n\t\t\t\tid: this._id\n\t\t\t};\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tpublic static is(value: any): value is CustomTask {\n\t\treturn value instanceof CustomTask;\n\t}\n\n\tpublic getMapKey(): string {\n\t\tlet workspaceFolder = this._source.config.workspaceFolder;\n\t\treturn workspaceFolder ? `${workspaceFolder.uri.toString()}|${this._id}` : this._id;\n\t}\n\n\tpublic getRecentlyUsedKey(): string | undefined {\n\t\tinterface CustomKey {\n\t\t\ttype: string;\n\t\t\tfolder: string;\n\t\t\tid: string;\n\t\t}\n\t\tlet workspaceFolder = this._source.config.workspaceFolder;\n\t\tif (!workspaceFolder) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet key: CustomKey = { type: CUSTOMIZED_TASK_TYPE, folder: workspaceFolder.uri.toString(), id: this.configurationProperties.identifier! };\n\t\treturn JSON.stringify(key);\n\t}\n\n\tpublic getWorkspaceFolder(): IWorkspaceFolder {\n\t\treturn this._source.config.workspaceFolder;\n\t}\n\n\tpublic getTelemetryKind(): string {\n\t\tif (this._source.customizes) {\n\t\t\treturn 'workspace>extension';\n\t\t} else {\n\t\t\treturn 'workspace';\n\t\t}\n\t}\n\n\tprotected fromObject(object: CustomTask): CustomTask {\n\t\treturn new CustomTask(object._id, object._source, object._label, object.type, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n\t}\n}\n\nexport class ConfiguringTask extends CommonTask {\n\n\t/**\n\t * Indicated the source of the task (e.g tasks.json or extension)\n\t */\n\t_source: WorkspaceTaskSource;\n\n\tconfigures: KeyedTaskIdentifier;\n\n\tpublic constructor(id: string, source: WorkspaceTaskSource, label: string | undefined, type: string | undefined,\n\t\tconfigures: KeyedTaskIdentifier, runOptions: RunOptions, configurationProperties: ConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t\tthis.configures = configures;\n\t}\n\n\tpublic static is(value: any): value is ConfiguringTask {\n\t\treturn value instanceof ConfiguringTask;\n\t}\n\n\tprotected fromObject(object: any): Task {\n\t\treturn object;\n\t}\n\n}\n\nexport class ContributedTask extends CommonTask {\n\n\t/**\n\t * Indicated the source of the task (e.g tasks.json or extension)\n\t */\n\t_source: ExtensionTaskSource;\n\n\tdefines: KeyedTaskIdentifier;\n\n\thasDefinedMatchers: boolean;\n\n\t/**\n\t * The command configuration\n\t */\n\tcommand: CommandConfiguration;\n\n\tpublic constructor(id: string, source: ExtensionTaskSource, label: string, type: string | undefined, defines: KeyedTaskIdentifier,\n\t\tcommand: CommandConfiguration, hasDefinedMatchers: boolean, runOptions: RunOptions,\n\t\tconfigurationProperties: ConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis.defines = defines;\n\t\tthis.hasDefinedMatchers = hasDefinedMatchers;\n\t\tthis.command = command;\n\t}\n\n\tpublic getDefinition(): KeyedTaskIdentifier {\n\t\treturn this.defines;\n\t}\n\n\tpublic static is(value: any): value is ContributedTask {\n\t\treturn value instanceof ContributedTask;\n\t}\n\n\tpublic getMapKey(): string {\n\t\tlet workspaceFolder = this._source.workspaceFolder;\n\t\treturn workspaceFolder\n\t\t\t? `${this._source.scope.toString()}|${workspaceFolder.uri.toString()}|${this._id}`\n\t\t\t: `${this._source.scope.toString()}|${this._id}`;\n\t}\n\n\tpublic getRecentlyUsedKey(): string | undefined {\n\t\tinterface ContributedKey {\n\t\t\ttype: string;\n\t\t\tscope: number;\n\t\t\tfolder?: string;\n\t\t\tid: string;\n\t\t}\n\n\t\tlet key: ContributedKey = { type: 'contributed', scope: this._source.scope, id: this._id };\n\t\tif (this._source.scope === TaskScope.Folder && this._source.workspaceFolder) {\n\t\t\tkey.folder = this._source.workspaceFolder.uri.toString();\n\t\t}\n\t\treturn JSON.stringify(key);\n\t}\n\n\tpublic getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn this._source.workspaceFolder;\n\t}\n\n\tpublic getTelemetryKind(): string {\n\t\treturn 'extension';\n\t}\n\n\tprotected fromObject(object: ContributedTask): ContributedTask {\n\t\treturn new ContributedTask(object._id, object._source, object._label, object.type, object.defines, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n\t}\n}\n\nexport class InMemoryTask extends CommonTask {\n\t/**\n\t * Indicated the source of the task (e.g tasks.json or extension)\n\t */\n\t_source: InMemoryTaskSource;\n\n\ttype: 'inMemory';\n\n\tpublic constructor(id: string, source: InMemoryTaskSource, label: string, type: string,\n\t\trunOptions: RunOptions, configurationProperties: ConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t}\n\n\tpublic static is(value: any): value is InMemoryTask {\n\t\treturn value instanceof InMemoryTask;\n\t}\n\n\tpublic getTelemetryKind(): string {\n\t\treturn 'composite';\n\t}\n\n\tprotected fromObject(object: InMemoryTask): InMemoryTask {\n\t\treturn new InMemoryTask(object._id, object._source, object._label, object.type, object.runOptions, object.configurationProperties);\n\t}\n}\n\nexport type Task = CustomTask | ContributedTask | InMemoryTask;\n\nexport interface TaskExecution {\n\tid: string;\n\ttask: Task;\n}\n\nexport enum ExecutionEngine {\n\tProcess = 1,\n\tTerminal = 2\n}\n\nexport namespace ExecutionEngine {\n\texport const _default: ExecutionEngine = ExecutionEngine.Terminal;\n}\n\nexport const enum JsonSchemaVersion {\n\tV0_1_0 = 1,\n\tV2_0_0 = 2\n}\n\nexport interface TaskSet {\n\ttasks: Task[];\n\textension?: IExtensionDescription;\n}\n\nexport interface TaskDefinition {\n\textensionId: string;\n\ttaskType: string;\n\trequired: string[];\n\tproperties: IJSONSchemaMap;\n}\n\nexport class TaskSorter {\n\n\tprivate _order: Map<string, number> = new Map();\n\n\tconstructor(workspaceFolders: IWorkspaceFolder[]) {\n\t\tfor (let i = 0; i < workspaceFolders.length; i++) {\n\t\t\tthis._order.set(workspaceFolders[i].uri.toString(), i);\n\t\t}\n\t}\n\n\tpublic compare(a: Task, b: Task): number {\n\t\tlet aw = a.getWorkspaceFolder();\n\t\tlet bw = b.getWorkspaceFolder();\n\t\tif (aw && bw) {\n\t\t\tlet ai = this._order.get(aw.uri.toString());\n\t\t\tai = ai === undefined ? 0 : ai + 1;\n\t\t\tlet bi = this._order.get(bw.uri.toString());\n\t\t\tbi = bi === undefined ? 0 : bi + 1;\n\t\t\tif (ai === bi) {\n\t\t\t\treturn a._label.localeCompare(b._label);\n\t\t\t} else {\n\t\t\t\treturn ai - bi;\n\t\t\t}\n\t\t} else if (!aw && bw) {\n\t\t\treturn -1;\n\t\t} else if (aw && !bw) {\n\t\t\treturn +1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nexport const enum TaskEventKind {\n\tDependsOnStarted = 'dependsOnStarted',\n\tStart = 'start',\n\tProcessStarted = 'processStarted',\n\tActive = 'active',\n\tInactive = 'inactive',\n\tChanged = 'changed',\n\tTerminated = 'terminated',\n\tProcessEnded = 'processEnded',\n\tEnd = 'end'\n}\n\n\nexport const enum TaskRunType {\n\tSingleRun = 'singleRun',\n\tBackground = 'background'\n}\n\nexport interface TaskEvent {\n\tkind: TaskEventKind;\n\ttaskId?: string;\n\ttaskName?: string;\n\trunType?: TaskRunType;\n\tgroup?: string;\n\tprocessId?: number;\n\texitCode?: number;\n\tterminalId?: number;\n\t__task?: Task;\n}\n\nexport const enum TaskRunSource {\n\tSystem,\n\tUser,\n\tFolderOpen,\n\tConfigurationChange\n}\n\nexport namespace TaskEvent {\n\texport function create(kind: TaskEventKind.ProcessStarted | TaskEventKind.ProcessEnded, task: Task, processIdOrExitCode?: number): TaskEvent;\n\texport function create(kind: TaskEventKind.Start, task: Task, terminalId?: number): TaskEvent;\n\texport function create(kind: TaskEventKind.DependsOnStarted | TaskEventKind.Start | TaskEventKind.Active | TaskEventKind.Inactive | TaskEventKind.Terminated | TaskEventKind.End, task: Task): TaskEvent;\n\texport function create(kind: TaskEventKind.Changed): TaskEvent;\n\texport function create(kind: TaskEventKind, task?: Task, processIdOrExitCodeOrTerminalId?: number): TaskEvent {\n\t\tif (task) {\n\t\t\tlet result: TaskEvent = {\n\t\t\t\tkind: kind,\n\t\t\t\ttaskId: task._id,\n\t\t\t\ttaskName: task.configurationProperties.name,\n\t\t\t\trunType: task.configurationProperties.isBackground ? TaskRunType.Background : TaskRunType.SingleRun,\n\t\t\t\tgroup: task.configurationProperties.group,\n\t\t\t\tprocessId: undefined as number | undefined,\n\t\t\t\texitCode: undefined as number | undefined,\n\t\t\t\tterminalId: undefined as number | undefined,\n\t\t\t\t__task: task,\n\t\t\t};\n\t\t\tif (kind === TaskEventKind.Start) {\n\t\t\t\tresult.terminalId = processIdOrExitCodeOrTerminalId;\n\t\t\t} else if (kind === TaskEventKind.ProcessStarted) {\n\t\t\t\tresult.processId = processIdOrExitCodeOrTerminalId;\n\t\t\t} else if (kind === TaskEventKind.ProcessEnded) {\n\t\t\t\tresult.exitCode = processIdOrExitCodeOrTerminalId;\n\t\t\t}\n\t\t\treturn Object.freeze(result);\n\t\t} else {\n\t\t\treturn Object.freeze({ kind: TaskEventKind.Changed });\n\t\t}\n\t}\n}\n\nexport namespace KeyedTaskIdentifier {\n\tfunction sortedStringify(literal: any): string {\n\t\tconst keys = Object.keys(literal).sort();\n\t\tlet result: string = '';\n\t\tfor (let position in keys) {\n\t\t\tlet stringified = literal[keys[position]];\n\t\t\tif (stringified instanceof Object) {\n\t\t\t\tstringified = sortedStringify(stringified);\n\t\t\t} else if (typeof stringified === 'string') {\n\t\t\t\tstringified = stringified.replace(/,/g, ',,');\n\t\t\t}\n\t\t\tresult += keys[position] + ',' + stringified + ',';\n\t\t}\n\t\treturn result;\n\t}\n\texport function create(value: TaskIdentifier): KeyedTaskIdentifier {\n\t\tconst resultKey = sortedStringify(value);\n\t\tlet result = { _key: resultKey, type: value.taskType };\n\t\tObjects.assign(result, value);\n\t\treturn result;\n\t}\n}\n\nexport namespace TaskDefinition {\n\texport function createTaskIdentifier(external: TaskIdentifier, reporter: { error(message: string): void; }): KeyedTaskIdentifier | undefined {\n\t\tlet definition = TaskDefinitionRegistry.get(external.type);\n\t\tif (definition === undefined) {\n\t\t\t// We have no task definition so we can't sanitize the literal. Take it as is\n\t\t\tlet copy = Objects.deepClone(external);\n\t\t\tdelete copy._key;\n\t\t\treturn KeyedTaskIdentifier.create(copy);\n\t\t}\n\n\t\tlet literal: { type: string;[name: string]: any } = Object.create(null);\n\t\tliteral.type = definition.taskType;\n\t\tlet required: Set<string> = new Set();\n\t\tdefinition.required.forEach(element => required.add(element));\n\n\t\tlet properties = definition.properties;\n\t\tfor (let property of Object.keys(properties)) {\n\t\t\tlet value = external[property];\n\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\tliteral[property] = value;\n\t\t\t} else if (required.has(property)) {\n\t\t\t\tlet schema = properties[property];\n\t\t\t\tif (schema.default !== undefined) {\n\t\t\t\t\tliteral[property] = Objects.deepClone(schema.default);\n\t\t\t\t} else {\n\t\t\t\t\tswitch (schema.type) {\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tliteral[property] = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\t\tliteral[property] = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tliteral[property] = '';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treporter.error(nls.localize(\n\t\t\t\t\t\t\t\t'TaskDefinition.missingRequiredProperty',\n\t\t\t\t\t\t\t\t'Error: the task identifier \\'{0}\\' is missing the required property \\'{1}\\'. The task identifier will be ignored.', JSON.stringify(external, undefined, 0), property\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn KeyedTaskIdentifier.create(literal);\n\t}\n}\n"]}]}