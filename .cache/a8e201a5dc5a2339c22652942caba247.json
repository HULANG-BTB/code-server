{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar workbenchModeService_1 = require(\"vs/workbench/services/mode/common/workbenchModeService\");\nexports.grammarsExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'grammars',\n    deps: [workbenchModeService_1.languagesExtPoint],\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'),\n        type: 'array',\n        defaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],\n            properties: {\n                language: {\n                    description: nls.localize('vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'),\n                    type: 'string'\n                },\n                scopeName: {\n                    description: nls.localize('vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'),\n                    type: 'string'\n                },\n                path: {\n                    description: nls.localize('vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \\'./syntaxes/\\'.'),\n                    type: 'string'\n                },\n                embeddedLanguages: {\n                    description: nls.localize('vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'),\n                    type: 'object'\n                },\n                tokenTypes: {\n                    description: nls.localize('vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'),\n                    type: 'object',\n                    additionalProperties: {\n                        enum: ['string', 'comment', 'other']\n                    }\n                },\n                injectTo: {\n                    description: nls.localize('vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                }\n            },\n            required: ['scopeName', 'path']\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,iGAAiH;AACjH,+FAA2F;AAmB9E,QAAA,gBAAgB,GAA+C,uCAAkB,CAAC,sBAAsB,CAA4B;IAChJ,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE,CAAC,wCAAiB,CAAC;IACzB,UAAU,EAAE;QACX,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,uCAAuC,EAAE,kCAAkC,CAAC;QACtG,IAAI,EAAE,OAAO;QACb,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,gCAAgC,EAAE,CAAC,EAAE,CAAC;QAC3H,KAAK,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,gCAAgC,EAAE,EAAE,CAAC;YACzH,UAAU,EAAE;gBACX,QAAQ,EAAE;oBACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gDAAgD,EAAE,8DAA8D,CAAC;oBAC3I,IAAI,EAAE,QAAQ;iBACd;gBACD,SAAS,EAAE;oBACV,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,iDAAiD,EAAE,kDAAkD,CAAC;oBAChI,IAAI,EAAE,QAAQ;iBACd;gBACD,IAAI,EAAE;oBACL,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,4CAA4C,EAAE,sHAAsH,CAAC;oBAC/L,IAAI,EAAE,QAAQ;iBACd;gBACD,iBAAiB,EAAE;oBAClB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,yDAAyD,EAAE,iFAAiF,CAAC;oBACvK,IAAI,EAAE,QAAQ;iBACd;gBACD,UAAU,EAAE;oBACX,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,kDAAkD,EAAE,qCAAqC,CAAC;oBACpH,IAAI,EAAE,QAAQ;oBACd,oBAAoB,EAAE;wBACrB,IAAI,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;qBACpC;iBACD;gBACD,QAAQ,EAAE;oBACT,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gDAAgD,EAAE,oEAAoE,CAAC;oBACjJ,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE;wBACN,IAAI,EAAE,QAAQ;qBACd;iBACD;aACD;YACD,QAAQ,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC;SAC/B;KACD;CACD,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry, IExtensionPoint } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { languagesExtPoint } from 'vs/workbench/services/mode/common/workbenchModeService';\n\nexport interface IEmbeddedLanguagesMap {\n\t[scopeName: string]: string;\n}\n\nexport interface TokenTypesContribution {\n\t[scopeName: string]: string;\n}\n\nexport interface ITMSyntaxExtensionPoint {\n\tlanguage: string;\n\tscopeName: string;\n\tpath: string;\n\tembeddedLanguages: IEmbeddedLanguagesMap;\n\ttokenTypes: TokenTypesContribution;\n\tinjectTo: string[];\n}\n\nexport const grammarsExtPoint: IExtensionPoint<ITMSyntaxExtensionPoint[]> = ExtensionsRegistry.registerExtensionPoint<ITMSyntaxExtensionPoint[]>({\n\textensionPoint: 'grammars',\n\tdeps: [languagesExtPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tscopeName: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \\'./syntaxes/\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tembeddedLanguages: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\ttokenTypes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\tenum: ['string', 'comment', 'other']\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinjectTo: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['scopeName', 'path']\n\t\t}\n\t}\n});\n"]}]}