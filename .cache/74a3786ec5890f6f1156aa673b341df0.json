{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-browser/urlService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-browser/urlService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar mainProcessService_1 = require(\"vs/platform/ipc/electron-browser/mainProcessService\");\nvar urlIpc_1 = require(\"vs/platform/url/node/urlIpc\");\nvar urlService_1 = require(\"vs/platform/url/common/urlService\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar RelayURLService = /** @class */ (function (_super) {\n    tslib_1.__extends(RelayURLService, _super);\n    function RelayURLService(mainProcessService, openerService) {\n        var _this = _super.call(this) || this;\n        _this.urlService = new urlIpc_1.URLServiceChannelClient(mainProcessService.getChannel('url'));\n        mainProcessService.registerChannel('urlHandler', new urlIpc_1.URLHandlerChannel(_this));\n        openerService.registerOpener(_this);\n        return _this;\n    }\n    RelayURLService.prototype.open = function (uri) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (uri.scheme !== product_1.default.urlProtocol) {\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.urlService.open(uri)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RelayURLService.prototype.handleURL = function (uri) {\n        return _super.prototype.open.call(this, uri);\n    };\n    RelayURLService = tslib_1.__decorate([\n        tslib_1.__param(0, mainProcessService_1.IMainProcessService),\n        tslib_1.__param(1, opener_1.IOpenerService)\n    ], RelayURLService);\n    return RelayURLService;\n}(urlService_1.URLService));\nexports.RelayURLService = RelayURLService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-browser/urlService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-browser/urlService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAIhG,0FAA0F;AAC1F,sDAAyF;AACzF,gEAA+D;AAC/D,2DAAkE;AAClE,4DAAuD;AAEvD;IAAqC,2CAAU;IAI9C,yBACsB,kBAAuC,EAC5C,aAA6B;QAF9C,YAIC,iBAAO,SAMP;QAJA,KAAI,CAAC,UAAU,GAAG,IAAI,gCAAuB,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEpF,kBAAkB,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,0BAAiB,CAAC,KAAI,CAAC,CAAC,CAAC;QAC9E,aAAa,CAAC,cAAc,CAAC,KAAI,CAAC,CAAC;;IACpC,CAAC;IAEK,8BAAI,GAAV,UAAW,GAAQ;+CAAG,OAAO;;;;wBAC5B,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,WAAW,EAAE;4BACvC,sBAAO,KAAK,EAAC;yBACb;wBAEM,qBAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;4BAAtC,sBAAO,SAA+B,EAAC;;;;KACvC;IAED,mCAAS,GAAT,UAAU,GAAQ;QACjB,OAAO,iBAAM,IAAI,YAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IA1BW,eAAe;QAKzB,mBAAA,wCAAmB,CAAA;QACnB,mBAAA,uBAAc,CAAA;OANJ,eAAe,CA2B3B;IAAD,sBAAC;CAAA,AA3BD,CAAqC,uBAAU,GA2B9C;AA3BY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURLService, IURLHandler } from 'vs/platform/url/common/url';\nimport { URI } from 'vs/base/common/uri';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-browser/mainProcessService';\nimport { URLServiceChannelClient, URLHandlerChannel } from 'vs/platform/url/node/urlIpc';\nimport { URLService } from 'vs/platform/url/common/urlService';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport product from 'vs/platform/product/node/product';\n\nexport class RelayURLService extends URLService implements IURLHandler {\n\n\tprivate urlService: IURLService;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@IOpenerService openerService: IOpenerService\n\t) {\n\t\tsuper();\n\n\t\tthis.urlService = new URLServiceChannelClient(mainProcessService.getChannel('url'));\n\n\t\tmainProcessService.registerChannel('urlHandler', new URLHandlerChannel(this));\n\t\topenerService.registerOpener(this);\n\t}\n\n\tasync open(uri: URI): Promise<boolean> {\n\t\tif (uri.scheme !== product.urlProtocol) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn await this.urlService.open(uri);\n\t}\n\n\thandleURL(uri: URI): Promise<boolean> {\n\t\treturn super.open(uri);\n\t}\n}\n"]}]}