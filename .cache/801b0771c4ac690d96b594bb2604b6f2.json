{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/markdown/markdownRenderer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/browser/htmlContentRenderer\", \"vs/platform/opener/common/opener\", \"vs/editor/common/services/modeService\", \"vs/base/common/uri\", \"vs/base/common/errors\", \"vs/editor/common/modes/textToHtmlTokenizer\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/editor/common/modes\"], function (require, exports, htmlContentRenderer_1, opener_1, modeService_1, uri_1, errors_1, textToHtmlTokenizer_1, instantiation_1, event_1, lifecycle_1, modes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let MarkdownRenderer = class MarkdownRenderer {\n        constructor(_editor, _modeService, _openerService = opener_1.NullOpenerService) {\n            this._editor = _editor;\n            this._modeService = _modeService;\n            this._openerService = _openerService;\n            this._onDidRenderCodeBlock = new event_1.Emitter();\n            this.onDidRenderCodeBlock = this._onDidRenderCodeBlock.event;\n        }\n        getOptions(disposeables) {\n            return {\n                codeBlockRenderer: (languageAlias, value) => {\n                    // In markdown,\n                    // it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n                    // it is possible no alias is given in which case we fall back to the current editor lang\n                    let modeId = null;\n                    if (languageAlias) {\n                        modeId = this._modeService.getModeIdForLanguageName(languageAlias);\n                    }\n                    else {\n                        const model = this._editor.getModel();\n                        if (model) {\n                            modeId = model.getLanguageIdentifier().language;\n                        }\n                    }\n                    this._modeService.triggerMode(modeId || '');\n                    return Promise.resolve(true).then(_ => {\n                        const promise = modes_1.TokenizationRegistry.getPromise(modeId || '');\n                        if (promise) {\n                            return promise.then(support => textToHtmlTokenizer_1.tokenizeToString(value, support));\n                        }\n                        return textToHtmlTokenizer_1.tokenizeToString(value, undefined);\n                    }).then(code => {\n                        return `<span style=\"font-family: ${this._editor.getConfiguration().fontInfo.fontFamily}\">${code}</span>`;\n                    });\n                },\n                codeBlockRenderCallback: () => this._onDidRenderCodeBlock.fire(),\n                actionHandler: {\n                    callback: (content) => {\n                        let uri;\n                        try {\n                            uri = uri_1.URI.parse(content);\n                        }\n                        catch (_a) {\n                            // ignore\n                        }\n                        if (uri && this._openerService) {\n                            this._openerService.open(uri).catch(errors_1.onUnexpectedError);\n                        }\n                    },\n                    disposeables\n                }\n            };\n        }\n        render(markdown) {\n            let disposeables = [];\n            let element;\n            if (!markdown) {\n                element = document.createElement('span');\n            }\n            else {\n                element = htmlContentRenderer_1.renderMarkdown(markdown, this.getOptions(disposeables));\n            }\n            return {\n                element,\n                dispose: () => lifecycle_1.dispose(disposeables)\n            };\n        }\n    };\n    MarkdownRenderer = __decorate([\n        __param(1, modeService_1.IModeService),\n        __param(2, instantiation_1.optional(opener_1.IOpenerService))\n    ], MarkdownRenderer);\n    exports.MarkdownRenderer = MarkdownRenderer;\n});\n",null]}