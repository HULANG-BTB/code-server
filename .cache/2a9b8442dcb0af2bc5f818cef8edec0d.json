{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/coreCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/coreCommands.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar types = require(\"vs/base/common/types\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar cursorColumnSelection_1 = require(\"vs/editor/common/controller/cursorColumnSelection\");\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar cursorDeleteOperations_1 = require(\"vs/editor/common/controller/cursorDeleteOperations\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar cursorMoveCommands_1 = require(\"vs/editor/common/controller/cursorMoveCommands\");\nvar cursorTypeOperations_1 = require(\"vs/editor/common/controller/cursorTypeOperations\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar viewEvents_1 = require(\"vs/editor/common/view/viewEvents\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar CORE_WEIGHT = keybindingsRegistry_1.KeybindingWeight.EditorCore;\nvar CoreEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(CoreEditorCommand, _super);\n    function CoreEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CoreEditorCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n        var cursors = editor._getCursors();\n        if (!cursors) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(cursors, args || {});\n    };\n    return CoreEditorCommand;\n}(editorExtensions_1.EditorCommand));\nexports.CoreEditorCommand = CoreEditorCommand;\nvar EditorScroll_;\n(function (EditorScroll_) {\n    var isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        var scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory direction value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'up', 'down'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'page', 'halfPage'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\\n\\t\\t\\t\\t\",\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Down: 'down',\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage'\n    };\n    function parse(args) {\n        var direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = Direction.Up;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = Direction.Down;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        var unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = Unit.Line;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = Unit.WrappedLine;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = Unit.Page;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = Unit.HalfPage;\n                break;\n            default:\n                unit = Unit.WrappedLine;\n        }\n        var value = Math.floor(args.value || 1);\n        var revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n    var Direction;\n    (function (Direction) {\n        Direction[Direction[\"Up\"] = 1] = \"Up\";\n        Direction[Direction[\"Down\"] = 2] = \"Down\";\n    })(Direction = EditorScroll_.Direction || (EditorScroll_.Direction = {}));\n    var Unit;\n    (function (Unit) {\n        Unit[Unit[\"Line\"] = 1] = \"Line\";\n        Unit[Unit[\"WrappedLine\"] = 2] = \"WrappedLine\";\n        Unit[Unit[\"Page\"] = 3] = \"Page\";\n        Unit[Unit[\"HalfPage\"] = 4] = \"HalfPage\";\n    })(Unit = EditorScroll_.Unit || (EditorScroll_.Unit = {}));\n})(EditorScroll_ = exports.EditorScroll_ || (exports.EditorScroll_ = {}));\nvar RevealLine_;\n(function (RevealLine_) {\n    var isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        var reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'lineNumber': A mandatory line number value.\\n\\t\\t\\t\\t\\t* 'at': Logical position at which line has to be revealed .\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'top', 'center', 'bottom'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\",\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': 'number',\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ = exports.RevealLine_ || (exports.RevealLine_ = {}));\nvar CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    var BaseMoveToCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(BaseMoveToCommand, _super);\n        function BaseMoveToCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        BaseMoveToCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorMoveCommands_1.CursorMoveCommands.moveTo(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return BaseMoveToCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.MoveTo = editorExtensions_1.registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: null\n    }));\n    CoreNavigationCommands.MoveToSelect = editorExtensions_1.registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: null\n    }));\n    var ColumnSelectCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(ColumnSelectCommand, _super);\n        function ColumnSelectCommand() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ColumnSelectCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            var result = this._getColumnSelectResult(cursors.context, cursors.getPrimaryCursor(), cursors.getColumnSelectData(), args);\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, result.viewStates.map(function (viewState) { return cursorCommon_1.CursorState.fromViewState(viewState); }));\n            cursors.setColumnSelectData({\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            cursors.reveal(true, (result.reversed ? cursorCommon_1.RevealTarget.TopMost : cursorCommon_1.RevealTarget.BottomMost), editorCommon_1.ScrollType.Smooth);\n        };\n        return ColumnSelectCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.ColumnSelect = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super.call(this, {\n                id: 'columnSelect',\n                precondition: null\n            }) || this;\n        }\n        class_1.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n            // validate `args`\n            var validatedPosition = context.model.validatePosition(args.position);\n            var validatedViewPosition;\n            if (args.viewPosition) {\n                validatedViewPosition = context.validateViewPosition(new position_1.Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            }\n            else {\n                validatedViewPosition = context.convertModelPositionToViewPosition(validatedPosition);\n            }\n            return cursorColumnSelection_1.ColumnSelection.columnSelect(context.config, context.viewModel, primary.viewState.selection, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        };\n        return class_1;\n    }(ColumnSelectCommand)));\n    CoreNavigationCommands.CursorColumnSelectLeft = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_2, _super);\n        function class_2() {\n            return _super.call(this, {\n                id: 'cursorColumnSelectLeft',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.LeftArrow,\n                    linux: { primary: 0 }\n                }\n            }) || this;\n        }\n        class_2.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n            return cursorColumnSelection_1.ColumnSelection.columnSelectLeft(context.config, context.viewModel, primary.viewState, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n        };\n        return class_2;\n    }(ColumnSelectCommand)));\n    CoreNavigationCommands.CursorColumnSelectRight = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_3, _super);\n        function class_3() {\n            return _super.call(this, {\n                id: 'cursorColumnSelectRight',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.RightArrow,\n                    linux: { primary: 0 }\n                }\n            }) || this;\n        }\n        class_3.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n            return cursorColumnSelection_1.ColumnSelection.columnSelectRight(context.config, context.viewModel, primary.viewState, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n        };\n        return class_3;\n    }(ColumnSelectCommand)));\n    var ColumnSelectUpCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(ColumnSelectUpCommand, _super);\n        function ColumnSelectUpCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._isPaged = opts.isPaged;\n            return _this;\n        }\n        ColumnSelectUpCommand.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n            return cursorColumnSelection_1.ColumnSelection.columnSelectUp(context.config, context.viewModel, primary.viewState, this._isPaged, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n        };\n        return ColumnSelectUpCommand;\n    }(ColumnSelectCommand));\n    CoreNavigationCommands.CursorColumnSelectUp = editorExtensions_1.registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = editorExtensions_1.registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageUp,\n            linux: { primary: 0 }\n        }\n    }));\n    var ColumnSelectDownCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(ColumnSelectDownCommand, _super);\n        function ColumnSelectDownCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._isPaged = opts.isPaged;\n            return _this;\n        }\n        ColumnSelectDownCommand.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n            return cursorColumnSelection_1.ColumnSelection.columnSelectDown(context.config, context.viewModel, primary.viewState, this._isPaged, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n        };\n        return ColumnSelectDownCommand;\n    }(ColumnSelectCommand));\n    CoreNavigationCommands.CursorColumnSelectDown = editorExtensions_1.registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = editorExtensions_1.registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageDown,\n            linux: { primary: 0 }\n        }\n    }));\n    var CursorMoveImpl = /** @class */ (function (_super) {\n        tslib_1.__extends(CursorMoveImpl, _super);\n        function CursorMoveImpl() {\n            return _super.call(this, {\n                id: 'cursorMove',\n                precondition: null,\n                description: cursorMoveCommands_1.CursorMove.description\n            }) || this;\n        }\n        CursorMoveImpl.prototype.runCoreEditorCommand = function (cursors, args) {\n            var parsed = cursorMoveCommands_1.CursorMove.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(cursors, args.source, parsed);\n        };\n        CursorMoveImpl.prototype._runCursorMove = function (cursors, source, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.move(cursors.context, cursors.getAll(), args));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return CursorMoveImpl;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = editorExtensions_1.registerEditorCommand(new CursorMoveImpl());\n    var Constants;\n    (function (Constants) {\n        Constants[Constants[\"PAGE_SIZE_MARKER\"] = -1] = \"PAGE_SIZE_MARKER\";\n    })(Constants || (Constants = {}));\n    var CursorMoveBasedCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(CursorMoveBasedCommand, _super);\n        function CursorMoveBasedCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._staticArgs = opts.args;\n            return _this;\n        }\n        CursorMoveBasedCommand.prototype.runCoreEditorCommand = function (cursors, dynamicArgs) {\n            var args = this._staticArgs;\n            if (this._staticArgs.value === Constants.PAGE_SIZE_MARKER) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: cursors.context.config.pageSize\n                };\n            }\n            CoreNavigationCommands.CursorMove._runCursorMove(cursors, dynamicArgs.source, args);\n        };\n        return CursorMoveBasedCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorLeft = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Left,\n            unit: cursorMoveCommands_1.CursorMove.Unit.None,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.LeftArrow,\n            mac: { primary: keyCodes_1.KeyCode.LeftArrow, secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_B] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Left,\n            unit: cursorMoveCommands_1.CursorMove.Unit.None,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow\n        }\n    }));\n    CoreNavigationCommands.CursorRight = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Right,\n            unit: cursorMoveCommands_1.CursorMove.Unit.None,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.RightArrow,\n            mac: { primary: keyCodes_1.KeyCode.RightArrow, secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_F] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Right,\n            unit: cursorMoveCommands_1.CursorMove.Unit.None,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow\n        }\n    }));\n    CoreNavigationCommands.CursorUp = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Up,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.UpArrow,\n            mac: { primary: keyCodes_1.KeyCode.UpArrow, secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_P] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Up,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow,\n            secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow],\n            mac: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow },\n            linux: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Up,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: false,\n            value: Constants.PAGE_SIZE_MARKER\n        },\n        id: 'cursorPageUp',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.PageUp\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Up,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: true,\n            value: Constants.PAGE_SIZE_MARKER\n        },\n        id: 'cursorPageUpSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.PageUp\n        }\n    }));\n    CoreNavigationCommands.CursorDown = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Down,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.DownArrow,\n            mac: { primary: keyCodes_1.KeyCode.DownArrow, secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_N] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Down,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow,\n            secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow],\n            mac: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow },\n            linux: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Down,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: false,\n            value: Constants.PAGE_SIZE_MARKER\n        },\n        id: 'cursorPageDown',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.PageDown\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = editorExtensions_1.registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: cursorMoveCommands_1.CursorMove.Direction.Down,\n            unit: cursorMoveCommands_1.CursorMove.Unit.WrappedLine,\n            select: true,\n            value: Constants.PAGE_SIZE_MARKER\n        },\n        id: 'cursorPageDownSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.PageDown\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_4, _super);\n        function class_4() {\n            return _super.call(this, {\n                id: 'createCursor',\n                precondition: null\n            }) || this;\n        }\n        class_4.prototype.runCoreEditorCommand = function (cursors, args) {\n            var context = cursors.context;\n            var newState;\n            if (args.wholeLine) {\n                newState = cursorMoveCommands_1.CursorMoveCommands.line(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = cursorMoveCommands_1.CursorMoveCommands.moveTo(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n            }\n            var states = cursors.getAll();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                var newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                var newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (var i = 0, len = states.length; i < len; i++) {\n                    var state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    cursors.context.model.pushStackElement();\n                    cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, states);\n        };\n        return class_4;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.LastCursorMoveToSelect = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_5, _super);\n        function class_5() {\n            return _super.call(this, {\n                id: '_lastCursorMoveToSelect',\n                precondition: null\n            }) || this;\n        }\n        class_5.prototype.runCoreEditorCommand = function (cursors, args) {\n            var context = cursors.context;\n            var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n            var states = cursors.getAll();\n            var newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = cursorMoveCommands_1.CursorMoveCommands.moveTo(context, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, newStates);\n        };\n        return class_5;\n    }(CoreEditorCommand)));\n    var HomeCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(HomeCommand, _super);\n        function HomeCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        HomeCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.moveToBeginningOfLine(cursors.context, cursors.getAll(), this._inSelectionMode));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return HomeCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorHome = editorExtensions_1.registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.Home,\n            mac: { primary: keyCodes_1.KeyCode.Home, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.LeftArrow] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = editorExtensions_1.registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Home,\n            mac: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Home, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow] }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStart = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_6, _super);\n        function class_6() {\n            return _super.call(this, {\n                id: 'cursorLineStart',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_A }\n                }\n            }) || this;\n        }\n        class_6.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, this._exec(cursors.context, cursors.getAll()));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        class_6.prototype._exec = function (context, cursors) {\n            var result = [];\n            for (var i = 0, len = cursors.length; i < len; i++) {\n                var cursor = cursors[i];\n                var lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = cursorCommon_1.CursorState.fromModelState(cursor.modelState.move(false, lineNumber, 1, 0));\n            }\n            return result;\n        };\n        return class_6;\n    }(CoreEditorCommand)));\n    var EndCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(EndCommand, _super);\n        function EndCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        EndCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.moveToEndOfLine(cursors.context, cursors.getAll(), this._inSelectionMode));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return EndCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorEnd = editorExtensions_1.registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyCode.End,\n            mac: { primary: keyCodes_1.KeyCode.End, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.RightArrow] }\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = editorExtensions_1.registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.End,\n            mac: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.End, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow] }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEnd = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_7, _super);\n        function class_7() {\n            return _super.call(this, {\n                id: 'cursorLineEnd',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_E }\n                }\n            }) || this;\n        }\n        class_7.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, this._exec(cursors.context, cursors.getAll()));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        class_7.prototype._exec = function (context, cursors) {\n            var result = [];\n            for (var i = 0, len = cursors.length; i < len; i++) {\n                var cursor = cursors[i];\n                var lineNumber = cursor.modelState.position.lineNumber;\n                var maxColumn = context.model.getLineMaxColumn(lineNumber);\n                result[i] = cursorCommon_1.CursorState.fromModelState(cursor.modelState.move(false, lineNumber, maxColumn, 0));\n            }\n            return result;\n        };\n        return class_7;\n    }(CoreEditorCommand)));\n    var TopCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(TopCommand, _super);\n        function TopCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        TopCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.moveToBeginningOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return TopCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorTop = editorExtensions_1.registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Home,\n            mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.UpArrow }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = editorExtensions_1.registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Home,\n            mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow }\n        }\n    }));\n    var BottomCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(BottomCommand, _super);\n        function BottomCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        BottomCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.moveToEndOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return BottomCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.CursorBottom = editorExtensions_1.registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.End,\n            mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.DownArrow }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = editorExtensions_1.registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: null,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.End,\n            mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow }\n        }\n    }));\n    var EditorScrollImpl = /** @class */ (function (_super) {\n        tslib_1.__extends(EditorScrollImpl, _super);\n        function EditorScrollImpl() {\n            return _super.call(this, {\n                id: 'editorScroll',\n                precondition: null,\n                description: EditorScroll_.description\n            }) || this;\n        }\n        EditorScrollImpl.prototype.runCoreEditorCommand = function (cursors, args) {\n            var parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runEditorScroll(cursors, args.source, parsed);\n        };\n        EditorScrollImpl.prototype._runEditorScroll = function (cursors, source, args) {\n            var desiredScrollTop = this._computeDesiredScrollTop(cursors.context, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                var desiredVisibleViewRange = cursors.context.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                cursors.setStates(source, cursorEvents_1.CursorChangeReason.Explicit, [\n                    cursorMoveCommands_1.CursorMoveCommands.findPositionInViewportIfOutside(cursors.context, cursors.getPrimaryCursor(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            cursors.scrollTo(desiredScrollTop);\n        };\n        EditorScrollImpl.prototype._computeDesiredScrollTop = function (context, args) {\n            if (args.unit === EditorScroll_.Unit.Line) {\n                // scrolling by model lines\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\n                var desiredTopModelLineNumber = void 0;\n                if (args.direction === EditorScroll_.Direction.Up) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(context.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                var desiredTopViewPosition = context.convertModelPositionToViewPosition(new position_1.Position(desiredTopModelLineNumber, 1));\n                return context.getVerticalOffsetForViewLine(desiredTopViewPosition.lineNumber);\n            }\n            var noOfLines;\n            if (args.unit === EditorScroll_.Unit.Page) {\n                noOfLines = context.config.pageSize * args.value;\n            }\n            else if (args.unit === EditorScroll_.Unit.HalfPage) {\n                noOfLines = Math.round(context.config.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            var deltaLines = (args.direction === EditorScroll_.Direction.Up ? -1 : 1) * noOfLines;\n            return context.getCurrentScrollTop() + deltaLines * context.config.lineHeight;\n        };\n        return EditorScrollImpl;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = editorExtensions_1.registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_8, _super);\n        function class_8() {\n            return _super.call(this, {\n                id: 'scrollLineUp',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.UpArrow,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.PageUp }\n                }\n            }) || this;\n        }\n        class_8.prototype.runCoreEditorCommand = function (cursors, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n                direction: EditorScroll_.Direction.Up,\n                unit: EditorScroll_.Unit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        };\n        return class_8;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.ScrollPageUp = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_9, _super);\n        function class_9() {\n            return _super.call(this, {\n                id: 'scrollPageUp',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.PageUp,\n                    win: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageUp },\n                    linux: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageUp }\n                }\n            }) || this;\n        }\n        class_9.prototype.runCoreEditorCommand = function (cursors, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n                direction: EditorScroll_.Direction.Up,\n                unit: EditorScroll_.Unit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        };\n        return class_9;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.ScrollLineDown = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_10, _super);\n        function class_10() {\n            return _super.call(this, {\n                id: 'scrollLineDown',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.DownArrow,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.PageDown }\n                }\n            }) || this;\n        }\n        class_10.prototype.runCoreEditorCommand = function (cursors, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n                direction: EditorScroll_.Direction.Down,\n                unit: EditorScroll_.Unit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        };\n        return class_10;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.ScrollPageDown = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_11, _super);\n        function class_11() {\n            return _super.call(this, {\n                id: 'scrollPageDown',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.PageDown,\n                    win: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageDown },\n                    linux: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.PageDown }\n                }\n            }) || this;\n        }\n        class_11.prototype.runCoreEditorCommand = function (cursors, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n                direction: EditorScroll_.Direction.Down,\n                unit: EditorScroll_.Unit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        };\n        return class_11;\n    }(CoreEditorCommand)));\n    var WordCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(WordCommand, _super);\n        function WordCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        WordCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorMoveCommands_1.CursorMoveCommands.word(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position)\n            ]);\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return WordCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.WordSelect = editorExtensions_1.registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: null\n    }));\n    CoreNavigationCommands.WordSelectDrag = editorExtensions_1.registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: null\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_12, _super);\n        function class_12() {\n            return _super.call(this, {\n                id: 'lastCursorWordSelect',\n                precondition: null\n            }) || this;\n        }\n        class_12.prototype.runCoreEditorCommand = function (cursors, args) {\n            var context = cursors.context;\n            var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n            var states = cursors.getAll();\n            var newStates = states.slice(0);\n            var lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = cursorMoveCommands_1.CursorMoveCommands.word(context, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, newStates);\n        };\n        return class_12;\n    }(CoreEditorCommand)));\n    var LineCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(LineCommand, _super);\n        function LineCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        LineCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorMoveCommands_1.CursorMoveCommands.line(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            cursors.reveal(false, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return LineCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.LineSelect = editorExtensions_1.registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: null\n    }));\n    CoreNavigationCommands.LineSelectDrag = editorExtensions_1.registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: null\n    }));\n    var LastCursorLineCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(LastCursorLineCommand, _super);\n        function LastCursorLineCommand(opts) {\n            var _this = _super.call(this, opts) || this;\n            _this._inSelectionMode = opts.inSelectionMode;\n            return _this;\n        }\n        LastCursorLineCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n            var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n            var states = cursors.getAll();\n            var newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = cursorMoveCommands_1.CursorMoveCommands.line(cursors.context, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, newStates);\n        };\n        return LastCursorLineCommand;\n    }(CoreEditorCommand));\n    CoreNavigationCommands.LastCursorLineSelect = editorExtensions_1.registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: null\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = editorExtensions_1.registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: null\n    }));\n    CoreNavigationCommands.ExpandLineSelection = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_13, _super);\n        function class_13() {\n            return _super.call(this, {\n                id: 'expandLineSelection',\n                precondition: null,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_L\n                }\n            }) || this;\n        }\n        class_13.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.expandLineSelection(cursors.context, cursors.getAll()));\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return class_13;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.CancelSelection = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_14, _super);\n        function class_14() {\n            return _super.call(this, {\n                id: 'cancelSelection',\n                precondition: editorContextKeys_1.EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyCode.Escape,\n                    secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n                }\n            }) || this;\n        }\n        class_14.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorMoveCommands_1.CursorMoveCommands.cancelSelection(cursors.context, cursors.getPrimaryCursor())\n            ]);\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return class_14;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.RemoveSecondaryCursors = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_15, _super);\n        function class_15() {\n            return _super.call(this, {\n                id: 'removeSecondaryCursors',\n                precondition: editorContextKeys_1.EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyCode.Escape,\n                    secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n                }\n            }) || this;\n        }\n        class_15.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursors.getPrimaryCursor()\n            ]);\n            cursors.reveal(true, cursorCommon_1.RevealTarget.Primary, editorCommon_1.ScrollType.Smooth);\n        };\n        return class_15;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.RevealLine = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_16, _super);\n        function class_16() {\n            return _super.call(this, {\n                id: 'revealLine',\n                precondition: null,\n                description: RevealLine_.description\n            }) || this;\n        }\n        class_16.prototype.runCoreEditorCommand = function (cursors, args) {\n            var revealLineArg = args;\n            var lineNumber = (revealLineArg.lineNumber || 0) + 1;\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            var lineCount = cursors.context.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            var range = new range_1.Range(lineNumber, 1, lineNumber, cursors.context.model.getLineMaxColumn(lineNumber));\n            var revealAt = viewEvents_1.VerticalRevealType.Simple;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = viewEvents_1.VerticalRevealType.Top;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = viewEvents_1.VerticalRevealType.Center;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = viewEvents_1.VerticalRevealType.Bottom;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            var viewRange = cursors.context.convertModelRangeToViewRange(range);\n            cursors.revealRange(false, viewRange, revealAt, editorCommon_1.ScrollType.Smooth);\n        };\n        return class_16;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.SelectAll = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_17, _super);\n        function class_17() {\n            return _super.call(this, {\n                id: 'selectAll',\n                precondition: null\n            }) || this;\n        }\n        class_17.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorMoveCommands_1.CursorMoveCommands.selectAll(cursors.context, cursors.getPrimaryCursor())\n            ]);\n        };\n        return class_17;\n    }(CoreEditorCommand)));\n    CoreNavigationCommands.SetSelection = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_18, _super);\n        function class_18() {\n            return _super.call(this, {\n                id: 'setSelection',\n                precondition: null\n            }) || this;\n        }\n        class_18.prototype.runCoreEditorCommand = function (cursors, args) {\n            cursors.context.model.pushStackElement();\n            cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, [\n                cursorCommon_1.CursorState.fromModelSelection(args.selection)\n            ]);\n        };\n        return class_18;\n    }(CoreEditorCommand)));\n})(CoreNavigationCommands = exports.CoreNavigationCommands || (exports.CoreNavigationCommands = {}));\nvar CoreEditingCommands;\n(function (CoreEditingCommands) {\n    var CoreEditingCommand = /** @class */ (function (_super) {\n        tslib_1.__extends(CoreEditingCommand, _super);\n        function CoreEditingCommand() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CoreEditingCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n            var cursors = editor._getCursors();\n            if (!cursors) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, cursors, args || {});\n        };\n        return CoreEditingCommand;\n    }(editorExtensions_1.EditorCommand));\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_19, _super);\n        function class_19() {\n            return _super.call(this, {\n                id: 'lineBreakInsert',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_O }\n                }\n            }) || this;\n        }\n        class_19.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.lineBreakInsert(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) { return s.modelState.selection; })));\n        };\n        return class_19;\n    }(CoreEditingCommand)));\n    CoreEditingCommands.Outdent = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_20, _super);\n        function class_20() {\n            return _super.call(this, {\n                id: 'outdent',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Tab\n                }\n            }) || this;\n        }\n        class_20.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.outdent(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) { return s.modelState.selection; })));\n            editor.pushUndoStop();\n        };\n        return class_20;\n    }(CoreEditingCommand)));\n    CoreEditingCommands.Tab = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_21, _super);\n        function class_21() {\n            return _super.call(this, {\n                id: 'tab',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: keyCodes_1.KeyCode.Tab\n                }\n            }) || this;\n        }\n        class_21.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.tab(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) { return s.modelState.selection; })));\n            editor.pushUndoStop();\n        };\n        return class_21;\n    }(CoreEditingCommand)));\n    CoreEditingCommands.DeleteLeft = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_22, _super);\n        function class_22() {\n            return _super.call(this, {\n                id: 'deleteLeft',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyCode.Backspace,\n                    secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Backspace],\n                    mac: { primary: keyCodes_1.KeyCode.Backspace, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Backspace, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_H, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.Backspace] }\n                }\n            }) || this;\n        }\n        class_22.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n            var _a = cursorDeleteOperations_1.DeleteOperations.deleteLeft(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) { return s.modelState.selection; })), shouldPushStackElementBefore = _a[0], commands = _a[1];\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            cursors.setPrevEditOperationType(cursorCommon_1.EditOperationType.DeletingLeft);\n        };\n        return class_22;\n    }(CoreEditingCommand)));\n    CoreEditingCommands.DeleteRight = editorExtensions_1.registerEditorCommand(new /** @class */ (function (_super) {\n        tslib_1.__extends(class_23, _super);\n        function class_23() {\n            return _super.call(this, {\n                id: 'deleteRight',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyCode.Delete,\n                    mac: { primary: keyCodes_1.KeyCode.Delete, secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_D, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.Delete] }\n                }\n            }) || this;\n        }\n        class_23.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n            var _a = cursorDeleteOperations_1.DeleteOperations.deleteRight(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) { return s.modelState.selection; })), shouldPushStackElementBefore = _a[0], commands = _a[1];\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            cursors.setPrevEditOperationType(cursorCommon_1.EditOperationType.DeletingRight);\n        };\n        return class_23;\n    }(CoreEditingCommand)));\n})(CoreEditingCommands = exports.CoreEditingCommands || (exports.CoreEditingCommands = {}));\nfunction registerCommand(command) {\n    command.register();\n}\n/**\n * A command that will:\n *  1. invoke a command on the focused editor.\n *  2. otherwise, invoke a browser built-in command on the `activeElement`.\n *  3. otherwise, invoke a command on the workbench active editor.\n */\nvar EditorOrNativeTextInputCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorOrNativeTextInputCommand, _super);\n    function EditorOrNativeTextInputCommand(opts) {\n        var _this = _super.call(this, opts) || this;\n        _this._editorHandler = opts.editorHandler;\n        _this._inputHandler = opts.inputHandler;\n        return _this;\n    }\n    EditorOrNativeTextInputCommand.prototype.runCommand = function (accessor, args) {\n        var focusedEditor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            return this._runEditorHandler(accessor, focusedEditor, args);\n        }\n        // Ignore this action when user is focused on an element that allows for entering text\n        var activeElement = document.activeElement;\n        if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n            document.execCommand(this._inputHandler);\n            return;\n        }\n        // Redirecting to active editor\n        var activeEditor = accessor.get(codeEditorService_1.ICodeEditorService).getActiveCodeEditor();\n        if (activeEditor) {\n            activeEditor.focus();\n            return this._runEditorHandler(accessor, activeEditor, args);\n        }\n    };\n    EditorOrNativeTextInputCommand.prototype._runEditorHandler = function (accessor, editor, args) {\n        var HANDLER = this._editorHandler;\n        if (typeof HANDLER === 'string') {\n            editor.trigger('keyboard', HANDLER, args);\n        }\n        else {\n            args = args || {};\n            args.source = 'keyboard';\n            HANDLER.runEditorCommand(accessor, editor, args);\n        }\n    };\n    return EditorOrNativeTextInputCommand;\n}(editorExtensions_1.Command));\n/**\n * A command that will invoke a command on the focused editor.\n */\nvar EditorHandlerCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorHandlerCommand, _super);\n    function EditorHandlerCommand(id, handlerId, description) {\n        var _this = _super.call(this, {\n            id: id,\n            precondition: null,\n            description: description\n        }) || this;\n        _this._handlerId = handlerId;\n        return _this;\n    }\n    EditorHandlerCommand.prototype.runCommand = function (accessor, args) {\n        var editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    };\n    return EditorHandlerCommand;\n}(editorExtensions_1.Command));\nregisterCommand(new EditorOrNativeTextInputCommand({\n    editorHandler: CoreNavigationCommands.SelectAll,\n    inputHandler: 'selectAll',\n    id: 'editor.action.selectAll',\n    precondition: editorContextKeys_1.EditorContextKeys.textInputFocus,\n    kbOpts: {\n        weight: CORE_WEIGHT,\n        kbExpr: null,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_A\n    },\n    menubarOpts: {\n        menuId: actions_1.MenuId.MenubarSelectionMenu,\n        group: '1_basic',\n        title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\n        order: 1\n    }\n}));\nregisterCommand(new EditorOrNativeTextInputCommand({\n    editorHandler: editorCommon_1.Handler.Undo,\n    inputHandler: 'undo',\n    id: editorCommon_1.Handler.Undo,\n    precondition: editorContextKeys_1.EditorContextKeys.writable,\n    kbOpts: {\n        weight: CORE_WEIGHT,\n        kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Z\n    },\n    menubarOpts: {\n        menuId: actions_1.MenuId.MenubarEditMenu,\n        group: '1_do',\n        title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\n        order: 1\n    }\n}));\nregisterCommand(new EditorHandlerCommand('default:' + editorCommon_1.Handler.Undo, editorCommon_1.Handler.Undo));\nregisterCommand(new EditorOrNativeTextInputCommand({\n    editorHandler: editorCommon_1.Handler.Redo,\n    inputHandler: 'redo',\n    id: editorCommon_1.Handler.Redo,\n    precondition: editorContextKeys_1.EditorContextKeys.writable,\n    kbOpts: {\n        weight: CORE_WEIGHT,\n        kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Y,\n        secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z],\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z }\n    },\n    menubarOpts: {\n        menuId: actions_1.MenuId.MenubarEditMenu,\n        group: '1_do',\n        title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\n        order: 2\n    }\n}));\nregisterCommand(new EditorHandlerCommand('default:' + editorCommon_1.Handler.Redo, editorCommon_1.Handler.Redo));\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(editorCommon_1.Handler.Type, {\n    description: \"Type\",\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(editorCommon_1.Handler.ReplacePreviousChar);\nregisterOverwritableCommand(editorCommon_1.Handler.CompositionStart);\nregisterOverwritableCommand(editorCommon_1.Handler.CompositionEnd);\nregisterOverwritableCommand(editorCommon_1.Handler.Paste);\nregisterOverwritableCommand(editorCommon_1.Handler.Cut);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/coreCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/coreCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport * as types from 'vs/base/common/types';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Command, EditorCommand, ICommandOptions, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { ColumnSelection, IColumnSelectResult } from 'vs/editor/common/controller/cursorColumnSelection';\nimport { CursorContext, CursorState, EditOperationType, IColumnSelectData, ICursors, PartialCursorState, RevealTarget } from 'vs/editor/common/controller/cursorCommon';\nimport { DeleteOperations } from 'vs/editor/common/controller/cursorDeleteOperations';\nimport { CursorChangeReason } from 'vs/editor/common/controller/cursorEvents';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from 'vs/editor/common/controller/cursorMoveCommands';\nimport { TypeOperations } from 'vs/editor/common/controller/cursorTypeOperations';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Handler, ScrollType } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { VerticalRevealType } from 'vs/editor/common/view/viewEvents';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nconst CORE_WEIGHT = KeybindingWeight.EditorCore;\n\nexport abstract class CoreEditorCommand extends EditorCommand {\n\tpublic runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: any): void {\n\t\tconst cursors = editor._getCursors();\n\t\tif (!cursors) {\n\t\t\t// the editor has no view => has no cursors\n\t\t\treturn;\n\t\t}\n\t\tthis.runCoreEditorCommand(cursors, args || {});\n\t}\n\n\tpublic abstract runCoreEditorCommand(cursors: ICursors, args: any): void;\n}\n\nexport namespace EditorScroll_ {\n\n\tconst isEditorScrollArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst scrollArg: RawArguments = arg;\n\n\t\tif (!types.isString(scrollArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const description = <ICommandHandlerDescription>{\n\t\tdescription: 'Scroll editor in the given direction',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Editor scroll argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n\t\t\t\tconstraint: isEditorScrollArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['to'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'to': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['up', 'down']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'by': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'revealCursor': {\n\t\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Directions in the view for editor scroll command.\n\t */\n\texport const RawDirection = {\n\t\tUp: 'up',\n\t\tDown: 'down',\n\t};\n\n\t/**\n\t * Units for editor scroll 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: 'line',\n\t\tWrappedLine: 'wrappedLine',\n\t\tPage: 'page',\n\t\tHalfPage: 'halfPage'\n\t};\n\n\t/**\n\t * Arguments for editor scroll command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tby?: string;\n\t\tvalue?: number;\n\t\trevealCursor?: boolean;\n\t\tselect?: boolean;\n\t}\n\n\texport function parse(args: RawArguments): ParsedArguments | null {\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit: Unit;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Page:\n\t\t\t\tunit = Unit.Page;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfPage:\n\t\t\t\tunit = Unit.HalfPage;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t}\n\n\t\tconst value = Math.floor(args.value || 1);\n\t\tconst revealCursor = !!args.revealCursor;\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tvalue: value,\n\t\t\trevealCursor: revealCursor,\n\t\t\tselect: (!!args.select)\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tvalue: number;\n\t\trevealCursor: boolean;\n\t\tselect: boolean;\n\t}\n\n\texport const enum Direction {\n\t\tUp = 1,\n\t\tDown = 2\n\t}\n\n\texport const enum Unit {\n\t\tLine = 1,\n\t\tWrappedLine = 2,\n\t\tPage = 3,\n\t\tHalfPage = 4\n\t}\n}\n\nexport namespace RevealLine_ {\n\n\tconst isRevealLineArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst reveaLineArg: RawArguments = arg;\n\n\t\tif (!types.isNumber(reveaLineArg.lineNumber)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const description = <ICommandHandlerDescription>{\n\t\tdescription: 'Reveal the given line at the given logical position',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Reveal line argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed .\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n\t\t\t\tconstraint: isRevealLineArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['lineNumber'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'lineNumber': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'at': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['top', 'center', 'bottom']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Arguments for reveal line command\n\t */\n\texport interface RawArguments {\n\t\tlineNumber?: number;\n\t\tat?: string;\n\t}\n\n\t/**\n\t * Values for reveal line 'at' argument\n\t */\n\texport const RawAtArgument = {\n\t\tTop: 'top',\n\t\tCenter: 'center',\n\t\tBottom: 'bottom'\n\t};\n}\n\nexport namespace CoreNavigationCommands {\n\n\tclass BaseMoveToCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.moveTo(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)\n\t\t\t\t]\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const MoveTo: CoreEditorCommand = registerEditorCommand(new BaseMoveToCommand({\n\t\tid: '_moveTo',\n\t\tinSelectionMode: false,\n\t\tprecondition: null\n\t}));\n\n\texport const MoveToSelect: CoreEditorCommand = registerEditorCommand(new BaseMoveToCommand({\n\t\tid: '_moveToSelect',\n\t\tinSelectionMode: true,\n\t\tprecondition: null\n\t}));\n\n\tabstract class ColumnSelectCommand extends CoreEditorCommand {\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tconst result = this._getColumnSelectResult(cursors.context, cursors.getPrimaryCursor(), cursors.getColumnSelectData(), args);\n\t\t\tcursors.setStates(args.source, CursorChangeReason.Explicit, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n\t\t\tcursors.setColumnSelectData({\n\t\t\t\ttoViewLineNumber: result.toLineNumber,\n\t\t\t\ttoViewVisualColumn: result.toVisualColumn\n\t\t\t});\n\t\t\tcursors.reveal(true, (result.reversed ? RevealTarget.TopMost : RevealTarget.BottomMost), ScrollType.Smooth);\n\t\t}\n\n\t\tprotected abstract _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult;\n\n\t}\n\n\texport const ColumnSelect: CoreEditorCommand = registerEditorCommand(new class extends ColumnSelectCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'columnSelect',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult {\n\n\t\t\t// validate `args`\n\t\t\tconst validatedPosition = context.model.validatePosition(args.position);\n\n\t\t\tlet validatedViewPosition: Position;\n\t\t\tif (args.viewPosition) {\n\t\t\t\tvalidatedViewPosition = context.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n\t\t\t} else {\n\t\t\t\tvalidatedViewPosition = context.convertModelPositionToViewPosition(validatedPosition);\n\t\t\t}\n\n\t\t\treturn ColumnSelection.columnSelect(context.config, context.viewModel, primary.viewState.selection, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n\t\t}\n\t});\n\n\texport const CursorColumnSelectLeft: CoreEditorCommand = registerEditorCommand(new class extends ColumnSelectCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorColumnSelectLeft',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.LeftArrow,\n\t\t\t\t\tlinux: { primary: 0 }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectLeft(context.config, context.viewModel, primary.viewState, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t\t}\n\t});\n\n\texport const CursorColumnSelectRight: CoreEditorCommand = registerEditorCommand(new class extends ColumnSelectCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorColumnSelectRight',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.RightArrow,\n\t\t\t\t\tlinux: { primary: 0 }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectRight(context.config, context.viewModel, primary.viewState, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t\t}\n\t});\n\n\tclass ColumnSelectUpCommand extends ColumnSelectCommand {\n\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectUp(context.config, context.viewModel, primary.viewState, this._isPaged, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectUp: CoreEditorCommand = registerEditorCommand(new ColumnSelectUpCommand({\n\t\tisPaged: false,\n\t\tid: 'cursorColumnSelectUp',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.UpArrow,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport const CursorColumnSelectPageUp: CoreEditorCommand = registerEditorCommand(new ColumnSelectUpCommand({\n\t\tisPaged: true,\n\t\tid: 'cursorColumnSelectPageUp',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.PageUp,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\tclass ColumnSelectDownCommand extends ColumnSelectCommand {\n\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(context: CursorContext, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: any): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectDown(context.config, context.viewModel, primary.viewState, this._isPaged, prevColumnSelectData.toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectDown: CoreEditorCommand = registerEditorCommand(new ColumnSelectDownCommand({\n\t\tisPaged: false,\n\t\tid: 'cursorColumnSelectDown',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.DownArrow,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport const CursorColumnSelectPageDown: CoreEditorCommand = registerEditorCommand(new ColumnSelectDownCommand({\n\t\tisPaged: true,\n\t\tid: 'cursorColumnSelectPageDown',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.PageDown,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport class CursorMoveImpl extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorMove',\n\t\t\t\tprecondition: null,\n\t\t\t\tdescription: CursorMove_.description\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst parsed = CursorMove_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._runCursorMove(cursors, args.source, parsed);\n\t\t}\n\n\t\t_runCursorMove(cursors: ICursors, source: string, args: CursorMove_.ParsedArguments): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\tsource,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.move(cursors.context, cursors.getAll(), args)\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const CursorMove: CursorMoveImpl = registerEditorCommand(new CursorMoveImpl());\n\n\tconst enum Constants {\n\t\tPAGE_SIZE_MARKER = -1\n\t}\n\n\tclass CursorMoveBasedCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _staticArgs: CursorMove_.ParsedArguments;\n\n\t\tconstructor(opts: ICommandOptions & { args: CursorMove_.ParsedArguments }) {\n\t\t\tsuper(opts);\n\t\t\tthis._staticArgs = opts.args;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, dynamicArgs: any): void {\n\t\t\tlet args = this._staticArgs;\n\t\t\tif (this._staticArgs.value === Constants.PAGE_SIZE_MARKER) {\n\t\t\t\t// -1 is a marker for page size\n\t\t\t\targs = {\n\t\t\t\t\tdirection: this._staticArgs.direction,\n\t\t\t\t\tunit: this._staticArgs.unit,\n\t\t\t\t\tselect: this._staticArgs.select,\n\t\t\t\t\tvalue: cursors.context.config.pageSize\n\t\t\t\t};\n\t\t\t}\n\t\t\tCursorMove._runCursorMove(cursors, dynamicArgs.source, args);\n\t\t}\n\t}\n\n\texport const CursorLeft: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorLeft',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.LeftArrow,\n\t\t\tmac: { primary: KeyCode.LeftArrow, secondary: [KeyMod.WinCtrl | KeyCode.KEY_B] }\n\t\t}\n\t}));\n\n\texport const CursorLeftSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorLeftSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.LeftArrow\n\t\t}\n\t}));\n\n\texport const CursorRight: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorRight',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.RightArrow,\n\t\t\tmac: { primary: KeyCode.RightArrow, secondary: [KeyMod.WinCtrl | KeyCode.KEY_F] }\n\t\t}\n\t}));\n\n\texport const CursorRightSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorRightSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.RightArrow\n\t\t}\n\t}));\n\n\texport const CursorUp: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorUp',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.UpArrow,\n\t\t\tmac: { primary: KeyCode.UpArrow, secondary: [KeyMod.WinCtrl | KeyCode.KEY_P] }\n\t\t}\n\t}));\n\n\texport const CursorUpSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorUpSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow],\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.UpArrow },\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\texport const CursorPageUp: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageUp',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.PageUp\n\t\t}\n\t}));\n\n\texport const CursorPageUpSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageUpSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageUp\n\t\t}\n\t}));\n\n\texport const CursorDown: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorDown',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.DownArrow,\n\t\t\tmac: { primary: KeyCode.DownArrow, secondary: [KeyMod.WinCtrl | KeyCode.KEY_N] }\n\t\t}\n\t}));\n\n\texport const CursorDownSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorDownSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow],\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.DownArrow },\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport const CursorPageDown: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageDown',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.PageDown\n\t\t}\n\t}));\n\n\texport const CursorPageDownSelect: CoreEditorCommand = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageDownSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageDown\n\t\t}\n\t}));\n\n\texport const CreateCursor: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'createCursor',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst context = cursors.context;\n\n\t\t\tlet newState: PartialCursorState;\n\t\t\tif (args.wholeLine) {\n\t\t\t\tnewState = CursorMoveCommands.line(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n\t\t\t} else {\n\t\t\t\tnewState = CursorMoveCommands.moveTo(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n\t\t\t}\n\n\t\t\tconst states: PartialCursorState[] = cursors.getAll();\n\n\t\t\t// Check if we should remove a cursor (sort of like a toggle)\n\t\t\tif (states.length > 1) {\n\t\t\t\tconst newModelPosition = (newState.modelState ? newState.modelState.position : null);\n\t\t\t\tconst newViewPosition = (newState.viewState ? newState.viewState.position : null);\n\n\t\t\t\tfor (let i = 0, len = states.length; i < len; i++) {\n\t\t\t\t\tconst state = states[i];\n\n\t\t\t\t\tif (newModelPosition && !state.modelState!.selection.containsPosition(newModelPosition)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newViewPosition && !state.viewState!.selection.containsPosition(newViewPosition)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// => Remove the cursor\n\t\t\t\t\tstates.splice(i, 1);\n\n\t\t\t\t\tcursors.context.model.pushStackElement();\n\t\t\t\t\tcursors.setStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\tstates\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// => Add the new cursor\n\t\t\tstates.push(newState);\n\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tstates\n\t\t\t);\n\t\t}\n\t});\n\n\texport const LastCursorMoveToSelect: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: '_lastCursorMoveToSelect',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst context = cursors.context;\n\n\t\t\tconst lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n\n\t\t\tconst states = cursors.getAll();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(context, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t});\n\n\tclass HomeCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfLine(cursors.context, cursors.getAll(), this._inSelectionMode)\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const CursorHome: CoreEditorCommand = registerEditorCommand(new HomeCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorHome',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.Home,\n\t\t\tmac: { primary: KeyCode.Home, secondary: [KeyMod.CtrlCmd | KeyCode.LeftArrow] }\n\t\t}\n\t}));\n\n\texport const CursorHomeSelect: CoreEditorCommand = registerEditorCommand(new HomeCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorHomeSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.Home, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow] }\n\t\t}\n\t}));\n\n\texport const CursorLineStart: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorLineStart',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_A }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(cursors.context, cursors.getAll())\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\n\t\tprivate _exec(context: CursorContext, cursors: CursorState[]): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tresult[i] = CursorState.fromModelState(cursor.modelState.move(false, lineNumber, 1, 0));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tclass EndCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfLine(cursors.context, cursors.getAll(), this._inSelectionMode)\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const CursorEnd: CoreEditorCommand = registerEditorCommand(new EndCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorEnd',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.End,\n\t\t\tmac: { primary: KeyCode.End, secondary: [KeyMod.CtrlCmd | KeyCode.RightArrow] }\n\t\t}\n\t}));\n\n\texport const CursorEndSelect: CoreEditorCommand = registerEditorCommand(new EndCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorEndSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.End, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow] }\n\t\t}\n\t}));\n\n\texport const CursorLineEnd: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorLineEnd',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_E }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(cursors.context, cursors.getAll())\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\n\t\tprivate _exec(context: CursorContext, cursors: CursorState[]): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tconst maxColumn = context.model.getLineMaxColumn(lineNumber);\n\t\t\t\tresult[i] = CursorState.fromModelState(cursor.modelState.move(false, lineNumber, maxColumn, 0));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tclass TopCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode)\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const CursorTop: CoreEditorCommand = registerEditorCommand(new TopCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorTop',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\texport const CursorTopSelect: CoreEditorCommand = registerEditorCommand(new TopCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorTopSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\tclass BottomCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode)\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const CursorBottom: CoreEditorCommand = registerEditorCommand(new BottomCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorBottom',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport const CursorBottomSelect: CoreEditorCommand = registerEditorCommand(new BottomCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorBottomSelect',\n\t\tprecondition: null,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport class EditorScrollImpl extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'editorScroll',\n\t\t\t\tprecondition: null,\n\t\t\t\tdescription: EditorScroll_.description\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst parsed = EditorScroll_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._runEditorScroll(cursors, args.source, parsed);\n\t\t}\n\n\t\t_runEditorScroll(cursors: ICursors, source: string, args: EditorScroll_.ParsedArguments): void {\n\n\t\t\tconst desiredScrollTop = this._computeDesiredScrollTop(cursors.context, args);\n\n\t\t\tif (args.revealCursor) {\n\t\t\t\t// must ensure cursor is in new visible range\n\t\t\t\tconst desiredVisibleViewRange = cursors.context.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n\t\t\t\tcursors.setStates(\n\t\t\t\t\tsource,\n\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t[\n\t\t\t\t\t\tCursorMoveCommands.findPositionInViewportIfOutside(cursors.context, cursors.getPrimaryCursor(), desiredVisibleViewRange, args.select)\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcursors.scrollTo(desiredScrollTop);\n\t\t}\n\n\t\tprivate _computeDesiredScrollTop(context: CursorContext, args: EditorScroll_.ParsedArguments): number {\n\n\t\t\tif (args.unit === EditorScroll_.Unit.Line) {\n\t\t\t\t// scrolling by model lines\n\t\t\t\tconst visibleModelRange = context.getCompletelyVisibleModelRange();\n\n\t\t\t\tlet desiredTopModelLineNumber: number;\n\t\t\t\tif (args.direction === EditorScroll_.Direction.Up) {\n\t\t\t\t\t// must go x model lines up\n\t\t\t\t\tdesiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n\t\t\t\t} else {\n\t\t\t\t\t// must go x model lines down\n\t\t\t\t\tdesiredTopModelLineNumber = Math.min(context.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n\t\t\t\t}\n\n\t\t\t\tconst desiredTopViewPosition = context.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n\t\t\t\treturn context.getVerticalOffsetForViewLine(desiredTopViewPosition.lineNumber);\n\t\t\t}\n\n\t\t\tlet noOfLines: number;\n\t\t\tif (args.unit === EditorScroll_.Unit.Page) {\n\t\t\t\tnoOfLines = context.config.pageSize * args.value;\n\t\t\t} else if (args.unit === EditorScroll_.Unit.HalfPage) {\n\t\t\t\tnoOfLines = Math.round(context.config.pageSize / 2) * args.value;\n\t\t\t} else {\n\t\t\t\tnoOfLines = args.value;\n\t\t\t}\n\t\t\tconst deltaLines = (args.direction === EditorScroll_.Direction.Up ? -1 : 1) * noOfLines;\n\t\t\treturn context.getCurrentScrollTop() + deltaLines * context.config.lineHeight;\n\t\t}\n\t}\n\n\texport const EditorScroll: EditorScrollImpl = registerEditorCommand(new EditorScrollImpl());\n\n\texport const ScrollLineUp: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollLineUp',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageUp }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tEditorScroll._runEditorScroll(cursors, args.source, {\n\t\t\t\tdirection: EditorScroll_.Direction.Up,\n\t\t\t\tunit: EditorScroll_.Unit.WrappedLine,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollPageUp: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollPageUp',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageUp,\n\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageUp },\n\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageUp }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tEditorScroll._runEditorScroll(cursors, args.source, {\n\t\t\t\tdirection: EditorScroll_.Direction.Up,\n\t\t\t\tunit: EditorScroll_.Unit.Page,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollLineDown: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollLineDown',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageDown }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tEditorScroll._runEditorScroll(cursors, args.source, {\n\t\t\t\tdirection: EditorScroll_.Direction.Down,\n\t\t\t\tunit: EditorScroll_.Unit.WrappedLine,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollPageDown: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollPageDown',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageDown,\n\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageDown },\n\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageDown }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tEditorScroll._runEditorScroll(cursors, args.source, {\n\t\t\t\tdirection: EditorScroll_.Direction.Down,\n\t\t\t\tunit: EditorScroll_.Unit.Page,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false\n\t\t\t});\n\t\t}\n\t});\n\n\tclass WordCommand extends CoreEditorCommand {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.word(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position)\n\t\t\t\t]\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const WordSelect: CoreEditorCommand = registerEditorCommand(new WordCommand({\n\t\tinSelectionMode: false,\n\t\tid: '_wordSelect',\n\t\tprecondition: null\n\t}));\n\n\texport const WordSelectDrag: CoreEditorCommand = registerEditorCommand(new WordCommand({\n\t\tinSelectionMode: true,\n\t\tid: '_wordSelectDrag',\n\t\tprecondition: null\n\t}));\n\n\texport const LastCursorWordSelect: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'lastCursorWordSelect',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst context = cursors.context;\n\n\t\t\tconst lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n\n\t\t\tconst states = cursors.getAll();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tconst lastAddedState = states[lastAddedCursorIndex];\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.word(context, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n\n\t\t\tcontext.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t});\n\n\tclass LineCommand extends CoreEditorCommand {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.line(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)\n\t\t\t\t]\n\t\t\t);\n\t\t\tcursors.reveal(false, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t}\n\n\texport const LineSelect: CoreEditorCommand = registerEditorCommand(new LineCommand({\n\t\tinSelectionMode: false,\n\t\tid: '_lineSelect',\n\t\tprecondition: null\n\t}));\n\n\texport const LineSelectDrag: CoreEditorCommand = registerEditorCommand(new LineCommand({\n\t\tinSelectionMode: true,\n\t\tid: '_lineSelectDrag',\n\t\tprecondition: null\n\t}));\n\n\tclass LastCursorLineCommand extends CoreEditorCommand {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean; }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n\n\t\t\tconst states = cursors.getAll();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.line(cursors.context, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t}\n\n\texport const LastCursorLineSelect: CoreEditorCommand = registerEditorCommand(new LastCursorLineCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'lastCursorLineSelect',\n\t\tprecondition: null\n\t}));\n\n\texport const LastCursorLineSelectDrag: CoreEditorCommand = registerEditorCommand(new LastCursorLineCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'lastCursorLineSelectDrag',\n\t\tprecondition: null\n\t}));\n\n\texport const ExpandLineSelection: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'expandLineSelection',\n\t\t\t\tprecondition: null,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_L\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.expandLineSelection(cursors.context, cursors.getAll())\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\n\t});\n\n\texport const CancelSelection: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cancelSelection',\n\t\t\t\tprecondition: EditorContextKeys.hasNonEmptySelection,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.cancelSelection(cursors.context, cursors.getPrimaryCursor())\n\t\t\t\t]\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t});\n\n\texport const RemoveSecondaryCursors: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'removeSecondaryCursors',\n\t\t\t\tprecondition: EditorContextKeys.hasMultipleSelections,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT + 1,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tcursors.getPrimaryCursor()\n\t\t\t\t]\n\t\t\t);\n\t\t\tcursors.reveal(true, RevealTarget.Primary, ScrollType.Smooth);\n\t\t}\n\t});\n\n\texport const RevealLine: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'revealLine',\n\t\t\t\tprecondition: null,\n\t\t\t\tdescription: RevealLine_.description\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tconst revealLineArg = <RevealLine_.RawArguments>args;\n\t\t\tlet lineNumber = (revealLineArg.lineNumber || 0) + 1;\n\t\t\tif (lineNumber < 1) {\n\t\t\t\tlineNumber = 1;\n\t\t\t}\n\t\t\tconst lineCount = cursors.context.model.getLineCount();\n\t\t\tif (lineNumber > lineCount) {\n\t\t\t\tlineNumber = lineCount;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\tlineNumber, 1,\n\t\t\t\tlineNumber, cursors.context.model.getLineMaxColumn(lineNumber)\n\t\t\t);\n\n\t\t\tlet revealAt = VerticalRevealType.Simple;\n\t\t\tif (revealLineArg.at) {\n\t\t\t\tswitch (revealLineArg.at) {\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Top:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Top;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Center:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Center;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Bottom:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Bottom;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst viewRange = cursors.context.convertModelRangeToViewRange(range);\n\n\t\t\tcursors.revealRange(false, viewRange, revealAt, ScrollType.Smooth);\n\t\t}\n\t});\n\n\texport const SelectAll: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'selectAll',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.selectAll(cursors.context, cursors.getPrimaryCursor())\n\t\t\t\t]\n\t\t\t);\n\t\t}\n\t});\n\n\texport const SetSelection: CoreEditorCommand = registerEditorCommand(new class extends CoreEditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'setSelection',\n\t\t\t\tprecondition: null\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(cursors: ICursors, args: any): void {\n\t\t\tcursors.context.model.pushStackElement();\n\t\t\tcursors.setStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorState.fromModelSelection(args.selection)\n\t\t\t\t]\n\t\t\t);\n\t\t}\n\t});\n}\n\nexport namespace CoreEditingCommands {\n\n\texport abstract class CoreEditingCommand extends EditorCommand {\n\t\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\t\tconst cursors = editor._getCursors();\n\t\t\tif (!cursors) {\n\t\t\t\t// the editor has no view => has no cursors\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runCoreEditingCommand(editor, cursors, args || {});\n\t\t}\n\n\t\tpublic abstract runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void;\n\t}\n\n\texport const LineBreakInsert: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'lineBreakInsert',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_O }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, TypeOperations.lineBreakInsert(cursors.context.config, cursors.context.model, cursors.getAll().map(s => s.modelState.selection)));\n\t\t}\n\t});\n\n\texport const Outdent: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'outdent',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus\n\t\t\t\t\t),\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.Tab\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, TypeOperations.outdent(cursors.context.config, cursors.context.model, cursors.getAll().map(s => s.modelState.selection)));\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t});\n\n\texport const Tab: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'tab',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus\n\t\t\t\t\t),\n\t\t\t\t\tprimary: KeyCode.Tab\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, TypeOperations.tab(cursors.context.config, cursors.context.model, cursors.getAll().map(s => s.modelState.selection)));\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t});\n\n\texport const DeleteLeft: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'deleteLeft',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Backspace,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Backspace],\n\t\t\t\t\tmac: { primary: KeyCode.Backspace, secondary: [KeyMod.Shift | KeyCode.Backspace, KeyMod.WinCtrl | KeyCode.KEY_H, KeyMod.WinCtrl | KeyCode.Backspace] }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void {\n\t\t\tconst [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(s => s.modelState.selection));\n\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t\teditor.executeCommands(this.id, commands);\n\t\t\tcursors.setPrevEditOperationType(EditOperationType.DeletingLeft);\n\t\t}\n\t});\n\n\texport const DeleteRight: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'deleteRight',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Delete,\n\t\t\t\t\tmac: { primary: KeyCode.Delete, secondary: [KeyMod.WinCtrl | KeyCode.KEY_D, KeyMod.WinCtrl | KeyCode.Delete] }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, cursors: ICursors, args: any): void {\n\t\t\tconst [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(s => s.modelState.selection));\n\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t\teditor.executeCommands(this.id, commands);\n\t\t\tcursors.setPrevEditOperationType(EditOperationType.DeletingRight);\n\t\t}\n\t});\n\n}\n\nfunction registerCommand(command: Command) {\n\tcommand.register();\n}\n\n/**\n * A command that will:\n *  1. invoke a command on the focused editor.\n *  2. otherwise, invoke a browser built-in command on the `activeElement`.\n *  3. otherwise, invoke a command on the workbench active editor.\n */\nclass EditorOrNativeTextInputCommand extends Command {\n\n\tprivate readonly _editorHandler: string | EditorCommand;\n\tprivate readonly _inputHandler: string;\n\n\tconstructor(opts: ICommandOptions & { editorHandler: string | EditorCommand; inputHandler: string; }) {\n\t\tsuper(opts);\n\t\tthis._editorHandler = opts.editorHandler;\n\t\tthis._inputHandler = opts.inputHandler;\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\n\t\tconst focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\treturn this._runEditorHandler(accessor, focusedEditor, args);\n\t\t}\n\n\t\t// Ignore this action when user is focused on an element that allows for entering text\n\t\tconst activeElement = <HTMLElement>document.activeElement;\n\t\tif (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n\t\t\tdocument.execCommand(this._inputHandler);\n\t\t\treturn;\n\t\t}\n\n\t\t// Redirecting to active editor\n\t\tconst activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\t\tif (activeEditor) {\n\t\t\tactiveEditor.focus();\n\t\t\treturn this._runEditorHandler(accessor, activeEditor, args);\n\t\t}\n\t}\n\n\tprivate _runEditorHandler(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tconst HANDLER = this._editorHandler;\n\t\tif (typeof HANDLER === 'string') {\n\t\t\teditor.trigger('keyboard', HANDLER, args);\n\t\t} else {\n\t\t\targs = args || {};\n\t\t\targs.source = 'keyboard';\n\t\t\tHANDLER.runEditorCommand(accessor, editor, args);\n\t\t}\n\t}\n}\n\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n\n\tprivate readonly _handlerId: string;\n\n\tconstructor(id: string, handlerId: string, description?: ICommandHandlerDescription) {\n\t\tsuper({\n\t\t\tid: id,\n\t\t\tprecondition: null,\n\t\t\tdescription: description\n\t\t});\n\t\tthis._handlerId = handlerId;\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.trigger('keyboard', this._handlerId, args);\n\t}\n}\n\nregisterCommand(new EditorOrNativeTextInputCommand({\n\teditorHandler: CoreNavigationCommands.SelectAll,\n\tinputHandler: 'selectAll',\n\tid: 'editor.action.selectAll',\n\tprecondition: EditorContextKeys.textInputFocus,\n\tkbOpts: {\n\t\tweight: CORE_WEIGHT,\n\t\tkbExpr: null,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_A\n\t},\n\tmenubarOpts: {\n\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\tgroup: '1_basic',\n\t\ttitle: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\n\t\torder: 1\n\t}\n}));\n\nregisterCommand(new EditorOrNativeTextInputCommand({\n\teditorHandler: Handler.Undo,\n\tinputHandler: 'undo',\n\tid: Handler.Undo,\n\tprecondition: EditorContextKeys.writable,\n\tkbOpts: {\n\t\tweight: CORE_WEIGHT,\n\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_Z\n\t},\n\tmenubarOpts: {\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '1_do',\n\t\ttitle: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\n\t\torder: 1\n\t}\n}));\nregisterCommand(new EditorHandlerCommand('default:' + Handler.Undo, Handler.Undo));\n\nregisterCommand(new EditorOrNativeTextInputCommand({\n\teditorHandler: Handler.Redo,\n\tinputHandler: 'redo',\n\tid: Handler.Redo,\n\tprecondition: EditorContextKeys.writable,\n\tkbOpts: {\n\t\tweight: CORE_WEIGHT,\n\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_Y,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Z],\n\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Z }\n\t},\n\tmenubarOpts: {\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '1_do',\n\t\ttitle: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\n\t\torder: 2\n\t}\n}));\nregisterCommand(new EditorHandlerCommand('default:' + Handler.Redo, Handler.Redo));\n\nfunction registerOverwritableCommand(handlerId: string, description?: ICommandHandlerDescription): void {\n\tregisterCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n\tregisterCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\n\nregisterOverwritableCommand(Handler.Type, {\n\tdescription: `Type`,\n\targs: [{\n\t\tname: 'args',\n\t\tschema: {\n\t\t\t'type': 'object',\n\t\t\t'required': ['text'],\n\t\t\t'properties': {\n\t\t\t\t'text': {\n\t\t\t\t\t'type': 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t}]\n});\nregisterOverwritableCommand(Handler.ReplacePreviousChar);\nregisterOverwritableCommand(Handler.CompositionStart);\nregisterOverwritableCommand(Handler.CompositionEnd);\nregisterOverwritableCommand(Handler.Paste);\nregisterOverwritableCommand(Handler.Cut);\n"]}]}