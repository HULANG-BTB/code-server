{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsWidgets.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsWidgets.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"../common/extensions\", \"vs/base/browser/dom\", \"vs/base/common/platform\", \"vs/nls\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/label/common/label\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActions\", \"vs/platform/theme/common/themeService\", \"vs/workbench/common/theme\", \"vs/platform/workspace/common/workspace\", \"vs/platform/remote/common/remoteHosts\", \"vs/platform/windows/common/windows\", \"vs/css!./media/extensionsWidgets\"], function (require, exports, lifecycle_1, extensions_1, dom_1, platform, nls_1, extensionManagement_1, label_1, extensionsActions_1, themeService_1, theme_1, workspace_1, remoteHosts_1, windows_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtensionWidget extends lifecycle_1.Disposable {\n        get extension() { return this._extension; }\n        set extension(extension) { this._extension = extension; this.update(); }\n        update() { this.render(); }\n    }\n    exports.ExtensionWidget = ExtensionWidget;\n    let Label = class Label extends ExtensionWidget {\n        constructor(element, fn, extensionsWorkbenchService) {\n            super();\n            this.element = element;\n            this.fn = fn;\n            this.render();\n        }\n        render() {\n            this.element.textContent = this.extension ? this.fn(this.extension) : '';\n        }\n    };\n    Label = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService)\n    ], Label);\n    exports.Label = Label;\n    let InstallCountWidget = class InstallCountWidget extends ExtensionWidget {\n        constructor(container, small, extensionsWorkbenchService) {\n            super();\n            this.container = container;\n            this.small = small;\n            dom_1.addClass(container, 'extension-install-count');\n            this.render();\n        }\n        render() {\n            this.container.innerHTML = '';\n            if (!this.extension) {\n                return;\n            }\n            const installCount = this.extension.installCount;\n            if (installCount === undefined) {\n                return;\n            }\n            let installLabel;\n            if (this.small) {\n                if (installCount > 1000000) {\n                    installLabel = `${Math.floor(installCount / 100000) / 10}M`;\n                }\n                else if (installCount > 1000) {\n                    installLabel = `${Math.floor(installCount / 1000)}K`;\n                }\n                else {\n                    installLabel = String(installCount);\n                }\n            }\n            else {\n                installLabel = installCount.toLocaleString(platform.locale);\n            }\n            dom_1.append(this.container, dom_1.$('span.octicon.octicon-cloud-download'));\n            const count = dom_1.append(this.container, dom_1.$('span.count'));\n            count.textContent = installLabel;\n        }\n    };\n    InstallCountWidget = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService)\n    ], InstallCountWidget);\n    exports.InstallCountWidget = InstallCountWidget;\n    class RatingsWidget extends ExtensionWidget {\n        constructor(container, small) {\n            super();\n            this.container = container;\n            this.small = small;\n            dom_1.addClass(container, 'extension-ratings');\n            if (this.small) {\n                dom_1.addClass(container, 'small');\n            }\n            this.render();\n        }\n        render() {\n            this.container.innerHTML = '';\n            if (!this.extension) {\n                return;\n            }\n            if (this.extension.rating === undefined) {\n                return;\n            }\n            if (this.small && !this.extension.ratingCount) {\n                return;\n            }\n            const rating = Math.round(this.extension.rating * 2) / 2;\n            if (this.small) {\n                dom_1.append(this.container, dom_1.$('span.full.star'));\n                const count = dom_1.append(this.container, dom_1.$('span.count'));\n                count.textContent = String(rating);\n            }\n            else {\n                for (let i = 1; i <= 5; i++) {\n                    if (rating >= i) {\n                        dom_1.append(this.container, dom_1.$('span.full.star'));\n                    }\n                    else if (rating >= i - 0.5) {\n                        dom_1.append(this.container, dom_1.$('span.half.star'));\n                    }\n                    else {\n                        dom_1.append(this.container, dom_1.$('span.empty.star'));\n                    }\n                }\n            }\n            this.container.title = this.extension.ratingCount === 1 ? nls_1.localize('ratedBySingleUser', \"Rated by 1 user\")\n                : typeof this.extension.ratingCount === 'number' && this.extension.ratingCount > 1 ? nls_1.localize('ratedByUsers', \"Rated by {0} users\", this.extension.ratingCount) : nls_1.localize('noRating', \"No rating\");\n        }\n    }\n    exports.RatingsWidget = RatingsWidget;\n    let RecommendationWidget = class RecommendationWidget extends ExtensionWidget {\n        constructor(parent, themeService, extensionTipsService) {\n            super();\n            this.parent = parent;\n            this.themeService = themeService;\n            this.extensionTipsService = extensionTipsService;\n            this.disposables = [];\n            this.render();\n            this._register(lifecycle_1.toDisposable(() => this.clear()));\n            this._register(this.extensionTipsService.onRecommendationChange(() => this.render()));\n        }\n        clear() {\n            this.parent.title = '';\n            this.parent.setAttribute('aria-label', this.extension ? nls_1.localize('viewExtensionDetailsAria', \"{0}. Press enter for extension details.\", this.extension.displayName) : '');\n            if (this.element) {\n                this.parent.removeChild(this.element);\n            }\n            this.element = undefined;\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n        render() {\n            this.clear();\n            if (!this.extension) {\n                return;\n            }\n            const extRecommendations = this.extensionTipsService.getAllRecommendationsWithReason();\n            if (extRecommendations[this.extension.identifier.id.toLowerCase()]) {\n                this.element = dom_1.append(this.parent, dom_1.$('div.bookmark'));\n                const recommendation = dom_1.append(this.element, dom_1.$('.recommendation'));\n                dom_1.append(recommendation, dom_1.$('span.octicon.octicon-star'));\n                const applyBookmarkStyle = (theme) => {\n                    const bgColor = theme.getColor(extensionsActions_1.extensionButtonProminentBackground);\n                    const fgColor = theme.getColor(extensionsActions_1.extensionButtonProminentForeground);\n                    recommendation.style.borderTopColor = bgColor ? bgColor.toString() : 'transparent';\n                    recommendation.style.color = fgColor ? fgColor.toString() : 'white';\n                };\n                applyBookmarkStyle(this.themeService.getTheme());\n                this.themeService.onThemeChange(applyBookmarkStyle, this, this.disposables);\n                this.parent.title = extRecommendations[this.extension.identifier.id.toLowerCase()].reasonText;\n                this.parent.setAttribute('aria-label', nls_1.localize('viewRecommendedExtensionDetailsAria', \"{0}. {1} Press enter for extension details.\", this.extension.displayName, extRecommendations[this.extension.identifier.id.toLowerCase()].reasonText));\n            }\n        }\n    };\n    RecommendationWidget = __decorate([\n        __param(1, themeService_1.IThemeService),\n        __param(2, extensionManagement_1.IExtensionTipsService)\n    ], RecommendationWidget);\n    exports.RecommendationWidget = RecommendationWidget;\n    let RemoteBadgeWidget = class RemoteBadgeWidget extends ExtensionWidget {\n        constructor(parent, labelService, themeService, extensionManagementServerService, workspaceContextService, windowService) {\n            super();\n            this.parent = parent;\n            this.labelService = labelService;\n            this.themeService = themeService;\n            this.extensionManagementServerService = extensionManagementServerService;\n            this.workspaceContextService = workspaceContextService;\n            this.windowService = windowService;\n            this.disposables = [];\n            this.render();\n            this._register(lifecycle_1.toDisposable(() => this.clear()));\n        }\n        clear() {\n            if (this.element) {\n                this.parent.removeChild(this.element);\n            }\n            this.element = null;\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n        render() {\n            this.clear();\n            if (!this.extension || !this.extension.local) {\n                return;\n            }\n            const server = this.extensionManagementServerService.getExtensionManagementServer(this.extension.local.location);\n            if (server === this.extensionManagementServerService.remoteExtensionManagementServer) {\n                this.element = dom_1.append(this.parent, dom_1.$('div.extension-remote-badge'));\n                dom_1.append(this.element, dom_1.$('span.octicon.octicon-file-symlink-directory'));\n                const applyBadgeStyle = () => {\n                    if (!this.element) {\n                        return;\n                    }\n                    const bgColor = this.themeService.getTheme().getColor(theme_1.STATUS_BAR_HOST_NAME_BACKGROUND);\n                    const fgColor = this.workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY ? this.themeService.getTheme().getColor(theme_1.STATUS_BAR_NO_FOLDER_FOREGROUND) : this.themeService.getTheme().getColor(theme_1.STATUS_BAR_FOREGROUND);\n                    this.element.style.backgroundColor = bgColor ? bgColor.toString() : '';\n                    this.element.style.color = fgColor ? fgColor.toString() : '';\n                };\n                applyBadgeStyle();\n                this.themeService.onThemeChange(applyBadgeStyle, this, this.disposables);\n                this.workspaceContextService.onDidChangeWorkbenchState(applyBadgeStyle, this, this.disposables);\n                const updateTitle = () => {\n                    if (this.element) {\n                        this.element.title = nls_1.localize('remote extension title', \"Extension in {0}\", this.labelService.getHostLabel(remoteHosts_1.REMOTE_HOST_SCHEME, this.windowService.getConfiguration().remoteAuthority));\n                    }\n                };\n                this.labelService.onDidChangeFormatters(() => updateTitle(), this, this.disposables);\n                updateTitle();\n            }\n        }\n    };\n    RemoteBadgeWidget = __decorate([\n        __param(1, label_1.ILabelService),\n        __param(2, themeService_1.IThemeService),\n        __param(3, extensionManagement_1.IExtensionManagementServerService),\n        __param(4, workspace_1.IWorkspaceContextService),\n        __param(5, windows_1.IWindowService)\n    ], RemoteBadgeWidget);\n    exports.RemoteBadgeWidget = RemoteBadgeWidget;\n});\n",null]}