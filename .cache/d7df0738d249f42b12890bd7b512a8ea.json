{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/controller/cursorCommon\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\"], function (require, exports, cursorCommon_1, position_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CursorPosition {\n        constructor(lineNumber, column, leftoverVisibleColumns) {\n            this.lineNumber = lineNumber;\n            this.column = column;\n            this.leftoverVisibleColumns = leftoverVisibleColumns;\n        }\n    }\n    exports.CursorPosition = CursorPosition;\n    class MoveOperations {\n        static left(config, model, lineNumber, column) {\n            if (column > model.getLineMinColumn(lineNumber)) {\n                if (cursorCommon_1.CursorColumns.isLowSurrogate(model, lineNumber, column - 2)) {\n                    // character before column is a low surrogate\n                    column = column - 2;\n                }\n                else {\n                    column = column - 1;\n                }\n            }\n            else if (lineNumber > 1) {\n                lineNumber = lineNumber - 1;\n                column = model.getLineMaxColumn(lineNumber);\n            }\n            return new CursorPosition(lineNumber, column, 0);\n        }\n        static moveLeft(config, model, cursor, inSelectionMode, noOfColumns) {\n            let lineNumber, column;\n            if (cursor.hasSelection() && !inSelectionMode) {\n                // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n                lineNumber = cursor.selection.startLineNumber;\n                column = cursor.selection.startColumn;\n            }\n            else {\n                let r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n                lineNumber = r.lineNumber;\n                column = r.column;\n            }\n            return cursor.move(inSelectionMode, lineNumber, column, 0);\n        }\n        static right(config, model, lineNumber, column) {\n            if (column < model.getLineMaxColumn(lineNumber)) {\n                if (cursorCommon_1.CursorColumns.isHighSurrogate(model, lineNumber, column - 1)) {\n                    // character after column is a high surrogate\n                    column = column + 2;\n                }\n                else {\n                    column = column + 1;\n                }\n            }\n            else if (lineNumber < model.getLineCount()) {\n                lineNumber = lineNumber + 1;\n                column = model.getLineMinColumn(lineNumber);\n            }\n            return new CursorPosition(lineNumber, column, 0);\n        }\n        static moveRight(config, model, cursor, inSelectionMode, noOfColumns) {\n            let lineNumber, column;\n            if (cursor.hasSelection() && !inSelectionMode) {\n                // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n                lineNumber = cursor.selection.endLineNumber;\n                column = cursor.selection.endColumn;\n            }\n            else {\n                let r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n                lineNumber = r.lineNumber;\n                column = r.column;\n            }\n            return cursor.move(inSelectionMode, lineNumber, column, 0);\n        }\n        static down(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n            const currentVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n            lineNumber = lineNumber + count;\n            let lineCount = model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n                if (allowMoveOnLastLine) {\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n                else {\n                    column = Math.min(model.getLineMaxColumn(lineNumber), column);\n                    if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                        column = column - 1;\n                    }\n                }\n            }\n            else {\n                column = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n                if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                    column = column - 1;\n                }\n            }\n            leftoverVisibleColumns = currentVisibleColumn - cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n            return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n        }\n        static moveDown(config, model, cursor, inSelectionMode, linesCount) {\n            let lineNumber, column;\n            if (cursor.hasSelection() && !inSelectionMode) {\n                // If we are in selection mode, move down acts relative to the end of selection\n                lineNumber = cursor.selection.endLineNumber;\n                column = cursor.selection.endColumn;\n            }\n            else {\n                lineNumber = cursor.position.lineNumber;\n                column = cursor.position.column;\n            }\n            let r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n            return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n        }\n        static translateDown(config, model, cursor) {\n            let selection = cursor.selection;\n            let selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n            let position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n            return new cursorCommon_1.SingleCursorState(new range_1.Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new position_1.Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n        }\n        static up(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n            const currentVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n            lineNumber = lineNumber - count;\n            if (lineNumber < 1) {\n                lineNumber = 1;\n                if (allowMoveOnFirstLine) {\n                    column = model.getLineMinColumn(lineNumber);\n                }\n                else {\n                    column = Math.min(model.getLineMaxColumn(lineNumber), column);\n                    if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                        column = column - 1;\n                    }\n                }\n            }\n            else {\n                column = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n                if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                    column = column - 1;\n                }\n            }\n            leftoverVisibleColumns = currentVisibleColumn - cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n            return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n        }\n        static moveUp(config, model, cursor, inSelectionMode, linesCount) {\n            let lineNumber, column;\n            if (cursor.hasSelection() && !inSelectionMode) {\n                // If we are in selection mode, move up acts relative to the beginning of selection\n                lineNumber = cursor.selection.startLineNumber;\n                column = cursor.selection.startColumn;\n            }\n            else {\n                lineNumber = cursor.position.lineNumber;\n                column = cursor.position.column;\n            }\n            let r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n            return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n        }\n        static translateUp(config, model, cursor) {\n            let selection = cursor.selection;\n            let selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n            let position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n            return new cursorCommon_1.SingleCursorState(new range_1.Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new position_1.Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n        }\n        static moveToBeginningOfLine(config, model, cursor, inSelectionMode) {\n            let lineNumber = cursor.position.lineNumber;\n            let minColumn = model.getLineMinColumn(lineNumber);\n            let firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n            let column;\n            let relevantColumnNumber = cursor.position.column;\n            if (relevantColumnNumber === firstNonBlankColumn) {\n                column = minColumn;\n            }\n            else {\n                column = firstNonBlankColumn;\n            }\n            return cursor.move(inSelectionMode, lineNumber, column, 0);\n        }\n        static moveToEndOfLine(config, model, cursor, inSelectionMode) {\n            let lineNumber = cursor.position.lineNumber;\n            let maxColumn = model.getLineMaxColumn(lineNumber);\n            return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n        }\n        static moveToBeginningOfBuffer(config, model, cursor, inSelectionMode) {\n            return cursor.move(inSelectionMode, 1, 1, 0);\n        }\n        static moveToEndOfBuffer(config, model, cursor, inSelectionMode) {\n            let lastLineNumber = model.getLineCount();\n            let lastColumn = model.getLineMaxColumn(lastLineNumber);\n            return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n        }\n    }\n    exports.MoveOperations = MoveOperations;\n});\n",null]}