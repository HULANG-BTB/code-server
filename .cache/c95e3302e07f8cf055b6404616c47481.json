{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar perfviewEditor_1 = require(\"vs/workbench/contrib/performance/electron-browser/perfviewEditor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar startupProfiler_1 = require(\"./startupProfiler\");\nvar startupTimings_1 = require(\"./startupTimings\");\n// -- startup performance view\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(perfviewEditor_1.PerfviewContrib, lifecycle_1.LifecyclePhase.Ready);\nplatform_1.Registry.as(editor_1.Extensions.EditorInputFactories).registerEditorInputFactory(perfviewEditor_1.PerfviewInput.Id, /** @class */ (function () {\n    function class_1() {\n    }\n    class_1.prototype.serialize = function () {\n        return '';\n    };\n    class_1.prototype.deserialize = function (instantiationService) {\n        return instantiationService.createInstance(perfviewEditor_1.PerfviewInput);\n    };\n    return class_1;\n}()));\ncommands_1.CommandsRegistry.registerCommand('perfview.show', function (accessor) {\n    var editorService = accessor.get(editorService_1.IEditorService);\n    var instaService = accessor.get(instantiation_1.IInstantiationService);\n    return editorService.openEditor(instaService.createInstance(perfviewEditor_1.PerfviewInput));\n});\nactions_1.MenuRegistry.addCommand({\n    id: 'perfview.show',\n    category: nls_1.localize('show.cat', \"Developer\"),\n    title: nls_1.localize('show.label', \"Startup Performance\")\n});\n// -- startup profiler\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(startupProfiler_1.StartupProfiler, lifecycle_1.LifecyclePhase.Restored);\n// -- startup timings\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(startupTimings_1.StartupTimings, lifecycle_1.LifecyclePhase.Eventually);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8BAAkC;AAClC,8DAAkE;AAClE,iEAAwE;AACxE,gFAAuF;AACvF,oEAAwE;AACxE,iEAAgE;AAChE,mEAAgG;AAChG,qDAAmH;AACnH,mGAAkH;AAClH,mFAAmF;AACnF,qDAAoD;AACpD,mDAAkD;AAElD,8BAA8B;AAE9B,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAC/F,gCAAe,EACf,0BAAc,CAAC,KAAK,CACpB,CAAC;AAEF,mBAAQ,CAAC,EAAE,CAA8B,mBAAK,CAAC,oBAAoB,CAAC,CAAC,0BAA0B,CAC9F,8BAAa,CAAC,EAAE;IAChB;IAOA,CAAC;IANA,2BAAS,GAAT;QACC,OAAO,EAAE,CAAC;IACX,CAAC;IACD,6BAAW,GAAX,UAAY,oBAA2C;QACtD,OAAO,oBAAoB,CAAC,cAAc,CAAC,8BAAa,CAAC,CAAC;IAC3D,CAAC;IACF,cAAC;AAAD,CAAC,AAPD,IAQA,CAAC;AAEF,2BAAgB,CAAC,eAAe,CAAC,eAAe,EAAE,UAAA,QAAQ;IACzD,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAc,CAAC,CAAC;IACnD,IAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,qCAAqB,CAAC,CAAC;IACzD,OAAO,aAAa,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,8BAAa,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC,CAAC;AAEH,sBAAY,CAAC,UAAU,CAAC;IACvB,EAAE,EAAE,eAAe;IACnB,QAAQ,EAAE,cAAQ,CAAC,UAAU,EAAE,WAAW,CAAC;IAC3C,KAAK,EAAE,cAAQ,CAAC,YAAY,EAAE,qBAAqB,CAAC;CACpD,CAAC,CAAC;AAGH,sBAAsB;AAEtB,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAC/F,iCAAe,EACf,0BAAc,CAAC,QAAQ,CACvB,CAAC;AAEF,qBAAqB;AAErB,mBAAQ,CAAC,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAC/F,+BAAc,EACd,0BAAc,CAAC,UAAU,CACzB,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { Extensions as Input, IEditorInputFactory, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { PerfviewContrib, PerfviewInput } from 'vs/workbench/contrib/performance/electron-browser/perfviewEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { StartupProfiler } from './startupProfiler';\nimport { StartupTimings } from './startupTimings';\n\n// -- startup performance view\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tPerfviewContrib,\n\tLifecyclePhase.Ready\n);\n\nRegistry.as<IEditorInputFactoryRegistry>(Input.EditorInputFactories).registerEditorInputFactory(\n\tPerfviewInput.Id,\n\tclass implements IEditorInputFactory {\n\t\tserialize(): string {\n\t\t\treturn '';\n\t\t}\n\t\tdeserialize(instantiationService: IInstantiationService): PerfviewInput {\n\t\t\treturn instantiationService.createInstance(PerfviewInput);\n\t\t}\n\t}\n);\n\nCommandsRegistry.registerCommand('perfview.show', accessor => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst instaService = accessor.get(IInstantiationService);\n\treturn editorService.openEditor(instaService.createInstance(PerfviewInput));\n});\n\nMenuRegistry.addCommand({\n\tid: 'perfview.show',\n\tcategory: localize('show.cat', \"Developer\"),\n\ttitle: localize('show.label', \"Startup Performance\")\n});\n\n\n// -- startup profiler\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tStartupProfiler,\n\tLifecyclePhase.Restored\n);\n\n// -- startup timings\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tStartupTimings,\n\tLifecyclePhase.Eventually\n);\n"]}]}