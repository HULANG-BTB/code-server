{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/editorExtensions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/editorExtensions.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar types_1 = require(\"vs/base/common/types\");\nvar Command = /** @class */ (function () {\n    function Command(opts) {\n        this.id = opts.id;\n        this.precondition = opts.precondition;\n        this._kbOpts = opts.kbOpts;\n        this._menubarOpts = opts.menubarOpts;\n        this._description = opts.description;\n    }\n    Command.prototype.register = function () {\n        var _this = this;\n        if (this._menubarOpts) {\n            actions_1.MenuRegistry.appendMenuItem(this._menubarOpts.menuId, {\n                group: this._menubarOpts.group,\n                command: {\n                    id: this.id,\n                    title: this._menubarOpts.title,\n                },\n                when: this._menubarOpts.when,\n                order: this._menubarOpts.order\n            });\n        }\n        if (this._kbOpts) {\n            var kbWhen = this._kbOpts.kbExpr;\n            if (this.precondition) {\n                if (kbWhen) {\n                    kbWhen = contextkey_1.ContextKeyExpr.and(kbWhen, this.precondition);\n                }\n                else {\n                    kbWhen = this.precondition;\n                }\n            }\n            keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n                id: this.id,\n                handler: function (accessor, args) { return _this.runCommand(accessor, args); },\n                weight: this._kbOpts.weight,\n                when: kbWhen,\n                primary: this._kbOpts.primary,\n                secondary: this._kbOpts.secondary,\n                win: this._kbOpts.win,\n                linux: this._kbOpts.linux,\n                mac: this._kbOpts.mac,\n                description: this._description\n            });\n        }\n        else {\n            commands_1.CommandsRegistry.registerCommand({\n                id: this.id,\n                handler: function (accessor, args) { return _this.runCommand(accessor, args); },\n                description: this._description\n            });\n        }\n    };\n    return Command;\n}());\nexports.Command = Command;\nvar EditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorCommand, _super);\n    function EditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create a command class that is bound to a certain editor contribution.\n     */\n    EditorCommand.bindToContribution = function (controllerGetter) {\n        return /** @class */ (function (_super) {\n            tslib_1.__extends(EditorControllerCommandImpl, _super);\n            function EditorControllerCommandImpl(opts) {\n                var _this = _super.call(this, opts) || this;\n                _this._callback = opts.handler;\n                return _this;\n            }\n            EditorControllerCommandImpl.prototype.runEditorCommand = function (accessor, editor, args) {\n                var controller = controllerGetter(editor);\n                if (controller) {\n                    this._callback(controllerGetter(editor), args);\n                }\n            };\n            return EditorControllerCommandImpl;\n        }(EditorCommand));\n    };\n    EditorCommand.prototype.runCommand = function (accessor, args) {\n        var _this = this;\n        var codeEditorService = accessor.get(codeEditorService_1.ICodeEditorService);\n        // Find the editor with text focus or active\n        var editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n        if (!editor) {\n            // well, at least we tried...\n            return;\n        }\n        return editor.invokeWithinContext(function (editorAccessor) {\n            var kbService = editorAccessor.get(contextkey_1.IContextKeyService);\n            if (!kbService.contextMatchesRules(types_1.withNullAsUndefined(_this.precondition))) {\n                // precondition does not hold\n                return;\n            }\n            return _this.runEditorCommand(editorAccessor, editor, args);\n        });\n    };\n    return EditorCommand;\n}(Command));\nexports.EditorCommand = EditorCommand;\nvar EditorAction = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorAction, _super);\n    function EditorAction(opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.label = opts.label;\n        _this.alias = opts.alias;\n        _this.menuOpts = opts.menuOpts;\n        return _this;\n    }\n    EditorAction.prototype.register = function () {\n        if (this.menuOpts) {\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorContext, {\n                command: {\n                    id: this.id,\n                    title: this.label\n                },\n                when: contextkey_1.ContextKeyExpr.and(this.precondition, this.menuOpts.when),\n                group: this.menuOpts.group,\n                order: this.menuOpts.order\n            });\n        }\n        _super.prototype.register.call(this);\n    };\n    EditorAction.prototype.runEditorCommand = function (accessor, editor, args) {\n        this.reportTelemetry(accessor, editor);\n        return this.run(accessor, editor, args || {});\n    };\n    EditorAction.prototype.reportTelemetry = function (accessor, editor) {\n        /* __GDPR__\n            \"editorActionInvoked\" : {\n                \"name\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"id\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"${include}\": [\n                    \"${EditorTelemetryData}\"\n                ]\n            }\n        */\n        accessor.get(telemetry_1.ITelemetryService).publicLog('editorActionInvoked', tslib_1.__assign({ name: this.label, id: this.id }, editor.getTelemetryData()));\n    };\n    return EditorAction;\n}(EditorCommand));\nexports.EditorAction = EditorAction;\n//#endregion EditorAction\n// --- Registration of commands and actions\nfunction registerLanguageCommand(id, handler) {\n    commands_1.CommandsRegistry.registerCommand(id, function (accessor, args) { return handler(accessor, args || {}); });\n}\nexports.registerLanguageCommand = registerLanguageCommand;\nfunction registerDefaultLanguageCommand(id, handler) {\n    registerLanguageCommand(id, function (accessor, args) {\n        var resource = args.resource, position = args.position;\n        if (!(resource instanceof uri_1.URI)) {\n            throw errors_1.illegalArgument('resource');\n        }\n        if (!position_1.Position.isIPosition(position)) {\n            throw errors_1.illegalArgument('position');\n        }\n        var model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (model) {\n            var editorPosition = position_1.Position.lift(position);\n            return handler(model, editorPosition, args);\n        }\n        return accessor.get(resolverService_1.ITextModelService).createModelReference(resource).then(function (reference) {\n            return new Promise(function (resolve, reject) {\n                try {\n                    var result = handler(reference.object.textEditorModel, position_1.Position.lift(position), args);\n                    resolve(result);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }).finally(function () {\n                reference.dispose();\n            });\n        });\n    });\n}\nexports.registerDefaultLanguageCommand = registerDefaultLanguageCommand;\nfunction registerEditorCommand(editorCommand) {\n    EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n    return editorCommand;\n}\nexports.registerEditorCommand = registerEditorCommand;\nfunction registerEditorAction(ctor) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(new ctor());\n}\nexports.registerEditorAction = registerEditorAction;\nfunction registerInstantiatedEditorAction(editorAction) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\nexports.registerInstantiatedEditorAction = registerInstantiatedEditorAction;\nfunction registerEditorContribution(ctor) {\n    EditorContributionRegistry.INSTANCE.registerEditorContribution(ctor);\n}\nexports.registerEditorContribution = registerEditorContribution;\nvar EditorExtensionsRegistry;\n(function (EditorExtensionsRegistry) {\n    function getEditorCommand(commandId) {\n        return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n    }\n    EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n    function getEditorActions() {\n        return EditorContributionRegistry.INSTANCE.getEditorActions();\n    }\n    EditorExtensionsRegistry.getEditorActions = getEditorActions;\n    function getEditorContributions() {\n        return EditorContributionRegistry.INSTANCE.getEditorContributions();\n    }\n    EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n})(EditorExtensionsRegistry = exports.EditorExtensionsRegistry || (exports.EditorExtensionsRegistry = {}));\n// Editor extension points\nvar Extensions = {\n    EditorCommonContributions: 'editor.contributions'\n};\nvar EditorContributionRegistry = /** @class */ (function () {\n    function EditorContributionRegistry() {\n        this.editorContributions = [];\n        this.editorActions = [];\n        this.editorCommands = Object.create(null);\n    }\n    EditorContributionRegistry.prototype.registerEditorContribution = function (ctor) {\n        this.editorContributions.push(ctor);\n    };\n    EditorContributionRegistry.prototype.registerEditorAction = function (action) {\n        action.register();\n        this.editorActions.push(action);\n    };\n    EditorContributionRegistry.prototype.getEditorContributions = function () {\n        return this.editorContributions.slice(0);\n    };\n    EditorContributionRegistry.prototype.getEditorActions = function () {\n        return this.editorActions.slice(0);\n    };\n    EditorContributionRegistry.prototype.registerEditorCommand = function (editorCommand) {\n        editorCommand.register();\n        this.editorCommands[editorCommand.id] = editorCommand;\n    };\n    EditorContributionRegistry.prototype.getEditorCommand = function (commandId) {\n        return (this.editorCommands[commandId] || null);\n    };\n    EditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\n    return EditorContributionRegistry;\n}());\nplatform_1.Registry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/editorExtensions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/editorExtensions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,gDAAwD;AACxD,0CAAyC;AAEzC,kFAAkF;AAClF,2DAA0D;AAG1D,uEAAuE;AACvE,6EAA8E;AAC9E,8DAA0E;AAC1E,iEAAoG;AACpG,uEAA8F;AAE9F,yFAAsG;AACtG,iEAAgE;AAChE,oEAA2E;AAC3E,8CAA2D;AAyB3D;IAOC,iBAAY,IAAqB;QAChC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAEM,0BAAQ,GAAf;QAAA,iBA8CC;QA5CA,IAAI,IAAI,CAAC,YAAY,EAAE;YACtB,sBAAY,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACrD,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;gBAC9B,OAAO,EAAE;oBACR,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;iBAE9B;gBACD,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;gBAC5B,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;aAC9B,CAAC,CAAC;SACH;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACjC,IAAI,IAAI,CAAC,YAAY,EAAE;gBACtB,IAAI,MAAM,EAAE;oBACX,MAAM,GAAG,2BAAc,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBACvD;qBAAM;oBACN,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;iBAC3B;aACD;YAED,yCAAmB,CAAC,gCAAgC,CAAC;gBACpD,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,OAAO,EAAE,UAAC,QAAQ,EAAE,IAAI,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAA/B,CAA+B;gBAC5D,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC3B,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;gBAC7B,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;gBACjC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;gBACrB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;gBACzB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;gBACrB,WAAW,EAAE,IAAI,CAAC,YAAY;aAC9B,CAAC,CAAC;SAEH;aAAM;YAEN,2BAAgB,CAAC,eAAe,CAAC;gBAChC,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,OAAO,EAAE,UAAC,QAAQ,EAAE,IAAI,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAA/B,CAA+B;gBAC5D,WAAW,EAAE,IAAI,CAAC,YAAY;aAC9B,CAAC,CAAC;SACH;IACF,CAAC;IAGF,cAAC;AAAD,CAAC,AAhED,IAgEC;AAhEqB,0BAAO;AA4E7B;IAA4C,yCAAO;IAAnD;;IA8CA,CAAC;IA5CA;;OAEG;IACW,gCAAkB,GAAhC,UAAgE,gBAA4C;QAC3G;YAAiD,uDAAa;YAG7D,qCAAY,IAAoC;gBAAhD,YACC,kBAAM,IAAI,CAAC,SAGX;gBADA,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;;YAC/B,CAAC;YAEM,sDAAgB,GAAvB,UAAwB,QAA0B,EAAE,MAAmB,EAAE,IAAS;gBACjF,IAAM,UAAU,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAC5C,IAAI,UAAU,EAAE;oBACf,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;iBAC/C;YACF,CAAC;YACF,kCAAC;QAAD,CAAC,AAfM,CAA0C,aAAa,GAe5D;IACH,CAAC;IAEM,kCAAU,GAAjB,UAAkB,QAA0B,EAAE,IAAS;QAAvD,iBAmBC;QAlBA,IAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,sCAAkB,CAAC,CAAC;QAE3D,4CAA4C;QAC5C,IAAM,MAAM,GAAG,iBAAiB,CAAC,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;QACnG,IAAI,CAAC,MAAM,EAAE;YACZ,6BAA6B;YAC7B,OAAO;SACP;QAED,OAAO,MAAM,CAAC,mBAAmB,CAAC,UAAC,cAAc;YAChD,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,2BAAmB,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,EAAE;gBAC3E,6BAA6B;gBAC7B,OAAO;aACP;YAED,OAAO,KAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,MAAO,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACJ,CAAC;IAGF,oBAAC;AAAD,CAAC,AA9CD,CAA4C,OAAO,GA8ClD;AA9CqB,sCAAa;AA8DnC;IAA2C,wCAAa;IAMvD,sBAAY,IAAoB;QAAhC,YACC,kBAAM,IAAI,CAAC,SAIX;QAHA,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;;IAC/B,CAAC;IAEM,+BAAQ,GAAf;QAEC,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClB,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,aAAa,EAAE;gBACjD,OAAO,EAAE;oBACR,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,KAAK,EAAE,IAAI,CAAC,KAAK;iBACjB;gBACD,IAAI,EAAE,2BAAc,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC/D,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;gBAC1B,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;aAC1B,CAAC,CAAC;SACH;QAED,iBAAM,QAAQ,WAAE,CAAC;IAClB,CAAC;IAEM,uCAAgB,GAAvB,UAAwB,QAA0B,EAAE,MAAmB,EAAE,IAAS;QACjF,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IAES,sCAAe,GAAzB,UAA0B,QAA0B,EAAE,MAAmB;QACxE;;;;;;;;UAQE;QACF,QAAQ,CAAC,GAAG,CAAC,6BAAiB,CAAC,CAAC,SAAS,CAAC,qBAAqB,qBAAI,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,IAAK,MAAM,CAAC,gBAAgB,EAAE,EAAG,CAAC;IACnI,CAAC;IAGF,mBAAC;AAAD,CAAC,AAjDD,CAA2C,aAAa,GAiDvD;AAjDqB,oCAAY;AAmDlC,yBAAyB;AAEzB,2CAA2C;AAE3C,SAAgB,uBAAuB,CAAC,EAAU,EAAE,OAAwE;IAC3H,2BAAgB,CAAC,eAAe,CAAC,EAAE,EAAE,UAAC,QAAQ,EAAE,IAAI,IAAK,OAAA,OAAO,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,EAA7B,CAA6B,CAAC,CAAC;AACzF,CAAC;AAFD,0DAEC;AAQD,SAAgB,8BAA8B,CAAC,EAAU,EAAE,OAA2E;IACrI,uBAAuB,CAAC,EAAE,EAAE,UAAU,QAAQ,EAAE,IAAkB;QAEzD,IAAA,wBAAQ,EAAE,wBAAQ,CAAU;QACpC,IAAI,CAAC,CAAC,QAAQ,YAAY,SAAG,CAAC,EAAE;YAC/B,MAAM,wBAAe,CAAC,UAAU,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,mBAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;YACpC,MAAM,wBAAe,CAAC,UAAU,CAAC,CAAC;SAClC;QAED,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,4BAAa,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,KAAK,EAAE;YACV,IAAM,cAAc,GAAG,mBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;SAC5C;QAED,OAAO,QAAQ,CAAC,GAAG,CAAC,mCAAiB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS;YACnF,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAClC,IAAI;oBACH,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,mBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;oBACxF,OAAO,CAAC,MAAM,CAAC,CAAC;iBAChB;gBAAC,OAAO,GAAG,EAAE;oBACb,MAAM,CAAC,GAAG,CAAC,CAAC;iBACZ;YACF,CAAC,CAAC,CAAC,OAAO,CAAC;gBACV,SAAS,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC;AA9BD,wEA8BC;AAED,SAAgB,qBAAqB,CAA0B,aAAgB;IAC9E,0BAA0B,CAAC,QAAQ,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;IACzE,OAAO,aAAa,CAAC;AACtB,CAAC;AAHD,sDAGC;AAED,SAAgB,oBAAoB,CAAC,IAA8B;IAClE,0BAA0B,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;AACtE,CAAC;AAFD,oDAEC;AAED,SAAgB,gCAAgC,CAAC,YAA0B;IAC1E,0BAA0B,CAAC,QAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;AACxE,CAAC;AAFD,4EAEC;AAED,SAAgB,0BAA0B,CAAC,IAA6B;IACvE,0BAA0B,CAAC,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;AACtE,CAAC;AAFD,gEAEC;AAED,IAAiB,wBAAwB,CAaxC;AAbD,WAAiB,wBAAwB;IAExC,SAAgB,gBAAgB,CAAC,SAAiB;QACjD,OAAO,0BAA0B,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACxE,CAAC;IAFe,yCAAgB,mBAE/B,CAAA;IAED,SAAgB,gBAAgB;QAC/B,OAAO,0BAA0B,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;IAC/D,CAAC;IAFe,yCAAgB,mBAE/B,CAAA;IAED,SAAgB,sBAAsB;QACrC,OAAO,0BAA0B,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;IACrE,CAAC;IAFe,+CAAsB,yBAErC,CAAA;AACF,CAAC,EAbgB,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAaxC;AAED,0BAA0B;AAC1B,IAAM,UAAU,GAAG;IAClB,yBAAyB,EAAE,sBAAsB;CACjD,CAAC;AAEF;IAQC;QACC,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,+DAA0B,GAAjC,UAAkC,IAA6B;QAC9D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,yDAAoB,GAA3B,UAA4B,MAAoB;QAC/C,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAEM,2DAAsB,GAA7B;QACC,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;IAEM,qDAAgB,GAAvB;QACC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IAEM,0DAAqB,GAA5B,UAA6B,aAA4B;QACxD,aAAa,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC;IACvD,CAAC;IAEM,qDAAgB,GAAvB,UAAwB,SAAiB;QACxC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;IACjD,CAAC;IApCsB,mCAAQ,GAAG,IAAI,0BAA0B,EAAE,CAAC;IAsCpE,iCAAC;CAAA,AAxCD,IAwCC;AACD,mBAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,yBAAyB,EAAE,0BAA0B,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IPosition } from 'vs/base/browser/ui/contextview/contextview';\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConstructorSignature1, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindings, KeybindingsRegistry } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport type ServicesAccessor = ServicesAccessor;\nexport type IEditorContributionCtor = IConstructorSignature1<ICodeEditor, IEditorContribution>;\n\n//#region Command\n\nexport interface ICommandKeybindingsOptions extends IKeybindings {\n\tkbExpr?: ContextKeyExpr | null;\n\tweight: number;\n}\nexport interface ICommandMenubarOptions {\n\tmenuId: MenuId;\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpr;\n\ttitle: string;\n}\nexport interface ICommandOptions {\n\tid: string;\n\tprecondition: ContextKeyExpr | null;\n\tkbOpts?: ICommandKeybindingsOptions | null;\n\tdescription?: ICommandHandlerDescription;\n\tmenubarOpts?: ICommandMenubarOptions;\n}\nexport abstract class Command {\n\tpublic readonly id: string;\n\tpublic readonly precondition: ContextKeyExpr | null;\n\tprivate readonly _kbOpts: ICommandKeybindingsOptions | null | undefined;\n\tprivate readonly _menubarOpts: ICommandMenubarOptions | null | undefined;\n\tprivate readonly _description: ICommandHandlerDescription | null | undefined;\n\n\tconstructor(opts: ICommandOptions) {\n\t\tthis.id = opts.id;\n\t\tthis.precondition = opts.precondition;\n\t\tthis._kbOpts = opts.kbOpts;\n\t\tthis._menubarOpts = opts.menubarOpts;\n\t\tthis._description = opts.description;\n\t}\n\n\tpublic register(): void {\n\n\t\tif (this._menubarOpts) {\n\t\t\tMenuRegistry.appendMenuItem(this._menubarOpts.menuId, {\n\t\t\t\tgroup: this._menubarOpts.group,\n\t\t\t\tcommand: {\n\t\t\t\t\tid: this.id,\n\t\t\t\t\ttitle: this._menubarOpts.title,\n\t\t\t\t\t// precondition: this.precondition\n\t\t\t\t},\n\t\t\t\twhen: this._menubarOpts.when,\n\t\t\t\torder: this._menubarOpts.order\n\t\t\t});\n\t\t}\n\n\t\tif (this._kbOpts) {\n\t\t\tlet kbWhen = this._kbOpts.kbExpr;\n\t\t\tif (this.precondition) {\n\t\t\t\tif (kbWhen) {\n\t\t\t\t\tkbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n\t\t\t\t} else {\n\t\t\t\t\tkbWhen = this.precondition;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\t\t\tid: this.id,\n\t\t\t\thandler: (accessor, args) => this.runCommand(accessor, args),\n\t\t\t\tweight: this._kbOpts.weight,\n\t\t\t\twhen: kbWhen,\n\t\t\t\tprimary: this._kbOpts.primary,\n\t\t\t\tsecondary: this._kbOpts.secondary,\n\t\t\t\twin: this._kbOpts.win,\n\t\t\t\tlinux: this._kbOpts.linux,\n\t\t\t\tmac: this._kbOpts.mac,\n\t\t\t\tdescription: this._description\n\t\t\t});\n\n\t\t} else {\n\n\t\t\tCommandsRegistry.registerCommand({\n\t\t\t\tid: this.id,\n\t\t\t\thandler: (accessor, args) => this.runCommand(accessor, args),\n\t\t\t\tdescription: this._description\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic abstract runCommand(accessor: ServicesAccessor, args: any): void | Promise<void>;\n}\n\n//#endregion Command\n\n//#region EditorCommand\n\nexport interface IContributionCommandOptions<T> extends ICommandOptions {\n\thandler: (controller: T, args: any) => void;\n}\nexport interface EditorControllerCommand<T extends IEditorContribution> {\n\tnew(opts: IContributionCommandOptions<T>): EditorCommand;\n}\nexport abstract class EditorCommand extends Command {\n\n\t/**\n\t * Create a command class that is bound to a certain editor contribution.\n\t */\n\tpublic static bindToContribution<T extends IEditorContribution>(controllerGetter: (editor: ICodeEditor) => T): EditorControllerCommand<T> {\n\t\treturn class EditorControllerCommandImpl extends EditorCommand {\n\t\t\tprivate readonly _callback: (controller: T, args: any) => void;\n\n\t\t\tconstructor(opts: IContributionCommandOptions<T>) {\n\t\t\t\tsuper(opts);\n\n\t\t\t\tthis._callback = opts.handler;\n\t\t\t}\n\n\t\t\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\t\t\tconst controller = controllerGetter(editor);\n\t\t\t\tif (controller) {\n\t\t\t\t\tthis._callback(controllerGetter(editor), args);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void | Promise<void> {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\t// Find the editor with text focus or active\n\t\tconst editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\t// well, at least we tried...\n\t\t\treturn;\n\t\t}\n\n\t\treturn editor.invokeWithinContext((editorAccessor) => {\n\t\t\tconst kbService = editorAccessor.get(IContextKeyService);\n\t\t\tif (!kbService.contextMatchesRules(withNullAsUndefined(this.precondition))) {\n\t\t\t\t// precondition does not hold\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this.runEditorCommand(editorAccessor, editor!, args);\n\t\t});\n\t}\n\n\tpublic abstract runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: any): void | Promise<void>;\n}\n\n//#endregion EditorCommand\n\n//#region EditorAction\n\nexport interface IEditorCommandMenuOptions {\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpr;\n}\nexport interface IActionOptions extends ICommandOptions {\n\tlabel: string;\n\talias: string;\n\tmenuOpts?: IEditorCommandMenuOptions;\n}\nexport abstract class EditorAction extends EditorCommand {\n\n\tpublic readonly label: string;\n\tpublic readonly alias: string;\n\tprivate readonly menuOpts: IEditorCommandMenuOptions | undefined;\n\n\tconstructor(opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.label = opts.label;\n\t\tthis.alias = opts.alias;\n\t\tthis.menuOpts = opts.menuOpts;\n\t}\n\n\tpublic register(): void {\n\n\t\tif (this.menuOpts) {\n\t\t\tMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\t\t\t\tcommand: {\n\t\t\t\t\tid: this.id,\n\t\t\t\t\ttitle: this.label\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.and(this.precondition, this.menuOpts.when),\n\t\t\t\tgroup: this.menuOpts.group,\n\t\t\t\torder: this.menuOpts.order\n\t\t\t});\n\t\t}\n\n\t\tsuper.register();\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void | Promise<void> {\n\t\tthis.reportTelemetry(accessor, editor);\n\t\treturn this.run(accessor, editor, args || {});\n\t}\n\n\tprotected reportTelemetry(accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\t/* __GDPR__\n\t\t\t\"editorActionInvoked\" : {\n\t\t\t\t\"name\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"id\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${EditorTelemetryData}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\taccessor.get(ITelemetryService).publicLog('editorActionInvoked', { name: this.label, id: this.id, ...editor.getTelemetryData() });\n\t}\n\n\tpublic abstract run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void | Promise<void>;\n}\n\n//#endregion EditorAction\n\n// --- Registration of commands and actions\n\nexport function registerLanguageCommand(id: string, handler: (accessor: ServicesAccessor, args: { [n: string]: any }) => any) {\n\tCommandsRegistry.registerCommand(id, (accessor, args) => handler(accessor, args || {}));\n}\n\ninterface IDefaultArgs {\n\tresource: URI;\n\tposition: IPosition;\n\t[name: string]: any;\n}\n\nexport function registerDefaultLanguageCommand(id: string, handler: (model: ITextModel, position: Position, args: IDefaultArgs) => any) {\n\tregisterLanguageCommand(id, function (accessor, args: IDefaultArgs) {\n\n\t\tconst { resource, position } = args;\n\t\tif (!(resource instanceof URI)) {\n\t\t\tthrow illegalArgument('resource');\n\t\t}\n\t\tif (!Position.isIPosition(position)) {\n\t\t\tthrow illegalArgument('position');\n\t\t}\n\n\t\tconst model = accessor.get(IModelService).getModel(resource);\n\t\tif (model) {\n\t\t\tconst editorPosition = Position.lift(position);\n\t\t\treturn handler(model, editorPosition, args);\n\t\t}\n\n\t\treturn accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = handler(reference.object.textEditorModel, Position.lift(position), args);\n\t\t\t\t\tresolve(result);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}).finally(() => {\n\t\t\t\treference.dispose();\n\t\t\t});\n\t\t});\n\t});\n}\n\nexport function registerEditorCommand<T extends EditorCommand>(editorCommand: T): T {\n\tEditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n\treturn editorCommand;\n}\n\nexport function registerEditorAction(ctor: { new(): EditorAction; }): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(new ctor());\n}\n\nexport function registerInstantiatedEditorAction(editorAction: EditorAction): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\n\nexport function registerEditorContribution(ctor: IEditorContributionCtor): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorContribution(ctor);\n}\n\nexport namespace EditorExtensionsRegistry {\n\n\texport function getEditorCommand(commandId: string): EditorCommand {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n\t}\n\n\texport function getEditorActions(): EditorAction[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorActions();\n\t}\n\n\texport function getEditorContributions(): IEditorContributionCtor[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorContributions();\n\t}\n}\n\n// Editor extension points\nconst Extensions = {\n\tEditorCommonContributions: 'editor.contributions'\n};\n\nclass EditorContributionRegistry {\n\n\tpublic static readonly INSTANCE = new EditorContributionRegistry();\n\n\tprivate readonly editorContributions: IEditorContributionCtor[];\n\tprivate readonly editorActions: EditorAction[];\n\tprivate readonly editorCommands: { [commandId: string]: EditorCommand; };\n\n\tconstructor() {\n\t\tthis.editorContributions = [];\n\t\tthis.editorActions = [];\n\t\tthis.editorCommands = Object.create(null);\n\t}\n\n\tpublic registerEditorContribution(ctor: IEditorContributionCtor): void {\n\t\tthis.editorContributions.push(ctor);\n\t}\n\n\tpublic registerEditorAction(action: EditorAction) {\n\t\taction.register();\n\t\tthis.editorActions.push(action);\n\t}\n\n\tpublic getEditorContributions(): IEditorContributionCtor[] {\n\t\treturn this.editorContributions.slice(0);\n\t}\n\n\tpublic getEditorActions(): EditorAction[] {\n\t\treturn this.editorActions.slice(0);\n\t}\n\n\tpublic registerEditorCommand(editorCommand: EditorCommand) {\n\t\teditorCommand.register();\n\t\tthis.editorCommands[editorCommand.id] = editorCommand;\n\t}\n\n\tpublic getEditorCommand(commandId: string): EditorCommand {\n\t\treturn (this.editorCommands[commandId] || null);\n\t}\n\n}\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\n"]}]}