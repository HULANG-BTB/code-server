{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/viewEvents.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/viewEvents.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\"], function (require, exports, errors, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var ViewEventType;\n    (function (ViewEventType) {\n        ViewEventType[ViewEventType[\"ViewConfigurationChanged\"] = 1] = \"ViewConfigurationChanged\";\n        ViewEventType[ViewEventType[\"ViewCursorStateChanged\"] = 2] = \"ViewCursorStateChanged\";\n        ViewEventType[ViewEventType[\"ViewDecorationsChanged\"] = 3] = \"ViewDecorationsChanged\";\n        ViewEventType[ViewEventType[\"ViewFlushed\"] = 4] = \"ViewFlushed\";\n        ViewEventType[ViewEventType[\"ViewFocusChanged\"] = 5] = \"ViewFocusChanged\";\n        ViewEventType[ViewEventType[\"ViewLineMappingChanged\"] = 6] = \"ViewLineMappingChanged\";\n        ViewEventType[ViewEventType[\"ViewLinesChanged\"] = 7] = \"ViewLinesChanged\";\n        ViewEventType[ViewEventType[\"ViewLinesDeleted\"] = 8] = \"ViewLinesDeleted\";\n        ViewEventType[ViewEventType[\"ViewLinesInserted\"] = 9] = \"ViewLinesInserted\";\n        ViewEventType[ViewEventType[\"ViewRevealRangeRequest\"] = 10] = \"ViewRevealRangeRequest\";\n        ViewEventType[ViewEventType[\"ViewScrollChanged\"] = 11] = \"ViewScrollChanged\";\n        ViewEventType[ViewEventType[\"ViewTokensChanged\"] = 12] = \"ViewTokensChanged\";\n        ViewEventType[ViewEventType[\"ViewTokensColorsChanged\"] = 13] = \"ViewTokensColorsChanged\";\n        ViewEventType[ViewEventType[\"ViewZonesChanged\"] = 14] = \"ViewZonesChanged\";\n        ViewEventType[ViewEventType[\"ViewThemeChanged\"] = 15] = \"ViewThemeChanged\";\n        ViewEventType[ViewEventType[\"ViewLanguageConfigurationChanged\"] = 16] = \"ViewLanguageConfigurationChanged\";\n    })(ViewEventType = exports.ViewEventType || (exports.ViewEventType = {}));\n    class ViewConfigurationChangedEvent {\n        constructor(source) {\n            this.type = ViewEventType.ViewConfigurationChanged;\n            this.canUseLayerHinting = source.canUseLayerHinting;\n            this.pixelRatio = source.pixelRatio;\n            this.editorClassName = source.editorClassName;\n            this.lineHeight = source.lineHeight;\n            this.readOnly = source.readOnly;\n            this.accessibilitySupport = source.accessibilitySupport;\n            this.emptySelectionClipboard = source.emptySelectionClipboard;\n            this.copyWithSyntaxHighlighting = source.copyWithSyntaxHighlighting;\n            this.layoutInfo = source.layoutInfo;\n            this.fontInfo = source.fontInfo;\n            this.viewInfo = source.viewInfo;\n            this.wrappingInfo = source.wrappingInfo;\n        }\n    }\n    exports.ViewConfigurationChangedEvent = ViewConfigurationChangedEvent;\n    class ViewCursorStateChangedEvent {\n        constructor(selections) {\n            this.type = ViewEventType.ViewCursorStateChanged;\n            this.selections = selections;\n        }\n    }\n    exports.ViewCursorStateChangedEvent = ViewCursorStateChangedEvent;\n    class ViewDecorationsChangedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewDecorationsChanged;\n            // Nothing to do\n        }\n    }\n    exports.ViewDecorationsChangedEvent = ViewDecorationsChangedEvent;\n    class ViewFlushedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewFlushed;\n            // Nothing to do\n        }\n    }\n    exports.ViewFlushedEvent = ViewFlushedEvent;\n    class ViewFocusChangedEvent {\n        constructor(isFocused) {\n            this.type = ViewEventType.ViewFocusChanged;\n            this.isFocused = isFocused;\n        }\n    }\n    exports.ViewFocusChangedEvent = ViewFocusChangedEvent;\n    class ViewLineMappingChangedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewLineMappingChanged;\n            // Nothing to do\n        }\n    }\n    exports.ViewLineMappingChangedEvent = ViewLineMappingChangedEvent;\n    class ViewLinesChangedEvent {\n        constructor(fromLineNumber, toLineNumber) {\n            this.type = ViewEventType.ViewLinesChanged;\n            this.fromLineNumber = fromLineNumber;\n            this.toLineNumber = toLineNumber;\n        }\n    }\n    exports.ViewLinesChangedEvent = ViewLinesChangedEvent;\n    class ViewLinesDeletedEvent {\n        constructor(fromLineNumber, toLineNumber) {\n            this.type = ViewEventType.ViewLinesDeleted;\n            this.fromLineNumber = fromLineNumber;\n            this.toLineNumber = toLineNumber;\n        }\n    }\n    exports.ViewLinesDeletedEvent = ViewLinesDeletedEvent;\n    class ViewLinesInsertedEvent {\n        constructor(fromLineNumber, toLineNumber) {\n            this.type = ViewEventType.ViewLinesInserted;\n            this.fromLineNumber = fromLineNumber;\n            this.toLineNumber = toLineNumber;\n        }\n    }\n    exports.ViewLinesInsertedEvent = ViewLinesInsertedEvent;\n    var VerticalRevealType;\n    (function (VerticalRevealType) {\n        VerticalRevealType[VerticalRevealType[\"Simple\"] = 0] = \"Simple\";\n        VerticalRevealType[VerticalRevealType[\"Center\"] = 1] = \"Center\";\n        VerticalRevealType[VerticalRevealType[\"CenterIfOutsideViewport\"] = 2] = \"CenterIfOutsideViewport\";\n        VerticalRevealType[VerticalRevealType[\"Top\"] = 3] = \"Top\";\n        VerticalRevealType[VerticalRevealType[\"Bottom\"] = 4] = \"Bottom\";\n    })(VerticalRevealType = exports.VerticalRevealType || (exports.VerticalRevealType = {}));\n    class ViewRevealRangeRequestEvent {\n        constructor(range, verticalType, revealHorizontal, scrollType) {\n            this.type = ViewEventType.ViewRevealRangeRequest;\n            this.range = range;\n            this.verticalType = verticalType;\n            this.revealHorizontal = revealHorizontal;\n            this.scrollType = scrollType;\n        }\n    }\n    exports.ViewRevealRangeRequestEvent = ViewRevealRangeRequestEvent;\n    class ViewScrollChangedEvent {\n        constructor(source) {\n            this.type = ViewEventType.ViewScrollChanged;\n            this.scrollWidth = source.scrollWidth;\n            this.scrollLeft = source.scrollLeft;\n            this.scrollHeight = source.scrollHeight;\n            this.scrollTop = source.scrollTop;\n            this.scrollWidthChanged = source.scrollWidthChanged;\n            this.scrollLeftChanged = source.scrollLeftChanged;\n            this.scrollHeightChanged = source.scrollHeightChanged;\n            this.scrollTopChanged = source.scrollTopChanged;\n        }\n    }\n    exports.ViewScrollChangedEvent = ViewScrollChangedEvent;\n    class ViewTokensChangedEvent {\n        constructor(ranges) {\n            this.type = ViewEventType.ViewTokensChanged;\n            this.ranges = ranges;\n        }\n    }\n    exports.ViewTokensChangedEvent = ViewTokensChangedEvent;\n    class ViewThemeChangedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewThemeChanged;\n        }\n    }\n    exports.ViewThemeChangedEvent = ViewThemeChangedEvent;\n    class ViewTokensColorsChangedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewTokensColorsChanged;\n            // Nothing to do\n        }\n    }\n    exports.ViewTokensColorsChangedEvent = ViewTokensColorsChangedEvent;\n    class ViewZonesChangedEvent {\n        constructor() {\n            this.type = ViewEventType.ViewZonesChanged;\n            // Nothing to do\n        }\n    }\n    exports.ViewZonesChangedEvent = ViewZonesChangedEvent;\n    class ViewLanguageConfigurationEvent {\n        constructor() {\n            this.type = ViewEventType.ViewLanguageConfigurationChanged;\n        }\n    }\n    exports.ViewLanguageConfigurationEvent = ViewLanguageConfigurationEvent;\n    class ViewEventEmitter extends lifecycle_1.Disposable {\n        constructor() {\n            super();\n            this._listeners = [];\n            this._collector = null;\n            this._collectorCnt = 0;\n        }\n        dispose() {\n            this._listeners = [];\n            super.dispose();\n        }\n        _beginEmit() {\n            this._collectorCnt++;\n            if (this._collectorCnt === 1) {\n                this._collector = new ViewEventsCollector();\n            }\n            return this._collector;\n        }\n        _endEmit() {\n            this._collectorCnt--;\n            if (this._collectorCnt === 0) {\n                const events = this._collector.finalize();\n                this._collector = null;\n                if (events.length > 0) {\n                    this._emit(events);\n                }\n            }\n        }\n        _emit(events) {\n            const listeners = this._listeners.slice(0);\n            for (let i = 0, len = listeners.length; i < len; i++) {\n                safeInvokeListener(listeners[i], events);\n            }\n        }\n        addEventListener(listener) {\n            this._listeners.push(listener);\n            return lifecycle_1.toDisposable(() => {\n                let listeners = this._listeners;\n                for (let i = 0, len = listeners.length; i < len; i++) {\n                    if (listeners[i] === listener) {\n                        listeners.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n        }\n    }\n    exports.ViewEventEmitter = ViewEventEmitter;\n    class ViewEventsCollector {\n        constructor() {\n            this._eventsLen = 0;\n            this._events = [];\n            this._eventsLen = 0;\n        }\n        emit(event) {\n            this._events[this._eventsLen++] = event;\n        }\n        finalize() {\n            let result = this._events;\n            this._events = [];\n            return result;\n        }\n    }\n    exports.ViewEventsCollector = ViewEventsCollector;\n    function safeInvokeListener(listener, events) {\n        try {\n            listener(events);\n        }\n        catch (e) {\n            errors.onUnexpectedError(e);\n        }\n    }\n});\n",null]}