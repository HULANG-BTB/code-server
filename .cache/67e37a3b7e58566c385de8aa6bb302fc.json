{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/exceptionWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/exceptionWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/exceptionWidget\");\nvar nls = require(\"vs/nls\");\nvar dom = require(\"vs/base/browser/dom\");\nvar zoneWidget_1 = require(\"vs/editor/contrib/zoneWidget/zoneWidget\");\nvar async_1 = require(\"vs/base/common/async\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar color_1 = require(\"vs/base/common/color\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar linkDetector_1 = require(\"vs/workbench/contrib/debug/browser/linkDetector\");\nvar $ = dom.$;\n// theming\nexports.debugExceptionWidgetBorder = colorRegistry_1.registerColor('debugExceptionWidget.border', { dark: '#a31515', light: '#a31515', hc: '#a31515' }, nls.localize('debugExceptionWidgetBorder', 'Exception widget border color.'));\nexports.debugExceptionWidgetBackground = colorRegistry_1.registerColor('debugExceptionWidget.background', { dark: '#420b0d', light: '#f1dfde', hc: '#420b0d' }, nls.localize('debugExceptionWidgetBackground', 'Exception widget background color.'));\nvar ExceptionWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(ExceptionWidget, _super);\n    function ExceptionWidget(editor, exceptionInfo, themeService, instantiationService) {\n        var _this = _super.call(this, editor, { showFrame: true, showArrow: true, frameWidth: 1, className: 'exception-widget-container' }) || this;\n        _this.exceptionInfo = exceptionInfo;\n        _this.instantiationService = instantiationService;\n        _this._backgroundColor = color_1.Color.white;\n        _this._applyTheme(themeService.getTheme());\n        _this._disposables.push(themeService.onThemeChange(_this._applyTheme.bind(_this)));\n        _this.create();\n        var onDidLayoutChangeScheduler = new async_1.RunOnceScheduler(function () { return _this._doLayout(undefined, undefined); }, 50);\n        _this._disposables.push(_this.editor.onDidLayoutChange(function () { return onDidLayoutChangeScheduler.schedule(); }));\n        _this._disposables.push(onDidLayoutChangeScheduler);\n        return _this;\n    }\n    ExceptionWidget.prototype._applyTheme = function (theme) {\n        this._backgroundColor = theme.getColor(exports.debugExceptionWidgetBackground);\n        var frameColor = theme.getColor(exports.debugExceptionWidgetBorder);\n        this.style({\n            arrowColor: frameColor,\n            frameColor: frameColor\n        }); // style() will trigger _applyStyles\n    };\n    ExceptionWidget.prototype._applyStyles = function () {\n        if (this.container) {\n            this.container.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';\n        }\n        _super.prototype._applyStyles.call(this);\n    };\n    ExceptionWidget.prototype._fillContainer = function (container) {\n        this.setCssClass('exception-widget');\n        // Set the font size and line height to the one from the editor configuration.\n        var fontInfo = this.editor.getConfiguration().fontInfo;\n        this.container.style.fontSize = fontInfo.fontSize + \"px\";\n        this.container.style.lineHeight = fontInfo.lineHeight + \"px\";\n        var title = $('.title');\n        title.textContent = this.exceptionInfo.id ? nls.localize('exceptionThrownWithId', 'Exception has occurred: {0}', this.exceptionInfo.id) : nls.localize('exceptionThrown', 'Exception has occurred.');\n        dom.append(container, title);\n        if (this.exceptionInfo.description) {\n            var description = $('.description');\n            description.textContent = this.exceptionInfo.description;\n            dom.append(container, description);\n        }\n        if (this.exceptionInfo.details && this.exceptionInfo.details.stackTrace) {\n            var stackTrace = $('.stack-trace');\n            var linkDetector = this.instantiationService.createInstance(linkDetector_1.LinkDetector);\n            var linkedStackTrace = linkDetector.handleLinks(this.exceptionInfo.details.stackTrace);\n            stackTrace.appendChild(linkedStackTrace);\n            dom.append(container, stackTrace);\n        }\n    };\n    ExceptionWidget.prototype._doLayout = function (_heightInPixel, _widthInPixel) {\n        // Reload the height with respect to the exception text content and relayout it to match the line count.\n        this.container.style.height = 'initial';\n        var lineHeight = this.editor.getConfiguration().lineHeight;\n        var arrowHeight = Math.round(lineHeight / 3);\n        var computedLinesNumber = Math.ceil((this.container.offsetHeight + arrowHeight) / lineHeight);\n        this._relayout(computedLinesNumber);\n    };\n    ExceptionWidget = tslib_1.__decorate([\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], ExceptionWidget);\n    return ExceptionWidget;\n}(zoneWidget_1.ZoneWidget));\nexports.ExceptionWidget = ExceptionWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/exceptionWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/exceptionWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/exceptionWidget';\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { ZoneWidget } from 'vs/editor/contrib/zoneWidget/zoneWidget';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IExceptionInfo } from 'vs/workbench/contrib/debug/common/debug';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IThemeService, ITheme } from 'vs/platform/theme/common/themeService';\nimport { Color } from 'vs/base/common/color';\nimport { registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { LinkDetector } from 'vs/workbench/contrib/debug/browser/linkDetector';\nconst $ = dom.$;\n\n// theming\n\nexport const debugExceptionWidgetBorder = registerColor('debugExceptionWidget.border', { dark: '#a31515', light: '#a31515', hc: '#a31515' }, nls.localize('debugExceptionWidgetBorder', 'Exception widget border color.'));\nexport const debugExceptionWidgetBackground = registerColor('debugExceptionWidget.background', { dark: '#420b0d', light: '#f1dfde', hc: '#420b0d' }, nls.localize('debugExceptionWidgetBackground', 'Exception widget background color.'));\n\nexport class ExceptionWidget extends ZoneWidget {\n\n\tprivate _backgroundColor?: Color;\n\n\tconstructor(editor: ICodeEditor, private exceptionInfo: IExceptionInfo,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(editor, { showFrame: true, showArrow: true, frameWidth: 1, className: 'exception-widget-container' });\n\n\t\tthis._backgroundColor = Color.white;\n\n\t\tthis._applyTheme(themeService.getTheme());\n\t\tthis._disposables.push(themeService.onThemeChange(this._applyTheme.bind(this)));\n\n\t\tthis.create();\n\t\tconst onDidLayoutChangeScheduler = new RunOnceScheduler(() => this._doLayout(undefined, undefined), 50);\n\t\tthis._disposables.push(this.editor.onDidLayoutChange(() => onDidLayoutChangeScheduler.schedule()));\n\t\tthis._disposables.push(onDidLayoutChangeScheduler);\n\t}\n\n\tprivate _applyTheme(theme: ITheme): void {\n\t\tthis._backgroundColor = theme.getColor(debugExceptionWidgetBackground);\n\t\tconst frameColor = theme.getColor(debugExceptionWidgetBorder);\n\t\tthis.style({\n\t\t\tarrowColor: frameColor,\n\t\t\tframeColor: frameColor\n\t\t}); // style() will trigger _applyStyles\n\t}\n\n\tprotected _applyStyles(): void {\n\t\tif (this.container) {\n\t\t\tthis.container.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';\n\t\t}\n\t\tsuper._applyStyles();\n\t}\n\n\tprotected _fillContainer(container: HTMLElement): void {\n\t\tthis.setCssClass('exception-widget');\n\t\t// Set the font size and line height to the one from the editor configuration.\n\t\tconst fontInfo = this.editor.getConfiguration().fontInfo;\n\t\tthis.container.style.fontSize = `${fontInfo.fontSize}px`;\n\t\tthis.container.style.lineHeight = `${fontInfo.lineHeight}px`;\n\n\t\tlet title = $('.title');\n\t\ttitle.textContent = this.exceptionInfo.id ? nls.localize('exceptionThrownWithId', 'Exception has occurred: {0}', this.exceptionInfo.id) : nls.localize('exceptionThrown', 'Exception has occurred.');\n\t\tdom.append(container, title);\n\n\t\tif (this.exceptionInfo.description) {\n\t\t\tlet description = $('.description');\n\t\t\tdescription.textContent = this.exceptionInfo.description;\n\t\t\tdom.append(container, description);\n\t\t}\n\n\t\tif (this.exceptionInfo.details && this.exceptionInfo.details.stackTrace) {\n\t\t\tlet stackTrace = $('.stack-trace');\n\t\t\tconst linkDetector = this.instantiationService.createInstance(LinkDetector);\n\t\t\tconst linkedStackTrace = linkDetector.handleLinks(this.exceptionInfo.details.stackTrace);\n\t\t\tstackTrace.appendChild(linkedStackTrace);\n\t\t\tdom.append(container, stackTrace);\n\t\t}\n\t}\n\n\tprotected _doLayout(_heightInPixel: number | undefined, _widthInPixel: number | undefined): void {\n\t\t// Reload the height with respect to the exception text content and relayout it to match the line count.\n\t\tthis.container.style.height = 'initial';\n\n\t\tconst lineHeight = this.editor.getConfiguration().lineHeight;\n\t\tconst arrowHeight = Math.round(lineHeight / 3);\n\t\tconst computedLinesNumber = Math.ceil((this.container.offsetHeight + arrowHeight) / lineHeight);\n\n\t\tthis._relayout(computedLinesNumber);\n\t}\n}\n"]}]}