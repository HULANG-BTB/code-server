{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesController.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar referencesWidget_1 = require(\"./referencesWidget\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nexports.ctxReferenceSearchVisible = new contextkey_1.RawContextKey('referenceSearchVisible', false);\nvar ReferencesController = /** @class */ (function () {\n    function ReferencesController(_defaultTreeKeyboardSupport, editor, contextKeyService, _editorService, _notificationService, _instantiationService, _storageService, _configurationService) {\n        this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;\n        this._editorService = _editorService;\n        this._notificationService = _notificationService;\n        this._instantiationService = _instantiationService;\n        this._storageService = _storageService;\n        this._configurationService = _configurationService;\n        this._requestIdPool = 0;\n        this._disposables = [];\n        this._ignoreModelChangeEvent = false;\n        this._editor = editor;\n        this._referenceSearchVisible = exports.ctxReferenceSearchVisible.bindTo(contextKeyService);\n    }\n    ReferencesController.get = function (editor) {\n        return editor.getContribution(ReferencesController.ID);\n    };\n    ReferencesController.prototype.getId = function () {\n        return ReferencesController.ID;\n    };\n    ReferencesController.prototype.dispose = function () {\n        this._referenceSearchVisible.reset();\n        lifecycle_1.dispose(this._disposables);\n        if (this._widget) {\n            lifecycle_1.dispose(this._widget);\n            this._widget = null;\n        }\n        if (this._model) {\n            lifecycle_1.dispose(this._model);\n            this._model = null;\n        }\n    };\n    ReferencesController.prototype.toggleWidget = function (range, modelPromise, options) {\n        var _this = this;\n        // close current widget and return early is position didn't change\n        var widgetPosition;\n        if (this._widget) {\n            widgetPosition = this._widget.position;\n        }\n        this.closeWidget();\n        if (!!widgetPosition && range.containsPosition(widgetPosition)) {\n            return;\n        }\n        this._referenceSearchVisible.set(true);\n        // close the widget on model/mode changes\n        this._disposables.push(this._editor.onDidChangeModelLanguage(function () { _this.closeWidget(); }));\n        this._disposables.push(this._editor.onDidChangeModel(function () {\n            if (!_this._ignoreModelChangeEvent) {\n                _this.closeWidget();\n            }\n        }));\n        var storageKey = 'peekViewLayout';\n        var data = JSON.parse(this._storageService.get(storageKey, storage_1.StorageScope.GLOBAL, '{}'));\n        this._widget = this._instantiationService.createInstance(referencesWidget_1.ReferenceWidget, this._editor, this._defaultTreeKeyboardSupport, data);\n        this._widget.setTitle(nls.localize('labelLoading', \"Loading...\"));\n        this._widget.show(range);\n        this._disposables.push(this._widget.onDidClose(function () {\n            modelPromise.cancel();\n            if (_this._widget) {\n                _this._storageService.store(storageKey, JSON.stringify(_this._widget.layoutData), storage_1.StorageScope.GLOBAL);\n                _this._widget = null;\n            }\n            _this.closeWidget();\n        }));\n        this._disposables.push(this._widget.onDidSelectReference(function (event) {\n            var element = event.element, kind = event.kind;\n            switch (kind) {\n                case 'open':\n                    if (event.source === 'editor'\n                        && _this._configurationService.getValue('editor.stablePeek')) {\n                        // when stable peek is configured we don't close\n                        // the peek window on selecting the editor\n                        break;\n                    }\n                case 'side':\n                    if (element) {\n                        _this.openReference(element, kind === 'side');\n                    }\n                    break;\n                case 'goto':\n                    if (element) {\n                        if (options.onGoto) {\n                            options.onGoto(element);\n                        }\n                        else {\n                            _this._gotoReference(element);\n                        }\n                    }\n                    break;\n            }\n        }));\n        var requestId = ++this._requestIdPool;\n        modelPromise.then(function (model) {\n            // still current request? widget still open?\n            if (requestId !== _this._requestIdPool || !_this._widget) {\n                return undefined;\n            }\n            if (_this._model) {\n                _this._model.dispose();\n            }\n            _this._model = model;\n            // show widget\n            return _this._widget.setModel(_this._model).then(function () {\n                if (_this._widget && _this._model && _this._editor.hasModel()) { // might have been closed\n                    // set title\n                    _this._widget.setMetaTitle(options.getMetaTitle(_this._model));\n                    // set 'best' selection\n                    var uri = _this._editor.getModel().uri;\n                    var pos = new position_1.Position(range.startLineNumber, range.startColumn);\n                    var selection = _this._model.nearestReference(uri, pos);\n                    if (selection) {\n                        return _this._widget.setSelection(selection);\n                    }\n                }\n                return undefined;\n            });\n        }, function (error) {\n            _this._notificationService.error(error);\n        });\n    };\n    ReferencesController.prototype.goToNextOrPreviousReference = function (fwd) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentPosition, source, target, editorFocus;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._editor.hasModel() || !this._model || !this._widget) {\n                            // can be called while still resolving...\n                            return [2 /*return*/];\n                        }\n                        currentPosition = this._widget.position;\n                        if (!currentPosition) {\n                            return [2 /*return*/];\n                        }\n                        source = this._model.nearestReference(this._editor.getModel().uri, currentPosition);\n                        if (!source) {\n                            return [2 /*return*/];\n                        }\n                        target = this._model.nextOrPreviousReference(source, fwd);\n                        editorFocus = this._editor.hasTextFocus();\n                        return [4 /*yield*/, this._widget.setSelection(target)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._gotoReference(target)];\n                    case 2:\n                        _a.sent();\n                        if (editorFocus) {\n                            this._editor.focus();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ReferencesController.prototype.closeWidget = function () {\n        if (this._widget) {\n            lifecycle_1.dispose(this._widget);\n            this._widget = null;\n        }\n        this._referenceSearchVisible.reset();\n        this._disposables = lifecycle_1.dispose(this._disposables);\n        if (this._model) {\n            lifecycle_1.dispose(this._model);\n            this._model = null;\n        }\n        this._editor.focus();\n        this._requestIdPool += 1; // Cancel pending requests\n    };\n    ReferencesController.prototype._gotoReference = function (ref) {\n        var _this = this;\n        if (this._widget) {\n            this._widget.hide();\n        }\n        this._ignoreModelChangeEvent = true;\n        var range = range_1.Range.lift(ref.range).collapseToStart();\n        return this._editorService.openCodeEditor({\n            resource: ref.uri,\n            options: { selection: range }\n        }, this._editor).then(function (openedEditor) {\n            _this._ignoreModelChangeEvent = false;\n            if (!openedEditor || openedEditor !== _this._editor) {\n                // TODO@Alex TODO@Joh\n                // when opening the current reference we might end up\n                // in a different editor instance. that means we also have\n                // a different instance of this reference search controller\n                // and cannot hold onto the widget (which likely doesn't\n                // exist). Instead of bailing out we should find the\n                // 'sister' action and pass our current model on to it.\n                _this.closeWidget();\n                return;\n            }\n            if (_this._widget) {\n                _this._widget.show(range);\n                _this._widget.focus();\n            }\n        }, function (err) {\n            _this._ignoreModelChangeEvent = false;\n            errors_1.onUnexpectedError(err);\n        });\n    };\n    ReferencesController.prototype.openReference = function (ref, sideBySide) {\n        // clear stage\n        if (!sideBySide) {\n            this.closeWidget();\n        }\n        var uri = ref.uri, range = ref.range;\n        this._editorService.openCodeEditor({\n            resource: uri,\n            options: { selection: range }\n        }, this._editor, sideBySide);\n    };\n    ReferencesController.ID = 'editor.contrib.referencesController';\n    ReferencesController = tslib_1.__decorate([\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(4, notification_1.INotificationService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, storage_1.IStorageService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], ReferencesController);\n    return ReferencesController;\n}());\nexports.ReferencesController = ReferencesController;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesController.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesController.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ReferencesModel } from './referencesModel';\nimport { ReferenceWidget, LayoutData } from './referencesWidget';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Location } from 'vs/editor/common/modes';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CancelablePromise } from 'vs/base/common/async';\n\nexport const ctxReferenceSearchVisible = new RawContextKey<boolean>('referenceSearchVisible', false);\n\nexport interface RequestOptions {\n\tgetMetaTitle(model: ReferencesModel): string;\n\tonGoto?: (reference: Location) => Promise<any>;\n}\n\nexport abstract class ReferencesController implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.referencesController';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _widget: ReferenceWidget | null;\n\tprivate _model: ReferencesModel | null;\n\tprivate _requestIdPool = 0;\n\tprivate _disposables: IDisposable[] = [];\n\tprivate _ignoreModelChangeEvent = false;\n\n\tprivate readonly _referenceSearchVisible: IContextKey<boolean>;\n\n\tpublic static get(editor: ICodeEditor): ReferencesController {\n\t\treturn editor.getContribution<ReferencesController>(ReferencesController.ID);\n\t}\n\n\tpublic constructor(\n\t\tprivate readonly _defaultTreeKeyboardSupport: boolean,\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._referenceSearchVisible = ctxReferenceSearchVisible.bindTo(contextKeyService);\n\t}\n\n\tpublic getId(): string {\n\t\treturn ReferencesController.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._referenceSearchVisible.reset();\n\t\tdispose(this._disposables);\n\t\tif (this._widget) {\n\t\t\tdispose(this._widget);\n\t\t\tthis._widget = null;\n\t\t}\n\t\tif (this._model) {\n\t\t\tdispose(this._model);\n\t\t\tthis._model = null;\n\t\t}\n\t}\n\n\tpublic toggleWidget(range: Range, modelPromise: CancelablePromise<ReferencesModel>, options: RequestOptions): void {\n\n\t\t// close current widget and return early is position didn't change\n\t\tlet widgetPosition: Position | undefined;\n\t\tif (this._widget) {\n\t\t\twidgetPosition = this._widget.position;\n\t\t}\n\t\tthis.closeWidget();\n\t\tif (!!widgetPosition && range.containsPosition(widgetPosition)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._referenceSearchVisible.set(true);\n\n\t\t// close the widget on model/mode changes\n\t\tthis._disposables.push(this._editor.onDidChangeModelLanguage(() => { this.closeWidget(); }));\n\t\tthis._disposables.push(this._editor.onDidChangeModel(() => {\n\t\t\tif (!this._ignoreModelChangeEvent) {\n\t\t\t\tthis.closeWidget();\n\t\t\t}\n\t\t}));\n\t\tconst storageKey = 'peekViewLayout';\n\t\tconst data = <LayoutData>JSON.parse(this._storageService.get(storageKey, StorageScope.GLOBAL, '{}'));\n\t\tthis._widget = this._instantiationService.createInstance(ReferenceWidget, this._editor, this._defaultTreeKeyboardSupport, data);\n\t\tthis._widget.setTitle(nls.localize('labelLoading', \"Loading...\"));\n\t\tthis._widget.show(range);\n\n\t\tthis._disposables.push(this._widget.onDidClose(() => {\n\t\t\tmodelPromise.cancel();\n\t\t\tif (this._widget) {\n\t\t\t\tthis._storageService.store(storageKey, JSON.stringify(this._widget.layoutData), StorageScope.GLOBAL);\n\t\t\t\tthis._widget = null;\n\t\t\t}\n\t\t\tthis.closeWidget();\n\t\t}));\n\n\t\tthis._disposables.push(this._widget.onDidSelectReference(event => {\n\t\t\tlet { element, kind } = event;\n\t\t\tswitch (kind) {\n\t\t\t\tcase 'open':\n\t\t\t\t\tif (event.source === 'editor'\n\t\t\t\t\t\t&& this._configurationService.getValue('editor.stablePeek')) {\n\n\t\t\t\t\t\t// when stable peek is configured we don't close\n\t\t\t\t\t\t// the peek window on selecting the editor\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'side':\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tthis.openReference(element, kind === 'side');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'goto':\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tif (options.onGoto) {\n\t\t\t\t\t\t\toptions.onGoto(element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._gotoReference(element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tconst requestId = ++this._requestIdPool;\n\n\t\tmodelPromise.then(model => {\n\n\t\t\t// still current request? widget still open?\n\t\t\tif (requestId !== this._requestIdPool || !this._widget) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (this._model) {\n\t\t\t\tthis._model.dispose();\n\t\t\t}\n\n\t\t\tthis._model = model;\n\n\t\t\t// show widget\n\t\t\treturn this._widget.setModel(this._model).then(() => {\n\t\t\t\tif (this._widget && this._model && this._editor.hasModel()) { // might have been closed\n\t\t\t\t\t// set title\n\t\t\t\t\tthis._widget.setMetaTitle(options.getMetaTitle(this._model));\n\n\t\t\t\t\t// set 'best' selection\n\t\t\t\t\tlet uri = this._editor.getModel().uri;\n\t\t\t\t\tlet pos = new Position(range.startLineNumber, range.startColumn);\n\t\t\t\t\tlet selection = this._model.nearestReference(uri, pos);\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\treturn this._widget.setSelection(selection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t\t}, error => {\n\t\t\tthis._notificationService.error(error);\n\t\t});\n\t}\n\n\tpublic async goToNextOrPreviousReference(fwd: boolean) {\n\t\tif (!this._editor.hasModel() || !this._model || !this._widget) {\n\t\t\t// can be called while still resolving...\n\t\t\treturn;\n\t\t}\n\t\tconst currentPosition = this._widget.position;\n\t\tif (!currentPosition) {\n\t\t\treturn;\n\t\t}\n\t\tconst source = this._model.nearestReference(this._editor.getModel().uri, currentPosition);\n\t\tif (!source) {\n\t\t\treturn;\n\t\t}\n\t\tconst target = this._model.nextOrPreviousReference(source, fwd);\n\t\tconst editorFocus = this._editor.hasTextFocus();\n\t\tawait this._widget.setSelection(target);\n\t\tawait this._gotoReference(target);\n\t\tif (editorFocus) {\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tpublic closeWidget(): void {\n\t\tif (this._widget) {\n\t\t\tdispose(this._widget);\n\t\t\tthis._widget = null;\n\t\t}\n\t\tthis._referenceSearchVisible.reset();\n\t\tthis._disposables = dispose(this._disposables);\n\t\tif (this._model) {\n\t\t\tdispose(this._model);\n\t\t\tthis._model = null;\n\t\t}\n\t\tthis._editor.focus();\n\t\tthis._requestIdPool += 1; // Cancel pending requests\n\t}\n\n\tprivate _gotoReference(ref: Location): Promise<any> {\n\t\tif (this._widget) {\n\t\t\tthis._widget.hide();\n\t\t}\n\n\t\tthis._ignoreModelChangeEvent = true;\n\t\tconst range = Range.lift(ref.range).collapseToStart();\n\n\t\treturn this._editorService.openCodeEditor({\n\t\t\tresource: ref.uri,\n\t\t\toptions: { selection: range }\n\t\t}, this._editor).then(openedEditor => {\n\t\t\tthis._ignoreModelChangeEvent = false;\n\n\t\t\tif (!openedEditor || openedEditor !== this._editor) {\n\t\t\t\t// TODO@Alex TODO@Joh\n\t\t\t\t// when opening the current reference we might end up\n\t\t\t\t// in a different editor instance. that means we also have\n\t\t\t\t// a different instance of this reference search controller\n\t\t\t\t// and cannot hold onto the widget (which likely doesn't\n\t\t\t\t// exist). Instead of bailing out we should find the\n\t\t\t\t// 'sister' action and pass our current model on to it.\n\t\t\t\tthis.closeWidget();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._widget) {\n\t\t\t\tthis._widget.show(range);\n\t\t\t\tthis._widget.focus();\n\t\t\t}\n\n\t\t}, (err) => {\n\t\t\tthis._ignoreModelChangeEvent = false;\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n\n\tpublic openReference(ref: Location, sideBySide: boolean): void {\n\t\t// clear stage\n\t\tif (!sideBySide) {\n\t\t\tthis.closeWidget();\n\t\t}\n\n\t\tconst { uri, range } = ref;\n\t\tthis._editorService.openCodeEditor({\n\t\t\tresource: uri,\n\t\t\toptions: { selection: range }\n\t\t}, this._editor, sideBySide);\n\t}\n}\n"]}]}