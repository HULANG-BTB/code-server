{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/scanCode\"], function (require, exports, keyCodes_1, scanCode_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class KeybindingParser {\n        static _readModifiers(input) {\n            input = input.toLowerCase().trim();\n            let ctrl = false;\n            let shift = false;\n            let alt = false;\n            let meta = false;\n            let matchedModifier;\n            do {\n                matchedModifier = false;\n                if (/^ctrl(\\+|\\-)/.test(input)) {\n                    ctrl = true;\n                    input = input.substr('ctrl-'.length);\n                    matchedModifier = true;\n                }\n                if (/^shift(\\+|\\-)/.test(input)) {\n                    shift = true;\n                    input = input.substr('shift-'.length);\n                    matchedModifier = true;\n                }\n                if (/^alt(\\+|\\-)/.test(input)) {\n                    alt = true;\n                    input = input.substr('alt-'.length);\n                    matchedModifier = true;\n                }\n                if (/^meta(\\+|\\-)/.test(input)) {\n                    meta = true;\n                    input = input.substr('meta-'.length);\n                    matchedModifier = true;\n                }\n                if (/^win(\\+|\\-)/.test(input)) {\n                    meta = true;\n                    input = input.substr('win-'.length);\n                    matchedModifier = true;\n                }\n                if (/^cmd(\\+|\\-)/.test(input)) {\n                    meta = true;\n                    input = input.substr('cmd-'.length);\n                    matchedModifier = true;\n                }\n            } while (matchedModifier);\n            let key;\n            const firstSpaceIdx = input.indexOf(' ');\n            if (firstSpaceIdx > 0) {\n                key = input.substring(0, firstSpaceIdx);\n                input = input.substring(firstSpaceIdx);\n            }\n            else {\n                key = input;\n                input = '';\n            }\n            return {\n                remains: input,\n                ctrl,\n                shift,\n                alt,\n                meta,\n                key\n            };\n        }\n        static parseSimpleKeybinding(input) {\n            const mods = this._readModifiers(input);\n            const keyCode = keyCodes_1.KeyCodeUtils.fromUserSettings(mods.key);\n            return [new keyCodes_1.SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n        }\n        static parseKeybinding(input, OS) {\n            if (!input) {\n                return null;\n            }\n            const parts = [];\n            let part;\n            do {\n                [part, input] = this.parseSimpleKeybinding(input);\n                parts.push(part);\n            } while (input.length > 0);\n            return new keyCodes_1.ChordKeybinding(parts);\n        }\n        static parseSimpleUserBinding(input) {\n            const mods = this._readModifiers(input);\n            const scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n            if (scanCodeMatch) {\n                const strScanCode = scanCodeMatch[1];\n                const scanCode = scanCode_1.ScanCodeUtils.lowerCaseToEnum(strScanCode);\n                return [new scanCode_1.ScanCodeBinding(mods.ctrl, mods.shift, mods.alt, mods.meta, scanCode), mods.remains];\n            }\n            const keyCode = keyCodes_1.KeyCodeUtils.fromUserSettings(mods.key);\n            return [new keyCodes_1.SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n        }\n        static parseUserBinding(input) {\n            if (!input) {\n                return [];\n            }\n            const parts = [];\n            let part;\n            while (input.length > 0) {\n                [part, input] = this.parseSimpleUserBinding(input);\n                parts.push(part);\n            }\n            return parts;\n        }\n    }\n    exports.KeybindingParser = KeybindingParser;\n});\n",null]}