{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar mime_1 = require(\"vs/base/common/mime\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar path_1 = require(\"vs/base/common/path\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar untitledEditorModel_1 = require(\"vs/workbench/common/editor/untitledEditorModel\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar event_1 = require(\"vs/base/common/event\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar label_1 = require(\"vs/platform/label/common/label\");\n/**\n * An editor input to be used for untitled text buffers.\n */\nvar UntitledEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(UntitledEditorInput, _super);\n    function UntitledEditorInput(resource, _hasAssociatedFilePath, modeId, initialValue, preferredEncoding, instantiationService, textFileService, labelService) {\n        var _this = _super.call(this) || this;\n        _this.resource = resource;\n        _this._hasAssociatedFilePath = _hasAssociatedFilePath;\n        _this.modeId = modeId;\n        _this.initialValue = initialValue;\n        _this.preferredEncoding = preferredEncoding;\n        _this.instantiationService = instantiationService;\n        _this.textFileService = textFileService;\n        _this.labelService = labelService;\n        _this._onDidModelChangeContent = _this._register(new event_1.Emitter());\n        _this._onDidModelChangeEncoding = _this._register(new event_1.Emitter());\n        return _this;\n    }\n    Object.defineProperty(UntitledEditorInput.prototype, \"onDidModelChangeContent\", {\n        get: function () { return this._onDidModelChangeContent.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"onDidModelChangeEncoding\", {\n        get: function () { return this._onDidModelChangeEncoding.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"hasAssociatedFilePath\", {\n        get: function () {\n            return this._hasAssociatedFilePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UntitledEditorInput.prototype.getTypeId = function () {\n        return UntitledEditorInput.ID;\n    };\n    UntitledEditorInput.prototype.getResource = function () {\n        return this.resource;\n    };\n    UntitledEditorInput.prototype.getModeId = function () {\n        if (this.cachedModel) {\n            return this.cachedModel.getModeId();\n        }\n        return this.modeId;\n    };\n    UntitledEditorInput.prototype.getName = function () {\n        return this.hasAssociatedFilePath ? resources_1.basenameOrAuthority(this.resource) : this.resource.path;\n    };\n    Object.defineProperty(UntitledEditorInput.prototype, \"shortDescription\", {\n        get: function () {\n            return path_1.basename(this.labelService.getUriLabel(resources_1.dirname(this.resource)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"mediumDescription\", {\n        get: function () {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource), { relative: true });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"longDescription\", {\n        get: function () {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UntitledEditorInput.prototype.getDescription = function (verbosity) {\n        if (verbosity === void 0) { verbosity = editor_1.Verbosity.MEDIUM; }\n        if (!this.hasAssociatedFilePath) {\n            return null;\n        }\n        switch (verbosity) {\n            case editor_1.Verbosity.SHORT:\n                return this.shortDescription;\n            case editor_1.Verbosity.LONG:\n                return this.longDescription;\n            case editor_1.Verbosity.MEDIUM:\n            default:\n                return this.mediumDescription;\n        }\n    };\n    Object.defineProperty(UntitledEditorInput.prototype, \"shortTitle\", {\n        get: function () {\n            return this.getName();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"mediumTitle\", {\n        get: function () {\n            return this.labelService.getUriLabel(this.resource, { relative: true });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorInput.prototype, \"longTitle\", {\n        get: function () {\n            return this.labelService.getUriLabel(this.resource);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UntitledEditorInput.prototype.getTitle = function (verbosity) {\n        if (!this.hasAssociatedFilePath) {\n            return this.getName();\n        }\n        switch (verbosity) {\n            case editor_1.Verbosity.SHORT:\n                return this.shortTitle;\n            case editor_1.Verbosity.MEDIUM:\n                return this.mediumTitle;\n            case editor_1.Verbosity.LONG:\n                return this.longTitle;\n        }\n        return null;\n    };\n    UntitledEditorInput.prototype.isDirty = function () {\n        if (this.cachedModel) {\n            return this.cachedModel.isDirty();\n        }\n        // A disposed input is never dirty, even if it was restored from backup\n        if (this.isDisposed()) {\n            return false;\n        }\n        // untitled files with an associated path or associated resource\n        return this.hasAssociatedFilePath;\n    };\n    UntitledEditorInput.prototype.confirmSave = function () {\n        return this.textFileService.confirmSave([this.resource]);\n    };\n    UntitledEditorInput.prototype.save = function () {\n        return this.textFileService.save(this.resource);\n    };\n    UntitledEditorInput.prototype.revert = function () {\n        if (this.cachedModel) {\n            this.cachedModel.revert();\n        }\n        this.dispose(); // a reverted untitled editor is no longer valid, so we dispose it\n        return Promise.resolve(true);\n    };\n    UntitledEditorInput.prototype.suggestFileName = function () {\n        if (!this.hasAssociatedFilePath) {\n            if (this.cachedModel) {\n                var modeId = this.cachedModel.getModeId();\n                if (modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) { // do not suggest when the mode ID is simple plain text\n                    return mime_1.suggestFilename(modeId, this.getName());\n                }\n            }\n        }\n        return this.getName();\n    };\n    UntitledEditorInput.prototype.getEncoding = function () {\n        if (this.cachedModel) {\n            return this.cachedModel.getEncoding();\n        }\n        return this.preferredEncoding;\n    };\n    UntitledEditorInput.prototype.setEncoding = function (encoding, mode /* ignored, we only have Encode */) {\n        this.preferredEncoding = encoding;\n        if (this.cachedModel) {\n            this.cachedModel.setEncoding(encoding);\n        }\n    };\n    UntitledEditorInput.prototype.resolve = function () {\n        // Join a model resolve if we have had one before\n        if (this.modelResolve) {\n            return this.modelResolve;\n        }\n        // Otherwise Create Model and load\n        this.cachedModel = this.createModel();\n        this.modelResolve = this.cachedModel.load();\n        return this.modelResolve;\n    };\n    UntitledEditorInput.prototype.createModel = function () {\n        var _this = this;\n        var model = this._register(this.instantiationService.createInstance(untitledEditorModel_1.UntitledEditorModel, this.modeId, this.resource, this.hasAssociatedFilePath, this.initialValue, this.preferredEncoding));\n        // re-emit some events from the model\n        this._register(model.onDidChangeContent(function () { return _this._onDidModelChangeContent.fire(); }));\n        this._register(model.onDidChangeDirty(function () { return _this._onDidChangeDirty.fire(); }));\n        this._register(model.onDidChangeEncoding(function () { return _this._onDidModelChangeEncoding.fire(); }));\n        return model;\n    };\n    UntitledEditorInput.prototype.matches = function (otherInput) {\n        if (_super.prototype.matches.call(this, otherInput) === true) {\n            return true;\n        }\n        if (otherInput instanceof UntitledEditorInput) {\n            var otherUntitledEditorInput = otherInput;\n            // Otherwise compare by properties\n            return otherUntitledEditorInput.resource.toString() === this.resource.toString();\n        }\n        return false;\n    };\n    UntitledEditorInput.prototype.dispose = function () {\n        this.modelResolve = undefined;\n        _super.prototype.dispose.call(this);\n    };\n    UntitledEditorInput.ID = 'workbench.editors.untitledEditorInput';\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"shortDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"mediumDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"longDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"shortTitle\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"mediumTitle\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"longTitle\", null);\n    UntitledEditorInput = tslib_1.__decorate([\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, textfiles_1.ITextFileService),\n        tslib_1.__param(7, label_1.ILabelService)\n    ], UntitledEditorInput);\n    return UntitledEditorInput;\n}(editor_1.EditorInput));\nexports.UntitledEditorInput = UntitledEditorInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { suggestFilename } from 'vs/base/common/mime';\nimport { memoize } from 'vs/base/common/decorators';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { basename } from 'vs/base/common/path';\nimport { basenameOrAuthority, dirname } from 'vs/base/common/resources';\nimport { EditorInput, IEncodingSupport, EncodingMode, ConfirmResult, Verbosity } from 'vs/workbench/common/editor';\nimport { UntitledEditorModel } from 'vs/workbench/common/editor/untitledEditorModel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\n\n/**\n * An editor input to be used for untitled text buffers.\n */\nexport class UntitledEditorInput extends EditorInput implements IEncodingSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.untitledEditorInput';\n\n\tprivate cachedModel: UntitledEditorModel;\n\tprivate modelResolve?: Promise<UntitledEditorModel & IResolvedTextEditorModel>;\n\n\tprivate readonly _onDidModelChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidModelChangeContent(): Event<void> { return this._onDidModelChangeContent.event; }\n\n\tprivate readonly _onDidModelChangeEncoding: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidModelChangeEncoding(): Event<void> { return this._onDidModelChangeEncoding.event; }\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tprivate readonly _hasAssociatedFilePath: boolean,\n\t\tprivate readonly modeId: string,\n\t\tprivate readonly initialValue: string,\n\t\tprivate preferredEncoding: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILabelService private readonly labelService: ILabelService\n\t) {\n\t\tsuper();\n\t}\n\n\tget hasAssociatedFilePath(): boolean {\n\t\treturn this._hasAssociatedFilePath;\n\t}\n\n\tgetTypeId(): string {\n\t\treturn UntitledEditorInput.ID;\n\t}\n\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tgetModeId(): string | null {\n\t\tif (this.cachedModel) {\n\t\t\treturn this.cachedModel.getModeId();\n\t\t}\n\n\t\treturn this.modeId;\n\t}\n\n\tgetName(): string {\n\t\treturn this.hasAssociatedFilePath ? basenameOrAuthority(this.resource) : this.resource.path;\n\t}\n\n\t@memoize\n\tprivate get shortDescription(): string {\n\t\treturn basename(this.labelService.getUriLabel(dirname(this.resource)));\n\t}\n\n\t@memoize\n\tprivate get mediumDescription(): string {\n\t\treturn this.labelService.getUriLabel(dirname(this.resource), { relative: true });\n\t}\n\n\t@memoize\n\tprivate get longDescription(): string {\n\t\treturn this.labelService.getUriLabel(dirname(this.resource));\n\t}\n\n\tgetDescription(verbosity: Verbosity = Verbosity.MEDIUM): string | null {\n\t\tif (!this.hasAssociatedFilePath) {\n\t\t\treturn null;\n\t\t}\n\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\treturn this.shortDescription;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\treturn this.longDescription;\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tdefault:\n\t\t\t\treturn this.mediumDescription;\n\t\t}\n\t}\n\n\t@memoize\n\tprivate get shortTitle(): string {\n\t\treturn this.getName();\n\t}\n\n\t@memoize\n\tprivate get mediumTitle(): string {\n\t\treturn this.labelService.getUriLabel(this.resource, { relative: true });\n\t}\n\n\t@memoize\n\tprivate get longTitle(): string {\n\t\treturn this.labelService.getUriLabel(this.resource);\n\t}\n\n\tgetTitle(verbosity: Verbosity): string | null {\n\t\tif (!this.hasAssociatedFilePath) {\n\t\t\treturn this.getName();\n\t\t}\n\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\treturn this.shortTitle;\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\t\treturn this.mediumTitle;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\treturn this.longTitle;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisDirty(): boolean {\n\t\tif (this.cachedModel) {\n\t\t\treturn this.cachedModel.isDirty();\n\t\t}\n\n\t\t// A disposed input is never dirty, even if it was restored from backup\n\t\tif (this.isDisposed()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// untitled files with an associated path or associated resource\n\t\treturn this.hasAssociatedFilePath;\n\t}\n\n\tconfirmSave(): Promise<ConfirmResult> {\n\t\treturn this.textFileService.confirmSave([this.resource]);\n\t}\n\n\tsave(): Promise<boolean> {\n\t\treturn this.textFileService.save(this.resource);\n\t}\n\n\trevert(): Promise<boolean> {\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.revert();\n\t\t}\n\n\t\tthis.dispose(); // a reverted untitled editor is no longer valid, so we dispose it\n\n\t\treturn Promise.resolve(true);\n\t}\n\n\tsuggestFileName(): string {\n\t\tif (!this.hasAssociatedFilePath) {\n\t\t\tif (this.cachedModel) {\n\t\t\t\tconst modeId = this.cachedModel.getModeId();\n\t\t\t\tif (modeId !== PLAINTEXT_MODE_ID) { // do not suggest when the mode ID is simple plain text\n\t\t\t\t\treturn suggestFilename(modeId, this.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.getName();\n\t}\n\n\tgetEncoding(): string {\n\t\tif (this.cachedModel) {\n\t\t\treturn this.cachedModel.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tsetEncoding(encoding: string, mode: EncodingMode /* ignored, we only have Encode */): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.setEncoding(encoding);\n\t\t}\n\t}\n\n\tresolve(): Promise<UntitledEditorModel & IResolvedTextEditorModel> {\n\n\t\t// Join a model resolve if we have had one before\n\t\tif (this.modelResolve) {\n\t\t\treturn this.modelResolve;\n\t\t}\n\n\t\t// Otherwise Create Model and load\n\t\tthis.cachedModel = this.createModel();\n\t\tthis.modelResolve = this.cachedModel.load();\n\n\t\treturn this.modelResolve;\n\t}\n\n\tprivate createModel(): UntitledEditorModel {\n\t\tconst model = this._register(this.instantiationService.createInstance(UntitledEditorModel, this.modeId, this.resource, this.hasAssociatedFilePath, this.initialValue, this.preferredEncoding));\n\n\t\t// re-emit some events from the model\n\t\tthis._register(model.onDidChangeContent(() => this._onDidModelChangeContent.fire()));\n\t\tthis._register(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis._register(model.onDidChangeEncoding(() => this._onDidModelChangeEncoding.fire()));\n\n\t\treturn model;\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof UntitledEditorInput) {\n\t\t\tconst otherUntitledEditorInput = <UntitledEditorInput>otherInput;\n\n\t\t\t// Otherwise compare by properties\n\t\t\treturn otherUntitledEditorInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tdispose(): void {\n\t\tthis.modelResolve = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}