{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorGroupView.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorGroupView.ts","mtime":1555846338036},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/editorgroupview\");\nvar editorGroup_1 = require(\"vs/workbench/common/editor/editorGroup\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar event_1 = require(\"vs/base/common/event\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar progressbar_1 = require(\"vs/base/browser/ui/progressbar/progressbar\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar tabsTitleControl_1 = require(\"vs/workbench/browser/parts/editor/tabsTitleControl\");\nvar editorControl_1 = require(\"vs/workbench/browser/parts/editor/editorControl\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar progressService_1 = require(\"vs/workbench/services/progress/browser/progressService\");\nvar nls_1 = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar async_1 = require(\"vs/base/common/async\");\nvar touch_1 = require(\"vs/base/browser/touch\");\nvar editor_2 = require(\"vs/workbench/browser/parts/editor/editor\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar editorCommands_1 = require(\"vs/workbench/browser/parts/editor/editorCommands\");\nvar noTabsTitleControl_1 = require(\"vs/workbench/browser/parts/editor/noTabsTitleControl\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar mouseEvent_1 = require(\"vs/base/browser/mouseEvent\");\nvar menuItemActionItem_1 = require(\"vs/platform/actions/browser/menuItemActionItem\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar errorsWithActions_1 = require(\"vs/base/common/errorsWithActions\");\nvar types_1 = require(\"vs/base/common/types\");\nvar hashService_1 = require(\"vs/workbench/services/hash/common/hashService\");\nvar mime_1 = require(\"vs/base/common/mime\");\nvar path_1 = require(\"vs/base/common/path\");\nvar EditorGroupView = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorGroupView, _super);\n    function EditorGroupView(accessor, from, _label, instantiationService, contextKeyService, themeService, notificationService, telemetryService, untitledEditorService, keybindingService, menuService, contextMenuService, hashService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.accessor = accessor;\n        _this._label = _label;\n        _this.instantiationService = instantiationService;\n        _this.contextKeyService = contextKeyService;\n        _this.notificationService = notificationService;\n        _this.telemetryService = telemetryService;\n        _this.untitledEditorService = untitledEditorService;\n        _this.keybindingService = keybindingService;\n        _this.menuService = menuService;\n        _this.contextMenuService = contextMenuService;\n        _this.hashService = hashService;\n        //#endregion\n        //#region events\n        _this._onDidFocus = _this._register(new event_1.Emitter());\n        _this._onWillDispose = _this._register(new event_1.Emitter());\n        _this._onDidGroupChange = _this._register(new event_1.Emitter());\n        _this._onWillOpenEditor = _this._register(new event_1.Emitter());\n        _this._onDidOpenEditorFail = _this._register(new event_1.Emitter());\n        _this._onWillCloseEditor = _this._register(new event_1.Emitter());\n        _this._onDidCloseEditor = _this._register(new event_1.Emitter());\n        _this.mapEditorToPendingConfirmation = new Map();\n        //#endregion\n        //#region ISerializableView\n        _this.element = document.createElement('div');\n        _this._onDidChange = _this._register(new event_1.Relay());\n        _this.onDidChange = _this._onDidChange.event;\n        if (from instanceof EditorGroupView) {\n            _this._group = _this._register(from.group.clone());\n        }\n        else if (editorGroup_1.isSerializedEditorGroup(from)) {\n            _this._group = _this._register(instantiationService.createInstance(editorGroup_1.EditorGroup, from));\n        }\n        else {\n            _this._group = _this._register(instantiationService.createInstance(editorGroup_1.EditorGroup, undefined));\n        }\n        _this.disposedEditorsWorker = _this._register(new async_1.RunOnceWorker(function (editors) { return _this.handleDisposedEditors(editors); }, 0));\n        _this.create();\n        _this._whenRestored = _this.restoreEditors(from);\n        _this._whenRestored.then(function () { return _this.isRestored = true; });\n        _this.registerListeners();\n        return _this;\n    }\n    //#region factory\n    EditorGroupView.createNew = function (accessor, label, instantiationService) {\n        return instantiationService.createInstance(EditorGroupView, accessor, null, label);\n    };\n    EditorGroupView.createFromSerialized = function (serialized, accessor, label, instantiationService) {\n        return instantiationService.createInstance(EditorGroupView, accessor, serialized, label);\n    };\n    EditorGroupView.createCopy = function (copyFrom, accessor, label, instantiationService) {\n        return instantiationService.createInstance(EditorGroupView, accessor, copyFrom, label);\n    };\n    Object.defineProperty(EditorGroupView.prototype, \"onDidFocus\", {\n        get: function () { return this._onDidFocus.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onWillDispose\", {\n        get: function () { return this._onWillDispose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onDidGroupChange\", {\n        get: function () { return this._onDidGroupChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onWillOpenEditor\", {\n        get: function () { return this._onWillOpenEditor.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onDidOpenEditorFail\", {\n        get: function () { return this._onDidOpenEditorFail.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onWillCloseEditor\", {\n        get: function () { return this._onWillCloseEditor.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"onDidCloseEditor\", {\n        get: function () { return this._onDidCloseEditor.event; },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroupView.prototype.create = function () {\n        // Container\n        dom_1.addClasses(this.element, 'editor-group-container');\n        // Container listeners\n        this.registerContainerListeners();\n        // Container toolbar\n        this.createContainerToolbar();\n        // Container context menu\n        this.createContainerContextMenu();\n        // Letterpress container\n        var letterpressContainer = document.createElement('div');\n        dom_1.addClass(letterpressContainer, 'editor-group-letterpress');\n        this.element.appendChild(letterpressContainer);\n        // Progress bar\n        this.progressBar = this._register(new progressbar_1.ProgressBar(this.element));\n        this._register(styler_1.attachProgressBarStyler(this.progressBar, this.themeService));\n        this.progressBar.hide();\n        // Scoped services\n        var scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.element));\n        this.scopedInstantiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, scopedContextKeyService], [progress_1.IProgressService, new progressService_1.ProgressService(this.progressBar)]));\n        // Context keys\n        this.handleGroupContextKeys(scopedContextKeyService);\n        // Title container\n        this.titleContainer = document.createElement('div');\n        dom_1.addClass(this.titleContainer, 'title');\n        this.element.appendChild(this.titleContainer);\n        // Title control\n        this.createTitleAreaControl();\n        // Editor container\n        this.editorContainer = document.createElement('div');\n        dom_1.addClass(this.editorContainer, 'editor-container');\n        this.element.appendChild(this.editorContainer);\n        // Editor control\n        this.editorControl = this._register(this.scopedInstantiationService.createInstance(editorControl_1.EditorControl, this.editorContainer, this));\n        this._onDidChange.input = this.editorControl.onDidSizeConstraintsChange;\n        // Track Focus\n        this.doTrackFocus();\n        // Update containers\n        this.updateTitleContainer();\n        this.updateContainer();\n        // Update styles\n        this.updateStyles();\n    };\n    EditorGroupView.prototype.handleGroupContextKeys = function (contextKeyServcie) {\n        var _this = this;\n        var groupActiveEditorDirtyContextKey = editor_1.EditorGroupActiveEditorDirtyContext.bindTo(contextKeyServcie);\n        var activeEditorListener;\n        var observeActiveEditor = function () {\n            activeEditorListener = lifecycle_1.dispose(activeEditorListener);\n            var activeEditor = _this._group.activeEditor;\n            if (activeEditor) {\n                groupActiveEditorDirtyContextKey.set(activeEditor.isDirty());\n                activeEditorListener = activeEditor.onDidChangeDirty(function () { return groupActiveEditorDirtyContextKey.set(activeEditor.isDirty()); });\n            }\n            else {\n                groupActiveEditorDirtyContextKey.set(false);\n            }\n        };\n        // Track the active editor and update context key that reflects\n        // the dirty state of this editor\n        this._register(this.onDidGroupChange(function (e) {\n            if (e.kind === editorGroupsService_1.GroupChangeKind.EDITOR_ACTIVE) {\n                observeActiveEditor();\n            }\n        }));\n        observeActiveEditor();\n    };\n    EditorGroupView.prototype.registerContainerListeners = function () {\n        var _this = this;\n        // Open new file via doubleclick on empty container\n        this._register(dom_1.addDisposableListener(this.element, dom_1.EventType.DBLCLICK, function (e) {\n            if (_this.isEmpty()) {\n                dom_1.EventHelper.stop(e);\n                _this.openEditor(_this.untitledEditorService.createOrGet(), editor_1.EditorOptions.create({ pinned: true }));\n            }\n        }));\n        // Close empty editor group via middle mouse click\n        this._register(dom_1.addDisposableListener(this.element, dom_1.EventType.MOUSE_UP, function (e) {\n            if (_this.isEmpty() && e.button === 1 /* Middle Button */) {\n                dom_1.EventHelper.stop(e);\n                _this.accessor.removeGroup(_this);\n            }\n        }));\n    };\n    EditorGroupView.prototype.createContainerToolbar = function () {\n        var _this = this;\n        // Toolbar Container\n        var toolbarContainer = document.createElement('div');\n        dom_1.addClass(toolbarContainer, 'editor-group-container-toolbar');\n        this.element.appendChild(toolbarContainer);\n        // Toolbar\n        var groupId = this._group.id;\n        var containerToolbar = new actionbar_1.ActionBar(toolbarContainer, {\n            ariaLabel: nls_1.localize('araLabelGroupActions', \"Editor group actions\"), actionRunner: this._register(new /** @class */ (function (_super) {\n                tslib_1.__extends(class_1, _super);\n                function class_1() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                class_1.prototype.run = function (action) {\n                    return action.run(groupId);\n                };\n                return class_1;\n            }(actions_1.ActionRunner)))\n        });\n        // Toolbar actions\n        var removeGroupAction = this._register(new actions_1.Action(editorCommands_1.CLOSE_EDITOR_GROUP_COMMAND_ID, nls_1.localize('closeGroupAction', \"Close\"), 'close-editor-group', true, function () { _this.accessor.removeGroup(_this); return Promise.resolve(true); }));\n        var keybinding = this.keybindingService.lookupKeybinding(removeGroupAction.id);\n        containerToolbar.push(removeGroupAction, { icon: true, label: false, keybinding: keybinding ? keybinding.getLabel() : undefined });\n    };\n    EditorGroupView.prototype.createContainerContextMenu = function () {\n        var _this = this;\n        var menu = this._register(this.menuService.createMenu(actions_2.MenuId.EmptyEditorGroupContext, this.contextKeyService));\n        this._register(dom_1.addDisposableListener(this.element, dom_1.EventType.CONTEXT_MENU, function (event) { return _this.onShowContainerContextMenu(menu, event); }));\n        this._register(dom_1.addDisposableListener(this.element, touch_1.EventType.Contextmenu, function (event) { return _this.onShowContainerContextMenu(menu); }));\n    };\n    EditorGroupView.prototype.onShowContainerContextMenu = function (menu, e) {\n        var _this = this;\n        if (!this.isEmpty()) {\n            return; // only for empty editor groups\n        }\n        // Find target anchor\n        var anchor = this.element;\n        if (e instanceof MouseEvent) {\n            var event = new mouseEvent_1.StandardMouseEvent(e);\n            anchor = { x: event.posx, y: event.posy };\n        }\n        // Fill in contributed actions\n        var actions = [];\n        menuItemActionItem_1.fillInContextMenuActions(menu, undefined, actions, this.contextMenuService);\n        // Show it\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return anchor; },\n            getActions: function () { return actions; },\n            onHide: function () { return _this.focus(); }\n        });\n    };\n    EditorGroupView.prototype.doTrackFocus = function () {\n        var _this = this;\n        // Container\n        var containerFocusTracker = this._register(dom_1.trackFocus(this.element));\n        this._register(containerFocusTracker.onDidFocus(function () {\n            if (_this.isEmpty()) {\n                _this._onDidFocus.fire(); // only when empty to prevent accident focus\n            }\n        }));\n        // Title Container\n        var handleTitleClickOrTouch = function (e) {\n            var target;\n            if (e instanceof MouseEvent) {\n                if (e.button !== 0) {\n                    return undefined; // only for left mouse click\n                }\n                target = e.target;\n            }\n            else {\n                target = e.initialTarget;\n            }\n            if (dom_1.findParentWithClass(target, 'monaco-action-bar', _this.titleContainer) ||\n                dom_1.findParentWithClass(target, 'monaco-breadcrumb-item', _this.titleContainer)) {\n                return; // not when clicking on actions or breadcrumbs\n            }\n            // timeout to keep focus in editor after mouse up\n            setTimeout(function () {\n                _this.focus();\n            });\n        };\n        this._register(dom_1.addDisposableListener(this.titleContainer, dom_1.EventType.MOUSE_DOWN, function (e) { return handleTitleClickOrTouch(e); }));\n        this._register(dom_1.addDisposableListener(this.titleContainer, touch_1.EventType.Tap, function (e) { return handleTitleClickOrTouch(e); }));\n        // Editor Container\n        this._register(this.editorControl.onDidFocus(function () {\n            _this._onDidFocus.fire();\n        }));\n    };\n    EditorGroupView.prototype.updateContainer = function () {\n        // Empty Container: add some empty container attributes\n        if (this.isEmpty()) {\n            dom_1.addClass(this.element, 'empty');\n            this.element.tabIndex = 0;\n            this.element.setAttribute('aria-label', nls_1.localize('emptyEditorGroup', \"{0} (empty)\", this.label));\n        }\n        // Non-Empty Container: revert empty container attributes\n        else {\n            dom_1.removeClass(this.element, 'empty');\n            this.element.removeAttribute('tabIndex');\n            this.element.removeAttribute('aria-label');\n        }\n        // Update styles\n        this.updateStyles();\n    };\n    EditorGroupView.prototype.updateTitleContainer = function () {\n        dom_1.toggleClass(this.titleContainer, 'tabs', this.accessor.partOptions.showTabs);\n        dom_1.toggleClass(this.titleContainer, 'show-file-icons', this.accessor.partOptions.showIcons);\n    };\n    EditorGroupView.prototype.createTitleAreaControl = function () {\n        // Clear old if existing\n        if (this.titleAreaControl) {\n            this.titleAreaControl.dispose();\n            dom_1.clearNode(this.titleContainer);\n        }\n        // Create new based on options\n        if (this.accessor.partOptions.showTabs) {\n            this.titleAreaControl = this.scopedInstantiationService.createInstance(tabsTitleControl_1.TabsTitleControl, this.titleContainer, this.accessor, this);\n        }\n        else {\n            this.titleAreaControl = this.scopedInstantiationService.createInstance(noTabsTitleControl_1.NoTabsTitleControl, this.titleContainer, this.accessor, this);\n        }\n    };\n    EditorGroupView.prototype.restoreEditors = function (from) {\n        var _this = this;\n        if (this._group.count === 0) {\n            return Promise.resolve(); // nothing to show\n        }\n        // Determine editor options\n        var options;\n        if (from instanceof EditorGroupView) {\n            options = editor_2.getActiveTextEditorOptions(from); // if we copy from another group, ensure to copy its active editor viewstate\n        }\n        else {\n            options = new editor_1.EditorOptions();\n        }\n        var activeEditor = this._group.activeEditor;\n        if (!activeEditor) {\n            return Promise.resolve();\n        }\n        options.pinned = this._group.isPinned(activeEditor); // preserve pinned state\n        options.preserveFocus = true; // handle focus after editor is opened\n        var activeElement = document.activeElement;\n        // Show active editor\n        return this.doShowEditor(activeEditor, true, options).then(function () {\n            // Set focused now if this is the active group and focus has\n            // not changed meanwhile. This prevents focus from being\n            // stolen accidentally on startup when the user already\n            // clicked somewhere.\n            if (_this.accessor.activeGroup === _this && activeElement === document.activeElement) {\n                _this.focus();\n            }\n        });\n    };\n    //#region event handling\n    EditorGroupView.prototype.registerListeners = function () {\n        var _this = this;\n        // Model Events\n        this._register(this._group.onDidEditorPin(function (editor) { return _this.onDidEditorPin(editor); }));\n        this._register(this._group.onDidEditorOpen(function (editor) { return _this.onDidEditorOpen(editor); }));\n        this._register(this._group.onDidEditorClose(function (editor) { return _this.onDidEditorClose(editor); }));\n        this._register(this._group.onDidEditorDispose(function (editor) { return _this.onDidEditorDispose(editor); }));\n        this._register(this._group.onDidEditorBecomeDirty(function (editor) { return _this.onDidEditorBecomeDirty(editor); }));\n        this._register(this._group.onDidEditorLabelChange(function (editor) { return _this.onDidEditorLabelChange(editor); }));\n        // Option Changes\n        this._register(this.accessor.onDidEditorPartOptionsChange(function (e) { return _this.onDidEditorPartOptionsChange(e); }));\n    };\n    EditorGroupView.prototype.onDidEditorPin = function (editor) {\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_PIN, editor: editor });\n    };\n    EditorGroupView.prototype.onDidEditorOpen = function (editor) {\n        var _this = this;\n        // Telemetry\n        this.toEditorTelemetryDescriptor(editor).then(function (descriptor) {\n            /* __GDPR__\n                \"editorOpened\" : {\n                    \"${include}\": [\n                        \"${EditorTelemetryDescriptor}\"\n                    ]\n                }\n            */\n            _this.telemetryService.publicLog('editorOpened', descriptor);\n        });\n        // Update container\n        this.updateContainer();\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_OPEN, editor: editor });\n    };\n    EditorGroupView.prototype.onDidEditorClose = function (event) {\n        var _this = this;\n        // Before close\n        this._onWillCloseEditor.fire(event);\n        // Handle event\n        var editor = event.editor;\n        var editorsToClose = [editor];\n        // Include both sides of side by side editors when being closed and not opened multiple times\n        if (editor instanceof editor_1.SideBySideEditorInput && !this.accessor.groups.some(function (groupView) { return groupView.group.contains(editor); })) {\n            editorsToClose.push(editor.master, editor.details);\n        }\n        // Close the editor when it is no longer open in any group including diff editors\n        editorsToClose.forEach(function (editorToClose) {\n            var resource = editorToClose ? editorToClose.getResource() : undefined; // prefer resource to not close right-hand side editors of a diff editor\n            if (!_this.accessor.groups.some(function (groupView) { return groupView.group.contains(resource || editorToClose); })) {\n                editorToClose.close();\n            }\n        });\n        // Telemetry\n        this.toEditorTelemetryDescriptor(event.editor).then(function (descriptor) {\n            /* __GDPR__\n                \"editorClosed\" : {\n                    \"${include}\": [\n                        \"${EditorTelemetryDescriptor}\"\n                    ]\n                }\n            */\n            _this.telemetryService.publicLog('editorClosed', descriptor);\n        });\n        // Update container\n        this.updateContainer();\n        // Event\n        this._onDidCloseEditor.fire(event);\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_CLOSE, editor: editor, editorIndex: event.index });\n    };\n    EditorGroupView.prototype.toEditorTelemetryDescriptor = function (editor) {\n        var descriptor = editor.getTelemetryDescriptor();\n        var resource = editor.getResource();\n        if (resource && resource.fsPath) {\n            return this.hashService.createSHA1(resource.fsPath).then(function (hashedPath) {\n                descriptor['resource'] = { mimeType: mime_1.guessMimeTypes(resource.fsPath).join(', '), scheme: resource.scheme, ext: path_1.extname(resource.fsPath), path: hashedPath };\n                /* __GDPR__FRAGMENT__\n                    \"EditorTelemetryDescriptor\" : {\n                        \"resource\": { \"${inline}\": [ \"${URIDescriptor}\" ] }\n                    }\n                */\n                return descriptor;\n            });\n        }\n        return Promise.resolve(descriptor);\n    };\n    EditorGroupView.prototype.onDidEditorDispose = function (editor) {\n        // To prevent race conditions, we handle disposed editors in our worker with a timeout\n        // because it can happen that an input is being disposed with the intent to replace\n        // it with some other input right after.\n        this.disposedEditorsWorker.work(editor);\n    };\n    EditorGroupView.prototype.handleDisposedEditors = function (editors) {\n        var _this = this;\n        // Split between visible and hidden editors\n        var activeEditor;\n        var inactiveEditors = [];\n        editors.forEach(function (editor) {\n            if (_this._group.isActive(editor)) {\n                activeEditor = editor;\n            }\n            else if (_this._group.contains(editor)) {\n                inactiveEditors.push(editor);\n            }\n        });\n        // Close all inactive editors first to prevent UI flicker\n        inactiveEditors.forEach(function (hidden) { return _this.doCloseEditor(hidden, false); });\n        // Close active one last\n        if (activeEditor) {\n            this.doCloseEditor(activeEditor, false);\n        }\n    };\n    EditorGroupView.prototype.onDidEditorPartOptionsChange = function (event) {\n        // Title container\n        this.updateTitleContainer();\n        // Title control Switch between showing tabs <=> not showing tabs\n        if (event.oldPartOptions.showTabs !== event.newPartOptions.showTabs) {\n            this.createTitleAreaControl();\n            if (this._group.activeEditor) {\n                this.titleAreaControl.openEditor(this._group.activeEditor);\n            }\n        }\n        // Just update title control\n        else {\n            this.titleAreaControl.updateOptions(event.oldPartOptions, event.newPartOptions);\n        }\n        // Styles\n        this.updateStyles();\n        // Pin preview editor once user disables preview\n        if (event.oldPartOptions.enablePreview && !event.newPartOptions.enablePreview) {\n            if (this._group.previewEditor) {\n                this.pinEditor(this._group.previewEditor);\n            }\n        }\n    };\n    EditorGroupView.prototype.onDidEditorBecomeDirty = function (editor) {\n        // Always show dirty editors pinned\n        this.pinEditor(editor);\n        // Forward to title control\n        this.titleAreaControl.updateEditorDirty(editor);\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_DIRTY, editor: editor });\n    };\n    EditorGroupView.prototype.onDidEditorLabelChange = function (editor) {\n        // Forward to title control\n        this.titleAreaControl.updateEditorLabel(editor);\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_LABEL, editor: editor });\n    };\n    Object.defineProperty(EditorGroupView.prototype, \"group\", {\n        //#endregion\n        //region IEditorGroupView\n        get: function () {\n            return this._group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"label\", {\n        get: function () {\n            return this._label;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"disposed\", {\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"whenRestored\", {\n        get: function () {\n            return this._whenRestored;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroupView.prototype.setLabel = function (label) {\n        if (this._label !== label) {\n            this._label = label;\n            this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.GROUP_LABEL });\n        }\n    };\n    EditorGroupView.prototype.setActive = function (isActive) {\n        this.active = isActive;\n        // Update container\n        dom_1.toggleClass(this.element, 'active', isActive);\n        dom_1.toggleClass(this.element, 'inactive', !isActive);\n        // Update title control\n        this.titleAreaControl.setActive(isActive);\n        // Update styles\n        this.updateStyles();\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.GROUP_ACTIVE });\n    };\n    EditorGroupView.prototype.isEmpty = function () {\n        return this._group.count === 0;\n    };\n    Object.defineProperty(EditorGroupView.prototype, \"id\", {\n        //#endregion\n        //#region IEditorGroup\n        //#region basics()\n        get: function () {\n            return this._group.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"editors\", {\n        get: function () {\n            return this._group.getEditors();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"count\", {\n        get: function () {\n            return this._group.count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"activeControl\", {\n        get: function () {\n            return this.editorControl ? types_1.withNullAsUndefined(this.editorControl.activeControl) : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"activeEditor\", {\n        get: function () {\n            return this._group.activeEditor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"previewEditor\", {\n        get: function () {\n            return this._group.previewEditor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroupView.prototype.isPinned = function (editor) {\n        return this._group.isPinned(editor);\n    };\n    EditorGroupView.prototype.isActive = function (editor) {\n        return this._group.isActive(editor);\n    };\n    EditorGroupView.prototype.getEditors = function (order) {\n        if (order === editorGroupsService_1.EditorsOrder.MOST_RECENTLY_ACTIVE) {\n            return this._group.getEditors(true);\n        }\n        return this.editors;\n    };\n    EditorGroupView.prototype.getEditor = function (index) {\n        return this._group.getEditor(index);\n    };\n    EditorGroupView.prototype.getIndexOfEditor = function (editor) {\n        return this._group.indexOf(editor);\n    };\n    EditorGroupView.prototype.isOpened = function (editor) {\n        return this._group.contains(editor);\n    };\n    EditorGroupView.prototype.focus = function () {\n        // Pass focus to widgets\n        if (this.activeControl) {\n            this.activeControl.focus();\n        }\n        else {\n            this.element.focus();\n        }\n        // Event\n        this._onDidFocus.fire();\n    };\n    EditorGroupView.prototype.pinEditor = function (editor) {\n        if (editor === void 0) { editor = this.activeEditor || undefined; }\n        if (editor && !this._group.isPinned(editor)) {\n            // Update model\n            this._group.pin(editor);\n            // Forward to title control\n            this.titleAreaControl.pinEditor(editor);\n        }\n    };\n    EditorGroupView.prototype.invokeWithinContext = function (fn) {\n        return this.scopedInstantiationService.invokeFunction(fn);\n    };\n    //#endregion\n    //#region openEditor()\n    EditorGroupView.prototype.openEditor = function (editor, options) {\n        // Guard against invalid inputs\n        if (!editor) {\n            return Promise.resolve(null);\n        }\n        // Editor opening event allows for prevention\n        var event = new EditorOpeningEvent(this._group.id, editor, options);\n        this._onWillOpenEditor.fire(event);\n        var prevented = event.isPrevented();\n        if (prevented) {\n            return prevented();\n        }\n        // Proceed with opening\n        return this.doOpenEditor(editor, options);\n    };\n    EditorGroupView.prototype.doOpenEditor = function (editor, options) {\n        // Determine options\n        var openEditorOptions = {\n            index: options ? options.index : undefined,\n            pinned: !this.accessor.partOptions.enablePreview || editor.isDirty() || (options && options.pinned) || (options && typeof options.index === 'number'),\n            active: this._group.count === 0 || !options || !options.inactive\n        };\n        if (!openEditorOptions.active && !openEditorOptions.pinned && this._group.activeEditor && this._group.isPreview(this._group.activeEditor)) {\n            // Special case: we are to open an editor inactive and not pinned, but the current active\n            // editor is also not pinned, which means it will get replaced with this one. As such,\n            // the editor can only be active.\n            openEditorOptions.active = true;\n        }\n        // Set group active unless we open inactive or preserve focus\n        // Do this before we open the editor in the group to prevent a false\n        // active editor change event before the editor is loaded\n        // (see https://github.com/Microsoft/vscode/issues/51679)\n        if (openEditorOptions.active && (!options || !options.preserveFocus)) {\n            this.accessor.activateGroup(this);\n        }\n        // Actually move the editor if a specific index is provided and we figure\n        // out that the editor is already opened at a different index. This\n        // ensures the right set of events are fired to the outside.\n        if (typeof openEditorOptions.index === 'number') {\n            var indexOfEditor = this._group.indexOf(editor);\n            if (indexOfEditor !== -1 && indexOfEditor !== openEditorOptions.index) {\n                this.doMoveEditorInsideGroup(editor, openEditorOptions);\n            }\n        }\n        // Update model\n        this._group.openEditor(editor, openEditorOptions);\n        // Show editor\n        return this.doShowEditor(editor, !!openEditorOptions.active, options);\n    };\n    EditorGroupView.prototype.doShowEditor = function (editor, active, options) {\n        var _this = this;\n        // Show in editor control if the active editor changed\n        var openEditorPromise;\n        if (active) {\n            openEditorPromise = this.editorControl.openEditor(editor, options).then(function (result) {\n                // Editor change event\n                if (result.editorChanged) {\n                    _this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_ACTIVE, editor: editor });\n                }\n                return result.control;\n            }, function (error) {\n                // Handle errors but do not bubble them up\n                _this.doHandleOpenEditorError(error, editor, options);\n                return null; // error: return NULL as result to signal this\n            });\n        }\n        else {\n            openEditorPromise = Promise.resolve(null); // inactive: return NULL as result to signal this\n        }\n        // Show in title control after editor control because some actions depend on it\n        this.titleAreaControl.openEditor(editor);\n        return openEditorPromise;\n    };\n    EditorGroupView.prototype.doHandleOpenEditorError = function (error, editor, options) {\n        // Report error only if this was not us restoring previous error state or\n        // we are told to ignore errors that occur from opening an editor\n        if (this.isRestored && !errors_1.isPromiseCanceledError(error) && (!options || !options.ignoreError)) {\n            var actions_3 = { primary: [] };\n            if (errorsWithActions_1.isErrorWithActions(error)) {\n                actions_3.primary = error.actions;\n            }\n            var handle = this.notificationService.notify({\n                severity: notification_1.Severity.Error,\n                message: nls_1.localize('editorOpenError', \"Unable to open '{0}': {1}.\", editor.getName(), errorMessage_1.toErrorMessage(error)),\n                actions: actions_3\n            });\n            event_1.Event.once(handle.onDidClose)(function () { return actions_3.primary && lifecycle_1.dispose(actions_3.primary); });\n        }\n        // Event\n        this._onDidOpenEditorFail.fire(editor);\n        // Recover by closing the active editor (if the input is still the active one)\n        if (this.activeEditor === editor) {\n            var focusNext = !options || !options.preserveFocus;\n            this.doCloseEditor(editor, focusNext, true /* from error */);\n        }\n    };\n    //#endregion\n    //#region openEditors()\n    EditorGroupView.prototype.openEditors = function (editors) {\n        var _this = this;\n        if (!editors.length) {\n            return Promise.resolve(null);\n        }\n        // Do not modify original array\n        editors = editors.slice(0);\n        var result;\n        // Use the first editor as active editor\n        var _a = editors.shift(), editor = _a.editor, options = _a.options;\n        return this.openEditor(editor, options).then(function (activeEditor) {\n            result = activeEditor; // this can be NULL if the opening failed\n            var startingIndex = _this.getIndexOfEditor(editor) + 1;\n            // Open the other ones inactive\n            return Promise.all(editors.map(function (_a, index) {\n                var editor = _a.editor, options = _a.options;\n                var adjustedEditorOptions = options || new editor_1.EditorOptions();\n                adjustedEditorOptions.inactive = true;\n                adjustedEditorOptions.pinned = true;\n                adjustedEditorOptions.index = startingIndex + index;\n                return _this.openEditor(editor, adjustedEditorOptions).then(function (activeEditor) {\n                    if (!result) {\n                        result = activeEditor; // only take if the first editor opening failed\n                    }\n                });\n            })).then(function () { return result; });\n        });\n    };\n    //#endregion\n    //#region moveEditor()\n    EditorGroupView.prototype.moveEditor = function (editor, target, options) {\n        // Move within same group\n        if (this === target) {\n            this.doMoveEditorInsideGroup(editor, options);\n        }\n        // Move across groups\n        else {\n            this.doMoveOrCopyEditorAcrossGroups(editor, target, options);\n        }\n    };\n    EditorGroupView.prototype.doMoveEditorInsideGroup = function (editor, moveOptions) {\n        var moveToIndex = moveOptions ? moveOptions.index : undefined;\n        if (typeof moveToIndex !== 'number') {\n            return; // do nothing if we move into same group without index\n        }\n        var currentIndex = this._group.indexOf(editor);\n        if (currentIndex === moveToIndex) {\n            return; // do nothing if editor is already at the given index\n        }\n        // Update model\n        this._group.moveEditor(editor, moveToIndex);\n        this._group.pin(editor);\n        // Forward to title area\n        this.titleAreaControl.moveEditor(editor, currentIndex, moveToIndex);\n        this.titleAreaControl.pinEditor(editor);\n        // Event\n        this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_MOVE, editor: editor });\n    };\n    EditorGroupView.prototype.doMoveOrCopyEditorAcrossGroups = function (editor, target, moveOptions, keepCopy) {\n        if (moveOptions === void 0) { moveOptions = Object.create(null); }\n        // When moving an editor, try to preserve as much view state as possible by checking\n        // for the editor to be a text editor and creating the options accordingly if so\n        var options = editor_2.getActiveTextEditorOptions(this, editor, editor_1.EditorOptions.create(moveOptions));\n        options.pinned = true; // always pin moved editor\n        // A move to another group is an open first...\n        target.openEditor(editor, options);\n        // ...and a close afterwards (unless we copy)\n        if (!keepCopy) {\n            this.doCloseEditor(editor, false /* do not focus next one behind if any */);\n        }\n    };\n    //#endregion\n    //#region copyEditor()\n    EditorGroupView.prototype.copyEditor = function (editor, target, options) {\n        // Move within same group because we do not support to show the same editor\n        // multiple times in the same group\n        if (this === target) {\n            this.doMoveEditorInsideGroup(editor, options);\n        }\n        // Copy across groups\n        else {\n            this.doMoveOrCopyEditorAcrossGroups(editor, target, options, true);\n        }\n    };\n    //#endregion\n    //#region closeEditor()\n    EditorGroupView.prototype.closeEditor = function (editor, options) {\n        var _this = this;\n        if (editor === void 0) { editor = this.activeEditor || undefined; }\n        if (!editor) {\n            return Promise.resolve();\n        }\n        // Check for dirty and veto\n        return this.handleDirty([editor]).then(function (veto) {\n            if (veto) {\n                return;\n            }\n            // Do close\n            _this.doCloseEditor(editor, options && options.preserveFocus ? false : undefined);\n        });\n    };\n    EditorGroupView.prototype.doCloseEditor = function (editor, focusNext, fromError) {\n        if (focusNext === void 0) { focusNext = (this.accessor.activeGroup === this); }\n        // Closing the active editor of the group is a bit more work\n        if (this._group.isActive(editor)) {\n            this.doCloseActiveEditor(focusNext, fromError);\n        }\n        // Closing inactive editor is just a model update\n        else {\n            this.doCloseInactiveEditor(editor);\n        }\n        // Forward to title control\n        this.titleAreaControl.closeEditor(editor);\n    };\n    EditorGroupView.prototype.doCloseActiveEditor = function (focusNext, fromError) {\n        if (focusNext === void 0) { focusNext = (this.accessor.activeGroup === this); }\n        var editorToClose = this.activeEditor;\n        var restoreFocus = this.shouldRestoreFocus(this.element);\n        // Optimization: if we are about to close the last editor in this group and settings\n        // are configured to close the group since it will be empty, we first set the last\n        // active group as empty before closing the editor. This reduces the amount of editor\n        // change events that this operation emits and will reduce flicker. Without this\n        // optimization, this group (if active) would first trigger a active editor change\n        // event because it became empty, only to then trigger another one when the next\n        // group gets active.\n        var closeEmptyGroup = this.accessor.partOptions.closeEmptyGroups;\n        if (closeEmptyGroup && this.active && this._group.count === 1) {\n            var mostRecentlyActiveGroups = this.accessor.getGroups(editorGroupsService_1.GroupsOrder.MOST_RECENTLY_ACTIVE);\n            var nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current one, so take [1]\n            if (nextActiveGroup) {\n                if (restoreFocus) {\n                    nextActiveGroup.focus();\n                }\n                else {\n                    this.accessor.activateGroup(nextActiveGroup);\n                }\n            }\n        }\n        // Update model\n        if (editorToClose) {\n            this._group.closeEditor(editorToClose);\n        }\n        // Open next active if there are more to show\n        var nextActiveEditor = this._group.activeEditor;\n        if (nextActiveEditor) {\n            var options = editor_1.EditorOptions.create({ preserveFocus: !focusNext });\n            // When closing an editor due to an error we can end up in a loop where we continue closing\n            // editors that fail to open (e.g. when the file no longer exists). We do not want to show\n            // repeated errors in this case to the user. As such, if we open the next editor and we are\n            // in a scope of a previous editor failing, we silence the input errors until the editor is\n            // opened by setting ignoreError: true.\n            if (fromError) {\n                options.ignoreError = true;\n            }\n            this.openEditor(nextActiveEditor, options);\n        }\n        // Otherwise we are empty, so clear from editor control and send event\n        else {\n            // Forward to editor control\n            if (editorToClose) {\n                this.editorControl.closeEditor(editorToClose);\n            }\n            // Restore focus to group container as needed unless group gets closed\n            if (restoreFocus && !closeEmptyGroup) {\n                this.focus();\n            }\n            // Events\n            this._onDidGroupChange.fire({ kind: editorGroupsService_1.GroupChangeKind.EDITOR_ACTIVE });\n            // Remove empty group if we should\n            if (closeEmptyGroup) {\n                this.accessor.removeGroup(this);\n            }\n        }\n    };\n    EditorGroupView.prototype.shouldRestoreFocus = function (target) {\n        var activeElement = document.activeElement;\n        if (activeElement === document.body) {\n            return true; // always restore focus if nothing is focused currently\n        }\n        // otherwise check for the active element being an ancestor of the target\n        return dom_1.isAncestor(activeElement, target);\n    };\n    EditorGroupView.prototype.doCloseInactiveEditor = function (editor) {\n        // Update model\n        this._group.closeEditor(editor);\n    };\n    EditorGroupView.prototype.handleDirty = function (editors) {\n        var _this = this;\n        if (!editors.length) {\n            return Promise.resolve(false); // no veto\n        }\n        var editor = editors.shift();\n        // To prevent multiple confirmation dialogs from showing up one after the other\n        // we check if a pending confirmation is currently showing and if so, join that\n        var handleDirtyPromise = this.mapEditorToPendingConfirmation.get(editor);\n        if (!handleDirtyPromise) {\n            handleDirtyPromise = this.doHandleDirty(editor);\n            this.mapEditorToPendingConfirmation.set(editor, handleDirtyPromise);\n        }\n        return handleDirtyPromise.then(function (veto) {\n            // Make sure to remove from our map of cached pending confirmations\n            _this.mapEditorToPendingConfirmation.delete(editor);\n            // Return for the first veto we got\n            if (veto) {\n                return veto;\n            }\n            // Otherwise continue with the remainders\n            return _this.handleDirty(editors);\n        });\n    };\n    EditorGroupView.prototype.doHandleDirty = function (editor) {\n        var _this = this;\n        if (!editor.isDirty() || // editor must be dirty\n            this.accessor.groups.some(function (groupView) { return groupView !== _this && groupView.group.contains(editor, true /* support side by side */); }) || // editor is opened in other group\n            editor instanceof editor_1.SideBySideEditorInput && this.isOpened(editor.master) // side by side editor master is still opened\n        ) {\n            return Promise.resolve(false);\n        }\n        // Switch to editor that we want to handle and confirm to save/revert\n        return this.openEditor(editor).then(function () { return editor.confirmSave().then(function (res) {\n            // It could be that the editor saved meanwhile, so we check again\n            // to see if anything needs to happen before closing for good.\n            // This can happen for example if autoSave: onFocusChange is configured\n            // so that the save happens when the dialog opens.\n            if (!editor.isDirty()) {\n                return res === editor_1.ConfirmResult.CANCEL ? true : false;\n            }\n            // Otherwise, handle accordingly\n            switch (res) {\n                case editor_1.ConfirmResult.SAVE:\n                    return editor.save().then(function (ok) { return !ok; });\n                case editor_1.ConfirmResult.DONT_SAVE:\n                    // first try a normal revert where the contents of the editor are restored\n                    return editor.revert().then(function (ok) { return !ok; }, function (error) {\n                        // if that fails, since we are about to close the editor, we accept that\n                        // the editor cannot be reverted and instead do a soft revert that just\n                        // enables us to close the editor. With this, a user can always close a\n                        // dirty editor even when reverting fails.\n                        return editor.revert({ soft: true }).then(function (ok) { return !ok; });\n                    });\n                case editor_1.ConfirmResult.CANCEL:\n                    return true; // veto\n            }\n        }); });\n    };\n    //#endregion\n    //#region closeEditors()\n    EditorGroupView.prototype.closeEditors = function (args, options) {\n        var _this = this;\n        if (this.isEmpty()) {\n            return Promise.resolve();\n        }\n        var editors = this.getEditorsToClose(args);\n        // Check for dirty and veto\n        return this.handleDirty(editors.slice(0)).then(function (veto) {\n            if (veto) {\n                return;\n            }\n            // Do close\n            _this.doCloseEditors(editors, options);\n        });\n    };\n    EditorGroupView.prototype.getEditorsToClose = function (editors) {\n        if (Array.isArray(editors)) {\n            return editors;\n        }\n        var filter = editors;\n        var hasDirection = typeof filter.direction === 'number';\n        var editorsToClose = this._group.getEditors(!hasDirection /* in MRU order only if direction is not specified */);\n        // Filter: saved only\n        if (filter.savedOnly) {\n            editorsToClose = editorsToClose.filter(function (e) { return !e.isDirty(); });\n        }\n        // Filter: direction (left / right)\n        else if (hasDirection) {\n            editorsToClose = (filter.direction === editor_1.CloseDirection.LEFT) ?\n                editorsToClose.slice(0, this._group.indexOf(filter.except)) :\n                editorsToClose.slice(this._group.indexOf(filter.except) + 1);\n        }\n        // Filter: except\n        else if (filter.except) {\n            editorsToClose = editorsToClose.filter(function (e) { return !e.matches(filter.except); });\n        }\n        return editorsToClose;\n    };\n    EditorGroupView.prototype.doCloseEditors = function (editors, options) {\n        var _this = this;\n        // Close all inactive editors first\n        var closeActiveEditor = false;\n        editors.forEach(function (editor) {\n            if (!_this.isActive(editor)) {\n                _this.doCloseInactiveEditor(editor);\n            }\n            else {\n                closeActiveEditor = true;\n            }\n        });\n        // Close active editor last if contained in editors list to close\n        if (closeActiveEditor) {\n            this.doCloseActiveEditor(options && options.preserveFocus ? false : undefined);\n        }\n        // Forward to title control\n        this.titleAreaControl.closeEditors(editors);\n    };\n    //#endregion\n    //#region closeAllEditors()\n    EditorGroupView.prototype.closeAllEditors = function () {\n        var _this = this;\n        if (this.isEmpty()) {\n            // If the group is empty and the request is to close all editors, we still close\n            // the editor group is the related setting to close empty groups is enabled for\n            // a convinient way of removing empty editor groups for the user.\n            if (this.accessor.partOptions.closeEmptyGroups) {\n                this.accessor.removeGroup(this);\n            }\n            return Promise.resolve();\n        }\n        // Check for dirty and veto\n        var editors = this._group.getEditors(true);\n        return this.handleDirty(editors.slice(0)).then(function (veto) {\n            if (veto) {\n                return;\n            }\n            // Do close\n            _this.doCloseAllEditors();\n        });\n    };\n    EditorGroupView.prototype.doCloseAllEditors = function () {\n        var _this = this;\n        // Close all inactive editors first\n        this.editors.forEach(function (editor) {\n            if (!_this.isActive(editor)) {\n                _this.doCloseInactiveEditor(editor);\n            }\n        });\n        // Close active editor last\n        this.doCloseActiveEditor();\n        // Forward to title control\n        this.titleAreaControl.closeAllEditors();\n    };\n    //#endregion\n    //#region replaceEditors()\n    EditorGroupView.prototype.replaceEditors = function (editors) {\n        var _this = this;\n        // Extract active vs. inactive replacements\n        var activeReplacement;\n        var inactiveReplacements = [];\n        editors.forEach(function (_a) {\n            var editor = _a.editor, replacement = _a.replacement, options = _a.options;\n            if (editor.isDirty()) {\n                return; // we do not handle dirty in this method, so ignore all dirty\n            }\n            var index = _this.getIndexOfEditor(editor);\n            if (index >= 0) {\n                var isActiveEditor = _this.isActive(editor);\n                // make sure we respect the index of the editor to replace\n                if (options) {\n                    options.index = index;\n                }\n                else {\n                    options = editor_1.EditorOptions.create({ index: index });\n                }\n                options.inactive = !isActiveEditor;\n                options.pinned = true;\n                var editorToReplace = { editor: editor, replacement: replacement, options: options };\n                if (isActiveEditor) {\n                    activeReplacement = editorToReplace;\n                }\n                else {\n                    inactiveReplacements.push(editorToReplace);\n                }\n            }\n        });\n        // Handle inactive first\n        inactiveReplacements.forEach(function (_a) {\n            var editor = _a.editor, replacement = _a.replacement, options = _a.options;\n            // Open inactive editor\n            _this.doOpenEditor(replacement, options);\n            // Close replaced inactive editor unless they match\n            if (!editor.matches(replacement)) {\n                _this.doCloseInactiveEditor(editor);\n                _this.titleAreaControl.closeEditor(editor);\n            }\n        });\n        // Handle active last\n        if (activeReplacement) {\n            // Open replacement as active editor\n            var openEditorResult = this.doOpenEditor(activeReplacement.replacement, activeReplacement.options);\n            // Close replaced active editor unless they match\n            if (!activeReplacement.editor.matches(activeReplacement.replacement)) {\n                this.doCloseInactiveEditor(activeReplacement.editor);\n                this.titleAreaControl.closeEditor(activeReplacement.editor);\n            }\n            return openEditorResult.then(function () { return undefined; });\n        }\n        return Promise.resolve();\n    };\n    //#endregion\n    //#endregion\n    //#region Themable\n    EditorGroupView.prototype.updateStyles = function () {\n        var isEmpty = this.isEmpty();\n        // Container\n        if (isEmpty) {\n            this.element.style.backgroundColor = this.getColor(theme_1.EDITOR_GROUP_EMPTY_BACKGROUND);\n        }\n        else {\n            this.element.style.backgroundColor = null;\n        }\n        // Title control\n        var showTabs = this.accessor.partOptions.showTabs;\n        var borderColor = this.getColor(theme_1.EDITOR_GROUP_HEADER_TABS_BORDER) || this.getColor(colorRegistry_1.contrastBorder);\n        if (!isEmpty && showTabs && borderColor) {\n            dom_1.addClass(this.titleContainer, 'title-border-bottom');\n            this.titleContainer.style.setProperty('--title-border-bottom-color', borderColor.toString());\n        }\n        else {\n            dom_1.removeClass(this.titleContainer, 'title-border-bottom');\n            this.titleContainer.style.removeProperty('--title-border-bottom-color');\n        }\n        this.titleContainer.style.backgroundColor = this.getColor(showTabs ? theme_1.EDITOR_GROUP_HEADER_TABS_BACKGROUND : theme_1.EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND);\n        // Editor container\n        this.editorContainer.style.backgroundColor = this.getColor(colorRegistry_1.editorBackground);\n    };\n    Object.defineProperty(EditorGroupView.prototype, \"minimumWidth\", {\n        get: function () { return this.editorControl.minimumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"minimumHeight\", {\n        get: function () { return this.editorControl.minimumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"maximumWidth\", {\n        get: function () { return this.editorControl.maximumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroupView.prototype, \"maximumHeight\", {\n        get: function () { return this.editorControl.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroupView.prototype.layout = function (width, height) {\n        this.dimension = new dom_1.Dimension(width, height);\n        // Ensure editor container gets height as CSS depending\n        // on the preferred height of the title control\n        this.editorContainer.style.height = \"calc(100% - \" + this.titleAreaControl.getPreferredHeight() + \"px)\";\n        // Forward to controls\n        this.titleAreaControl.layout(new dom_1.Dimension(this.dimension.width, this.titleAreaControl.getPreferredHeight()));\n        this.editorControl.layout(new dom_1.Dimension(this.dimension.width, this.dimension.height - this.titleAreaControl.getPreferredHeight()));\n    };\n    EditorGroupView.prototype.relayout = function () {\n        if (this.dimension) {\n            var _a = this.dimension, width = _a.width, height = _a.height;\n            this.layout(width, height);\n        }\n    };\n    EditorGroupView.prototype.toJSON = function () {\n        return this._group.serialize();\n    };\n    //#endregion\n    EditorGroupView.prototype.dispose = function () {\n        this._disposed = true;\n        this._onWillDispose.fire();\n        this.titleAreaControl.dispose();\n        // this.editorControl = null;\n        _super.prototype.dispose.call(this);\n    };\n    EditorGroupView = tslib_1.__decorate([\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, notification_1.INotificationService),\n        tslib_1.__param(7, telemetry_1.ITelemetryService),\n        tslib_1.__param(8, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(9, keybinding_1.IKeybindingService),\n        tslib_1.__param(10, actions_2.IMenuService),\n        tslib_1.__param(11, contextView_1.IContextMenuService),\n        tslib_1.__param(12, hashService_1.IHashService)\n    ], EditorGroupView);\n    return EditorGroupView;\n}(theme_1.Themable));\nexports.EditorGroupView = EditorGroupView;\nvar EditorOpeningEvent = /** @class */ (function () {\n    function EditorOpeningEvent(_group, _editor, _options) {\n        this._group = _group;\n        this._editor = _editor;\n        this._options = _options;\n    }\n    Object.defineProperty(EditorOpeningEvent.prototype, \"groupId\", {\n        get: function () {\n            return this._group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorOpeningEvent.prototype, \"editor\", {\n        get: function () {\n            return this._editor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorOpeningEvent.prototype, \"options\", {\n        get: function () {\n            return this._options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorOpeningEvent.prototype.prevent = function (callback) {\n        this.override = callback;\n    };\n    EditorOpeningEvent.prototype.isPrevented = function () {\n        return this.override;\n    };\n    return EditorOpeningEvent;\n}());\nthemeService_1.registerThemingParticipant(function (theme, collector, environment) {\n    // Letterpress\n    var letterpress = theme.type === 'dark' ? require.toUrl('./media/letterpress-dark.svg') : theme.type === 'hc' ? require.toUrl('./media/letterpress-hc.svg') : require.toUrl('./media/letterpress.svg');\n    collector.addRule(\"\\n\\t\\t.monaco-workbench .part.editor > .content .editor-group-container.empty .editor-group-letterpress {\\n\\t\\t\\tbackground-image: url('\" + letterpress + \"')\\n\\t\\t}\\n\\t\");\n    // Focused Empty Group Border\n    var focusedEmptyGroupBorder = theme.getColor(theme_1.EDITOR_GROUP_FOCUSED_EMPTY_BORDER);\n    if (focusedEmptyGroupBorder) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.editor > .content:not(.empty) .editor-group-container.empty.active:focus {\\n\\t\\t\\t\\toutline-width: 1px;\\n\\t\\t\\t\\toutline-color: \" + focusedEmptyGroupBorder + \";\\n\\t\\t\\t\\toutline-offset: -2px;\\n\\t\\t\\t\\toutline-style: solid;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .part.editor > .content.empty .editor-group-container.empty.active:focus {\\n\\t\\t\\t\\toutline: none; /* never show outline for empty group if it is the last */\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    else {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .part.editor > .content .editor-group-container.empty.active:focus {\\n\\t\\t\\t\\toutline: none; /* disable focus outline unless active empty group border is defined */\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorGroupView.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorGroupView.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/editorgroupview';\n\nimport { EditorGroup, IEditorOpenOptions, EditorCloseEvent, ISerializedEditorGroup, isSerializedEditorGroup } from 'vs/workbench/common/editor/editorGroup';\nimport { EditorInput, EditorOptions, GroupIdentifier, ConfirmResult, SideBySideEditorInput, CloseDirection, IEditorCloseEvent, EditorGroupActiveEditorDirtyContext, IEditor } from 'vs/workbench/common/editor';\nimport { Event, Emitter, Relay } from 'vs/base/common/event';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { addClass, addClasses, Dimension, trackFocus, toggleClass, removeClass, addDisposableListener, EventType, EventHelper, findParentWithClass, clearNode, isAncestor } from 'vs/base/browser/dom';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { attachProgressBarStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { editorBackground, contrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { Themable, EDITOR_GROUP_HEADER_TABS_BORDER, EDITOR_GROUP_HEADER_TABS_BACKGROUND, EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND, EDITOR_GROUP_EMPTY_BACKGROUND, EDITOR_GROUP_FOCUSED_EMPTY_BORDER } from 'vs/workbench/common/theme';\nimport { IMoveEditorOptions, ICopyEditorOptions, ICloseEditorsFilter, IGroupChangeEvent, GroupChangeKind, EditorsOrder, GroupsOrder, ICloseEditorOptions } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { TabsTitleControl } from 'vs/workbench/browser/parts/editor/tabsTitleControl';\nimport { EditorControl } from 'vs/workbench/browser/parts/editor/editorControl';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { ProgressService } from 'vs/workbench/services/progress/browser/progressService';\nimport { localize } from 'vs/nls';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { Severity, INotificationService, INotificationActions } from 'vs/platform/notification/common/notification';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { RunOnceWorker } from 'vs/base/common/async';\nimport { EventType as TouchEventType, GestureEvent } from 'vs/base/browser/touch';\nimport { TitleControl } from 'vs/workbench/browser/parts/editor/titleControl';\nimport { IEditorGroupsAccessor, IEditorGroupView, IEditorPartOptionsChangeEvent, getActiveTextEditorOptions, IEditorOpeningEvent } from 'vs/workbench/browser/parts/editor/editor';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ActionRunner, IAction, Action } from 'vs/base/common/actions';\nimport { CLOSE_EDITOR_GROUP_COMMAND_ID } from 'vs/workbench/browser/parts/editor/editorCommands';\nimport { NoTabsTitleControl } from 'vs/workbench/browser/parts/editor/noTabsTitleControl';\nimport { IMenuService, MenuId, IMenu } from 'vs/platform/actions/common/actions';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { fillInContextMenuActions } from 'vs/platform/actions/browser/menuItemActionItem';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { isErrorWithActions, IErrorWithActions } from 'vs/base/common/errorsWithActions';\nimport { IVisibleEditor } from 'vs/workbench/services/editor/common/editorService';\nimport { withNullAsUndefined } from 'vs/base/common/types';\nimport { IHashService } from 'vs/workbench/services/hash/common/hashService';\nimport { guessMimeTypes } from 'vs/base/common/mime';\nimport { extname } from 'vs/base/common/path';\n\nexport class EditorGroupView extends Themable implements IEditorGroupView {\n\n\t//#region factory\n\n\tstatic createNew(accessor: IEditorGroupsAccessor, label: string, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, null, label);\n\t}\n\n\tstatic createFromSerialized(serialized: ISerializedEditorGroup, accessor: IEditorGroupsAccessor, label: string, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, serialized, label);\n\t}\n\n\tstatic createCopy(copyFrom: IEditorGroupView, accessor: IEditorGroupsAccessor, label: string, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, copyFrom, label);\n\t}\n\n\t//#endregion\n\n\t//#region events\n\n\tprivate readonly _onDidFocus: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidFocus(): Event<void> { return this._onDidFocus.event; }\n\n\tprivate readonly _onWillDispose: Emitter<void> = this._register(new Emitter<void>());\n\tget onWillDispose(): Event<void> { return this._onWillDispose.event; }\n\n\tprivate readonly _onDidGroupChange: Emitter<IGroupChangeEvent> = this._register(new Emitter<IGroupChangeEvent>());\n\tget onDidGroupChange(): Event<IGroupChangeEvent> { return this._onDidGroupChange.event; }\n\n\tprivate readonly _onWillOpenEditor: Emitter<IEditorOpeningEvent> = this._register(new Emitter<IEditorOpeningEvent>());\n\tget onWillOpenEditor(): Event<IEditorOpeningEvent> { return this._onWillOpenEditor.event; }\n\n\tprivate readonly _onDidOpenEditorFail: Emitter<EditorInput> = this._register(new Emitter<EditorInput>());\n\tget onDidOpenEditorFail(): Event<EditorInput> { return this._onDidOpenEditorFail.event; }\n\n\tprivate readonly _onWillCloseEditor: Emitter<IEditorCloseEvent> = this._register(new Emitter<IEditorCloseEvent>());\n\tget onWillCloseEditor(): Event<IEditorCloseEvent> { return this._onWillCloseEditor.event; }\n\n\tprivate readonly _onDidCloseEditor: Emitter<IEditorCloseEvent> = this._register(new Emitter<IEditorCloseEvent>());\n\tget onDidCloseEditor(): Event<IEditorCloseEvent> { return this._onDidCloseEditor.event; }\n\n\t//#endregion\n\n\tprivate _group: EditorGroup;\n\tprivate _disposed: boolean;\n\n\tprivate active: boolean;\n\tprivate dimension: Dimension;\n\n\tprivate _whenRestored: Promise<void>;\n\tprivate isRestored: boolean;\n\n\tprivate scopedInstantiationService: IInstantiationService;\n\n\tprivate titleContainer: HTMLElement;\n\tprivate titleAreaControl: TitleControl;\n\n\tprivate progressBar: ProgressBar;\n\n\tprivate editorContainer: HTMLElement;\n\tprivate editorControl: EditorControl;\n\n\tprivate disposedEditorsWorker: RunOnceWorker<EditorInput>;\n\n\tprivate mapEditorToPendingConfirmation: Map<EditorInput, Promise<boolean>> = new Map<EditorInput, Promise<boolean>>();\n\n\tconstructor(\n\t\tprivate accessor: IEditorGroupsAccessor,\n\t\tfrom: IEditorGroupView | ISerializedEditorGroup,\n\t\tprivate _label: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IHashService private readonly hashService: IHashService\n\t) {\n\t\tsuper(themeService);\n\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tthis._group = this._register(from.group.clone());\n\t\t} else if (isSerializedEditorGroup(from)) {\n\t\t\tthis._group = this._register(instantiationService.createInstance(EditorGroup, from));\n\t\t} else {\n\t\t\tthis._group = this._register(instantiationService.createInstance(EditorGroup, undefined));\n\t\t}\n\n\t\tthis.disposedEditorsWorker = this._register(new RunOnceWorker(editors => this.handleDisposedEditors(editors), 0));\n\n\t\tthis.create();\n\n\t\tthis._whenRestored = this.restoreEditors(from);\n\t\tthis._whenRestored.then(() => this.isRestored = true);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate create(): void {\n\n\t\t// Container\n\t\taddClasses(this.element, 'editor-group-container');\n\n\t\t// Container listeners\n\t\tthis.registerContainerListeners();\n\n\t\t// Container toolbar\n\t\tthis.createContainerToolbar();\n\n\t\t// Container context menu\n\t\tthis.createContainerContextMenu();\n\n\t\t// Letterpress container\n\t\tconst letterpressContainer = document.createElement('div');\n\t\taddClass(letterpressContainer, 'editor-group-letterpress');\n\t\tthis.element.appendChild(letterpressContainer);\n\n\t\t// Progress bar\n\t\tthis.progressBar = this._register(new ProgressBar(this.element));\n\t\tthis._register(attachProgressBarStyler(this.progressBar, this.themeService));\n\t\tthis.progressBar.hide();\n\n\t\t// Scoped services\n\t\tconst scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.element));\n\t\tthis.scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection(\n\t\t\t[IContextKeyService, scopedContextKeyService],\n\t\t\t[IProgressService, new ProgressService(this.progressBar)]\n\t\t));\n\n\t\t// Context keys\n\t\tthis.handleGroupContextKeys(scopedContextKeyService);\n\n\t\t// Title container\n\t\tthis.titleContainer = document.createElement('div');\n\t\taddClass(this.titleContainer, 'title');\n\t\tthis.element.appendChild(this.titleContainer);\n\n\t\t// Title control\n\t\tthis.createTitleAreaControl();\n\n\t\t// Editor container\n\t\tthis.editorContainer = document.createElement('div');\n\t\taddClass(this.editorContainer, 'editor-container');\n\t\tthis.element.appendChild(this.editorContainer);\n\n\t\t// Editor control\n\t\tthis.editorControl = this._register(this.scopedInstantiationService.createInstance(EditorControl, this.editorContainer, this));\n\t\tthis._onDidChange.input = this.editorControl.onDidSizeConstraintsChange;\n\n\t\t// Track Focus\n\t\tthis.doTrackFocus();\n\n\t\t// Update containers\n\t\tthis.updateTitleContainer();\n\t\tthis.updateContainer();\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\t}\n\n\tprivate handleGroupContextKeys(contextKeyServcie: IContextKeyService): void {\n\t\tconst groupActiveEditorDirtyContextKey = EditorGroupActiveEditorDirtyContext.bindTo(contextKeyServcie);\n\n\t\tlet activeEditorListener: IDisposable;\n\n\t\tconst observeActiveEditor = () => {\n\t\t\tactiveEditorListener = dispose(activeEditorListener);\n\n\t\t\tconst activeEditor = this._group.activeEditor;\n\t\t\tif (activeEditor) {\n\t\t\t\tgroupActiveEditorDirtyContextKey.set(activeEditor.isDirty());\n\t\t\t\tactiveEditorListener = activeEditor.onDidChangeDirty(() => groupActiveEditorDirtyContextKey.set(activeEditor.isDirty()));\n\t\t\t} else {\n\t\t\t\tgroupActiveEditorDirtyContextKey.set(false);\n\t\t\t}\n\t\t};\n\n\t\t// Track the active editor and update context key that reflects\n\t\t// the dirty state of this editor\n\t\tthis._register(this.onDidGroupChange(e => {\n\t\t\tif (e.kind === GroupChangeKind.EDITOR_ACTIVE) {\n\t\t\t\tobserveActiveEditor();\n\t\t\t}\n\t\t}));\n\n\t\tobserveActiveEditor();\n\t}\n\n\tprivate registerContainerListeners(): void {\n\n\t\t// Open new file via doubleclick on empty container\n\t\tthis._register(addDisposableListener(this.element, EventType.DBLCLICK, e => {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\tEventHelper.stop(e);\n\n\t\t\t\tthis.openEditor(this.untitledEditorService.createOrGet(), EditorOptions.create({ pinned: true }));\n\t\t\t}\n\t\t}));\n\n\t\t// Close empty editor group via middle mouse click\n\t\tthis._register(addDisposableListener(this.element, EventType.MOUSE_UP, e => {\n\t\t\tif (this.isEmpty() && e.button === 1 /* Middle Button */) {\n\t\t\t\tEventHelper.stop(e);\n\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createContainerToolbar(): void {\n\n\t\t// Toolbar Container\n\t\tconst toolbarContainer = document.createElement('div');\n\t\taddClass(toolbarContainer, 'editor-group-container-toolbar');\n\t\tthis.element.appendChild(toolbarContainer);\n\n\t\t// Toolbar\n\t\tconst groupId = this._group.id;\n\t\tconst containerToolbar = new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('araLabelGroupActions', \"Editor group actions\"), actionRunner: this._register(new class extends ActionRunner {\n\t\t\t\trun(action: IAction) {\n\t\t\t\t\treturn action.run(groupId);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\t// Toolbar actions\n\t\tconst removeGroupAction = this._register(new Action(CLOSE_EDITOR_GROUP_COMMAND_ID, localize('closeGroupAction', \"Close\"), 'close-editor-group', true, () => { this.accessor.removeGroup(this); return Promise.resolve(true); }));\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(removeGroupAction.id);\n\t\tcontainerToolbar.push(removeGroupAction, { icon: true, label: false, keybinding: keybinding ? keybinding.getLabel() : undefined });\n\t}\n\n\tprivate createContainerContextMenu(): void {\n\t\tconst menu = this._register(this.menuService.createMenu(MenuId.EmptyEditorGroupContext, this.contextKeyService));\n\n\t\tthis._register(addDisposableListener(this.element, EventType.CONTEXT_MENU, event => this.onShowContainerContextMenu(menu, event)));\n\t\tthis._register(addDisposableListener(this.element, TouchEventType.Contextmenu, event => this.onShowContainerContextMenu(menu)));\n\t}\n\n\tprivate onShowContainerContextMenu(menu: IMenu, e?: MouseEvent): void {\n\t\tif (!this.isEmpty()) {\n\t\t\treturn; // only for empty editor groups\n\t\t}\n\n\t\t// Find target anchor\n\t\tlet anchor: HTMLElement | { x: number, y: number } = this.element;\n\t\tif (e instanceof MouseEvent) {\n\t\t\tconst event = new StandardMouseEvent(e);\n\t\t\tanchor = { x: event.posx, y: event.posy };\n\t\t}\n\n\t\t// Fill in contributed actions\n\t\tconst actions: IAction[] = [];\n\t\tfillInContextMenuActions(menu, undefined, actions, this.contextMenuService);\n\n\t\t// Show it\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => anchor,\n\t\t\tgetActions: () => actions,\n\t\t\tonHide: () => this.focus()\n\t\t});\n\t}\n\n\tprivate doTrackFocus(): void {\n\n\t\t// Container\n\t\tconst containerFocusTracker = this._register(trackFocus(this.element));\n\t\tthis._register(containerFocusTracker.onDidFocus(() => {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\tthis._onDidFocus.fire(); // only when empty to prevent accident focus\n\t\t\t}\n\t\t}));\n\n\t\t// Title Container\n\t\tconst handleTitleClickOrTouch = (e: MouseEvent | GestureEvent): void => {\n\t\t\tlet target: HTMLElement;\n\t\t\tif (e instanceof MouseEvent) {\n\t\t\t\tif (e.button !== 0) {\n\t\t\t\t\treturn undefined; // only for left mouse click\n\t\t\t\t}\n\n\t\t\t\ttarget = e.target as HTMLElement;\n\t\t\t} else {\n\t\t\t\ttarget = (e as GestureEvent).initialTarget as HTMLElement;\n\t\t\t}\n\n\t\t\tif (findParentWithClass(target, 'monaco-action-bar', this.titleContainer) ||\n\t\t\t\tfindParentWithClass(target, 'monaco-breadcrumb-item', this.titleContainer)\n\t\t\t) {\n\t\t\t\treturn; // not when clicking on actions or breadcrumbs\n\t\t\t}\n\n\t\t\t// timeout to keep focus in editor after mouse up\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.focus();\n\t\t\t});\n\t\t};\n\n\t\tthis._register(addDisposableListener(this.titleContainer, EventType.MOUSE_DOWN, e => handleTitleClickOrTouch(e)));\n\t\tthis._register(addDisposableListener(this.titleContainer, TouchEventType.Tap, e => handleTitleClickOrTouch(e)));\n\n\t\t// Editor Container\n\t\tthis._register(this.editorControl.onDidFocus(() => {\n\t\t\tthis._onDidFocus.fire();\n\t\t}));\n\t}\n\n\tprivate updateContainer(): void {\n\n\t\t// Empty Container: add some empty container attributes\n\t\tif (this.isEmpty()) {\n\t\t\taddClass(this.element, 'empty');\n\t\t\tthis.element.tabIndex = 0;\n\t\t\tthis.element.setAttribute('aria-label', localize('emptyEditorGroup', \"{0} (empty)\", this.label));\n\t\t}\n\n\t\t// Non-Empty Container: revert empty container attributes\n\t\telse {\n\t\t\tremoveClass(this.element, 'empty');\n\t\t\tthis.element.removeAttribute('tabIndex');\n\t\t\tthis.element.removeAttribute('aria-label');\n\t\t}\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\t}\n\n\tprivate updateTitleContainer(): void {\n\t\ttoggleClass(this.titleContainer, 'tabs', this.accessor.partOptions.showTabs);\n\t\ttoggleClass(this.titleContainer, 'show-file-icons', this.accessor.partOptions.showIcons);\n\t}\n\n\tprivate createTitleAreaControl(): void {\n\n\t\t// Clear old if existing\n\t\tif (this.titleAreaControl) {\n\t\t\tthis.titleAreaControl.dispose();\n\t\t\tclearNode(this.titleContainer);\n\t\t}\n\n\t\t// Create new based on options\n\t\tif (this.accessor.partOptions.showTabs) {\n\t\t\tthis.titleAreaControl = this.scopedInstantiationService.createInstance(TabsTitleControl, this.titleContainer, this.accessor, this);\n\t\t} else {\n\t\t\tthis.titleAreaControl = this.scopedInstantiationService.createInstance(NoTabsTitleControl, this.titleContainer, this.accessor, this);\n\t\t}\n\t}\n\n\tprivate restoreEditors(from: IEditorGroupView | ISerializedEditorGroup): Promise<void> {\n\t\tif (this._group.count === 0) {\n\t\t\treturn Promise.resolve(); // nothing to show\n\t\t}\n\n\t\t// Determine editor options\n\t\tlet options: EditorOptions;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\toptions = getActiveTextEditorOptions(from); // if we copy from another group, ensure to copy its active editor viewstate\n\t\t} else {\n\t\t\toptions = new EditorOptions();\n\t\t}\n\n\t\tconst activeEditor = this._group.activeEditor;\n\t\tif (!activeEditor) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\toptions.pinned = this._group.isPinned(activeEditor);\t// preserve pinned state\n\t\toptions.preserveFocus = true;\t\t\t\t\t\t\t// handle focus after editor is opened\n\n\t\tconst activeElement = document.activeElement;\n\n\t\t// Show active editor\n\t\treturn this.doShowEditor(activeEditor, true, options).then(() => {\n\n\t\t\t// Set focused now if this is the active group and focus has\n\t\t\t// not changed meanwhile. This prevents focus from being\n\t\t\t// stolen accidentally on startup when the user already\n\t\t\t// clicked somewhere.\n\t\t\tif (this.accessor.activeGroup === this && activeElement === document.activeElement) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t});\n\t}\n\n\t//#region event handling\n\n\tprivate registerListeners(): void {\n\n\t\t// Model Events\n\t\tthis._register(this._group.onDidEditorPin(editor => this.onDidEditorPin(editor)));\n\t\tthis._register(this._group.onDidEditorOpen(editor => this.onDidEditorOpen(editor)));\n\t\tthis._register(this._group.onDidEditorClose(editor => this.onDidEditorClose(editor)));\n\t\tthis._register(this._group.onDidEditorDispose(editor => this.onDidEditorDispose(editor)));\n\t\tthis._register(this._group.onDidEditorBecomeDirty(editor => this.onDidEditorBecomeDirty(editor)));\n\t\tthis._register(this._group.onDidEditorLabelChange(editor => this.onDidEditorLabelChange(editor)));\n\n\t\t// Option Changes\n\t\tthis._register(this.accessor.onDidEditorPartOptionsChange(e => this.onDidEditorPartOptionsChange(e)));\n\t}\n\n\tprivate onDidEditorPin(editor: EditorInput): void {\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_PIN, editor });\n\t}\n\n\tprivate onDidEditorOpen(editor: EditorInput): void {\n\n\t\t// Telemetry\n\t\tthis.toEditorTelemetryDescriptor(editor).then(descriptor => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"editorOpened\" : {\n\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('editorOpened', descriptor);\n\t\t});\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_OPEN, editor });\n\t}\n\n\tprivate onDidEditorClose(event: EditorCloseEvent): void {\n\n\t\t// Before close\n\t\tthis._onWillCloseEditor.fire(event);\n\n\t\t// Handle event\n\t\tconst editor = event.editor;\n\t\tconst editorsToClose = [editor];\n\n\t\t// Include both sides of side by side editors when being closed and not opened multiple times\n\t\tif (editor instanceof SideBySideEditorInput && !this.accessor.groups.some(groupView => groupView.group.contains(editor))) {\n\t\t\teditorsToClose.push(editor.master, editor.details);\n\t\t}\n\n\t\t// Close the editor when it is no longer open in any group including diff editors\n\t\teditorsToClose.forEach(editorToClose => {\n\t\t\tconst resource = editorToClose ? editorToClose.getResource() : undefined; // prefer resource to not close right-hand side editors of a diff editor\n\t\t\tif (!this.accessor.groups.some(groupView => groupView.group.contains(resource || editorToClose))) {\n\t\t\t\teditorToClose.close();\n\t\t\t}\n\t\t});\n\n\t\t// Telemetry\n\t\tthis.toEditorTelemetryDescriptor(event.editor).then(descriptor => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"editorClosed\" : {\n\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('editorClosed', descriptor);\n\t\t});\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidCloseEditor.fire(event);\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_CLOSE, editor, editorIndex: event.index });\n\t}\n\n\tprivate toEditorTelemetryDescriptor(editor: EditorInput): Thenable<object> {\n\t\tconst descriptor = editor.getTelemetryDescriptor();\n\n\t\tconst resource = editor.getResource();\n\t\tif (resource && resource.fsPath) {\n\t\t\treturn this.hashService.createSHA1(resource.fsPath).then(hashedPath => {\n\t\t\t\tdescriptor['resource'] = { mimeType: guessMimeTypes(resource.fsPath).join(', '), scheme: resource.scheme, ext: extname(resource.fsPath), path: hashedPath };\n\n\t\t\t\t/* __GDPR__FRAGMENT__\n\t\t\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\t\t\"resource\": { \"${inline}\": [ \"${URIDescriptor}\" ] }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\treturn descriptor;\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(descriptor);\n\t}\n\n\tprivate onDidEditorDispose(editor: EditorInput): void {\n\n\t\t// To prevent race conditions, we handle disposed editors in our worker with a timeout\n\t\t// because it can happen that an input is being disposed with the intent to replace\n\t\t// it with some other input right after.\n\t\tthis.disposedEditorsWorker.work(editor);\n\t}\n\n\tprivate handleDisposedEditors(editors: EditorInput[]): void {\n\n\t\t// Split between visible and hidden editors\n\t\tlet activeEditor: EditorInput | undefined;\n\t\tconst inactiveEditors: EditorInput[] = [];\n\t\teditors.forEach(editor => {\n\t\t\tif (this._group.isActive(editor)) {\n\t\t\t\tactiveEditor = editor;\n\t\t\t} else if (this._group.contains(editor)) {\n\t\t\t\tinactiveEditors.push(editor);\n\t\t\t}\n\t\t});\n\n\t\t// Close all inactive editors first to prevent UI flicker\n\t\tinactiveEditors.forEach(hidden => this.doCloseEditor(hidden, false));\n\n\t\t// Close active one last\n\t\tif (activeEditor) {\n\t\t\tthis.doCloseEditor(activeEditor, false);\n\t\t}\n\t}\n\n\tprivate onDidEditorPartOptionsChange(event: IEditorPartOptionsChangeEvent): void {\n\n\t\t// Title container\n\t\tthis.updateTitleContainer();\n\n\t\t// Title control Switch between showing tabs <=> not showing tabs\n\t\tif (event.oldPartOptions.showTabs !== event.newPartOptions.showTabs) {\n\t\t\tthis.createTitleAreaControl();\n\n\t\t\tif (this._group.activeEditor) {\n\t\t\t\tthis.titleAreaControl.openEditor(this._group.activeEditor);\n\t\t\t}\n\t\t}\n\n\t\t// Just update title control\n\t\telse {\n\t\t\tthis.titleAreaControl.updateOptions(event.oldPartOptions, event.newPartOptions);\n\t\t}\n\n\t\t// Styles\n\t\tthis.updateStyles();\n\n\t\t// Pin preview editor once user disables preview\n\t\tif (event.oldPartOptions.enablePreview && !event.newPartOptions.enablePreview) {\n\t\t\tif (this._group.previewEditor) {\n\t\t\t\tthis.pinEditor(this._group.previewEditor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidEditorBecomeDirty(editor: EditorInput): void {\n\n\t\t// Always show dirty editors pinned\n\t\tthis.pinEditor(editor);\n\n\t\t// Forward to title control\n\t\tthis.titleAreaControl.updateEditorDirty(editor);\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_DIRTY, editor });\n\t}\n\n\tprivate onDidEditorLabelChange(editor: EditorInput): void {\n\n\t\t// Forward to title control\n\t\tthis.titleAreaControl.updateEditorLabel(editor);\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_LABEL, editor });\n\t}\n\n\t//#endregion\n\n\t//region IEditorGroupView\n\n\tget group(): EditorGroup {\n\t\treturn this._group;\n\t}\n\n\tget label(): string {\n\t\treturn this._label;\n\t}\n\n\tget disposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tget whenRestored(): Promise<void> {\n\t\treturn this._whenRestored;\n\t}\n\n\tsetLabel(label: string): void {\n\t\tif (this._label !== label) {\n\t\t\tthis._label = label;\n\t\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.GROUP_LABEL });\n\t\t}\n\t}\n\n\tsetActive(isActive: boolean): void {\n\t\tthis.active = isActive;\n\n\t\t// Update container\n\t\ttoggleClass(this.element, 'active', isActive);\n\t\ttoggleClass(this.element, 'inactive', !isActive);\n\n\t\t// Update title control\n\t\tthis.titleAreaControl.setActive(isActive);\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.GROUP_ACTIVE });\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this._group.count === 0;\n\t}\n\n\t//#endregion\n\n\t//#region IEditorGroup\n\n\t//#region basics()\n\n\tget id(): GroupIdentifier {\n\t\treturn this._group.id;\n\t}\n\n\tget editors(): EditorInput[] {\n\t\treturn this._group.getEditors();\n\t}\n\n\tget count(): number {\n\t\treturn this._group.count;\n\t}\n\n\tget activeControl(): IVisibleEditor | undefined {\n\t\treturn this.editorControl ? withNullAsUndefined(this.editorControl.activeControl) : undefined;\n\t}\n\n\tget activeEditor(): EditorInput | null {\n\t\treturn this._group.activeEditor;\n\t}\n\n\tget previewEditor(): EditorInput | null {\n\t\treturn this._group.previewEditor;\n\t}\n\n\tisPinned(editor: EditorInput): boolean {\n\t\treturn this._group.isPinned(editor);\n\t}\n\n\tisActive(editor: EditorInput): boolean {\n\t\treturn this._group.isActive(editor);\n\t}\n\n\tgetEditors(order?: EditorsOrder): EditorInput[] {\n\t\tif (order === EditorsOrder.MOST_RECENTLY_ACTIVE) {\n\t\t\treturn this._group.getEditors(true);\n\t\t}\n\n\t\treturn this.editors;\n\t}\n\n\tgetEditor(index: number): EditorInput | null {\n\t\treturn this._group.getEditor(index);\n\t}\n\n\tgetIndexOfEditor(editor: EditorInput): number {\n\t\treturn this._group.indexOf(editor);\n\t}\n\n\tisOpened(editor: EditorInput): boolean {\n\t\treturn this._group.contains(editor);\n\t}\n\n\tfocus(): void {\n\n\t\t// Pass focus to widgets\n\t\tif (this.activeControl) {\n\t\t\tthis.activeControl.focus();\n\t\t} else {\n\t\t\tthis.element.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tpinEditor(editor: EditorInput | undefined = this.activeEditor || undefined): void {\n\t\tif (editor && !this._group.isPinned(editor)) {\n\n\t\t\t// Update model\n\t\t\tthis._group.pin(editor);\n\n\t\t\t// Forward to title control\n\t\t\tthis.titleAreaControl.pinEditor(editor);\n\t\t}\n\t}\n\n\tinvokeWithinContext<T>(fn: (accessor: ServicesAccessor) => T): T {\n\t\treturn this.scopedInstantiationService.invokeFunction(fn);\n\t}\n\n\t//#endregion\n\n\t//#region openEditor()\n\n\topenEditor(editor: EditorInput, options?: EditorOptions): Promise<IEditor | null> {\n\n\t\t// Guard against invalid inputs\n\t\tif (!editor) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\t// Editor opening event allows for prevention\n\t\tconst event = new EditorOpeningEvent(this._group.id, editor, options);\n\t\tthis._onWillOpenEditor.fire(event);\n\t\tconst prevented = event.isPrevented();\n\t\tif (prevented) {\n\t\t\treturn prevented();\n\t\t}\n\n\t\t// Proceed with opening\n\t\treturn this.doOpenEditor(editor, options);\n\t}\n\n\tprivate doOpenEditor(editor: EditorInput, options?: EditorOptions): Promise<IEditor | null> {\n\n\t\t// Determine options\n\t\tconst openEditorOptions: IEditorOpenOptions = {\n\t\t\tindex: options ? options.index : undefined,\n\t\t\tpinned: !this.accessor.partOptions.enablePreview || editor.isDirty() || (options && options.pinned) || (options && typeof options.index === 'number'),\n\t\t\tactive: this._group.count === 0 || !options || !options.inactive\n\t\t};\n\n\t\tif (!openEditorOptions.active && !openEditorOptions.pinned && this._group.activeEditor && this._group.isPreview(this._group.activeEditor)) {\n\t\t\t// Special case: we are to open an editor inactive and not pinned, but the current active\n\t\t\t// editor is also not pinned, which means it will get replaced with this one. As such,\n\t\t\t// the editor can only be active.\n\t\t\topenEditorOptions.active = true;\n\t\t}\n\n\t\t// Set group active unless we open inactive or preserve focus\n\t\t// Do this before we open the editor in the group to prevent a false\n\t\t// active editor change event before the editor is loaded\n\t\t// (see https://github.com/Microsoft/vscode/issues/51679)\n\t\tif (openEditorOptions.active && (!options || !options.preserveFocus)) {\n\t\t\tthis.accessor.activateGroup(this);\n\t\t}\n\n\t\t// Actually move the editor if a specific index is provided and we figure\n\t\t// out that the editor is already opened at a different index. This\n\t\t// ensures the right set of events are fired to the outside.\n\t\tif (typeof openEditorOptions.index === 'number') {\n\t\t\tconst indexOfEditor = this._group.indexOf(editor);\n\t\t\tif (indexOfEditor !== -1 && indexOfEditor !== openEditorOptions.index) {\n\t\t\t\tthis.doMoveEditorInsideGroup(editor, openEditorOptions);\n\t\t\t}\n\t\t}\n\n\t\t// Update model\n\t\tthis._group.openEditor(editor, openEditorOptions);\n\n\t\t// Show editor\n\t\treturn this.doShowEditor(editor, !!openEditorOptions.active, options);\n\t}\n\n\tprivate doShowEditor(editor: EditorInput, active: boolean, options?: EditorOptions): Promise<IEditor | null> {\n\n\t\t// Show in editor control if the active editor changed\n\t\tlet openEditorPromise: Promise<IEditor | null>;\n\t\tif (active) {\n\t\t\topenEditorPromise = this.editorControl.openEditor(editor, options).then(result => {\n\n\t\t\t\t// Editor change event\n\t\t\t\tif (result.editorChanged) {\n\t\t\t\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_ACTIVE, editor });\n\t\t\t\t}\n\n\t\t\t\treturn result.control;\n\t\t\t}, error => {\n\n\t\t\t\t// Handle errors but do not bubble them up\n\t\t\t\tthis.doHandleOpenEditorError(error, editor, options);\n\n\t\t\t\treturn null; // error: return NULL as result to signal this\n\t\t\t});\n\t\t} else {\n\t\t\topenEditorPromise = Promise.resolve(null); // inactive: return NULL as result to signal this\n\t\t}\n\n\t\t// Show in title control after editor control because some actions depend on it\n\t\tthis.titleAreaControl.openEditor(editor);\n\n\t\treturn openEditorPromise;\n\t}\n\n\tprivate doHandleOpenEditorError(error: Error, editor: EditorInput, options?: EditorOptions): void {\n\n\t\t// Report error only if this was not us restoring previous error state or\n\t\t// we are told to ignore errors that occur from opening an editor\n\t\tif (this.isRestored && !isPromiseCanceledError(error) && (!options || !options.ignoreError)) {\n\t\t\tconst actions: INotificationActions = { primary: [] };\n\t\t\tif (isErrorWithActions(error)) {\n\t\t\t\tactions.primary = (error as IErrorWithActions).actions;\n\t\t\t}\n\n\t\t\tconst handle = this.notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('editorOpenError', \"Unable to open '{0}': {1}.\", editor.getName(), toErrorMessage(error)),\n\t\t\t\tactions\n\t\t\t});\n\n\t\t\tEvent.once(handle.onDidClose)(() => actions.primary && dispose(actions.primary));\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidOpenEditorFail.fire(editor);\n\n\t\t// Recover by closing the active editor (if the input is still the active one)\n\t\tif (this.activeEditor === editor) {\n\t\t\tconst focusNext = !options || !options.preserveFocus;\n\t\t\tthis.doCloseEditor(editor, focusNext, true /* from error */);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region openEditors()\n\n\topenEditors(editors: { editor: EditorInput, options?: EditorOptions }[]): Promise<IEditor | null> {\n\t\tif (!editors.length) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\t// Do not modify original array\n\t\teditors = editors.slice(0);\n\n\t\tlet result: IEditor | null;\n\n\t\t// Use the first editor as active editor\n\t\tconst { editor, options } = editors.shift()!;\n\t\treturn this.openEditor(editor, options).then(activeEditor => {\n\t\t\tresult = activeEditor; // this can be NULL if the opening failed\n\n\t\t\tconst startingIndex = this.getIndexOfEditor(editor) + 1;\n\n\t\t\t// Open the other ones inactive\n\t\t\treturn Promise.all(editors.map(({ editor, options }, index) => {\n\t\t\t\tconst adjustedEditorOptions = options || new EditorOptions();\n\t\t\t\tadjustedEditorOptions.inactive = true;\n\t\t\t\tadjustedEditorOptions.pinned = true;\n\t\t\t\tadjustedEditorOptions.index = startingIndex + index;\n\n\t\t\t\treturn this.openEditor(editor, adjustedEditorOptions).then(activeEditor => {\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\tresult = activeEditor; // only take if the first editor opening failed\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})).then(() => result);\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region moveEditor()\n\n\tmoveEditor(editor: EditorInput, target: IEditorGroupView, options?: IMoveEditorOptions): void {\n\n\t\t// Move within same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t}\n\n\t\t// Move across groups\n\t\telse {\n\t\t\tthis.doMoveOrCopyEditorAcrossGroups(editor, target, options);\n\t\t}\n\t}\n\n\tprivate doMoveEditorInsideGroup(editor: EditorInput, moveOptions?: IMoveEditorOptions): void {\n\t\tconst moveToIndex = moveOptions ? moveOptions.index : undefined;\n\t\tif (typeof moveToIndex !== 'number') {\n\t\t\treturn; // do nothing if we move into same group without index\n\t\t}\n\n\t\tconst currentIndex = this._group.indexOf(editor);\n\t\tif (currentIndex === moveToIndex) {\n\t\t\treturn; // do nothing if editor is already at the given index\n\t\t}\n\n\t\t// Update model\n\t\tthis._group.moveEditor(editor, moveToIndex);\n\t\tthis._group.pin(editor);\n\n\t\t// Forward to title area\n\t\tthis.titleAreaControl.moveEditor(editor, currentIndex, moveToIndex);\n\t\tthis.titleAreaControl.pinEditor(editor);\n\n\t\t// Event\n\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_MOVE, editor });\n\t}\n\n\tprivate doMoveOrCopyEditorAcrossGroups(editor: EditorInput, target: IEditorGroupView, moveOptions: IMoveEditorOptions = Object.create(null), keepCopy?: boolean): void {\n\n\t\t// When moving an editor, try to preserve as much view state as possible by checking\n\t\t// for the editor to be a text editor and creating the options accordingly if so\n\t\tconst options = getActiveTextEditorOptions(this, editor, EditorOptions.create(moveOptions));\n\t\toptions.pinned = true; // always pin moved editor\n\n\t\t// A move to another group is an open first...\n\t\ttarget.openEditor(editor, options);\n\n\t\t// ...and a close afterwards (unless we copy)\n\t\tif (!keepCopy) {\n\t\t\tthis.doCloseEditor(editor, false /* do not focus next one behind if any */);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region copyEditor()\n\n\tcopyEditor(editor: EditorInput, target: IEditorGroupView, options?: ICopyEditorOptions): void {\n\n\t\t// Move within same group because we do not support to show the same editor\n\t\t// multiple times in the same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t}\n\n\t\t// Copy across groups\n\t\telse {\n\t\t\tthis.doMoveOrCopyEditorAcrossGroups(editor, target, options, true);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region closeEditor()\n\n\tcloseEditor(editor: EditorInput | undefined = this.activeEditor || undefined, options?: ICloseEditorOptions): Promise<void> {\n\t\tif (!editor) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// Check for dirty and veto\n\t\treturn this.handleDirty([editor]).then(veto => {\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Do close\n\t\t\tthis.doCloseEditor(editor, options && options.preserveFocus ? false : undefined);\n\t\t});\n\t}\n\n\tprivate doCloseEditor(editor: EditorInput, focusNext = (this.accessor.activeGroup === this), fromError?: boolean): void {\n\n\t\t// Closing the active editor of the group is a bit more work\n\t\tif (this._group.isActive(editor)) {\n\t\t\tthis.doCloseActiveEditor(focusNext, fromError);\n\t\t}\n\n\t\t// Closing inactive editor is just a model update\n\t\telse {\n\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t}\n\n\t\t// Forward to title control\n\t\tthis.titleAreaControl.closeEditor(editor);\n\t}\n\n\tprivate doCloseActiveEditor(focusNext = (this.accessor.activeGroup === this), fromError?: boolean): void {\n\t\tconst editorToClose = this.activeEditor;\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.element);\n\n\t\t// Optimization: if we are about to close the last editor in this group and settings\n\t\t// are configured to close the group since it will be empty, we first set the last\n\t\t// active group as empty before closing the editor. This reduces the amount of editor\n\t\t// change events that this operation emits and will reduce flicker. Without this\n\t\t// optimization, this group (if active) would first trigger a active editor change\n\t\t// event because it became empty, only to then trigger another one when the next\n\t\t// group gets active.\n\t\tconst closeEmptyGroup = this.accessor.partOptions.closeEmptyGroups;\n\t\tif (closeEmptyGroup && this.active && this._group.count === 1) {\n\t\t\tconst mostRecentlyActiveGroups = this.accessor.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current one, so take [1]\n\t\t\tif (nextActiveGroup) {\n\t\t\t\tif (restoreFocus) {\n\t\t\t\t\tnextActiveGroup.focus();\n\t\t\t\t} else {\n\t\t\t\t\tthis.accessor.activateGroup(nextActiveGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update model\n\t\tif (editorToClose) {\n\t\t\tthis._group.closeEditor(editorToClose);\n\t\t}\n\n\t\t// Open next active if there are more to show\n\t\tconst nextActiveEditor = this._group.activeEditor;\n\t\tif (nextActiveEditor) {\n\t\t\tconst options = EditorOptions.create({ preserveFocus: !focusNext });\n\n\t\t\t// When closing an editor due to an error we can end up in a loop where we continue closing\n\t\t\t// editors that fail to open (e.g. when the file no longer exists). We do not want to show\n\t\t\t// repeated errors in this case to the user. As such, if we open the next editor and we are\n\t\t\t// in a scope of a previous editor failing, we silence the input errors until the editor is\n\t\t\t// opened by setting ignoreError: true.\n\t\t\tif (fromError) {\n\t\t\t\toptions.ignoreError = true;\n\t\t\t}\n\n\t\t\tthis.openEditor(nextActiveEditor, options);\n\t\t}\n\n\t\t// Otherwise we are empty, so clear from editor control and send event\n\t\telse {\n\n\t\t\t// Forward to editor control\n\t\t\tif (editorToClose) {\n\t\t\t\tthis.editorControl.closeEditor(editorToClose);\n\t\t\t}\n\n\t\t\t// Restore focus to group container as needed unless group gets closed\n\t\t\tif (restoreFocus && !closeEmptyGroup) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\n\t\t\t// Events\n\t\t\tthis._onDidGroupChange.fire({ kind: GroupChangeKind.EDITOR_ACTIVE });\n\n\t\t\t// Remove empty group if we should\n\t\t\tif (closeEmptyGroup) {\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate shouldRestoreFocus(target: Element): boolean {\n\t\tconst activeElement = document.activeElement;\n\n\t\tif (activeElement === document.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestor(activeElement, target);\n\t}\n\n\tprivate doCloseInactiveEditor(editor: EditorInput) {\n\n\t\t// Update model\n\t\tthis._group.closeEditor(editor);\n\t}\n\n\tprivate handleDirty(editors: EditorInput[]): Promise<boolean /* veto */> {\n\t\tif (!editors.length) {\n\t\t\treturn Promise.resolve(false); // no veto\n\t\t}\n\n\t\tconst editor = editors.shift()!;\n\n\t\t// To prevent multiple confirmation dialogs from showing up one after the other\n\t\t// we check if a pending confirmation is currently showing and if so, join that\n\t\tlet handleDirtyPromise = this.mapEditorToPendingConfirmation.get(editor);\n\t\tif (!handleDirtyPromise) {\n\t\t\thandleDirtyPromise = this.doHandleDirty(editor);\n\t\t\tthis.mapEditorToPendingConfirmation.set(editor, handleDirtyPromise);\n\t\t}\n\n\t\treturn handleDirtyPromise.then(veto => {\n\n\t\t\t// Make sure to remove from our map of cached pending confirmations\n\t\t\tthis.mapEditorToPendingConfirmation.delete(editor);\n\n\t\t\t// Return for the first veto we got\n\t\t\tif (veto) {\n\t\t\t\treturn veto;\n\t\t\t}\n\n\t\t\t// Otherwise continue with the remainders\n\t\t\treturn this.handleDirty(editors);\n\t\t});\n\t}\n\n\tprivate doHandleDirty(editor: EditorInput): Promise<boolean /* veto */> {\n\t\tif (\n\t\t\t!editor.isDirty() || // editor must be dirty\n\t\t\tthis.accessor.groups.some(groupView => groupView !== this && groupView.group.contains(editor, true /* support side by side */)) ||  // editor is opened in other group\n\t\t\teditor instanceof SideBySideEditorInput && this.isOpened(editor.master) // side by side editor master is still opened\n\t\t) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\t// Switch to editor that we want to handle and confirm to save/revert\n\t\treturn this.openEditor(editor).then(() => editor.confirmSave().then(res => {\n\n\t\t\t// It could be that the editor saved meanwhile, so we check again\n\t\t\t// to see if anything needs to happen before closing for good.\n\t\t\t// This can happen for example if autoSave: onFocusChange is configured\n\t\t\t// so that the save happens when the dialog opens.\n\t\t\tif (!editor.isDirty()) {\n\t\t\t\treturn res === ConfirmResult.CANCEL ? true : false;\n\t\t\t}\n\n\t\t\t// Otherwise, handle accordingly\n\t\t\tswitch (res) {\n\t\t\t\tcase ConfirmResult.SAVE:\n\t\t\t\t\treturn editor.save().then(ok => !ok);\n\n\t\t\t\tcase ConfirmResult.DONT_SAVE:\n\n\t\t\t\t\t// first try a normal revert where the contents of the editor are restored\n\t\t\t\t\treturn editor.revert().then(ok => !ok, error => {\n\n\t\t\t\t\t\t// if that fails, since we are about to close the editor, we accept that\n\t\t\t\t\t\t// the editor cannot be reverted and instead do a soft revert that just\n\t\t\t\t\t\t// enables us to close the editor. With this, a user can always close a\n\t\t\t\t\t\t// dirty editor even when reverting fails.\n\t\t\t\t\t\treturn editor.revert({ soft: true }).then(ok => !ok);\n\t\t\t\t\t});\n\n\t\t\t\tcase ConfirmResult.CANCEL:\n\t\t\t\t\treturn true; // veto\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#endregion\n\n\t//#region closeEditors()\n\n\tcloseEditors(args: EditorInput[] | ICloseEditorsFilter, options?: ICloseEditorOptions): Promise<void> {\n\t\tif (this.isEmpty()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst editors = this.getEditorsToClose(args);\n\n\t\t// Check for dirty and veto\n\t\treturn this.handleDirty(editors.slice(0)).then(veto => {\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Do close\n\t\t\tthis.doCloseEditors(editors, options);\n\t\t});\n\t}\n\n\tprivate getEditorsToClose(editors: EditorInput[] | ICloseEditorsFilter): EditorInput[] {\n\t\tif (Array.isArray(editors)) {\n\t\t\treturn editors;\n\t\t}\n\n\t\tconst filter = editors;\n\t\tconst hasDirection = typeof filter.direction === 'number';\n\n\t\tlet editorsToClose = this._group.getEditors(!hasDirection /* in MRU order only if direction is not specified */);\n\n\t\t// Filter: saved only\n\t\tif (filter.savedOnly) {\n\t\t\teditorsToClose = editorsToClose.filter(e => !e.isDirty());\n\t\t}\n\n\t\t// Filter: direction (left / right)\n\t\telse if (hasDirection) {\n\t\t\teditorsToClose = (filter.direction === CloseDirection.LEFT) ?\n\t\t\t\teditorsToClose.slice(0, this._group.indexOf(filter.except as EditorInput)) :\n\t\t\t\teditorsToClose.slice(this._group.indexOf(filter.except as EditorInput) + 1);\n\t\t}\n\n\t\t// Filter: except\n\t\telse if (filter.except) {\n\t\t\teditorsToClose = editorsToClose.filter(e => !e.matches(filter.except));\n\t\t}\n\n\t\treturn editorsToClose;\n\t}\n\n\tprivate doCloseEditors(editors: EditorInput[], options?: ICloseEditorOptions): void {\n\n\t\t// Close all inactive editors first\n\t\tlet closeActiveEditor = false;\n\t\teditors.forEach(editor => {\n\t\t\tif (!this.isActive(editor)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t} else {\n\t\t\t\tcloseActiveEditor = true;\n\t\t\t}\n\t\t});\n\n\t\t// Close active editor last if contained in editors list to close\n\t\tif (closeActiveEditor) {\n\t\t\tthis.doCloseActiveEditor(options && options.preserveFocus ? false : undefined);\n\t\t}\n\n\t\t// Forward to title control\n\t\tthis.titleAreaControl.closeEditors(editors);\n\t}\n\n\t//#endregion\n\n\t//#region closeAllEditors()\n\n\tcloseAllEditors(): Promise<void> {\n\t\tif (this.isEmpty()) {\n\n\t\t\t// If the group is empty and the request is to close all editors, we still close\n\t\t\t// the editor group is the related setting to close empty groups is enabled for\n\t\t\t// a convinient way of removing empty editor groups for the user.\n\t\t\tif (this.accessor.partOptions.closeEmptyGroups) {\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// Check for dirty and veto\n\t\tconst editors = this._group.getEditors(true);\n\t\treturn this.handleDirty(editors.slice(0)).then(veto => {\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Do close\n\t\t\tthis.doCloseAllEditors();\n\t\t});\n\t}\n\n\tprivate doCloseAllEditors(): void {\n\n\t\t// Close all inactive editors first\n\t\tthis.editors.forEach(editor => {\n\t\t\tif (!this.isActive(editor)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t}\n\t\t});\n\n\t\t// Close active editor last\n\t\tthis.doCloseActiveEditor();\n\n\t\t// Forward to title control\n\t\tthis.titleAreaControl.closeAllEditors();\n\t}\n\n\t//#endregion\n\n\t//#region replaceEditors()\n\n\treplaceEditors(editors: EditorReplacement[]): Promise<void> {\n\n\t\t// Extract active vs. inactive replacements\n\t\tlet activeReplacement: EditorReplacement | undefined;\n\t\tconst inactiveReplacements: EditorReplacement[] = [];\n\t\teditors.forEach(({ editor, replacement, options }) => {\n\t\t\tif (editor.isDirty()) {\n\t\t\t\treturn; // we do not handle dirty in this method, so ignore all dirty\n\t\t\t}\n\n\t\t\tconst index = this.getIndexOfEditor(editor);\n\t\t\tif (index >= 0) {\n\t\t\t\tconst isActiveEditor = this.isActive(editor);\n\n\t\t\t\t// make sure we respect the index of the editor to replace\n\t\t\t\tif (options) {\n\t\t\t\t\toptions.index = index;\n\t\t\t\t} else {\n\t\t\t\t\toptions = EditorOptions.create({ index });\n\t\t\t\t}\n\n\t\t\t\toptions.inactive = !isActiveEditor;\n\t\t\t\toptions.pinned = true;\n\n\t\t\t\tconst editorToReplace = { editor, replacement, options };\n\t\t\t\tif (isActiveEditor) {\n\t\t\t\t\tactiveReplacement = editorToReplace;\n\t\t\t\t} else {\n\t\t\t\t\tinactiveReplacements.push(editorToReplace);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Handle inactive first\n\t\tinactiveReplacements.forEach(({ editor, replacement, options }) => {\n\n\t\t\t// Open inactive editor\n\t\t\tthis.doOpenEditor(replacement, options);\n\n\t\t\t// Close replaced inactive editor unless they match\n\t\t\tif (!editor.matches(replacement)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t\tthis.titleAreaControl.closeEditor(editor);\n\t\t\t}\n\t\t});\n\n\t\t// Handle active last\n\t\tif (activeReplacement) {\n\n\t\t\t// Open replacement as active editor\n\t\t\tconst openEditorResult = this.doOpenEditor(activeReplacement.replacement, activeReplacement.options);\n\n\t\t\t// Close replaced active editor unless they match\n\t\t\tif (!activeReplacement.editor.matches(activeReplacement.replacement)) {\n\t\t\t\tthis.doCloseInactiveEditor(activeReplacement.editor);\n\t\t\t\tthis.titleAreaControl.closeEditor(activeReplacement.editor);\n\t\t\t}\n\n\t\t\treturn openEditorResult.then(() => undefined);\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t//#endregion\n\n\t//#endregion\n\n\t//#region Themable\n\n\tprotected updateStyles(): void {\n\t\tconst isEmpty = this.isEmpty();\n\n\t\t// Container\n\t\tif (isEmpty) {\n\t\t\tthis.element.style.backgroundColor = this.getColor(EDITOR_GROUP_EMPTY_BACKGROUND);\n\t\t} else {\n\t\t\tthis.element.style.backgroundColor = null;\n\t\t}\n\n\t\t// Title control\n\t\tconst { showTabs } = this.accessor.partOptions;\n\t\tconst borderColor = this.getColor(EDITOR_GROUP_HEADER_TABS_BORDER) || this.getColor(contrastBorder);\n\n\t\tif (!isEmpty && showTabs && borderColor) {\n\t\t\taddClass(this.titleContainer, 'title-border-bottom');\n\t\t\tthis.titleContainer.style.setProperty('--title-border-bottom-color', borderColor.toString());\n\t\t} else {\n\t\t\tremoveClass(this.titleContainer, 'title-border-bottom');\n\t\t\tthis.titleContainer.style.removeProperty('--title-border-bottom-color');\n\t\t}\n\n\t\tthis.titleContainer.style.backgroundColor = this.getColor(showTabs ? EDITOR_GROUP_HEADER_TABS_BACKGROUND : EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND);\n\n\t\t// Editor container\n\t\tthis.editorContainer.style.backgroundColor = this.getColor(editorBackground);\n\t}\n\n\t//#endregion\n\n\t//#region ISerializableView\n\n\treadonly element: HTMLElement = document.createElement('div');\n\n\tget minimumWidth(): number { return this.editorControl.minimumWidth; }\n\tget minimumHeight(): number { return this.editorControl.minimumHeight; }\n\tget maximumWidth(): number { return this.editorControl.maximumWidth; }\n\tget maximumHeight(): number { return this.editorControl.maximumHeight; }\n\n\tprivate _onDidChange = this._register(new Relay<{ width: number; height: number; } | undefined>());\n\treadonly onDidChange: Event<{ width: number; height: number; } | undefined> = this._onDidChange.event;\n\n\tlayout(width: number, height: number): void {\n\t\tthis.dimension = new Dimension(width, height);\n\n\t\t// Ensure editor container gets height as CSS depending\n\t\t// on the preferred height of the title control\n\t\tthis.editorContainer.style.height = `calc(100% - ${this.titleAreaControl.getPreferredHeight()}px)`;\n\n\t\t// Forward to controls\n\t\tthis.titleAreaControl.layout(new Dimension(this.dimension.width, this.titleAreaControl.getPreferredHeight()));\n\t\tthis.editorControl.layout(new Dimension(this.dimension.width, this.dimension.height - this.titleAreaControl.getPreferredHeight()));\n\t}\n\n\trelayout(): void {\n\t\tif (this.dimension) {\n\t\t\tconst { width, height } = this.dimension;\n\t\t\tthis.layout(width, height);\n\t\t}\n\t}\n\n\ttoJSON(): ISerializedEditorGroup {\n\t\treturn this._group.serialize();\n\t}\n\n\t//#endregion\n\n\tdispose(): void {\n\t\tthis._disposed = true;\n\n\t\tthis._onWillDispose.fire();\n\n\t\tthis.titleAreaControl.dispose();\n\t\t// this.editorControl = null;\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass EditorOpeningEvent implements IEditorOpeningEvent {\n\tprivate override: () => Promise<IEditor>;\n\n\tconstructor(\n\t\tprivate _group: GroupIdentifier,\n\t\tprivate _editor: EditorInput,\n\t\tprivate _options: EditorOptions | undefined\n\t) {\n\t}\n\n\tget groupId(): GroupIdentifier {\n\t\treturn this._group;\n\t}\n\n\tget editor(): EditorInput {\n\t\treturn this._editor;\n\t}\n\n\tget options(): EditorOptions | undefined {\n\t\treturn this._options;\n\t}\n\n\tprevent(callback: () => Promise<IEditor>): void {\n\t\tthis.override = callback;\n\t}\n\n\tisPrevented(): () => Promise<IEditor> {\n\t\treturn this.override;\n\t}\n}\n\nexport interface EditorReplacement {\n\teditor: EditorInput;\n\treplacement: EditorInput;\n\toptions?: EditorOptions;\n}\n\nregisterThemingParticipant((theme, collector, environment) => {\n\n\t// Letterpress\n\tconst letterpress = theme.type === 'dark' ? require.toUrl('./media/letterpress-dark.svg') : theme.type === 'hc' ? require.toUrl('./media/letterpress-hc.svg') : require.toUrl('./media/letterpress.svg');\n\tcollector.addRule(`\n\t\t.monaco-workbench .part.editor > .content .editor-group-container.empty .editor-group-letterpress {\n\t\t\tbackground-image: url('${letterpress}')\n\t\t}\n\t`);\n\n\t// Focused Empty Group Border\n\tconst focusedEmptyGroupBorder = theme.getColor(EDITOR_GROUP_FOCUSED_EMPTY_BORDER);\n\tif (focusedEmptyGroupBorder) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.editor > .content:not(.empty) .editor-group-container.empty.active:focus {\n\t\t\t\toutline-width: 1px;\n\t\t\t\toutline-color: ${focusedEmptyGroupBorder};\n\t\t\t\toutline-offset: -2px;\n\t\t\t\toutline-style: solid;\n\t\t\t}\n\n\t\t\t.monaco-workbench .part.editor > .content.empty .editor-group-container.empty.active:focus {\n\t\t\t\toutline: none; /* never show outline for empty group if it is the last */\n\t\t\t}\n\t\t`);\n\t} else {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .part.editor > .content .editor-group-container.empty.active:focus {\n\t\t\t\toutline: none; /* disable focus outline unless active empty group border is defined */\n\t\t\t}\n\t\t`);\n\t}\n});\n"]}]}