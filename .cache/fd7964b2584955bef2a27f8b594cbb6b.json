{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"../../../../lib/vscode/node_modules/vscode-textmate\"], function (require, exports, vscodeTextmate) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const target = vscodeTextmate;\n    target.Registry = class Registry extends vscodeTextmate.Registry {\n        constructor(opts) {\n            super(Object.assign({}, opts, { getOnigLib: () => {\n                    return new Promise((res, rej) => {\n                        const onigasm = require(\"onigasm\");\n                        const wasmUrl = require(\"!!file-loader!onigasm/lib/onigasm.wasm\");\n                        return fetch(wasmUrl).then(resp => resp.arrayBuffer()).then(buffer => {\n                            return onigasm.loadWASM(buffer);\n                        }).then(() => {\n                            res({\n                                createOnigScanner: function (patterns) { return new onigasm.OnigScanner(patterns); },\n                                createOnigString: function (s) { return new onigasm.OnigString(s); },\n                            });\n                        }).catch(reason => rej(reason));\n                    });\n                } }));\n        }\n    };\n    var StandardTokenType;\n    (function (StandardTokenType) {\n        StandardTokenType[StandardTokenType[\"Other\"] = 0] = \"Other\";\n        StandardTokenType[StandardTokenType[\"Comment\"] = 1] = \"Comment\";\n        StandardTokenType[StandardTokenType[\"String\"] = 2] = \"String\";\n        StandardTokenType[StandardTokenType[\"RegEx\"] = 4] = \"RegEx\";\n    })(StandardTokenType || (StandardTokenType = {}));\n    // tslint:disable-next-line no-any to override const\n    target.StandardTokenType = StandardTokenType;\n});\n",null]}