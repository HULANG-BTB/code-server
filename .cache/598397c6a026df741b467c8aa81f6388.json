{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./inspectTMScopes\");\nvar nls = require(\"vs/nls\");\nvar dom = require(\"vs/base/browser/dom\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar color_1 = require(\"vs/base/common/color\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar TMHelper_1 = require(\"vs/workbench/services/textMate/common/TMHelper\");\nvar textMateService_1 = require(\"vs/workbench/services/textMate/common/textMateService\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar InspectTMScopesController = /** @class */ (function (_super) {\n    tslib_1.__extends(InspectTMScopesController, _super);\n    function InspectTMScopesController(editor, textMateService, modeService, themeService, notificationService) {\n        var _this = _super.call(this) || this;\n        _this._editor = editor;\n        _this._textMateService = textMateService;\n        _this._themeService = themeService;\n        _this._modeService = modeService;\n        _this._notificationService = notificationService;\n        _this._widget = null;\n        _this._register(_this._editor.onDidChangeModel(function (e) { return _this.stop(); }));\n        _this._register(_this._editor.onDidChangeModelLanguage(function (e) { return _this.stop(); }));\n        _this._register(_this._editor.onKeyUp(function (e) { return e.keyCode === keyCodes_1.KeyCode.Escape && _this.stop(); }));\n        return _this;\n    }\n    InspectTMScopesController.get = function (editor) {\n        return editor.getContribution(InspectTMScopesController.ID);\n    };\n    InspectTMScopesController.prototype.getId = function () {\n        return InspectTMScopesController.ID;\n    };\n    InspectTMScopesController.prototype.dispose = function () {\n        this.stop();\n        _super.prototype.dispose.call(this);\n    };\n    InspectTMScopesController.prototype.launch = function () {\n        if (this._widget) {\n            return;\n        }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        this._widget = new InspectTMScopesWidget(this._editor, this._textMateService, this._modeService, this._themeService, this._notificationService);\n    };\n    InspectTMScopesController.prototype.stop = function () {\n        if (this._widget) {\n            this._widget.dispose();\n            this._widget = null;\n        }\n    };\n    InspectTMScopesController.prototype.toggle = function () {\n        if (!this._widget) {\n            this.launch();\n        }\n        else {\n            this.stop();\n        }\n    };\n    InspectTMScopesController.ID = 'editor.contrib.inspectTMScopes';\n    InspectTMScopesController = tslib_1.__decorate([\n        tslib_1.__param(1, textMateService_1.ITextMateService),\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(4, notification_1.INotificationService)\n    ], InspectTMScopesController);\n    return InspectTMScopesController;\n}(lifecycle_1.Disposable));\nvar InspectTMScopes = /** @class */ (function (_super) {\n    tslib_1.__extends(InspectTMScopes, _super);\n    function InspectTMScopes() {\n        return _super.call(this, {\n            id: 'editor.action.inspectTMScopes',\n            label: nls.localize('inspectTMScopes', \"Developer: Inspect TM Scopes\"),\n            alias: 'Developer: Inspect TM Scopes',\n            precondition: null\n        }) || this;\n    }\n    InspectTMScopes.prototype.run = function (accessor, editor) {\n        var controller = InspectTMScopesController.get(editor);\n        if (controller) {\n            controller.toggle();\n        }\n    };\n    return InspectTMScopes;\n}(editorExtensions_1.EditorAction));\nfunction renderTokenText(tokenText) {\n    if (tokenText.length > 40) {\n        tokenText = tokenText.substr(0, 20) + 'â€¦' + tokenText.substr(tokenText.length - 20);\n    }\n    var result = '';\n    for (var charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {\n        var charCode = tokenText.charCodeAt(charIndex);\n        switch (charCode) {\n            case charCode_1.CharCode.Tab:\n                result += '&rarr;';\n                break;\n            case charCode_1.CharCode.Space:\n                result += '&middot;';\n                break;\n            case charCode_1.CharCode.LessThan:\n                result += '&lt;';\n                break;\n            case charCode_1.CharCode.GreaterThan:\n                result += '&gt;';\n                break;\n            case charCode_1.CharCode.Ampersand:\n                result += '&amp;';\n                break;\n            default:\n                result += String.fromCharCode(charCode);\n        }\n    }\n    return result;\n}\nvar InspectTMScopesWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(InspectTMScopesWidget, _super);\n    function InspectTMScopesWidget(editor, textMateService, modeService, themeService, notificationService) {\n        var _this = _super.call(this) || this;\n        // Editor.IContentWidget.allowEditorOverflow\n        _this.allowEditorOverflow = true;\n        _this._isDisposed = false;\n        _this._editor = editor;\n        _this._modeService = modeService;\n        _this._themeService = themeService;\n        _this._notificationService = notificationService;\n        _this._model = _this._editor.getModel();\n        _this._domNode = document.createElement('div');\n        _this._domNode.className = 'tm-inspect-widget';\n        _this._grammar = textMateService.createGrammar(_this._model.getLanguageIdentifier().language);\n        _this._beginCompute(_this._editor.getPosition());\n        _this._register(_this._editor.onDidChangeCursorPosition(function (e) { return _this._beginCompute(_this._editor.getPosition()); }));\n        _this._editor.addContentWidget(_this);\n        return _this;\n    }\n    InspectTMScopesWidget.prototype.dispose = function () {\n        this._isDisposed = true;\n        this._editor.removeContentWidget(this);\n        _super.prototype.dispose.call(this);\n    };\n    InspectTMScopesWidget.prototype.getId = function () {\n        return InspectTMScopesWidget._ID;\n    };\n    InspectTMScopesWidget.prototype._beginCompute = function (position) {\n        var _this = this;\n        dom.clearNode(this._domNode);\n        this._domNode.appendChild(document.createTextNode(nls.localize('inspectTMScopesWidget.loading', \"Loading...\")));\n        this._grammar.then(function (grammar) { return _this._compute(grammar, position); }, function (err) {\n            _this._notificationService.warn(err);\n            setTimeout(function () {\n                InspectTMScopesController.get(_this._editor).stop();\n            });\n        });\n    };\n    InspectTMScopesWidget.prototype._compute = function (grammar, position) {\n        if (this._isDisposed) {\n            return;\n        }\n        var data = this._getTokensAtLine(grammar, position.lineNumber);\n        var token1Index = 0;\n        for (var i = data.tokens1.length - 1; i >= 0; i--) {\n            var t = data.tokens1[i];\n            if (position.column - 1 >= t.startIndex) {\n                token1Index = i;\n                break;\n            }\n        }\n        var token2Index = 0;\n        for (var i = (data.tokens2.length >>> 1); i >= 0; i--) {\n            if (position.column - 1 >= data.tokens2[(i << 1)]) {\n                token2Index = i;\n                break;\n            }\n        }\n        var result = '';\n        var tokenStartIndex = data.tokens1[token1Index].startIndex;\n        var tokenEndIndex = data.tokens1[token1Index].endIndex;\n        var tokenText = this._model.getLineContent(position.lineNumber).substring(tokenStartIndex, tokenEndIndex);\n        result += \"<h2 class=\\\"tm-token\\\">\" + renderTokenText(tokenText) + \"<span class=\\\"tm-token-length\\\">(\" + tokenText.length + \" \" + (tokenText.length === 1 ? 'char' : 'chars') + \")</span></h2>\";\n        result += \"<hr class=\\\"tm-metadata-separator\\\" style=\\\"clear:both\\\"/>\";\n        var metadata = this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]);\n        result += \"<table class=\\\"tm-metadata-table\\\"><tbody>\";\n        result += \"<tr><td class=\\\"tm-metadata-key\\\">language</td><td class=\\\"tm-metadata-value\\\">\" + strings_1.escape(metadata.languageIdentifier.language) + \"</td></tr>\";\n        result += \"<tr><td class=\\\"tm-metadata-key\\\">token type</td><td class=\\\"tm-metadata-value\\\">\" + this._tokenTypeToString(metadata.tokenType) + \"</td></tr>\";\n        result += \"<tr><td class=\\\"tm-metadata-key\\\">font style</td><td class=\\\"tm-metadata-value\\\">\" + this._fontStyleToString(metadata.fontStyle) + \"</td></tr>\";\n        result += \"<tr><td class=\\\"tm-metadata-key\\\">foreground</td><td class=\\\"tm-metadata-value\\\">\" + color_1.Color.Format.CSS.formatHexA(metadata.foreground) + \"</td></tr>\";\n        result += \"<tr><td class=\\\"tm-metadata-key\\\">background</td><td class=\\\"tm-metadata-value\\\">\" + color_1.Color.Format.CSS.formatHexA(metadata.background) + \"</td></tr>\";\n        if (metadata.background.isOpaque() && metadata.foreground.isOpaque()) {\n            result += \"<tr><td class=\\\"tm-metadata-key\\\">contrast ratio</td><td class=\\\"tm-metadata-value\\\">\" + metadata.background.getContrastRatio(metadata.foreground).toFixed(2) + \"</td></tr>\";\n        }\n        else {\n            result += '<tr><td class=\"tm-metadata-key\">Contrast ratio cannot be precise for colors that use transparency</td><td class=\"tm-metadata-value\"></td></tr>';\n        }\n        result += \"</tbody></table>\";\n        var theme = this._themeService.getColorTheme();\n        result += \"<hr class=\\\"tm-metadata-separator\\\"/>\";\n        var matchingRule = TMHelper_1.findMatchingThemeRule(theme, data.tokens1[token1Index].scopes, false);\n        if (matchingRule) {\n            result += \"<code class=\\\"tm-theme-selector\\\">\" + matchingRule.rawSelector + \"\\n\" + JSON.stringify(matchingRule.settings, null, '\\t') + \"</code>\";\n        }\n        else {\n            result += \"<span class=\\\"tm-theme-selector\\\">No theme selector.</span>\";\n        }\n        result += \"<hr class=\\\"tm-metadata-separator\\\"/>\";\n        result += \"<ul>\";\n        for (var i = data.tokens1[token1Index].scopes.length - 1; i >= 0; i--) {\n            result += \"<li>\" + strings_1.escape(data.tokens1[token1Index].scopes[i]) + \"</li>\";\n        }\n        result += \"</ul>\";\n        this._domNode.innerHTML = result;\n        this._editor.layoutContentWidget(this);\n    };\n    InspectTMScopesWidget.prototype._decodeMetadata = function (metadata) {\n        var colorMap = modes_1.TokenizationRegistry.getColorMap();\n        var languageId = modes_1.TokenMetadata.getLanguageId(metadata);\n        var tokenType = modes_1.TokenMetadata.getTokenType(metadata);\n        var fontStyle = modes_1.TokenMetadata.getFontStyle(metadata);\n        var foreground = modes_1.TokenMetadata.getForeground(metadata);\n        var background = modes_1.TokenMetadata.getBackground(metadata);\n        return {\n            languageIdentifier: this._modeService.getLanguageIdentifier(languageId),\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: colorMap[foreground],\n            background: colorMap[background]\n        };\n    };\n    InspectTMScopesWidget.prototype._tokenTypeToString = function (tokenType) {\n        switch (tokenType) {\n            case modes_1.StandardTokenType.Other: return 'Other';\n            case modes_1.StandardTokenType.Comment: return 'Comment';\n            case modes_1.StandardTokenType.String: return 'String';\n            case modes_1.StandardTokenType.RegEx: return 'RegEx';\n        }\n        return '??';\n    };\n    InspectTMScopesWidget.prototype._fontStyleToString = function (fontStyle) {\n        var r = '';\n        if (fontStyle & modes_1.FontStyle.Italic) {\n            r += 'italic ';\n        }\n        if (fontStyle & modes_1.FontStyle.Bold) {\n            r += 'bold ';\n        }\n        if (fontStyle & modes_1.FontStyle.Underline) {\n            r += 'underline ';\n        }\n        if (r.length === 0) {\n            r = '---';\n        }\n        return r;\n    };\n    InspectTMScopesWidget.prototype._getTokensAtLine = function (grammar, lineNumber) {\n        var stateBeforeLine = this._getStateBeforeLine(grammar, lineNumber);\n        var tokenizationResult1 = grammar.tokenizeLine(this._model.getLineContent(lineNumber), stateBeforeLine);\n        var tokenizationResult2 = grammar.tokenizeLine2(this._model.getLineContent(lineNumber), stateBeforeLine);\n        return {\n            startState: stateBeforeLine,\n            tokens1: tokenizationResult1.tokens,\n            tokens2: tokenizationResult2.tokens,\n            endState: tokenizationResult1.ruleStack\n        };\n    };\n    InspectTMScopesWidget.prototype._getStateBeforeLine = function (grammar, lineNumber) {\n        var state = null;\n        for (var i = 1; i < lineNumber; i++) {\n            var tokenizationResult = grammar.tokenizeLine(this._model.getLineContent(i), state);\n            state = tokenizationResult.ruleStack;\n        }\n        return state;\n    };\n    InspectTMScopesWidget.prototype.getDomNode = function () {\n        return this._domNode;\n    };\n    InspectTMScopesWidget.prototype.getPosition = function () {\n        return {\n            position: this._editor.getPosition(),\n            preference: [editorBrowser_1.ContentWidgetPositionPreference.BELOW, editorBrowser_1.ContentWidgetPositionPreference.ABOVE]\n        };\n    };\n    InspectTMScopesWidget._ID = 'editor.contrib.inspectTMScopesWidget';\n    return InspectTMScopesWidget;\n}(lifecycle_1.Disposable));\neditorExtensions_1.registerEditorContribution(InspectTMScopesController);\neditorExtensions_1.registerEditorAction(InspectTMScopes);\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var border = theme.getColor(colorRegistry_1.editorHoverBorder);\n    if (border) {\n        var borderWidth = theme.type === themeService_1.HIGH_CONTRAST ? 2 : 1;\n        collector.addRule(\".monaco-editor .tm-inspect-widget { border: \" + borderWidth + \"px solid \" + border + \"; }\");\n        collector.addRule(\".monaco-editor .tm-inspect-widget .tm-metadata-separator { background-color: \" + border + \"; }\");\n    }\n    var background = theme.getColor(colorRegistry_1.editorHoverBackground);\n    if (background) {\n        collector.addRule(\".monaco-editor .tm-inspect-widget { background-color: \" + background + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./inspectTMScopes';\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Color } from 'vs/base/common/color';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { escape } from 'vs/base/common/strings';\nimport { ContentWidgetPositionPreference, IActiveCodeEditor, ICodeEditor, IContentWidget, IContentWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { FontStyle, LanguageIdentifier, StandardTokenType, TokenMetadata, TokenizationRegistry } from 'vs/editor/common/modes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { editorHoverBackground, editorHoverBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { HIGH_CONTRAST, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { findMatchingThemeRule } from 'vs/workbench/services/textMate/common/TMHelper';\nimport { ITextMateService, IGrammar, IToken, StackElement } from 'vs/workbench/services/textMate/common/textMateService';\nimport { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\n\nclass InspectTMScopesController extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.inspectTMScopes';\n\n\tpublic static get(editor: ICodeEditor): InspectTMScopesController {\n\t\treturn editor.getContribution<InspectTMScopesController>(InspectTMScopesController.ID);\n\t}\n\n\tprivate _editor: ICodeEditor;\n\tprivate _textMateService: ITextMateService;\n\tprivate _themeService: IWorkbenchThemeService;\n\tprivate _modeService: IModeService;\n\tprivate _notificationService: INotificationService;\n\tprivate _widget: InspectTMScopesWidget | null;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@ITextMateService textMateService: ITextMateService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@INotificationService notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._textMateService = textMateService;\n\t\tthis._themeService = themeService;\n\t\tthis._modeService = modeService;\n\t\tthis._notificationService = notificationService;\n\t\tthis._widget = null;\n\n\t\tthis._register(this._editor.onDidChangeModel((e) => this.stop()));\n\t\tthis._register(this._editor.onDidChangeModelLanguage((e) => this.stop()));\n\t\tthis._register(this._editor.onKeyUp((e) => e.keyCode === KeyCode.Escape && this.stop()));\n\t}\n\n\tpublic getId(): string {\n\t\treturn InspectTMScopesController.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.stop();\n\t\tsuper.dispose();\n\t}\n\n\tpublic launch(): void {\n\t\tif (this._widget) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._widget = new InspectTMScopesWidget(this._editor, this._textMateService, this._modeService, this._themeService, this._notificationService);\n\t}\n\n\tpublic stop(): void {\n\t\tif (this._widget) {\n\t\t\tthis._widget.dispose();\n\t\t\tthis._widget = null;\n\t\t}\n\t}\n\n\tpublic toggle(): void {\n\t\tif (!this._widget) {\n\t\t\tthis.launch();\n\t\t} else {\n\t\t\tthis.stop();\n\t\t}\n\t}\n}\n\nclass InspectTMScopes extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inspectTMScopes',\n\t\t\tlabel: nls.localize('inspectTMScopes', \"Developer: Inspect TM Scopes\"),\n\t\t\talias: 'Developer: Inspect TM Scopes',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet controller = InspectTMScopesController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.toggle();\n\t\t}\n\t}\n}\n\ninterface ICompleteLineTokenization {\n\tstartState: StackElement | null;\n\ttokens1: IToken[];\n\ttokens2: Uint32Array;\n\tendState: StackElement;\n}\n\ninterface IDecodedMetadata {\n\tlanguageIdentifier: LanguageIdentifier;\n\ttokenType: StandardTokenType;\n\tfontStyle: FontStyle;\n\tforeground: Color;\n\tbackground: Color;\n}\n\nfunction renderTokenText(tokenText: string): string {\n\tif (tokenText.length > 40) {\n\t\ttokenText = tokenText.substr(0, 20) + 'â€¦' + tokenText.substr(tokenText.length - 20);\n\t}\n\tlet result: string = '';\n\tfor (let charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {\n\t\tlet charCode = tokenText.charCodeAt(charIndex);\n\t\tswitch (charCode) {\n\t\t\tcase CharCode.Tab:\n\t\t\t\tresult += '&rarr;';\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Space:\n\t\t\t\tresult += '&middot;';\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.LessThan:\n\t\t\t\tresult += '&lt;';\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.GreaterThan:\n\t\t\t\tresult += '&gt;';\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Ampersand:\n\t\t\t\tresult += '&amp;';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tresult += String.fromCharCode(charCode);\n\t\t}\n\t}\n\treturn result;\n}\n\nclass InspectTMScopesWidget extends Disposable implements IContentWidget {\n\n\tprivate static readonly _ID = 'editor.contrib.inspectTMScopesWidget';\n\n\t// Editor.IContentWidget.allowEditorOverflow\n\tpublic readonly allowEditorOverflow = true;\n\n\tprivate _isDisposed: boolean;\n\tprivate readonly _editor: IActiveCodeEditor;\n\tprivate readonly _modeService: IModeService;\n\tprivate readonly _themeService: IWorkbenchThemeService;\n\tprivate readonly _notificationService: INotificationService;\n\tprivate readonly _model: ITextModel;\n\tprivate readonly _domNode: HTMLElement;\n\tprivate readonly _grammar: Promise<IGrammar>;\n\n\tconstructor(\n\t\teditor: IActiveCodeEditor,\n\t\ttextMateService: ITextMateService,\n\t\tmodeService: IModeService,\n\t\tthemeService: IWorkbenchThemeService,\n\t\tnotificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._isDisposed = false;\n\t\tthis._editor = editor;\n\t\tthis._modeService = modeService;\n\t\tthis._themeService = themeService;\n\t\tthis._notificationService = notificationService;\n\t\tthis._model = this._editor.getModel();\n\t\tthis._domNode = document.createElement('div');\n\t\tthis._domNode.className = 'tm-inspect-widget';\n\t\tthis._grammar = textMateService.createGrammar(this._model.getLanguageIdentifier().language);\n\t\tthis._beginCompute(this._editor.getPosition());\n\t\tthis._register(this._editor.onDidChangeCursorPosition((e) => this._beginCompute(this._editor.getPosition())));\n\t\tthis._editor.addContentWidget(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tthis._editor.removeContentWidget(this);\n\t\tsuper.dispose();\n\t}\n\n\tpublic getId(): string {\n\t\treturn InspectTMScopesWidget._ID;\n\t}\n\n\tprivate _beginCompute(position: Position): void {\n\t\tdom.clearNode(this._domNode);\n\t\tthis._domNode.appendChild(document.createTextNode(nls.localize('inspectTMScopesWidget.loading', \"Loading...\")));\n\t\tthis._grammar.then(\n\t\t\t(grammar) => this._compute(grammar, position),\n\t\t\t(err) => {\n\t\t\t\tthis._notificationService.warn(err);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tInspectTMScopesController.get(this._editor).stop();\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate _compute(grammar: IGrammar, position: Position): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tlet data = this._getTokensAtLine(grammar, position.lineNumber);\n\n\t\tlet token1Index = 0;\n\t\tfor (let i = data.tokens1.length - 1; i >= 0; i--) {\n\t\t\tlet t = data.tokens1[i];\n\t\t\tif (position.column - 1 >= t.startIndex) {\n\t\t\t\ttoken1Index = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet token2Index = 0;\n\t\tfor (let i = (data.tokens2.length >>> 1); i >= 0; i--) {\n\t\t\tif (position.column - 1 >= data.tokens2[(i << 1)]) {\n\t\t\t\ttoken2Index = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet result = '';\n\n\t\tlet tokenStartIndex = data.tokens1[token1Index].startIndex;\n\t\tlet tokenEndIndex = data.tokens1[token1Index].endIndex;\n\t\tlet tokenText = this._model.getLineContent(position.lineNumber).substring(tokenStartIndex, tokenEndIndex);\n\t\tresult += `<h2 class=\"tm-token\">${renderTokenText(tokenText)}<span class=\"tm-token-length\">(${tokenText.length} ${tokenText.length === 1 ? 'char' : 'chars'})</span></h2>`;\n\n\t\tresult += `<hr class=\"tm-metadata-separator\" style=\"clear:both\"/>`;\n\n\t\tlet metadata = this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]);\n\t\tresult += `<table class=\"tm-metadata-table\"><tbody>`;\n\t\tresult += `<tr><td class=\"tm-metadata-key\">language</td><td class=\"tm-metadata-value\">${escape(metadata.languageIdentifier.language)}</td></tr>`;\n\t\tresult += `<tr><td class=\"tm-metadata-key\">token type</td><td class=\"tm-metadata-value\">${this._tokenTypeToString(metadata.tokenType)}</td></tr>`;\n\t\tresult += `<tr><td class=\"tm-metadata-key\">font style</td><td class=\"tm-metadata-value\">${this._fontStyleToString(metadata.fontStyle)}</td></tr>`;\n\t\tresult += `<tr><td class=\"tm-metadata-key\">foreground</td><td class=\"tm-metadata-value\">${Color.Format.CSS.formatHexA(metadata.foreground)}</td></tr>`;\n\t\tresult += `<tr><td class=\"tm-metadata-key\">background</td><td class=\"tm-metadata-value\">${Color.Format.CSS.formatHexA(metadata.background)}</td></tr>`;\n\t\tif (metadata.background.isOpaque() && metadata.foreground.isOpaque()) {\n\t\t\tresult += `<tr><td class=\"tm-metadata-key\">contrast ratio</td><td class=\"tm-metadata-value\">${metadata.background.getContrastRatio(metadata.foreground).toFixed(2)}</td></tr>`;\n\t\t} else {\n\t\t\tresult += '<tr><td class=\"tm-metadata-key\">Contrast ratio cannot be precise for colors that use transparency</td><td class=\"tm-metadata-value\"></td></tr>';\n\t\t}\n\t\tresult += `</tbody></table>`;\n\n\t\tlet theme = this._themeService.getColorTheme();\n\t\tresult += `<hr class=\"tm-metadata-separator\"/>`;\n\t\tlet matchingRule = findMatchingThemeRule(theme, data.tokens1[token1Index].scopes, false);\n\t\tif (matchingRule) {\n\t\t\tresult += `<code class=\"tm-theme-selector\">${matchingRule.rawSelector}\\n${JSON.stringify(matchingRule.settings, null, '\\t')}</code>`;\n\t\t} else {\n\t\t\tresult += `<span class=\"tm-theme-selector\">No theme selector.</span>`;\n\t\t}\n\n\t\tresult += `<hr class=\"tm-metadata-separator\"/>`;\n\n\t\tresult += `<ul>`;\n\t\tfor (let i = data.tokens1[token1Index].scopes.length - 1; i >= 0; i--) {\n\t\t\tresult += `<li>${escape(data.tokens1[token1Index].scopes[i])}</li>`;\n\t\t}\n\t\tresult += `</ul>`;\n\n\n\t\tthis._domNode.innerHTML = result;\n\t\tthis._editor.layoutContentWidget(this);\n\t}\n\n\tprivate _decodeMetadata(metadata: number): IDecodedMetadata {\n\t\tlet colorMap = TokenizationRegistry.getColorMap()!;\n\t\tlet languageId = TokenMetadata.getLanguageId(metadata);\n\t\tlet tokenType = TokenMetadata.getTokenType(metadata);\n\t\tlet fontStyle = TokenMetadata.getFontStyle(metadata);\n\t\tlet foreground = TokenMetadata.getForeground(metadata);\n\t\tlet background = TokenMetadata.getBackground(metadata);\n\t\treturn {\n\t\t\tlanguageIdentifier: this._modeService.getLanguageIdentifier(languageId)!,\n\t\t\ttokenType: tokenType,\n\t\t\tfontStyle: fontStyle,\n\t\t\tforeground: colorMap[foreground],\n\t\t\tbackground: colorMap[background]\n\t\t};\n\t}\n\n\tprivate _tokenTypeToString(tokenType: StandardTokenType): string {\n\t\tswitch (tokenType) {\n\t\t\tcase StandardTokenType.Other: return 'Other';\n\t\t\tcase StandardTokenType.Comment: return 'Comment';\n\t\t\tcase StandardTokenType.String: return 'String';\n\t\t\tcase StandardTokenType.RegEx: return 'RegEx';\n\t\t}\n\t\treturn '??';\n\t}\n\n\tprivate _fontStyleToString(fontStyle: FontStyle): string {\n\t\tlet r = '';\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tr += 'italic ';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tr += 'bold ';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tr += 'underline ';\n\t\t}\n\t\tif (r.length === 0) {\n\t\t\tr = '---';\n\t\t}\n\t\treturn r;\n\t}\n\n\tprivate _getTokensAtLine(grammar: IGrammar, lineNumber: number): ICompleteLineTokenization {\n\t\tlet stateBeforeLine = this._getStateBeforeLine(grammar, lineNumber);\n\n\t\tlet tokenizationResult1 = grammar.tokenizeLine(this._model.getLineContent(lineNumber), stateBeforeLine);\n\t\tlet tokenizationResult2 = grammar.tokenizeLine2(this._model.getLineContent(lineNumber), stateBeforeLine);\n\n\t\treturn {\n\t\t\tstartState: stateBeforeLine,\n\t\t\ttokens1: tokenizationResult1.tokens,\n\t\t\ttokens2: tokenizationResult2.tokens,\n\t\t\tendState: tokenizationResult1.ruleStack\n\t\t};\n\t}\n\n\tprivate _getStateBeforeLine(grammar: IGrammar, lineNumber: number): StackElement | null {\n\t\tlet state: StackElement | null = null;\n\n\t\tfor (let i = 1; i < lineNumber; i++) {\n\t\t\tlet tokenizationResult = grammar.tokenizeLine(this._model.getLineContent(i), state);\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode;\n\t}\n\n\tpublic getPosition(): IContentWidgetPosition {\n\t\treturn {\n\t\t\tposition: this._editor.getPosition(),\n\t\t\tpreference: [ContentWidgetPositionPreference.BELOW, ContentWidgetPositionPreference.ABOVE]\n\t\t};\n\t}\n}\n\nregisterEditorContribution(InspectTMScopesController);\nregisterEditorAction(InspectTMScopes);\n\nregisterThemingParticipant((theme, collector) => {\n\tconst border = theme.getColor(editorHoverBorder);\n\tif (border) {\n\t\tlet borderWidth = theme.type === HIGH_CONTRAST ? 2 : 1;\n\t\tcollector.addRule(`.monaco-editor .tm-inspect-widget { border: ${borderWidth}px solid ${border}; }`);\n\t\tcollector.addRule(`.monaco-editor .tm-inspect-widget .tm-metadata-separator { background-color: ${border}; }`);\n\t}\n\tconst background = theme.getColor(editorHoverBackground);\n\tif (background) {\n\t\tcollector.addRule(`.monaco-editor .tm-inspect-widget { background-color: ${background}; }`);\n\t}\n});\n"]}]}