{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadMessageService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadMessageService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar event_1 = require(\"vs/base/common/event\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar MainThreadMessageService = /** @class */ (function () {\n    function MainThreadMessageService(extHostContext, _notificationService, _commandService, _dialogService) {\n        this._notificationService = _notificationService;\n        this._commandService = _commandService;\n        this._dialogService = _dialogService;\n        //\n    }\n    MainThreadMessageService.prototype.dispose = function () {\n        //\n    };\n    MainThreadMessageService.prototype.$showMessage = function (severity, message, options, commands) {\n        if (options.modal) {\n            return this._showModalMessage(severity, message, commands);\n        }\n        else {\n            return this._showMessage(severity, message, commands, options.extension);\n        }\n    };\n    MainThreadMessageService.prototype._showMessage = function (severity, message, commands, extension) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var primaryActions = [];\n            var MessageItemAction = /** @class */ (function (_super) {\n                tslib_1.__extends(MessageItemAction, _super);\n                function MessageItemAction(id, label, handle) {\n                    return _super.call(this, id, label, undefined, true, function () {\n                        resolve(handle);\n                        return Promise.resolve();\n                    }) || this;\n                }\n                return MessageItemAction;\n            }(actions_1.Action));\n            var ManageExtensionAction = /** @class */ (function (_super) {\n                tslib_1.__extends(ManageExtensionAction, _super);\n                function ManageExtensionAction(id, label, commandService) {\n                    return _super.call(this, id.value, label, undefined, true, function () {\n                        return commandService.executeCommand('_extensions.manage', id.value);\n                    }) || this;\n                }\n                return ManageExtensionAction;\n            }(actions_1.Action));\n            commands.forEach(function (command) {\n                primaryActions.push(new MessageItemAction('_extension_message_handle_' + command.handle, command.title, command.handle));\n            });\n            var source;\n            if (extension) {\n                source = nls.localize('extensionSource', \"{0} (Extension)\", extension.displayName || extension.name);\n            }\n            if (!source) {\n                source = nls.localize('defaultSource', \"Extension\");\n            }\n            var secondaryActions = [];\n            if (extension && !extension.isUnderDevelopment) {\n                secondaryActions.push(new ManageExtensionAction(extension.identifier, nls.localize('manageExtension', \"Manage Extension\"), _this._commandService));\n            }\n            var messageHandle = _this._notificationService.notify({\n                severity: severity,\n                message: message,\n                actions: { primary: primaryActions, secondary: secondaryActions },\n                source: source\n            });\n            // if promise has not been resolved yet, now is the time to ensure a return value\n            // otherwise if already resolved it means the user clicked one of the buttons\n            event_1.Event.once(messageHandle.onDidClose)(function () {\n                lifecycle_1.dispose.apply(void 0, primaryActions.concat(secondaryActions));\n                resolve(undefined);\n            });\n        });\n    };\n    MainThreadMessageService.prototype._showModalMessage = function (severity, message, commands) {\n        var cancelId = undefined;\n        var buttons = commands.map(function (command, index) {\n            if (command.isCloseAffordance === true) {\n                cancelId = index;\n            }\n            return command.title;\n        });\n        if (cancelId === undefined) {\n            if (buttons.length > 0) {\n                buttons.push(nls.localize('cancel', \"Cancel\"));\n            }\n            else {\n                buttons.push(nls.localize('ok', \"OK\"));\n            }\n            cancelId = buttons.length - 1;\n        }\n        return this._dialogService.show(severity, message, buttons, { cancelId: cancelId })\n            .then(function (result) { return result === commands.length ? undefined : commands[result].handle; });\n    };\n    MainThreadMessageService = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadMessageService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, commands_1.ICommandService),\n        tslib_1.__param(3, dialogs_1.IDialogService)\n    ], MainThreadMessageService);\n    return MainThreadMessageService;\n}());\nexports.MainThreadMessageService = MainThreadMessageService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadMessageService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadMessageService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { MainThreadMessageServiceShape, MainContext, IExtHostContext, MainThreadMessageOptions } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\n@extHostNamedCustomer(MainContext.MainThreadMessageService)\nexport class MainThreadMessageService implements MainThreadMessageServiceShape {\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\t//\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Promise<number | undefined> {\n\t\tif (options.modal) {\n\t\t\treturn this._showModalMessage(severity, message, commands);\n\t\t} else {\n\t\t\treturn this._showMessage(severity, message, commands, options.extension);\n\t\t}\n\t}\n\n\tprivate _showMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[], extension: IExtensionDescription | undefined): Promise<number> {\n\n\t\treturn new Promise<number>(resolve => {\n\n\t\t\tconst primaryActions: MessageItemAction[] = [];\n\n\t\t\tclass MessageItemAction extends Action {\n\t\t\t\tconstructor(id: string, label: string, handle: number) {\n\t\t\t\t\tsuper(id, label, undefined, true, () => {\n\t\t\t\t\t\tresolve(handle);\n\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclass ManageExtensionAction extends Action {\n\t\t\t\tconstructor(id: ExtensionIdentifier, label: string, commandService: ICommandService) {\n\t\t\t\t\tsuper(id.value, label, undefined, true, () => {\n\t\t\t\t\t\treturn commandService.executeCommand('_extensions.manage', id.value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcommands.forEach(command => {\n\t\t\t\tprimaryActions.push(new MessageItemAction('_extension_message_handle_' + command.handle, command.title, command.handle));\n\t\t\t});\n\n\t\t\tlet source: string | undefined;\n\t\t\tif (extension) {\n\t\t\t\tsource = nls.localize('extensionSource', \"{0} (Extension)\", extension.displayName || extension.name);\n\t\t\t}\n\n\t\t\tif (!source) {\n\t\t\t\tsource = nls.localize('defaultSource', \"Extension\");\n\t\t\t}\n\n\t\t\tconst secondaryActions: IAction[] = [];\n\t\t\tif (extension && !extension.isUnderDevelopment) {\n\t\t\t\tsecondaryActions.push(new ManageExtensionAction(extension.identifier, nls.localize('manageExtension', \"Manage Extension\"), this._commandService));\n\t\t\t}\n\n\t\t\tconst messageHandle = this._notificationService.notify({\n\t\t\t\tseverity,\n\t\t\t\tmessage,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tsource\n\t\t\t});\n\n\t\t\t// if promise has not been resolved yet, now is the time to ensure a return value\n\t\t\t// otherwise if already resolved it means the user clicked one of the buttons\n\t\t\tEvent.once(messageHandle.onDidClose)(() => {\n\t\t\t\tdispose(...primaryActions, ...secondaryActions);\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _showModalMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Promise<number | undefined> {\n\t\tlet cancelId: number | undefined = undefined;\n\n\t\tconst buttons = commands.map((command, index) => {\n\t\t\tif (command.isCloseAffordance === true) {\n\t\t\t\tcancelId = index;\n\t\t\t}\n\n\t\t\treturn command.title;\n\t\t});\n\n\t\tif (cancelId === undefined) {\n\t\t\tif (buttons.length > 0) {\n\t\t\t\tbuttons.push(nls.localize('cancel', \"Cancel\"));\n\t\t\t} else {\n\t\t\t\tbuttons.push(nls.localize('ok', \"OK\"));\n\t\t\t}\n\n\t\t\tcancelId = buttons.length - 1;\n\t\t}\n\n\t\treturn this._dialogService.show(severity, message, buttons, { cancelId })\n\t\t\t.then(result => result === commands.length ? undefined : commands[result].handle);\n\t}\n}\n"]}]}