{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-browser/ipc.electron-browser.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/parts/ipc/common/ipc\", \"vs/base/parts/ipc/node/ipc.electron\", \"electron\", \"vs/base/common/buffer\"], function (require, exports, event_1, ipc_1, ipc_electron_1, electron_1, buffer_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Client extends ipc_1.IPCClient {\n        static createProtocol() {\n            const onMessage = event_1.Event.fromNodeEventEmitter(electron_1.ipcRenderer, 'ipc:message', (_, message) => buffer_1.VSBuffer.wrap(message));\n            electron_1.ipcRenderer.send('ipc:hello');\n            return new ipc_electron_1.Protocol(electron_1.ipcRenderer, onMessage);\n        }\n        constructor(id) {\n            const protocol = Client.createProtocol();\n            super(protocol, id);\n            this.protocol = protocol;\n        }\n        dispose() {\n            this.protocol.dispose();\n        }\n    }\n    exports.Client = Client;\n});\n",null]}