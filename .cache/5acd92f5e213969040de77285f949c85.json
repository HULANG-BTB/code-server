{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"vs/workbench/services/files/node/watcher/common\");\nvar csharpWatcherService_1 = require(\"vs/workbench/services/files/node/watcher/win32/csharpWatcherService\");\nvar path_1 = require(\"vs/base/common/path\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar network_1 = require(\"vs/base/common/network\");\nvar FileWatcher = /** @class */ (function () {\n    function FileWatcher(contextService, ignored, onFileChanges, errorLogger, verboseLogging) {\n        this.contextService = contextService;\n        this.ignored = ignored;\n        this.onFileChanges = onFileChanges;\n        this.errorLogger = errorLogger;\n        this.verboseLogging = verboseLogging;\n    }\n    FileWatcher.prototype.startWatching = function () {\n        var _this = this;\n        if (this.contextService.getWorkspace().folders[0].uri.scheme !== network_1.Schemas.file) {\n            return function () { };\n        }\n        var basePath = path_1.normalize(this.contextService.getWorkspace().folders[0].uri.fsPath);\n        if (basePath && basePath.indexOf('\\\\\\\\') === 0 && strings_1.endsWith(basePath, path_1.posix.sep)) {\n            // for some weird reason, node adds a trailing slash to UNC paths\n            // we never ever want trailing slashes as our base path unless\n            // someone opens root (\"/\").\n            // See also https://github.com/nodejs/io.js/issues/1765\n            basePath = strings_1.rtrim(basePath, path_1.posix.sep);\n        }\n        var watcher = new csharpWatcherService_1.OutOfProcessWin32FolderWatcher(basePath, this.ignored, function (events) { return _this.onRawFileEvents(events); }, function (error) { return _this.onError(error); }, this.verboseLogging);\n        return function () {\n            _this.isDisposed = true;\n            watcher.dispose();\n        };\n    };\n    FileWatcher.prototype.onRawFileEvents = function (events) {\n        if (this.isDisposed) {\n            return;\n        }\n        // Emit through event emitter\n        if (events.length > 0) {\n            this.onFileChanges(common_1.toFileChangesEvent(events));\n        }\n    };\n    FileWatcher.prototype.onError = function (error) {\n        if (!this.isDisposed) {\n            this.errorLogger(error);\n        }\n    };\n    return FileWatcher;\n}());\nexports.FileWatcher = FileWatcher;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/win32/watcherService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,0EAAqG;AACrG,4GAAqH;AAGrH,4CAAuD;AACvD,kDAAyD;AACzD,kDAAiD;AAEjD;IAGC,qBACS,cAAwC,EACxC,OAAiB,EACjB,aAAkD,EAClD,WAAkC,EAClC,cAAuB;QAJvB,mBAAc,GAAd,cAAc,CAA0B;QACxC,YAAO,GAAP,OAAO,CAAU;QACjB,kBAAa,GAAb,aAAa,CAAqC;QAClD,gBAAW,GAAX,WAAW,CAAuB;QAClC,mBAAc,GAAd,cAAc,CAAS;IAEhC,CAAC;IAEM,mCAAa,GAApB;QAAA,iBA0BC;QAzBA,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;YAC9E,OAAO,cAAQ,CAAC,CAAC;SACjB;QACD,IAAI,QAAQ,GAAW,gBAAS,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE3F,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,kBAAQ,CAAC,QAAQ,EAAE,YAAK,CAAC,GAAG,CAAC,EAAE;YAChF,iEAAiE;YACjE,8DAA8D;YAC9D,4BAA4B;YAC5B,uDAAuD;YACvD,QAAQ,GAAG,eAAK,CAAC,QAAQ,EAAE,YAAK,CAAC,GAAG,CAAC,CAAC;SACtC;QAED,IAAM,OAAO,GAAG,IAAI,qDAA8B,CACjD,QAAQ,EACR,IAAI,CAAC,OAAO,EACZ,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAA5B,CAA4B,EACtC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAnB,CAAmB,EAC5B,IAAI,CAAC,cAAc,CACnB,CAAC;QAEF,OAAO;YACN,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,OAAO,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC;IACH,CAAC;IAEO,qCAAe,GAAvB,UAAwB,MAAwB;QAC/C,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACP;QAED,6BAA6B;QAC7B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,2BAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;SAC/C;IACF,CAAC;IAEO,6BAAO,GAAf,UAAgB,KAAa;QAC5B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACxB;IACF,CAAC;IACF,kBAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRawFileChange, toFileChangesEvent } from 'vs/workbench/services/files/node/watcher/common';\nimport { OutOfProcessWin32FolderWatcher } from 'vs/workbench/services/files/node/watcher/win32/csharpWatcherService';\nimport { FileChangesEvent } from 'vs/platform/files/common/files';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { normalize, posix } from 'vs/base/common/path';\nimport { rtrim, endsWith } from 'vs/base/common/strings';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class FileWatcher {\n\tprivate isDisposed: boolean;\n\n\tconstructor(\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate ignored: string[],\n\t\tprivate onFileChanges: (changes: FileChangesEvent) => void,\n\t\tprivate errorLogger: (msg: string) => void,\n\t\tprivate verboseLogging: boolean\n\t) {\n\t}\n\n\tpublic startWatching(): () => void {\n\t\tif (this.contextService.getWorkspace().folders[0].uri.scheme !== Schemas.file) {\n\t\t\treturn () => { };\n\t\t}\n\t\tlet basePath: string = normalize(this.contextService.getWorkspace().folders[0].uri.fsPath);\n\n\t\tif (basePath && basePath.indexOf('\\\\\\\\') === 0 && endsWith(basePath, posix.sep)) {\n\t\t\t// for some weird reason, node adds a trailing slash to UNC paths\n\t\t\t// we never ever want trailing slashes as our base path unless\n\t\t\t// someone opens root (\"/\").\n\t\t\t// See also https://github.com/nodejs/io.js/issues/1765\n\t\t\tbasePath = rtrim(basePath, posix.sep);\n\t\t}\n\n\t\tconst watcher = new OutOfProcessWin32FolderWatcher(\n\t\t\tbasePath,\n\t\t\tthis.ignored,\n\t\t\tevents => this.onRawFileEvents(events),\n\t\t\terror => this.onError(error),\n\t\t\tthis.verboseLogging\n\t\t);\n\n\t\treturn () => {\n\t\t\tthis.isDisposed = true;\n\t\t\twatcher.dispose();\n\t\t};\n\t}\n\n\tprivate onRawFileEvents(events: IRawFileChange[]): void {\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Emit through event emitter\n\t\tif (events.length > 0) {\n\t\t\tthis.onFileChanges(toFileChangesEvent(events));\n\t\t}\n\t}\n\n\tprivate onError(error: string): void {\n\t\tif (!this.isDisposed) {\n\t\t\tthis.errorLogger(error);\n\t\t}\n\t}\n}"]}]}