{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/common/commentModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/common/commentModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar nls_1 = require(\"vs/nls\");\nvar map_1 = require(\"vs/base/common/map\");\nvar CommentNode = /** @class */ (function () {\n    function CommentNode(threadId, resource, comment, range) {\n        this.replies = [];\n        this.threadId = threadId;\n        this.comment = comment;\n        this.resource = resource;\n        this.range = range;\n    }\n    CommentNode.prototype.hasReply = function () {\n        return this.replies && this.replies.length !== 0;\n    };\n    return CommentNode;\n}());\nexports.CommentNode = CommentNode;\nvar ResourceWithCommentThreads = /** @class */ (function () {\n    function ResourceWithCommentThreads(resource, commentThreads) {\n        this.id = resource.toString();\n        this.resource = resource;\n        this.commentThreads = commentThreads.filter(function (thread) { return thread.comments.length; }).map(function (thread) { return ResourceWithCommentThreads.createCommentNode(resource, thread); });\n    }\n    ResourceWithCommentThreads.createCommentNode = function (resource, commentThread) {\n        var threadId = commentThread.threadId, comments = commentThread.comments, range = commentThread.range;\n        var commentNodes = comments.map(function (comment) { return new CommentNode(threadId, resource, comment, range); });\n        if (commentNodes.length > 1) {\n            commentNodes[0].replies = commentNodes.slice(1, commentNodes.length);\n        }\n        return commentNodes[0];\n    };\n    return ResourceWithCommentThreads;\n}());\nexports.ResourceWithCommentThreads = ResourceWithCommentThreads;\nvar CommentsModel = /** @class */ (function () {\n    function CommentsModel() {\n        this.resourceCommentThreads = [];\n        this.commentThreadsMap = new Map();\n    }\n    CommentsModel.prototype.setCommentThreads = function (owner, commentThreads) {\n        this.commentThreadsMap.set(owner, this.groupByResource(commentThreads));\n        this.resourceCommentThreads = arrays_1.flatten(map_1.values(this.commentThreadsMap));\n    };\n    CommentsModel.prototype.updateCommentThreads = function (event) {\n        var owner = event.owner, removed = event.removed, changed = event.changed, added = event.added;\n        var threadsForOwner = this.commentThreadsMap.get(owner) || [];\n        removed.forEach(function (thread) {\n            // Find resource that has the comment thread\n            var matchingResourceIndex = arrays_1.firstIndex(threadsForOwner, function (resourceData) { return resourceData.id === thread.resource; });\n            var matchingResourceData = threadsForOwner[matchingResourceIndex];\n            // Find comment node on resource that is that thread and remove it\n            var index = arrays_1.firstIndex(matchingResourceData.commentThreads, function (commentThread) { return commentThread.threadId === thread.threadId; });\n            matchingResourceData.commentThreads.splice(index, 1);\n            // If the comment thread was the last thread for a resource, remove that resource from the list\n            if (matchingResourceData.commentThreads.length === 0) {\n                threadsForOwner.splice(matchingResourceIndex, 1);\n            }\n        });\n        changed.forEach(function (thread) {\n            // Find resource that has the comment thread\n            var matchingResourceIndex = arrays_1.firstIndex(threadsForOwner, function (resourceData) { return resourceData.id === thread.resource; });\n            var matchingResourceData = threadsForOwner[matchingResourceIndex];\n            // Find comment node on resource that is that thread and replace it\n            var index = arrays_1.firstIndex(matchingResourceData.commentThreads, function (commentThread) { return commentThread.threadId === thread.threadId; });\n            if (index >= 0) {\n                matchingResourceData.commentThreads[index] = ResourceWithCommentThreads.createCommentNode(uri_1.URI.parse(matchingResourceData.id), thread);\n            }\n            else {\n                matchingResourceData.commentThreads.push(ResourceWithCommentThreads.createCommentNode(uri_1.URI.parse(matchingResourceData.id), thread));\n            }\n        });\n        added.forEach(function (thread) {\n            var existingResource = threadsForOwner.filter(function (resourceWithThreads) { return resourceWithThreads.resource.toString() === thread.resource; });\n            if (existingResource.length) {\n                var resource = existingResource[0];\n                if (thread.comments.length) {\n                    resource.commentThreads.push(ResourceWithCommentThreads.createCommentNode(resource.resource, thread));\n                }\n            }\n            else {\n                threadsForOwner.push(new ResourceWithCommentThreads(uri_1.URI.parse(thread.resource), [thread]));\n            }\n        });\n        this.commentThreadsMap.set(owner, threadsForOwner);\n        this.resourceCommentThreads = arrays_1.flatten(map_1.values(this.commentThreadsMap));\n        return removed.length > 0 || changed.length > 0 || added.length > 0;\n    };\n    CommentsModel.prototype.hasCommentThreads = function () {\n        return !!this.resourceCommentThreads.length;\n    };\n    CommentsModel.prototype.getMessage = function () {\n        if (!this.resourceCommentThreads.length) {\n            return nls_1.localize('noComments', \"There are no comments on this review.\");\n        }\n        else {\n            return '';\n        }\n    };\n    CommentsModel.prototype.groupByResource = function (commentThreads) {\n        var resourceCommentThreads = [];\n        var commentThreadsByResource = new Map();\n        for (var _i = 0, _a = arrays_1.groupBy(commentThreads, CommentsModel._compareURIs); _i < _a.length; _i++) {\n            var group = _a[_i];\n            commentThreadsByResource.set(group[0].resource, new ResourceWithCommentThreads(uri_1.URI.parse(group[0].resource), group));\n        }\n        commentThreadsByResource.forEach(function (v, i, m) {\n            resourceCommentThreads.push(v);\n        });\n        return resourceCommentThreads;\n    };\n    CommentsModel._compareURIs = function (a, b) {\n        var resourceA = a.resource.toString();\n        var resourceB = b.resource.toString();\n        if (resourceA < resourceB) {\n            return -1;\n        }\n        else if (resourceA > resourceB) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    return CommentsModel;\n}());\nexports.CommentsModel = CommentsModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/common/commentModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/common/commentModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { Comment, CommentThread, CommentThreadChangedEvent } from 'vs/editor/common/modes';\nimport { groupBy, firstIndex, flatten } from 'vs/base/common/arrays';\nimport { localize } from 'vs/nls';\nimport { values } from 'vs/base/common/map';\n\nexport interface ICommentThreadChangedEvent extends CommentThreadChangedEvent {\n\towner: string;\n}\n\nexport class CommentNode {\n\tthreadId: string;\n\trange: IRange;\n\tcomment: Comment;\n\treplies: CommentNode[] = [];\n\tresource: URI;\n\n\tconstructor(threadId: string, resource: URI, comment: Comment, range: IRange) {\n\t\tthis.threadId = threadId;\n\t\tthis.comment = comment;\n\t\tthis.resource = resource;\n\t\tthis.range = range;\n\t}\n\n\thasReply(): boolean {\n\t\treturn this.replies && this.replies.length !== 0;\n\t}\n}\n\nexport class ResourceWithCommentThreads {\n\tid: string;\n\tcommentThreads: CommentNode[]; // The top level comments on the file. Replys are nested under each node.\n\tresource: URI;\n\n\tconstructor(resource: URI, commentThreads: CommentThread[]) {\n\t\tthis.id = resource.toString();\n\t\tthis.resource = resource;\n\t\tthis.commentThreads = commentThreads.filter(thread => thread.comments.length).map(thread => ResourceWithCommentThreads.createCommentNode(resource, thread));\n\t}\n\n\tpublic static createCommentNode(resource: URI, commentThread: CommentThread): CommentNode {\n\t\tconst { threadId, comments, range } = commentThread;\n\t\tconst commentNodes: CommentNode[] = comments.map(comment => new CommentNode(threadId!, resource, comment, range));\n\t\tif (commentNodes.length > 1) {\n\t\t\tcommentNodes[0].replies = commentNodes.slice(1, commentNodes.length);\n\t\t}\n\n\t\treturn commentNodes[0];\n\t}\n}\n\nexport class CommentsModel {\n\tresourceCommentThreads: ResourceWithCommentThreads[];\n\tcommentThreadsMap: Map<string, ResourceWithCommentThreads[]>;\n\n\tconstructor() {\n\t\tthis.resourceCommentThreads = [];\n\t\tthis.commentThreadsMap = new Map<string, ResourceWithCommentThreads[]>();\n\t}\n\n\tpublic setCommentThreads(owner: string, commentThreads: CommentThread[]): void {\n\t\tthis.commentThreadsMap.set(owner, this.groupByResource(commentThreads));\n\t\tthis.resourceCommentThreads = flatten(values(this.commentThreadsMap));\n\t}\n\n\tpublic updateCommentThreads(event: ICommentThreadChangedEvent): boolean {\n\t\tconst { owner, removed, changed, added } = event;\n\n\t\tlet threadsForOwner = this.commentThreadsMap.get(owner) || [];\n\n\t\tremoved.forEach(thread => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = firstIndex(threadsForOwner, (resourceData) => resourceData.id === thread.resource);\n\t\t\tconst matchingResourceData = threadsForOwner[matchingResourceIndex];\n\n\t\t\t// Find comment node on resource that is that thread and remove it\n\t\t\tconst index = firstIndex(matchingResourceData.commentThreads, (commentThread) => commentThread.threadId === thread.threadId);\n\t\t\tmatchingResourceData.commentThreads.splice(index, 1);\n\n\t\t\t// If the comment thread was the last thread for a resource, remove that resource from the list\n\t\t\tif (matchingResourceData.commentThreads.length === 0) {\n\t\t\t\tthreadsForOwner.splice(matchingResourceIndex, 1);\n\t\t\t}\n\t\t});\n\n\t\tchanged.forEach(thread => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = firstIndex(threadsForOwner, (resourceData) => resourceData.id === thread.resource);\n\t\t\tconst matchingResourceData = threadsForOwner[matchingResourceIndex];\n\n\t\t\t// Find comment node on resource that is that thread and replace it\n\t\t\tconst index = firstIndex(matchingResourceData.commentThreads, (commentThread) => commentThread.threadId === thread.threadId);\n\t\t\tif (index >= 0) {\n\t\t\t\tmatchingResourceData.commentThreads[index] = ResourceWithCommentThreads.createCommentNode(URI.parse(matchingResourceData.id), thread);\n\t\t\t} else {\n\t\t\t\tmatchingResourceData.commentThreads.push(ResourceWithCommentThreads.createCommentNode(URI.parse(matchingResourceData.id), thread));\n\t\t\t}\n\t\t});\n\n\t\tadded.forEach(thread => {\n\t\t\tconst existingResource = threadsForOwner.filter(resourceWithThreads => resourceWithThreads.resource.toString() === thread.resource);\n\t\t\tif (existingResource.length) {\n\t\t\t\tconst resource = existingResource[0];\n\t\t\t\tif (thread.comments.length) {\n\t\t\t\t\tresource.commentThreads.push(ResourceWithCommentThreads.createCommentNode(resource.resource, thread));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthreadsForOwner.push(new ResourceWithCommentThreads(URI.parse(thread.resource!), [thread]));\n\t\t\t}\n\t\t});\n\n\t\tthis.commentThreadsMap.set(owner, threadsForOwner);\n\t\tthis.resourceCommentThreads = flatten(values(this.commentThreadsMap));\n\n\t\treturn removed.length > 0 || changed.length > 0 || added.length > 0;\n\t}\n\n\tpublic hasCommentThreads(): boolean {\n\t\treturn !!this.resourceCommentThreads.length;\n\t}\n\n\tpublic getMessage(): string {\n\t\tif (!this.resourceCommentThreads.length) {\n\t\t\treturn localize('noComments', \"There are no comments on this review.\");\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate groupByResource(commentThreads: CommentThread[]): ResourceWithCommentThreads[] {\n\t\tconst resourceCommentThreads: ResourceWithCommentThreads[] = [];\n\t\tconst commentThreadsByResource = new Map<string, ResourceWithCommentThreads>();\n\t\tfor (const group of groupBy(commentThreads, CommentsModel._compareURIs)) {\n\t\t\tcommentThreadsByResource.set(group[0].resource!, new ResourceWithCommentThreads(URI.parse(group[0].resource!), group));\n\t\t}\n\n\t\tcommentThreadsByResource.forEach((v, i, m) => {\n\t\t\tresourceCommentThreads.push(v);\n\t\t});\n\n\t\treturn resourceCommentThreads;\n\t}\n\n\tprivate static _compareURIs(a: CommentThread, b: CommentThread) {\n\t\tconst resourceA = a.resource!.toString();\n\t\tconst resourceB = b.resource!.toString();\n\t\tif (resourceA < resourceB) {\n\t\t\treturn -1;\n\t\t} else if (resourceA > resourceB) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}"]}]}