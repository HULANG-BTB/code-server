{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/selection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/selection.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\"], function (require, exports, position_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The direction of a selection.\n     */\n    var SelectionDirection;\n    (function (SelectionDirection) {\n        /**\n         * The selection starts above where it ends.\n         */\n        SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\n        /**\n         * The selection starts below where it ends.\n         */\n        SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\n    })(SelectionDirection = exports.SelectionDirection || (exports.SelectionDirection = {}));\n    /**\n     * A selection in the editor.\n     * The selection is a range that has an orientation.\n     */\n    class Selection extends range_1.Range {\n        constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n            super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n            this.selectionStartLineNumber = selectionStartLineNumber;\n            this.selectionStartColumn = selectionStartColumn;\n            this.positionLineNumber = positionLineNumber;\n            this.positionColumn = positionColumn;\n        }\n        /**\n         * Clone this selection.\n         */\n        clone() {\n            return new Selection(this.selectionStartLineNumber, this.selectionStartColumn, this.positionLineNumber, this.positionColumn);\n        }\n        /**\n         * Transform to a human-readable representation.\n         */\n        toString() {\n            return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n        }\n        /**\n         * Test if equals other selection.\n         */\n        equalsSelection(other) {\n            return (Selection.selectionsEqual(this, other));\n        }\n        /**\n         * Test if the two selections are equal.\n         */\n        static selectionsEqual(a, b) {\n            return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n                a.selectionStartColumn === b.selectionStartColumn &&\n                a.positionLineNumber === b.positionLineNumber &&\n                a.positionColumn === b.positionColumn);\n        }\n        /**\n         * Get directions (LTR or RTL).\n         */\n        getDirection() {\n            if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n                return SelectionDirection.LTR;\n            }\n            return SelectionDirection.RTL;\n        }\n        /**\n         * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n         */\n        setEndPosition(endLineNumber, endColumn) {\n            if (this.getDirection() === SelectionDirection.LTR) {\n                return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n            }\n            return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n        }\n        /**\n         * Get the position at `positionLineNumber` and `positionColumn`.\n         */\n        getPosition() {\n            return new position_1.Position(this.positionLineNumber, this.positionColumn);\n        }\n        /**\n         * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n         */\n        setStartPosition(startLineNumber, startColumn) {\n            if (this.getDirection() === SelectionDirection.LTR) {\n                return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n            }\n            return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n        }\n        // ----\n        /**\n         * Create a `Selection` from one or two positions\n         */\n        static fromPositions(start, end = start) {\n            return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n        /**\n         * Create a `Selection` from an `ISelection`.\n         */\n        static liftSelection(sel) {\n            return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n        }\n        /**\n         * `a` equals `b`.\n         */\n        static selectionsArrEqual(a, b) {\n            if (a && !b || !a && b) {\n                return false;\n            }\n            if (!a && !b) {\n                return true;\n            }\n            if (a.length !== b.length) {\n                return false;\n            }\n            for (let i = 0, len = a.length; i < len; i++) {\n                if (!this.selectionsEqual(a[i], b[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /**\n         * Test if `obj` is an `ISelection`.\n         */\n        static isISelection(obj) {\n            return (obj\n                && (typeof obj.selectionStartLineNumber === 'number')\n                && (typeof obj.selectionStartColumn === 'number')\n                && (typeof obj.positionLineNumber === 'number')\n                && (typeof obj.positionColumn === 'number'));\n        }\n        /**\n         * Create with a direction.\n         */\n        static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n            if (direction === SelectionDirection.LTR) {\n                return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n        }\n    }\n    exports.Selection = Selection;\n});\n",null]}