{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeData.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeData.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path_1 = require(\"vs/base/common/path\");\nvar Json = require(\"vs/base/common/json\");\nvar color_1 = require(\"vs/base/common/color\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar themeCompatibility_1 = require(\"vs/workbench/services/themes/browser/themeCompatibility\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar objects = require(\"vs/base/common/objects\");\nvar resources = require(\"vs/base/common/resources\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar jsonErrorMessages_1 = require(\"vs/base/common/jsonErrorMessages\");\nvar plistParser_1 = require(\"vs/workbench/services/themes/common/plistParser\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar colorRegistry = platform_1.Registry.as(colorRegistry_1.Extensions.ColorContribution);\nvar tokenGroupToScopesMap = {\n    comments: ['comment'],\n    strings: ['string'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nvar ColorThemeData = /** @class */ (function () {\n    function ColorThemeData(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    Object.defineProperty(ColorThemeData.prototype, \"tokenColors\", {\n        get: function () {\n            // Add the custom colors after the theme colors\n            // so that they will override them\n            return this.themeTokenColors.concat(this.customTokenColors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColorThemeData.prototype.getColor = function (colorId, useDefault) {\n        var color = this.customColorMap[colorId];\n        if (color) {\n            return color;\n        }\n        color = this.colorMap[colorId];\n        if (useDefault !== false && types.isUndefined(color)) {\n            color = this.getDefault(colorId);\n        }\n        return color;\n    };\n    ColorThemeData.prototype.getDefault = function (colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    };\n    ColorThemeData.prototype.defines = function (colorId) {\n        return this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n    };\n    ColorThemeData.prototype.setCustomColors = function (colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        var themeSpecificColors = colors[\"[\" + this.settingsId + \"]\"];\n        if (types.isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        if (this.themeTokenColors && this.themeTokenColors.length) {\n            updateDefaultRuleSettings(this.themeTokenColors[0], this);\n        }\n    };\n    ColorThemeData.prototype.overwriteCustomColors = function (colors) {\n        for (var id in colors) {\n            var colorVal = colors[id];\n            if (typeof colorVal === 'string') {\n                this.customColorMap[id] = color_1.Color.fromHex(colorVal);\n            }\n        }\n    };\n    ColorThemeData.prototype.setCustomTokenColors = function (customTokenColors) {\n        this.customTokenColors = [];\n        // first add the non-theme specific settings\n        this.addCustomTokenColors(customTokenColors);\n        // append theme specific settings. Last rules will win.\n        var themeSpecificTokenColors = customTokenColors[\"[\" + this.settingsId + \"]\"];\n        if (types.isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n    };\n    ColorThemeData.prototype.addCustomTokenColors = function (customTokenColors) {\n        // Put the general customizations such as comments, strings, etc. first so that\n        // they can be overridden by specific customizations like \"string.interpolated\"\n        for (var tokenGroup in tokenGroupToScopesMap) {\n            var value = customTokenColors[tokenGroup];\n            if (value) {\n                var settings = typeof value === 'string' ? { foreground: value } : value;\n                var scopes = tokenGroupToScopesMap[tokenGroup];\n                for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {\n                    var scope = scopes_1[_i];\n                    this.customTokenColors.push({ scope: scope, settings: settings });\n                }\n            }\n        }\n        // specific customizations\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (var _a = 0, _b = customTokenColors.textMateRules; _a < _b.length; _a++) {\n                var rule = _b[_a];\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n    };\n    ColorThemeData.prototype.ensureLoaded = function (fileService) {\n        return !this.isLoaded ? this.load(fileService) : Promise.resolve(undefined);\n    };\n    ColorThemeData.prototype.reload = function (fileService) {\n        return this.load(fileService);\n    };\n    ColorThemeData.prototype.load = function (fileService) {\n        var _this = this;\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        return _loadColorTheme(fileService, this.location, this.themeTokenColors, this.colorMap).then(function (_) {\n            _this.isLoaded = true;\n            _this.sanitizeTokenColors();\n        });\n    };\n    /**\n     * Place the default settings first and add the token-info rules\n     */\n    ColorThemeData.prototype.sanitizeTokenColors = function () {\n        var hasDefaultTokens = false;\n        var updatedTokenColors = [updateDefaultRuleSettings({ settings: {} }, this)];\n        this.themeTokenColors.forEach(function (rule) {\n            if (rule.scope && rule.settings) {\n                if (rule.scope === 'token.info-token') {\n                    hasDefaultTokens = true;\n                }\n                updatedTokenColors.push(rule);\n            }\n        });\n        if (!hasDefaultTokens) {\n            updatedTokenColors.push.apply(updatedTokenColors, defaultThemeColors[this.type]);\n        }\n        this.themeTokenColors = updatedTokenColors;\n    };\n    ColorThemeData.prototype.toStorageData = function () {\n        var colorMapData = {};\n        for (var key in this.colorMap) {\n            colorMapData[key] = color_1.Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        // no need to persist custom colors, they will be taken from the settings\n        return JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            selector: this.id.split(' ').join('.'),\n            themeTokenColors: this.themeTokenColors,\n            extensionData: this.extensionData,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n    };\n    ColorThemeData.prototype.hasEqualData = function (other) {\n        return objects.equals(this.colorMap, other.colorMap) && objects.equals(this.tokenColors, other.tokenColors);\n    };\n    Object.defineProperty(ColorThemeData.prototype, \"baseTheme\", {\n        get: function () {\n            return this.id.split(' ')[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorThemeData.prototype, \"type\", {\n        get: function () {\n            switch (this.baseTheme) {\n                case workbenchThemeService_1.VS_LIGHT_THEME: return 'light';\n                case workbenchThemeService_1.VS_HC_THEME: return 'hc';\n                default: return 'dark';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // constructors\n    ColorThemeData.createUnloadedTheme = function (id) {\n        var themeData = new ColorThemeData(id, '', '__' + id);\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [{ settings: {} }];\n        themeData.watch = false;\n        return themeData;\n    };\n    ColorThemeData.createLoadedEmptyTheme = function (id, settingsId) {\n        var themeData = new ColorThemeData(id, '', settingsId);\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [{ settings: {} }];\n        themeData.watch = false;\n        return themeData;\n    };\n    ColorThemeData.fromStorageData = function (input) {\n        try {\n            var data = JSON.parse(input);\n            var theme = new ColorThemeData('', '', '');\n            for (var key in data) {\n                switch (key) {\n                    case 'colorMap':\n                        var colorMapData = data[key];\n                        for (var id in colorMapData) {\n                            theme.colorMap[id] = color_1.Color.fromHex(colorMapData[id]);\n                        }\n                        break;\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'extensionData':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    };\n    ColorThemeData.fromExtensionTheme = function (theme, colorThemeLocation, extensionData) {\n        var baseTheme = theme['uiTheme'] || 'vs-dark';\n        var themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        var id = baseTheme + \" \" + themeSelector;\n        var label = theme.label || path_1.basename(theme.path);\n        var settingsId = theme.id || label;\n        var themeData = new ColorThemeData(id, label, settingsId);\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    };\n    return ColorThemeData;\n}());\nexports.ColorThemeData = ColorThemeData;\nfunction toCSSSelector(extensionId, path) {\n    if (strings_1.startsWith(path, './')) {\n        path = path.substr(2);\n    }\n    var str = extensionId + \"-\" + path;\n    //remove all characters that are not allowed in css\n    str = str.replace(/[^_\\-a-zA-Z0-9]/g, '-');\n    if (str.charAt(0).match(/[0-9\\-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nfunction _loadColorTheme(fileService, themeLocation, resultRules, resultColors) {\n    if (resources.extname(themeLocation) === '.json') {\n        return fileService.resolveContent(themeLocation, { encoding: 'utf8' }).then(function (content) {\n            var errors = [];\n            var contentValue = Json.parse(content.value.toString(), errors);\n            if (errors.length > 0) {\n                return Promise.reject(new Error(nls.localize('error.cannotparsejson', \"Problems parsing JSON theme file: {0}\", errors.map(function (e) { return jsonErrorMessages_1.getParseErrorMessage(e.error); }).join(', '))));\n            }\n            var includeCompletes = Promise.resolve(null);\n            if (contentValue.include) {\n                includeCompletes = _loadColorTheme(fileService, resources.joinPath(resources.dirname(themeLocation), contentValue.include), resultRules, resultColors);\n            }\n            return includeCompletes.then(function (_) {\n                if (Array.isArray(contentValue.settings)) {\n                    themeCompatibility_1.convertSettings(contentValue.settings, resultRules, resultColors);\n                    return null;\n                }\n                var colors = contentValue.colors;\n                if (colors) {\n                    if (typeof colors !== 'object') {\n                        return Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\", themeLocation.toString())));\n                    }\n                    // new JSON color themes format\n                    for (var colorId in colors) {\n                        var colorHex = colors[colorId];\n                        if (typeof colorHex === 'string') { // ignore colors tht are null\n                            resultColors[colorId] = color_1.Color.fromHex(colors[colorId]);\n                        }\n                    }\n                }\n                var tokenColors = contentValue.tokenColors;\n                if (tokenColors) {\n                    if (Array.isArray(tokenColors)) {\n                        resultRules.push.apply(resultRules, tokenColors);\n                        return null;\n                    }\n                    else if (typeof tokenColors === 'string') {\n                        return _loadSyntaxTokens(fileService, resources.joinPath(resources.dirname(themeLocation), tokenColors), resultRules, {});\n                    }\n                    else {\n                        return Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\", themeLocation.toString())));\n                    }\n                }\n                return null;\n            });\n        });\n    }\n    else {\n        return _loadSyntaxTokens(fileService, themeLocation, resultRules, resultColors);\n    }\n}\nfunction _loadSyntaxTokens(fileService, themeLocation, resultRules, resultColors) {\n    return fileService.resolveContent(themeLocation, { encoding: 'utf8' }).then(function (content) {\n        try {\n            var contentValue = plistParser_1.parse(content.value.toString());\n            var settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(new Error(nls.localize('error.plist.invalidformat', \"Problem parsing tmTheme file: {0}. 'settings' is not array.\")));\n            }\n            themeCompatibility_1.convertSettings(settings, resultRules, resultColors);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(new Error(nls.localize('error.cannotparse', \"Problems parsing tmTheme file: {0}\", e.message)));\n        }\n    }, function (error) {\n        return Promise.reject(new Error(nls.localize('error.cannotload', \"Problems loading tmTheme file {0}: {1}\", themeLocation.toString(), error.message)));\n    });\n}\nfunction updateDefaultRuleSettings(defaultRule, theme) {\n    var foreground = theme.getColor(colorRegistry_1.editorForeground) || theme.getDefault(colorRegistry_1.editorForeground);\n    var background = theme.getColor(colorRegistry_1.editorBackground) || theme.getDefault(colorRegistry_1.editorBackground);\n    defaultRule.settings.foreground = color_1.Color.Format.CSS.formatHexA(foreground);\n    defaultRule.settings.background = color_1.Color.Format.CSS.formatHexA(background);\n    return defaultRule;\n}\nvar defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hc': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeData.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeData.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename } from 'vs/base/common/path';\nimport * as Json from 'vs/base/common/json';\nimport { Color } from 'vs/base/common/color';\nimport { ExtensionData, ITokenColorCustomizations, ITokenColorizationRule, IColorTheme, IColorMap, IThemeExtensionPoint, VS_LIGHT_THEME, VS_HC_THEME } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { convertSettings } from 'vs/workbench/services/themes/browser/themeCompatibility';\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport * as objects from 'vs/base/common/objects';\nimport * as resources from 'vs/base/common/resources';\nimport { Extensions, IColorRegistry, ColorIdentifier, editorBackground, editorForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { ThemeType } from 'vs/platform/theme/common/themeService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IColorCustomizations } from 'vs/workbench/services/themes/browser/workbenchThemeService';\nimport { getParseErrorMessage } from 'vs/base/common/jsonErrorMessages';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { parse as parsePList } from 'vs/workbench/services/themes/common/plistParser';\nimport { startsWith } from 'vs/base/common/strings';\n\nlet colorRegistry = Registry.as<IColorRegistry>(Extensions.ColorContribution);\n\nconst tokenGroupToScopesMap: { [setting: string]: string[] } = {\n\tcomments: ['comment'],\n\tstrings: ['string'],\n\tkeywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n\tnumbers: ['constant.numeric'],\n\ttypes: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n\tfunctions: ['entity.name.function', 'support.function'],\n\tvariables: ['variable', 'entity.name.variable']\n};\n\nexport class ColorThemeData implements IColorTheme {\n\n\tid: string;\n\tlabel: string;\n\tsettingsId: string;\n\tdescription?: string;\n\tisLoaded: boolean;\n\tlocation?: URI;\n\twatch?: boolean;\n\textensionData?: ExtensionData;\n\n\tprivate themeTokenColors: ITokenColorizationRule[] = [];\n\tprivate customTokenColors: ITokenColorizationRule[] = [];\n\tprivate colorMap: IColorMap = {};\n\tprivate customColorMap: IColorMap = {};\n\n\tprivate constructor(id: string, label: string, settingsId: string) {\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tthis.settingsId = settingsId;\n\t\tthis.isLoaded = false;\n\t}\n\n\tget tokenColors(): ITokenColorizationRule[] {\n\t\t// Add the custom colors after the theme colors\n\t\t// so that they will override them\n\t\treturn this.themeTokenColors.concat(this.customTokenColors);\n\t}\n\n\n\n\tpublic getColor(colorId: ColorIdentifier, useDefault?: boolean): Color | undefined {\n\t\tlet color: Color | undefined = this.customColorMap[colorId];\n\t\tif (color) {\n\t\t\treturn color;\n\t\t}\n\t\tcolor = this.colorMap[colorId];\n\t\tif (useDefault !== false && types.isUndefined(color)) {\n\t\t\tcolor = this.getDefault(colorId);\n\t\t}\n\t\treturn color;\n\t}\n\n\tpublic getDefault(colorId: ColorIdentifier): Color | undefined {\n\t\treturn colorRegistry.resolveDefaultColor(colorId, this);\n\t}\n\n\tpublic defines(colorId: ColorIdentifier): boolean {\n\t\treturn this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n\t}\n\n\tpublic setCustomColors(colors: IColorCustomizations) {\n\t\tthis.customColorMap = {};\n\t\tthis.overwriteCustomColors(colors);\n\n\t\tconst themeSpecificColors = colors[`[${this.settingsId}]`] as IColorCustomizations;\n\t\tif (types.isObject(themeSpecificColors)) {\n\t\t\tthis.overwriteCustomColors(themeSpecificColors);\n\t\t}\n\t\tif (this.themeTokenColors && this.themeTokenColors.length) {\n\t\t\tupdateDefaultRuleSettings(this.themeTokenColors[0], this);\n\t\t}\n\t}\n\n\tprivate overwriteCustomColors(colors: IColorCustomizations) {\n\t\tfor (let id in colors) {\n\t\t\tlet colorVal = colors[id];\n\t\t\tif (typeof colorVal === 'string') {\n\t\t\t\tthis.customColorMap[id] = Color.fromHex(colorVal);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setCustomTokenColors(customTokenColors: ITokenColorCustomizations) {\n\t\tthis.customTokenColors = [];\n\t\t// first add the non-theme specific settings\n\t\tthis.addCustomTokenColors(customTokenColors);\n\n\t\t// append theme specific settings. Last rules will win.\n\t\tconst themeSpecificTokenColors = customTokenColors[`[${this.settingsId}]`] as ITokenColorCustomizations;\n\t\tif (types.isObject(themeSpecificTokenColors)) {\n\t\t\tthis.addCustomTokenColors(themeSpecificTokenColors);\n\t\t}\n\t}\n\n\tprivate addCustomTokenColors(customTokenColors: ITokenColorCustomizations) {\n\t\t// Put the general customizations such as comments, strings, etc. first so that\n\t\t// they can be overridden by specific customizations like \"string.interpolated\"\n\t\tfor (let tokenGroup in tokenGroupToScopesMap) {\n\t\t\tlet value = customTokenColors[tokenGroup];\n\t\t\tif (value) {\n\t\t\t\tlet settings = typeof value === 'string' ? { foreground: value } : value;\n\t\t\t\tlet scopes = tokenGroupToScopesMap[tokenGroup];\n\t\t\t\tfor (let scope of scopes) {\n\t\t\t\t\tthis.customTokenColors.push({ scope, settings });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// specific customizations\n\t\tif (Array.isArray(customTokenColors.textMateRules)) {\n\t\t\tfor (let rule of customTokenColors.textMateRules) {\n\t\t\t\tif (rule.scope && rule.settings) {\n\t\t\t\t\tthis.customTokenColors.push(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ensureLoaded(fileService: IFileService): Promise<void> {\n\t\treturn !this.isLoaded ? this.load(fileService) : Promise.resolve(undefined);\n\t}\n\n\tpublic reload(fileService: IFileService): Promise<void> {\n\t\treturn this.load(fileService);\n\t}\n\n\tprivate load(fileService: IFileService): Promise<void> {\n\t\tif (!this.location) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn _loadColorTheme(fileService, this.location, this.themeTokenColors, this.colorMap).then(_ => {\n\t\t\tthis.isLoaded = true;\n\t\t\tthis.sanitizeTokenColors();\n\t\t});\n\t}\n\n\t/**\n\t * Place the default settings first and add the token-info rules\n\t */\n\tprivate sanitizeTokenColors() {\n\t\tlet hasDefaultTokens = false;\n\t\tlet updatedTokenColors: ITokenColorizationRule[] = [updateDefaultRuleSettings({ settings: {} }, this)];\n\t\tthis.themeTokenColors.forEach(rule => {\n\t\t\tif (rule.scope && rule.settings) {\n\t\t\t\tif (rule.scope === 'token.info-token') {\n\t\t\t\t\thasDefaultTokens = true;\n\t\t\t\t}\n\t\t\t\tupdatedTokenColors.push(rule);\n\t\t\t}\n\t\t});\n\t\tif (!hasDefaultTokens) {\n\t\t\tupdatedTokenColors.push(...defaultThemeColors[this.type]);\n\t\t}\n\t\tthis.themeTokenColors = updatedTokenColors;\n\t}\n\n\ttoStorageData() {\n\t\tlet colorMapData = {};\n\t\tfor (let key in this.colorMap) {\n\t\t\tcolorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n\t\t}\n\t\t// no need to persist custom colors, they will be taken from the settings\n\t\treturn JSON.stringify({\n\t\t\tid: this.id,\n\t\t\tlabel: this.label,\n\t\t\tsettingsId: this.settingsId,\n\t\t\tselector: this.id.split(' ').join('.'), // to not break old clients\n\t\t\tthemeTokenColors: this.themeTokenColors,\n\t\t\textensionData: this.extensionData,\n\t\t\tcolorMap: colorMapData,\n\t\t\twatch: this.watch\n\t\t});\n\t}\n\n\thasEqualData(other: ColorThemeData) {\n\t\treturn objects.equals(this.colorMap, other.colorMap) && objects.equals(this.tokenColors, other.tokenColors);\n\t}\n\n\tget baseTheme(): string {\n\t\treturn this.id.split(' ')[0];\n\t}\n\n\tget type(): ThemeType {\n\t\tswitch (this.baseTheme) {\n\t\t\tcase VS_LIGHT_THEME: return 'light';\n\t\t\tcase VS_HC_THEME: return 'hc';\n\t\t\tdefault: return 'dark';\n\t\t}\n\t}\n\n\t// constructors\n\n\tstatic createUnloadedTheme(id: string): ColorThemeData {\n\t\tlet themeData = new ColorThemeData(id, '', '__' + id);\n\t\tthemeData.isLoaded = false;\n\t\tthemeData.themeTokenColors = [{ settings: {} }];\n\t\tthemeData.watch = false;\n\t\treturn themeData;\n\t}\n\n\tstatic createLoadedEmptyTheme(id: string, settingsId: string): ColorThemeData {\n\t\tlet themeData = new ColorThemeData(id, '', settingsId);\n\t\tthemeData.isLoaded = true;\n\t\tthemeData.themeTokenColors = [{ settings: {} }];\n\t\tthemeData.watch = false;\n\t\treturn themeData;\n\t}\n\n\tstatic fromStorageData(input: string): ColorThemeData | undefined {\n\t\ttry {\n\t\t\tlet data = JSON.parse(input);\n\t\t\tlet theme = new ColorThemeData('', '', '');\n\t\t\tfor (let key in data) {\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase 'colorMap':\n\t\t\t\t\t\tlet colorMapData = data[key];\n\t\t\t\t\t\tfor (let id in colorMapData) {\n\t\t\t\t\t\t\ttheme.colorMap[id] = Color.fromHex(colorMapData[id]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'themeTokenColors':\n\t\t\t\t\tcase 'id': case 'label': case 'settingsId': case 'extensionData': case 'watch':\n\t\t\t\t\t\ttheme[key] = data[key];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!theme.id || !theme.settingsId) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn theme;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tstatic fromExtensionTheme(theme: IThemeExtensionPoint, colorThemeLocation: URI, extensionData: ExtensionData): ColorThemeData {\n\t\tconst baseTheme: string = theme['uiTheme'] || 'vs-dark';\n\t\tconst themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n\t\tconst id = `${baseTheme} ${themeSelector}`;\n\t\tconst label = theme.label || basename(theme.path);\n\t\tconst settingsId = theme.id || label;\n\t\tconst themeData = new ColorThemeData(id, label, settingsId);\n\t\tthemeData.description = theme.description;\n\t\tthemeData.watch = theme._watch === true;\n\t\tthemeData.location = colorThemeLocation;\n\t\tthemeData.extensionData = extensionData;\n\t\tthemeData.isLoaded = false;\n\t\treturn themeData;\n\t}\n}\n\nfunction toCSSSelector(extensionId: string, path: string) {\n\tif (startsWith(path, './')) {\n\t\tpath = path.substr(2);\n\t}\n\tlet str = `${extensionId}-${path}`;\n\n\t//remove all characters that are not allowed in css\n\tstr = str.replace(/[^_\\-a-zA-Z0-9]/g, '-');\n\tif (str.charAt(0).match(/[0-9\\-]/)) {\n\t\tstr = '_' + str;\n\t}\n\treturn str;\n}\n\nfunction _loadColorTheme(fileService: IFileService, themeLocation: URI, resultRules: ITokenColorizationRule[], resultColors: IColorMap): Promise<any> {\n\tif (resources.extname(themeLocation) === '.json') {\n\t\treturn fileService.resolveContent(themeLocation, { encoding: 'utf8' }).then(content => {\n\t\t\tlet errors: Json.ParseError[] = [];\n\t\t\tlet contentValue = Json.parse(content.value.toString(), errors);\n\t\t\tif (errors.length > 0) {\n\t\t\t\treturn Promise.reject(new Error(nls.localize('error.cannotparsejson', \"Problems parsing JSON theme file: {0}\", errors.map(e => getParseErrorMessage(e.error)).join(', '))));\n\t\t\t}\n\t\t\tlet includeCompletes: Promise<any> = Promise.resolve(null);\n\t\t\tif (contentValue.include) {\n\t\t\t\tincludeCompletes = _loadColorTheme(fileService, resources.joinPath(resources.dirname(themeLocation), contentValue.include), resultRules, resultColors);\n\t\t\t}\n\t\t\treturn includeCompletes.then(_ => {\n\t\t\t\tif (Array.isArray(contentValue.settings)) {\n\t\t\t\t\tconvertSettings(contentValue.settings, resultRules, resultColors);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlet colors = contentValue.colors;\n\t\t\t\tif (colors) {\n\t\t\t\t\tif (typeof colors !== 'object') {\n\t\t\t\t\t\treturn Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\", themeLocation.toString())));\n\t\t\t\t\t}\n\t\t\t\t\t// new JSON color themes format\n\t\t\t\t\tfor (let colorId in colors) {\n\t\t\t\t\t\tlet colorHex = colors[colorId];\n\t\t\t\t\t\tif (typeof colorHex === 'string') { // ignore colors tht are null\n\t\t\t\t\t\t\tresultColors[colorId] = Color.fromHex(colors[colorId]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet tokenColors = contentValue.tokenColors;\n\t\t\t\tif (tokenColors) {\n\t\t\t\t\tif (Array.isArray(tokenColors)) {\n\t\t\t\t\t\tresultRules.push(...tokenColors);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else if (typeof tokenColors === 'string') {\n\t\t\t\t\t\treturn _loadSyntaxTokens(fileService, resources.joinPath(resources.dirname(themeLocation), tokenColors), resultRules, {});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\", themeLocation.toString())));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t});\n\t} else {\n\t\treturn _loadSyntaxTokens(fileService, themeLocation, resultRules, resultColors);\n\t}\n}\n\nfunction _loadSyntaxTokens(fileService: IFileService, themeLocation: URI, resultRules: ITokenColorizationRule[], resultColors: IColorMap): Promise<any> {\n\treturn fileService.resolveContent(themeLocation, { encoding: 'utf8' }).then(content => {\n\t\ttry {\n\t\t\tlet contentValue = parsePList(content.value.toString());\n\t\t\tlet settings: ITokenColorizationRule[] = contentValue.settings;\n\t\t\tif (!Array.isArray(settings)) {\n\t\t\t\treturn Promise.reject(new Error(nls.localize('error.plist.invalidformat', \"Problem parsing tmTheme file: {0}. 'settings' is not array.\")));\n\t\t\t}\n\t\t\tconvertSettings(settings, resultRules, resultColors);\n\t\t\treturn Promise.resolve(null);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(new Error(nls.localize('error.cannotparse', \"Problems parsing tmTheme file: {0}\", e.message)));\n\t\t}\n\t}, error => {\n\t\treturn Promise.reject(new Error(nls.localize('error.cannotload', \"Problems loading tmTheme file {0}: {1}\", themeLocation.toString(), error.message)));\n\t});\n}\n\nfunction updateDefaultRuleSettings(defaultRule: ITokenColorizationRule, theme: ColorThemeData): ITokenColorizationRule {\n\tconst foreground = theme.getColor(editorForeground) || theme.getDefault(editorForeground)!;\n\tconst background = theme.getColor(editorBackground) || theme.getDefault(editorBackground)!;\n\tdefaultRule.settings.foreground = Color.Format.CSS.formatHexA(foreground);\n\tdefaultRule.settings.background = Color.Format.CSS.formatHexA(background);\n\treturn defaultRule;\n}\n\nlet defaultThemeColors: { [baseTheme: string]: ITokenColorizationRule[] } = {\n\t'light': [\n\t\t{ scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n\t\t{ scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n\t\t{ scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n\t\t{ scope: 'token.debug-token', settings: { foreground: '#800080' } }\n\t],\n\t'dark': [\n\t\t{ scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n\t\t{ scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n\t\t{ scope: 'token.error-token', settings: { foreground: '#f44747' } },\n\t\t{ scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n\t],\n\t'hc': [\n\t\t{ scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n\t\t{ scope: 'token.warn-token', settings: { foreground: '#008000' } },\n\t\t{ scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n\t\t{ scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n\t],\n};"]}]}