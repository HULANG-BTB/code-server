{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform = require(\"vs/platform/registry/common/platform\");\nvar event_1 = require(\"vs/base/common/event\");\nexports.IThemeService = instantiation_1.createDecorator('themeService');\nfunction themeColorFromId(id) {\n    return { id: id };\n}\nexports.themeColorFromId = themeColorFromId;\nexports.FileThemeIcon = { id: 'file' };\nexports.FolderThemeIcon = { id: 'folder' };\n// base themes\nexports.DARK = 'dark';\nexports.LIGHT = 'light';\nexports.HIGH_CONTRAST = 'hc';\nfunction getThemeTypeSelector(type) {\n    switch (type) {\n        case exports.DARK: return 'vs-dark';\n        case exports.HIGH_CONTRAST: return 'hc-black';\n        default: return 'vs';\n    }\n}\nexports.getThemeTypeSelector = getThemeTypeSelector;\n// static theming participant\nexports.Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nvar ThemingRegistry = /** @class */ (function () {\n    function ThemingRegistry() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new event_1.Emitter();\n    }\n    ThemingRegistry.prototype.onThemeChange = function (participant) {\n        var _this = this;\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return lifecycle_1.toDisposable(function () {\n            var idx = _this.themingParticipants.indexOf(participant);\n            _this.themingParticipants.splice(idx, 1);\n        });\n    };\n    Object.defineProperty(ThemingRegistry.prototype, \"onThemingParticipantAdded\", {\n        get: function () {\n            return this.onThemingParticipantAddedEmitter.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ThemingRegistry.prototype.getThemingParticipants = function () {\n        return this.themingParticipants;\n    };\n    return ThemingRegistry;\n}());\nvar themingRegistry = new ThemingRegistry();\nplatform.Registry.add(exports.Extensions.ThemingContribution, themingRegistry);\nfunction registerThemingParticipant(participant) {\n    return themingRegistry.onThemeChange(participant);\n}\nexports.registerThemingParticipant = registerThemingParticipant;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAEjF,sDAAqE;AACrE,+DAAiE;AAEjE,8CAAsD;AAGzC,QAAA,aAAa,GAAG,+BAAe,CAAgB,cAAc,CAAC,CAAC;AAM5E,SAAgB,gBAAgB,CAAC,EAAmB;IACnD,OAAO,EAAE,EAAE,IAAA,EAAE,CAAC;AACf,CAAC;AAFD,4CAEC;AAOY,QAAA,aAAa,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;AAC/B,QAAA,eAAe,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC;AAEhD,cAAc;AACD,QAAA,IAAI,GAAc,MAAM,CAAC;AACzB,QAAA,KAAK,GAAc,OAAO,CAAC;AAC3B,QAAA,aAAa,GAAc,IAAI,CAAC;AAG7C,SAAgB,oBAAoB,CAAC,IAAe;IACnD,QAAQ,IAAI,EAAE;QACb,KAAK,YAAI,CAAC,CAAC,OAAO,SAAS,CAAC;QAC5B,KAAK,qBAAa,CAAC,CAAC,OAAO,UAAU,CAAC;QACtC,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC;KACrB;AACF,CAAC;AAND,oDAMC;AA+CD,6BAA6B;AAChB,QAAA,UAAU,GAAG;IACzB,mBAAmB,EAAE,4BAA4B;CACjD,CAAC;AAcF;IAIC;QAHQ,wBAAmB,GAA0B,EAAE,CAAC;QAIvD,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,gCAAgC,GAAG,IAAI,eAAO,EAAuB,CAAC;IAC5E,CAAC;IAEM,uCAAa,GAApB,UAAqB,WAAgC;QAArD,iBAOC;QANA,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxD,OAAO,wBAAY,CAAC;YACnB,IAAM,GAAG,GAAG,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC1D,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,sBAAW,sDAAyB;aAApC;YACC,OAAO,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC;QACpD,CAAC;;;OAAA;IAEM,gDAAsB,GAA7B;QACC,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACjC,CAAC;IACF,sBAAC;AAAD,CAAC,AAzBD,IAyBC;AAED,IAAI,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;AAC5C,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;AAEvE,SAAgB,0BAA0B,CAAC,WAAgC;IAC1E,OAAO,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AACnD,CAAC;AAFD,gEAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Color } from 'vs/base/common/color';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/platform/registry/common/platform';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport const IThemeService = createDecorator<IThemeService>('themeService');\n\nexport interface ThemeColor {\n\tid: string;\n}\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\n// theme icon\nexport interface ThemeIcon {\n\treadonly id: string;\n}\n\nexport const FileThemeIcon = { id: 'file' };\nexport const FolderThemeIcon = { id: 'folder' };\n\n// base themes\nexport const DARK: ThemeType = 'dark';\nexport const LIGHT: ThemeType = 'light';\nexport const HIGH_CONTRAST: ThemeType = 'hc';\nexport type ThemeType = 'light' | 'dark' | 'hc';\n\nexport function getThemeTypeSelector(type: ThemeType): string {\n\tswitch (type) {\n\t\tcase DARK: return 'vs-dark';\n\t\tcase HIGH_CONTRAST: return 'hc-black';\n\t\tdefault: return 'vs';\n\t}\n}\n\nexport interface ITheme {\n\treadonly type: ThemeType;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n}\n\nexport interface IIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(theme: ITheme, collector: ICssStyleCollector, environment: IEnvironmentService): void;\n}\n\nexport interface IThemeService {\n\t_serviceBrand: any;\n\n\tgetTheme(): ITheme;\n\n\treadonly onThemeChange: Event<ITheme>;\n\n\tgetIconTheme(): IIconTheme;\n\n\treadonly onIconThemeChange: Event<IIconTheme>;\n\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: 'base.contributions.theming'\n};\n\nexport interface IThemingRegistry {\n\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter = new Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nlet themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(participant: IThemingParticipant): IDisposable {\n\treturn themingRegistry.onThemeChange(participant);\n}\n"]}]}