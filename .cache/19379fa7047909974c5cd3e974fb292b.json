{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar scanCode_1 = require(\"vs/base/common/scanCode\");\nvar KeybindingParser = /** @class */ (function () {\n    function KeybindingParser() {\n    }\n    KeybindingParser._readModifiers = function (input) {\n        input = input.toLowerCase().trim();\n        var ctrl = false;\n        var shift = false;\n        var alt = false;\n        var meta = false;\n        var matchedModifier;\n        do {\n            matchedModifier = false;\n            if (/^ctrl(\\+|\\-)/.test(input)) {\n                ctrl = true;\n                input = input.substr('ctrl-'.length);\n                matchedModifier = true;\n            }\n            if (/^shift(\\+|\\-)/.test(input)) {\n                shift = true;\n                input = input.substr('shift-'.length);\n                matchedModifier = true;\n            }\n            if (/^alt(\\+|\\-)/.test(input)) {\n                alt = true;\n                input = input.substr('alt-'.length);\n                matchedModifier = true;\n            }\n            if (/^meta(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('meta-'.length);\n                matchedModifier = true;\n            }\n            if (/^win(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('win-'.length);\n                matchedModifier = true;\n            }\n            if (/^cmd(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('cmd-'.length);\n                matchedModifier = true;\n            }\n        } while (matchedModifier);\n        var key;\n        var firstSpaceIdx = input.indexOf(' ');\n        if (firstSpaceIdx > 0) {\n            key = input.substring(0, firstSpaceIdx);\n            input = input.substring(firstSpaceIdx);\n        }\n        else {\n            key = input;\n            input = '';\n        }\n        return {\n            remains: input,\n            ctrl: ctrl,\n            shift: shift,\n            alt: alt,\n            meta: meta,\n            key: key\n        };\n    };\n    KeybindingParser.parseSimpleKeybinding = function (input) {\n        var mods = this._readModifiers(input);\n        var keyCode = keyCodes_1.KeyCodeUtils.fromUserSettings(mods.key);\n        return [new keyCodes_1.SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n    };\n    KeybindingParser.parseKeybinding = function (input, OS) {\n        var _a;\n        if (!input) {\n            return null;\n        }\n        var parts = [];\n        var part;\n        do {\n            _a = this.parseSimpleKeybinding(input), part = _a[0], input = _a[1];\n            parts.push(part);\n        } while (input.length > 0);\n        return new keyCodes_1.ChordKeybinding(parts);\n    };\n    KeybindingParser.parseSimpleUserBinding = function (input) {\n        var mods = this._readModifiers(input);\n        var scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n        if (scanCodeMatch) {\n            var strScanCode = scanCodeMatch[1];\n            var scanCode = scanCode_1.ScanCodeUtils.lowerCaseToEnum(strScanCode);\n            return [new scanCode_1.ScanCodeBinding(mods.ctrl, mods.shift, mods.alt, mods.meta, scanCode), mods.remains];\n        }\n        var keyCode = keyCodes_1.KeyCodeUtils.fromUserSettings(mods.key);\n        return [new keyCodes_1.SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n    };\n    KeybindingParser.parseUserBinding = function (input) {\n        var _a;\n        if (!input) {\n            return [];\n        }\n        var parts = [];\n        var part;\n        while (input.length > 0) {\n            _a = this.parseSimpleUserBinding(input), part = _a[0], input = _a[1];\n            parts.push(part);\n        }\n        return parts;\n    };\n    return KeybindingParser;\n}());\nexports.KeybindingParser = KeybindingParser;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/keybindingParser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChordKeybinding, KeyCodeUtils, Keybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { ScanCodeBinding, ScanCodeUtils } from 'vs/base/common/scanCode';\n\nexport class KeybindingParser {\n\n\tprivate static _readModifiers(input: string) {\n\t\tinput = input.toLowerCase().trim();\n\n\t\tlet ctrl = false;\n\t\tlet shift = false;\n\t\tlet alt = false;\n\t\tlet meta = false;\n\n\t\tlet matchedModifier: boolean;\n\n\t\tdo {\n\t\t\tmatchedModifier = false;\n\t\t\tif (/^ctrl(\\+|\\-)/.test(input)) {\n\t\t\t\tctrl = true;\n\t\t\t\tinput = input.substr('ctrl-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^shift(\\+|\\-)/.test(input)) {\n\t\t\t\tshift = true;\n\t\t\t\tinput = input.substr('shift-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^alt(\\+|\\-)/.test(input)) {\n\t\t\t\talt = true;\n\t\t\t\tinput = input.substr('alt-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^meta(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('meta-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^win(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('win-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^cmd(\\+|\\-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr('cmd-'.length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t} while (matchedModifier);\n\n\t\tlet key: string;\n\n\t\tconst firstSpaceIdx = input.indexOf(' ');\n\t\tif (firstSpaceIdx > 0) {\n\t\t\tkey = input.substring(0, firstSpaceIdx);\n\t\t\tinput = input.substring(firstSpaceIdx);\n\t\t} else {\n\t\t\tkey = input;\n\t\t\tinput = '';\n\t\t}\n\n\t\treturn {\n\t\t\tremains: input,\n\t\t\tctrl,\n\t\t\tshift,\n\t\t\talt,\n\t\t\tmeta,\n\t\t\tkey\n\t\t};\n\t}\n\n\tprivate static parseSimpleKeybinding(input: string): [SimpleKeybinding, string] {\n\t\tconst mods = this._readModifiers(input);\n\t\tconst keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n\t\treturn [new SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n\t}\n\n\tpublic static parseKeybinding(input: string, OS: OperatingSystem): Keybinding | null {\n\t\tif (!input) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst parts: SimpleKeybinding[] = [];\n\t\tlet part: SimpleKeybinding;\n\n\t\tdo {\n\t\t\t[part, input] = this.parseSimpleKeybinding(input);\n\t\t\tparts.push(part);\n\t\t} while (input.length > 0);\n\t\treturn new ChordKeybinding(parts);\n\t}\n\n\tprivate static parseSimpleUserBinding(input: string): [SimpleKeybinding | ScanCodeBinding, string] {\n\t\tconst mods = this._readModifiers(input);\n\t\tconst scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n\t\tif (scanCodeMatch) {\n\t\t\tconst strScanCode = scanCodeMatch[1];\n\t\t\tconst scanCode = ScanCodeUtils.lowerCaseToEnum(strScanCode);\n\t\t\treturn [new ScanCodeBinding(mods.ctrl, mods.shift, mods.alt, mods.meta, scanCode), mods.remains];\n\t\t}\n\t\tconst keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n\t\treturn [new SimpleKeybinding(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode), mods.remains];\n\t}\n\n\tstatic parseUserBinding(input: string): (SimpleKeybinding | ScanCodeBinding)[] {\n\t\tif (!input) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst parts: (SimpleKeybinding | ScanCodeBinding)[] = [];\n\t\tlet part: SimpleKeybinding | ScanCodeBinding;\n\n\t\twhile (input.length > 0) {\n\t\t\t[part, input] = this.parseSimpleUserBinding(input);\n\t\t\tparts.push(part);\n\t\t}\n\t\treturn parts;\n\t}\n}"]}]}