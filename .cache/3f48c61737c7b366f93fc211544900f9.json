{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConsole.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConsole.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar console_1 = require(\"vs/base/common/console\");\nvar extensionDevOptions_1 = require(\"vs/workbench/services/extensions/common/extensionDevOptions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar broadcast_1 = require(\"vs/workbench/services/broadcast/common/broadcast\");\nvar extensionHost_1 = require(\"vs/platform/extensions/common/extensionHost\");\nvar MainThreadConsole = /** @class */ (function () {\n    function MainThreadConsole(extHostContext, _environmentService, _windowsService, _broadcastService) {\n        this._environmentService = _environmentService;\n        this._windowsService = _windowsService;\n        this._broadcastService = _broadcastService;\n        var devOpts = extensionDevOptions_1.parseExtensionDevOptions(this._environmentService);\n        this._isExtensionDevHost = devOpts.isExtensionDevHost;\n        this._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n    }\n    MainThreadConsole.prototype.dispose = function () {\n        //\n    };\n    MainThreadConsole.prototype.$logExtensionHostMessage = function (entry) {\n        var _a;\n        // Send to local console unless we run tests from cli\n        if (!this._isExtensionDevTestFromCli) {\n            console_1.log(entry, 'Extension Host');\n        }\n        // Log on main side if running tests from cli\n        if (this._isExtensionDevTestFromCli) {\n            (_a = this._windowsService).log.apply(_a, [entry.severity].concat(console_1.parse(entry).args));\n        }\n        // Broadcast to other windows if we are in development mode\n        else if (!this._environmentService.isBuilt || this._isExtensionDevHost) {\n            this._broadcastService.broadcast({\n                channel: extensionHost_1.EXTENSION_LOG_BROADCAST_CHANNEL,\n                payload: {\n                    logEntry: entry,\n                    debugId: this._environmentService.debugExtensionHost.debugId\n                }\n            });\n        }\n    };\n    MainThreadConsole = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadConsole),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, windows_1.IWindowsService),\n        tslib_1.__param(3, broadcast_1.IBroadcastService)\n    ], MainThreadConsole);\n    return MainThreadConsole;\n}());\nexports.MainThreadConsole = MainThreadConsole;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConsole.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadConsole.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,6EAAgF;AAChF,6EAAgH;AAChH,0EAAiF;AACjF,kDAAuE;AACvE,mGAAuG;AACvG,8DAAqE;AACrE,8EAAqF;AACrF,6EAA8F;AAG9F;IAKC,2BACC,cAA+B,EACO,mBAAwC,EAC5C,eAAgC,EAC9B,iBAAoC;QAFlC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAC5C,oBAAe,GAAf,eAAe,CAAiB;QAC9B,sBAAiB,GAAjB,iBAAiB,CAAmB;QAExE,IAAM,OAAO,GAAG,8CAAwB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACtD,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,yBAAyB,CAAC;IACrE,CAAC;IAED,mCAAO,GAAP;QACC,EAAE;IACH,CAAC;IAED,oDAAwB,GAAxB,UAAyB,KAAwB;;QAChD,qDAAqD;QACrD,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;YACrC,aAAG,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;SAC7B;QAED,6CAA6C;QAC7C,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACpC,CAAA,KAAA,IAAI,CAAC,eAAe,CAAA,CAAC,GAAG,YAAC,KAAK,CAAC,QAAQ,SAAK,eAAK,CAAC,KAAK,CAAC,CAAC,IAAI,GAAE;SAC/D;QAED,2DAA2D;aACtD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,IAAI,IAAI,CAAC,mBAAmB,EAAE;YACvE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;gBAChC,OAAO,EAAE,+CAA+B;gBACxC,OAAO,EAAE;oBACR,QAAQ,EAAE,KAAK;oBACf,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO;iBAC5D;aACD,CAAC,CAAC;SACH;IACF,CAAC;IAzCW,iBAAiB;QAD7B,uCAAoB,CAAC,8BAAW,CAAC,iBAAiB,CAAC;QAQjD,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,yBAAe,CAAA;QACf,mBAAA,6BAAiB,CAAA;OATP,iBAAiB,CA0C7B;IAAD,wBAAC;CAAA,AA1CD,IA0CC;AA1CY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { MainContext, MainThreadConsoleShape, IExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteConsoleLog, log, parse } from 'vs/base/common/console';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IBroadcastService } from 'vs/workbench/services/broadcast/common/broadcast';\nimport { EXTENSION_LOG_BROADCAST_CHANNEL } from 'vs/platform/extensions/common/extensionHost';\n\n@extHostNamedCustomer(MainContext.MainThreadConsole)\nexport class MainThreadConsole implements MainThreadConsoleShape {\n\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IWindowsService private readonly _windowsService: IWindowsService,\n\t\t@IBroadcastService private readonly _broadcastService: IBroadcastService,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$logExtensionHostMessage(entry: IRemoteConsoleLog): void {\n\t\t// Send to local console unless we run tests from cli\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tlog(entry, 'Extension Host');\n\t\t}\n\n\t\t// Log on main side if running tests from cli\n\t\tif (this._isExtensionDevTestFromCli) {\n\t\t\tthis._windowsService.log(entry.severity, ...parse(entry).args);\n\t\t}\n\n\t\t// Broadcast to other windows if we are in development mode\n\t\telse if (!this._environmentService.isBuilt || this._isExtensionDevHost) {\n\t\t\tthis._broadcastService.broadcast({\n\t\t\t\tchannel: EXTENSION_LOG_BROADCAST_CHANNEL,\n\t\t\t\tpayload: {\n\t\t\t\t\tlogEntry: entry,\n\t\t\t\t\tdebugId: this._environmentService.debugExtensionHost.debugId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"]}]}