{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"vs/base/common/async\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar replaceCommand_1 = require(\"vs/editor/common/commands/replaceCommand\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar uint_1 = require(\"vs/editor/common/core/uint\");\nvar editorCommon = require(\"vs/editor/common/editorCommon\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar textModelSearch_1 = require(\"vs/editor/common/model/textModelSearch\");\nvar findDecorations_1 = require(\"vs/editor/contrib/find/findDecorations\");\nvar replaceAllCommand_1 = require(\"vs/editor/contrib/find/replaceAllCommand\");\nvar replacePattern_1 = require(\"vs/editor/contrib/find/replacePattern\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nexports.CONTEXT_FIND_WIDGET_VISIBLE = new contextkey_1.RawContextKey('findWidgetVisible', false);\nexports.CONTEXT_FIND_WIDGET_NOT_VISIBLE = exports.CONTEXT_FIND_WIDGET_VISIBLE.toNegated();\n// Keep ContextKey use of 'Focussed' to not break when clauses\nexports.CONTEXT_FIND_INPUT_FOCUSED = new contextkey_1.RawContextKey('findInputFocussed', false);\nexports.CONTEXT_REPLACE_INPUT_FOCUSED = new contextkey_1.RawContextKey('replaceInputFocussed', false);\nexports.ToggleCaseSensitiveKeybinding = {\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_C,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_C }\n};\nexports.ToggleWholeWordKeybinding = {\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_W,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_W }\n};\nexports.ToggleRegexKeybinding = {\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_R,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_R }\n};\nexports.ToggleSearchScopeKeybinding = {\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_L,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_L }\n};\nexports.FIND_IDS = {\n    StartFindAction: 'actions.find',\n    StartFindWithSelection: 'actions.findWithSelection',\n    NextMatchFindAction: 'editor.action.nextMatchFindAction',\n    PreviousMatchFindAction: 'editor.action.previousMatchFindAction',\n    NextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',\n    PreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',\n    StartFindReplaceAction: 'editor.action.startFindReplaceAction',\n    CloseFindWidgetCommand: 'closeFindWidget',\n    ToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',\n    ToggleWholeWordCommand: 'toggleFindWholeWord',\n    ToggleRegexCommand: 'toggleFindRegex',\n    ToggleSearchScopeCommand: 'toggleFindInSelection',\n    ReplaceOneAction: 'editor.action.replaceOne',\n    ReplaceAllAction: 'editor.action.replaceAll',\n    SelectAllMatchesAction: 'editor.action.selectAllMatches'\n};\nexports.MATCHES_LIMIT = 19999;\nvar RESEARCH_DELAY = 240;\nvar FindModelBoundToEditorModel = /** @class */ (function () {\n    function FindModelBoundToEditorModel(editor, state) {\n        var _this = this;\n        this._editor = editor;\n        this._state = state;\n        this._toDispose = [];\n        this._isDisposed = false;\n        this._startSearchingTimer = new async_1.TimeoutTimer();\n        this._decorations = new findDecorations_1.FindDecorations(editor);\n        this._toDispose.push(this._decorations);\n        this._updateDecorationsScheduler = new async_1.RunOnceScheduler(function () { return _this.research(false); }, 100);\n        this._toDispose.push(this._updateDecorationsScheduler);\n        this._toDispose.push(this._editor.onDidChangeCursorPosition(function (e) {\n            if (e.reason === cursorEvents_1.CursorChangeReason.Explicit\n                || e.reason === cursorEvents_1.CursorChangeReason.Undo\n                || e.reason === cursorEvents_1.CursorChangeReason.Redo) {\n                _this._decorations.setStartPosition(_this._editor.getPosition());\n            }\n        }));\n        this._ignoreModelContentChanged = false;\n        this._toDispose.push(this._editor.onDidChangeModelContent(function (e) {\n            if (_this._ignoreModelContentChanged) {\n                return;\n            }\n            if (e.isFlush) {\n                // a model.setValue() was called\n                _this._decorations.reset();\n            }\n            _this._decorations.setStartPosition(_this._editor.getPosition());\n            _this._updateDecorationsScheduler.schedule();\n        }));\n        this._toDispose.push(this._state.onFindReplaceStateChange(function (e) { return _this._onStateChanged(e); }));\n        this.research(false, this._state.searchScope);\n    }\n    FindModelBoundToEditorModel.prototype.dispose = function () {\n        this._isDisposed = true;\n        lifecycle_1.dispose(this._startSearchingTimer);\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n    };\n    FindModelBoundToEditorModel.prototype._onStateChanged = function (e) {\n        var _this = this;\n        if (this._isDisposed) {\n            // The find model is disposed during a find state changed event\n            return;\n        }\n        if (!this._editor.hasModel()) {\n            // The find model will be disposed momentarily\n            return;\n        }\n        if (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {\n            var model = this._editor.getModel();\n            if (model.isTooLargeForSyncing()) {\n                this._startSearchingTimer.cancel();\n                this._startSearchingTimer.setIfNotSet(function () {\n                    if (e.searchScope) {\n                        _this.research(e.moveCursor, _this._state.searchScope);\n                    }\n                    else {\n                        _this.research(e.moveCursor);\n                    }\n                }, RESEARCH_DELAY);\n            }\n            else {\n                if (e.searchScope) {\n                    this.research(e.moveCursor, this._state.searchScope);\n                }\n                else {\n                    this.research(e.moveCursor);\n                }\n            }\n        }\n    };\n    FindModelBoundToEditorModel._getSearchRange = function (model, findScope) {\n        // If we have set now or before a find scope, use it for computing the search range\n        if (findScope) {\n            return findScope;\n        }\n        return model.getFullModelRange();\n    };\n    FindModelBoundToEditorModel.prototype.research = function (moveCursor, newFindScope) {\n        var findScope = null;\n        if (typeof newFindScope !== 'undefined') {\n            findScope = newFindScope;\n        }\n        else {\n            findScope = this._decorations.getFindScope();\n        }\n        if (findScope !== null) {\n            if (findScope.startLineNumber !== findScope.endLineNumber) {\n                if (findScope.endColumn === 1) {\n                    findScope = new range_1.Range(findScope.startLineNumber, 1, findScope.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber - 1));\n                }\n                else {\n                    // multiline find scope => expand to line starts / ends\n                    findScope = new range_1.Range(findScope.startLineNumber, 1, findScope.endLineNumber, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber));\n                }\n            }\n        }\n        var findMatches = this._findMatches(findScope, false, exports.MATCHES_LIMIT);\n        this._decorations.set(findMatches, findScope);\n        this._state.changeMatchInfo(this._decorations.getCurrentMatchesPosition(this._editor.getSelection()), this._decorations.getCount(), undefined);\n        if (moveCursor) {\n            this._moveToNextMatch(this._decorations.getStartPosition());\n        }\n    };\n    FindModelBoundToEditorModel.prototype._hasMatches = function () {\n        return (this._state.matchesCount > 0);\n    };\n    FindModelBoundToEditorModel.prototype._cannotFind = function () {\n        if (!this._hasMatches()) {\n            var findScope = this._decorations.getFindScope();\n            if (findScope) {\n                // Reveal the selection so user is reminded that 'selection find' is on.\n                this._editor.revealRangeInCenterIfOutsideViewport(findScope, editorCommon.ScrollType.Smooth);\n            }\n            return true;\n        }\n        return false;\n    };\n    FindModelBoundToEditorModel.prototype._setCurrentFindMatch = function (match) {\n        var matchesPosition = this._decorations.setCurrentFindMatch(match);\n        this._state.changeMatchInfo(matchesPosition, this._decorations.getCount(), match);\n        this._editor.setSelection(match);\n        this._editor.revealRangeInCenterIfOutsideViewport(match, editorCommon.ScrollType.Smooth);\n    };\n    FindModelBoundToEditorModel.prototype._prevSearchPosition = function (before) {\n        var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0\n            || this._state.searchString.indexOf('$') >= 0);\n        var lineNumber = before.lineNumber, column = before.column;\n        var model = this._editor.getModel();\n        if (isUsingLineStops || column === 1) {\n            if (lineNumber === 1) {\n                lineNumber = model.getLineCount();\n            }\n            else {\n                lineNumber--;\n            }\n            column = model.getLineMaxColumn(lineNumber);\n        }\n        else {\n            column--;\n        }\n        return new position_1.Position(lineNumber, column);\n    };\n    FindModelBoundToEditorModel.prototype._moveToPrevMatch = function (before, isRecursed) {\n        if (isRecursed === void 0) { isRecursed = false; }\n        if (this._decorations.getCount() < exports.MATCHES_LIMIT) {\n            var prevMatchRange = this._decorations.matchBeforePosition(before);\n            if (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {\n                before = this._prevSearchPosition(before);\n                prevMatchRange = this._decorations.matchBeforePosition(before);\n            }\n            if (prevMatchRange) {\n                this._setCurrentFindMatch(prevMatchRange);\n            }\n            return;\n        }\n        if (this._cannotFind()) {\n            return;\n        }\n        var findScope = this._decorations.getFindScope();\n        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n        // ...(----)...|...\n        if (searchRange.getEndPosition().isBefore(before)) {\n            before = searchRange.getEndPosition();\n        }\n        // ...|...(----)...\n        if (before.isBefore(searchRange.getStartPosition())) {\n            before = searchRange.getEndPosition();\n        }\n        var lineNumber = before.lineNumber, column = before.column;\n        var model = this._editor.getModel();\n        var position = new position_1.Position(lineNumber, column);\n        var prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n        if (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {\n            // Looks like we're stuck at this position, unacceptable!\n            position = this._prevSearchPosition(position);\n            prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n        }\n        if (!prevMatch) {\n            // there is precisely one match and selection is on top of it\n            return;\n        }\n        if (!isRecursed && !searchRange.containsRange(prevMatch.range)) {\n            return this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);\n        }\n        this._setCurrentFindMatch(prevMatch.range);\n    };\n    FindModelBoundToEditorModel.prototype.moveToPrevMatch = function () {\n        this._moveToPrevMatch(this._editor.getSelection().getStartPosition());\n    };\n    FindModelBoundToEditorModel.prototype._nextSearchPosition = function (after) {\n        var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0\n            || this._state.searchString.indexOf('$') >= 0);\n        var lineNumber = after.lineNumber, column = after.column;\n        var model = this._editor.getModel();\n        if (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {\n            if (lineNumber === model.getLineCount()) {\n                lineNumber = 1;\n            }\n            else {\n                lineNumber++;\n            }\n            column = 1;\n        }\n        else {\n            column++;\n        }\n        return new position_1.Position(lineNumber, column);\n    };\n    FindModelBoundToEditorModel.prototype._moveToNextMatch = function (after) {\n        if (this._decorations.getCount() < exports.MATCHES_LIMIT) {\n            var nextMatchRange = this._decorations.matchAfterPosition(after);\n            if (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {\n                // Looks like we're stuck at this position, unacceptable!\n                after = this._nextSearchPosition(after);\n                nextMatchRange = this._decorations.matchAfterPosition(after);\n            }\n            if (nextMatchRange) {\n                this._setCurrentFindMatch(nextMatchRange);\n            }\n            return;\n        }\n        var nextMatch = this._getNextMatch(after, false, true);\n        if (nextMatch) {\n            this._setCurrentFindMatch(nextMatch.range);\n        }\n    };\n    FindModelBoundToEditorModel.prototype._getNextMatch = function (after, captureMatches, forceMove, isRecursed) {\n        if (isRecursed === void 0) { isRecursed = false; }\n        if (this._cannotFind()) {\n            return null;\n        }\n        var findScope = this._decorations.getFindScope();\n        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n        // ...(----)...|...\n        if (searchRange.getEndPosition().isBefore(after)) {\n            after = searchRange.getStartPosition();\n        }\n        // ...|...(----)...\n        if (after.isBefore(searchRange.getStartPosition())) {\n            after = searchRange.getStartPosition();\n        }\n        var lineNumber = after.lineNumber, column = after.column;\n        var model = this._editor.getModel();\n        var position = new position_1.Position(lineNumber, column);\n        var nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches);\n        if (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {\n            // Looks like we're stuck at this position, unacceptable!\n            position = this._nextSearchPosition(position);\n            nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches);\n        }\n        if (!nextMatch) {\n            // there is precisely one match and selection is on top of it\n            return null;\n        }\n        if (!isRecursed && !searchRange.containsRange(nextMatch.range)) {\n            return this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);\n        }\n        return nextMatch;\n    };\n    FindModelBoundToEditorModel.prototype.moveToNextMatch = function () {\n        this._moveToNextMatch(this._editor.getSelection().getEndPosition());\n    };\n    FindModelBoundToEditorModel.prototype._getReplacePattern = function () {\n        if (this._state.isRegex) {\n            return replacePattern_1.parseReplaceString(this._state.replaceString);\n        }\n        return replacePattern_1.ReplacePattern.fromStaticValue(this._state.replaceString);\n    };\n    FindModelBoundToEditorModel.prototype.replace = function () {\n        if (!this._hasMatches()) {\n            return;\n        }\n        var replacePattern = this._getReplacePattern();\n        var selection = this._editor.getSelection();\n        var nextMatch = this._getNextMatch(selection.getStartPosition(), replacePattern.hasReplacementPatterns, false);\n        if (nextMatch) {\n            if (selection.equalsRange(nextMatch.range)) {\n                // selection sits on a find match => replace it!\n                var replaceString = replacePattern.buildReplaceString(nextMatch.matches);\n                var command = new replaceCommand_1.ReplaceCommand(selection, replaceString);\n                this._executeEditorCommand('replace', command);\n                this._decorations.setStartPosition(new position_1.Position(selection.startLineNumber, selection.startColumn + replaceString.length));\n                this.research(true);\n            }\n            else {\n                this._decorations.setStartPosition(this._editor.getPosition());\n                this._setCurrentFindMatch(nextMatch.range);\n            }\n        }\n    };\n    FindModelBoundToEditorModel.prototype._findMatches = function (findScope, captureMatches, limitResultCount) {\n        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n        return this._editor.getModel().findMatches(this._state.searchString, searchRange, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches, limitResultCount);\n    };\n    FindModelBoundToEditorModel.prototype.replaceAll = function () {\n        if (!this._hasMatches()) {\n            return;\n        }\n        var findScope = this._decorations.getFindScope();\n        if (findScope === null && this._state.matchesCount >= exports.MATCHES_LIMIT) {\n            // Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches\n            this._largeReplaceAll();\n        }\n        else {\n            this._regularReplaceAll(findScope);\n        }\n        this.research(false);\n    };\n    FindModelBoundToEditorModel.prototype._largeReplaceAll = function () {\n        var searchParams = new textModelSearch_1.SearchParams(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null);\n        var searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return;\n        }\n        var searchRegex = searchData.regex;\n        if (!searchRegex.multiline) {\n            var mod = 'm';\n            if (searchRegex.ignoreCase) {\n                mod += 'i';\n            }\n            if (searchRegex.global) {\n                mod += 'g';\n            }\n            searchRegex = new RegExp(searchRegex.source, mod);\n        }\n        var model = this._editor.getModel();\n        var modelText = model.getValue(model_1.EndOfLinePreference.LF);\n        var fullModelRange = model.getFullModelRange();\n        var replacePattern = this._getReplacePattern();\n        var resultText;\n        if (replacePattern.hasReplacementPatterns) {\n            resultText = modelText.replace(searchRegex, function () {\n                return replacePattern.buildReplaceString(arguments);\n            });\n        }\n        else {\n            resultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null));\n        }\n        var command = new replaceCommand_1.ReplaceCommandThatPreservesSelection(fullModelRange, resultText, this._editor.getSelection());\n        this._executeEditorCommand('replaceAll', command);\n    };\n    FindModelBoundToEditorModel.prototype._regularReplaceAll = function (findScope) {\n        var replacePattern = this._getReplacePattern();\n        // Get all the ranges (even more than the highlighted ones)\n        var matches = this._findMatches(findScope, replacePattern.hasReplacementPatterns, uint_1.Constants.MAX_SAFE_SMALL_INTEGER);\n        var replaceStrings = [];\n        for (var i = 0, len = matches.length; i < len; i++) {\n            replaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches);\n        }\n        var command = new replaceAllCommand_1.ReplaceAllCommand(this._editor.getSelection(), matches.map(function (m) { return m.range; }), replaceStrings);\n        this._executeEditorCommand('replaceAll', command);\n    };\n    FindModelBoundToEditorModel.prototype.selectAllMatches = function () {\n        if (!this._hasMatches()) {\n            return;\n        }\n        var findScope = this._decorations.getFindScope();\n        // Get all the ranges (even more than the highlighted ones)\n        var matches = this._findMatches(findScope, false, uint_1.Constants.MAX_SAFE_SMALL_INTEGER);\n        var selections = matches.map(function (m) { return new selection_1.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn); });\n        // If one of the ranges is the editor selection, then maintain it as primary\n        var editorSelection = this._editor.getSelection();\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var sel = selections[i];\n            if (sel.equalsRange(editorSelection)) {\n                selections = [editorSelection].concat(selections.slice(0, i)).concat(selections.slice(i + 1));\n                break;\n            }\n        }\n        this._editor.setSelections(selections);\n    };\n    FindModelBoundToEditorModel.prototype._executeEditorCommand = function (source, command) {\n        try {\n            this._ignoreModelContentChanged = true;\n            this._editor.pushUndoStop();\n            this._editor.executeCommand(source, command);\n            this._editor.pushUndoStop();\n        }\n        finally {\n            this._ignoreModelContentChanged = false;\n        }\n    };\n    return FindModelBoundToEditorModel;\n}());\nexports.FindModelBoundToEditorModel = FindModelBoundToEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler, TimeoutTimer } from 'vs/base/common/async';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection } from 'vs/editor/common/commands/replaceCommand';\nimport { CursorChangeReason, ICursorPositionChangedEvent } from 'vs/editor/common/controller/cursorEvents';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { Constants } from 'vs/editor/common/core/uint';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference, FindMatch, ITextModel } from 'vs/editor/common/model';\nimport { SearchParams } from 'vs/editor/common/model/textModelSearch';\nimport { FindDecorations } from 'vs/editor/contrib/find/findDecorations';\nimport { FindReplaceState, FindReplaceStateChangedEvent } from 'vs/editor/contrib/find/findState';\nimport { ReplaceAllCommand } from 'vs/editor/contrib/find/replaceAllCommand';\nimport { ReplacePattern, parseReplaceString } from 'vs/editor/contrib/find/replacePattern';\nimport { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nexport const CONTEXT_FIND_WIDGET_VISIBLE = new RawContextKey<boolean>('findWidgetVisible', false);\nexport const CONTEXT_FIND_WIDGET_NOT_VISIBLE: ContextKeyExpr = CONTEXT_FIND_WIDGET_VISIBLE.toNegated();\n// Keep ContextKey use of 'Focussed' to not break when clauses\nexport const CONTEXT_FIND_INPUT_FOCUSED = new RawContextKey<boolean>('findInputFocussed', false);\nexport const CONTEXT_REPLACE_INPUT_FOCUSED = new RawContextKey<boolean>('replaceInputFocussed', false);\n\nexport const ToggleCaseSensitiveKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KEY_C,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_C }\n};\nexport const ToggleWholeWordKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KEY_W,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_W }\n};\nexport const ToggleRegexKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KEY_R,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_R }\n};\nexport const ToggleSearchScopeKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KEY_L,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_L }\n};\n\nexport const FIND_IDS = {\n\tStartFindAction: 'actions.find',\n\tStartFindWithSelection: 'actions.findWithSelection',\n\tNextMatchFindAction: 'editor.action.nextMatchFindAction',\n\tPreviousMatchFindAction: 'editor.action.previousMatchFindAction',\n\tNextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',\n\tPreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',\n\tStartFindReplaceAction: 'editor.action.startFindReplaceAction',\n\tCloseFindWidgetCommand: 'closeFindWidget',\n\tToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',\n\tToggleWholeWordCommand: 'toggleFindWholeWord',\n\tToggleRegexCommand: 'toggleFindRegex',\n\tToggleSearchScopeCommand: 'toggleFindInSelection',\n\tReplaceOneAction: 'editor.action.replaceOne',\n\tReplaceAllAction: 'editor.action.replaceAll',\n\tSelectAllMatchesAction: 'editor.action.selectAllMatches'\n};\n\nexport const MATCHES_LIMIT = 19999;\nconst RESEARCH_DELAY = 240;\n\nexport class FindModelBoundToEditorModel {\n\n\tprivate readonly _editor: IActiveCodeEditor;\n\tprivate readonly _state: FindReplaceState;\n\tprivate _toDispose: IDisposable[];\n\tprivate readonly _decorations: FindDecorations;\n\tprivate _ignoreModelContentChanged: boolean;\n\tprivate readonly _startSearchingTimer: TimeoutTimer;\n\n\tprivate readonly _updateDecorationsScheduler: RunOnceScheduler;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(editor: IActiveCodeEditor, state: FindReplaceState) {\n\t\tthis._editor = editor;\n\t\tthis._state = state;\n\t\tthis._toDispose = [];\n\t\tthis._isDisposed = false;\n\t\tthis._startSearchingTimer = new TimeoutTimer();\n\n\t\tthis._decorations = new FindDecorations(editor);\n\t\tthis._toDispose.push(this._decorations);\n\n\t\tthis._updateDecorationsScheduler = new RunOnceScheduler(() => this.research(false), 100);\n\t\tthis._toDispose.push(this._updateDecorationsScheduler);\n\n\t\tthis._toDispose.push(this._editor.onDidChangeCursorPosition((e: ICursorPositionChangedEvent) => {\n\t\t\tif (\n\t\t\t\te.reason === CursorChangeReason.Explicit\n\t\t\t\t|| e.reason === CursorChangeReason.Undo\n\t\t\t\t|| e.reason === CursorChangeReason.Redo\n\t\t\t) {\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t}\n\t\t}));\n\n\t\tthis._ignoreModelContentChanged = false;\n\t\tthis._toDispose.push(this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (this._ignoreModelContentChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.isFlush) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\tthis._decorations.reset();\n\t\t\t}\n\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\tthis._updateDecorationsScheduler.schedule();\n\t\t}));\n\n\t\tthis._toDispose.push(this._state.onFindReplaceStateChange((e) => this._onStateChanged(e)));\n\n\t\tthis.research(false, this._state.searchScope);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tdispose(this._startSearchingTimer);\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\tprivate _onStateChanged(e: FindReplaceStateChangedEvent): void {\n\t\tif (this._isDisposed) {\n\t\t\t// The find model is disposed during a find state changed event\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\t// The find model will be disposed momentarily\n\t\t\treturn;\n\t\t}\n\t\tif (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {\n\t\t\tlet model = this._editor.getModel();\n\n\t\t\tif (model.isTooLargeForSyncing()) {\n\t\t\t\tthis._startSearchingTimer.cancel();\n\n\t\t\t\tthis._startSearchingTimer.setIfNotSet(() => {\n\t\t\t\t\tif (e.searchScope) {\n\t\t\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.research(e.moveCursor);\n\t\t\t\t\t}\n\t\t\t\t}, RESEARCH_DELAY);\n\t\t\t} else {\n\t\t\t\tif (e.searchScope) {\n\t\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t\t} else {\n\t\t\t\t\tthis.research(e.moveCursor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _getSearchRange(model: ITextModel, findScope: Range | null): Range {\n\t\t// If we have set now or before a find scope, use it for computing the search range\n\t\tif (findScope) {\n\t\t\treturn findScope;\n\t\t}\n\n\t\treturn model.getFullModelRange();\n\t}\n\n\tprivate research(moveCursor: boolean, newFindScope?: Range | null): void {\n\t\tlet findScope: Range | null = null;\n\t\tif (typeof newFindScope !== 'undefined') {\n\t\t\tfindScope = newFindScope;\n\t\t} else {\n\t\t\tfindScope = this._decorations.getFindScope();\n\t\t}\n\t\tif (findScope !== null) {\n\t\t\tif (findScope.startLineNumber !== findScope.endLineNumber) {\n\t\t\t\tif (findScope.endColumn === 1) {\n\t\t\t\t\tfindScope = new Range(findScope.startLineNumber, 1, findScope.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber - 1));\n\t\t\t\t} else {\n\t\t\t\t\t// multiline find scope => expand to line starts / ends\n\t\t\t\t\tfindScope = new Range(findScope.startLineNumber, 1, findScope.endLineNumber, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet findMatches = this._findMatches(findScope, false, MATCHES_LIMIT);\n\t\tthis._decorations.set(findMatches, findScope);\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tthis._decorations.getCurrentMatchesPosition(this._editor.getSelection()),\n\t\t\tthis._decorations.getCount(),\n\t\t\tundefined\n\t\t);\n\n\t\tif (moveCursor) {\n\t\t\tthis._moveToNextMatch(this._decorations.getStartPosition());\n\t\t}\n\t}\n\n\tprivate _hasMatches(): boolean {\n\t\treturn (this._state.matchesCount > 0);\n\t}\n\n\tprivate _cannotFind(): boolean {\n\t\tif (!this._hasMatches()) {\n\t\t\tlet findScope = this._decorations.getFindScope();\n\t\t\tif (findScope) {\n\t\t\t\t// Reveal the selection so user is reminded that 'selection find' is on.\n\t\t\t\tthis._editor.revealRangeInCenterIfOutsideViewport(findScope, editorCommon.ScrollType.Smooth);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _setCurrentFindMatch(match: Range): void {\n\t\tlet matchesPosition = this._decorations.setCurrentFindMatch(match);\n\t\tthis._state.changeMatchInfo(\n\t\t\tmatchesPosition,\n\t\t\tthis._decorations.getCount(),\n\t\t\tmatch\n\t\t);\n\n\t\tthis._editor.setSelection(match);\n\t\tthis._editor.revealRangeInCenterIfOutsideViewport(match, editorCommon.ScrollType.Smooth);\n\t}\n\n\tprivate _prevSearchPosition(before: Position) {\n\t\tlet isUsingLineStops = this._state.isRegex && (\n\t\t\tthis._state.searchString.indexOf('^') >= 0\n\t\t\t|| this._state.searchString.indexOf('$') >= 0\n\t\t);\n\t\tlet { lineNumber, column } = before;\n\t\tlet model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === 1) {\n\t\t\tif (lineNumber === 1) {\n\t\t\t\tlineNumber = model.getLineCount();\n\t\t\t} else {\n\t\t\t\tlineNumber--;\n\t\t\t}\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t} else {\n\t\t\tcolumn--;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToPrevMatch(before: Position, isRecursed: boolean = false): void {\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet prevMatchRange = this._decorations.matchBeforePosition(before);\n\n\t\t\tif (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {\n\t\t\t\tbefore = this._prevSearchPosition(before);\n\t\t\t\tprevMatchRange = this._decorations.matchBeforePosition(before);\n\t\t\t}\n\n\t\t\tif (prevMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(prevMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._cannotFind()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet findScope = this._decorations.getFindScope();\n\t\tlet searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(before)) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (before.isBefore(searchRange.getStartPosition())) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\tlet { lineNumber, column } = before;\n\t\tlet model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\n\t\tif (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._prevSearchPosition(position);\n\t\t\tprevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\t\t}\n\n\t\tif (!prevMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(prevMatch.range)) {\n\t\t\treturn this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);\n\t\t}\n\n\t\tthis._setCurrentFindMatch(prevMatch.range);\n\t}\n\n\tpublic moveToPrevMatch(): void {\n\t\tthis._moveToPrevMatch(this._editor.getSelection().getStartPosition());\n\t}\n\n\tprivate _nextSearchPosition(after: Position) {\n\t\tlet isUsingLineStops = this._state.isRegex && (\n\t\t\tthis._state.searchString.indexOf('^') >= 0\n\t\t\t|| this._state.searchString.indexOf('$') >= 0\n\t\t);\n\n\t\tlet { lineNumber, column } = after;\n\t\tlet model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {\n\t\t\tif (lineNumber === model.getLineCount()) {\n\t\t\t\tlineNumber = 1;\n\t\t\t} else {\n\t\t\t\tlineNumber++;\n\t\t\t}\n\t\t\tcolumn = 1;\n\t\t} else {\n\t\t\tcolumn++;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToNextMatch(after: Position): void {\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet nextMatchRange = this._decorations.matchAfterPosition(after);\n\n\t\t\tif (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {\n\t\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\t\tafter = this._nextSearchPosition(after);\n\t\t\t\tnextMatchRange = this._decorations.matchAfterPosition(after);\n\t\t\t}\n\t\t\tif (nextMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(nextMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet nextMatch = this._getNextMatch(after, false, true);\n\t\tif (nextMatch) {\n\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t}\n\t}\n\n\tprivate _getNextMatch(after: Position, captureMatches: boolean, forceMove: boolean, isRecursed: boolean = false): FindMatch | null {\n\t\tif (this._cannotFind()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet findScope = this._decorations.getFindScope();\n\t\tlet searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(after)) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (after.isBefore(searchRange.getStartPosition())) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\tlet { lineNumber, column } = after;\n\t\tlet model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches);\n\n\t\tif (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._nextSearchPosition(position);\n\t\t\tnextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches);\n\t\t}\n\n\t\tif (!nextMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(nextMatch.range)) {\n\t\t\treturn this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);\n\t\t}\n\n\t\treturn nextMatch;\n\t}\n\n\tpublic moveToNextMatch(): void {\n\t\tthis._moveToNextMatch(this._editor.getSelection().getEndPosition());\n\t}\n\n\tprivate _getReplacePattern(): ReplacePattern {\n\t\tif (this._state.isRegex) {\n\t\t\treturn parseReplaceString(this._state.replaceString);\n\t\t}\n\t\treturn ReplacePattern.fromStaticValue(this._state.replaceString);\n\t}\n\n\tpublic replace(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet replacePattern = this._getReplacePattern();\n\t\tlet selection = this._editor.getSelection();\n\t\tlet nextMatch = this._getNextMatch(selection.getStartPosition(), replacePattern.hasReplacementPatterns, false);\n\t\tif (nextMatch) {\n\t\t\tif (selection.equalsRange(nextMatch.range)) {\n\t\t\t\t// selection sits on a find match => replace it!\n\t\t\t\tlet replaceString = replacePattern.buildReplaceString(nextMatch.matches);\n\n\t\t\t\tlet command = new ReplaceCommand(selection, replaceString);\n\n\t\t\t\tthis._executeEditorCommand('replace', command);\n\n\t\t\t\tthis._decorations.setStartPosition(new Position(selection.startLineNumber, selection.startColumn + replaceString.length));\n\t\t\t\tthis.research(true);\n\t\t\t} else {\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _findMatches(findScope: Range | null, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tlet searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n\t\treturn this._editor.getModel().findMatches(this._state.searchString, searchRange, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null, captureMatches, limitResultCount);\n\t}\n\n\tpublic replaceAll(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScope = this._decorations.getFindScope();\n\n\t\tif (findScope === null && this._state.matchesCount >= MATCHES_LIMIT) {\n\t\t\t// Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches\n\t\t\tthis._largeReplaceAll();\n\t\t} else {\n\t\t\tthis._regularReplaceAll(findScope);\n\t\t}\n\n\t\tthis.research(false);\n\t}\n\n\tprivate _largeReplaceAll(): void {\n\t\tconst searchParams = new SearchParams(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getConfiguration().wordSeparators : null);\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet searchRegex = searchData.regex;\n\t\tif (!searchRegex.multiline) {\n\t\t\tlet mod = 'm';\n\t\t\tif (searchRegex.ignoreCase) {\n\t\t\t\tmod += 'i';\n\t\t\t}\n\t\t\tif (searchRegex.global) {\n\t\t\t\tmod += 'g';\n\t\t\t}\n\t\t\tsearchRegex = new RegExp(searchRegex.source, mod);\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst modelText = model.getValue(EndOfLinePreference.LF);\n\t\tconst fullModelRange = model.getFullModelRange();\n\n\t\tconst replacePattern = this._getReplacePattern();\n\t\tlet resultText: string;\n\t\tif (replacePattern.hasReplacementPatterns) {\n\t\t\tresultText = modelText.replace(searchRegex, function () {\n\t\t\t\treturn replacePattern.buildReplaceString(<string[]><any>arguments);\n\t\t\t});\n\t\t} else {\n\t\t\tresultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null));\n\t\t}\n\n\t\tlet command = new ReplaceCommandThatPreservesSelection(fullModelRange, resultText, this._editor.getSelection());\n\t\tthis._executeEditorCommand('replaceAll', command);\n\t}\n\n\tprivate _regularReplaceAll(findScope: Range | null): void {\n\t\tconst replacePattern = this._getReplacePattern();\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tlet matches = this._findMatches(findScope, replacePattern.hasReplacementPatterns, Constants.MAX_SAFE_SMALL_INTEGER);\n\n\t\tlet replaceStrings: string[] = [];\n\t\tfor (let i = 0, len = matches.length; i < len; i++) {\n\t\t\treplaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches);\n\t\t}\n\n\t\tlet command = new ReplaceAllCommand(this._editor.getSelection(), matches.map(m => m.range), replaceStrings);\n\t\tthis._executeEditorCommand('replaceAll', command);\n\t}\n\n\tpublic selectAllMatches(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet findScope = this._decorations.getFindScope();\n\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tlet matches = this._findMatches(findScope, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\t\tlet selections = matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn));\n\n\t\t// If one of the ranges is the editor selection, then maintain it as primary\n\t\tlet editorSelection = this._editor.getSelection();\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tlet sel = selections[i];\n\t\t\tif (sel.equalsRange(editorSelection)) {\n\t\t\t\tselections = [editorSelection].concat(selections.slice(0, i)).concat(selections.slice(i + 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._editor.setSelections(selections);\n\t}\n\n\tprivate _executeEditorCommand(source: string, command: editorCommon.ICommand): void {\n\t\ttry {\n\t\t\tthis._ignoreModelContentChanged = true;\n\t\t\tthis._editor.pushUndoStop();\n\t\t\tthis._editor.executeCommand(source, command);\n\t\t\tthis._editor.pushUndoStop();\n\t\t} finally {\n\t\t\tthis._ignoreModelContentChanged = false;\n\t\t}\n\t}\n}\n"]}]}