{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/storageDataCleaner.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/storageDataCleaner.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/environment/common/environment\", \"vs/base/common/path\", \"vs/base/node/pfs\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\"], function (require, exports, environment_1, path_1, pfs_1, errors_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let StorageDataCleaner = class StorageDataCleaner extends lifecycle_1.Disposable {\n        constructor(environmentService) {\n            super();\n            this.environmentService = environmentService;\n            this.cleanUpStorageSoon();\n        }\n        cleanUpStorageSoon() {\n            let handle = setTimeout(() => {\n                handle = undefined;\n                // Leverage the backup workspace file to find out which empty workspace is currently in use to\n                // determine which empty workspace storage can safely be deleted\n                pfs_1.readFile(this.environmentService.backupWorkspacesPath, 'utf8').then(contents => {\n                    const workspaces = JSON.parse(contents);\n                    const emptyWorkspaces = workspaces.emptyWorkspaceInfos.map(info => info.backupFolder);\n                    // Read all workspace storage folders that exist\n                    return pfs_1.readdir(this.environmentService.workspaceStorageHome).then(storageFolders => {\n                        const deletes = [];\n                        storageFolders.forEach(storageFolder => {\n                            if (storageFolder.length === StorageDataCleaner.NON_EMPTY_WORKSPACE_ID_LENGTH) {\n                                return;\n                            }\n                            if (emptyWorkspaces.indexOf(storageFolder) === -1) {\n                                deletes.push(pfs_1.rimraf(path_1.join(this.environmentService.workspaceStorageHome, storageFolder)));\n                            }\n                        });\n                        return Promise.all(deletes);\n                    });\n                }).then(null, errors_1.onUnexpectedError);\n            }, 30 * 1000);\n            this._register(lifecycle_1.toDisposable(() => clearTimeout(handle)));\n        }\n    };\n    // Workspace/Folder storage names are MD5 hashes (128bits / 4 due to hex presentation)\n    StorageDataCleaner.NON_EMPTY_WORKSPACE_ID_LENGTH = 128 / 4;\n    StorageDataCleaner = __decorate([\n        __param(0, environment_1.IEnvironmentService)\n    ], StorageDataCleaner);\n    exports.StorageDataCleaner = StorageDataCleaner;\n});\n",null]}