{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerWidget.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/browser\", \"vs/base/browser/dom\", \"vs/base/browser/globalMouseMoveMonitor\", \"vs/base/browser/ui/widget\", \"vs/base/common/color\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/css!./colorPicker\"], function (require, exports, browser_1, dom, globalMouseMoveMonitor_1, widget_1, color_1, event_1, lifecycle_1, colorRegistry_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const $ = dom.$;\n    class ColorPickerHeader extends lifecycle_1.Disposable {\n        constructor(container, model, themeService) {\n            super();\n            this.model = model;\n            this.domNode = $('.colorpicker-header');\n            dom.append(container, this.domNode);\n            this.pickedColorNode = dom.append(this.domNode, $('.picked-color'));\n            const colorBox = dom.append(this.domNode, $('.original-color'));\n            colorBox.style.backgroundColor = color_1.Color.Format.CSS.format(this.model.originalColor);\n            this.backgroundColor = themeService.getTheme().getColor(colorRegistry_1.editorHoverBackground) || color_1.Color.white;\n            this._register(themeService_1.registerThemingParticipant((theme, collector) => {\n                this.backgroundColor = theme.getColor(colorRegistry_1.editorHoverBackground) || color_1.Color.white;\n            }));\n            this._register(dom.addDisposableListener(this.pickedColorNode, dom.EventType.CLICK, () => this.model.selectNextColorPresentation()));\n            this._register(dom.addDisposableListener(colorBox, dom.EventType.CLICK, () => {\n                this.model.color = this.model.originalColor;\n                this.model.flushColor();\n            }));\n            this._register(model.onDidChangeColor(this.onDidChangeColor, this));\n            this._register(model.onDidChangePresentation(this.onDidChangePresentation, this));\n            this.pickedColorNode.style.backgroundColor = color_1.Color.Format.CSS.format(model.color);\n            dom.toggleClass(this.pickedColorNode, 'light', model.color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : model.color.isLighter());\n        }\n        onDidChangeColor(color) {\n            this.pickedColorNode.style.backgroundColor = color_1.Color.Format.CSS.format(color);\n            dom.toggleClass(this.pickedColorNode, 'light', color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : color.isLighter());\n            this.onDidChangePresentation();\n        }\n        onDidChangePresentation() {\n            this.pickedColorNode.textContent = this.model.presentation ? this.model.presentation.label : '';\n        }\n    }\n    exports.ColorPickerHeader = ColorPickerHeader;\n    class ColorPickerBody extends lifecycle_1.Disposable {\n        constructor(container, model, pixelRatio) {\n            super();\n            this.model = model;\n            this.pixelRatio = pixelRatio;\n            this.domNode = $('.colorpicker-body');\n            dom.append(container, this.domNode);\n            this.saturationBox = new SaturationBox(this.domNode, this.model, this.pixelRatio);\n            this._register(this.saturationBox);\n            this._register(this.saturationBox.onDidChange(this.onDidSaturationValueChange, this));\n            this._register(this.saturationBox.onColorFlushed(this.flushColor, this));\n            this.opacityStrip = new OpacityStrip(this.domNode, this.model);\n            this._register(this.opacityStrip);\n            this._register(this.opacityStrip.onDidChange(this.onDidOpacityChange, this));\n            this._register(this.opacityStrip.onColorFlushed(this.flushColor, this));\n            this.hueStrip = new HueStrip(this.domNode, this.model);\n            this._register(this.hueStrip);\n            this._register(this.hueStrip.onDidChange(this.onDidHueChange, this));\n            this._register(this.hueStrip.onColorFlushed(this.flushColor, this));\n        }\n        flushColor() {\n            this.model.flushColor();\n        }\n        onDidSaturationValueChange({ s, v }) {\n            const hsva = this.model.color.hsva;\n            this.model.color = new color_1.Color(new color_1.HSVA(hsva.h, s, v, hsva.a));\n        }\n        onDidOpacityChange(a) {\n            const hsva = this.model.color.hsva;\n            this.model.color = new color_1.Color(new color_1.HSVA(hsva.h, hsva.s, hsva.v, a));\n        }\n        onDidHueChange(value) {\n            const hsva = this.model.color.hsva;\n            const h = (1 - value) * 360;\n            this.model.color = new color_1.Color(new color_1.HSVA(h === 360 ? 0 : h, hsva.s, hsva.v, hsva.a));\n        }\n        layout() {\n            this.saturationBox.layout();\n            this.opacityStrip.layout();\n            this.hueStrip.layout();\n        }\n    }\n    exports.ColorPickerBody = ColorPickerBody;\n    class SaturationBox extends lifecycle_1.Disposable {\n        constructor(container, model, pixelRatio) {\n            super();\n            this.model = model;\n            this.pixelRatio = pixelRatio;\n            this._onDidChange = new event_1.Emitter();\n            this.onDidChange = this._onDidChange.event;\n            this._onColorFlushed = new event_1.Emitter();\n            this.onColorFlushed = this._onColorFlushed.event;\n            this.domNode = $('.saturation-wrap');\n            dom.append(container, this.domNode);\n            // Create canvas, draw selected color\n            this.canvas = document.createElement('canvas');\n            this.canvas.className = 'saturation-box';\n            dom.append(this.domNode, this.canvas);\n            // Add selection circle\n            this.selection = $('.saturation-selection');\n            dom.append(this.domNode, this.selection);\n            this.layout();\n            this._register(dom.addDisposableListener(this.domNode, dom.EventType.MOUSE_DOWN, e => this.onMouseDown(e)));\n            this._register(this.model.onDidChangeColor(this.onDidChangeColor, this));\n            this.monitor = null;\n        }\n        onMouseDown(e) {\n            this.monitor = this._register(new globalMouseMoveMonitor_1.GlobalMouseMoveMonitor());\n            const origin = dom.getDomNodePagePosition(this.domNode);\n            if (e.target !== this.selection) {\n                this.onDidChangePosition(e.offsetX, e.offsetY);\n            }\n            this.monitor.startMonitoring(globalMouseMoveMonitor_1.standardMouseMoveMerger, event => this.onDidChangePosition(event.posx - origin.left, event.posy - origin.top), () => null);\n            const mouseUpListener = dom.addDisposableListener(document, dom.EventType.MOUSE_UP, () => {\n                this._onColorFlushed.fire();\n                mouseUpListener.dispose();\n                if (this.monitor) {\n                    this.monitor.stopMonitoring(true);\n                    this.monitor = null;\n                }\n            }, true);\n        }\n        onDidChangePosition(left, top) {\n            const s = Math.max(0, Math.min(1, left / this.width));\n            const v = Math.max(0, Math.min(1, 1 - (top / this.height)));\n            this.paintSelection(s, v);\n            this._onDidChange.fire({ s, v });\n        }\n        layout() {\n            this.width = this.domNode.offsetWidth;\n            this.height = this.domNode.offsetHeight;\n            this.canvas.width = this.width * this.pixelRatio;\n            this.canvas.height = this.height * this.pixelRatio;\n            this.paint();\n            const hsva = this.model.color.hsva;\n            this.paintSelection(hsva.s, hsva.v);\n        }\n        paint() {\n            const hsva = this.model.color.hsva;\n            const saturatedColor = new color_1.Color(new color_1.HSVA(hsva.h, 1, 1, 1));\n            const ctx = this.canvas.getContext('2d');\n            const whiteGradient = ctx.createLinearGradient(0, 0, this.canvas.width, 0);\n            whiteGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            whiteGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');\n            whiteGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n            const blackGradient = ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n            blackGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n            blackGradient.addColorStop(1, 'rgba(0, 0, 0, 1)');\n            ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.fillStyle = color_1.Color.Format.CSS.format(saturatedColor);\n            ctx.fill();\n            ctx.fillStyle = whiteGradient;\n            ctx.fill();\n            ctx.fillStyle = blackGradient;\n            ctx.fill();\n        }\n        paintSelection(s, v) {\n            this.selection.style.left = `${s * this.width}px`;\n            this.selection.style.top = `${this.height - v * this.height}px`;\n        }\n        onDidChangeColor() {\n            if (this.monitor && this.monitor.isMonitoring()) {\n                return;\n            }\n            this.paint();\n        }\n    }\n    class Strip extends lifecycle_1.Disposable {\n        constructor(container, model) {\n            super();\n            this.model = model;\n            this._onDidChange = new event_1.Emitter();\n            this.onDidChange = this._onDidChange.event;\n            this._onColorFlushed = new event_1.Emitter();\n            this.onColorFlushed = this._onColorFlushed.event;\n            this.domNode = dom.append(container, $('.strip'));\n            this.overlay = dom.append(this.domNode, $('.overlay'));\n            this.slider = dom.append(this.domNode, $('.slider'));\n            this.slider.style.top = `0px`;\n            this._register(dom.addDisposableListener(this.domNode, dom.EventType.MOUSE_DOWN, e => this.onMouseDown(e)));\n            this.layout();\n        }\n        layout() {\n            this.height = this.domNode.offsetHeight - this.slider.offsetHeight;\n            const value = this.getValue(this.model.color);\n            this.updateSliderPosition(value);\n        }\n        onMouseDown(e) {\n            const monitor = this._register(new globalMouseMoveMonitor_1.GlobalMouseMoveMonitor());\n            const origin = dom.getDomNodePagePosition(this.domNode);\n            dom.addClass(this.domNode, 'grabbing');\n            if (e.target !== this.slider) {\n                this.onDidChangeTop(e.offsetY);\n            }\n            monitor.startMonitoring(globalMouseMoveMonitor_1.standardMouseMoveMerger, event => this.onDidChangeTop(event.posy - origin.top), () => null);\n            const mouseUpListener = dom.addDisposableListener(document, dom.EventType.MOUSE_UP, () => {\n                this._onColorFlushed.fire();\n                mouseUpListener.dispose();\n                monitor.stopMonitoring(true);\n                dom.removeClass(this.domNode, 'grabbing');\n            }, true);\n        }\n        onDidChangeTop(top) {\n            const value = Math.max(0, Math.min(1, 1 - (top / this.height)));\n            this.updateSliderPosition(value);\n            this._onDidChange.fire(value);\n        }\n        updateSliderPosition(value) {\n            this.slider.style.top = `${(1 - value) * this.height}px`;\n        }\n    }\n    class OpacityStrip extends Strip {\n        constructor(container, model) {\n            super(container, model);\n            dom.addClass(this.domNode, 'opacity-strip');\n            this._register(model.onDidChangeColor(this.onDidChangeColor, this));\n            this.onDidChangeColor(this.model.color);\n        }\n        onDidChangeColor(color) {\n            const { r, g, b } = color.rgba;\n            const opaque = new color_1.Color(new color_1.RGBA(r, g, b, 1));\n            const transparent = new color_1.Color(new color_1.RGBA(r, g, b, 0));\n            this.overlay.style.background = `linear-gradient(to bottom, ${opaque} 0%, ${transparent} 100%)`;\n        }\n        getValue(color) {\n            return color.hsva.a;\n        }\n    }\n    class HueStrip extends Strip {\n        constructor(container, model) {\n            super(container, model);\n            dom.addClass(this.domNode, 'hue-strip');\n        }\n        getValue(color) {\n            return 1 - (color.hsva.h / 360);\n        }\n    }\n    class ColorPickerWidget extends widget_1.Widget {\n        constructor(container, model, pixelRatio, themeService) {\n            super();\n            this.model = model;\n            this.pixelRatio = pixelRatio;\n            this._register(browser_1.onDidChangeZoomLevel(() => this.layout()));\n            const element = $('.colorpicker-widget');\n            container.appendChild(element);\n            const header = new ColorPickerHeader(element, this.model, themeService);\n            this.body = new ColorPickerBody(element, this.model, this.pixelRatio);\n            this._register(header);\n            this._register(this.body);\n        }\n        getId() {\n            return ColorPickerWidget.ID;\n        }\n        layout() {\n            this.body.layout();\n        }\n    }\n    ColorPickerWidget.ID = 'editor.contrib.colorPickerWidget';\n    exports.ColorPickerWidget = ColorPickerWidget;\n});\n",null]}