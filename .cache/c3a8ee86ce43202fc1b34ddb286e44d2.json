{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar htmlContent_1 = require(\"vs/base/common/htmlContent\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar snippetParser_1 = require(\"vs/editor/contrib/snippet/snippetParser\");\nvar nls_1 = require(\"vs/nls\");\nvar snippets_contribution_1 = require(\"vs/workbench/contrib/snippets/browser/snippets.contribution\");\nvar snippetsFile_1 = require(\"vs/workbench/contrib/snippets/browser/snippetsFile\");\nvar SnippetCompletion = /** @class */ (function () {\n    function SnippetCompletion(snippet, range) {\n        this.snippet = snippet;\n        this.label = snippet.prefix;\n        this.detail = nls_1.localize('detail.snippet', \"{0} ({1})\", snippet.description || snippet.name, snippet.source);\n        this.insertText = snippet.body;\n        this.range = range;\n        this.sortText = (snippet.snippetSource === snippetsFile_1.SnippetSource.Extension ? 'z' : 'a') + \"-\" + snippet.prefix;\n        this.kind = modes_1.CompletionItemKind.Snippet;\n        this.insertTextRules = modes_1.CompletionItemInsertTextRule.InsertAsSnippet;\n    }\n    SnippetCompletion.prototype.resolve = function () {\n        this.documentation = new htmlContent_1.MarkdownString().appendCodeblock('', new snippetParser_1.SnippetParser().text(this.snippet.codeSnippet));\n        this.insertText = this.snippet.codeSnippet;\n        return this;\n    };\n    SnippetCompletion.compareByLabel = function (a, b) {\n        return strings_1.compare(a.label, b.label);\n    };\n    return SnippetCompletion;\n}());\nexports.SnippetCompletion = SnippetCompletion;\nfunction matches(pattern, patternStart, word, wordStart) {\n    while (patternStart < pattern.length && wordStart < word.length) {\n        if (pattern[patternStart] === word[wordStart]) {\n            patternStart += 1;\n        }\n        wordStart += 1;\n    }\n    return patternStart === pattern.length;\n}\nexports.matches = matches;\nvar SnippetCompletionProvider = /** @class */ (function () {\n    function SnippetCompletionProvider(_modeService, _snippets) {\n        this._modeService = _modeService;\n        this._snippets = _snippets;\n        //\n    }\n    SnippetCompletionProvider.prototype.provideCompletionItems = function (model, position, context) {\n        if (position.column >= SnippetCompletionProvider._maxPrefix) {\n            return undefined;\n        }\n        if (context.triggerKind === modes_1.CompletionTriggerKind.TriggerCharacter && context.triggerCharacter === ' ') {\n            // no snippets when suggestions have been triggered by space\n            return undefined;\n        }\n        var languageId = this._getLanguageIdAtPosition(model, position);\n        return this._snippets.getSnippets(languageId).then(function (snippets) {\n            var suggestions;\n            var pos = { lineNumber: position.lineNumber, column: 1 };\n            var lineOffsets = [];\n            var linePrefixLow = model.getLineContent(position.lineNumber).substr(0, position.column - 1).toLowerCase();\n            var endsInWhitespace = linePrefixLow.match(/\\s$/);\n            while (pos.column < position.column) {\n                var word = model.getWordAtPosition(pos);\n                if (word) {\n                    // at a word\n                    lineOffsets.push(word.startColumn - 1);\n                    pos.column = word.endColumn + 1;\n                    if (word.endColumn - 1 < linePrefixLow.length && !/\\s/.test(linePrefixLow[word.endColumn - 1])) {\n                        lineOffsets.push(word.endColumn - 1);\n                    }\n                }\n                else if (!/\\s/.test(linePrefixLow[pos.column - 1])) {\n                    // at a none-whitespace character\n                    lineOffsets.push(pos.column - 1);\n                    pos.column += 1;\n                }\n                else {\n                    // always advance!\n                    pos.column += 1;\n                }\n            }\n            var availableSnippets = new Set();\n            snippets.forEach(availableSnippets.add, availableSnippets);\n            suggestions = [];\n            var _loop_1 = function (start) {\n                availableSnippets.forEach(function (snippet) {\n                    if (matches(linePrefixLow, start, snippet.prefixLow, 0)) {\n                        suggestions.push(new SnippetCompletion(snippet, range_1.Range.fromPositions(position.delta(0, -(linePrefixLow.length - start)), position)));\n                        availableSnippets.delete(snippet);\n                    }\n                });\n            };\n            for (var _i = 0, lineOffsets_1 = lineOffsets; _i < lineOffsets_1.length; _i++) {\n                var start = lineOffsets_1[_i];\n                _loop_1(start);\n            }\n            if (endsInWhitespace || lineOffsets.length === 0) {\n                // add remaing snippets when the current prefix ends in whitespace or when no\n                // interesting positions have been found\n                availableSnippets.forEach(function (snippet) {\n                    suggestions.push(new SnippetCompletion(snippet, range_1.Range.fromPositions(position)));\n                });\n            }\n            // dismbiguate suggestions with same labels\n            suggestions.sort(SnippetCompletion.compareByLabel);\n            for (var i = 0; i < suggestions.length; i++) {\n                var item = suggestions[i];\n                var to = i + 1;\n                for (; to < suggestions.length && item.label === suggestions[to].label; to++) {\n                    suggestions[to].label = nls_1.localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[to].label, suggestions[to].snippet.name);\n                }\n                if (to > i + 1) {\n                    suggestions[i].label = nls_1.localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[i].label, suggestions[i].snippet.name);\n                    i = to;\n                }\n            }\n            return { suggestions: suggestions };\n        });\n    };\n    SnippetCompletionProvider.prototype.resolveCompletionItem = function (model, position, item) {\n        return (item instanceof SnippetCompletion) ? item.resolve() : item;\n    };\n    SnippetCompletionProvider.prototype._getLanguageIdAtPosition = function (model, position) {\n        // validate the `languageId` to ensure this is a user\n        // facing language with a name and the chance to have\n        // snippets, else fall back to the outer language\n        model.tokenizeIfCheap(position.lineNumber);\n        var languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n        var languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n        if (languageIdentifier && !this._modeService.getLanguageName(languageIdentifier.language)) {\n            languageId = model.getLanguageIdentifier().id;\n        }\n        return languageId;\n    };\n    SnippetCompletionProvider._maxPrefix = 10000;\n    SnippetCompletionProvider = tslib_1.__decorate([\n        tslib_1.__param(0, modeService_1.IModeService),\n        tslib_1.__param(1, snippets_contribution_1.ISnippetsService)\n    ], SnippetCompletionProvider);\n    return SnippetCompletionProvider;\n}());\nexports.SnippetCompletionProvider = SnippetCompletionProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { compare } from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CompletionItem, CompletionItemKind, CompletionItemProvider, CompletionList, LanguageId, CompletionItemInsertTextRule, CompletionContext, CompletionTriggerKind } from 'vs/editor/common/modes';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { SnippetParser } from 'vs/editor/contrib/snippet/snippetParser';\nimport { localize } from 'vs/nls';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\n\nexport class SnippetCompletion implements CompletionItem {\n\n\tlabel: string;\n\tdetail: string;\n\tinsertText: string;\n\tdocumentation: MarkdownString;\n\trange: IRange;\n\tsortText: string;\n\tkind: CompletionItemKind;\n\tinsertTextRules: CompletionItemInsertTextRule;\n\n\tconstructor(\n\t\treadonly snippet: Snippet,\n\t\trange: IRange\n\t) {\n\t\tthis.label = snippet.prefix;\n\t\tthis.detail = localize('detail.snippet', \"{0} ({1})\", snippet.description || snippet.name, snippet.source);\n\t\tthis.insertText = snippet.body;\n\t\tthis.range = range;\n\t\tthis.sortText = `${snippet.snippetSource === SnippetSource.Extension ? 'z' : 'a'}-${snippet.prefix}`;\n\t\tthis.kind = CompletionItemKind.Snippet;\n\t\tthis.insertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t}\n\n\tresolve(): this {\n\t\tthis.documentation = new MarkdownString().appendCodeblock('', new SnippetParser().text(this.snippet.codeSnippet));\n\t\tthis.insertText = this.snippet.codeSnippet;\n\t\treturn this;\n\t}\n\n\tstatic compareByLabel(a: SnippetCompletion, b: SnippetCompletion): number {\n\t\treturn compare(a.label, b.label);\n\t}\n}\n\nexport function matches(pattern: string, patternStart: number, word: string, wordStart: number): boolean {\n\twhile (patternStart < pattern.length && wordStart < word.length) {\n\t\tif (pattern[patternStart] === word[wordStart]) {\n\t\t\tpatternStart += 1;\n\t\t}\n\t\twordStart += 1;\n\t}\n\treturn patternStart === pattern.length;\n}\n\nexport class SnippetCompletionProvider implements CompletionItemProvider {\n\n\tprivate static readonly _maxPrefix = 10000;\n\n\tconstructor(\n\t\t@IModeService\n\t\tprivate readonly _modeService: IModeService,\n\t\t@ISnippetsService\n\t\tprivate readonly _snippets: ISnippetsService\n\t) {\n\t\t//\n\t}\n\n\tprovideCompletionItems(model: ITextModel, position: Position, context: CompletionContext): Promise<CompletionList> | undefined {\n\n\t\tif (position.column >= SnippetCompletionProvider._maxPrefix) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (context.triggerKind === CompletionTriggerKind.TriggerCharacter && context.triggerCharacter === ' ') {\n\t\t\t// no snippets when suggestions have been triggered by space\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst languageId = this._getLanguageIdAtPosition(model, position);\n\t\treturn this._snippets.getSnippets(languageId).then(snippets => {\n\n\t\t\tlet suggestions: SnippetCompletion[];\n\t\t\tlet pos = { lineNumber: position.lineNumber, column: 1 };\n\t\t\tlet lineOffsets: number[] = [];\n\t\t\tlet linePrefixLow = model.getLineContent(position.lineNumber).substr(0, position.column - 1).toLowerCase();\n\t\t\tlet endsInWhitespace = linePrefixLow.match(/\\s$/);\n\n\t\t\twhile (pos.column < position.column) {\n\t\t\t\tlet word = model.getWordAtPosition(pos);\n\t\t\t\tif (word) {\n\t\t\t\t\t// at a word\n\t\t\t\t\tlineOffsets.push(word.startColumn - 1);\n\t\t\t\t\tpos.column = word.endColumn + 1;\n\t\t\t\t\tif (word.endColumn - 1 < linePrefixLow.length && !/\\s/.test(linePrefixLow[word.endColumn - 1])) {\n\t\t\t\t\t\tlineOffsets.push(word.endColumn - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (!/\\s/.test(linePrefixLow[pos.column - 1])) {\n\t\t\t\t\t// at a none-whitespace character\n\t\t\t\t\tlineOffsets.push(pos.column - 1);\n\t\t\t\t\tpos.column += 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// always advance!\n\t\t\t\t\tpos.column += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet availableSnippets = new Set<Snippet>();\n\t\t\tsnippets.forEach(availableSnippets.add, availableSnippets);\n\t\t\tsuggestions = [];\n\t\t\tfor (let start of lineOffsets) {\n\t\t\t\tavailableSnippets.forEach(snippet => {\n\t\t\t\t\tif (matches(linePrefixLow, start, snippet.prefixLow, 0)) {\n\t\t\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, Range.fromPositions(position.delta(0, -(linePrefixLow.length - start)), position)));\n\t\t\t\t\t\tavailableSnippets.delete(snippet);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (endsInWhitespace || lineOffsets.length === 0) {\n\t\t\t\t// add remaing snippets when the current prefix ends in whitespace or when no\n\t\t\t\t// interesting positions have been found\n\t\t\t\tavailableSnippets.forEach(snippet => {\n\t\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, Range.fromPositions(position)));\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\t// dismbiguate suggestions with same labels\n\t\t\tsuggestions.sort(SnippetCompletion.compareByLabel);\n\t\t\tfor (let i = 0; i < suggestions.length; i++) {\n\t\t\t\tlet item = suggestions[i];\n\t\t\t\tlet to = i + 1;\n\t\t\t\tfor (; to < suggestions.length && item.label === suggestions[to].label; to++) {\n\t\t\t\t\tsuggestions[to].label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[to].label, suggestions[to].snippet.name);\n\t\t\t\t}\n\t\t\t\tif (to > i + 1) {\n\t\t\t\t\tsuggestions[i].label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[i].label, suggestions[i].snippet.name);\n\t\t\t\t\ti = to;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { suggestions };\n\t\t});\n\t}\n\n\tresolveCompletionItem?(model: ITextModel, position: Position, item: CompletionItem): CompletionItem {\n\t\treturn (item instanceof SnippetCompletion) ? item.resolve() : item;\n\t}\n\n\tprivate _getLanguageIdAtPosition(model: ITextModel, position: Position): LanguageId {\n\t\t// validate the `languageId` to ensure this is a user\n\t\t// facing language with a name and the chance to have\n\t\t// snippets, else fall back to the outer language\n\t\tmodel.tokenizeIfCheap(position.lineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\tif (languageIdentifier && !this._modeService.getLanguageName(languageIdentifier.language)) {\n\t\t\tlanguageId = model.getLanguageIdentifier().id;\n\t\t}\n\t\treturn languageId;\n\t}\n}\n"]}]}