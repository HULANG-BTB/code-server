{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"fs\", \"fs-extra\", \"path\", \"util\", \"@coder/logger\", \"vs/base/common/event\", \"vs/base/node/storage\", \"vs/platform/storage/node/storageIpc\", \"vs/platform/storage/common/storage\", \"./paths\", \"../workbench\"], function (require, exports, fs_1, fs_extra_1, path, util_1, logger_1, event_1, workspaceStorage, globalStorage, storage_1, paths, workbench_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // tslint:disable completed-docs\n    class StorageDatabase {\n        constructor(path) {\n            this.onDidChangeItemsExternal = event_1.Event.None;\n            this.items = new Map();\n            this.fetched = false;\n            this.path = path.replace(/\\.vscdb$/, \".json\");\n            logger_1.logger.debug(\"Setting up storage\", logger_1.field(\"path\", this.path));\n            window.addEventListener(\"unload\", () => {\n                if (!navigator.sendBeacon) {\n                    throw new Error(\"cannot save state\");\n                }\n                this.triggerFlush(storage_1.WillSaveStateReason.SHUTDOWN);\n                const resourceBaseUrl = location.pathname.replace(/\\/$/, \"\") + \"/resource\";\n                navigator.sendBeacon(`${resourceBaseUrl}/${this.path}`, this.content);\n            });\n        }\n        getItems() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (this.fetched) {\n                    return this.items;\n                }\n                try {\n                    const contents = yield util_1.promisify(fs_1.readFile)(this.path, \"utf8\");\n                    const json = JSON.parse(contents);\n                    Object.keys(json).forEach((key) => {\n                        this.items.set(key, json[key]);\n                    });\n                }\n                catch (error) {\n                    if (error.code !== \"ENOENT\") {\n                        throw error;\n                    }\n                }\n                this.fetched = true;\n                return this.items;\n            });\n        }\n        updateItems(request) {\n            if (request.insert) {\n                request.insert.forEach((value, key) => {\n                    if (key === \"colorThemeData\") {\n                        localStorage.setItem(\"colorThemeData\", value);\n                    }\n                    this.items.set(key, value);\n                });\n            }\n            if (request.delete) {\n                request.delete.forEach(key => this.items.delete(key));\n            }\n            return this.save();\n        }\n        close() {\n            return Promise.resolve();\n        }\n        checkIntegrity() {\n            return Promise.resolve(\"ok\");\n        }\n        save() {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield fs_extra_1.mkdirp(path.dirname(this.path));\n                return util_1.promisify(fs_1.writeFile)(this.path, this.content);\n            });\n        }\n        triggerFlush(reason = storage_1.WillSaveStateReason.NONE) {\n            // tslint:disable-next-line:no-any\n            const storageService = workbench_1.workbench.serviceCollection.get(storage_1.IStorageService);\n            if (reason === storage_1.WillSaveStateReason.SHUTDOWN && storageService.close) {\n                storageService.close();\n                return true;\n            }\n            if (storageService._onWillSaveState) {\n                storageService._onWillSaveState.fire({ reason });\n                return true;\n            }\n            return false;\n        }\n        get content() {\n            const json = {};\n            this.items.forEach((value, key) => {\n                json[key] = value;\n            });\n            return JSON.stringify(json);\n        }\n    }\n    class GlobalStorageDatabase extends StorageDatabase {\n        constructor() {\n            super(path.join(paths.getAppDataPath(), \"globalStorage\", \"state.vscdb\"));\n        }\n        dispose() {\n            // Nothing to do.\n        }\n    }\n    const workspaceTarget = workspaceStorage;\n    // @ts-ignore TODO: don't ignore it.\n    workspaceTarget.SQLiteStorageDatabase = StorageDatabase;\n    const globalTarget = globalStorage;\n    // @ts-ignore TODO: don't ignore it.\n    globalTarget.GlobalStorageDatabaseChannelClient = GlobalStorageDatabase;\n});\n",null]}