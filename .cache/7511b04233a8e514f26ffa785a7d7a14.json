{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/standalone/common/monarch/monarchCompile.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/standalone/common/monarch/monarchCompile.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/objects\", \"vs/editor/standalone/common/monarch/monarchCommon\"], function (require, exports, objects, monarchCommon) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /*\n     * Type helpers\n     *\n     * Note: this is just for sanity checks on the JSON description which is\n     * helpful for the programmer. No checks are done anymore once the lexer is\n     * already 'compiled and checked'.\n     *\n     */\n    function isArrayOf(elemType, obj) {\n        if (!obj) {\n            return false;\n        }\n        if (!(Array.isArray(obj))) {\n            return false;\n        }\n        for (let idx in obj) {\n            if (obj.hasOwnProperty(idx)) {\n                if (!(elemType(obj[idx]))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    function bool(prop, defValue) {\n        if (typeof prop === 'boolean') {\n            return prop;\n        }\n        return defValue;\n    }\n    function string(prop, defValue) {\n        if (typeof (prop) === 'string') {\n            return prop;\n        }\n        return defValue;\n    }\n    // Lexer helpers\n    /**\n     * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\n     * Also replaces @\\w+ or sequences with the content of the specified attribute\n     */\n    function compileRegExp(lexer, str) {\n        let n = 0;\n        while (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\n            n++;\n            str = str.replace(/@(\\w+)/g, function (s, attr) {\n                let sub = '';\n                if (typeof (lexer[attr]) === 'string') {\n                    sub = lexer[attr];\n                }\n                else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n                    sub = lexer[attr].source;\n                }\n                else {\n                    if (lexer[attr] === undefined) {\n                        throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n                    }\n                    else {\n                        throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n                    }\n                }\n                return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n            });\n        }\n        return new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\n    }\n    /**\n     * Compiles guard functions for case matches.\n     * This compiles 'cases' attributes into efficient match functions.\n     *\n     */\n    function selectScrutinee(id, matches, state, num) {\n        if (num < 0) {\n            return id;\n        }\n        if (num < matches.length) {\n            return matches[num];\n        }\n        if (num >= 100) {\n            num = num - 100;\n            let parts = state.split('.');\n            parts.unshift(state);\n            if (num < parts.length) {\n                return parts[num];\n            }\n        }\n        return null;\n    }\n    function createGuard(lexer, ruleName, tkey, val) {\n        // get the scrutinee and pattern\n        let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n        let oppat = tkey;\n        let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n        if (matches) {\n            if (matches[3]) { // if digits\n                scrut = parseInt(matches[3]);\n                if (matches[2]) {\n                    scrut = scrut + 100; // if [sS] present\n                }\n            }\n            oppat = matches[4];\n        }\n        // get operator\n        let op = '~';\n        let pat = oppat;\n        if (!oppat || oppat.length === 0) {\n            op = '!=';\n            pat = '';\n        }\n        else if (/^\\w*$/.test(pat)) { // just a word\n            op = '==';\n        }\n        else {\n            matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n            if (matches) {\n                op = matches[1];\n                pat = matches[2];\n            }\n        }\n        // set the tester function\n        let tester;\n        // special case a regexp that matches just words\n        if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n            let inWords = objects.createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n            tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n        }\n        else if (op === '@' || op === '!@') {\n            let words = lexer[pat];\n            if (!words) {\n                throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n            }\n            if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\n                throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n            }\n            let inWords = objects.createKeywordMatcher(words, lexer.ignoreCase);\n            tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n        }\n        else if (op === '~' || op === '!~') {\n            if (pat.indexOf('$') < 0) {\n                // precompile regular expression\n                let re = compileRegExp(lexer, '^' + pat + '$');\n                tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n            }\n            else {\n                tester = function (s, id, matches, state) {\n                    let re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n                    return re.test(s);\n                };\n            }\n        }\n        else { // if (op==='==' || op==='!=') {\n            if (pat.indexOf('$') < 0) {\n                let patx = monarchCommon.fixCase(lexer, pat);\n                tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\n            }\n            else {\n                let patx = monarchCommon.fixCase(lexer, pat);\n                tester = function (s, id, matches, state, eos) {\n                    let patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n                    return (op === '==' ? s === patexp : s !== patexp);\n                };\n            }\n        }\n        // return the branch object\n        if (scrut === -1) {\n            return {\n                name: tkey, value: val, test: function (id, matches, state, eos) {\n                    return tester(id, id, matches, state, eos);\n                }\n            };\n        }\n        else {\n            return {\n                name: tkey, value: val, test: function (id, matches, state, eos) {\n                    let scrutinee = selectScrutinee(id, matches, state, scrut);\n                    return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n                }\n            };\n        }\n    }\n    /**\n     * Compiles an action: i.e. optimize regular expressions and case matches\n     * and do many sanity checks.\n     *\n     * This is called only during compilation but if the lexer definition\n     * contains user functions as actions (which is usually not allowed), then this\n     * may be called during lexing. It is important therefore to compile common cases efficiently\n     */\n    function compileAction(lexer, ruleName, action) {\n        if (!action) {\n            return { token: '' };\n        }\n        else if (typeof (action) === 'string') {\n            return action; // { token: action };\n        }\n        else if (action.token || action.token === '') {\n            if (typeof (action.token) !== 'string') {\n                throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n            }\n            else {\n                // only copy specific typed fields (only happens once during compile Lexer)\n                let newAction = { token: action.token };\n                if (action.token.indexOf('$') >= 0) {\n                    newAction.tokenSubst = true;\n                }\n                if (typeof (action.bracket) === 'string') {\n                    if (action.bracket === '@open') {\n                        newAction.bracket = monarchCommon.MonarchBracket.Open;\n                    }\n                    else if (action.bracket === '@close') {\n                        newAction.bracket = monarchCommon.MonarchBracket.Close;\n                    }\n                    else {\n                        throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n                    }\n                }\n                if (action.next) {\n                    if (typeof (action.next) !== 'string') {\n                        throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n                    }\n                    else {\n                        let next = action.next;\n                        if (!/^(@pop|@push|@popall)$/.test(next)) {\n                            if (next[0] === '@') {\n                                next = next.substr(1); // peel off starting @ sign\n                            }\n                            if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\n                                if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                                    throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n                                }\n                            }\n                        }\n                        newAction.next = next;\n                    }\n                }\n                if (typeof (action.goBack) === 'number') {\n                    newAction.goBack = action.goBack;\n                }\n                if (typeof (action.switchTo) === 'string') {\n                    newAction.switchTo = action.switchTo;\n                }\n                if (typeof (action.log) === 'string') {\n                    newAction.log = action.log;\n                }\n                if (typeof (action.nextEmbedded) === 'string') {\n                    newAction.nextEmbedded = action.nextEmbedded;\n                    lexer.usesEmbedded = true;\n                }\n                return newAction;\n            }\n        }\n        else if (Array.isArray(action)) {\n            let results = [];\n            for (let idx in action) {\n                if (action.hasOwnProperty(idx)) {\n                    results[idx] = compileAction(lexer, ruleName, action[idx]);\n                }\n            }\n            return { group: results };\n        }\n        else if (action.cases) {\n            // build an array of test cases\n            let cases = [];\n            // for each case, push a test function and result value\n            for (let tkey in action.cases) {\n                if (action.cases.hasOwnProperty(tkey)) {\n                    const val = compileAction(lexer, ruleName, action.cases[tkey]);\n                    // what kind of case\n                    if (tkey === '@default' || tkey === '@' || tkey === '') {\n                        cases.push({ test: undefined, value: val, name: tkey });\n                    }\n                    else if (tkey === '@eos') {\n                        cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\n                    }\n                    else {\n                        cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n                    }\n                }\n            }\n            // create a matching function\n            const def = lexer.defaultToken;\n            return {\n                test: function (id, matches, state, eos) {\n                    for (let idx in cases) {\n                        if (cases.hasOwnProperty(idx)) {\n                            const _case = cases[idx];\n                            const didmatch = (!_case.test || _case.test(id, matches, state, eos));\n                            if (didmatch) {\n                                return _case.value;\n                            }\n                        }\n                    }\n                    return def;\n                }\n            };\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n        }\n    }\n    /**\n     * Helper class for creating matching rules\n     */\n    class Rule {\n        constructor(name) {\n            this.regex = new RegExp('');\n            this.action = { token: '' };\n            this.matchOnlyAtLineStart = false;\n            this.name = '';\n            this.name = name;\n        }\n        setRegex(lexer, re) {\n            let sregex;\n            if (typeof (re) === 'string') {\n                sregex = re;\n            }\n            else if (re instanceof RegExp) {\n                sregex = re.source;\n            }\n            else {\n                throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n            }\n            this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n            this.name = this.name + ': ' + sregex;\n            this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n        }\n        setAction(lexer, act) {\n            this.action = compileAction(lexer, this.name, act);\n        }\n    }\n    /**\n     * Compiles a json description function into json where all regular expressions,\n     * case matches etc, are compiled and all include rules are expanded.\n     * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n     * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n     * regular expression objects and functions that get called during lexing.\n     * (Currently we have no samples that need this so perhaps we should always have\n     * jsonStrict to true).\n     */\n    function compile(languageId, json) {\n        if (!json || typeof (json) !== 'object') {\n            throw new Error('Monarch: expecting a language definition object');\n        }\n        // Create our lexer\n        let lexer = {};\n        lexer.languageId = languageId;\n        lexer.noThrow = false; // raise exceptions during compilation\n        lexer.maxStack = 100;\n        // Set standard fields: be defensive about types\n        lexer.start = (typeof json.start === 'string' ? json.start : null);\n        lexer.ignoreCase = bool(json.ignoreCase, false);\n        lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n        lexer.defaultToken = string(json.defaultToken, 'source');\n        lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n        // For calling compileAction later on\n        let lexerMin = json;\n        lexerMin.languageId = languageId;\n        lexerMin.ignoreCase = lexer.ignoreCase;\n        lexerMin.noThrow = lexer.noThrow;\n        lexerMin.usesEmbedded = lexer.usesEmbedded;\n        lexerMin.stateNames = json.tokenizer;\n        lexerMin.defaultToken = lexer.defaultToken;\n        // Compile an array of rules into newrules where RegExp objects are created.\n        function addRules(state, newrules, rules) {\n            for (let idx in rules) {\n                if (rules.hasOwnProperty(idx)) {\n                    const rule = rules[idx];\n                    let include = rule.include;\n                    if (include) {\n                        if (typeof (include) !== 'string') {\n                            throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n                        }\n                        if (include[0] === '@') {\n                            include = include.substr(1); // peel off starting @\n                        }\n                        if (!json.tokenizer[include]) {\n                            throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n                        }\n                        addRules(state + '.' + include, newrules, json.tokenizer[include]);\n                    }\n                    else {\n                        const newrule = new Rule(state);\n                        // Set up new rule attributes\n                        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n                            newrule.setRegex(lexerMin, rule[0]);\n                            if (rule.length >= 3) {\n                                if (typeof (rule[1]) === 'string') {\n                                    newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n                                }\n                                else if (typeof (rule[1]) === 'object') {\n                                    const rule1 = rule[1];\n                                    rule1.next = rule[2];\n                                    newrule.setAction(lexerMin, rule1);\n                                }\n                                else {\n                                    throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n                                }\n                            }\n                            else {\n                                newrule.setAction(lexerMin, rule[1]);\n                            }\n                        }\n                        else {\n                            if (!rule.regex) {\n                                throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n                            }\n                            if (rule.name) {\n                                if (typeof rule.name === 'string') {\n                                    newrule.name = rule.name;\n                                }\n                            }\n                            if (rule.matchOnlyAtStart) {\n                                newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n                            }\n                            newrule.setRegex(lexerMin, rule.regex);\n                            newrule.setAction(lexerMin, rule.action);\n                        }\n                        newrules.push(newrule);\n                    }\n                }\n            }\n        }\n        // compile the tokenizer rules\n        if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n            throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n        }\n        lexer.tokenizer = [];\n        for (let key in json.tokenizer) {\n            if (json.tokenizer.hasOwnProperty(key)) {\n                if (!lexer.start) {\n                    lexer.start = key;\n                }\n                const rules = json.tokenizer[key];\n                lexer.tokenizer[key] = new Array();\n                addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n            }\n        }\n        lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n        // Set simple brackets\n        if (json.brackets) {\n            if (!(Array.isArray(json.brackets))) {\n                throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n            }\n        }\n        else {\n            json.brackets = [\n                { open: '{', close: '}', token: 'delimiter.curly' },\n                { open: '[', close: ']', token: 'delimiter.square' },\n                { open: '(', close: ')', token: 'delimiter.parenthesis' },\n                { open: '<', close: '>', token: 'delimiter.angle' }\n            ];\n        }\n        let brackets = [];\n        for (let bracketIdx in json.brackets) {\n            if (json.brackets.hasOwnProperty(bracketIdx)) {\n                let desc = json.brackets[bracketIdx];\n                if (desc && Array.isArray(desc) && desc.length === 3) {\n                    desc = { token: desc[2], open: desc[0], close: desc[1] };\n                }\n                if (desc.open === desc.close) {\n                    throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n                        '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n                }\n                if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n                    brackets.push({\n                        token: desc.token + lexer.tokenPostfix,\n                        open: monarchCommon.fixCase(lexer, desc.open),\n                        close: monarchCommon.fixCase(lexer, desc.close)\n                    });\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n                }\n            }\n        }\n        lexer.brackets = brackets;\n        // Disable throw so the syntax highlighter goes, no matter what\n        lexer.noThrow = true;\n        return lexer;\n    }\n    exports.compile = compile;\n});\n",null]}