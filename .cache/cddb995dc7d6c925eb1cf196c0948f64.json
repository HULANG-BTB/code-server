{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/wordContextKey.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/wordContextKey.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/contextkey/common/contextkey\", \"vs/base/common/lifecycle\"], function (require, exports, contextkey_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WordContextKey = class WordContextKey {\n        constructor(_editor, contextKeyService) {\n            this._editor = _editor;\n            this._ckAtEnd = WordContextKey.AtEnd.bindTo(contextKeyService);\n            this._confListener = this._editor.onDidChangeConfiguration(e => e.contribInfo && this._update());\n            this._update();\n        }\n        dispose() {\n            lifecycle_1.dispose(this._confListener, this._selectionListener);\n            this._ckAtEnd.reset();\n        }\n        _update() {\n            // only update this when tab completions are enabled\n            const enabled = this._editor.getConfiguration().contribInfo.tabCompletion === 'on';\n            if (this._enabled === enabled) {\n                return;\n            }\n            this._enabled = enabled;\n            if (this._enabled) {\n                const checkForWordEnd = () => {\n                    if (!this._editor.hasModel()) {\n                        this._ckAtEnd.set(false);\n                        return;\n                    }\n                    const model = this._editor.getModel();\n                    const selection = this._editor.getSelection();\n                    const word = model.getWordAtPosition(selection.getStartPosition());\n                    if (!word) {\n                        this._ckAtEnd.set(false);\n                        return;\n                    }\n                    this._ckAtEnd.set(word.endColumn === selection.getStartPosition().column);\n                };\n                this._selectionListener = this._editor.onDidChangeCursorSelection(checkForWordEnd);\n                checkForWordEnd();\n            }\n            else if (this._selectionListener) {\n                this._ckAtEnd.reset();\n                this._selectionListener.dispose();\n                this._selectionListener = undefined;\n            }\n        }\n    };\n    WordContextKey.AtEnd = new contextkey_1.RawContextKey('atEndOfWord', false);\n    WordContextKey = __decorate([\n        __param(1, contextkey_1.IContextKeyService)\n    ], WordContextKey);\n    exports.WordContextKey = WordContextKey;\n});\n",null]}