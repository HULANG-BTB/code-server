{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/ide/src/client.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/client.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar logger_1 = require(\"@coder/logger\");\nvar retry_1 = require(\"./retry\");\nvar upload_1 = require(\"./upload\");\nvar client_1 = require(\"./fill/client\");\nvar clipboard_1 = require(\"./fill/clipboard\");\nrequire(\"./fill/os\"); // Ensure it fills before anything else waiting on initData.\n/**\n * A general abstraction of an IDE client.\n *\n * Everything the client provides is asynchronous so you can wait on what\n * you need from it without blocking anything else.\n *\n * It also provides task management to help asynchronously load and time code.\n */\nvar IdeClient = /** @class */ (function () {\n    function IdeClient() {\n        var _this = this;\n        this.retry = retry_1.retry;\n        this.clipboard = clipboard_1.clipboard;\n        this.upload = upload_1.upload;\n        this.tasks = [];\n        this.finishedTaskCount = 0;\n        this.initData = client_1.client.initData;\n        this.onSharedProcessActive = client_1.client.onSharedProcessActive;\n        logger_1.logger.info(\"Loading IDE\");\n        this.loadTime = logger_1.time(2500);\n        var appWindow;\n        window.addEventListener(\"beforeunload\", function (e) {\n            e.preventDefault(); // FireFox\n            e.returnValue = \"\"; // Chrome\n        });\n        window.addEventListener(\"message\", function (event) {\n            if (event.data === \"app\") {\n                appWindow = event.source;\n            }\n        });\n        this.sharedProcessData = new Promise(function (resolve) {\n            var d = client_1.client.onSharedProcessActive(function (data) {\n                d.dispose();\n                d = client_1.client.onSharedProcessActive(function () {\n                    d.dispose();\n                    _this.retry.notificationService.error(new Error(\"Disconnected from shared process. Searching, installing, enabling, and disabling extensions will not work until the page is refreshed.\"));\n                });\n                resolve(data);\n            });\n        });\n        window.addEventListener(\"contextmenu\", function (event) {\n            event.preventDefault();\n        });\n        // Prevent Firefox from trying to reconnect when the page unloads.\n        window.addEventListener(\"unload\", function () {\n            _this.retry.block();\n            logger_1.logger.info(\"Unloaded\");\n        });\n        this.initialize().then(function () {\n            logger_1.logger.info(\"Load completed\", logger_1.field(\"duration\", _this.loadTime));\n            if (appWindow) {\n                appWindow.postMessage(\"loaded\", \"*\");\n            }\n        }).catch(function (error) {\n            logger_1.logger.error(error.message);\n            logger_1.logger.warn(\"Load completed with errors\", logger_1.field(\"duration\", _this.loadTime));\n        });\n    }\n    /**\n     * Wrap a task in some logging, timing, and progress updates. Can optionally\n     * wait on other tasks which won't count towards this task's time.\n     */\n    IdeClient.prototype.task = function (description, duration, task) {\n        if (duration === void 0) { duration = 100; }\n        var after = []; // tslint:disable-line no-any\n        for (var _i = 3 // tslint:disable-line no-any\n        ; _i < arguments.length // tslint:disable-line no-any\n        ; _i++ // tslint:disable-line no-any\n        ) {\n            after[_i - 3] = arguments[_i]; // tslint:disable-line no-any\n        }\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var start, waitFor, value, index, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.tasks.push(description);\n                        if (!this.start) {\n                            this.start = logger_1.time(1000);\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, (after && after.length > 0 ? Promise.all(after) : Promise.resolve([]))];\n                    case 2:\n                        waitFor = _a.sent();\n                        start = logger_1.time(duration);\n                        logger_1.logger.info(description);\n                        return [4 /*yield*/, task.apply(void 0, waitFor)];\n                    case 3:\n                        value = _a.sent();\n                        logger_1.logger.info(\"Finished \\\"\" + description + \"\\\"\", logger_1.field(\"duration\", start));\n                        index = this.tasks.indexOf(description);\n                        if (index !== -1) {\n                            this.tasks.splice(index, 1);\n                        }\n                        ++this.finishedTaskCount;\n                        if (this.tasks.length === 0) {\n                            logger_1.logger.info(\"Finished all queued tasks\", logger_1.field(\"duration\", this.start), logger_1.field(\"count\", this.finishedTaskCount));\n                            this.start = undefined;\n                        }\n                        return [2 /*return*/, value];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger_1.logger.error(\"Failed \\\"\" + description + \"\\\"\", logger_1.field(\"duration\", typeof start !== \"undefined\" ? start : \"not started\"), logger_1.field(\"error\", error_1));\n                        throw error_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(IdeClient.prototype, \"notificationService\", {\n        set: function (service) {\n            this.retry.notificationService = service;\n            this.upload.notificationService = service;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IdeClient.prototype, \"progressService\", {\n        set: function (service) {\n            this.upload.progressService = service;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdeClient;\n}());\nexports.IdeClient = IdeClient;\n",{"version":3,"file":"/home/coding/workspace/packages/ide/src/client.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/ide/src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { field, logger, time, Time } from \"@coder/logger\";\nimport { SharedProcessData } from \"@coder/protocol\";\nimport { retry } from \"./retry\";\nimport { upload } from \"./upload\";\nimport { client } from \"./fill/client\";\nimport { clipboard } from \"./fill/clipboard\";\nimport { INotificationService, IProgressService } from \"./fill/notification\";\nimport \"./fill/os\"; // Ensure it fills before anything else waiting on initData.\n\n/**\n * A general abstraction of an IDE client.\n *\n * Everything the client provides is asynchronous so you can wait on what\n * you need from it without blocking anything else.\n *\n * It also provides task management to help asynchronously load and time code.\n */\nexport abstract class IdeClient {\n\tpublic readonly retry = retry;\n\tpublic readonly clipboard = clipboard;\n\tpublic readonly upload = upload;\n\n\tprivate start: Time | undefined;\n\tprivate readonly tasks = <string[]>[];\n\tprivate finishedTaskCount = 0;\n\tprivate readonly loadTime: Time;\n\n\tpublic readonly initData = client.initData;\n\tpublic readonly sharedProcessData: Promise<SharedProcessData>;\n\tpublic readonly onSharedProcessActive = client.onSharedProcessActive;\n\n\tpublic constructor() {\n\t\tlogger.info(\"Loading IDE\");\n\t\tthis.loadTime = time(2500);\n\n\t\tlet appWindow: Window | undefined;\n\n\t\twindow.addEventListener(\"beforeunload\", (e) => {\n\t\t\te.preventDefault(); // FireFox\n\t\t\te.returnValue = \"\"; // Chrome\n\t\t});\n\n\t\twindow.addEventListener(\"message\", (event) => {\n\t\t\tif (event.data === \"app\") {\n\t\t\t\tappWindow = event.source as Window;\n\t\t\t}\n\t\t});\n\n\t\tthis.sharedProcessData = new Promise((resolve): void => {\n\t\t\tlet d = client.onSharedProcessActive((data) => {\n\t\t\t\td.dispose();\n\t\t\t\td = client.onSharedProcessActive(() => {\n\t\t\t\t\td.dispose();\n\t\t\t\t\tthis.retry.notificationService.error(\n\t\t\t\t\t\tnew Error(\"Disconnected from shared process. Searching, installing, enabling, and disabling extensions will not work until the page is refreshed.\"),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\n\t\twindow.addEventListener(\"contextmenu\", (event) => {\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\t// Prevent Firefox from trying to reconnect when the page unloads.\n\t\twindow.addEventListener(\"unload\", () => {\n\t\t\tthis.retry.block();\n\t\t\tlogger.info(\"Unloaded\");\n\t\t});\n\n\t\tthis.initialize().then(() => {\n\t\t\tlogger.info(\"Load completed\", field(\"duration\", this.loadTime));\n\t\t\tif (appWindow) {\n\t\t\t\tappWindow.postMessage(\"loaded\", \"*\");\n\t\t\t}\n\t\t}).catch((error) => {\n\t\t\tlogger.error(error.message);\n\t\t\tlogger.warn(\"Load completed with errors\", field(\"duration\", this.loadTime));\n\t\t});\n\t}\n\n\tpublic async task<T>(description: string, duration: number, task: () => Promise<T>): Promise<T>;\n\tpublic async task<T, V>(description: string, duration: number, task: (v: V) => Promise<T>, t: Promise<V>): Promise<T>;\n\tpublic async task<T, V1, V2>(description: string, duration: number, task: (v1: V1, v2: V2) => Promise<T>, t1: Promise<V1>, t2: Promise<V2>): Promise<T>;\n\tpublic async task<T, V1, V2, V3>(description: string, duration: number, task: (v1: V1, v2: V2, v3: V3) => Promise<T>, t1: Promise<V1>, t2: Promise<V2>, t3: Promise<V3>): Promise<T>;\n\tpublic async task<T, V1, V2, V3, V4>(description: string, duration: number, task: (v1: V1, v2: V2, v3: V3, v4: V4) => Promise<T>, t1: Promise<V1>, t2: Promise<V2>, t3: Promise<V3>, t4: Promise<V4>): Promise<T>;\n\tpublic async task<T, V1, V2, V3, V4, V5>(description: string, duration: number, task: (v1: V1, v2: V2, v3: V3, v4: V4, v5: V5) => Promise<T>, t1: Promise<V1>, t2: Promise<V2>, t3: Promise<V3>, t4: Promise<V4>, t5: Promise<V5>): Promise<T>;\n\tpublic async task<T, V1, V2, V3, V4, V5, V6>(description: string, duration: number, task: (v1: V1, v2: V2, v3: V3, v4: V4, v5: V5, v6: V6) => Promise<T>, t1: Promise<V1>, t2: Promise<V2>, t3: Promise<V3>, t4: Promise<V4>, t5: Promise<V5>, t6: Promise<V6>): Promise<T>;\n\t/**\n\t * Wrap a task in some logging, timing, and progress updates. Can optionally\n\t * wait on other tasks which won't count towards this task's time.\n\t */\n\tpublic async task<T>(\n\t\tdescription: string, duration: number = 100, task: (...args: any[]) => Promise<T>, ...after: Array<Promise<any>> // tslint:disable-line no-any\n\t): Promise<T> {\n\t\tthis.tasks.push(description);\n\t\tif (!this.start) {\n\t\t\tthis.start = time(1000);\n\t\t}\n\n\t\tlet start: Time | undefined;\n\t\ttry {\n\t\t\tconst waitFor = await (after && after.length > 0 ? Promise.all(after) : Promise.resolve([]));\n\t\t\tstart = time(duration);\n\t\t\tlogger.info(description);\n\t\t\tconst value = await task(...waitFor);\n\t\t\tlogger.info(`Finished \"${description}\"`, field(\"duration\", start));\n\t\t\tconst index = this.tasks.indexOf(description);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.tasks.splice(index, 1);\n\t\t\t}\n\t\t\t++this.finishedTaskCount;\n\t\t\tif (this.tasks.length === 0) {\n\t\t\t\tlogger.info(\"Finished all queued tasks\", field(\"duration\", this.start), field(\"count\", this.finishedTaskCount));\n\t\t\t\tthis.start = undefined;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tlogger.error(`Failed \"${description}\"`, field(\"duration\", typeof start !== \"undefined\" ? start : \"not started\"), field(\"error\", error));\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic set notificationService(service: INotificationService) {\n\t\tthis.retry.notificationService = service;\n\t\tthis.upload.notificationService = service;\n\t}\n\n\tpublic set progressService(service: IProgressService) {\n\t\tthis.upload.progressService = service;\n\t}\n\n\t/**\n\t * Initialize the IDE.\n\t */\n\tprotected abstract initialize(): Promise<void>;\n}\n"]}]}