{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar event_1 = require(\"vs/base/common/event\");\nvar LogLevelSetterChannel = /** @class */ (function () {\n    function LogLevelSetterChannel(service) {\n        this.service = service;\n        this.onDidChangeLogLevel = event_1.Event.buffer(service.onDidChangeLogLevel, true);\n    }\n    LogLevelSetterChannel.prototype.listen = function (_, event) {\n        switch (event) {\n            case 'onDidChangeLogLevel': return this.onDidChangeLogLevel;\n        }\n        throw new Error(\"Event not found: \" + event);\n    };\n    LogLevelSetterChannel.prototype.call = function (_, command, arg) {\n        switch (command) {\n            case 'setLevel':\n                this.service.setLevel(arg);\n                return Promise.resolve();\n        }\n        throw new Error(\"Call not found: \" + command);\n    };\n    return LogLevelSetterChannel;\n}());\nexports.LogLevelSetterChannel = LogLevelSetterChannel;\nvar LogLevelSetterChannelClient = /** @class */ (function () {\n    function LogLevelSetterChannelClient(channel) {\n        this.channel = channel;\n    }\n    Object.defineProperty(LogLevelSetterChannelClient.prototype, \"onDidChangeLogLevel\", {\n        get: function () {\n            return this.channel.listen('onDidChangeLogLevel');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LogLevelSetterChannelClient.prototype.setLevel = function (level) {\n        this.channel.call('setLevel', level);\n    };\n    return LogLevelSetterChannelClient;\n}());\nexports.LogLevelSetterChannelClient = LogLevelSetterChannelClient;\nvar FollowerLogService = /** @class */ (function (_super) {\n    tslib_1.__extends(FollowerLogService, _super);\n    function FollowerLogService(master, logService) {\n        var _this = _super.call(this, logService) || this;\n        _this.master = master;\n        _this._register(master.onDidChangeLogLevel(function (level) { return logService.setLevel(level); }));\n        return _this;\n    }\n    FollowerLogService.prototype.setLevel = function (level) {\n        this.master.setLevel(level);\n    };\n    return FollowerLogService;\n}(log_1.DelegatedLogService));\nexports.FollowerLogService = FollowerLogService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,kDAAwF;AACxF,8CAA6C;AAE7C;IAIC,+BAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;QACvC,IAAI,CAAC,mBAAmB,GAAG,aAAK,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC5E,CAAC;IAED,sCAAM,GAAN,UAAO,CAAU,EAAE,KAAa;QAC/B,QAAQ,KAAK,EAAE;YACd,KAAK,qBAAqB,CAAC,CAAC,OAAO,IAAI,CAAC,mBAAmB,CAAC;SAC5D;QAED,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,oCAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,GAAS;QAC1C,QAAQ,OAAO,EAAE;YAChB,KAAK,UAAU;gBAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAAC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SACtE;QAED,MAAM,IAAI,KAAK,CAAC,qBAAmB,OAAS,CAAC,CAAC;IAC/C,CAAC;IACF,4BAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,sDAAqB;AAyBlC;IAEC,qCAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,sBAAI,4DAAmB;aAAvB;YACC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACnD,CAAC;;;OAAA;IAED,8CAAQ,GAAR,UAAS,KAAe;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IACF,kCAAC;AAAD,CAAC,AAXD,IAWC;AAXY,kEAA2B;AAaxC;IAAwC,8CAAmB;IAG1D,4BAAoB,MAAmC,EAAE,UAAuB;QAAhF,YACC,kBAAM,UAAU,CAAC,SAEjB;QAHmB,YAAM,GAAN,MAAM,CAA6B;QAEtD,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC,CAAC;;IACjF,CAAC;IAED,qCAAQ,GAAR,UAAS,KAAe;QACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACF,yBAAC;AAAD,CAAC,AAXD,CAAwC,yBAAmB,GAW1D;AAXY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { LogLevel, ILogService, DelegatedLogService } from 'vs/platform/log/common/log';\nimport { Event } from 'vs/base/common/event';\n\nexport class LogLevelSetterChannel implements IServerChannel {\n\n\tonDidChangeLogLevel: Event<LogLevel>;\n\n\tconstructor(private service: ILogService) {\n\t\tthis.onDidChangeLogLevel = Event.buffer(service.onDidChangeLogLevel, true);\n\t}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLogLevel': return this.onDidChangeLogLevel;\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'setLevel': this.service.setLevel(arg); return Promise.resolve();\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class LogLevelSetterChannelClient {\n\n\tconstructor(private channel: IChannel) { }\n\n\tget onDidChangeLogLevel(): Event<LogLevel> {\n\t\treturn this.channel.listen('onDidChangeLogLevel');\n\t}\n\n\tsetLevel(level: LogLevel): void {\n\t\tthis.channel.call('setLevel', level);\n\t}\n}\n\nexport class FollowerLogService extends DelegatedLogService implements ILogService {\n\t_serviceBrand: any;\n\n\tconstructor(private master: LogLevelSetterChannelClient, logService: ILogService) {\n\t\tsuper(logService);\n\t\tthis._register(master.onDidChangeLogLevel(level => logService.setLevel(level)));\n\t}\n\n\tsetLevel(level: LogLevel): void {\n\t\tthis.master.setLevel(level);\n\t}\n}"]}]}