{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsUtils.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsUtils.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar nls_1 = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar KeymapExtensions = /** @class */ (function () {\n    function KeymapExtensions(instantiationService, extensionEnablementService, tipsService, lifecycleService, notificationService, telemetryService) {\n        var _this = this;\n        this.instantiationService = instantiationService;\n        this.extensionEnablementService = extensionEnablementService;\n        this.tipsService = tipsService;\n        this.notificationService = notificationService;\n        this.telemetryService = telemetryService;\n        this.disposables = [];\n        this.disposables.push(lifecycleService.onShutdown(function () { return _this.dispose(); }), instantiationService.invokeFunction(onExtensionChanged)((function (identifiers) {\n            Promise.all(identifiers.map(function (identifier) { return _this.checkForOtherKeymaps(identifier); }))\n                .then(undefined, errors_1.onUnexpectedError);\n        })));\n    }\n    KeymapExtensions.prototype.checkForOtherKeymaps = function (extensionIdentifier) {\n        var _this = this;\n        return this.instantiationService.invokeFunction(getInstalledExtensions).then(function (extensions) {\n            var keymaps = extensions.filter(function (extension) { return isKeymapExtension(_this.tipsService, extension); });\n            var extension = arrays.first(keymaps, function (extension) { return extensionManagementUtil_1.areSameExtensions(extension.identifier, extensionIdentifier); });\n            if (extension && extension.globallyEnabled) {\n                var otherKeymaps = keymaps.filter(function (extension) { return !extensionManagementUtil_1.areSameExtensions(extension.identifier, extensionIdentifier) && extension.globallyEnabled; });\n                if (otherKeymaps.length) {\n                    return _this.promptForDisablingOtherKeymaps(extension, otherKeymaps);\n                }\n            }\n            return undefined;\n        });\n    };\n    KeymapExtensions.prototype.promptForDisablingOtherKeymaps = function (newKeymap, oldKeymaps) {\n        var _this = this;\n        var onPrompt = function (confirmed) {\n            var telemetryData = {\n                newKeymap: newKeymap.identifier,\n                oldKeymaps: oldKeymaps.map(function (k) { return k.identifier; }),\n                confirmed: confirmed\n            };\n            /* __GDPR__\n                \"disableOtherKeymaps\" : {\n                    \"newKeymap\": { \"${inline}\": [ \"${ExtensionIdentifier}\" ] },\n                    \"oldKeymaps\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                    \"confirmed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            _this.telemetryService.publicLog('disableOtherKeymaps', telemetryData);\n            if (confirmed) {\n                _this.extensionEnablementService.setEnablement(oldKeymaps.map(function (keymap) { return keymap.local; }), extensionManagement_1.EnablementState.Disabled);\n            }\n        };\n        this.notificationService.prompt(notification_1.Severity.Info, nls_1.localize('disableOtherKeymapsConfirmation', \"Disable other keymaps ({0}) to avoid conflicts between keybindings?\", oldKeymaps.map(function (k) { return \"'\" + k.local.manifest.displayName + \"'\"; }).join(', ')), [{\n                label: nls_1.localize('yes', \"Yes\"),\n                run: function () { return onPrompt(true); }\n            }, {\n                label: nls_1.localize('no', \"No\"),\n                run: function () { return onPrompt(false); }\n            }]);\n    };\n    KeymapExtensions.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    KeymapExtensions = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(2, extensionManagement_1.IExtensionTipsService),\n        tslib_1.__param(3, lifecycle_2.ILifecycleService),\n        tslib_1.__param(4, notification_1.INotificationService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService)\n    ], KeymapExtensions);\n    return KeymapExtensions;\n}());\nexports.KeymapExtensions = KeymapExtensions;\nfunction onExtensionChanged(accessor) {\n    var extensionService = accessor.get(extensionManagement_1.IExtensionManagementService);\n    var extensionEnablementService = accessor.get(extensionManagement_1.IExtensionEnablementService);\n    var onDidInstallExtension = event_1.Event.chain(extensionService.onDidInstallExtension)\n        .filter(function (e) { return e.operation === extensionManagement_1.InstallOperation.Install; })\n        .event;\n    return event_1.Event.debounce(event_1.Event.any(event_1.Event.chain(event_1.Event.any(onDidInstallExtension, extensionService.onDidUninstallExtension))\n        .map(function (e) { return [e.identifier]; })\n        .event, event_1.Event.map(extensionEnablementService.onEnablementChanged, function (extensions) { return extensions.map(function (e) { return e.identifier; }); })), function (result, identifiers) {\n        result = result || [];\n        var _loop_1 = function (identifier) {\n            if (result.some(function (l) { return !extensionManagementUtil_1.areSameExtensions(l, identifier); })) {\n                result.push(identifier);\n            }\n        };\n        for (var _i = 0, identifiers_1 = identifiers; _i < identifiers_1.length; _i++) {\n            var identifier = identifiers_1[_i];\n            _loop_1(identifier);\n        }\n        return result;\n    });\n}\nexports.onExtensionChanged = onExtensionChanged;\nfunction getInstalledExtensions(accessor) {\n    var extensionService = accessor.get(extensionManagement_1.IExtensionManagementService);\n    var extensionEnablementService = accessor.get(extensionManagement_1.IExtensionEnablementService);\n    return extensionService.getInstalled().then(function (extensions) {\n        return extensionEnablementService.getDisabledExtensions()\n            .then(function (disabledExtensions) {\n            return extensions.map(function (extension) {\n                return {\n                    identifier: extension.identifier,\n                    local: extension,\n                    globallyEnabled: disabledExtensions.every(function (disabled) { return !extensionManagementUtil_1.areSameExtensions(disabled, extension.identifier); })\n                };\n            });\n        });\n    });\n}\nexports.getInstalledExtensions = getInstalledExtensions;\nfunction isKeymapExtension(tipsService, extension) {\n    var cats = extension.local.manifest.categories;\n    return cats && cats.indexOf('Keymaps') !== -1 || tipsService.getKeymapRecommendations().some(function (_a) {\n        var extensionId = _a.extensionId;\n        return extensionManagementUtil_1.areSameExtensions({ id: extensionId }, extension.local.identifier);\n    });\n}\nexports.isKeymapExtension = isKeymapExtension;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsUtils.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { localize } from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionManagementService, ILocalExtension, IExtensionEnablementService, IExtensionTipsService, IExtensionIdentifier, EnablementState, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\n\nexport interface IExtensionStatus {\n\tidentifier: IExtensionIdentifier;\n\tlocal: ILocalExtension;\n\tgloballyEnabled: boolean;\n}\n\nexport class KeymapExtensions implements IWorkbenchContribution {\n\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionEnablementService private readonly extensionEnablementService: IExtensionEnablementService,\n\t\t@IExtensionTipsService private readonly tipsService: IExtensionTipsService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.disposables.push(\n\t\t\tlifecycleService.onShutdown(() => this.dispose()),\n\t\t\tinstantiationService.invokeFunction(onExtensionChanged)((identifiers => {\n\t\t\t\tPromise.all(identifiers.map(identifier => this.checkForOtherKeymaps(identifier)))\n\t\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t\t}))\n\t\t);\n\t}\n\n\tprivate checkForOtherKeymaps(extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\treturn this.instantiationService.invokeFunction(getInstalledExtensions).then(extensions => {\n\t\t\tconst keymaps = extensions.filter(extension => isKeymapExtension(this.tipsService, extension));\n\t\t\tconst extension = arrays.first(keymaps, extension => areSameExtensions(extension.identifier, extensionIdentifier));\n\t\t\tif (extension && extension.globallyEnabled) {\n\t\t\t\tconst otherKeymaps = keymaps.filter(extension => !areSameExtensions(extension.identifier, extensionIdentifier) && extension.globallyEnabled);\n\t\t\t\tif (otherKeymaps.length) {\n\t\t\t\t\treturn this.promptForDisablingOtherKeymaps(extension, otherKeymaps);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate promptForDisablingOtherKeymaps(newKeymap: IExtensionStatus, oldKeymaps: IExtensionStatus[]): void {\n\t\tconst onPrompt = (confirmed: boolean) => {\n\t\t\tconst telemetryData: { [key: string]: any; } = {\n\t\t\t\tnewKeymap: newKeymap.identifier,\n\t\t\t\toldKeymaps: oldKeymaps.map(k => k.identifier),\n\t\t\t\tconfirmed\n\t\t\t};\n\t\t\t/* __GDPR__\n\t\t\t\t\"disableOtherKeymaps\" : {\n\t\t\t\t\t\"newKeymap\": { \"${inline}\": [ \"${ExtensionIdentifier}\" ] },\n\t\t\t\t\t\"oldKeymaps\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"confirmed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('disableOtherKeymaps', telemetryData);\n\t\t\tif (confirmed) {\n\t\t\t\tthis.extensionEnablementService.setEnablement(oldKeymaps.map(keymap => keymap.local), EnablementState.Disabled);\n\t\t\t}\n\t\t};\n\n\t\tthis.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', \"Disable other keymaps ({0}) to avoid conflicts between keybindings?\", oldKeymaps.map(k => `'${k.local.manifest.displayName}'`).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: localize('yes', \"Yes\"),\n\t\t\t\trun: () => onPrompt(true)\n\t\t\t}, {\n\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\trun: () => onPrompt(false)\n\t\t\t}]\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport function onExtensionChanged(accessor: ServicesAccessor): Event<IExtensionIdentifier[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IExtensionEnablementService);\n\tconst onDidInstallExtension = Event.chain(extensionService.onDidInstallExtension)\n\t\t.filter(e => e.operation === InstallOperation.Install)\n\t\t.event;\n\treturn Event.debounce<IExtensionIdentifier[], IExtensionIdentifier[]>(Event.any(\n\t\tEvent.chain(Event.any(onDidInstallExtension, extensionService.onDidUninstallExtension))\n\t\t\t.map(e => [e.identifier])\n\t\t\t.event,\n\t\tEvent.map(extensionEnablementService.onEnablementChanged, extensions => extensions.map(e => e.identifier))\n\t), (result: IExtensionIdentifier[] | undefined, identifiers: IExtensionIdentifier[]) => {\n\t\tresult = result || [];\n\t\tfor (const identifier of identifiers) {\n\t\t\tif (result.some(l => !areSameExtensions(l, identifier))) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n}\n\nexport function getInstalledExtensions(accessor: ServicesAccessor): Promise<IExtensionStatus[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IExtensionEnablementService);\n\treturn extensionService.getInstalled().then(extensions => {\n\t\treturn extensionEnablementService.getDisabledExtensions()\n\t\t\t.then(disabledExtensions => {\n\t\t\t\treturn extensions.map(extension => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidentifier: extension.identifier,\n\t\t\t\t\t\tlocal: extension,\n\t\t\t\t\t\tgloballyEnabled: disabledExtensions.every(disabled => !areSameExtensions(disabled, extension.identifier))\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t});\n\t});\n}\n\nexport function isKeymapExtension(tipsService: IExtensionTipsService, extension: IExtensionStatus): boolean {\n\tconst cats = extension.local.manifest.categories;\n\treturn cats && cats.indexOf('Keymaps') !== -1 || tipsService.getKeymapRecommendations().some(({ extensionId }) => areSameExtensions({ id: extensionId }, extension.local.identifier));\n}\n"]}]}