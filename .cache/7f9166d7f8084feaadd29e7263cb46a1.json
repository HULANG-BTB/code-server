{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/platform\", \"vs/platform/keybinding/common/baseResolvedKeybinding\"], function (require, exports, keyCodes_1, platform_1, baseResolvedKeybinding_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n     */\n    class USLayoutResolvedKeybinding extends baseResolvedKeybinding_1.BaseResolvedKeybinding {\n        constructor(actual, os) {\n            super(os, actual.parts);\n        }\n        _keyCodeToUILabel(keyCode) {\n            if (this._os === platform_1.OperatingSystem.Macintosh) {\n                switch (keyCode) {\n                    case keyCodes_1.KeyCode.LeftArrow:\n                        return '←';\n                    case keyCodes_1.KeyCode.UpArrow:\n                        return '↑';\n                    case keyCodes_1.KeyCode.RightArrow:\n                        return '→';\n                    case keyCodes_1.KeyCode.DownArrow:\n                        return '↓';\n                }\n            }\n            return keyCodes_1.KeyCodeUtils.toString(keyCode);\n        }\n        _getLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            return this._keyCodeToUILabel(keybinding.keyCode);\n        }\n        _getAriaLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            return keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n        }\n        _keyCodeToElectronAccelerator(keyCode) {\n            if (keyCode >= keyCodes_1.KeyCode.NUMPAD_0 && keyCode <= keyCodes_1.KeyCode.NUMPAD_DIVIDE) {\n                // Electron cannot handle numpad keys\n                return null;\n            }\n            switch (keyCode) {\n                case keyCodes_1.KeyCode.UpArrow:\n                    return 'Up';\n                case keyCodes_1.KeyCode.DownArrow:\n                    return 'Down';\n                case keyCodes_1.KeyCode.LeftArrow:\n                    return 'Left';\n                case keyCodes_1.KeyCode.RightArrow:\n                    return 'Right';\n            }\n            return keyCodes_1.KeyCodeUtils.toString(keyCode);\n        }\n        _getElectronAccelerator(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return null;\n            }\n            return this._keyCodeToElectronAccelerator(keybinding.keyCode);\n        }\n        _getUserSettingsLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            const result = keyCodes_1.KeyCodeUtils.toUserSettingsUS(keybinding.keyCode);\n            return (result ? result.toLowerCase() : result);\n        }\n        _isWYSIWYG() {\n            return true;\n        }\n        _getDispatchPart(keybinding) {\n            return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n        }\n        static getDispatchStr(keybinding) {\n            if (keybinding.isModifierKey()) {\n                return null;\n            }\n            let result = '';\n            if (keybinding.ctrlKey) {\n                result += 'ctrl+';\n            }\n            if (keybinding.shiftKey) {\n                result += 'shift+';\n            }\n            if (keybinding.altKey) {\n                result += 'alt+';\n            }\n            if (keybinding.metaKey) {\n                result += 'meta+';\n            }\n            result += keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n            return result;\n        }\n    }\n    exports.USLayoutResolvedKeybinding = USLayoutResolvedKeybinding;\n});\n",null]}