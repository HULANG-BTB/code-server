{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/objects\", \"vs/platform/configuration/common/configuration\", \"vs/platform/configuration/common/configurationModels\", \"vs/platform/registry/common/platform\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/base/common/map\"], function (require, exports, objects_1, configuration_1, configurationModels_1, platform_1, configurationRegistry_1, map_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class WorkspaceConfigurationModelParser extends configurationModels_1.ConfigurationModelParser {\n        constructor(name) {\n            super(name);\n            this._folders = [];\n            this._settingsModelParser = new FolderSettingsModelParser(name, [configurationRegistry_1.ConfigurationScope.WINDOW, configurationRegistry_1.ConfigurationScope.RESOURCE]);\n            this._launchModel = new configurationModels_1.ConfigurationModel();\n        }\n        get folders() {\n            return this._folders;\n        }\n        get settingsModel() {\n            return this._settingsModelParser.configurationModel;\n        }\n        get launchModel() {\n            return this._launchModel;\n        }\n        reprocessWorkspaceSettings() {\n            this._settingsModelParser.reprocess();\n        }\n        parseRaw(raw) {\n            this._folders = (raw['folders'] || []);\n            this._settingsModelParser.parse(raw['settings']);\n            this._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n            return super.parseRaw(raw);\n        }\n        createConfigurationModelFrom(raw, key) {\n            const data = raw[key];\n            if (data) {\n                const contents = configuration_1.toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n                const scopedContents = Object.create(null);\n                scopedContents[key] = contents;\n                const keys = Object.keys(data).map(k => `${key}.${k}`);\n                return new configurationModels_1.ConfigurationModel(scopedContents, keys, []);\n            }\n            return new configurationModels_1.ConfigurationModel();\n        }\n    }\n    exports.WorkspaceConfigurationModelParser = WorkspaceConfigurationModelParser;\n    class StandaloneConfigurationModelParser extends configurationModels_1.ConfigurationModelParser {\n        constructor(name, scope) {\n            super(name);\n            this.scope = scope;\n        }\n        parseRaw(raw) {\n            const contents = configuration_1.toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n            const scopedContents = Object.create(null);\n            scopedContents[this.scope] = contents;\n            const keys = Object.keys(raw).map(key => `${this.scope}.${key}`);\n            return { contents: scopedContents, keys, overrides: [] };\n        }\n    }\n    exports.StandaloneConfigurationModelParser = StandaloneConfigurationModelParser;\n    class FolderSettingsModelParser extends configurationModels_1.ConfigurationModelParser {\n        constructor(name, scopes) {\n            super(name);\n            this.scopes = scopes;\n        }\n        parse(content) {\n            this._raw = typeof content === 'string' ? this.parseContent(content) : content;\n            this.parseWorkspaceSettings(this._raw);\n        }\n        get configurationModel() {\n            return this._settingsModel || new configurationModels_1.ConfigurationModel();\n        }\n        reprocess() {\n            this.parse(this._raw);\n        }\n        parseWorkspaceSettings(rawSettings) {\n            const configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n            const rawWorkspaceSettings = this.filterByScope(rawSettings, configurationProperties, true);\n            const configurationModel = this.parseRaw(rawWorkspaceSettings);\n            this._settingsModel = new configurationModels_1.ConfigurationModel(configurationModel.contents, configurationModel.keys, configurationModel.overrides);\n        }\n        filterByScope(properties, configurationProperties, filterOverriddenProperties) {\n            const result = {};\n            for (let key in properties) {\n                if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key) && filterOverriddenProperties) {\n                    result[key] = this.filterByScope(properties[key], configurationProperties, false);\n                }\n                else {\n                    const scope = this.getScope(key, configurationProperties);\n                    if (this.scopes.indexOf(scope) !== -1) {\n                        result[key] = properties[key];\n                    }\n                }\n            }\n            return result;\n        }\n        getScope(key, configurationProperties) {\n            const propertySchema = configurationProperties[key];\n            return propertySchema && typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : configurationRegistry_1.ConfigurationScope.WINDOW;\n        }\n    }\n    exports.FolderSettingsModelParser = FolderSettingsModelParser;\n    class Configuration extends configurationModels_1.Configuration {\n        constructor(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, _workspace) {\n            super(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);\n            this._workspace = _workspace;\n        }\n        getValue(key, overrides = {}) {\n            return super.getValue(key, overrides, this._workspace);\n        }\n        inspect(key, overrides = {}) {\n            return super.inspect(key, overrides, this._workspace);\n        }\n        keys() {\n            return super.keys(this._workspace);\n        }\n        compareAndUpdateLocalUserConfiguration(user) {\n            const { added, updated, removed } = configuration_1.compare(this.localUserConfiguration, user);\n            let changedKeys = [...added, ...updated, ...removed];\n            if (changedKeys.length) {\n                super.updateLocalUserConfiguration(user);\n            }\n            return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n        }\n        compareAndUpdateRemoteUserConfiguration(user) {\n            const { added, updated, removed } = configuration_1.compare(this.remoteUserConfiguration, user);\n            let changedKeys = [...added, ...updated, ...removed];\n            if (changedKeys.length) {\n                super.updateRemoteUserConfiguration(user);\n            }\n            return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n        }\n        compareAndUpdateWorkspaceConfiguration(workspaceConfiguration) {\n            const { added, updated, removed } = configuration_1.compare(this.workspaceConfiguration, workspaceConfiguration);\n            let changedKeys = [...added, ...updated, ...removed];\n            if (changedKeys.length) {\n                super.updateWorkspaceConfiguration(workspaceConfiguration);\n            }\n            return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n        }\n        compareAndUpdateFolderConfiguration(resource, folderConfiguration) {\n            const currentFolderConfiguration = this.folderConfigurations.get(resource);\n            if (currentFolderConfiguration) {\n                const { added, updated, removed } = configuration_1.compare(currentFolderConfiguration, folderConfiguration);\n                let changedKeys = [...added, ...updated, ...removed];\n                if (changedKeys.length) {\n                    super.updateFolderConfiguration(resource, folderConfiguration);\n                }\n                return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys, resource);\n            }\n            else {\n                super.updateFolderConfiguration(resource, folderConfiguration);\n                return new configurationModels_1.ConfigurationChangeEvent().change(folderConfiguration.keys, resource);\n            }\n        }\n        compareAndDeleteFolderConfiguration(folder) {\n            if (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {\n                // Do not remove workspace configuration\n                return new configurationModels_1.ConfigurationChangeEvent();\n            }\n            const folderConfig = this.folderConfigurations.get(folder);\n            if (!folderConfig) {\n                throw new Error('Unknown folder');\n            }\n            const keys = folderConfig.keys;\n            super.deleteFolderConfiguration(folder);\n            return new configurationModels_1.ConfigurationChangeEvent().change(keys, folder);\n        }\n        compare(other) {\n            const result = [];\n            for (const key of this.allKeys()) {\n                if (!objects_1.equals(this.getValue(key), other.getValue(key))\n                    || (this._workspace && this._workspace.folders.some(folder => !objects_1.equals(this.getValue(key, { resource: folder.uri }), other.getValue(key, { resource: folder.uri }))))) {\n                    result.push(key);\n                }\n            }\n            return result;\n        }\n        allKeys() {\n            return super.allKeys(this._workspace);\n        }\n    }\n    exports.Configuration = Configuration;\n    class AllKeysConfigurationChangeEvent extends configurationModels_1.AbstractConfigurationChangeEvent {\n        constructor(_configuration, source, sourceConfig) {\n            super();\n            this._configuration = _configuration;\n            this.source = source;\n            this.sourceConfig = sourceConfig;\n            this._changedConfiguration = null;\n        }\n        get changedConfiguration() {\n            if (!this._changedConfiguration) {\n                this._changedConfiguration = new configurationModels_1.ConfigurationModel();\n                this.updateKeys(this._changedConfiguration, this.affectedKeys);\n            }\n            return this._changedConfiguration;\n        }\n        get changedConfigurationByResource() {\n            return new map_1.ResourceMap();\n        }\n        get affectedKeys() {\n            return this._configuration.allKeys();\n        }\n        affectsConfiguration(config, resource) {\n            return this.doesConfigurationContains(this.changedConfiguration, config);\n        }\n    }\n    exports.AllKeysConfigurationChangeEvent = AllKeysConfigurationChangeEvent;\n    class WorkspaceConfigurationChangeEvent {\n        constructor(configurationChangeEvent, workspace) {\n            this.configurationChangeEvent = configurationChangeEvent;\n            this.workspace = workspace;\n        }\n        get changedConfiguration() {\n            return this.configurationChangeEvent.changedConfiguration;\n        }\n        get changedConfigurationByResource() {\n            return this.configurationChangeEvent.changedConfigurationByResource;\n        }\n        get affectedKeys() {\n            return this.configurationChangeEvent.affectedKeys;\n        }\n        get source() {\n            return this.configurationChangeEvent.source;\n        }\n        get sourceConfig() {\n            return this.configurationChangeEvent.sourceConfig;\n        }\n        affectsConfiguration(config, resource) {\n            if (this.configurationChangeEvent.affectsConfiguration(config, resource)) {\n                return true;\n            }\n            if (resource && this.workspace) {\n                let workspaceFolder = this.workspace.getFolder(resource);\n                if (workspaceFolder) {\n                    return this.configurationChangeEvent.affectsConfiguration(config, workspaceFolder.uri);\n                }\n            }\n            return false;\n        }\n    }\n    exports.WorkspaceConfigurationChangeEvent = WorkspaceConfigurationChangeEvent;\n});\n",null]}