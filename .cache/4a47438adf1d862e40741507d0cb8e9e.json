{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./suggestEnabledInput\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar widget_1 = require(\"vs/base/browser/ui/widget\");\nvar event_1 = require(\"vs/base/common/event\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modes = require(\"vs/editor/common/modes\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar contextmenu_1 = require(\"vs/editor/contrib/contextmenu/contextmenu\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar suggestController_1 = require(\"vs/editor/contrib/suggest/suggestController\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar menuPreventer_1 = require(\"vs/workbench/contrib/codeEditor/browser/menuPreventer\");\nvar simpleEditorOptions_1 = require(\"vs/workbench/contrib/codeEditor/browser/simpleEditorOptions\");\nvar selectionClipboard_1 = require(\"vs/workbench/contrib/codeEditor/browser/selectionClipboard\");\nfunction attachSuggestEnabledInputBoxStyler(widget, themeService, style) {\n    return styler_1.attachStyler(themeService, {\n        inputBackground: (style && style.inputBackground) || colorRegistry_1.inputBackground,\n        inputForeground: (style && style.inputForeground) || colorRegistry_1.inputForeground,\n        inputBorder: (style && style.inputBorder) || colorRegistry_1.inputBorder,\n        inputPlaceholderForeground: (style && style.inputPlaceholderForeground) || colorRegistry_1.inputPlaceholderForeground,\n    }, widget);\n}\nexports.attachSuggestEnabledInputBoxStyler = attachSuggestEnabledInputBoxStyler;\nvar SuggestEnabledInput = /** @class */ (function (_super) {\n    tslib_1.__extends(SuggestEnabledInput, _super);\n    function SuggestEnabledInput(id, parent, suggestionProvider, ariaLabel, resourceHandle, options, instantiationService, modelService) {\n        var _this = _super.call(this) || this;\n        _this._onShouldFocusResults = new event_1.Emitter();\n        _this.onShouldFocusResults = _this._onShouldFocusResults.event;\n        _this._onEnter = new event_1.Emitter();\n        _this.onEnter = _this._onEnter.event;\n        _this._onInputDidChange = new event_1.Emitter();\n        _this.onInputDidChange = _this._onInputDidChange.event;\n        _this.disposables = [];\n        _this.stylingContainer = dom_1.append(parent, dom_1.$('.suggest-input-container'));\n        _this.placeholderText = dom_1.append(_this.stylingContainer, dom_1.$('.suggest-input-placeholder', undefined, options.placeholderText || ''));\n        var editorOptions = objects_1.mixin(simpleEditorOptions_1.getSimpleEditorOptions(), getSuggestEnabledInputOptions(ariaLabel));\n        _this.inputWidget = instantiationService.createInstance(codeEditorWidget_1.CodeEditorWidget, _this.stylingContainer, editorOptions, {\n            contributions: [suggestController_1.SuggestController, snippetController2_1.SnippetController2, contextmenu_1.ContextMenuController, menuPreventer_1.MenuPreventer, selectionClipboard_1.SelectionClipboard],\n            isSimpleWidget: true,\n        });\n        _this.disposables.push(_this.inputWidget);\n        var scopeHandle = uri_1.URI.parse(resourceHandle);\n        _this.inputModel = modelService.createModel('', null, scopeHandle, true);\n        _this.inputWidget.setModel(_this.inputModel);\n        _this.disposables.push(_this.inputWidget.onDidPaste(function () { return _this.setValue(_this.getValue()); })); // setter cleanses\n        _this.disposables.push((_this.inputWidget.onDidFocusEditorText(function () {\n            if (options.focusContextKey) {\n                options.focusContextKey.set(true);\n            }\n            dom_1.addClass(_this.stylingContainer, 'synthetic-focus');\n        })));\n        _this.disposables.push((_this.inputWidget.onDidBlurEditorText(function () {\n            if (options.focusContextKey) {\n                options.focusContextKey.set(false);\n            }\n            dom_1.removeClass(_this.stylingContainer, 'synthetic-focus');\n        })));\n        var onKeyDownMonaco = event_1.Event.chain(_this.inputWidget.onKeyDown);\n        onKeyDownMonaco.filter(function (e) { return e.keyCode === keyCodes_1.KeyCode.Enter; }).on(function (e) { e.preventDefault(); _this._onEnter.fire(); }, _this, _this.disposables);\n        onKeyDownMonaco.filter(function (e) { return e.keyCode === keyCodes_1.KeyCode.DownArrow && (browser_1.isMacintosh ? e.metaKey : e.ctrlKey); }).on(function () { return _this._onShouldFocusResults.fire(); }, _this, _this.disposables);\n        var preexistingContent = _this.getValue();\n        var inputWidgetModel = _this.inputWidget.getModel();\n        if (inputWidgetModel) {\n            _this.disposables.push(inputWidgetModel.onDidChangeContent(function () {\n                var content = _this.getValue();\n                _this.placeholderText.style.visibility = content ? 'hidden' : 'visible';\n                if (preexistingContent.trim() === content.trim()) {\n                    return;\n                }\n                _this._onInputDidChange.fire(undefined);\n                preexistingContent = content;\n            }));\n        }\n        var validatedSuggestProvider = {\n            provideResults: suggestionProvider.provideResults,\n            sortKey: suggestionProvider.sortKey || (function (a) { return a; }),\n            triggerCharacters: suggestionProvider.triggerCharacters || []\n        };\n        _this.setValue(options.value || '');\n        _this.disposables.push(modes.CompletionProviderRegistry.register({ scheme: scopeHandle.scheme, pattern: '**/' + scopeHandle.path, hasAccessToAllModels: true }, {\n            triggerCharacters: validatedSuggestProvider.triggerCharacters,\n            provideCompletionItems: function (model, position, _context) {\n                var query = model.getValue();\n                var wordStart = query.lastIndexOf(' ', position.column - 1) + 1;\n                var alreadyTypedCount = position.column - wordStart - 1;\n                // dont show suggestions if the user has typed something, but hasn't used the trigger character\n                if (alreadyTypedCount > 0 && (validatedSuggestProvider.triggerCharacters).indexOf(query[wordStart]) === -1) {\n                    return { suggestions: [] };\n                }\n                return {\n                    suggestions: suggestionProvider.provideResults(query).map(function (result) {\n                        return {\n                            label: result,\n                            insertText: result,\n                            range: range_1.Range.fromPositions(position.delta(0, -alreadyTypedCount), position),\n                            sortText: validatedSuggestProvider.sortKey(result),\n                            kind: modes.CompletionItemKind.Keyword\n                        };\n                    })\n                };\n            }\n        }));\n        return _this;\n    }\n    Object.defineProperty(SuggestEnabledInput.prototype, \"onFocus\", {\n        get: function () { return this.inputWidget.onDidFocusEditorText; },\n        enumerable: true,\n        configurable: true\n    });\n    SuggestEnabledInput.prototype.setValue = function (val) {\n        val = val.replace(/\\s/g, ' ');\n        var fullRange = this.inputModel.getFullModelRange();\n        this.inputWidget.executeEdits('suggestEnabledInput.setValue', [editOperation_1.EditOperation.replace(fullRange, val)]);\n        this.inputWidget.setScrollTop(0);\n        this.inputWidget.setPosition(new position_1.Position(1, val.length + 1));\n    };\n    SuggestEnabledInput.prototype.getValue = function () {\n        return this.inputWidget.getValue();\n    };\n    SuggestEnabledInput.prototype.style = function (colors) {\n        this.stylingContainer.style.backgroundColor = colors.inputBackground ? colors.inputBackground.toString() : null;\n        this.stylingContainer.style.color = colors.inputForeground ? colors.inputForeground.toString() : null;\n        this.placeholderText.style.color = colors.inputPlaceholderForeground ? colors.inputPlaceholderForeground.toString() : null;\n        this.stylingContainer.style.borderWidth = '1px';\n        this.stylingContainer.style.borderStyle = 'solid';\n        this.stylingContainer.style.borderColor = colors.inputBorder ?\n            colors.inputBorder.toString() :\n            'transparent';\n        var cursor = this.stylingContainer.getElementsByClassName('cursor')[0];\n        if (cursor) {\n            cursor.style.backgroundColor = colors.inputForeground ? colors.inputForeground.toString() : null;\n        }\n    };\n    SuggestEnabledInput.prototype.focus = function (selectAll) {\n        this.inputWidget.focus();\n        if (selectAll && this.inputWidget.getValue()) {\n            this.selectAll();\n        }\n    };\n    SuggestEnabledInput.prototype.layout = function (dimension) {\n        this.inputWidget.layout(dimension);\n        this.placeholderText.style.width = dimension.width + \"px\";\n    };\n    SuggestEnabledInput.prototype.selectAll = function () {\n        this.inputWidget.setSelection(new range_1.Range(1, 1, 1, this.getValue().length + 1));\n    };\n    SuggestEnabledInput.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n        _super.prototype.dispose.call(this);\n    };\n    SuggestEnabledInput = tslib_1.__decorate([\n        tslib_1.__param(6, instantiation_1.IInstantiationService),\n        tslib_1.__param(7, modelService_1.IModelService)\n    ], SuggestEnabledInput);\n    return SuggestEnabledInput;\n}(widget_1.Widget));\nexports.SuggestEnabledInput = SuggestEnabledInput;\n// Override styles in selections.ts\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var selectionColor = theme.getColor(colorRegistry_1.selectionBackground);\n    if (selectionColor) {\n        selectionColor = selectionColor.transparent(0.4);\n    }\n    else {\n        selectionColor = theme.getColor(colorRegistry_1.editorSelectionBackground);\n    }\n    if (selectionColor) {\n        collector.addRule(\".suggest-input-container .monaco-editor .focused .selected-text { background-color: \" + selectionColor + \"; }\");\n    }\n    // Override inactive selection bg\n    var inputBackgroundColor = theme.getColor(colorRegistry_1.inputBackground);\n    if (inputBackgroundColor) {\n        collector.addRule(\".suggest-input-container .monaco-editor .selected-text { background-color: \" + inputBackgroundColor.transparent(0.4) + \"; }\");\n    }\n    // Override selected fg\n    var inputForegroundColor = theme.getColor(colorRegistry_1.inputForeground);\n    if (inputForegroundColor) {\n        collector.addRule(\".suggest-input-container .monaco-editor .view-line span.inline-selected-text { color: \" + inputForegroundColor + \"; }\");\n    }\n});\nfunction getSuggestEnabledInputOptions(ariaLabel) {\n    return {\n        fontSize: 13,\n        lineHeight: 20,\n        wordWrap: 'off',\n        scrollbar: { vertical: 'hidden', },\n        roundedSelection: false,\n        renderIndentGuides: false,\n        cursorWidth: 1,\n        fontFamily: ' -apple-system, BlinkMacSystemFont, \"Segoe WPC\", \"Segoe UI\", \"Ubuntu\", \"Droid Sans\", sans-serif',\n        ariaLabel: ariaLabel || '',\n        snippetSuggestions: 'none',\n        suggest: { filterGraceful: false, showIcons: false }\n    };\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./suggestEnabledInput';\nimport { $, Dimension, addClass, append, removeClass } from 'vs/base/browser/dom';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { mixin } from 'vs/base/common/objects';\nimport { isMacintosh } from 'vs/base/browser/browser';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport * as modes from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ContextMenuController } from 'vs/editor/contrib/contextmenu/contextmenu';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { SuggestController } from 'vs/editor/contrib/suggest/suggestController';\nimport { IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ColorIdentifier, editorSelectionBackground, inputBackground, inputBorder, inputForeground, inputPlaceholderForeground, selectionBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { IStyleOverrides, IThemable, attachStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { MenuPreventer } from 'vs/workbench/contrib/codeEditor/browser/menuPreventer';\nimport { getSimpleEditorOptions } from 'vs/workbench/contrib/codeEditor/browser/simpleEditorOptions';\nimport { SelectionClipboard } from 'vs/workbench/contrib/codeEditor/browser/selectionClipboard';\n\ninterface SuggestResultsProvider {\n\t/**\n\t * Provider function for suggestion results.\n\t *\n\t * @param query the full text of the input.\n\t */\n\tprovideResults: (query: string) => string[];\n\n\t/**\n\t * Trigger characters for this input. Suggestions will appear when one of these is typed,\n\t * or upon `ctrl+space` triggering at a word boundary.\n\t *\n\t * Defaults to the empty array.\n\t */\n\ttriggerCharacters?: string[];\n\n\t/**\n\t * Defines the sorting function used when showing results.\n\t *\n\t * Defaults to the identity function.\n\t */\n\tsortKey?: (result: string) => string;\n}\n\ninterface SuggestEnabledInputOptions {\n\t/**\n\t * The text to show when no input is present.\n\t *\n\t * Defaults to the empty string.\n\t */\n\tplaceholderText?: string;\n\tvalue?: string;\n\n\t/**\n\t * Context key tracking the focus state of this element\n\t */\n\tfocusContextKey?: IContextKey<boolean>;\n}\n\nexport interface ISuggestEnabledInputStyleOverrides extends IStyleOverrides {\n\tinputBackground?: ColorIdentifier;\n\tinputForeground?: ColorIdentifier;\n\tinputBorder?: ColorIdentifier;\n\tinputPlaceholderForeground?: ColorIdentifier;\n}\n\ntype ISuggestEnabledInputStyles = {\n\t[P in keyof ISuggestEnabledInputStyleOverrides]: Color;\n};\n\nexport function attachSuggestEnabledInputBoxStyler(widget: IThemable, themeService: IThemeService, style?: ISuggestEnabledInputStyleOverrides): IDisposable {\n\treturn attachStyler(themeService, {\n\t\tinputBackground: (style && style.inputBackground) || inputBackground,\n\t\tinputForeground: (style && style.inputForeground) || inputForeground,\n\t\tinputBorder: (style && style.inputBorder) || inputBorder,\n\t\tinputPlaceholderForeground: (style && style.inputPlaceholderForeground) || inputPlaceholderForeground,\n\t} as ISuggestEnabledInputStyleOverrides, widget);\n}\n\nexport class SuggestEnabledInput extends Widget implements IThemable {\n\n\tprivate _onShouldFocusResults = new Emitter<void>();\n\treadonly onShouldFocusResults: Event<void> = this._onShouldFocusResults.event;\n\n\tprivate _onEnter = new Emitter<void>();\n\treadonly onEnter: Event<void> = this._onEnter.event;\n\n\tprivate _onInputDidChange = new Emitter<string | undefined>();\n\treadonly onInputDidChange: Event<string | undefined> = this._onInputDidChange.event;\n\n\tprivate disposables: IDisposable[] = [];\n\tprivate readonly inputWidget: CodeEditorWidget;\n\tprivate readonly inputModel: ITextModel;\n\tprivate stylingContainer: HTMLDivElement;\n\tprivate placeholderText: HTMLDivElement;\n\n\tconstructor(\n\t\tid: string,\n\t\tparent: HTMLElement,\n\t\tsuggestionProvider: SuggestResultsProvider,\n\t\tariaLabel: string,\n\t\tresourceHandle: string,\n\t\toptions: SuggestEnabledInputOptions,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModelService modelService: IModelService,\n\t) {\n\t\tsuper();\n\n\t\tthis.stylingContainer = append(parent, $('.suggest-input-container'));\n\t\tthis.placeholderText = append(this.stylingContainer, $('.suggest-input-placeholder', undefined, options.placeholderText || ''));\n\n\t\tconst editorOptions: IEditorOptions = mixin(\n\t\t\tgetSimpleEditorOptions(),\n\t\t\tgetSuggestEnabledInputOptions(ariaLabel));\n\n\t\tthis.inputWidget = instantiationService.createInstance(CodeEditorWidget, this.stylingContainer,\n\t\t\teditorOptions,\n\t\t\t{\n\t\t\t\tcontributions: [SuggestController, SnippetController2, ContextMenuController, MenuPreventer, SelectionClipboard],\n\t\t\t\tisSimpleWidget: true,\n\t\t\t});\n\t\tthis.disposables.push(this.inputWidget);\n\n\t\tlet scopeHandle = uri.parse(resourceHandle);\n\t\tthis.inputModel = modelService.createModel('', null, scopeHandle, true);\n\t\tthis.inputWidget.setModel(this.inputModel);\n\n\t\tthis.disposables.push(this.inputWidget.onDidPaste(() => this.setValue(this.getValue()))); // setter cleanses\n\n\t\tthis.disposables.push((this.inputWidget.onDidFocusEditorText(() => {\n\t\t\tif (options.focusContextKey) { options.focusContextKey.set(true); }\n\t\t\taddClass(this.stylingContainer, 'synthetic-focus');\n\t\t})));\n\t\tthis.disposables.push((this.inputWidget.onDidBlurEditorText(() => {\n\t\t\tif (options.focusContextKey) { options.focusContextKey.set(false); }\n\t\t\tremoveClass(this.stylingContainer, 'synthetic-focus');\n\t\t})));\n\n\t\tconst onKeyDownMonaco = Event.chain(this.inputWidget.onKeyDown);\n\t\tonKeyDownMonaco.filter(e => e.keyCode === KeyCode.Enter).on(e => { e.preventDefault(); this._onEnter.fire(); }, this, this.disposables);\n\t\tonKeyDownMonaco.filter(e => e.keyCode === KeyCode.DownArrow && (isMacintosh ? e.metaKey : e.ctrlKey)).on(() => this._onShouldFocusResults.fire(), this, this.disposables);\n\n\t\tlet preexistingContent = this.getValue();\n\t\tconst inputWidgetModel = this.inputWidget.getModel();\n\t\tif (inputWidgetModel) {\n\t\t\tthis.disposables.push(inputWidgetModel.onDidChangeContent(() => {\n\t\t\t\tlet content = this.getValue();\n\t\t\t\tthis.placeholderText.style.visibility = content ? 'hidden' : 'visible';\n\t\t\t\tif (preexistingContent.trim() === content.trim()) { return; }\n\t\t\t\tthis._onInputDidChange.fire(undefined);\n\t\t\t\tpreexistingContent = content;\n\t\t\t}));\n\t\t}\n\n\t\tlet validatedSuggestProvider = {\n\t\t\tprovideResults: suggestionProvider.provideResults,\n\t\t\tsortKey: suggestionProvider.sortKey || (a => a),\n\t\t\ttriggerCharacters: suggestionProvider.triggerCharacters || []\n\t\t};\n\n\t\tthis.setValue(options.value || '');\n\n\t\tthis.disposables.push(modes.CompletionProviderRegistry.register({ scheme: scopeHandle.scheme, pattern: '**/' + scopeHandle.path, hasAccessToAllModels: true }, {\n\t\t\ttriggerCharacters: validatedSuggestProvider.triggerCharacters,\n\t\t\tprovideCompletionItems: (model: ITextModel, position: Position, _context: modes.CompletionContext) => {\n\t\t\t\tlet query = model.getValue();\n\n\t\t\t\tlet wordStart = query.lastIndexOf(' ', position.column - 1) + 1;\n\t\t\t\tlet alreadyTypedCount = position.column - wordStart - 1;\n\n\t\t\t\t// dont show suggestions if the user has typed something, but hasn't used the trigger character\n\t\t\t\tif (alreadyTypedCount > 0 && (validatedSuggestProvider.triggerCharacters).indexOf(query[wordStart]) === -1) { return { suggestions: [] }; }\n\n\t\t\t\treturn {\n\t\t\t\t\tsuggestions: suggestionProvider.provideResults(query).map(result => {\n\t\t\t\t\t\treturn <modes.CompletionItem>{\n\t\t\t\t\t\t\tlabel: result,\n\t\t\t\t\t\t\tinsertText: result,\n\t\t\t\t\t\t\trange: Range.fromPositions(position.delta(0, -alreadyTypedCount), position),\n\t\t\t\t\t\t\tsortText: validatedSuggestProvider.sortKey(result),\n\t\t\t\t\t\t\tkind: modes.CompletionItemKind.Keyword\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic get onFocus(): Event<void> { return this.inputWidget.onDidFocusEditorText; }\n\n\tpublic setValue(val: string) {\n\t\tval = val.replace(/\\s/g, ' ');\n\t\tconst fullRange = this.inputModel.getFullModelRange();\n\t\tthis.inputWidget.executeEdits('suggestEnabledInput.setValue', [EditOperation.replace(fullRange, val)]);\n\t\tthis.inputWidget.setScrollTop(0);\n\t\tthis.inputWidget.setPosition(new Position(1, val.length + 1));\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this.inputWidget.getValue();\n\t}\n\n\n\tpublic style(colors: ISuggestEnabledInputStyles): void {\n\t\tthis.stylingContainer.style.backgroundColor = colors.inputBackground ? colors.inputBackground.toString() : null;\n\t\tthis.stylingContainer.style.color = colors.inputForeground ? colors.inputForeground.toString() : null;\n\t\tthis.placeholderText.style.color = colors.inputPlaceholderForeground ? colors.inputPlaceholderForeground.toString() : null;\n\n\t\tthis.stylingContainer.style.borderWidth = '1px';\n\t\tthis.stylingContainer.style.borderStyle = 'solid';\n\t\tthis.stylingContainer.style.borderColor = colors.inputBorder ?\n\t\t\tcolors.inputBorder.toString() :\n\t\t\t'transparent';\n\n\t\tconst cursor = this.stylingContainer.getElementsByClassName('cursor')[0] as HTMLDivElement;\n\t\tif (cursor) {\n\t\t\tcursor.style.backgroundColor = colors.inputForeground ? colors.inputForeground.toString() : null;\n\t\t}\n\t}\n\n\tpublic focus(selectAll?: boolean): void {\n\t\tthis.inputWidget.focus();\n\n\t\tif (selectAll && this.inputWidget.getValue()) {\n\t\t\tthis.selectAll();\n\t\t}\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\t\tthis.inputWidget.layout(dimension);\n\t\tthis.placeholderText.style.width = `${dimension.width}px`;\n\t}\n\n\tprivate selectAll(): void {\n\t\tthis.inputWidget.setSelection(new Range(1, 1, 1, this.getValue().length + 1));\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tsuper.dispose();\n\t}\n}\n\n// Override styles in selections.ts\nregisterThemingParticipant((theme, collector) => {\n\tlet selectionColor = theme.getColor(selectionBackground);\n\tif (selectionColor) {\n\t\tselectionColor = selectionColor.transparent(0.4);\n\t} else {\n\t\tselectionColor = theme.getColor(editorSelectionBackground);\n\t}\n\n\tif (selectionColor) {\n\t\tcollector.addRule(`.suggest-input-container .monaco-editor .focused .selected-text { background-color: ${selectionColor}; }`);\n\t}\n\n\t// Override inactive selection bg\n\tconst inputBackgroundColor = theme.getColor(inputBackground);\n\tif (inputBackgroundColor) {\n\t\tcollector.addRule(`.suggest-input-container .monaco-editor .selected-text { background-color: ${inputBackgroundColor.transparent(0.4)}; }`);\n\t}\n\n\t// Override selected fg\n\tconst inputForegroundColor = theme.getColor(inputForeground);\n\tif (inputForegroundColor) {\n\t\tcollector.addRule(`.suggest-input-container .monaco-editor .view-line span.inline-selected-text { color: ${inputForegroundColor}; }`);\n\t}\n});\n\n\nfunction getSuggestEnabledInputOptions(ariaLabel?: string): IEditorOptions {\n\treturn {\n\t\tfontSize: 13,\n\t\tlineHeight: 20,\n\t\twordWrap: 'off',\n\t\tscrollbar: { vertical: 'hidden', },\n\t\troundedSelection: false,\n\t\trenderIndentGuides: false,\n\t\tcursorWidth: 1,\n\t\tfontFamily: ' -apple-system, BlinkMacSystemFont, \"Segoe WPC\", \"Segoe UI\", \"Ubuntu\", \"Droid Sans\", sans-serif',\n\t\tariaLabel: ariaLabel || '',\n\n\t\tsnippetSuggestions: 'none',\n\t\tsuggest: { filterGraceful: false, showIcons: false }\n\t};\n}\n"]}]}