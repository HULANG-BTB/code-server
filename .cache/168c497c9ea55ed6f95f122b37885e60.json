{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar nls_1 = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar experimentService_1 = require(\"vs/workbench/contrib/experiments/node/experimentService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar TelemetryOptOut = /** @class */ (function () {\n    function TelemetryOptOut(storageService, openerService, notificationService, windowService, windowsService, telemetryService, experimentService, configurationService, galleryService) {\n        var _this = this;\n        this.notificationService = notificationService;\n        this.telemetryService = telemetryService;\n        this.experimentService = experimentService;\n        this.configurationService = configurationService;\n        this.galleryService = galleryService;\n        if (!product_1.default.telemetryOptOutUrl || storageService.get(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, storage_1.StorageScope.GLOBAL)) {\n            return;\n        }\n        var experimentId = 'telemetryOptOut';\n        Promise.all([\n            windowService.isFocused(),\n            windowsService.getWindowCount(),\n            experimentService.getExperimentById(experimentId)\n        ]).then(function (_a) {\n            var focused = _a[0], count = _a[1], experimentState = _a[2];\n            if (!focused && count > 1) {\n                return;\n            }\n            storageService.store(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, true, storage_1.StorageScope.GLOBAL);\n            _this.optOutUrl = product_1.default.telemetryOptOutUrl;\n            _this.privacyUrl = product_1.default.privacyStatementUrl || product_1.default.telemetryOptOutUrl;\n            if (experimentState && experimentState.state === experimentService_1.ExperimentState.Run && telemetryService.isOptedIn) {\n                _this.runExperiment(experimentId);\n                return;\n            }\n            var optOutNotice = nls_1.localize('telemetryOptOut.optOutNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt out]({1}).\", _this.privacyUrl, _this.optOutUrl);\n            var optInNotice = nls_1.localize('telemetryOptOut.optInNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt in]({1}).\", _this.privacyUrl, _this.optOutUrl);\n            notificationService.prompt(notification_1.Severity.Info, telemetryService.isOptedIn ? optOutNotice : optInNotice, [{\n                    label: nls_1.localize('telemetryOptOut.readMore', \"Read More\"),\n                    run: function () { return openerService.open(uri_1.URI.parse(_this.optOutUrl)); }\n                }], { sticky: true });\n        })\n            .then(undefined, errors_1.onUnexpectedError);\n    }\n    TelemetryOptOut.prototype.runExperiment = function (experimentId) {\n        var _this = this;\n        var promptMessageKey = 'telemetryOptOut.optOutOption';\n        var yesLabelKey = 'telemetryOptOut.OptIn';\n        var noLabelKey = 'telemetryOptOut.OptOut';\n        var promptMessage = nls_1.localize('telemetryOptOut.optOutOption', \"Please help Microsoft improve Visual Studio Code by allowing the collection of usage data. Read our [privacy statement]({0}) for more details.\", this.privacyUrl);\n        var yesLabel = nls_1.localize('telemetryOptOut.OptIn', \"Yes, glad to help\");\n        var noLabel = nls_1.localize('telemetryOptOut.OptOut', \"No, thanks\");\n        var queryPromise = Promise.resolve(undefined);\n        if (platform_1.locale && platform_1.locale !== platform_1.language && platform_1.locale !== 'en' && platform_1.locale.indexOf('en-') === -1) {\n            queryPromise = this.galleryService.query({ text: \"tag:lp-\" + platform_1.locale }, cancellation_1.CancellationToken.None).then(function (tagResult) {\n                if (!tagResult || !tagResult.total) {\n                    return undefined;\n                }\n                var extensionToFetchTranslationsFrom = tagResult.firstPage.filter(function (e) { return e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0; })[0] || tagResult.firstPage[0];\n                if (!extensionToFetchTranslationsFrom.assets || !extensionToFetchTranslationsFrom.assets.coreTranslations) {\n                    return undefined;\n                }\n                return _this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, platform_1.locale)\n                    .then(function (translation) {\n                    var translationsFromPack = translation && translation.contents ? translation.contents['vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut'] : {};\n                    if (!!translationsFromPack[promptMessageKey] && !!translationsFromPack[yesLabelKey] && !!translationsFromPack[noLabelKey]) {\n                        promptMessage = translationsFromPack[promptMessageKey].replace('{0}', _this.privacyUrl) + ' (Please help Microsoft improve Visual Studio Code by allowing the collection of usage data.)';\n                        yesLabel = translationsFromPack[yesLabelKey] + ' (Yes)';\n                        noLabel = translationsFromPack[noLabelKey] + ' (No)';\n                    }\n                    return undefined;\n                });\n            });\n        }\n        var logTelemetry = function (optout) {\n            /* __GDPR__\n                \"experiments:optout\" : {\n                    \"optOut\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            _this.telemetryService.publicLog('experiments:optout', typeof optout === 'boolean' ? { optout: optout } : {});\n        };\n        queryPromise.then(function () {\n            _this.notificationService.prompt(notification_1.Severity.Info, promptMessage, [\n                {\n                    label: yesLabel,\n                    run: function () {\n                        logTelemetry(false);\n                    }\n                },\n                {\n                    label: noLabel,\n                    run: function () {\n                        logTelemetry(true);\n                        _this.configurationService.updateValue('telemetry.enableTelemetry', false);\n                        _this.configurationService.updateValue('telemetry.enableCrashReporter', false);\n                    }\n                }\n            ], {\n                sticky: true,\n                onCancel: logTelemetry\n            });\n            _this.experimentService.markAsCompleted(experimentId);\n        });\n    };\n    TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN = 'workbench.telemetryOptOutShown';\n    TelemetryOptOut = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, opener_1.IOpenerService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, windows_1.IWindowService),\n        tslib_1.__param(4, windows_1.IWindowsService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, experimentService_1.IExperimentService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, extensionManagement_1.IExtensionGalleryService)\n    ], TelemetryOptOut);\n    return TelemetryOptOut;\n}());\nexports.TelemetryOptOut = TelemetryOptOut;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport product from 'vs/platform/product/node/product';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IWindowService, IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IExperimentService, ExperimentState } from 'vs/workbench/contrib/experiments/node/experimentService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { language, locale } from 'vs/base/common/platform';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class TelemetryOptOut implements IWorkbenchContribution {\n\n\tprivate static TELEMETRY_OPT_OUT_SHOWN = 'workbench.telemetryOptOutShown';\n\tprivate privacyUrl: string;\n\tprivate optOutUrl: string;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService\n\t) {\n\t\tif (!product.telemetryOptOutUrl || storageService.get(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, StorageScope.GLOBAL)) {\n\t\t\treturn;\n\t\t}\n\t\tconst experimentId = 'telemetryOptOut';\n\t\tPromise.all([\n\t\t\twindowService.isFocused(),\n\t\t\twindowsService.getWindowCount(),\n\t\t\texperimentService.getExperimentById(experimentId)\n\t\t]).then(([focused, count, experimentState]) => {\n\t\t\tif (!focused && count > 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstorageService.store(TelemetryOptOut.TELEMETRY_OPT_OUT_SHOWN, true, StorageScope.GLOBAL);\n\n\t\t\tthis.optOutUrl = product.telemetryOptOutUrl;\n\t\t\tthis.privacyUrl = product.privacyStatementUrl || product.telemetryOptOutUrl;\n\n\t\t\tif (experimentState && experimentState.state === ExperimentState.Run && telemetryService.isOptedIn) {\n\t\t\t\tthis.runExperiment(experimentId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst optOutNotice = localize('telemetryOptOut.optOutNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt out]({1}).\", this.privacyUrl, this.optOutUrl);\n\t\t\tconst optInNotice = localize('telemetryOptOut.optInNotice', \"Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt in]({1}).\", this.privacyUrl, this.optOutUrl);\n\n\t\t\tnotificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\ttelemetryService.isOptedIn ? optOutNotice : optInNotice,\n\t\t\t\t[{\n\t\t\t\t\tlabel: localize('telemetryOptOut.readMore', \"Read More\"),\n\t\t\t\t\trun: () => openerService.open(URI.parse(this.optOutUrl))\n\t\t\t\t}],\n\t\t\t\t{ sticky: true }\n\t\t\t);\n\t\t})\n\t\t\t.then(undefined, onUnexpectedError);\n\t}\n\n\tprivate runExperiment(experimentId: string) {\n\t\tconst promptMessageKey = 'telemetryOptOut.optOutOption';\n\t\tconst yesLabelKey = 'telemetryOptOut.OptIn';\n\t\tconst noLabelKey = 'telemetryOptOut.OptOut';\n\n\t\tlet promptMessage = localize('telemetryOptOut.optOutOption', \"Please help Microsoft improve Visual Studio Code by allowing the collection of usage data. Read our [privacy statement]({0}) for more details.\", this.privacyUrl);\n\t\tlet yesLabel = localize('telemetryOptOut.OptIn', \"Yes, glad to help\");\n\t\tlet noLabel = localize('telemetryOptOut.OptOut', \"No, thanks\");\n\n\t\tlet queryPromise = Promise.resolve(undefined);\n\t\tif (locale && locale !== language && locale !== 'en' && locale.indexOf('en-') === -1) {\n\t\t\tqueryPromise = this.galleryService.query({ text: `tag:lp-${locale}` }, CancellationToken.None).then(tagResult => {\n\t\t\t\tif (!tagResult || !tagResult.total) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst extensionToFetchTranslationsFrom = tagResult.firstPage.filter(e => e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0)[0] || tagResult.firstPage[0];\n\t\t\t\tif (!extensionToFetchTranslationsFrom.assets || !extensionToFetchTranslationsFrom.assets.coreTranslations) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, locale!)\n\t\t\t\t\t.then(translation => {\n\t\t\t\t\t\tconst translationsFromPack = translation && translation.contents ? translation.contents['vs/workbench/contrib/welcome/gettingStarted/electron-browser/telemetryOptOut'] : {};\n\t\t\t\t\t\tif (!!translationsFromPack[promptMessageKey] && !!translationsFromPack[yesLabelKey] && !!translationsFromPack[noLabelKey]) {\n\t\t\t\t\t\t\tpromptMessage = translationsFromPack[promptMessageKey].replace('{0}', this.privacyUrl) + ' (Please help Microsoft improve Visual Studio Code by allowing the collection of usage data.)';\n\t\t\t\t\t\t\tyesLabel = translationsFromPack[yesLabelKey] + ' (Yes)';\n\t\t\t\t\t\t\tnoLabel = translationsFromPack[noLabelKey] + ' (No)';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\n\t\tconst logTelemetry = (optout?: boolean) => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"experiments:optout\" : {\n\t\t\t\t\t\"optOut\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('experiments:optout', typeof optout === 'boolean' ? { optout } : {});\n\t\t};\n\n\t\tqueryPromise.then(() => {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tpromptMessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: yesLabel,\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tlogTelemetry(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: noLabel,\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tlogTelemetry(true);\n\t\t\t\t\t\t\tthis.configurationService.updateValue('telemetry.enableTelemetry', false);\n\t\t\t\t\t\t\tthis.configurationService.updateValue('telemetry.enableCrashReporter', false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tonCancel: logTelemetry\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.experimentService.markAsCompleted(experimentId);\n\t\t});\n\t}\n}\n"]}]}