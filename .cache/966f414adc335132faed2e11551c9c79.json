{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/indentGuides/indentGuides.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/indentGuides/indentGuides.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./indentGuides\");\nvar dynamicViewOverlay_1 = require(\"vs/editor/browser/view/dynamicViewOverlay\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar IndentGuidesOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentGuidesOverlay, _super);\n    function IndentGuidesOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._primaryLineNumber = 0;\n        _this._lineHeight = _this._context.configuration.editor.lineHeight;\n        _this._spaceWidth = _this._context.configuration.editor.fontInfo.spaceWidth;\n        _this._enabled = _this._context.configuration.editor.viewInfo.renderIndentGuides;\n        _this._activeIndentEnabled = _this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n        _this._renderResult = null;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    IndentGuidesOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    IndentGuidesOverlay.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._lineHeight = this._context.configuration.editor.lineHeight;\n        }\n        if (e.fontInfo) {\n            this._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;\n        }\n        if (e.viewInfo) {\n            this._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;\n            this._activeIndentEnabled = this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n        }\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onCursorStateChanged = function (e) {\n        var selection = e.selections[0];\n        var newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n        if (this._primaryLineNumber !== newPrimaryLineNumber) {\n            this._primaryLineNumber = newPrimaryLineNumber;\n            return true;\n        }\n        return false;\n    };\n    IndentGuidesOverlay.prototype.onDecorationsChanged = function (e) {\n        // true for inline decorations\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onScrollChanged = function (e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    };\n    IndentGuidesOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    IndentGuidesOverlay.prototype.onLanguageConfigurationChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    IndentGuidesOverlay.prototype.prepareRender = function (ctx) {\n        if (!this._enabled) {\n            this._renderResult = null;\n            return;\n        }\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        var indentSize = this._context.model.getOptions().indentSize;\n        var indentWidth = indentSize * this._spaceWidth;\n        var scrollWidth = ctx.scrollWidth;\n        var lineHeight = this._lineHeight;\n        var indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n        var activeIndentStartLineNumber = 0;\n        var activeIndentEndLineNumber = 0;\n        var activeIndentLevel = 0;\n        if (this._activeIndentEnabled && this._primaryLineNumber) {\n            var activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var containsActiveIndentGuide = (activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber);\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            var indent = indents[lineIndex];\n            var result = '';\n            var leftMostVisiblePosition = ctx.visibleRangeForPosition(new position_1.Position(lineNumber, 1));\n            var left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n            for (var i = 1; i <= indent; i++) {\n                var className = (containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr');\n                result += \"<div class=\\\"\" + className + \"\\\" style=\\\"left:\" + left + \"px;height:\" + lineHeight + \"px;width:\" + indentWidth + \"px\\\"></div>\";\n                left += indentWidth;\n                if (left > scrollWidth) {\n                    break;\n                }\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    };\n    IndentGuidesOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        var lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    };\n    return IndentGuidesOverlay;\n}(dynamicViewOverlay_1.DynamicViewOverlay));\nexports.IndentGuidesOverlay = IndentGuidesOverlay;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var editorIndentGuidesColor = theme.getColor(editorColorRegistry_1.editorIndentGuides);\n    if (editorIndentGuidesColor) {\n        collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \" + editorIndentGuidesColor + \" inset; }\");\n    }\n    var editorActiveIndentGuidesColor = theme.getColor(editorColorRegistry_1.editorActiveIndentGuides) || editorIndentGuidesColor;\n    if (editorActiveIndentGuidesColor) {\n        collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \" + editorActiveIndentGuidesColor + \" inset; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/indentGuides/indentGuides.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/indentGuides/indentGuides.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./indentGuides';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { Position } from 'vs/editor/common/core/position';\nimport { editorActiveIndentGuides, editorIndentGuides } from 'vs/editor/common/view/editorColorRegistry';\nimport { RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\n\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n\n\tprivate readonly _context: ViewContext;\n\tprivate _primaryLineNumber: number;\n\tprivate _lineHeight: number;\n\tprivate _spaceWidth: number;\n\tprivate _renderResult: string[] | null;\n\tprivate _enabled: boolean;\n\tprivate _activeIndentEnabled: boolean;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tthis._primaryLineNumber = 0;\n\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\tthis._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;\n\t\tthis._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;\n\t\tthis._activeIndentEnabled = this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n\t\tthis._renderResult = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\t}\n\t\tif (e.fontInfo) {\n\t\t\tthis._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;\n\t\t}\n\t\tif (e.viewInfo) {\n\t\t\tthis._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;\n\t\t\tthis._activeIndentEnabled = this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tconst selection = e.selections[0];\n\t\tconst newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n\n\t\tif (this._primaryLineNumber !== newPrimaryLineNumber) {\n\t\t\tthis._primaryLineNumber = newPrimaryLineNumber;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;// || e.scrollWidthChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLanguageConfigurationChanged(e: viewEvents.ViewLanguageConfigurationEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._enabled) {\n\t\t\tthis._renderResult = null;\n\t\t\treturn;\n\t\t}\n\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst { indentSize } = this._context.model.getOptions();\n\t\tconst indentWidth = indentSize * this._spaceWidth;\n\t\tconst scrollWidth = ctx.scrollWidth;\n\t\tconst lineHeight = this._lineHeight;\n\n\t\tconst indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n\n\t\tlet activeIndentStartLineNumber = 0;\n\t\tlet activeIndentEndLineNumber = 0;\n\t\tlet activeIndentLevel = 0;\n\t\tif (this._activeIndentEnabled && this._primaryLineNumber) {\n\t\t\tconst activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n\t\t\tactiveIndentStartLineNumber = activeIndentInfo.startLineNumber;\n\t\t\tactiveIndentEndLineNumber = activeIndentInfo.endLineNumber;\n\t\t\tactiveIndentLevel = activeIndentInfo.indent;\n\t\t}\n\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst containsActiveIndentGuide = (activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber);\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\tconst indent = indents[lineIndex];\n\n\t\t\tlet result = '';\n\t\t\tconst leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\n\t\t\tlet left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n\t\t\tfor (let i = 1; i <= indent; i++) {\n\t\t\t\tconst className = (containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr');\n\t\t\t\tresult += `<div class=\"${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${indentWidth}px\"></div>`;\n\t\t\t\tleft += indentWidth;\n\t\t\t\tif (left > scrollWidth) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput[lineIndex] = result;\n\t\t}\n\t\tthis._renderResult = output;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n\tif (editorIndentGuidesColor) {\n\t\tcollector.addRule(`.monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\n\t}\n\tconst editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n\tif (editorActiveIndentGuidesColor) {\n\t\tcollector.addRule(`.monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\n\t}\n});\n"]}]}