{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar lifecycle_2 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar Constants = require(\"vs/workbench/contrib/logs/common/logConstants\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar logsActions_1 = require(\"vs/workbench/contrib/logs/common/logsActions\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar LogOutputChannels = /** @class */ (function (_super) {\n    tslib_1.__extends(LogOutputChannels, _super);\n    function LogOutputChannels(windowService, environmentService, logService) {\n        var _this = _super.call(this) || this;\n        var outputChannelRegistry = platform_1.Registry.as(output_1.Extensions.OutputChannels);\n        // This channel only seems to be used when loading the app and we skip all of that, so it is never actually created or written to.\n        // outputChannelRegistry.registerChannel({ id: Constants.mainLogChannelId, label: nls.localize('mainLog', \"Main\"), file: URI.file(join(environmentService.logsPath, `main.log`)), log: true });\n        outputChannelRegistry.registerChannel({ id: Constants.sharedLogChannelId, label: nls.localize('sharedLog', \"Shared\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, \"sharedprocess.log\")), log: true });\n        outputChannelRegistry.registerChannel({ id: Constants.rendererLogChannelId, label: nls.localize('rendererLog', \"Window\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, \"renderer\" + windowService.getCurrentWindowId() + \".log\")), log: true });\n        var registerTelemetryChannel = function (level) {\n            if (level === log_1.LogLevel.Trace && !outputChannelRegistry.getChannel(Constants.telemetryLogChannelId)) {\n                outputChannelRegistry.registerChannel({ id: Constants.telemetryLogChannelId, label: nls.localize('telemetryLog', \"Telemetry\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, \"telemetry.log\")), log: true });\n            }\n        };\n        registerTelemetryChannel(logService.getLevel());\n        logService.onDidChangeLogLevel(registerTelemetryChannel);\n        var workbenchActionsRegistry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\n        var devCategory = nls.localize('developer', \"Developer\");\n        workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(logsActions_1.OpenLogsFolderAction, logsActions_1.OpenLogsFolderAction.ID, logsActions_1.OpenLogsFolderAction.LABEL), 'Developer: Open Log Folder', devCategory);\n        workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(logsActions_1.SetLogLevelAction, logsActions_1.SetLogLevelAction.ID, logsActions_1.SetLogLevelAction.LABEL), 'Developer: Set Log Level', devCategory);\n        return _this;\n    }\n    LogOutputChannels = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, log_1.ILogService)\n    ], LogOutputChannels);\n    return LogOutputChannels;\n}(lifecycle_2.Disposable));\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(LogOutputChannels, lifecycle_1.LifecyclePhase.Eventually);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { join } from 'vs/base/common/path';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IOutputChannelRegistry, Extensions as OutputExt, } from 'vs/workbench/contrib/output/common/output';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport * as Constants from 'vs/workbench/contrib/logs/common/logConstants';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchActionExtensions } from 'vs/workbench/common/actions';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { OpenLogsFolderAction, SetLogLevelAction } from 'vs/workbench/contrib/logs/common/logsActions';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\n\nclass LogOutputChannels extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper();\n\t\tlet outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\n\t\t// This channel only seems to be used when loading the app and we skip all of that, so it is never actually created or written to.\n\t\t// outputChannelRegistry.registerChannel({ id: Constants.mainLogChannelId, label: nls.localize('mainLog', \"Main\"), file: URI.file(join(environmentService.logsPath, `main.log`)), log: true });\n\t\toutputChannelRegistry.registerChannel({ id: Constants.sharedLogChannelId, label: nls.localize('sharedLog', \"Shared\"), file: URI.file(join(environmentService.logsPath, `sharedprocess.log`)), log: true });\n\t\toutputChannelRegistry.registerChannel({ id: Constants.rendererLogChannelId, label: nls.localize('rendererLog', \"Window\"), file: URI.file(join(environmentService.logsPath, `renderer${windowService.getCurrentWindowId()}.log`)), log: true });\n\n\t\tconst registerTelemetryChannel = (level: LogLevel) => {\n\t\t\tif (level === LogLevel.Trace && !outputChannelRegistry.getChannel(Constants.telemetryLogChannelId)) {\n\t\t\t\toutputChannelRegistry.registerChannel({ id: Constants.telemetryLogChannelId, label: nls.localize('telemetryLog', \"Telemetry\"), file: URI.file(join(environmentService.logsPath, `telemetry.log`)), log: true });\n\t\t\t}\n\t\t};\n\t\tregisterTelemetryChannel(logService.getLevel());\n\t\tlogService.onDidChangeLogLevel(registerTelemetryChannel);\n\n\t\tconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchActionExtensions.WorkbenchActions);\n\t\tconst devCategory = nls.localize('developer', \"Developer\");\n\t\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenLogsFolderAction, OpenLogsFolderAction.ID, OpenLogsFolderAction.LABEL), 'Developer: Open Log Folder', devCategory);\n\t\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(SetLogLevelAction, SetLogLevelAction.ID, SetLogLevelAction.LABEL), 'Developer: Set Log Level', devCategory);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LogOutputChannels, LifecyclePhase.Eventually);"]}]}