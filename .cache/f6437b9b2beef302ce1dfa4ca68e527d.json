{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar strings_1 = require(\"vs/base/common/strings\");\nfunction stringify(obj) {\n    return JSON.stringify(obj, replacer);\n}\nexports.stringify = stringify;\nfunction parse(text) {\n    var data = JSON.parse(text);\n    data = revive(data, 0);\n    return data;\n}\nexports.parse = parse;\nfunction replacer(key, value) {\n    // URI is done via toJSON-member\n    if (value instanceof RegExp) {\n        return {\n            $mid: 2,\n            source: value.source,\n            flags: strings_1.regExpFlags(value),\n        };\n    }\n    return value;\n}\nfunction revive(obj, depth) {\n    if (!obj || depth > 200) {\n        return obj;\n    }\n    if (typeof obj === 'object') {\n        switch (obj.$mid) {\n            case 1: return uri_1.URI.revive(obj);\n            case 2: return new RegExp(obj.source, obj.flags);\n        }\n        // walk object (or array)\n        for (var key in obj) {\n            if (Object.hasOwnProperty.call(obj, key)) {\n                obj[key] = revive(obj[key], depth + 1);\n            }\n        }\n    }\n    return obj;\n}\nexports.revive = revive;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,0CAAyC;AACzC,kDAAqD;AAErD,SAAgB,SAAS,CAAC,GAAQ;IACjC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC;AAFD,8BAEC;AAED,SAAgB,KAAK,CAAC,IAAY;IACjC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5B,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACvB,OAAO,IAAI,CAAC;AACb,CAAC;AAJD,sBAIC;AAMD,SAAS,QAAQ,CAAC,GAAW,EAAE,KAAU;IACxC,gCAAgC;IAChC,IAAI,KAAK,YAAY,MAAM,EAAE;QAC5B,OAAO;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,KAAK,EAAE,qBAAW,CAAC,KAAK,CAAC;SACzB,CAAC;KACF;IACD,OAAO,KAAK,CAAC;AACd,CAAC;AAED,SAAgB,MAAM,CAAC,GAAQ,EAAE,KAAa;IAE7C,IAAI,CAAC,GAAG,IAAI,KAAK,GAAG,GAAG,EAAE;QACxB,OAAO,GAAG,CAAC;KACX;IAED,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAE5B,QAA2B,GAAI,CAAC,IAAI,EAAE;YACrC,KAAK,CAAC,CAAC,CAAC,OAAO,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/B,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;SACjD;QAED,yBAAyB;QACzB,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;YACpB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;gBACzC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aACvC;SACD;KACD;IAED,OAAO,GAAG,CAAC;AACZ,CAAC;AAtBD,wBAsBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { regExpFlags } from 'vs/base/common/strings';\n\nexport function stringify(obj: any): string {\n\treturn JSON.stringify(obj, replacer);\n}\n\nexport function parse(text: string): any {\n\tlet data = JSON.parse(text);\n\tdata = revive(data, 0);\n\treturn data;\n}\n\nexport interface MarshalledObject {\n\t$mid: number;\n}\n\nfunction replacer(key: string, value: any): any {\n\t// URI is done via toJSON-member\n\tif (value instanceof RegExp) {\n\t\treturn {\n\t\t\t$mid: 2,\n\t\t\tsource: value.source,\n\t\t\tflags: regExpFlags(value),\n\t\t};\n\t}\n\treturn value;\n}\n\nexport function revive(obj: any, depth: number): any {\n\n\tif (!obj || depth > 200) {\n\t\treturn obj;\n\t}\n\n\tif (typeof obj === 'object') {\n\n\t\tswitch ((<MarshalledObject>obj).$mid) {\n\t\t\tcase 1: return URI.revive(obj);\n\t\t\tcase 2: return new RegExp(obj.source, obj.flags);\n\t\t}\n\n\t\t// walk object (or array)\n\t\tfor (let key in obj) {\n\t\t\tif (Object.hasOwnProperty.call(obj, key)) {\n\t\t\t\tobj[key] = revive(obj[key], depth + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn obj;\n}\n"]}]}