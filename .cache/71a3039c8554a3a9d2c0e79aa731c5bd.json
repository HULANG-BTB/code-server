{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorWorkerService_1 = require(\"vs/editor/common/services/editorWorkerService\");\nvar inPlaceReplaceCommand_1 = require(\"./inPlaceReplaceCommand\");\nvar editorState_1 = require(\"vs/editor/browser/core/editorState\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar async_1 = require(\"vs/base/common/async\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar InPlaceReplaceController = /** @class */ (function () {\n    function InPlaceReplaceController(editor, editorWorkerService) {\n        this.decorationIds = [];\n        this.editor = editor;\n        this.editorWorkerService = editorWorkerService;\n    }\n    InPlaceReplaceController.get = function (editor) {\n        return editor.getContribution(InPlaceReplaceController.ID);\n    };\n    InPlaceReplaceController.prototype.dispose = function () {\n    };\n    InPlaceReplaceController.prototype.getId = function () {\n        return InPlaceReplaceController.ID;\n    };\n    InPlaceReplaceController.prototype.run = function (source, up) {\n        var _this = this;\n        // cancel any pending request\n        if (this.currentRequest) {\n            this.currentRequest.cancel();\n        }\n        var editorSelection = this.editor.getSelection();\n        var model = this.editor.getModel();\n        if (!model || !editorSelection) {\n            return undefined;\n        }\n        var selection = editorSelection;\n        if (selection.startLineNumber !== selection.endLineNumber) {\n            // Can't accept multiline selection\n            return undefined;\n        }\n        var state = new editorState_1.EditorState(this.editor, editorState_1.CodeEditorStateFlag.Value | editorState_1.CodeEditorStateFlag.Position);\n        var modelURI = model.uri;\n        if (!this.editorWorkerService.canNavigateValueSet(modelURI)) {\n            return Promise.resolve(undefined);\n        }\n        this.currentRequest = async_1.createCancelablePromise(function (token) { return _this.editorWorkerService.navigateValueSet(modelURI, selection, up); });\n        return this.currentRequest.then(function (result) {\n            if (!result || !result.range || !result.value) {\n                // No proper result\n                return;\n            }\n            if (!state.validate(_this.editor)) {\n                // state has changed\n                return;\n            }\n            // Selection\n            var editRange = range_1.Range.lift(result.range);\n            var highlightRange = result.range;\n            var diff = result.value.length - (selection.endColumn - selection.startColumn);\n            // highlight\n            highlightRange = {\n                startLineNumber: highlightRange.startLineNumber,\n                startColumn: highlightRange.startColumn,\n                endLineNumber: highlightRange.endLineNumber,\n                endColumn: highlightRange.startColumn + result.value.length\n            };\n            if (diff > 1) {\n                selection = new selection_1.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);\n            }\n            // Insert new text\n            var command = new inPlaceReplaceCommand_1.InPlaceReplaceCommand(editRange, selection, result.value);\n            _this.editor.pushUndoStop();\n            _this.editor.executeCommand(source, command);\n            _this.editor.pushUndoStop();\n            // add decoration\n            _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, [{\n                    range: highlightRange,\n                    options: InPlaceReplaceController.DECORATION\n                }]);\n            // remove decoration after delay\n            if (_this.decorationRemover) {\n                _this.decorationRemover.cancel();\n            }\n            _this.decorationRemover = async_1.timeout(350);\n            _this.decorationRemover.then(function () { return _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, []); }).catch(errors_1.onUnexpectedError);\n        }).catch(errors_1.onUnexpectedError);\n    };\n    InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';\n    InPlaceReplaceController.DECORATION = textModel_1.ModelDecorationOptions.register({\n        className: 'valueSetReplacement'\n    });\n    InPlaceReplaceController = tslib_1.__decorate([\n        tslib_1.__param(1, editorWorkerService_1.IEditorWorkerService)\n    ], InPlaceReplaceController);\n    return InPlaceReplaceController;\n}());\nvar InPlaceReplaceUp = /** @class */ (function (_super) {\n    tslib_1.__extends(InPlaceReplaceUp, _super);\n    function InPlaceReplaceUp() {\n        return _super.call(this, {\n            id: 'editor.action.inPlaceReplace.up',\n            label: nls.localize('InPlaceReplaceAction.previous.label', \"Replace with Previous Value\"),\n            alias: 'Replace with Previous Value',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_COMMA,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    InPlaceReplaceUp.prototype.run = function (accessor, editor) {\n        var controller = InPlaceReplaceController.get(editor);\n        if (!controller) {\n            return Promise.resolve(undefined);\n        }\n        return controller.run(this.id, true);\n    };\n    return InPlaceReplaceUp;\n}(editorExtensions_1.EditorAction));\nvar InPlaceReplaceDown = /** @class */ (function (_super) {\n    tslib_1.__extends(InPlaceReplaceDown, _super);\n    function InPlaceReplaceDown() {\n        return _super.call(this, {\n            id: 'editor.action.inPlaceReplace.down',\n            label: nls.localize('InPlaceReplaceAction.next.label', \"Replace with Next Value\"),\n            alias: 'Replace with Next Value',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_DOT,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    InPlaceReplaceDown.prototype.run = function (accessor, editor) {\n        var controller = InPlaceReplaceController.get(editor);\n        if (!controller) {\n            return Promise.resolve(undefined);\n        }\n        return controller.run(this.id, false);\n    };\n    return InPlaceReplaceDown;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorContribution(InPlaceReplaceController);\neditorExtensions_1.registerEditorAction(InPlaceReplaceUp);\neditorExtensions_1.registerEditorAction(InPlaceReplaceDown);\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var border = theme.getColor(editorColorRegistry_1.editorBracketMatchBorder);\n    if (border) {\n        collector.addRule(\".monaco-editor.vs .valueSetReplacement { outline: solid 2px \" + border + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { registerEditorAction, ServicesAccessor, EditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IInplaceReplaceSupportResult } from 'vs/editor/common/modes';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { InPlaceReplaceCommand } from './inPlaceReplaceCommand';\nimport { EditorState, CodeEditorStateFlag } from 'vs/editor/browser/core/editorState';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { editorBracketMatchBorder } from 'vs/editor/common/view/editorColorRegistry';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { CancelablePromise, createCancelablePromise, timeout } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nclass InPlaceReplaceController implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.inPlaceReplaceController';\n\n\tstatic get(editor: ICodeEditor): InPlaceReplaceController {\n\t\treturn editor.getContribution<InPlaceReplaceController>(InPlaceReplaceController.ID);\n\t}\n\n\tprivate static readonly DECORATION = ModelDecorationOptions.register({\n\t\tclassName: 'valueSetReplacement'\n\t});\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate readonly editorWorkerService: IEditorWorkerService;\n\tprivate decorationIds: string[] = [];\n\tprivate currentRequest: CancelablePromise<IInplaceReplaceSupportResult | null>;\n\tprivate decorationRemover: CancelablePromise<void>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService\n\t) {\n\t\tthis.editor = editor;\n\t\tthis.editorWorkerService = editorWorkerService;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic getId(): string {\n\t\treturn InPlaceReplaceController.ID;\n\t}\n\n\tpublic run(source: string, up: boolean): Promise<void> | undefined {\n\n\t\t// cancel any pending request\n\t\tif (this.currentRequest) {\n\t\t\tthis.currentRequest.cancel();\n\t\t}\n\n\t\tconst editorSelection = this.editor.getSelection();\n\t\tconst model = this.editor.getModel();\n\t\tif (!model || !editorSelection) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet selection = editorSelection;\n\t\tif (selection.startLineNumber !== selection.endLineNumber) {\n\t\t\t// Can't accept multiline selection\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst state = new EditorState(this.editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Position);\n\t\tconst modelURI = model.uri;\n\t\tif (!this.editorWorkerService.canNavigateValueSet(modelURI)) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.currentRequest = createCancelablePromise(token => this.editorWorkerService.navigateValueSet(modelURI, selection!, up));\n\n\t\treturn this.currentRequest.then(result => {\n\n\t\t\tif (!result || !result.range || !result.value) {\n\t\t\t\t// No proper result\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!state.validate(this.editor)) {\n\t\t\t\t// state has changed\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Selection\n\t\t\tlet editRange = Range.lift(result.range);\n\t\t\tlet highlightRange = result.range;\n\t\t\tlet diff = result.value.length - (selection!.endColumn - selection!.startColumn);\n\n\t\t\t// highlight\n\t\t\thighlightRange = {\n\t\t\t\tstartLineNumber: highlightRange.startLineNumber,\n\t\t\t\tstartColumn: highlightRange.startColumn,\n\t\t\t\tendLineNumber: highlightRange.endLineNumber,\n\t\t\t\tendColumn: highlightRange.startColumn + result.value.length\n\t\t\t};\n\t\t\tif (diff > 1) {\n\t\t\t\tselection = new Selection(selection!.startLineNumber, selection!.startColumn, selection!.endLineNumber, selection!.endColumn + diff - 1);\n\t\t\t}\n\n\t\t\t// Insert new text\n\t\t\tconst command = new InPlaceReplaceCommand(editRange, selection!, result.value);\n\n\t\t\tthis.editor.pushUndoStop();\n\t\t\tthis.editor.executeCommand(source, command);\n\t\t\tthis.editor.pushUndoStop();\n\n\t\t\t// add decoration\n\t\t\tthis.decorationIds = this.editor.deltaDecorations(this.decorationIds, [{\n\t\t\t\trange: highlightRange,\n\t\t\t\toptions: InPlaceReplaceController.DECORATION\n\t\t\t}]);\n\n\t\t\t// remove decoration after delay\n\t\t\tif (this.decorationRemover) {\n\t\t\t\tthis.decorationRemover.cancel();\n\t\t\t}\n\t\t\tthis.decorationRemover = timeout(350);\n\t\t\tthis.decorationRemover.then(() => this.decorationIds = this.editor.deltaDecorations(this.decorationIds, [])).catch(onUnexpectedError);\n\n\t\t}).catch(onUnexpectedError);\n\t}\n}\n\nclass InPlaceReplaceUp extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inPlaceReplace.up',\n\t\t\tlabel: nls.localize('InPlaceReplaceAction.previous.label', \"Replace with Previous Value\"),\n\t\t\talias: 'Replace with Previous Value',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_COMMA,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> | undefined {\n\t\tconst controller = InPlaceReplaceController.get(editor);\n\t\tif (!controller) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn controller.run(this.id, true);\n\t}\n}\n\nclass InPlaceReplaceDown extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inPlaceReplace.down',\n\t\t\tlabel: nls.localize('InPlaceReplaceAction.next.label', \"Replace with Next Value\"),\n\t\t\talias: 'Replace with Next Value',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_DOT,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> | undefined {\n\t\tconst controller = InPlaceReplaceController.get(editor);\n\t\tif (!controller) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn controller.run(this.id, false);\n\t}\n}\n\nregisterEditorContribution(InPlaceReplaceController);\nregisterEditorAction(InPlaceReplaceUp);\nregisterEditorAction(InPlaceReplaceDown);\n\nregisterThemingParticipant((theme, collector) => {\n\tconst border = theme.getColor(editorBracketMatchBorder);\n\tif (border) {\n\t\tcollector.addRule(`.monaco-editor.vs .valueSetReplacement { outline: solid 2px ${border}; }`);\n\t}\n});\n"]}]}