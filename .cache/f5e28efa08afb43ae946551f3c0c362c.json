{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"vs/nls\", \"vs/platform/registry/common/platform\", \"vs/platform/jsonschemas/common/jsonContributionRegistry\", \"vs/platform/theme/common/colorRegistry\"], function (require, exports, nls, platform_1, jsonContributionRegistry_1, colorRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let textMateScopes = [\n        'comment',\n        'comment.block',\n        'comment.block.documentation',\n        'comment.line',\n        'constant',\n        'constant.character',\n        'constant.character.escape',\n        'constant.numeric',\n        'constant.numeric.integer',\n        'constant.numeric.float',\n        'constant.numeric.hex',\n        'constant.numeric.octal',\n        'constant.other',\n        'constant.regexp',\n        'constant.rgb-value',\n        'emphasis',\n        'entity',\n        'entity.name',\n        'entity.name.class',\n        'entity.name.function',\n        'entity.name.method',\n        'entity.name.section',\n        'entity.name.selector',\n        'entity.name.tag',\n        'entity.name.type',\n        'entity.other',\n        'entity.other.attribute-name',\n        'entity.other.inherited-class',\n        'invalid',\n        'invalid.deprecated',\n        'invalid.illegal',\n        'keyword',\n        'keyword.control',\n        'keyword.operator',\n        'keyword.operator.new',\n        'keyword.operator.assignment',\n        'keyword.operator.arithmetic',\n        'keyword.operator.logical',\n        'keyword.other',\n        'markup',\n        'markup.bold',\n        'markup.changed',\n        'markup.deleted',\n        'markup.heading',\n        'markup.inline.raw',\n        'markup.inserted',\n        'markup.italic',\n        'markup.list',\n        'markup.list.numbered',\n        'markup.list.unnumbered',\n        'markup.other',\n        'markup.quote',\n        'markup.raw',\n        'markup.underline',\n        'markup.underline.link',\n        'meta',\n        'meta.block',\n        'meta.cast',\n        'meta.class',\n        'meta.function',\n        'meta.function-call',\n        'meta.preprocessor',\n        'meta.return-type',\n        'meta.selector',\n        'meta.tag',\n        'meta.type.annotation',\n        'meta.type',\n        'punctuation.definition.string.begin',\n        'punctuation.definition.string.end',\n        'punctuation.separator',\n        'punctuation.separator.continuation',\n        'punctuation.terminator',\n        'storage',\n        'storage.modifier',\n        'storage.type',\n        'string',\n        'string.interpolated',\n        'string.other',\n        'string.quoted',\n        'string.quoted.double',\n        'string.quoted.other',\n        'string.quoted.single',\n        'string.quoted.triple',\n        'string.regexp',\n        'string.unquoted',\n        'strong',\n        'support',\n        'support.class',\n        'support.constant',\n        'support.function',\n        'support.other',\n        'support.type',\n        'support.type.property-name',\n        'support.variable',\n        'variable',\n        'variable.language',\n        'variable.name',\n        'variable.other',\n        'variable.other.readwrite',\n        'variable.parameter'\n    ];\n    exports.textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\n    exports.textmateColorSettingsSchemaId = `${exports.textmateColorsSchemaId}#definitions/settings`;\n    const textmateColorSchema = {\n        type: 'array',\n        definitions: {\n            settings: {\n                type: 'object',\n                description: nls.localize('schema.token.settings', 'Colors and styles for the token.'),\n                properties: {\n                    foreground: {\n                        type: 'string',\n                        description: nls.localize('schema.token.foreground', 'Foreground color for the token.'),\n                        format: 'color-hex',\n                        default: '#ff0000'\n                    },\n                    background: {\n                        type: 'string',\n                        deprecationMessage: nls.localize('schema.token.background.warning', 'Token background colors are currently not supported.')\n                    },\n                    fontStyle: {\n                        type: 'string',\n                        description: nls.localize('schema.token.fontStyle', 'Font style of the rule: \\'italic\\', \\'bold\\' or \\'underline\\' or a combination. The empty string unsets inherited settings.'),\n                        pattern: '^(\\\\s*\\\\b(italic|bold|underline))*\\\\s*$',\n                        patternErrorMessage: nls.localize('schema.fontStyle.error', 'Font style must be \\'italic\\', \\'bold\\' or \\'underline\\' or a combination or the empty string.'),\n                        defaultSnippets: [{ label: nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)'), bodyText: '\"\"' }, { body: 'italic' }, { body: 'bold' }, { body: 'underline' }, { body: 'italic bold' }, { body: 'italic underline' }, { body: 'bold underline' }, { body: 'italic bold underline' }]\n                    }\n                },\n                additionalProperties: false,\n                defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n            }\n        },\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n            properties: {\n                name: {\n                    type: 'string',\n                    description: nls.localize('schema.properties.name', 'Description of the rule.')\n                },\n                scope: {\n                    description: nls.localize('schema.properties.scope', 'Scope selector against which this rule matches.'),\n                    anyOf: [\n                        {\n                            enum: textMateScopes\n                        },\n                        {\n                            type: 'string'\n                        },\n                        {\n                            type: 'array',\n                            items: {\n                                enum: textMateScopes\n                            }\n                        },\n                        {\n                            type: 'array',\n                            items: {\n                                type: 'string'\n                            }\n                        }\n                    ]\n                },\n                settings: {\n                    $ref: '#definitions/settings'\n                }\n            },\n            required: [\n                'settings', 'scope'\n            ],\n            additionalProperties: false\n        }\n    };\n    exports.colorThemeSchemaId = 'vscode://schemas/color-theme';\n    const colorThemeSchema = {\n        type: 'object',\n        allowComments: true,\n        properties: {\n            colors: {\n                description: nls.localize('schema.workbenchColors', 'Colors in the workbench'),\n                $ref: colorRegistry_1.workbenchColorsSchemaId,\n                additionalProperties: false\n            },\n            tokenColors: {\n                anyOf: [{\n                        type: 'string',\n                        description: nls.localize('schema.tokenColors.path', 'Path to a tmTheme file (relative to the current file).')\n                    },\n                    {\n                        description: nls.localize('schema.colors', 'Colors for syntax highlighting'),\n                        $ref: exports.textmateColorsSchemaId\n                    }\n                ]\n            }\n        }\n    };\n    function registerColorThemeSchemas() {\n        let schemaRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\n        schemaRegistry.registerSchema(exports.colorThemeSchemaId, colorThemeSchema);\n        schemaRegistry.registerSchema(exports.textmateColorsSchemaId, textmateColorSchema);\n    }\n    exports.registerColorThemeSchemas = registerColorThemeSchemas;\n});\n",null]}