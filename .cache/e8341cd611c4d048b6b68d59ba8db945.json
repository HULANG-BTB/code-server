{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logs.contribution.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/path\", \"vs/platform/registry/common/platform\", \"vs/workbench/common/contributions\", \"vs/workbench/contrib/output/common/output\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/environment/common/environment\", \"vs/platform/windows/common/windows\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/workbench/contrib/logs/common/logConstants\", \"vs/workbench/common/actions\", \"vs/platform/actions/common/actions\", \"vs/workbench/contrib/logs/common/logsActions\", \"vs/platform/log/common/log\"], function (require, exports, nls, path_1, platform_1, contributions_1, output_1, lifecycle_1, environment_1, windows_1, lifecycle_2, uri_1, Constants, actions_1, actions_2, logsActions_1, log_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let LogOutputChannels = class LogOutputChannels extends lifecycle_2.Disposable {\n        constructor(windowService, environmentService, logService) {\n            super();\n            let outputChannelRegistry = platform_1.Registry.as(output_1.Extensions.OutputChannels);\n            // This channel only seems to be used when loading the app and we skip all of that, so it is never actually created or written to.\n            // outputChannelRegistry.registerChannel({ id: Constants.mainLogChannelId, label: nls.localize('mainLog', \"Main\"), file: URI.file(join(environmentService.logsPath, `main.log`)), log: true });\n            outputChannelRegistry.registerChannel({ id: Constants.sharedLogChannelId, label: nls.localize('sharedLog', \"Shared\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, `sharedprocess.log`)), log: true });\n            outputChannelRegistry.registerChannel({ id: Constants.rendererLogChannelId, label: nls.localize('rendererLog', \"Window\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, `renderer${windowService.getCurrentWindowId()}.log`)), log: true });\n            const registerTelemetryChannel = (level) => {\n                if (level === log_1.LogLevel.Trace && !outputChannelRegistry.getChannel(Constants.telemetryLogChannelId)) {\n                    outputChannelRegistry.registerChannel({ id: Constants.telemetryLogChannelId, label: nls.localize('telemetryLog', \"Telemetry\"), file: uri_1.URI.file(path_1.join(environmentService.logsPath, `telemetry.log`)), log: true });\n                }\n            };\n            registerTelemetryChannel(logService.getLevel());\n            logService.onDidChangeLogLevel(registerTelemetryChannel);\n            const workbenchActionsRegistry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\n            const devCategory = nls.localize('developer', \"Developer\");\n            workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(logsActions_1.OpenLogsFolderAction, logsActions_1.OpenLogsFolderAction.ID, logsActions_1.OpenLogsFolderAction.LABEL), 'Developer: Open Log Folder', devCategory);\n            workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(logsActions_1.SetLogLevelAction, logsActions_1.SetLogLevelAction.ID, logsActions_1.SetLogLevelAction.LABEL), 'Developer: Set Log Level', devCategory);\n        }\n    };\n    LogOutputChannels = __decorate([\n        __param(0, windows_1.IWindowService),\n        __param(1, environment_1.IEnvironmentService),\n        __param(2, log_1.ILogService)\n    ], LogOutputChannels);\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(LogOutputChannels, lifecycle_1.LifecyclePhase.Eventually);\n});\n",null]}