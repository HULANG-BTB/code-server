{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/layoutActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/layoutActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/actions\");\nvar nls = require(\"vs/nls\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_2 = require(\"vs/base/common/platform\");\nvar contextkeys_1 = require(\"vs/workbench/common/contextkeys\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nvar viewCategory = nls.localize('view', \"View\");\n// --- Toggle Activity Bar\nvar ToggleActivityBarVisibilityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleActivityBarVisibilityAction, _super);\n    function ToggleActivityBarVisibilityAction(id, label, layoutService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.configurationService = configurationService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleActivityBarVisibilityAction.prototype.run = function () {\n        var visibility = this.layoutService.isVisible(layoutService_1.Parts.ACTIVITYBAR_PART);\n        var newVisibilityValue = !visibility;\n        return this.configurationService.updateValue(ToggleActivityBarVisibilityAction.activityBarVisibleKey, newVisibilityValue, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleActivityBarVisibilityAction.ID = 'workbench.action.toggleActivityBarVisibility';\n    ToggleActivityBarVisibilityAction.LABEL = nls.localize('toggleActivityBar', \"Toggle Activity Bar Visibility\");\n    ToggleActivityBarVisibilityAction.activityBarVisibleKey = 'workbench.activityBar.visible';\n    ToggleActivityBarVisibilityAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ToggleActivityBarVisibilityAction);\n    return ToggleActivityBarVisibilityAction;\n}(actions_1.Action));\nexports.ToggleActivityBarVisibilityAction = ToggleActivityBarVisibilityAction;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleActivityBarVisibilityAction, ToggleActivityBarVisibilityAction.ID, ToggleActivityBarVisibilityAction.LABEL), 'View: Toggle Activity Bar Visibility', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: ToggleActivityBarVisibilityAction.ID,\n        title: nls.localize({ key: 'miToggleActivityBar', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Activity Bar\")\n    },\n    order: 4\n});\n// --- Toggle Centered Layout\nvar ToggleCenteredLayout = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleCenteredLayout, _super);\n    function ToggleCenteredLayout(id, label, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleCenteredLayout.prototype.run = function () {\n        this.layoutService.centerEditorLayout(!this.layoutService.isEditorLayoutCentered());\n        return Promise.resolve();\n    };\n    ToggleCenteredLayout.ID = 'workbench.action.toggleCenteredLayout';\n    ToggleCenteredLayout.LABEL = nls.localize('toggleCenteredLayout', \"Toggle Centered Layout\");\n    ToggleCenteredLayout = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], ToggleCenteredLayout);\n    return ToggleCenteredLayout;\n}(actions_1.Action));\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleCenteredLayout, ToggleCenteredLayout.ID, ToggleCenteredLayout.LABEL), 'View: Toggle Centered Layout', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '1_toggle_view',\n    command: {\n        id: ToggleCenteredLayout.ID,\n        title: nls.localize('miToggleCenteredLayout', \"Toggle Centered Layout\")\n    },\n    order: 3\n});\n// --- Toggle Editor Layout\nvar ToggleEditorLayoutAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleEditorLayoutAction, _super);\n    function ToggleEditorLayoutAction(id, label, editorGroupService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.editorGroupService = editorGroupService;\n        _this.toDispose = [];\n        _this.class = 'flip-editor-layout';\n        _this.updateEnablement();\n        _this.registerListeners();\n        return _this;\n    }\n    ToggleEditorLayoutAction.prototype.registerListeners = function () {\n        var _this = this;\n        this.toDispose.push(this.editorGroupService.onDidAddGroup(function () { return _this.updateEnablement(); }));\n        this.toDispose.push(this.editorGroupService.onDidRemoveGroup(function () { return _this.updateEnablement(); }));\n    };\n    ToggleEditorLayoutAction.prototype.updateEnablement = function () {\n        this.enabled = this.editorGroupService.count > 1;\n    };\n    ToggleEditorLayoutAction.prototype.run = function () {\n        var newOrientation = (this.editorGroupService.orientation === editorGroupsService_1.GroupOrientation.VERTICAL) ? editorGroupsService_1.GroupOrientation.HORIZONTAL : editorGroupsService_1.GroupOrientation.VERTICAL;\n        this.editorGroupService.setGroupOrientation(newOrientation);\n        return Promise.resolve();\n    };\n    ToggleEditorLayoutAction.prototype.dispose = function () {\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n        _super.prototype.dispose.call(this);\n    };\n    ToggleEditorLayoutAction.ID = 'workbench.action.toggleEditorGroupLayout';\n    ToggleEditorLayoutAction.LABEL = nls.localize('flipLayout', \"Toggle Vertical/Horizontal Editor Layout\");\n    ToggleEditorLayoutAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorGroupsService_1.IEditorGroupsService)\n    ], ToggleEditorLayoutAction);\n    return ToggleEditorLayoutAction;\n}(actions_1.Action));\nexports.ToggleEditorLayoutAction = ToggleEditorLayoutAction;\ncommands_1.CommandsRegistry.registerCommand('_workbench.editor.setGroupOrientation', function (accessor, args) {\n    var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n    var orientation = args[0];\n    editorGroupService.setGroupOrientation(orientation);\n    return Promise.resolve();\n});\nvar group = viewCategory;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleEditorLayoutAction, ToggleEditorLayoutAction.ID, ToggleEditorLayoutAction.LABEL, { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_0, mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_0 } }), 'View: Flip Editor Group Layout', group);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarLayoutMenu, {\n    group: 'z_flip',\n    command: {\n        id: ToggleEditorLayoutAction.ID,\n        title: nls.localize({ key: 'miToggleEditorLayout', comment: ['&& denotes a mnemonic'] }, \"Flip &&Layout\")\n    },\n    order: 1\n});\n// --- Toggle Sidebar Position\nvar ToggleSidebarPositionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleSidebarPositionAction, _super);\n    function ToggleSidebarPositionAction(id, label, layoutService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.configurationService = configurationService;\n        _this.enabled = !!_this.layoutService && !!_this.configurationService;\n        return _this;\n    }\n    ToggleSidebarPositionAction.prototype.run = function () {\n        var position = this.layoutService.getSideBarPosition();\n        var newPositionValue = (position === layoutService_1.Position.LEFT) ? 'right' : 'left';\n        return this.configurationService.updateValue(ToggleSidebarPositionAction.sidebarPositionConfigurationKey, newPositionValue, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleSidebarPositionAction.getLabel = function (layoutService) {\n        return layoutService.getSideBarPosition() === layoutService_1.Position.LEFT ? nls.localize('moveSidebarRight', \"Move Side Bar Right\") : nls.localize('moveSidebarLeft', \"Move Side Bar Left\");\n    };\n    ToggleSidebarPositionAction.ID = 'workbench.action.toggleSidebarPosition';\n    ToggleSidebarPositionAction.LABEL = nls.localize('toggleSidebarPosition', \"Toggle Side Bar Position\");\n    ToggleSidebarPositionAction.sidebarPositionConfigurationKey = 'workbench.sideBar.location';\n    ToggleSidebarPositionAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ToggleSidebarPositionAction);\n    return ToggleSidebarPositionAction;\n}(actions_1.Action));\nexports.ToggleSidebarPositionAction = ToggleSidebarPositionAction;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleSidebarPositionAction, ToggleSidebarPositionAction.ID, ToggleSidebarPositionAction.LABEL), 'View: Toggle Side Bar Position', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: ToggleSidebarPositionAction.ID,\n        title: nls.localize({ key: 'miMoveSidebarLeftRight', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Left/Right\")\n    },\n    order: 2\n});\n// --- Toggle Sidebar Visibility\nvar ToggleEditorVisibilityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleEditorVisibilityAction, _super);\n    function ToggleEditorVisibilityAction(id, label, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleEditorVisibilityAction.prototype.run = function () {\n        var hideEditor = this.layoutService.isVisible(layoutService_1.Parts.EDITOR_PART);\n        this.layoutService.setEditorHidden(hideEditor);\n        return Promise.resolve();\n    };\n    ToggleEditorVisibilityAction.ID = 'workbench.action.toggleEditorVisibility';\n    ToggleEditorVisibilityAction.LABEL = nls.localize('toggleEditor', \"Toggle Editor Area\");\n    ToggleEditorVisibilityAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], ToggleEditorVisibilityAction);\n    return ToggleEditorVisibilityAction;\n}(actions_1.Action));\nexports.ToggleEditorVisibilityAction = ToggleEditorVisibilityAction;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleEditorVisibilityAction, ToggleEditorVisibilityAction.ID, ToggleEditorVisibilityAction.LABEL), 'View: Toggle Editor Area Visibility', viewCategory, contextkey_1.ContextKeyExpr.equals('config.workbench.useExperimentalGridLayout', true));\nvar ToggleSidebarVisibilityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleSidebarVisibilityAction, _super);\n    function ToggleSidebarVisibilityAction(id, label, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleSidebarVisibilityAction.prototype.run = function () {\n        var hideSidebar = this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART);\n        this.layoutService.setSideBarHidden(hideSidebar);\n        return Promise.resolve();\n    };\n    ToggleSidebarVisibilityAction.ID = 'workbench.action.toggleSidebarVisibility';\n    ToggleSidebarVisibilityAction.LABEL = nls.localize('toggleSidebar', \"Toggle Side Bar Visibility\");\n    ToggleSidebarVisibilityAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], ToggleSidebarVisibilityAction);\n    return ToggleSidebarVisibilityAction;\n}(actions_1.Action));\nexports.ToggleSidebarVisibilityAction = ToggleSidebarVisibilityAction;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleSidebarVisibilityAction, ToggleSidebarVisibilityAction.ID, ToggleSidebarVisibilityAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_B }), 'View: Toggle Side Bar Visibility', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: ToggleSidebarVisibilityAction.ID,\n        title: nls.localize({ key: 'miToggleSidebar', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Side Bar\")\n    },\n    order: 1\n});\n// --- Toggle Statusbar Visibility\nvar ToggleStatusbarVisibilityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleStatusbarVisibilityAction, _super);\n    function ToggleStatusbarVisibilityAction(id, label, layoutService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.configurationService = configurationService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleStatusbarVisibilityAction.prototype.run = function () {\n        var visibility = this.layoutService.isVisible(layoutService_1.Parts.STATUSBAR_PART);\n        var newVisibilityValue = !visibility;\n        return this.configurationService.updateValue(ToggleStatusbarVisibilityAction.statusbarVisibleKey, newVisibilityValue, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleStatusbarVisibilityAction.ID = 'workbench.action.toggleStatusbarVisibility';\n    ToggleStatusbarVisibilityAction.LABEL = nls.localize('toggleStatusbar', \"Toggle Status Bar Visibility\");\n    ToggleStatusbarVisibilityAction.statusbarVisibleKey = 'workbench.statusBar.visible';\n    ToggleStatusbarVisibilityAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ToggleStatusbarVisibilityAction);\n    return ToggleStatusbarVisibilityAction;\n}(actions_1.Action));\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleStatusbarVisibilityAction, ToggleStatusbarVisibilityAction.ID, ToggleStatusbarVisibilityAction.LABEL), 'View: Toggle Status Bar Visibility', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '2_workbench_layout',\n    command: {\n        id: ToggleStatusbarVisibilityAction.ID,\n        title: nls.localize({ key: 'miToggleStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Status Bar\")\n    },\n    order: 3\n});\n// --- Toggle Tabs Visibility\nvar ToggleTabsVisibilityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleTabsVisibilityAction, _super);\n    function ToggleTabsVisibilityAction(id, label, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    ToggleTabsVisibilityAction.prototype.run = function () {\n        var visibility = this.configurationService.getValue(ToggleTabsVisibilityAction.tabsVisibleKey);\n        var newVisibilityValue = !visibility;\n        return this.configurationService.updateValue(ToggleTabsVisibilityAction.tabsVisibleKey, newVisibilityValue);\n    };\n    ToggleTabsVisibilityAction.ID = 'workbench.action.toggleTabsVisibility';\n    ToggleTabsVisibilityAction.LABEL = nls.localize('toggleTabs', \"Toggle Tab Visibility\");\n    ToggleTabsVisibilityAction.tabsVisibleKey = 'workbench.editor.showTabs';\n    ToggleTabsVisibilityAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ToggleTabsVisibilityAction);\n    return ToggleTabsVisibilityAction;\n}(actions_1.Action));\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleTabsVisibilityAction, ToggleTabsVisibilityAction.ID, ToggleTabsVisibilityAction.LABEL, {\n    primary: undefined,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_W, },\n    linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_W, }\n}), 'View: Toggle Tab Visibility', viewCategory);\n// --- Toggle Zen Mode\nvar ToggleZenMode = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleZenMode, _super);\n    function ToggleZenMode(id, label, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        _this.enabled = !!_this.layoutService;\n        return _this;\n    }\n    ToggleZenMode.prototype.run = function () {\n        this.layoutService.toggleZenMode();\n        return Promise.resolve();\n    };\n    ToggleZenMode.ID = 'workbench.action.toggleZenMode';\n    ToggleZenMode.LABEL = nls.localize('toggleZenMode', \"Toggle Zen Mode\");\n    ToggleZenMode = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], ToggleZenMode);\n    return ToggleZenMode;\n}(actions_1.Action));\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleZenMode, ToggleZenMode.ID, ToggleZenMode.LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_Z) }), 'View: Toggle Zen Mode', viewCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '1_toggle_view',\n    command: {\n        id: ToggleZenMode.ID,\n        title: nls.localize('miToggleZenMode', \"Toggle Zen Mode\")\n    },\n    order: 2\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'workbench.action.exitZenMode',\n    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib - 1000,\n    handler: function (accessor) {\n        var layoutService = accessor.get(layoutService_1.IWorkbenchLayoutService);\n        layoutService.toggleZenMode();\n    },\n    when: editor_1.InEditorZenModeContext,\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyCode.Escape, keyCodes_1.KeyCode.Escape)\n});\n// --- Toggle Menu Bar\nvar ToggleMenuBarAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleMenuBarAction, _super);\n    function ToggleMenuBarAction(id, label, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    ToggleMenuBarAction.prototype.run = function () {\n        var currentVisibilityValue = this.configurationService.getValue(ToggleMenuBarAction.menuBarVisibilityKey);\n        if (typeof currentVisibilityValue !== 'string') {\n            currentVisibilityValue = 'default';\n        }\n        var newVisibilityValue;\n        if (currentVisibilityValue === 'visible' || currentVisibilityValue === 'default') {\n            newVisibilityValue = 'toggle';\n        }\n        else {\n            newVisibilityValue = 'default';\n        }\n        this.configurationService.updateValue(ToggleMenuBarAction.menuBarVisibilityKey, newVisibilityValue, configuration_1.ConfigurationTarget.USER);\n        return Promise.resolve();\n    };\n    ToggleMenuBarAction.ID = 'workbench.action.toggleMenuBar';\n    ToggleMenuBarAction.LABEL = nls.localize('toggleMenuBar', \"Toggle Menu Bar\");\n    ToggleMenuBarAction.menuBarVisibilityKey = 'window.menuBarVisibility';\n    ToggleMenuBarAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ToggleMenuBarAction);\n    return ToggleMenuBarAction;\n}(actions_1.Action));\nexports.ToggleMenuBarAction = ToggleMenuBarAction;\nif (platform_2.isWindows || platform_2.isLinux) {\n    registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);\n}\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarAppearanceMenu, {\n    group: '1_toggle_view',\n    command: {\n        id: ToggleMenuBarAction.ID,\n        title: nls.localize({ key: 'miToggleMenuBar', comment: ['&& denotes a mnemonic'] }, \"Toggle Menu &&Bar\")\n    },\n    when: contextkeys_1.IsMacContext.toNegated(),\n    order: 4\n});\n// --- Resize View\nvar BaseResizeViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseResizeViewAction, _super);\n    function BaseResizeViewAction(id, label, layoutService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    BaseResizeViewAction.prototype.resizePart = function (sizeChange) {\n        var isEditorFocus = this.layoutService.hasFocus(layoutService_1.Parts.EDITOR_PART);\n        var isSidebarFocus = this.layoutService.hasFocus(layoutService_1.Parts.SIDEBAR_PART);\n        var isPanelFocus = this.layoutService.hasFocus(layoutService_1.Parts.PANEL_PART);\n        var part;\n        if (isSidebarFocus) {\n            part = layoutService_1.Parts.SIDEBAR_PART;\n        }\n        else if (isPanelFocus) {\n            part = layoutService_1.Parts.PANEL_PART;\n        }\n        else if (isEditorFocus) {\n            part = layoutService_1.Parts.EDITOR_PART;\n        }\n        if (part) {\n            this.layoutService.resizePart(part, sizeChange);\n        }\n    };\n    BaseResizeViewAction.RESIZE_INCREMENT = 6.5; // This is a media-size percentage\n    BaseResizeViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], BaseResizeViewAction);\n    return BaseResizeViewAction;\n}(actions_1.Action));\nexports.BaseResizeViewAction = BaseResizeViewAction;\nvar IncreaseViewSizeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(IncreaseViewSizeAction, _super);\n    function IncreaseViewSizeAction(id, label, layoutService) {\n        return _super.call(this, id, label, layoutService) || this;\n    }\n    IncreaseViewSizeAction.prototype.run = function () {\n        this.resizePart(BaseResizeViewAction.RESIZE_INCREMENT);\n        return Promise.resolve(true);\n    };\n    IncreaseViewSizeAction.ID = 'workbench.action.increaseViewSize';\n    IncreaseViewSizeAction.LABEL = nls.localize('increaseViewSize', \"Increase Current View Size\");\n    IncreaseViewSizeAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], IncreaseViewSizeAction);\n    return IncreaseViewSizeAction;\n}(BaseResizeViewAction));\nexports.IncreaseViewSizeAction = IncreaseViewSizeAction;\nvar DecreaseViewSizeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DecreaseViewSizeAction, _super);\n    function DecreaseViewSizeAction(id, label, layoutService) {\n        return _super.call(this, id, label, layoutService) || this;\n    }\n    DecreaseViewSizeAction.prototype.run = function () {\n        this.resizePart(-BaseResizeViewAction.RESIZE_INCREMENT);\n        return Promise.resolve(true);\n    };\n    DecreaseViewSizeAction.ID = 'workbench.action.decreaseViewSize';\n    DecreaseViewSizeAction.LABEL = nls.localize('decreaseViewSize', \"Decrease Current View Size\");\n    DecreaseViewSizeAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService)\n    ], DecreaseViewSizeAction);\n    return DecreaseViewSizeAction;\n}(BaseResizeViewAction));\nexports.DecreaseViewSizeAction = DecreaseViewSizeAction;\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(IncreaseViewSizeAction, IncreaseViewSizeAction.ID, IncreaseViewSizeAction.LABEL, undefined), 'View: Increase Current View Size', viewCategory);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(DecreaseViewSizeAction, DecreaseViewSizeAction.ID, DecreaseViewSizeAction.LABEL, undefined), 'View: Decrease Current View Size', viewCategory);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/layoutActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/layoutActions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,kCAAgC;AAEhC,4BAA8B;AAC9B,iEAAgE;AAChE,kDAAgD;AAChD,8DAAgG;AAChG,uDAAmF;AACnF,gFAA4G;AAC5G,oFAA8G;AAC9G,iEAAwE;AACxE,+FAAiH;AAEjH,oDAAoE;AACpE,sDAAgE;AAEhE,oDAA6D;AAC7D,+DAA+D;AAC/D,yFAA0G;AAC1G,qDAAoE;AACpE,uEAA0E;AAE1E,IAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAU,CAAC,gBAAgB,CAAC,CAAC;AACpF,IAAM,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAElD,0BAA0B;AAE1B;IAAuD,6DAAM;IAO5D,2CACC,EAAU,EACV,KAAa,EAC6B,aAAsC,EACxC,oBAA2C;QAJpF,YAMC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAGhB;QAN0C,mBAAa,GAAb,aAAa,CAAyB;QACxC,0BAAoB,GAApB,oBAAoB,CAAuB;QAInF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,+CAAG,GAAH;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,gBAAgB,CAAC,CAAC;QACxE,IAAM,kBAAkB,GAAG,CAAC,UAAU,CAAC;QAEvC,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,iCAAiC,CAAC,qBAAqB,EAAE,kBAAkB,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;IACrJ,CAAC;IArBe,oCAAE,GAAG,8CAA8C,CAAC;IACpD,uCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,gCAAgC,CAAC,CAAC;IAEpE,uDAAqB,GAAG,+BAA+B,CAAC;IALpE,iCAAiC;QAU3C,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,qCAAqB,CAAA;OAXX,iCAAiC,CAwB7C;IAAD,wCAAC;CAAA,AAxBD,CAAuD,gBAAM,GAwB5D;AAxBY,8EAAiC;AA0B9C,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,iCAAiC,EAAE,iCAAiC,CAAC,EAAE,EAAE,iCAAiC,CAAC,KAAK,CAAC,EAAE,sCAAsC,EAAE,YAAY,CAAC,CAAC;AAEnO,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,iCAAiC,CAAC,EAAE;QACxC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,uBAAuB,CAAC;KAChH;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,6BAA6B;AAE7B;IAAmC,gDAAM;IAKxC,8BACC,EAAU,EACV,KAAa,EAC6B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAEhB;QAJ0C,mBAAa,GAAb,aAAa,CAAyB;QAGhF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,kCAAG,GAAH;QACC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC,CAAC;QAEpF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAhBe,uBAAE,GAAG,uCAAuC,CAAC;IAC7C,0BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;IAHlF,oBAAoB;QAQvB,mBAAA,uCAAuB,CAAA;OARpB,oBAAoB,CAmBzB;IAAD,2BAAC;CAAA,AAnBD,CAAmC,gBAAM,GAmBxC;AAED,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAAE,8BAA8B,EAAE,YAAY,CAAC,CAAC;AAEpL,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,eAAe;IACtB,OAAO,EAAE;QACR,EAAE,EAAE,oBAAoB,CAAC,EAAE;QAC3B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;KACvE;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,2BAA2B;AAE3B;IAA8C,oDAAM;IAOnD,kCACC,EAAU,EACV,KAAa,EAC0B,kBAAwC;QAHhF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAQhB;QAVuC,wBAAkB,GAAlB,kBAAkB,CAAsB;QAI/E,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,KAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC;QAClC,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IAEO,oDAAiB,GAAzB;QAAA,iBAGC;QAFA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;IAC9F,CAAC;IAEO,mDAAgB,GAAxB;QACC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,CAAC,CAAC;IAClD,CAAC;IAED,sCAAG,GAAH;QACC,IAAM,cAAc,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,sCAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,sCAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,sCAAgB,CAAC,QAAQ,CAAC;QACrJ,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAE5D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,0CAAO,GAAP;QACC,IAAI,CAAC,SAAS,GAAG,mBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEzC,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAxCe,2BAAE,GAAG,0CAA0C,CAAC;IAChD,8BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,0CAA0C,CAAC,CAAC;IAHnF,wBAAwB;QAUlC,mBAAA,0CAAoB,CAAA;OAVV,wBAAwB,CA2CpC;IAAD,+BAAC;CAAA,AA3CD,CAA8C,gBAAM,GA2CnD;AA3CY,4DAAwB;AA6CrC,2BAAgB,CAAC,eAAe,CAAC,uCAAuC,EAAE,UAAU,QAA0B,EAAE,IAAwB;IACvI,IAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,0CAAoB,CAAC,CAAC;IACvD,IAAA,qBAAW,CAAS;IAE3B,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAEpD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC1B,CAAC,CAAC,CAAC;AAEH,IAAM,KAAK,GAAG,YAAY,CAAC;AAC3B,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,wBAAwB,EAAE,wBAAwB,CAAC,EAAE,EAAE,wBAAwB,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,KAAK,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,gCAAgC,EAAE,KAAK,CAAC,CAAC;AAElT,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,iBAAiB,EAAE;IACrD,KAAK,EAAE,QAAQ;IACf,OAAO,EAAE;QACR,EAAE,EAAE,wBAAwB,CAAC,EAAE;QAC/B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,sBAAsB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,eAAe,CAAC;KACzG;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,8BAA8B;AAE9B;IAAiD,uDAAM;IAOtD,qCACC,EAAU,EACV,KAAa,EAC6B,aAAsC,EACxC,oBAA2C;QAJpF,YAMC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAGhB;QAN0C,mBAAa,GAAb,aAAa,CAAyB;QACxC,0BAAoB,GAApB,oBAAoB,CAAuB;QAInF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,IAAI,CAAC,CAAC,KAAI,CAAC,oBAAoB,CAAC;;IACpE,CAAC;IAED,yCAAG,GAAH;QACC,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;QACzD,IAAM,gBAAgB,GAAG,CAAC,QAAQ,KAAK,wBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QAEzE,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,2BAA2B,CAAC,+BAA+B,EAAE,gBAAgB,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;IACvJ,CAAC;IAEM,oCAAQ,GAAf,UAAgB,aAAsC;QACrD,OAAO,aAAa,CAAC,kBAAkB,EAAE,KAAK,wBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;IAC/K,CAAC;IAzBe,8BAAE,GAAG,wCAAwC,CAAC;IAC9C,iCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,0BAA0B,CAAC,CAAC;IAElE,2DAA+B,GAAG,4BAA4B,CAAC;IAL3E,2BAA2B;QAUrC,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,qCAAqB,CAAA;OAXX,2BAA2B,CA4BvC;IAAD,kCAAC;CAAA,AA5BD,CAAiD,gBAAM,GA4BtD;AA5BY,kEAA2B;AA8BxC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,2BAA2B,EAAE,2BAA2B,CAAC,EAAE,EAAE,2BAA2B,CAAC,KAAK,CAAC,EAAE,gCAAgC,EAAE,YAAY,CAAC,CAAC;AAE3M,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,2BAA2B,CAAC,EAAE;QAClC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,wBAAwB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,4BAA4B,CAAC;KACxH;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,gCAAgC;AAEhC;IAAkD,wDAAM;IAIvD,sCACC,EAAU,EACV,KAAa,EAC6B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAGhB;QAL0C,mBAAa,GAAb,aAAa,CAAyB;QAIhF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,0CAAG,GAAH;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,WAAW,CAAC,CAAC;QACnE,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE/C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAlBe,+BAAE,GAAG,yCAAyC,CAAC;IAC/C,kCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;IAF/D,4BAA4B;QAOtC,mBAAA,uCAAuB,CAAA;OAPb,4BAA4B,CAqBxC;IAAD,mCAAC;CAAA,AArBD,CAAkD,gBAAM,GAqBvD;AArBY,oEAA4B;AAuBzC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,4BAA4B,EAAE,4BAA4B,CAAC,EAAE,EAAE,4BAA4B,CAAC,KAAK,CAAC,EAAE,qCAAqC,EAAE,YAAY,EAAE,2BAAc,CAAC,MAAM,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAAC,CAAC;AAG9R;IAAmD,yDAAM;IAKxD,uCACC,EAAU,EACV,KAAa,EAC6B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAGhB;QAL0C,mBAAa,GAAb,aAAa,CAAyB;QAIhF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,2CAAG,GAAH;QACC,IAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAEjD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAlBe,gCAAE,GAAG,0CAA0C,CAAC;IAChD,mCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,4BAA4B,CAAC,CAAC;IAHxE,6BAA6B;QAQvC,mBAAA,uCAAuB,CAAA;OARb,6BAA6B,CAqBzC;IAAD,oCAAC;CAAA,AArBD,CAAmD,gBAAM,GAqBxD;AArBY,sEAA6B;AAuB1C,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,6BAA6B,EAAE,6BAA6B,CAAC,EAAE,EAAE,6BAA6B,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,CAAC,EAAE,kCAAkC,EAAE,YAAY,CAAC,CAAC;AAEhQ,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,6BAA6B,CAAC,EAAE;QACpC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,mBAAmB,CAAC;KACxG;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,kCAAkC;AAElC;IAA8C,2DAAM;IAOnD,yCACC,EAAU,EACV,KAAa,EAC6B,aAAsC,EACxC,oBAA2C;QAJpF,YAMC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAGhB;QAN0C,mBAAa,GAAb,aAAa,CAAyB;QACxC,0BAAoB,GAApB,oBAAoB,CAAuB;QAInF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,6CAAG,GAAH;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAK,CAAC,cAAc,CAAC,CAAC;QACtE,IAAM,kBAAkB,GAAG,CAAC,UAAU,CAAC;QAEvC,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,+BAA+B,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;IACjJ,CAAC;IArBe,kCAAE,GAAG,4CAA4C,CAAC;IAClD,qCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,8BAA8B,CAAC,CAAC;IAEhE,mDAAmB,GAAG,6BAA6B,CAAC;IALvE,+BAA+B;QAUlC,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,qCAAqB,CAAA;OAXlB,+BAA+B,CAwBpC;IAAD,sCAAC;CAAA,AAxBD,CAA8C,gBAAM,GAwBnD;AAED,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,+BAA+B,EAAE,+BAA+B,CAAC,EAAE,EAAE,+BAA+B,CAAC,KAAK,CAAC,EAAE,oCAAoC,EAAE,YAAY,CAAC,CAAC;AAE3N,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,oBAAoB;IAC3B,OAAO,EAAE;QACR,EAAE,EAAE,+BAA+B,CAAC,EAAE;QACtC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,qBAAqB,CAAC;KAC5G;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,6BAA6B;AAE7B;IAAyC,sDAAM;IAO9C,oCACC,EAAU,EACV,KAAa,EAC2B,oBAA2C;QAHpF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHwC,0BAAoB,GAApB,oBAAoB,CAAuB;;IAGpF,CAAC;IAED,wCAAG,GAAH;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAS,0BAA0B,CAAC,cAAc,CAAC,CAAC;QACzG,IAAM,kBAAkB,GAAG,CAAC,UAAU,CAAC;QAEvC,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,0BAA0B,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAC7G,CAAC;IAlBe,6BAAE,GAAG,uCAAuC,CAAC;IAC7C,gCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;IAEpD,yCAAc,GAAG,2BAA2B,CAAC;IALhE,0BAA0B;QAU7B,mBAAA,qCAAqB,CAAA;OAVlB,0BAA0B,CAqB/B;IAAD,iCAAC;CAAA,AArBD,CAAyC,gBAAM,GAqB9C;AAED,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,EAAE,EAAE,0BAA0B,CAAC,KAAK,EAAE;IACtJ,OAAO,EAAE,SAAU;IACnB,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,GAAG;IAClE,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,GAAG;CACpE,CAAC,EAAE,6BAA6B,EAAE,YAAY,CAAC,CAAC;AAEjD,sBAAsB;AAEtB;IAA4B,yCAAM;IAKjC,uBACC,EAAU,EACV,KAAa,EAC6B,aAAsC;QAHjF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAEhB;QAJ0C,mBAAa,GAAb,aAAa,CAAyB;QAGhF,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;;IACrC,CAAC;IAED,2BAAG,GAAH;QACC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QAEnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAhBe,gBAAE,GAAG,gCAAgC,CAAC;IACtC,mBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;IAHpE,aAAa;QAQhB,mBAAA,uCAAuB,CAAA;OARpB,aAAa,CAmBlB;IAAD,oBAAC;CAAA,AAnBD,CAA4B,gBAAM,GAmBjC;AAED,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,mBAAQ,CAAC,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE,kBAAO,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,uBAAuB,EAAE,YAAY,CAAC,CAAC;AAE9N,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,eAAe;IACtB,OAAO,EAAE;QACR,EAAE,EAAE,aAAa,CAAC,EAAE;QACpB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;KACzD;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,yCAAmB,CAAC,gCAAgC,CAAC;IACpD,EAAE,EAAE,8BAA8B;IAClC,MAAM,EAAE,sCAAgB,CAAC,aAAa,GAAG,IAAI;IAC7C,OAAO,YAAC,QAA0B;QACjC,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,uCAAuB,CAAC,CAAC;QAC5D,aAAa,CAAC,aAAa,EAAE,CAAC;IAC/B,CAAC;IACD,IAAI,EAAE,+BAAsB;IAC5B,OAAO,EAAE,mBAAQ,CAAC,kBAAO,CAAC,MAAM,EAAE,kBAAO,CAAC,MAAM,CAAC;CACjD,CAAC,CAAC;AAEH,sBAAsB;AAEtB;IAAyC,+CAAM;IAO9C,6BACC,EAAU,EACV,KAAa,EAC2B,oBAA2C;QAHpF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHwC,0BAAoB,GAApB,oBAAoB,CAAuB;;IAGpF,CAAC;IAED,iCAAG,GAAH;QACC,IAAI,sBAAsB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAoB,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;QAC7H,IAAI,OAAO,sBAAsB,KAAK,QAAQ,EAAE;YAC/C,sBAAsB,GAAG,SAAS,CAAC;SACnC;QAED,IAAI,kBAA0B,CAAC;QAC/B,IAAI,sBAAsB,KAAK,SAAS,IAAI,sBAAsB,KAAK,SAAS,EAAE;YACjF,kBAAkB,GAAG,QAAQ,CAAC;SAC9B;aAAM;YACN,kBAAkB,GAAG,SAAS,CAAC;SAC/B;QAED,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;QAE9H,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IA7Be,sBAAE,GAAG,gCAAgC,CAAC;IAC/C,yBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;IAExC,wCAAoB,GAAG,0BAA0B,CAAC;IAL9D,mBAAmB;QAU7B,mBAAA,qCAAqB,CAAA;OAVX,mBAAmB,CAgC/B;IAAD,0BAAC;CAAA,AAhCD,CAAyC,gBAAM,GAgC9C;AAhCY,kDAAmB;AAkChC,IAAI,oBAAS,IAAI,kBAAO,EAAE;IACzB,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAE,uBAAuB,EAAE,YAAY,CAAC,CAAC;CAC1K;AAED,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,qBAAqB,EAAE;IACzD,KAAK,EAAE,eAAe;IACtB,OAAO,EAAE;QACR,EAAE,EAAE,mBAAmB,CAAC,EAAE;QAC1B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,mBAAmB,CAAC;KACxG;IACD,IAAI,EAAE,0BAAY,CAAC,SAAS,EAAE;IAC9B,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,kBAAkB;AAElB;IAAmD,gDAAM;IAIxD,8BACC,EAAU,EACV,KAAa,EACsB,aAAsC;QAH1E,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHmC,mBAAa,GAAb,aAAa,CAAyB;;IAG1E,CAAC;IAES,yCAAU,GAApB,UAAqB,UAAkB;QACtC,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAK,CAAC,WAAW,CAAC,CAAC;QACrE,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAK,CAAC,YAAY,CAAC,CAAC;QACvE,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAK,CAAC,UAAU,CAAC,CAAC;QAEnE,IAAI,IAAuB,CAAC;QAC5B,IAAI,cAAc,EAAE;YACnB,IAAI,GAAG,qBAAK,CAAC,YAAY,CAAC;SAC1B;aAAM,IAAI,YAAY,EAAE;YACxB,IAAI,GAAG,qBAAK,CAAC,UAAU,CAAC;SACxB;aAAM,IAAI,aAAa,EAAE;YACzB,IAAI,GAAG,qBAAK,CAAC,WAAW,CAAC;SACzB;QAED,IAAI,IAAI,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SAChD;IACF,CAAC;IA3BgB,qCAAgB,GAAG,GAAG,CAAC,CAAC,kCAAkC;IAFtD,oBAAoB;QAOvC,mBAAA,uCAAuB,CAAA;OAPJ,oBAAoB,CA8BzC;IAAD,2BAAC;CAAA,AA9BD,CAAmD,gBAAM,GA8BxD;AA9BqB,oDAAoB;AAgC1C;IAA4C,kDAAoB;IAK/D,gCACC,EAAU,EACV,KAAa,EACY,aAAsC;eAE/D,kBAAM,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC;IAChC,CAAC;IAED,oCAAG,GAAH;QACC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACvD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAde,yBAAE,GAAG,mCAAmC,CAAC;IACzC,4BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,4BAA4B,CAAC,CAAC;IAH3E,sBAAsB;QAQhC,mBAAA,uCAAuB,CAAA;OARb,sBAAsB,CAiBlC;IAAD,6BAAC;CAAA,AAjBD,CAA4C,oBAAoB,GAiB/D;AAjBY,wDAAsB;AAmBnC;IAA4C,kDAAoB;IAK/D,gCACC,EAAU,EACV,KAAa,EACY,aAAsC;eAG/D,kBAAM,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC;IAChC,CAAC;IAED,oCAAG,GAAH;QACC,IAAI,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACxD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAfe,yBAAE,GAAG,mCAAmC,CAAC;IACzC,4BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,4BAA4B,CAAC,CAAC;IAH3E,sBAAsB;QAQhC,mBAAA,uCAAuB,CAAA;OARb,sBAAsB,CAkBlC;IAAD,6BAAC;CAAA,AAlBD,CAA4C,oBAAoB,GAkB/D;AAlBY,wDAAsB;AAoBnC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,EAAE,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE,kCAAkC,EAAE,YAAY,CAAC,CAAC;AACzM,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,EAAE,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE,kCAAkC,EAAE,YAAY,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/actions';\n\nimport * as nls from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Action } from 'vs/base/common/actions';\nimport { SyncActionDescriptor, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actions';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchLayoutService, Parts, Position } from 'vs/workbench/services/layout/browser/layoutService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IEditorGroupsService, GroupOrientation } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeyMod, KeyCode, KeyChord } from 'vs/base/common/keyCodes';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { MenuBarVisibility } from 'vs/platform/windows/common/windows';\nimport { isWindows, isLinux } from 'vs/base/common/platform';\nimport { IsMacContext } from 'vs/workbench/common/contextkeys';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { InEditorZenModeContext } from 'vs/workbench/common/editor';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\nconst viewCategory = nls.localize('view', \"View\");\n\n// --- Toggle Activity Bar\n\nexport class ToggleActivityBarVisibilityAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleActivityBarVisibility';\n\tstatic readonly LABEL = nls.localize('toggleActivityBar', \"Toggle Activity Bar Visibility\");\n\n\tprivate static readonly activityBarVisibleKey = 'workbench.activityBar.visible';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst visibility = this.layoutService.isVisible(Parts.ACTIVITYBAR_PART);\n\t\tconst newVisibilityValue = !visibility;\n\n\t\treturn this.configurationService.updateValue(ToggleActivityBarVisibilityAction.activityBarVisibleKey, newVisibilityValue, ConfigurationTarget.USER);\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleActivityBarVisibilityAction, ToggleActivityBarVisibilityAction.ID, ToggleActivityBarVisibilityAction.LABEL), 'View: Toggle Activity Bar Visibility', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: ToggleActivityBarVisibilityAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleActivityBar', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Activity Bar\")\n\t},\n\torder: 4\n});\n\n// --- Toggle Centered Layout\n\nclass ToggleCenteredLayout extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleCenteredLayout';\n\tstatic readonly LABEL = nls.localize('toggleCenteredLayout', \"Toggle Centered Layout\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tthis.layoutService.centerEditorLayout(!this.layoutService.isEditorLayoutCentered());\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleCenteredLayout, ToggleCenteredLayout.ID, ToggleCenteredLayout.LABEL), 'View: Toggle Centered Layout', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '1_toggle_view',\n\tcommand: {\n\t\tid: ToggleCenteredLayout.ID,\n\t\ttitle: nls.localize('miToggleCenteredLayout', \"Toggle Centered Layout\")\n\t},\n\torder: 3\n});\n\n// --- Toggle Editor Layout\n\nexport class ToggleEditorLayoutAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleEditorGroupLayout';\n\tstatic readonly LABEL = nls.localize('flipLayout', \"Toggle Vertical/Horizontal Editor Layout\");\n\n\tprivate toDispose: IDisposable[];\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.toDispose = [];\n\n\t\tthis.class = 'flip-editor-layout';\n\t\tthis.updateEnablement();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(this.editorGroupService.onDidAddGroup(() => this.updateEnablement()));\n\t\tthis.toDispose.push(this.editorGroupService.onDidRemoveGroup(() => this.updateEnablement()));\n\t}\n\n\tprivate updateEnablement(): void {\n\t\tthis.enabled = this.editorGroupService.count > 1;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst newOrientation = (this.editorGroupService.orientation === GroupOrientation.VERTICAL) ? GroupOrientation.HORIZONTAL : GroupOrientation.VERTICAL;\n\t\tthis.editorGroupService.setGroupOrientation(newOrientation);\n\n\t\treturn Promise.resolve();\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\n\t\tsuper.dispose();\n\t}\n}\n\nCommandsRegistry.registerCommand('_workbench.editor.setGroupOrientation', function (accessor: ServicesAccessor, args: [GroupOrientation]) {\n\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\tconst [orientation] = args;\n\n\teditorGroupService.setGroupOrientation(orientation);\n\n\treturn Promise.resolve();\n});\n\nconst group = viewCategory;\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleEditorLayoutAction, ToggleEditorLayoutAction.ID, ToggleEditorLayoutAction.LABEL, { primary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_0, mac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_0 } }), 'View: Flip Editor Group Layout', group);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {\n\tgroup: 'z_flip',\n\tcommand: {\n\t\tid: ToggleEditorLayoutAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleEditorLayout', comment: ['&& denotes a mnemonic'] }, \"Flip &&Layout\")\n\t},\n\torder: 1\n});\n\n// --- Toggle Sidebar Position\n\nexport class ToggleSidebarPositionAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleSidebarPosition';\n\tstatic readonly LABEL = nls.localize('toggleSidebarPosition', \"Toggle Side Bar Position\");\n\n\tprivate static readonly sidebarPositionConfigurationKey = 'workbench.sideBar.location';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.layoutService && !!this.configurationService;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst position = this.layoutService.getSideBarPosition();\n\t\tconst newPositionValue = (position === Position.LEFT) ? 'right' : 'left';\n\n\t\treturn this.configurationService.updateValue(ToggleSidebarPositionAction.sidebarPositionConfigurationKey, newPositionValue, ConfigurationTarget.USER);\n\t}\n\n\tstatic getLabel(layoutService: IWorkbenchLayoutService): string {\n\t\treturn layoutService.getSideBarPosition() === Position.LEFT ? nls.localize('moveSidebarRight', \"Move Side Bar Right\") : nls.localize('moveSidebarLeft', \"Move Side Bar Left\");\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleSidebarPositionAction, ToggleSidebarPositionAction.ID, ToggleSidebarPositionAction.LABEL), 'View: Toggle Side Bar Position', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: ToggleSidebarPositionAction.ID,\n\t\ttitle: nls.localize({ key: 'miMoveSidebarLeftRight', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Left/Right\")\n\t},\n\torder: 2\n});\n\n// --- Toggle Sidebar Visibility\n\nexport class ToggleEditorVisibilityAction extends Action {\n\tstatic readonly ID = 'workbench.action.toggleEditorVisibility';\n\tstatic readonly LABEL = nls.localize('toggleEditor', \"Toggle Editor Area\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst hideEditor = this.layoutService.isVisible(Parts.EDITOR_PART);\n\t\tthis.layoutService.setEditorHidden(hideEditor);\n\n\t\treturn Promise.resolve();\n\t}\n\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleEditorVisibilityAction, ToggleEditorVisibilityAction.ID, ToggleEditorVisibilityAction.LABEL), 'View: Toggle Editor Area Visibility', viewCategory, ContextKeyExpr.equals('config.workbench.useExperimentalGridLayout', true));\n\n\nexport class ToggleSidebarVisibilityAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleSidebarVisibility';\n\tstatic readonly LABEL = nls.localize('toggleSidebar', \"Toggle Side Bar Visibility\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst hideSidebar = this.layoutService.isVisible(Parts.SIDEBAR_PART);\n\t\tthis.layoutService.setSideBarHidden(hideSidebar);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleSidebarVisibilityAction, ToggleSidebarVisibilityAction.ID, ToggleSidebarVisibilityAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_B }), 'View: Toggle Side Bar Visibility', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: ToggleSidebarVisibilityAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleSidebar', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Side Bar\")\n\t},\n\torder: 1\n});\n\n// --- Toggle Statusbar Visibility\n\nclass ToggleStatusbarVisibilityAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleStatusbarVisibility';\n\tstatic readonly LABEL = nls.localize('toggleStatusbar', \"Toggle Status Bar Visibility\");\n\n\tprivate static readonly statusbarVisibleKey = 'workbench.statusBar.visible';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst visibility = this.layoutService.isVisible(Parts.STATUSBAR_PART);\n\t\tconst newVisibilityValue = !visibility;\n\n\t\treturn this.configurationService.updateValue(ToggleStatusbarVisibilityAction.statusbarVisibleKey, newVisibilityValue, ConfigurationTarget.USER);\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleStatusbarVisibilityAction, ToggleStatusbarVisibilityAction.ID, ToggleStatusbarVisibilityAction.LABEL), 'View: Toggle Status Bar Visibility', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '2_workbench_layout',\n\tcommand: {\n\t\tid: ToggleStatusbarVisibilityAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Status Bar\")\n\t},\n\torder: 3\n});\n\n// --- Toggle Tabs Visibility\n\nclass ToggleTabsVisibilityAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleTabsVisibility';\n\tstatic readonly LABEL = nls.localize('toggleTabs', \"Toggle Tab Visibility\");\n\n\tprivate static readonly tabsVisibleKey = 'workbench.editor.showTabs';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst visibility = this.configurationService.getValue<string>(ToggleTabsVisibilityAction.tabsVisibleKey);\n\t\tconst newVisibilityValue = !visibility;\n\n\t\treturn this.configurationService.updateValue(ToggleTabsVisibilityAction.tabsVisibleKey, newVisibilityValue);\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleTabsVisibilityAction, ToggleTabsVisibilityAction.ID, ToggleTabsVisibilityAction.LABEL, {\n\tprimary: undefined!,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_W, },\n\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KEY_W, }\n}), 'View: Toggle Tab Visibility', viewCategory);\n\n// --- Toggle Zen Mode\n\nclass ToggleZenMode extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleZenMode';\n\tstatic readonly LABEL = nls.localize('toggleZenMode', \"Toggle Zen Mode\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t\tthis.enabled = !!this.layoutService;\n\t}\n\n\trun(): Promise<any> {\n\t\tthis.layoutService.toggleZenMode();\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleZenMode, ToggleZenMode.ID, ToggleZenMode.LABEL, { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_Z) }), 'View: Toggle Zen Mode', viewCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '1_toggle_view',\n\tcommand: {\n\t\tid: ToggleZenMode.ID,\n\t\ttitle: nls.localize('miToggleZenMode', \"Toggle Zen Mode\")\n\t},\n\torder: 2\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.action.exitZenMode',\n\tweight: KeybindingWeight.EditorContrib - 1000,\n\thandler(accessor: ServicesAccessor) {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tlayoutService.toggleZenMode();\n\t},\n\twhen: InEditorZenModeContext,\n\tprimary: KeyChord(KeyCode.Escape, KeyCode.Escape)\n});\n\n// --- Toggle Menu Bar\n\nexport class ToggleMenuBarAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleMenuBar';\n\tstatic LABEL = nls.localize('toggleMenuBar', \"Toggle Menu Bar\");\n\n\tprivate static readonly menuBarVisibilityKey = 'window.menuBarVisibility';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\tlet currentVisibilityValue = this.configurationService.getValue<MenuBarVisibility>(ToggleMenuBarAction.menuBarVisibilityKey);\n\t\tif (typeof currentVisibilityValue !== 'string') {\n\t\t\tcurrentVisibilityValue = 'default';\n\t\t}\n\n\t\tlet newVisibilityValue: string;\n\t\tif (currentVisibilityValue === 'visible' || currentVisibilityValue === 'default') {\n\t\t\tnewVisibilityValue = 'toggle';\n\t\t} else {\n\t\t\tnewVisibilityValue = 'default';\n\t\t}\n\n\t\tthis.configurationService.updateValue(ToggleMenuBarAction.menuBarVisibilityKey, newVisibilityValue, ConfigurationTarget.USER);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nif (isWindows || isLinux) {\n\tregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);\n}\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tgroup: '1_toggle_view',\n\tcommand: {\n\t\tid: ToggleMenuBarAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleMenuBar', comment: ['&& denotes a mnemonic'] }, \"Toggle Menu &&Bar\")\n\t},\n\twhen: IsMacContext.toNegated(),\n\torder: 4\n});\n\n// --- Resize View\n\nexport abstract class BaseResizeViewAction extends Action {\n\n\tprotected static RESIZE_INCREMENT = 6.5; // This is a media-size percentage\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService protected layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprotected resizePart(sizeChange: number): void {\n\t\tconst isEditorFocus = this.layoutService.hasFocus(Parts.EDITOR_PART);\n\t\tconst isSidebarFocus = this.layoutService.hasFocus(Parts.SIDEBAR_PART);\n\t\tconst isPanelFocus = this.layoutService.hasFocus(Parts.PANEL_PART);\n\n\t\tlet part: Parts | undefined;\n\t\tif (isSidebarFocus) {\n\t\t\tpart = Parts.SIDEBAR_PART;\n\t\t} else if (isPanelFocus) {\n\t\t\tpart = Parts.PANEL_PART;\n\t\t} else if (isEditorFocus) {\n\t\t\tpart = Parts.EDITOR_PART;\n\t\t}\n\n\t\tif (part) {\n\t\t\tthis.layoutService.resizePart(part, sizeChange);\n\t\t}\n\t}\n}\n\nexport class IncreaseViewSizeAction extends BaseResizeViewAction {\n\n\tstatic readonly ID = 'workbench.action.increaseViewSize';\n\tstatic readonly LABEL = nls.localize('increaseViewSize', \"Increase Current View Size\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label, layoutService);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.resizePart(BaseResizeViewAction.RESIZE_INCREMENT);\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class DecreaseViewSizeAction extends BaseResizeViewAction {\n\n\tstatic readonly ID = 'workbench.action.decreaseViewSize';\n\tstatic readonly LABEL = nls.localize('decreaseViewSize', \"Decrease Current View Size\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\n\t) {\n\t\tsuper(id, label, layoutService);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.resizePart(-BaseResizeViewAction.RESIZE_INCREMENT);\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(IncreaseViewSizeAction, IncreaseViewSizeAction.ID, IncreaseViewSizeAction.LABEL, undefined), 'View: Increase Current View Size', viewCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(DecreaseViewSizeAction, DecreaseViewSizeAction.ID, DecreaseViewSizeAction.LABEL, undefined), 'View: Decrease Current View Size', viewCategory);\n"]}]}