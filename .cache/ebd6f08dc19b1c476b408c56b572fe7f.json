{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionsUtil.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionsUtil.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/base/common/arrays\", \"vs/platform/product/node/product\"], function (require, exports, extensionManagementUtil_1, arrays_1, product_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function isUIExtension(manifest, uiContributions, configurationService) {\n        const extensionId = extensionManagementUtil_1.getGalleryExtensionId(manifest.publisher, manifest.name);\n        const configuredUIExtensions = configurationService.getValue('_workbench.uiExtensions') || [];\n        if (configuredUIExtensions.length) {\n            if (configuredUIExtensions.indexOf(extensionId) !== -1) {\n                return true;\n            }\n            if (configuredUIExtensions.indexOf(`-${extensionId}`) !== -1) {\n                return false;\n            }\n        }\n        switch (manifest.extensionKind) {\n            case 'ui': return true;\n            case 'workspace': return false;\n            default: {\n                if (arrays_1.isNonEmptyArray(product_1.default.uiExtensions) && product_1.default.uiExtensions.some(id => extensionManagementUtil_1.areSameExtensions({ id }, { id: extensionId }))) {\n                    return true;\n                }\n                if (manifest.main) {\n                    return false;\n                }\n                if (manifest.contributes) {\n                    if (!uiContributions.length || Object.keys(manifest.contributes).some(contribution => uiContributions.indexOf(contribution) === -1)) {\n                        return false;\n                    }\n                }\n                // Default is UI Extension\n                return true;\n            }\n        }\n    }\n    exports.isUIExtension = isUIExtension;\n});\n",null]}