{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/jsonErrorMessages.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonErrorMessages.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Extracted from json.ts to keep json nls free.\n */\nvar nls_1 = require(\"vs/nls\");\nvar json_1 = require(\"./json\");\nfunction getParseErrorMessage(errorCode) {\n    switch (errorCode) {\n        case json_1.ParseErrorCode.InvalidSymbol: return nls_1.localize('error.invalidSymbol', 'Invalid symbol');\n        case json_1.ParseErrorCode.InvalidNumberFormat: return nls_1.localize('error.invalidNumberFormat', 'Invalid number format');\n        case json_1.ParseErrorCode.PropertyNameExpected: return nls_1.localize('error.propertyNameExpected', 'Property name expected');\n        case json_1.ParseErrorCode.ValueExpected: return nls_1.localize('error.valueExpected', 'Value expected');\n        case json_1.ParseErrorCode.ColonExpected: return nls_1.localize('error.colonExpected', 'Colon expected');\n        case json_1.ParseErrorCode.CommaExpected: return nls_1.localize('error.commaExpected', 'Comma expected');\n        case json_1.ParseErrorCode.CloseBraceExpected: return nls_1.localize('error.closeBraceExpected', 'Closing brace expected');\n        case json_1.ParseErrorCode.CloseBracketExpected: return nls_1.localize('error.closeBracketExpected', 'Closing bracket expected');\n        case json_1.ParseErrorCode.EndOfFileExpected: return nls_1.localize('error.endOfFileExpected', 'End of file expected');\n        default:\n            return '';\n    }\n}\nexports.getParseErrorMessage = getParseErrorMessage;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonErrorMessages.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/jsonErrorMessages.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG;;GAEG;AACH,8BAAkC;AAClC,+BAAwC;AAExC,SAAgB,oBAAoB,CAAC,SAAyB;IAC7D,QAAQ,SAAS,EAAE;QAClB,KAAK,qBAAc,CAAC,aAAa,CAAC,CAAC,OAAO,cAAQ,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;QAC5F,KAAK,qBAAc,CAAC,mBAAmB,CAAC,CAAC,OAAO,cAAQ,CAAC,2BAA2B,EAAE,uBAAuB,CAAC,CAAC;QAC/G,KAAK,qBAAc,CAAC,oBAAoB,CAAC,CAAC,OAAO,cAAQ,CAAC,4BAA4B,EAAE,wBAAwB,CAAC,CAAC;QAClH,KAAK,qBAAc,CAAC,aAAa,CAAC,CAAC,OAAO,cAAQ,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;QAC5F,KAAK,qBAAc,CAAC,aAAa,CAAC,CAAC,OAAO,cAAQ,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;QAC5F,KAAK,qBAAc,CAAC,aAAa,CAAC,CAAC,OAAO,cAAQ,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;QAC5F,KAAK,qBAAc,CAAC,kBAAkB,CAAC,CAAC,OAAO,cAAQ,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,CAAC;QAC9G,KAAK,qBAAc,CAAC,oBAAoB,CAAC,CAAC,OAAO,cAAQ,CAAC,4BAA4B,EAAE,0BAA0B,CAAC,CAAC;QACpH,KAAK,qBAAc,CAAC,iBAAiB,CAAC,CAAC,OAAO,cAAQ,CAAC,yBAAyB,EAAE,sBAAsB,CAAC,CAAC;QAC1G;YACC,OAAO,EAAE,CAAC;KACX;AACF,CAAC;AAdD,oDAcC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Extracted from json.ts to keep json nls free.\n */\nimport { localize } from 'vs/nls';\nimport { ParseErrorCode } from './json';\n\nexport function getParseErrorMessage(errorCode: ParseErrorCode): string {\n\tswitch (errorCode) {\n\t\tcase ParseErrorCode.InvalidSymbol: return localize('error.invalidSymbol', 'Invalid symbol');\n\t\tcase ParseErrorCode.InvalidNumberFormat: return localize('error.invalidNumberFormat', 'Invalid number format');\n\t\tcase ParseErrorCode.PropertyNameExpected: return localize('error.propertyNameExpected', 'Property name expected');\n\t\tcase ParseErrorCode.ValueExpected: return localize('error.valueExpected', 'Value expected');\n\t\tcase ParseErrorCode.ColonExpected: return localize('error.colonExpected', 'Colon expected');\n\t\tcase ParseErrorCode.CommaExpected: return localize('error.commaExpected', 'Comma expected');\n\t\tcase ParseErrorCode.CloseBraceExpected: return localize('error.closeBraceExpected', 'Closing brace expected');\n\t\tcase ParseErrorCode.CloseBracketExpected: return localize('error.closeBracketExpected', 'Closing bracket expected');\n\t\tcase ParseErrorCode.EndOfFileExpected: return localize('error.endOfFileExpected', 'End of file expected');\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}"]}]}