{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/platform\", \"vs/base/common/uri\"], function (require, exports, platform, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class RemoteExtensionEnvironmentChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        getEnvironmentData(remoteAuthority, extensionDevelopmentPath) {\n            const args = {\n                language: platform.language,\n                remoteAuthority,\n                extensionDevelopmentPath\n            };\n            return this.channel.call('getEnvironmentData', args)\n                .then((data) => {\n                return {\n                    pid: data.pid,\n                    appRoot: uri_1.URI.revive(data.appRoot),\n                    appSettingsHome: uri_1.URI.revive(data.appSettingsHome),\n                    appSettingsPath: uri_1.URI.revive(data.appSettingsPath),\n                    logsPath: uri_1.URI.revive(data.logsPath),\n                    extensionsPath: uri_1.URI.revive(data.extensionsPath),\n                    extensionHostLogsPath: uri_1.URI.revive(data.extensionHostLogsPath),\n                    globalStorageHome: uri_1.URI.revive(data.globalStorageHome),\n                    userHome: uri_1.URI.revive(data.userHome),\n                    extensions: data.extensions.map(ext => { ext.extensionLocation = uri_1.URI.revive(ext.extensionLocation); return ext; }),\n                    os: data.os,\n                    syncExtensions: data.syncExtensions\n                };\n            });\n        }\n    }\n    exports.RemoteExtensionEnvironmentChannelClient = RemoteExtensionEnvironmentChannelClient;\n});\n",null]}