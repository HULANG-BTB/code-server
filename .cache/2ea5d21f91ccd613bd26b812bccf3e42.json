{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar path = require(\"vs/base/common/path\");\nvar platform = require(\"vs/base/common/platform\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar MINIMUM_FONT_SIZE = 6;\nvar MAXIMUM_FONT_SIZE = 25;\n/**\n * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform\n * specific test cases can be written.\n */\nvar TerminalConfigHelper = /** @class */ (function () {\n    function TerminalConfigHelper(_linuxDistro, _configurationService, _workspaceConfigurationService, _notificationService, _storageService) {\n        var _this = this;\n        this._linuxDistro = _linuxDistro;\n        this._configurationService = _configurationService;\n        this._workspaceConfigurationService = _workspaceConfigurationService;\n        this._notificationService = _notificationService;\n        this._storageService = _storageService;\n        this._updateConfig();\n        this._configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(terminal_1.TERMINAL_CONFIG_SECTION)) {\n                _this._updateConfig();\n            }\n        });\n    }\n    TerminalConfigHelper.prototype._updateConfig = function () {\n        this.config = this._configurationService.getValue(terminal_1.TERMINAL_CONFIG_SECTION);\n    };\n    TerminalConfigHelper.prototype.configFontIsMonospace = function () {\n        this._createCharMeasureElementIfNecessary();\n        var fontSize = 15;\n        var fontFamily = this.config.fontFamily || this._configurationService.getValue('editor').fontFamily || editorOptions_1.EDITOR_FONT_DEFAULTS.fontFamily;\n        var i_rect = this._getBoundingRectFor('i', fontFamily, fontSize);\n        var w_rect = this._getBoundingRectFor('w', fontFamily, fontSize);\n        var invalidBounds = !i_rect.width || !w_rect.width;\n        if (invalidBounds) {\n            // There is no reason to believe the font is not Monospace.\n            return true;\n        }\n        return i_rect.width === w_rect.width;\n    };\n    TerminalConfigHelper.prototype._createCharMeasureElementIfNecessary = function () {\n        // Create charMeasureElement if it hasn't been created or if it was orphaned by its parent\n        if (!this._charMeasureElement || !this._charMeasureElement.parentElement) {\n            this._charMeasureElement = document.createElement('div');\n            this.panelContainer.appendChild(this._charMeasureElement);\n        }\n    };\n    TerminalConfigHelper.prototype._getBoundingRectFor = function (char, fontFamily, fontSize) {\n        var style = this._charMeasureElement.style;\n        style.display = 'inline-block';\n        style.fontFamily = fontFamily;\n        style.fontSize = fontSize + 'px';\n        style.lineHeight = 'normal';\n        this._charMeasureElement.innerText = char;\n        var rect = this._charMeasureElement.getBoundingClientRect();\n        style.display = 'none';\n        return rect;\n    };\n    TerminalConfigHelper.prototype._measureFont = function (fontFamily, fontSize, letterSpacing, lineHeight) {\n        this._createCharMeasureElementIfNecessary();\n        var rect = this._getBoundingRectFor('X', fontFamily, fontSize);\n        // Bounding client rect was invalid, use last font measurement if available.\n        if (this._lastFontMeasurement && !rect.width && !rect.height) {\n            return this._lastFontMeasurement;\n        }\n        this._lastFontMeasurement = {\n            fontFamily: fontFamily,\n            fontSize: fontSize,\n            letterSpacing: letterSpacing,\n            lineHeight: lineHeight,\n            charWidth: rect.width,\n            charHeight: Math.ceil(rect.height)\n        };\n        return this._lastFontMeasurement;\n    };\n    /**\n     * Gets the font information based on the terminal.integrated.fontFamily\n     * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties\n     */\n    TerminalConfigHelper.prototype.getFont = function (xterm, excludeDimensions) {\n        var editorConfig = this._configurationService.getValue('editor');\n        var fontFamily = this.config.fontFamily || editorConfig.fontFamily || editorOptions_1.EDITOR_FONT_DEFAULTS.fontFamily;\n        var fontSize = this._toInteger(this.config.fontSize, MINIMUM_FONT_SIZE, MAXIMUM_FONT_SIZE, editorOptions_1.EDITOR_FONT_DEFAULTS.fontSize);\n        // Work around bad font on Fedora/Ubuntu\n        if (!this.config.fontFamily) {\n            if (this._linuxDistro === terminal_1.LinuxDistro.Fedora) {\n                fontFamily = '\\'DejaVu Sans Mono\\', monospace';\n            }\n            if (this._linuxDistro === terminal_1.LinuxDistro.Ubuntu) {\n                fontFamily = '\\'Ubuntu Mono\\', monospace';\n                // Ubuntu mono is somehow smaller, so set fontSize a bit larger to get the same perceived size.\n                fontSize = this._toInteger(fontSize + 2, MINIMUM_FONT_SIZE, MAXIMUM_FONT_SIZE, editorOptions_1.EDITOR_FONT_DEFAULTS.fontSize);\n            }\n        }\n        var letterSpacing = this.config.letterSpacing ? Math.max(Math.floor(this.config.letterSpacing), terminal_1.MINIMUM_LETTER_SPACING) : terminal_1.DEFAULT_LETTER_SPACING;\n        var lineHeight = this.config.lineHeight ? Math.max(this.config.lineHeight, 1) : terminal_1.DEFAULT_LINE_HEIGHT;\n        if (excludeDimensions) {\n            return {\n                fontFamily: fontFamily,\n                fontSize: fontSize,\n                letterSpacing: letterSpacing,\n                lineHeight: lineHeight\n            };\n        }\n        // Get the character dimensions from xterm if it's available\n        if (xterm) {\n            if (xterm._core.charMeasure && xterm._core.charMeasure.width && xterm._core.charMeasure.height) {\n                return {\n                    fontFamily: fontFamily,\n                    fontSize: fontSize,\n                    letterSpacing: letterSpacing,\n                    lineHeight: lineHeight,\n                    charHeight: xterm._core.charMeasure.height,\n                    charWidth: xterm._core.charMeasure.width\n                };\n            }\n        }\n        // Fall back to measuring the font ourselves\n        return this._measureFont(fontFamily, fontSize, letterSpacing, lineHeight);\n    };\n    TerminalConfigHelper.prototype.setWorkspaceShellAllowed = function (isAllowed) {\n        this._storageService.store(terminal_1.IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY, isAllowed, storage_1.StorageScope.WORKSPACE);\n    };\n    TerminalConfigHelper.prototype.isWorkspaceShellAllowed = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = undefined; }\n        return this._storageService.getBoolean(terminal_1.IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY, storage_1.StorageScope.WORKSPACE, defaultValue);\n    };\n    TerminalConfigHelper.prototype.checkWorkspaceShellPermissions = function (platformOverride) {\n        var _this = this;\n        if (platformOverride === void 0) { platformOverride = platform.platform; }\n        // Check whether there is a workspace setting\n        var platformKey = platformOverride === platform.Platform.Windows ? 'windows' : platformOverride === platform.Platform.Mac ? 'osx' : 'linux';\n        var shellConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.shell.\" + platformKey);\n        var shellArgsConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.shellArgs.\" + platformKey);\n        var envConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.env.\" + platformKey);\n        // Check if workspace setting exists and whether it's whitelisted\n        var isWorkspaceShellAllowed = false;\n        if (shellConfigValue.workspace !== undefined || shellArgsConfigValue.workspace !== undefined || envConfigValue.workspace !== undefined) {\n            isWorkspaceShellAllowed = this.isWorkspaceShellAllowed(undefined);\n        }\n        // Always allow [] args as it would lead to an odd error message and should not be dangerous\n        if (shellConfigValue.workspace === undefined && envConfigValue.workspace === undefined &&\n            shellArgsConfigValue.workspace && shellArgsConfigValue.workspace.length === 0) {\n            isWorkspaceShellAllowed = true;\n        }\n        // Check if the value is neither blacklisted (false) or whitelisted (true) and ask for\n        // permission\n        if (isWorkspaceShellAllowed === undefined) {\n            var shellString = void 0;\n            if (shellConfigValue.workspace) {\n                shellString = \"shell: \\\"\" + shellConfigValue.workspace + \"\\\"\";\n            }\n            var argsString = void 0;\n            if (shellArgsConfigValue.workspace) {\n                argsString = \"shellArgs: [\" + shellArgsConfigValue.workspace.map(function (v) { return '\"' + v + '\"'; }).join(', ') + \"]\";\n            }\n            var envString = void 0;\n            if (envConfigValue.workspace) {\n                envString = \"env: {\" + Object.keys(envConfigValue.workspace).map(function (k) { return k + \":\" + envConfigValue.workspace[k]; }).join(', ') + \"}\";\n            }\n            // Should not be localized as it's json-like syntax referencing settings keys\n            var workspaceConfigStrings = [];\n            if (shellString) {\n                workspaceConfigStrings.push(shellString);\n            }\n            if (argsString) {\n                workspaceConfigStrings.push(argsString);\n            }\n            if (envString) {\n                workspaceConfigStrings.push(envString);\n            }\n            var workspaceConfigString = workspaceConfigStrings.join(', ');\n            this._notificationService.prompt(severity_1.default.Info, nls.localize('terminal.integrated.allowWorkspaceShell', \"Do you allow this workspace to modify your terminal shell? {0}\", workspaceConfigString), [{\n                    label: nls.localize('allow', \"Allow\"),\n                    run: function () { return _this.setWorkspaceShellAllowed(true); }\n                },\n                {\n                    label: nls.localize('disallow', \"Disallow\"),\n                    run: function () { return _this.setWorkspaceShellAllowed(false); }\n                }]);\n        }\n        return !!isWorkspaceShellAllowed;\n    };\n    TerminalConfigHelper.prototype.mergeDefaultShellPathAndArgs = function (shell, platformOverride) {\n        if (platformOverride === void 0) { platformOverride = platform.platform; }\n        var isWorkspaceShellAllowed = this.checkWorkspaceShellPermissions(platformOverride);\n        var platformKey = platformOverride === platform.Platform.Windows ? 'windows' : platformOverride === platform.Platform.Mac ? 'osx' : 'linux';\n        var shellConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.shell.\" + platformKey);\n        var shellArgsConfigValue = this._workspaceConfigurationService.inspect(\"terminal.integrated.shellArgs.\" + platformKey);\n        shell.executable = (isWorkspaceShellAllowed ? shellConfigValue.value : shellConfigValue.user) || shellConfigValue.default;\n        shell.args = (isWorkspaceShellAllowed ? shellArgsConfigValue.value : shellArgsConfigValue.user) || shellArgsConfigValue.default;\n        // Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n        // safe to assume that this was used by accident as Sysnative does not\n        // exist and will break the terminal in non-WoW64 environments.\n        if ((platformOverride === platform.Platform.Windows) && !process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432') && process.env.windir) {\n            var sysnativePath = path.join(process.env.windir, 'Sysnative').toLowerCase();\n            if (shell.executable.toLowerCase().indexOf(sysnativePath) === 0) {\n                shell.executable = path.join(process.env.windir, 'System32', shell.executable.substr(sysnativePath.length));\n            }\n        }\n        // Convert / to \\ on Windows for convenience\n        if (platformOverride === platform.Platform.Windows) {\n            shell.executable = shell.executable.replace(/\\//g, '\\\\');\n        }\n    };\n    TerminalConfigHelper.prototype._toInteger = function (source, minimum, maximum, fallback) {\n        var r = parseInt(source, 10);\n        if (isNaN(r)) {\n            return fallback;\n        }\n        if (typeof minimum === 'number') {\n            r = Math.max(minimum, r);\n        }\n        if (typeof maximum === 'number') {\n            r = Math.min(maximum, r);\n        }\n        return r;\n    };\n    TerminalConfigHelper = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, storage_1.IStorageService)\n    ], TerminalConfigHelper);\n    return TerminalConfigHelper;\n}());\nexports.TerminalConfigHelper = TerminalConfigHelper;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { EDITOR_FONT_DEFAULTS, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITerminalConfiguration, ITerminalFont, IShellLaunchConfig, IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY, TERMINAL_CONFIG_SECTION, DEFAULT_LETTER_SPACING, DEFAULT_LINE_HEIGHT, MINIMUM_LETTER_SPACING, LinuxDistro } from 'vs/workbench/contrib/terminal/common/terminal';\nimport Severity from 'vs/base/common/severity';\nimport { Terminal as XTermTerminal } from 'vscode-xterm';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IBrowserTerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminal';\n\nconst MINIMUM_FONT_SIZE = 6;\nconst MAXIMUM_FONT_SIZE = 25;\n\n/**\n * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform\n * specific test cases can be written.\n */\nexport class TerminalConfigHelper implements IBrowserTerminalConfigHelper {\n\tpublic panelContainer: HTMLElement;\n\n\tprivate _charMeasureElement: HTMLElement;\n\tprivate _lastFontMeasurement: ITerminalFont;\n\tpublic config: ITerminalConfiguration;\n\n\tpublic constructor(\n\t\tprivate readonly _linuxDistro: LinuxDistro,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IConfigurationService private readonly _workspaceConfigurationService: IConfigurationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tthis._updateConfig();\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TERMINAL_CONFIG_SECTION)) {\n\t\t\t\tthis._updateConfig();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _updateConfig(): void {\n\t\tthis.config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t}\n\n\tpublic configFontIsMonospace(): boolean {\n\t\tthis._createCharMeasureElementIfNecessary();\n\t\tconst fontSize = 15;\n\t\tconst fontFamily = this.config.fontFamily || this._configurationService.getValue<IEditorOptions>('editor').fontFamily || EDITOR_FONT_DEFAULTS.fontFamily;\n\t\tconst i_rect = this._getBoundingRectFor('i', fontFamily, fontSize);\n\t\tconst w_rect = this._getBoundingRectFor('w', fontFamily, fontSize);\n\n\t\tconst invalidBounds = !i_rect.width || !w_rect.width;\n\t\tif (invalidBounds) {\n\t\t\t// There is no reason to believe the font is not Monospace.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn i_rect.width === w_rect.width;\n\t}\n\n\tprivate _createCharMeasureElementIfNecessary() {\n\t\t// Create charMeasureElement if it hasn't been created or if it was orphaned by its parent\n\t\tif (!this._charMeasureElement || !this._charMeasureElement.parentElement) {\n\t\t\tthis._charMeasureElement = document.createElement('div');\n\t\t\tthis.panelContainer.appendChild(this._charMeasureElement);\n\t\t}\n\t}\n\n\tprivate _getBoundingRectFor(char: string, fontFamily: string, fontSize: number): ClientRect | DOMRect {\n\t\tconst style = this._charMeasureElement.style;\n\t\tstyle.display = 'inline-block';\n\t\tstyle.fontFamily = fontFamily;\n\t\tstyle.fontSize = fontSize + 'px';\n\t\tstyle.lineHeight = 'normal';\n\t\tthis._charMeasureElement.innerText = char;\n\t\tconst rect = this._charMeasureElement.getBoundingClientRect();\n\t\tstyle.display = 'none';\n\n\t\treturn rect;\n\t}\n\n\tprivate _measureFont(fontFamily: string, fontSize: number, letterSpacing: number, lineHeight: number): ITerminalFont {\n\t\tthis._createCharMeasureElementIfNecessary();\n\n\t\tconst rect = this._getBoundingRectFor('X', fontFamily, fontSize);\n\n\t\t// Bounding client rect was invalid, use last font measurement if available.\n\t\tif (this._lastFontMeasurement && !rect.width && !rect.height) {\n\t\t\treturn this._lastFontMeasurement;\n\t\t}\n\n\t\tthis._lastFontMeasurement = {\n\t\t\tfontFamily,\n\t\t\tfontSize,\n\t\t\tletterSpacing,\n\t\t\tlineHeight,\n\t\t\tcharWidth: rect.width,\n\t\t\tcharHeight: Math.ceil(rect.height)\n\t\t};\n\t\treturn this._lastFontMeasurement;\n\t}\n\n\t/**\n\t * Gets the font information based on the terminal.integrated.fontFamily\n\t * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties\n\t */\n\tpublic getFont(xterm?: XTermTerminal, excludeDimensions?: boolean): ITerminalFont {\n\t\tconst editorConfig = this._configurationService.getValue<IEditorOptions>('editor');\n\n\t\tlet fontFamily = this.config.fontFamily || editorConfig.fontFamily || EDITOR_FONT_DEFAULTS.fontFamily;\n\t\tlet fontSize = this._toInteger(this.config.fontSize, MINIMUM_FONT_SIZE, MAXIMUM_FONT_SIZE, EDITOR_FONT_DEFAULTS.fontSize);\n\n\t\t// Work around bad font on Fedora/Ubuntu\n\t\tif (!this.config.fontFamily) {\n\t\t\tif (this._linuxDistro === LinuxDistro.Fedora) {\n\t\t\t\tfontFamily = '\\'DejaVu Sans Mono\\', monospace';\n\t\t\t}\n\t\t\tif (this._linuxDistro === LinuxDistro.Ubuntu) {\n\t\t\t\tfontFamily = '\\'Ubuntu Mono\\', monospace';\n\n\t\t\t\t// Ubuntu mono is somehow smaller, so set fontSize a bit larger to get the same perceived size.\n\t\t\t\tfontSize = this._toInteger(fontSize + 2, MINIMUM_FONT_SIZE, MAXIMUM_FONT_SIZE, EDITOR_FONT_DEFAULTS.fontSize);\n\t\t\t}\n\t\t}\n\n\t\tconst letterSpacing = this.config.letterSpacing ? Math.max(Math.floor(this.config.letterSpacing), MINIMUM_LETTER_SPACING) : DEFAULT_LETTER_SPACING;\n\t\tconst lineHeight = this.config.lineHeight ? Math.max(this.config.lineHeight, 1) : DEFAULT_LINE_HEIGHT;\n\n\t\tif (excludeDimensions) {\n\t\t\treturn {\n\t\t\t\tfontFamily,\n\t\t\t\tfontSize,\n\t\t\t\tletterSpacing,\n\t\t\t\tlineHeight\n\t\t\t};\n\t\t}\n\n\t\t// Get the character dimensions from xterm if it's available\n\t\tif (xterm) {\n\t\t\tif (xterm._core.charMeasure && xterm._core.charMeasure.width && xterm._core.charMeasure.height) {\n\t\t\t\treturn {\n\t\t\t\t\tfontFamily,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tletterSpacing,\n\t\t\t\t\tlineHeight,\n\t\t\t\t\tcharHeight: xterm._core.charMeasure.height,\n\t\t\t\t\tcharWidth: xterm._core.charMeasure.width\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Fall back to measuring the font ourselves\n\t\treturn this._measureFont(fontFamily, fontSize, letterSpacing, lineHeight);\n\t}\n\n\tpublic setWorkspaceShellAllowed(isAllowed: boolean): void {\n\t\tthis._storageService.store(IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY, isAllowed, StorageScope.WORKSPACE);\n\t}\n\n\tpublic isWorkspaceShellAllowed(defaultValue: boolean | undefined = undefined): boolean | undefined {\n\t\treturn this._storageService.getBoolean(IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY, StorageScope.WORKSPACE, defaultValue);\n\t}\n\n\tpublic checkWorkspaceShellPermissions(platformOverride: platform.Platform = platform.platform): boolean {\n\t\t// Check whether there is a workspace setting\n\t\tconst platformKey = platformOverride === platform.Platform.Windows ? 'windows' : platformOverride === platform.Platform.Mac ? 'osx' : 'linux';\n\t\tconst shellConfigValue = this._workspaceConfigurationService.inspect<string>(`terminal.integrated.shell.${platformKey}`);\n\t\tconst shellArgsConfigValue = this._workspaceConfigurationService.inspect<string[]>(`terminal.integrated.shellArgs.${platformKey}`);\n\t\tconst envConfigValue = this._workspaceConfigurationService.inspect<string[]>(`terminal.integrated.env.${platformKey}`);\n\n\t\t// Check if workspace setting exists and whether it's whitelisted\n\t\tlet isWorkspaceShellAllowed: boolean | undefined = false;\n\t\tif (shellConfigValue.workspace !== undefined || shellArgsConfigValue.workspace !== undefined || envConfigValue.workspace !== undefined) {\n\t\t\tisWorkspaceShellAllowed = this.isWorkspaceShellAllowed(undefined);\n\t\t}\n\n\t\t// Always allow [] args as it would lead to an odd error message and should not be dangerous\n\t\tif (shellConfigValue.workspace === undefined && envConfigValue.workspace === undefined &&\n\t\t\tshellArgsConfigValue.workspace && shellArgsConfigValue.workspace.length === 0) {\n\t\t\tisWorkspaceShellAllowed = true;\n\t\t}\n\n\t\t// Check if the value is neither blacklisted (false) or whitelisted (true) and ask for\n\t\t// permission\n\t\tif (isWorkspaceShellAllowed === undefined) {\n\t\t\tlet shellString: string | undefined;\n\t\t\tif (shellConfigValue.workspace) {\n\t\t\t\tshellString = `shell: \"${shellConfigValue.workspace}\"`;\n\t\t\t}\n\t\t\tlet argsString: string | undefined;\n\t\t\tif (shellArgsConfigValue.workspace) {\n\t\t\t\targsString = `shellArgs: [${shellArgsConfigValue.workspace.map(v => '\"' + v + '\"').join(', ')}]`;\n\t\t\t}\n\t\t\tlet envString: string | undefined;\n\t\t\tif (envConfigValue.workspace) {\n\t\t\t\tenvString = `env: {${Object.keys(envConfigValue.workspace).map(k => `${k}:${envConfigValue.workspace![k]}`).join(', ')}}`;\n\t\t\t}\n\t\t\t// Should not be localized as it's json-like syntax referencing settings keys\n\t\t\tconst workspaceConfigStrings: string[] = [];\n\t\t\tif (shellString) {\n\t\t\t\tworkspaceConfigStrings.push(shellString);\n\t\t\t}\n\t\t\tif (argsString) {\n\t\t\t\tworkspaceConfigStrings.push(argsString);\n\t\t\t}\n\t\t\tif (envString) {\n\t\t\t\tworkspaceConfigStrings.push(envString);\n\t\t\t}\n\t\t\tconst workspaceConfigString = workspaceConfigStrings.join(', ');\n\t\t\tthis._notificationService.prompt(Severity.Info, nls.localize('terminal.integrated.allowWorkspaceShell', \"Do you allow this workspace to modify your terminal shell? {0}\", workspaceConfigString),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('allow', \"Allow\"),\n\t\t\t\t\trun: () => this.setWorkspaceShellAllowed(true)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('disallow', \"Disallow\"),\n\t\t\t\t\trun: () => this.setWorkspaceShellAllowed(false)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t\treturn !!isWorkspaceShellAllowed;\n\t}\n\n\tpublic mergeDefaultShellPathAndArgs(shell: IShellLaunchConfig, platformOverride: platform.Platform = platform.platform): void {\n\t\tconst isWorkspaceShellAllowed = this.checkWorkspaceShellPermissions(platformOverride);\n\t\tconst platformKey = platformOverride === platform.Platform.Windows ? 'windows' : platformOverride === platform.Platform.Mac ? 'osx' : 'linux';\n\t\tconst shellConfigValue = this._workspaceConfigurationService.inspect<string>(`terminal.integrated.shell.${platformKey}`);\n\t\tconst shellArgsConfigValue = this._workspaceConfigurationService.inspect<string[]>(`terminal.integrated.shellArgs.${platformKey}`);\n\n\t\tshell.executable = (isWorkspaceShellAllowed ? shellConfigValue.value : shellConfigValue.user) || shellConfigValue.default;\n\t\tshell.args = (isWorkspaceShellAllowed ? shellArgsConfigValue.value : shellArgsConfigValue.user) || shellArgsConfigValue.default;\n\n\t\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t\t// safe to assume that this was used by accident as Sysnative does not\n\t\t// exist and will break the terminal in non-WoW64 environments.\n\t\tif ((platformOverride === platform.Platform.Windows) && !process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432') && process.env.windir) {\n\t\t\tconst sysnativePath = path.join(process.env.windir, 'Sysnative').toLowerCase();\n\t\t\tif (shell.executable.toLowerCase().indexOf(sysnativePath) === 0) {\n\t\t\t\tshell.executable = path.join(process.env.windir, 'System32', shell.executable.substr(sysnativePath.length));\n\t\t\t}\n\t\t}\n\n\t\t// Convert / to \\ on Windows for convenience\n\t\tif (platformOverride === platform.Platform.Windows) {\n\t\t\tshell.executable = shell.executable.replace(/\\//g, '\\\\');\n\t\t}\n\t}\n\n\tprivate _toInteger(source: any, minimum: number, maximum: number, fallback: number): number {\n\t\tlet r = parseInt(source, 10);\n\t\tif (isNaN(r)) {\n\t\t\treturn fallback;\n\t\t}\n\t\tif (typeof minimum === 'number') {\n\t\t\tr = Math.max(minimum, r);\n\t\t}\n\t\tif (typeof maximum === 'number') {\n\t\t\tr = Math.min(maximum, r);\n\t\t}\n\t\treturn r;\n\t}\n}\n"]}]}