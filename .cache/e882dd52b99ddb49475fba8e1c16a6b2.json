{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/argvHelper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/argvHelper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"assert\", \"vs/base/common/arrays\", \"vs/nls\", \"vs/platform/files/common/files\", \"vs/platform/environment/node/argv\"], function (require, exports, assert, arrays_1, nls_1, files_1, argv_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function validate(args) {\n        if (args.goto) {\n            args._.forEach(arg => assert(/^(\\w:)?[^:]+(:\\d*){0,2}$/.test(arg), nls_1.localize('gotoValidation', \"Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.\")));\n        }\n        if (args['max-memory']) {\n            assert(parseInt(args['max-memory']) >= files_1.MIN_MAX_MEMORY_SIZE_MB, `The max-memory argument cannot be specified lower than ${files_1.MIN_MAX_MEMORY_SIZE_MB} MB.`);\n        }\n        return args;\n    }\n    function stripAppPath(argv) {\n        const index = arrays_1.firstIndex(argv, a => !/^-/.test(a));\n        if (index > -1) {\n            return [...argv.slice(0, index), ...argv.slice(index + 1)];\n        }\n        return undefined;\n    }\n    /**\n     * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`\n     */\n    function parseMainProcessArgv(processArgv) {\n        let [, ...args] = processArgv;\n        // If dev, remove the first non-option argument: it's the app location\n        if (process.env['VSCODE_DEV']) {\n            args = stripAppPath(args) || [];\n        }\n        return validate(argv_1.parseArgs(args));\n    }\n    exports.parseMainProcessArgv = parseMainProcessArgv;\n    /**\n     * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`\n     */\n    function parseCLIProcessArgv(processArgv) {\n        let [, , ...args] = processArgv;\n        if (process.env['VSCODE_DEV']) {\n            args = stripAppPath(args) || [];\n        }\n        return validate(argv_1.parseArgs(args));\n    }\n    exports.parseCLIProcessArgv = parseCLIProcessArgv;\n});\n",null]}