{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/node/dialogIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/node/dialogIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar DialogChannel = /** @class */ (function () {\n    function DialogChannel(dialogService) {\n        this.dialogService = dialogService;\n    }\n    DialogChannel.prototype.listen = function (_, event) {\n        throw new Error(\"Event not found: \" + event);\n    };\n    DialogChannel.prototype.call = function (_, command, args) {\n        switch (command) {\n            case 'show': return this.dialogService.show(args[0], args[1], args[2]);\n            case 'confirm': return this.dialogService.confirm(args[0]);\n        }\n        return Promise.reject(new Error('invalid command'));\n    };\n    DialogChannel = tslib_1.__decorate([\n        tslib_1.__param(0, dialogs_1.IDialogService)\n    ], DialogChannel);\n    return DialogChannel;\n}());\nexports.DialogChannel = DialogChannel;\nvar DialogChannelClient = /** @class */ (function () {\n    function DialogChannelClient(channel) {\n        this.channel = channel;\n    }\n    DialogChannelClient.prototype.show = function (severity, message, options) {\n        return this.channel.call('show', [severity, message, options]);\n    };\n    DialogChannelClient.prototype.confirm = function (confirmation) {\n        return this.channel.call('confirm', [confirmation]);\n    };\n    return DialogChannelClient;\n}());\nexports.DialogChannelClient = DialogChannelClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/node/dialogIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/node/dialogIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,8DAAwG;AAIxG;IAEC,uBAA6C,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IAAI,CAAC;IAE/E,8BAAM,GAAN,UAAU,CAAU,EAAE,KAAa;QAClC,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,4BAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,IAAY;QAC7C,QAAQ,OAAO,EAAE;YAChB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAK,CAAC,CAAC,CAAC,EAAE,IAAK,CAAC,CAAC,CAAC,EAAE,IAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1E,KAAK,SAAS,CAAC,CAAC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACrD,CAAC;IAdW,aAAa;QAEZ,mBAAA,wBAAc,CAAA;OAFf,aAAa,CAezB;IAAD,oBAAC;CAAA,AAfD,IAeC;AAfY,sCAAa;AAiB1B;IAIC,6BAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,kCAAI,GAAJ,UAAK,QAAkB,EAAE,OAAe,EAAE,OAAiB;QAC1D,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,qCAAO,GAAP,UAAQ,YAA2B;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IACrD,CAAC;IACF,0BAAC;AAAD,CAAC,AAbD,IAaC;AAbY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IDialogService, IConfirmation, IConfirmationResult } from 'vs/platform/dialogs/common/dialogs';\nimport Severity from 'vs/base/common/severity';\nimport { Event } from 'vs/base/common/event';\n\nexport class DialogChannel implements IServerChannel {\n\n\tconstructor(@IDialogService private readonly dialogService: IDialogService) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, args?: any[]): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'show': return this.dialogService.show(args![0], args![1], args![2]);\n\t\t\tcase 'confirm': return this.dialogService.confirm(args![0]);\n\t\t}\n\t\treturn Promise.reject(new Error('invalid command'));\n\t}\n}\n\nexport class DialogChannelClient implements IDialogService {\n\n\t_serviceBrand: any;\n\n\tconstructor(private channel: IChannel) { }\n\n\tshow(severity: Severity, message: string, options: string[]): Promise<number> {\n\t\treturn this.channel.call('show', [severity, message, options]);\n\t}\n\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\treturn this.channel.call('confirm', [confirmation]);\n\t}\n}"]}]}