{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/files.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/files.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar nls = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar files_2 = require(\"vs/workbench/contrib/files/common/files\");\nvar fileEditorTracker_1 = require(\"vs/workbench/contrib/files/browser/editors/fileEditorTracker\");\nvar saveErrorHandler_1 = require(\"vs/workbench/contrib/files/browser/saveErrorHandler\");\nvar fileEditorInput_1 = require(\"vs/workbench/contrib/files/common/editors/fileEditorInput\");\nvar textFileEditor_1 = require(\"vs/workbench/contrib/files/browser/editors/textFileEditor\");\nvar binaryFileEditor_1 = require(\"vs/workbench/contrib/files/browser/editors/binaryFileEditor\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar viewlet_2 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform = require(\"vs/base/common/platform\");\nvar dirtyFilesTracker_1 = require(\"vs/workbench/contrib/files/common/dirtyFilesTracker\");\nvar explorerViewlet_1 = require(\"vs/workbench/contrib/files/browser/explorerViewlet\");\nvar editor_2 = require(\"vs/workbench/browser/editor\");\nvar dataUriEditorInput_1 = require(\"vs/workbench/common/editor/dataUriEditorInput\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar explorerService_1 = require(\"vs/workbench/contrib/files/common/explorerService\");\n// Viewlet Action\nvar OpenExplorerViewletAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenExplorerViewletAction, _super);\n    function OpenExplorerViewletAction(id, label, viewletService, editorGroupService, layoutService) {\n        return _super.call(this, id, label, files_2.VIEWLET_ID, viewletService, editorGroupService, layoutService) || this;\n    }\n    OpenExplorerViewletAction.ID = files_2.VIEWLET_ID;\n    OpenExplorerViewletAction.LABEL = nls.localize('showExplorerViewlet', \"Show Explorer\");\n    OpenExplorerViewletAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_2.IViewletService),\n        tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService)\n    ], OpenExplorerViewletAction);\n    return OpenExplorerViewletAction;\n}(viewlet_1.ShowViewletAction));\nexports.OpenExplorerViewletAction = OpenExplorerViewletAction;\nvar FileUriLabelContribution = /** @class */ (function () {\n    function FileUriLabelContribution(labelService) {\n        labelService.registerFormatter({\n            scheme: 'file',\n            formatting: {\n                label: '${authority}${path}',\n                separator: path_1.sep,\n                tildify: !platform.isWindows,\n                normalizeDriveLetter: platform.isWindows,\n                authorityPrefix: path_1.sep + path_1.sep,\n                workspaceSuffix: ''\n            }\n        });\n    }\n    FileUriLabelContribution = tslib_1.__decorate([\n        tslib_1.__param(0, label_1.ILabelService)\n    ], FileUriLabelContribution);\n    return FileUriLabelContribution;\n}());\n// Register Viewlet\nplatform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor(explorerViewlet_1.ExplorerViewlet, files_2.VIEWLET_ID, nls.localize('explore', \"Explorer\"), 'explore', 0));\nextensions_1.registerSingleton(files_2.IExplorerService, explorerService_1.ExplorerService, true);\nplatform_1.Registry.as(viewlet_1.Extensions.Viewlets).setDefaultViewletId(files_2.VIEWLET_ID);\nvar openViewletKb = {\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_E\n};\n// Register Action to Open Viewlet\nvar registry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenExplorerViewletAction, OpenExplorerViewletAction.ID, OpenExplorerViewletAction.LABEL, openViewletKb), 'View: Show Explorer', nls.localize('view', \"View\"));\n// Register file editors\nplatform_1.Registry.as(editor_2.Extensions.Editors).registerEditor(new editor_2.EditorDescriptor(textFileEditor_1.TextFileEditor, textFileEditor_1.TextFileEditor.ID, nls.localize('textFileEditor', \"Text File Editor\")), [\n    new descriptors_1.SyncDescriptor(fileEditorInput_1.FileEditorInput)\n]);\nplatform_1.Registry.as(editor_2.Extensions.Editors).registerEditor(new editor_2.EditorDescriptor(binaryFileEditor_1.BinaryFileEditor, binaryFileEditor_1.BinaryFileEditor.ID, nls.localize('binaryFileEditor', \"Binary File Editor\")), [\n    new descriptors_1.SyncDescriptor(fileEditorInput_1.FileEditorInput),\n    new descriptors_1.SyncDescriptor(dataUriEditorInput_1.DataUriEditorInput)\n]);\n// Register default file input factory\nplatform_1.Registry.as(editor_1.Extensions.EditorInputFactories).registerFileInputFactory({\n    createFileInput: function (resource, encoding, instantiationService) {\n        return instantiationService.createInstance(fileEditorInput_1.FileEditorInput, resource, encoding);\n    },\n    isFileInput: function (obj) {\n        return obj instanceof fileEditorInput_1.FileEditorInput;\n    }\n});\n// Register Editor Input Factory\nvar FileEditorInputFactory = /** @class */ (function () {\n    function FileEditorInputFactory() {\n    }\n    FileEditorInputFactory.prototype.serialize = function (editorInput) {\n        var fileEditorInput = editorInput;\n        var resource = fileEditorInput.getResource();\n        var fileInput = {\n            resource: resource.toString(),\n            resourceJSON: resource.toJSON(),\n            encoding: fileEditorInput.getEncoding()\n        };\n        return JSON.stringify(fileInput);\n    };\n    FileEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        return instantiationService.invokeFunction(function (accessor) {\n            var fileInput = JSON.parse(serializedEditorInput);\n            var resource = !!fileInput.resourceJSON ? uri_1.URI.revive(fileInput.resourceJSON) : uri_1.URI.parse(fileInput.resource);\n            var encoding = fileInput.encoding;\n            return accessor.get(editorService_1.IEditorService).createInput({ resource: resource, encoding: encoding, forceFile: true });\n        });\n    };\n    return FileEditorInputFactory;\n}());\nplatform_1.Registry.as(editor_1.Extensions.EditorInputFactories).registerEditorInputFactory(files_2.FILE_EDITOR_INPUT_ID, FileEditorInputFactory);\n// Register Explorer views\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(explorerViewlet_1.ExplorerViewletViewsContribution, lifecycle_1.LifecyclePhase.Starting);\n// Register File Editor Tracker\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(fileEditorTracker_1.FileEditorTracker, lifecycle_1.LifecyclePhase.Starting);\n// Register Save Error Handler\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(saveErrorHandler_1.SaveErrorHandler, lifecycle_1.LifecyclePhase.Starting);\n// Register Dirty Files Tracker\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(dirtyFilesTracker_1.DirtyFilesTracker, lifecycle_1.LifecyclePhase.Starting);\n// Register uri display for file uris\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(FileUriLabelContribution, lifecycle_1.LifecyclePhase.Starting);\n// Configuration\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    'id': 'files',\n    'order': 9,\n    'title': nls.localize('filesConfigurationTitle', \"Files\"),\n    'type': 'object',\n    'properties': {\n        'files.exclude': {\n            'type': 'object',\n            'markdownDescription': nls.localize('exclude', \"Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).\"),\n            'default': { '**/.git': true, '**/.svn': true, '**/.hg': true, '**/CVS': true, '**/.DS_Store': true },\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE,\n            'additionalProperties': {\n                'anyOf': [\n                    {\n                        'type': 'boolean',\n                        'description': nls.localize('files.exclude.boolean', \"The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.\"),\n                    },\n                    {\n                        'type': 'object',\n                        'properties': {\n                            'when': {\n                                'type': 'string',\n                                'pattern': '\\\\w*\\\\$\\\\(basename\\\\)\\\\w*',\n                                'default': '$(basename).ext',\n                                'description': nls.localize('files.exclude.when', \"Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.\")\n                            }\n                        }\n                    }\n                ]\n            }\n        },\n        'files.associations': {\n            'type': 'object',\n            'markdownDescription': nls.localize('associations', \"Configure file associations to languages (e.g. `\\\"*.extension\\\": \\\"html\\\"`). These have precedence over the default associations of the languages installed.\"),\n        },\n        'files.encoding': {\n            'type': 'string',\n            'overridable': true,\n            'enum': Object.keys(files_1.SUPPORTED_ENCODINGS),\n            'default': 'utf8',\n            'description': nls.localize('encoding', \"The default character set encoding to use when reading and writing files. This setting can also be configured per language.\"),\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE,\n            'enumDescriptions': Object.keys(files_1.SUPPORTED_ENCODINGS).map(function (key) { return files_1.SUPPORTED_ENCODINGS[key].labelLong; })\n        },\n        'files.autoGuessEncoding': {\n            'type': 'boolean',\n            'overridable': true,\n            'default': false,\n            'description': nls.localize('autoGuessEncoding', \"When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.\"),\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.eol': {\n            'type': 'string',\n            'enum': [\n                '\\n',\n                '\\r\\n',\n                'auto'\n            ],\n            'enumDescriptions': [\n                nls.localize('eol.LF', \"LF\"),\n                nls.localize('eol.CRLF', \"CRLF\"),\n                nls.localize('eol.auto', \"Uses operating system specific end of line character.\")\n            ],\n            'default': 'auto',\n            'description': nls.localize('eol', \"The default end of line character.\"),\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.enableTrash': {\n            'type': 'boolean',\n            'default': true,\n            'description': nls.localize('useTrash', \"Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.\")\n        },\n        'files.trimTrailingWhitespace': {\n            'type': 'boolean',\n            'default': false,\n            'description': nls.localize('trimTrailingWhitespace', \"When enabled, will trim trailing whitespace when saving a file.\"),\n            'overridable': true,\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.insertFinalNewline': {\n            'type': 'boolean',\n            'default': false,\n            'description': nls.localize('insertFinalNewline', \"When enabled, insert a final new line at the end of the file when saving it.\"),\n            'overridable': true,\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.trimFinalNewlines': {\n            'type': 'boolean',\n            'default': false,\n            'description': nls.localize('trimFinalNewlines', \"When enabled, will trim all new lines after the final new line at the end of the file when saving it.\"),\n            'overridable': true,\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.autoSave': {\n            'type': 'string',\n            'enum': [files_1.AutoSaveConfiguration.OFF, files_1.AutoSaveConfiguration.AFTER_DELAY, files_1.AutoSaveConfiguration.ON_FOCUS_CHANGE, files_1.AutoSaveConfiguration.ON_WINDOW_CHANGE],\n            'markdownEnumDescriptions': [\n                nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.off' }, \"A dirty file is never automatically saved.\"),\n                nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.afterDelay' }, \"A dirty file is automatically saved after the configured `#files.autoSaveDelay#`.\"),\n                nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onFocusChange' }, \"A dirty file is automatically saved when the editor loses focus.\"),\n                nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onWindowChange' }, \"A dirty file is automatically saved when the window loses focus.\")\n            ],\n            'default': files_1.AutoSaveConfiguration.OFF,\n            'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSave' }, \"Controls auto save of dirty files. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).\", files_1.AutoSaveConfiguration.OFF, files_1.AutoSaveConfiguration.AFTER_DELAY, files_1.AutoSaveConfiguration.ON_FOCUS_CHANGE, files_1.AutoSaveConfiguration.ON_WINDOW_CHANGE, files_1.AutoSaveConfiguration.AFTER_DELAY)\n        },\n        'files.autoSaveDelay': {\n            'type': 'number',\n            'default': 1000,\n            'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSaveDelay' }, \"Controls the delay in ms after which a dirty file is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.\", files_1.AutoSaveConfiguration.AFTER_DELAY)\n        },\n        'files.watcherExclude': {\n            'type': 'object',\n            'default': platform.isWindows /* https://github.com/Microsoft/vscode/issues/23954 */ ? { '**/.git/objects/**': true, '**/.git/subtree-cache/**': true, '**/node_modules/*/**': true } : { '**/.git/objects/**': true, '**/.git/subtree-cache/**': true, '**/node_modules/**': true },\n            'description': nls.localize('watcherExclude', \"Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.\"),\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'files.hotExit': {\n            'type': 'string',\n            'enum': [files_1.HotExitConfiguration.OFF, files_1.HotExitConfiguration.ON_EXIT, files_1.HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE],\n            'default': files_1.HotExitConfiguration.ON_EXIT,\n            'markdownEnumDescriptions': [\n                nls.localize('hotExit.off', 'Disable hot exit.'),\n                nls.localize('hotExit.onExit', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows with backups will be restored upon next launch.'),\n                nls.localize('hotExit.onExitAndWindowClose', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it\\'s the last window. All windows without folders opened will be restored upon next launch. To restore folder windows as they were before shutdown set `#window.restoreWindows#` to `all`.')\n            ],\n            'description': nls.localize('hotExit', \"Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.\", files_1.HotExitConfiguration.ON_EXIT, files_1.HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE)\n        },\n        'files.useExperimentalFileWatcher': {\n            'type': 'boolean',\n            'default': false,\n            'description': nls.localize('useExperimentalFileWatcher', \"Use the new experimental file watcher.\")\n        },\n        'files.defaultLanguage': {\n            'type': 'string',\n            'description': nls.localize('defaultLanguage', \"The default language mode that is assigned to new files.\")\n        },\n        'files.maxMemoryForLargeFilesMB': {\n            'type': 'number',\n            'default': 4096,\n            'markdownDescription': nls.localize('maxMemoryForLargeFilesMB', \"Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.\")\n        }\n    }\n});\nconfigurationRegistry.registerConfiguration({\n    id: 'editor',\n    order: 5,\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    type: 'object',\n    properties: {\n        'editor.formatOnSave': {\n            'type': 'boolean',\n            'default': false,\n            'description': nls.localize('formatOnSave', \"Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.\"),\n            'overridable': true,\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        },\n        'editor.formatOnSaveTimeout': {\n            'type': 'number',\n            'default': 750,\n            'description': nls.localize('formatOnSaveTimeout', \"Timeout in milliseconds after which the formatting that is run on file save is cancelled.\"),\n            'overridable': true,\n            'scope': configurationRegistry_1.ConfigurationScope.RESOURCE\n        }\n    }\n});\nconfigurationRegistry.registerConfiguration({\n    'id': 'explorer',\n    'order': 10,\n    'title': nls.localize('explorerConfigurationTitle', \"File Explorer\"),\n    'type': 'object',\n    'properties': {\n        'explorer.openEditors.visible': {\n            'type': 'number',\n            'description': nls.localize({ key: 'openEditorsVisible', comment: ['Open is an adjective'] }, \"Number of editors shown in the Open Editors pane.\"),\n            'default': 9\n        },\n        'explorer.autoReveal': {\n            'type': 'boolean',\n            'description': nls.localize('autoReveal', \"Controls whether the explorer should automatically reveal and select files when opening them.\"),\n            'default': true\n        },\n        'explorer.enableDragAndDrop': {\n            'type': 'boolean',\n            'description': nls.localize('enableDragAndDrop', \"Controls whether the explorer should allow to move files and folders via drag and drop.\"),\n            'default': true\n        },\n        'explorer.confirmDragAndDrop': {\n            'type': 'boolean',\n            'description': nls.localize('confirmDragAndDrop', \"Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.\"),\n            'default': true\n        },\n        'explorer.confirmDelete': {\n            'type': 'boolean',\n            'description': nls.localize('confirmDelete', \"Controls whether the explorer should ask for confirmation when deleting a file via the trash.\"),\n            'default': true\n        },\n        'explorer.sortOrder': {\n            'type': 'string',\n            'enum': [files_2.SortOrderConfiguration.DEFAULT, files_2.SortOrderConfiguration.MIXED, files_2.SortOrderConfiguration.FILES_FIRST, files_2.SortOrderConfiguration.TYPE, files_2.SortOrderConfiguration.MODIFIED],\n            'default': files_2.SortOrderConfiguration.DEFAULT,\n            'enumDescriptions': [\n                nls.localize('sortOrder.default', 'Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.'),\n                nls.localize('sortOrder.mixed', 'Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.'),\n                nls.localize('sortOrder.filesFirst', 'Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.'),\n                nls.localize('sortOrder.type', 'Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.'),\n                nls.localize('sortOrder.modified', 'Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.')\n            ],\n            'description': nls.localize('sortOrder', \"Controls sorting order of files and folders in the explorer.\")\n        },\n        'explorer.decorations.colors': {\n            type: 'boolean',\n            description: nls.localize('explorer.decorations.colors', \"Controls whether file decorations should use colors.\"),\n            default: true\n        },\n        'explorer.decorations.badges': {\n            type: 'boolean',\n            description: nls.localize('explorer.decorations.badges', \"Controls whether file decorations should use badges.\"),\n            default: true\n        },\n    }\n});\n// View menu\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n    group: '3_views',\n    command: {\n        id: files_2.VIEWLET_ID,\n        title: nls.localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, \"&&Explorer\")\n    },\n    order: 1\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/files.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/files.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor, ShowViewletAction } from 'vs/workbench/browser/viewlet';\nimport * as nls from 'vs/nls';\nimport { sep } from 'vs/base/common/path';\nimport { SyncActionDescriptor, MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IEditorInputFactory, EditorInput, IFileEditorInput, IEditorInputFactoryRegistry, Extensions as EditorInputExtensions } from 'vs/workbench/common/editor';\nimport { AutoSaveConfiguration, HotExitConfiguration, SUPPORTED_ENCODINGS } from 'vs/platform/files/common/files';\nimport { VIEWLET_ID, SortOrderConfiguration, FILE_EDITOR_INPUT_ID, IExplorerService } from 'vs/workbench/contrib/files/common/files';\nimport { FileEditorTracker } from 'vs/workbench/contrib/files/browser/editors/fileEditorTracker';\nimport { SaveErrorHandler } from 'vs/workbench/contrib/files/browser/saveErrorHandler';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { TextFileEditor } from 'vs/workbench/contrib/files/browser/editors/textFileEditor';\nimport { BinaryFileEditor } from 'vs/workbench/contrib/files/browser/editors/binaryFileEditor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport * as platform from 'vs/base/common/platform';\nimport { DirtyFilesTracker } from 'vs/workbench/contrib/files/common/dirtyFilesTracker';\nimport { ExplorerViewlet, ExplorerViewletViewsContribution } from 'vs/workbench/contrib/files/browser/explorerViewlet';\nimport { IEditorRegistry, EditorDescriptor, Extensions as EditorExtensions } from 'vs/workbench/browser/editor';\nimport { DataUriEditorInput } from 'vs/workbench/common/editor/dataUriEditorInput';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ExplorerService } from 'vs/workbench/contrib/files/common/explorerService';\n\n// Viewlet Action\nexport class OpenExplorerViewletAction extends ShowViewletAction {\n\tpublic static readonly ID = VIEWLET_ID;\n\tpublic static readonly LABEL = nls.localize('showExplorerViewlet', \"Show Explorer\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label, VIEWLET_ID, viewletService, editorGroupService, layoutService);\n\t}\n}\n\nclass FileUriLabelContribution implements IWorkbenchContribution {\n\n\tconstructor(@ILabelService labelService: ILabelService) {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${authority}${path}',\n\t\t\t\tseparator: sep,\n\t\t\t\ttildify: !platform.isWindows,\n\t\t\t\tnormalizeDriveLetter: platform.isWindows,\n\t\t\t\tauthorityPrefix: sep + sep,\n\t\t\t\tworkspaceSuffix: ''\n\t\t\t}\n\t\t});\n\t}\n}\n\n// Register Viewlet\nRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).registerViewlet(new ViewletDescriptor(\n\tExplorerViewlet,\n\tVIEWLET_ID,\n\tnls.localize('explore', \"Explorer\"),\n\t'explore',\n\t0\n));\n\nregisterSingleton(IExplorerService, ExplorerService, true);\n\nRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).setDefaultViewletId(VIEWLET_ID);\n\nconst openViewletKb: IKeybindings = {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_E\n};\n\n// Register Action to Open Viewlet\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(\n\tnew SyncActionDescriptor(OpenExplorerViewletAction, OpenExplorerViewletAction.ID, OpenExplorerViewletAction.LABEL, openViewletKb),\n\t'View: Show Explorer',\n\tnls.localize('view', \"View\")\n);\n\n// Register file editors\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tTextFileEditor,\n\t\tTextFileEditor.ID,\n\t\tnls.localize('textFileEditor', \"Text File Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor<EditorInput>(FileEditorInput)\n\t]\n);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tBinaryFileEditor,\n\t\tBinaryFileEditor.ID,\n\t\tnls.localize('binaryFileEditor', \"Binary File Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor<EditorInput>(FileEditorInput),\n\t\tnew SyncDescriptor<EditorInput>(DataUriEditorInput)\n\t]\n);\n\n// Register default file input factory\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerFileInputFactory({\n\tcreateFileInput: (resource, encoding, instantiationService): IFileEditorInput => {\n\t\treturn instantiationService.createInstance(FileEditorInput, resource, encoding);\n\t},\n\n\tisFileInput: (obj): obj is IFileEditorInput => {\n\t\treturn obj instanceof FileEditorInput;\n\t}\n});\n\ninterface ISerializedFileInput {\n\tresource: string;\n\tresourceJSON: object;\n\tencoding?: string;\n}\n\n// Register Editor Input Factory\nclass FileEditorInputFactory implements IEditorInputFactory {\n\n\tconstructor() { }\n\n\tpublic serialize(editorInput: EditorInput): string {\n\t\tconst fileEditorInput = <FileEditorInput>editorInput;\n\t\tconst resource = fileEditorInput.getResource();\n\t\tconst fileInput: ISerializedFileInput = {\n\t\t\tresource: resource.toString(), // Keep for backwards compatibility\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tencoding: fileEditorInput.getEncoding()\n\t\t};\n\n\t\treturn JSON.stringify(fileInput);\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): FileEditorInput {\n\t\treturn instantiationService.invokeFunction<FileEditorInput>(accessor => {\n\t\t\tconst fileInput: ISerializedFileInput = JSON.parse(serializedEditorInput);\n\t\t\tconst resource = !!fileInput.resourceJSON ? URI.revive(fileInput.resourceJSON) : URI.parse(fileInput.resource);\n\t\t\tconst encoding = fileInput.encoding;\n\n\t\t\treturn accessor.get(IEditorService).createInput({ resource, encoding, forceFile: true }) as FileEditorInput;\n\t\t});\n\t}\n}\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(FILE_EDITOR_INPUT_ID, FileEditorInputFactory);\n\n// Register Explorer views\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ExplorerViewletViewsContribution, LifecyclePhase.Starting);\n\n// Register File Editor Tracker\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(FileEditorTracker, LifecyclePhase.Starting);\n\n// Register Save Error Handler\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(SaveErrorHandler, LifecyclePhase.Starting);\n\n// Register Dirty Files Tracker\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DirtyFilesTracker, LifecyclePhase.Starting);\n\n// Register uri display for file uris\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(FileUriLabelContribution, LifecyclePhase.Starting);\n\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'files',\n\t'order': 9,\n\t'title': nls.localize('filesConfigurationTitle', \"Files\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'files.exclude': {\n\t\t\t'type': 'object',\n\t\t\t'markdownDescription': nls.localize('exclude', \"Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).\"),\n\t\t\t'default': { '**/.git': true, '**/.svn': true, '**/.hg': true, '**/CVS': true, '**/.DS_Store': true },\n\t\t\t'scope': ConfigurationScope.RESOURCE,\n\t\t\t'additionalProperties': {\n\t\t\t\t'anyOf': [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t'description': nls.localize('files.exclude.boolean', \"The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.\"),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'when': {\n\t\t\t\t\t\t\t\t'type': 'string', // expression ({ \"**/*.js\": { \"when\": \"$(basename).js\" } })\n\t\t\t\t\t\t\t\t'pattern': '\\\\w*\\\\$\\\\(basename\\\\)\\\\w*',\n\t\t\t\t\t\t\t\t'default': '$(basename).ext',\n\t\t\t\t\t\t\t\t'description': nls.localize('files.exclude.when', \"Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t'files.associations': {\n\t\t\t'type': 'object',\n\t\t\t'markdownDescription': nls.localize('associations', \"Configure file associations to languages (e.g. `\\\"*.extension\\\": \\\"html\\\"`). These have precedence over the default associations of the languages installed.\"),\n\t\t},\n\t\t'files.encoding': {\n\t\t\t'type': 'string',\n\t\t\t'overridable': true,\n\t\t\t'enum': Object.keys(SUPPORTED_ENCODINGS),\n\t\t\t'default': 'utf8',\n\t\t\t'description': nls.localize('encoding', \"The default character set encoding to use when reading and writing files. This setting can also be configured per language.\"),\n\t\t\t'scope': ConfigurationScope.RESOURCE,\n\t\t\t'enumDescriptions': Object.keys(SUPPORTED_ENCODINGS).map(key => SUPPORTED_ENCODINGS[key].labelLong)\n\t\t},\n\t\t'files.autoGuessEncoding': {\n\t\t\t'type': 'boolean',\n\t\t\t'overridable': true,\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('autoGuessEncoding', \"When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.\"),\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.eol': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [\n\t\t\t\t'\\n',\n\t\t\t\t'\\r\\n',\n\t\t\t\t'auto'\n\t\t\t],\n\t\t\t'enumDescriptions': [\n\t\t\t\tnls.localize('eol.LF', \"LF\"),\n\t\t\t\tnls.localize('eol.CRLF', \"CRLF\"),\n\t\t\t\tnls.localize('eol.auto', \"Uses operating system specific end of line character.\")\n\t\t\t],\n\t\t\t'default': 'auto',\n\t\t\t'description': nls.localize('eol', \"The default end of line character.\"),\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.enableTrash': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'description': nls.localize('useTrash', \"Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.\")\n\t\t},\n\t\t'files.trimTrailingWhitespace': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('trimTrailingWhitespace', \"When enabled, will trim trailing whitespace when saving a file.\"),\n\t\t\t'overridable': true,\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.insertFinalNewline': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('insertFinalNewline', \"When enabled, insert a final new line at the end of the file when saving it.\"),\n\t\t\t'overridable': true,\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.trimFinalNewlines': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('trimFinalNewlines', \"When enabled, will trim all new lines after the final new line at the end of the file when saving it.\"),\n\t\t\t'overridable': true,\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.autoSave': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE],\n\t\t\t'markdownEnumDescriptions': [\n\t\t\t\tnls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.off' }, \"A dirty file is never automatically saved.\"),\n\t\t\t\tnls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.afterDelay' }, \"A dirty file is automatically saved after the configured `#files.autoSaveDelay#`.\"),\n\t\t\t\tnls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onFocusChange' }, \"A dirty file is automatically saved when the editor loses focus.\"),\n\t\t\t\tnls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onWindowChange' }, \"A dirty file is automatically saved when the window loses focus.\")\n\t\t\t],\n\t\t\t'default': AutoSaveConfiguration.OFF,\n\t\t\t'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSave' }, \"Controls auto save of dirty files. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).\", AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE, AutoSaveConfiguration.AFTER_DELAY)\n\t\t},\n\t\t'files.autoSaveDelay': {\n\t\t\t'type': 'number',\n\t\t\t'default': 1000,\n\t\t\t'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSaveDelay' }, \"Controls the delay in ms after which a dirty file is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.\", AutoSaveConfiguration.AFTER_DELAY)\n\t\t},\n\t\t'files.watcherExclude': {\n\t\t\t'type': 'object',\n\t\t\t'default': platform.isWindows /* https://github.com/Microsoft/vscode/issues/23954 */ ? { '**/.git/objects/**': true, '**/.git/subtree-cache/**': true, '**/node_modules/*/**': true } : { '**/.git/objects/**': true, '**/.git/subtree-cache/**': true, '**/node_modules/**': true },\n\t\t\t'description': nls.localize('watcherExclude', \"Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.\"),\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'files.hotExit': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [HotExitConfiguration.OFF, HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE],\n\t\t\t'default': HotExitConfiguration.ON_EXIT,\n\t\t\t'markdownEnumDescriptions': [\n\t\t\t\tnls.localize('hotExit.off', 'Disable hot exit.'),\n\t\t\t\tnls.localize('hotExit.onExit', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows with backups will be restored upon next launch.'),\n\t\t\t\tnls.localize('hotExit.onExitAndWindowClose', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it\\'s the last window. All windows without folders opened will be restored upon next launch. To restore folder windows as they were before shutdown set `#window.restoreWindows#` to `all`.')\n\t\t\t],\n\t\t\t'description': nls.localize('hotExit', \"Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.\", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE)\n\t\t},\n\t\t'files.useExperimentalFileWatcher': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('useExperimentalFileWatcher', \"Use the new experimental file watcher.\")\n\t\t},\n\t\t'files.defaultLanguage': {\n\t\t\t'type': 'string',\n\t\t\t'description': nls.localize('defaultLanguage', \"The default language mode that is assigned to new files.\")\n\t\t},\n\t\t'files.maxMemoryForLargeFilesMB': {\n\t\t\t'type': 'number',\n\t\t\t'default': 4096,\n\t\t\t'markdownDescription': nls.localize('maxMemoryForLargeFilesMB', \"Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.\")\n\t\t}\n\t}\n});\n\nconfigurationRegistry.registerConfiguration({\n\tid: 'editor',\n\torder: 5,\n\ttitle: nls.localize('editorConfigurationTitle', \"Editor\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'editor.formatOnSave': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('formatOnSave', \"Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.\"),\n\t\t\t'overridable': true,\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t},\n\t\t'editor.formatOnSaveTimeout': {\n\t\t\t'type': 'number',\n\t\t\t'default': 750,\n\t\t\t'description': nls.localize('formatOnSaveTimeout', \"Timeout in milliseconds after which the formatting that is run on file save is cancelled.\"),\n\t\t\t'overridable': true,\n\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t}\n\t}\n});\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'explorer',\n\t'order': 10,\n\t'title': nls.localize('explorerConfigurationTitle', \"File Explorer\"),\n\t'type': 'object',\n\t'properties': {\n\t\t'explorer.openEditors.visible': {\n\t\t\t'type': 'number',\n\t\t\t'description': nls.localize({ key: 'openEditorsVisible', comment: ['Open is an adjective'] }, \"Number of editors shown in the Open Editors pane.\"),\n\t\t\t'default': 9\n\t\t},\n\t\t'explorer.autoReveal': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('autoReveal', \"Controls whether the explorer should automatically reveal and select files when opening them.\"),\n\t\t\t'default': true\n\t\t},\n\t\t'explorer.enableDragAndDrop': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('enableDragAndDrop', \"Controls whether the explorer should allow to move files and folders via drag and drop.\"),\n\t\t\t'default': true\n\t\t},\n\t\t'explorer.confirmDragAndDrop': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('confirmDragAndDrop', \"Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.\"),\n\t\t\t'default': true\n\t\t},\n\t\t'explorer.confirmDelete': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('confirmDelete', \"Controls whether the explorer should ask for confirmation when deleting a file via the trash.\"),\n\t\t\t'default': true\n\t\t},\n\t\t'explorer.sortOrder': {\n\t\t\t'type': 'string',\n\t\t\t'enum': [SortOrderConfiguration.DEFAULT, SortOrderConfiguration.MIXED, SortOrderConfiguration.FILES_FIRST, SortOrderConfiguration.TYPE, SortOrderConfiguration.MODIFIED],\n\t\t\t'default': SortOrderConfiguration.DEFAULT,\n\t\t\t'enumDescriptions': [\n\t\t\t\tnls.localize('sortOrder.default', 'Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.'),\n\t\t\t\tnls.localize('sortOrder.mixed', 'Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.'),\n\t\t\t\tnls.localize('sortOrder.filesFirst', 'Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.'),\n\t\t\t\tnls.localize('sortOrder.type', 'Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.'),\n\t\t\t\tnls.localize('sortOrder.modified', 'Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.')\n\t\t\t],\n\t\t\t'description': nls.localize('sortOrder', \"Controls sorting order of files and folders in the explorer.\")\n\t\t},\n\t\t'explorer.decorations.colors': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('explorer.decorations.colors', \"Controls whether file decorations should use colors.\"),\n\t\t\tdefault: true\n\t\t},\n\t\t'explorer.decorations.badges': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('explorer.decorations.badges', \"Controls whether file decorations should use badges.\"),\n\t\t\tdefault: true\n\t\t},\n\t}\n});\n\n// View menu\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '3_views',\n\tcommand: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: nls.localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, \"&&Explorer\")\n\t},\n\torder: 1\n});\n"]}]}