{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar listWidget_1 = require(\"vs/base/browser/ui/list/listWidget\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar breakpointsView_1 = require(\"vs/workbench/contrib/debug/browser/breakpointsView\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar contextkeys_1 = require(\"vs/platform/contextkey/common/contextkeys\");\nvar panel_1 = require(\"vs/workbench/common/panel\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nexports.ADD_CONFIGURATION_ID = 'debug.addConfiguration';\nexports.TOGGLE_INLINE_BREAKPOINT_ID = 'editor.debug.action.toggleInlineBreakpoint';\nexports.COPY_STACK_TRACE_ID = 'debug.copyStackTrace';\nexports.REVERSE_CONTINUE_ID = 'workbench.action.debug.reverseContinue';\nexports.STEP_BACK_ID = 'workbench.action.debug.stepBack';\nexports.RESTART_SESSION_ID = 'workbench.action.debug.restart';\nexports.TERMINATE_THREAD_ID = 'workbench.action.debug.terminateThread';\nexports.STEP_OVER_ID = 'workbench.action.debug.stepOver';\nexports.STEP_INTO_ID = 'workbench.action.debug.stepInto';\nexports.STEP_OUT_ID = 'workbench.action.debug.stepOut';\nexports.PAUSE_ID = 'workbench.action.debug.pause';\nexports.DISCONNECT_ID = 'workbench.action.debug.disconnect';\nexports.STOP_ID = 'workbench.action.debug.stop';\nexports.RESTART_FRAME_ID = 'workbench.action.debug.restartFrame';\nexports.CONTINUE_ID = 'workbench.action.debug.continue';\nexports.FOCUS_REPL_ID = 'workbench.debug.action.focusRepl';\nfunction getThreadAndRun(accessor, thread, run) {\n    var debugService = accessor.get(debug_1.IDebugService);\n    if (!(thread instanceof debugModel_1.Thread)) {\n        thread = debugService.getViewModel().focusedThread;\n    }\n    if (thread) {\n        run(thread).then(undefined, errors_1.onUnexpectedError);\n    }\n}\nfunction registerCommands() {\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.COPY_STACK_TRACE_ID,\n        handler: function (accessor, _, frame) {\n            var textResourcePropertiesService = accessor.get(resourceConfiguration_1.ITextResourcePropertiesService);\n            var clipboardService = accessor.get(clipboardService_1.IClipboardService);\n            var eol = textResourcePropertiesService.getEOL(frame.source.uri);\n            clipboardService.writeText(frame.thread.getCallStack().map(function (sf) { return sf.toString(); }).join(eol));\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.REVERSE_CONTINUE_ID,\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.reverseContinue(); });\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.STEP_BACK_ID,\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.stepBack(); });\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.TERMINATE_THREAD_ID,\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.terminate(); });\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.RESTART_SESSION_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F5,\n        when: debug_1.CONTEXT_IN_DEBUG_MODE,\n        handler: function (accessor, _, session) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            if (!session || !session.getId) {\n                session = debugService.getViewModel().focusedSession;\n            }\n            if (!session) {\n                var historyService = accessor.get(history_1.IHistoryService);\n                debugUtils_1.startDebugging(debugService, historyService, false);\n            }\n            else {\n                session.removeReplExpressions();\n                debugService.restartSession(session).then(undefined, errors_1.onUnexpectedError);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.STEP_OVER_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyCode.F10,\n        when: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.next(); });\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.STEP_INTO_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 10,\n        primary: keyCodes_1.KeyCode.F11,\n        when: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.stepIn(); });\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.STEP_OUT_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F11,\n        when: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.stepOut(); });\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.PAUSE_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyCode.F6,\n        when: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('running'),\n        handler: function (accessor, _, thread) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            if (!(thread instanceof debugModel_1.Thread)) {\n                thread = debugService.getViewModel().focusedThread;\n                if (!thread) {\n                    var session = debugService.getViewModel().focusedSession;\n                    var threads = session && session.getAllThreads();\n                    thread = threads && threads.length ? threads[0] : undefined;\n                }\n            }\n            if (thread) {\n                thread.pause().then(undefined, errors_1.onUnexpectedError);\n            }\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.DISCONNECT_ID,\n        handler: function (accessor) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            var session = debugService.getViewModel().focusedSession;\n            debugService.stopSession(session).then(undefined, errors_1.onUnexpectedError);\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.STOP_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F5,\n        when: debug_1.CONTEXT_IN_DEBUG_MODE,\n        handler: function (accessor, _, session) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            if (!session || !session.getId) {\n                session = debugService.getViewModel().focusedSession;\n            }\n            debugService.stopSession(session).then(undefined, errors_1.onUnexpectedError);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.RESTART_FRAME_ID,\n        handler: function (accessor, _, frame) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            if (!frame) {\n                frame = debugService.getViewModel().focusedStackFrame;\n            }\n            return frame.restart();\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CONTINUE_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyCode.F5,\n        when: debug_1.CONTEXT_IN_DEBUG_MODE,\n        handler: function (accessor, _, thread) {\n            getThreadAndRun(accessor, thread, function (thread) { return thread.continue(); });\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.FOCUS_REPL_ID,\n        handler: function (accessor) {\n            var panelService = accessor.get(panelService_1.IPanelService);\n            panelService.openPanel(debug_1.REPL_ID, true);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: 'debug.startFromConfig',\n        handler: function (accessor, config) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            debugService.startDebugging(undefined, config).then(undefined, errors_1.onUnexpectedError);\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.toggleBreakpoint',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 5,\n        when: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_BREAKPOINTS_FOCUSED, contextkeys_1.InputFocusedContext.toNegated()),\n        primary: keyCodes_1.KeyCode.Space,\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var debugService = accessor.get(debug_1.IDebugService);\n            var list = listService.lastFocusedList;\n            if (list instanceof listWidget_1.List) {\n                var focused = list.getFocusedElements();\n                if (focused && focused.length) {\n                    debugService.enableOrDisableBreakpoints(!focused[0].enabled, focused[0]);\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.enableOrDisableBreakpoint',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: undefined,\n        when: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        handler: function (accessor) {\n            var debugService = accessor.get(debug_1.IDebugService);\n            var editorService = accessor.get(editorService_1.IEditorService);\n            var widget = editorService.activeTextEditorWidget;\n            if (editorBrowser_1.isCodeEditor(widget)) {\n                var model = widget.getModel();\n                if (model) {\n                    var position = widget.getPosition();\n                    if (position) {\n                        var bps = debugService.getModel().getBreakpoints({ uri: model.uri, lineNumber: position.lineNumber });\n                        if (bps.length) {\n                            debugService.enableOrDisableBreakpoints(!bps[0].enabled, bps[0]);\n                        }\n                    }\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.renameWatchExpression',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 5,\n        when: debug_1.CONTEXT_WATCH_EXPRESSIONS_FOCUSED,\n        primary: keyCodes_1.KeyCode.F2,\n        mac: { primary: keyCodes_1.KeyCode.Enter },\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var debugService = accessor.get(debug_1.IDebugService);\n            var focused = listService.lastFocusedList;\n            if (focused) {\n                var elements = focused.getFocus();\n                if (Array.isArray(elements) && elements[0] instanceof debugModel_1.Expression) {\n                    debugService.getViewModel().setSelectedExpression(elements[0]);\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.setVariable',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib + 5,\n        when: debug_1.CONTEXT_VARIABLES_FOCUSED,\n        primary: keyCodes_1.KeyCode.F2,\n        mac: { primary: keyCodes_1.KeyCode.Enter },\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var debugService = accessor.get(debug_1.IDebugService);\n            var focused = listService.lastFocusedList;\n            if (focused) {\n                var elements = focused.getFocus();\n                if (Array.isArray(elements) && elements[0] instanceof debugModel_1.Variable) {\n                    debugService.getViewModel().setSelectedExpression(elements[0]);\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.removeWatchExpression',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_WATCH_EXPRESSIONS_FOCUSED, debug_1.CONTEXT_EXPRESSION_SELECTED.toNegated()),\n        primary: keyCodes_1.KeyCode.Delete,\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace },\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var debugService = accessor.get(debug_1.IDebugService);\n            var focused = listService.lastFocusedList;\n            if (focused) {\n                var elements = focused.getFocus();\n                if (Array.isArray(elements) && elements[0] instanceof debugModel_1.Expression) {\n                    debugService.removeWatchExpressions(elements[0].getId());\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.removeBreakpoint',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_BREAKPOINTS_FOCUSED, debug_1.CONTEXT_BREAKPOINT_SELECTED.toNegated()),\n        primary: keyCodes_1.KeyCode.Delete,\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace },\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var debugService = accessor.get(debug_1.IDebugService);\n            var list = listService.lastFocusedList;\n            if (list instanceof listWidget_1.List) {\n                var focused = list.getFocusedElements();\n                var element = focused.length ? focused[0] : undefined;\n                if (element instanceof debugModel_1.Breakpoint) {\n                    debugService.removeBreakpoints(element.getId());\n                }\n                else if (element instanceof debugModel_1.FunctionBreakpoint) {\n                    debugService.removeFunctionBreakpoints(element.getId());\n                }\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.installAdditionalDebuggers',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor) {\n            var viewletService = accessor.get(viewlet_1.IViewletService);\n            return viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(function (viewlet) { return viewlet; })\n                .then(function (viewlet) {\n                viewlet.search('tag:debuggers @sort:installs');\n                viewlet.focus();\n            });\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.ADD_CONFIGURATION_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor, launchUri) {\n            var manager = accessor.get(debug_1.IDebugService).getConfigurationManager();\n            if (accessor.get(workspace_1.IWorkspaceContextService).getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n                accessor.get(notification_1.INotificationService).info(nls.localize('noFolderDebugConfig', \"Please first open a folder in order to do advanced debug configuration.\"));\n                return undefined;\n            }\n            var launch = manager.getLaunches().filter(function (l) { return l.uri.toString() === launchUri; }).pop() || manager.selectedConfiguration.launch;\n            return launch.openConfigFile(false, false).then(function (_a) {\n                var editor = _a.editor, created = _a.created;\n                if (editor && !created) {\n                    var codeEditor = editor.getControl();\n                    if (codeEditor) {\n                        return codeEditor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).addLaunchConfiguration();\n                    }\n                }\n                return undefined;\n            });\n        }\n    });\n    var inlineBreakpointHandler = function (accessor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var widget = editorService.activeTextEditorWidget;\n        if (editorBrowser_1.isCodeEditor(widget)) {\n            var position_1 = widget.getPosition();\n            if (!position_1 || !widget.hasModel()) {\n                return undefined;\n            }\n            var modelUri = widget.getModel().uri;\n            var bp = debugService.getModel().getBreakpoints({ lineNumber: position_1.lineNumber, uri: modelUri })\n                .filter(function (bp) { return (bp.column === position_1.column || !bp.column && position_1.column <= 1); }).pop();\n            if (bp) {\n                return undefined;\n            }\n            if (debugService.getConfigurationManager().canSetBreakpointsIn(widget.getModel())) {\n                return debugService.addBreakpoints(modelUri, [{ lineNumber: position_1.lineNumber, column: position_1.column > 1 ? position_1.column : undefined }], 'debugCommands.inlineBreakpointCommand');\n            }\n        }\n        return undefined;\n    };\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F9,\n        when: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        id: exports.TOGGLE_INLINE_BREAKPOINT_ID,\n        handler: inlineBreakpointHandler\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n        command: {\n            id: exports.TOGGLE_INLINE_BREAKPOINT_ID,\n            title: { value: nls.localize('inlineBreakpoint', \"Inline Breakpoint\"), original: 'Debug: Inline Breakpoint' },\n            category: nls.localize('debug', \"Debug\")\n        }\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorContext, {\n        command: {\n            id: exports.TOGGLE_INLINE_BREAKPOINT_ID,\n            title: nls.localize('addInlineBreakpoint', \"Add Inline Breakpoint\")\n        },\n        when: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_IN_DEBUG_MODE, panel_1.PanelFocusContext.toNegated(), editorContextKeys_1.EditorContextKeys.editorTextFocus),\n        group: 'debug',\n        order: 1\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: 'debug.openBreakpointToSide',\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: debug_1.CONTEXT_BREAKPOINTS_FOCUSED,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Enter,\n        secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Enter],\n        handler: function (accessor) {\n            var listService = accessor.get(listService_1.IListService);\n            var list = listService.lastFocusedList;\n            if (list instanceof listWidget_1.List) {\n                var focus = list.getFocusedElements();\n                if (focus.length && focus[0] instanceof debugModel_1.Breakpoint) {\n                    return breakpointsView_1.openBreakpointSource(focus[0], true, false, accessor.get(debug_1.IDebugService), accessor.get(editorService_1.IEditorService));\n                }\n            }\n            return undefined;\n        }\n    });\n}\nexports.registerCommands = registerCommands;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { List } from 'vs/base/browser/ui/list/listWidget';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IDebugService, IEnablement, CONTEXT_BREAKPOINTS_FOCUSED, CONTEXT_WATCH_EXPRESSIONS_FOCUSED, CONTEXT_VARIABLES_FOCUSED, EDITOR_CONTRIBUTION_ID, IDebugEditorContribution, CONTEXT_IN_DEBUG_MODE, CONTEXT_EXPRESSION_SELECTED, CONTEXT_BREAKPOINT_SELECTED, IConfig, IStackFrame, IThread, IDebugSession, CONTEXT_DEBUG_STATE, REPL_ID } from 'vs/workbench/contrib/debug/common/debug';\nimport { Expression, Variable, Breakpoint, FunctionBreakpoint, Thread } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { IExtensionsViewlet, VIEWLET_ID as EXTENSIONS_VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { ICodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { openBreakpointSource } from 'vs/workbench/contrib/debug/browser/breakpointsView';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { InputFocusedContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { PanelFocusContext } from 'vs/workbench/common/panel';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { startDebugging } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\n\nexport const ADD_CONFIGURATION_ID = 'debug.addConfiguration';\nexport const TOGGLE_INLINE_BREAKPOINT_ID = 'editor.debug.action.toggleInlineBreakpoint';\nexport const COPY_STACK_TRACE_ID = 'debug.copyStackTrace';\nexport const REVERSE_CONTINUE_ID = 'workbench.action.debug.reverseContinue';\nexport const STEP_BACK_ID = 'workbench.action.debug.stepBack';\nexport const RESTART_SESSION_ID = 'workbench.action.debug.restart';\nexport const TERMINATE_THREAD_ID = 'workbench.action.debug.terminateThread';\nexport const STEP_OVER_ID = 'workbench.action.debug.stepOver';\nexport const STEP_INTO_ID = 'workbench.action.debug.stepInto';\nexport const STEP_OUT_ID = 'workbench.action.debug.stepOut';\nexport const PAUSE_ID = 'workbench.action.debug.pause';\nexport const DISCONNECT_ID = 'workbench.action.debug.disconnect';\nexport const STOP_ID = 'workbench.action.debug.stop';\nexport const RESTART_FRAME_ID = 'workbench.action.debug.restartFrame';\nexport const CONTINUE_ID = 'workbench.action.debug.continue';\nexport const FOCUS_REPL_ID = 'workbench.debug.action.focusRepl';\n\nfunction getThreadAndRun(accessor: ServicesAccessor, thread: IThread | undefined, run: (thread: IThread) => Promise<void>, ): void {\n\tconst debugService = accessor.get(IDebugService);\n\tif (!(thread instanceof Thread)) {\n\t\tthread = debugService.getViewModel().focusedThread;\n\t}\n\n\tif (thread) {\n\t\trun(thread).then(undefined, onUnexpectedError);\n\t}\n}\n\nexport function registerCommands(): void {\n\n\tCommandsRegistry.registerCommand({\n\t\tid: COPY_STACK_TRACE_ID,\n\t\thandler: (accessor: ServicesAccessor, _: string, frame: IStackFrame) => {\n\t\t\tconst textResourcePropertiesService = accessor.get(ITextResourcePropertiesService);\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst eol = textResourcePropertiesService.getEOL(frame.source.uri);\n\t\t\tclipboardService.writeText(frame.thread.getCallStack().map(sf => sf.toString()).join(eol));\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: REVERSE_CONTINUE_ID,\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.reverseContinue());\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: STEP_BACK_ID,\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.stepBack());\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: TERMINATE_THREAD_ID,\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.terminate());\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: RESTART_SESSION_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyMod.Shift | KeyMod.CtrlCmd | KeyCode.F5,\n\t\twhen: CONTEXT_IN_DEBUG_MODE,\n\t\thandler: (accessor: ServicesAccessor, _: string, session: IDebugSession | undefined) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tif (!session || !session.getId) {\n\t\t\t\tsession = debugService.getViewModel().focusedSession;\n\t\t\t}\n\n\t\t\tif (!session) {\n\t\t\t\tconst historyService = accessor.get(IHistoryService);\n\t\t\t\tstartDebugging(debugService, historyService, false);\n\t\t\t} else {\n\t\t\t\tsession.removeReplExpressions();\n\t\t\t\tdebugService.restartSession(session).then(undefined, onUnexpectedError);\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: STEP_OVER_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyCode.F10,\n\t\twhen: CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.next());\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: STEP_INTO_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 10, // Have a stronger weight to have priority over full screen when debugging\n\t\tprimary: KeyCode.F11,\n\t\twhen: CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.stepIn());\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: STEP_OUT_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyMod.Shift | KeyCode.F11,\n\t\twhen: CONTEXT_DEBUG_STATE.isEqualTo('stopped'),\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.stepOut());\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: PAUSE_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyCode.F6,\n\t\twhen: CONTEXT_DEBUG_STATE.isEqualTo('running'),\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tif (!(thread instanceof Thread)) {\n\t\t\t\tthread = debugService.getViewModel().focusedThread;\n\t\t\t\tif (!thread) {\n\t\t\t\t\tconst session = debugService.getViewModel().focusedSession;\n\t\t\t\t\tconst threads = session && session.getAllThreads();\n\t\t\t\t\tthread = threads && threads.length ? threads[0] : undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (thread) {\n\t\t\t\tthread.pause().then(undefined, onUnexpectedError);\n\t\t\t}\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: DISCONNECT_ID,\n\t\thandler: (accessor: ServicesAccessor) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst session = debugService.getViewModel().focusedSession;\n\t\t\tdebugService.stopSession(session).then(undefined, onUnexpectedError);\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: STOP_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyMod.Shift | KeyCode.F5,\n\t\twhen: CONTEXT_IN_DEBUG_MODE,\n\t\thandler: (accessor: ServicesAccessor, _: string, session: IDebugSession | undefined) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tif (!session || !session.getId) {\n\t\t\t\tsession = debugService.getViewModel().focusedSession;\n\t\t\t}\n\n\t\t\tdebugService.stopSession(session).then(undefined, onUnexpectedError);\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: RESTART_FRAME_ID,\n\t\thandler: (accessor: ServicesAccessor, _: string, frame: IStackFrame | undefined) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tif (!frame) {\n\t\t\t\tframe = debugService.getViewModel().focusedStackFrame;\n\t\t\t}\n\n\t\t\treturn frame!.restart();\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CONTINUE_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyCode.F5,\n\t\twhen: CONTEXT_IN_DEBUG_MODE,\n\t\thandler: (accessor: ServicesAccessor, _: string, thread: IThread | undefined) => {\n\t\t\tgetThreadAndRun(accessor, thread, thread => thread.continue());\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: FOCUS_REPL_ID,\n\t\thandler: (accessor) => {\n\t\t\tconst panelService = accessor.get(IPanelService);\n\t\t\tpanelService.openPanel(REPL_ID, true);\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand({\n\t\tid: 'debug.startFromConfig',\n\t\thandler: (accessor, config: IConfig) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tdebugService.startDebugging(undefined, config).then(undefined, onUnexpectedError);\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.toggleBreakpoint',\n\t\tweight: KeybindingWeight.WorkbenchContrib + 5,\n\t\twhen: ContextKeyExpr.and(CONTEXT_BREAKPOINTS_FOCUSED, InputFocusedContext.toNegated()),\n\t\tprimary: KeyCode.Space,\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst list = listService.lastFocusedList;\n\t\t\tif (list instanceof List) {\n\t\t\t\tconst focused = <IEnablement[]>list.getFocusedElements();\n\t\t\t\tif (focused && focused.length) {\n\t\t\t\t\tdebugService.enableOrDisableBreakpoints(!focused[0].enabled, focused[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.enableOrDisableBreakpoint',\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: undefined,\n\t\twhen: EditorContextKeys.editorTextFocus,\n\t\thandler: (accessor) => {\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst widget = editorService.activeTextEditorWidget;\n\t\t\tif (isCodeEditor(widget)) {\n\t\t\t\tconst model = widget.getModel();\n\t\t\t\tif (model) {\n\t\t\t\t\tconst position = widget.getPosition();\n\t\t\t\t\tif (position) {\n\t\t\t\t\t\tconst bps = debugService.getModel().getBreakpoints({ uri: model.uri, lineNumber: position.lineNumber });\n\t\t\t\t\t\tif (bps.length) {\n\t\t\t\t\t\t\tdebugService.enableOrDisableBreakpoints(!bps[0].enabled, bps[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.renameWatchExpression',\n\t\tweight: KeybindingWeight.WorkbenchContrib + 5,\n\t\twhen: CONTEXT_WATCH_EXPRESSIONS_FOCUSED,\n\t\tprimary: KeyCode.F2,\n\t\tmac: { primary: KeyCode.Enter },\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst focused = listService.lastFocusedList;\n\n\t\t\tif (focused) {\n\t\t\t\tconst elements = focused.getFocus();\n\t\t\t\tif (Array.isArray(elements) && elements[0] instanceof Expression) {\n\t\t\t\t\tdebugService.getViewModel().setSelectedExpression(elements[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.setVariable',\n\t\tweight: KeybindingWeight.WorkbenchContrib + 5,\n\t\twhen: CONTEXT_VARIABLES_FOCUSED,\n\t\tprimary: KeyCode.F2,\n\t\tmac: { primary: KeyCode.Enter },\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst focused = listService.lastFocusedList;\n\n\t\t\tif (focused) {\n\t\t\t\tconst elements = focused.getFocus();\n\t\t\t\tif (Array.isArray(elements) && elements[0] instanceof Variable) {\n\t\t\t\t\tdebugService.getViewModel().setSelectedExpression(elements[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.removeWatchExpression',\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(CONTEXT_WATCH_EXPRESSIONS_FOCUSED, CONTEXT_EXPRESSION_SELECTED.toNegated()),\n\t\tprimary: KeyCode.Delete,\n\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst focused = listService.lastFocusedList;\n\n\t\t\tif (focused) {\n\t\t\t\tconst elements = focused.getFocus();\n\t\t\t\tif (Array.isArray(elements) && elements[0] instanceof Expression) {\n\t\t\t\t\tdebugService.removeWatchExpressions(elements[0].getId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.removeBreakpoint',\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(CONTEXT_BREAKPOINTS_FOCUSED, CONTEXT_BREAKPOINT_SELECTED.toNegated()),\n\t\tprimary: KeyCode.Delete,\n\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst debugService = accessor.get(IDebugService);\n\t\t\tconst list = listService.lastFocusedList;\n\n\t\t\tif (list instanceof List) {\n\t\t\t\tconst focused = list.getFocusedElements();\n\t\t\t\tconst element = focused.length ? focused[0] : undefined;\n\t\t\t\tif (element instanceof Breakpoint) {\n\t\t\t\t\tdebugService.removeBreakpoints(element.getId());\n\t\t\t\t} else if (element instanceof FunctionBreakpoint) {\n\t\t\t\t\tdebugService.removeFunctionBreakpoints(element.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.installAdditionalDebuggers',\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor) => {\n\t\t\tconst viewletService = accessor.get(IViewletService);\n\t\t\treturn viewletService.openViewlet(EXTENSIONS_VIEWLET_ID, true)\n\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t.then(viewlet => {\n\t\t\t\t\tviewlet.search('tag:debuggers @sort:installs');\n\t\t\t\t\tviewlet.focus();\n\t\t\t\t});\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: ADD_CONFIGURATION_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, launchUri: string) => {\n\t\t\tconst manager = accessor.get(IDebugService).getConfigurationManager();\n\t\t\tif (accessor.get(IWorkspaceContextService).getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\t\taccessor.get(INotificationService).info(nls.localize('noFolderDebugConfig', \"Please first open a folder in order to do advanced debug configuration.\"));\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst launch = manager.getLaunches().filter(l => l.uri.toString() === launchUri).pop() || manager.selectedConfiguration.launch;\n\n\t\t\treturn launch!.openConfigFile(false, false).then(({ editor, created }) => {\n\t\t\t\tif (editor && !created) {\n\t\t\t\t\tconst codeEditor = <ICodeEditor>editor.getControl();\n\t\t\t\t\tif (codeEditor) {\n\t\t\t\t\t\treturn codeEditor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID).addLaunchConfiguration();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\t});\n\n\tconst inlineBreakpointHandler = (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst widget = editorService.activeTextEditorWidget;\n\t\tif (isCodeEditor(widget)) {\n\t\t\tconst position = widget.getPosition();\n\t\t\tif (!position || !widget.hasModel()) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst modelUri = widget.getModel().uri;\n\t\t\tconst bp = debugService.getModel().getBreakpoints({ lineNumber: position.lineNumber, uri: modelUri })\n\t\t\t\t.filter(bp => (bp.column === position.column || !bp.column && position.column <= 1)).pop();\n\n\t\t\tif (bp) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (debugService.getConfigurationManager().canSetBreakpointsIn(widget.getModel())) {\n\t\t\t\treturn debugService.addBreakpoints(modelUri, [{ lineNumber: position.lineNumber, column: position.column > 1 ? position.column : undefined }], 'debugCommands.inlineBreakpointCommand');\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t};\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyMod.Shift | KeyCode.F9,\n\t\twhen: EditorContextKeys.editorTextFocus,\n\t\tid: TOGGLE_INLINE_BREAKPOINT_ID,\n\t\thandler: inlineBreakpointHandler\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_INLINE_BREAKPOINT_ID,\n\t\t\ttitle: { value: nls.localize('inlineBreakpoint', \"Inline Breakpoint\"), original: 'Debug: Inline Breakpoint' },\n\t\t\tcategory: nls.localize('debug', \"Debug\")\n\t\t}\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_INLINE_BREAKPOINT_ID,\n\t\t\ttitle: nls.localize('addInlineBreakpoint', \"Add Inline Breakpoint\")\n\t\t},\n\t\twhen: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, PanelFocusContext.toNegated(), EditorContextKeys.editorTextFocus),\n\t\tgroup: 'debug',\n\t\torder: 1\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: 'debug.openBreakpointToSide',\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: CONTEXT_BREAKPOINTS_FOCUSED,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\tsecondary: [KeyMod.Alt | KeyCode.Enter],\n\t\thandler: (accessor) => {\n\t\t\tconst listService = accessor.get(IListService);\n\t\t\tconst list = listService.lastFocusedList;\n\t\t\tif (list instanceof List) {\n\t\t\t\tconst focus = list.getFocusedElements();\n\t\t\t\tif (focus.length && focus[0] instanceof Breakpoint) {\n\t\t\t\t\treturn openBreakpointSource(focus[0], true, false, accessor.get(IDebugService), accessor.get(IEditorService));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\t});\n}\n"]}]}