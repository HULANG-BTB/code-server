{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/types\"], function (require, exports, Types) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var ValidationState;\n    (function (ValidationState) {\n        ValidationState[ValidationState[\"OK\"] = 0] = \"OK\";\n        ValidationState[ValidationState[\"Info\"] = 1] = \"Info\";\n        ValidationState[ValidationState[\"Warning\"] = 2] = \"Warning\";\n        ValidationState[ValidationState[\"Error\"] = 3] = \"Error\";\n        ValidationState[ValidationState[\"Fatal\"] = 4] = \"Fatal\";\n    })(ValidationState = exports.ValidationState || (exports.ValidationState = {}));\n    class ValidationStatus {\n        constructor() {\n            this._state = ValidationState.OK;\n        }\n        get state() {\n            return this._state;\n        }\n        set state(value) {\n            if (value > this._state) {\n                this._state = value;\n            }\n        }\n        isOK() {\n            return this._state === ValidationState.OK;\n        }\n        isFatal() {\n            return this._state === ValidationState.Fatal;\n        }\n    }\n    exports.ValidationStatus = ValidationStatus;\n    class Parser {\n        constructor(problemReporter) {\n            this._problemReporter = problemReporter;\n        }\n        reset() {\n            this._problemReporter.status.state = ValidationState.OK;\n        }\n        get problemReporter() {\n            return this._problemReporter;\n        }\n        info(message) {\n            this._problemReporter.info(message);\n        }\n        warn(message) {\n            this._problemReporter.warn(message);\n        }\n        error(message) {\n            this._problemReporter.error(message);\n        }\n        fatal(message) {\n            this._problemReporter.fatal(message);\n        }\n        static merge(destination, source, overwrite) {\n            Object.keys(source).forEach((key) => {\n                const destValue = destination[key];\n                const sourceValue = source[key];\n                if (Types.isUndefined(sourceValue)) {\n                    return;\n                }\n                if (Types.isUndefined(destValue)) {\n                    destination[key] = sourceValue;\n                }\n                else {\n                    if (overwrite) {\n                        if (Types.isObject(destValue) && Types.isObject(sourceValue)) {\n                            this.merge(destValue, sourceValue, overwrite);\n                        }\n                        else {\n                            destination[key] = sourceValue;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    exports.Parser = Parser;\n});\n",null]}