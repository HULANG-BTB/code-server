{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/abstractCodeEditorService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/abstractCodeEditorService.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar AbstractCodeEditorService = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractCodeEditorService, _super);\n    function AbstractCodeEditorService() {\n        var _this = _super.call(this) || this;\n        _this._onCodeEditorAdd = _this._register(new event_1.Emitter());\n        _this.onCodeEditorAdd = _this._onCodeEditorAdd.event;\n        _this._onCodeEditorRemove = _this._register(new event_1.Emitter());\n        _this.onCodeEditorRemove = _this._onCodeEditorRemove.event;\n        _this._onDiffEditorAdd = _this._register(new event_1.Emitter());\n        _this.onDiffEditorAdd = _this._onDiffEditorAdd.event;\n        _this._onDiffEditorRemove = _this._register(new event_1.Emitter());\n        _this.onDiffEditorRemove = _this._onDiffEditorRemove.event;\n        _this._onDidChangeTransientModelProperty = _this._register(new event_1.Emitter());\n        _this.onDidChangeTransientModelProperty = _this._onDidChangeTransientModelProperty.event;\n        _this._transientWatchers = {};\n        _this._codeEditors = Object.create(null);\n        _this._diffEditors = Object.create(null);\n        return _this;\n    }\n    AbstractCodeEditorService.prototype.addCodeEditor = function (editor) {\n        this._codeEditors[editor.getId()] = editor;\n        this._onCodeEditorAdd.fire(editor);\n    };\n    AbstractCodeEditorService.prototype.removeCodeEditor = function (editor) {\n        if (delete this._codeEditors[editor.getId()]) {\n            this._onCodeEditorRemove.fire(editor);\n        }\n    };\n    AbstractCodeEditorService.prototype.listCodeEditors = function () {\n        var _this = this;\n        return Object.keys(this._codeEditors).map(function (id) { return _this._codeEditors[id]; });\n    };\n    AbstractCodeEditorService.prototype.addDiffEditor = function (editor) {\n        this._diffEditors[editor.getId()] = editor;\n        this._onDiffEditorAdd.fire(editor);\n    };\n    AbstractCodeEditorService.prototype.removeDiffEditor = function (editor) {\n        if (delete this._diffEditors[editor.getId()]) {\n            this._onDiffEditorRemove.fire(editor);\n        }\n    };\n    AbstractCodeEditorService.prototype.listDiffEditors = function () {\n        var _this = this;\n        return Object.keys(this._diffEditors).map(function (id) { return _this._diffEditors[id]; });\n    };\n    AbstractCodeEditorService.prototype.getFocusedCodeEditor = function () {\n        var editorWithWidgetFocus = null;\n        var editors = this.listCodeEditors();\n        for (var _i = 0, editors_1 = editors; _i < editors_1.length; _i++) {\n            var editor = editors_1[_i];\n            if (editor.hasTextFocus()) {\n                // bingo!\n                return editor;\n            }\n            if (editor.hasWidgetFocus()) {\n                editorWithWidgetFocus = editor;\n            }\n        }\n        return editorWithWidgetFocus;\n    };\n    AbstractCodeEditorService.prototype.setTransientModelProperty = function (model, key, value) {\n        var uri = model.uri.toString();\n        var w;\n        if (this._transientWatchers.hasOwnProperty(uri)) {\n            w = this._transientWatchers[uri];\n        }\n        else {\n            w = new ModelTransientSettingWatcher(uri, model, this);\n            this._transientWatchers[uri] = w;\n        }\n        w.set(key, value);\n        this._onDidChangeTransientModelProperty.fire(model);\n    };\n    AbstractCodeEditorService.prototype.getTransientModelProperty = function (model, key) {\n        var uri = model.uri.toString();\n        if (!this._transientWatchers.hasOwnProperty(uri)) {\n            return undefined;\n        }\n        return this._transientWatchers[uri].get(key);\n    };\n    AbstractCodeEditorService.prototype._removeWatcher = function (w) {\n        delete this._transientWatchers[w.uri];\n    };\n    return AbstractCodeEditorService;\n}(lifecycle_1.Disposable));\nexports.AbstractCodeEditorService = AbstractCodeEditorService;\nvar ModelTransientSettingWatcher = /** @class */ (function () {\n    function ModelTransientSettingWatcher(uri, model, owner) {\n        var _this = this;\n        this.uri = uri;\n        this._values = {};\n        model.onWillDispose(function () { return owner._removeWatcher(_this); });\n    }\n    ModelTransientSettingWatcher.prototype.set = function (key, value) {\n        this._values[key] = value;\n    };\n    ModelTransientSettingWatcher.prototype.get = function (key) {\n        return this._values[key];\n    };\n    return ModelTransientSettingWatcher;\n}());\nexports.ModelTransientSettingWatcher = ModelTransientSettingWatcher;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/abstractCodeEditorService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/abstractCodeEditorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IDecorationRenderOptions } from 'vs/editor/common/editorCommon';\nimport { IModelDecorationOptions, ITextModel } from 'vs/editor/common/model';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\n\nexport abstract class AbstractCodeEditorService extends Disposable implements ICodeEditorService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onCodeEditorAdd: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorAdd: Event<ICodeEditor> = this._onCodeEditorAdd.event;\n\n\tprivate readonly _onCodeEditorRemove: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorRemove: Event<ICodeEditor> = this._onCodeEditorRemove.event;\n\n\tprivate readonly _onDiffEditorAdd: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorAdd: Event<IDiffEditor> = this._onDiffEditorAdd.event;\n\n\tprivate readonly _onDiffEditorRemove: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorRemove: Event<IDiffEditor> = this._onDiffEditorRemove.event;\n\n\tprivate readonly _onDidChangeTransientModelProperty: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onDidChangeTransientModelProperty: Event<ITextModel> = this._onDidChangeTransientModelProperty.event;\n\n\n\tprivate readonly _codeEditors: { [editorId: string]: ICodeEditor; };\n\tprivate readonly _diffEditors: { [editorId: string]: IDiffEditor; };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._codeEditors = Object.create(null);\n\t\tthis._diffEditors = Object.create(null);\n\t}\n\n\taddCodeEditor(editor: ICodeEditor): void {\n\t\tthis._codeEditors[editor.getId()] = editor;\n\t\tthis._onCodeEditorAdd.fire(editor);\n\t}\n\n\tremoveCodeEditor(editor: ICodeEditor): void {\n\t\tif (delete this._codeEditors[editor.getId()]) {\n\t\t\tthis._onCodeEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistCodeEditors(): ICodeEditor[] {\n\t\treturn Object.keys(this._codeEditors).map(id => this._codeEditors[id]);\n\t}\n\n\taddDiffEditor(editor: IDiffEditor): void {\n\t\tthis._diffEditors[editor.getId()] = editor;\n\t\tthis._onDiffEditorAdd.fire(editor);\n\t}\n\n\tremoveDiffEditor(editor: IDiffEditor): void {\n\t\tif (delete this._diffEditors[editor.getId()]) {\n\t\t\tthis._onDiffEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistDiffEditors(): IDiffEditor[] {\n\t\treturn Object.keys(this._diffEditors).map(id => this._diffEditors[id]);\n\t}\n\n\tgetFocusedCodeEditor(): ICodeEditor | null {\n\t\tlet editorWithWidgetFocus: ICodeEditor | null = null;\n\n\t\tconst editors = this.listCodeEditors();\n\t\tfor (const editor of editors) {\n\n\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t// bingo!\n\t\t\t\treturn editor;\n\t\t\t}\n\n\t\t\tif (editor.hasWidgetFocus()) {\n\t\t\t\teditorWithWidgetFocus = editor;\n\t\t\t}\n\t\t}\n\n\t\treturn editorWithWidgetFocus;\n\t}\n\n\tabstract registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string): void;\n\tabstract removeDecorationType(key: string): void;\n\tabstract resolveDecorationOptions(decorationTypeKey: string | undefined, writable: boolean): IModelDecorationOptions;\n\n\tprivate readonly _transientWatchers: { [uri: string]: ModelTransientSettingWatcher; } = {};\n\n\tpublic setTransientModelProperty(model: ITextModel, key: string, value: any): void {\n\t\tconst uri = model.uri.toString();\n\n\t\tlet w: ModelTransientSettingWatcher;\n\t\tif (this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\tw = this._transientWatchers[uri];\n\t\t} else {\n\t\t\tw = new ModelTransientSettingWatcher(uri, model, this);\n\t\t\tthis._transientWatchers[uri] = w;\n\t\t}\n\n\t\tw.set(key, value);\n\t\tthis._onDidChangeTransientModelProperty.fire(model);\n\t}\n\n\tpublic getTransientModelProperty(model: ITextModel, key: string): any {\n\t\tconst uri = model.uri.toString();\n\n\t\tif (!this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._transientWatchers[uri].get(key);\n\t}\n\n\t_removeWatcher(w: ModelTransientSettingWatcher): void {\n\t\tdelete this._transientWatchers[w.uri];\n\t}\n\n\tabstract getActiveCodeEditor(): ICodeEditor | null;\n\tabstract openCodeEditor(input: IResourceInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null>;\n}\n\nexport class ModelTransientSettingWatcher {\n\tpublic readonly uri: string;\n\tprivate readonly _values: { [key: string]: any; };\n\n\tconstructor(uri: string, model: ITextModel, owner: AbstractCodeEditorService) {\n\t\tthis.uri = uri;\n\t\tthis._values = {};\n\t\tmodel.onWillDispose(() => owner._removeWatcher(this));\n\t}\n\n\tpublic set(key: string, value: any): void {\n\t\tthis._values[key] = value;\n\t}\n\n\tpublic get(key: string): any {\n\t\treturn this._values[key];\n\t}\n}\n"]}]}