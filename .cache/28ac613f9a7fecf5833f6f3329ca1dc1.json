{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar cursorWordOperations_1 = require(\"vs/editor/common/controller/cursorWordOperations\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar wordOperations_1 = require(\"vs/editor/contrib/wordOperations/wordOperations\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar DeleteWordPartLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordPartLeft, _super);\n    function DeleteWordPartLeft() {\n        return _super.call(this, {\n            whitespaceHeuristics: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'deleteWordPartLeft',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Backspace },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DeleteWordPartLeft.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n        var r = cursorWordOperations_1.WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);\n        if (r) {\n            return r;\n        }\n        return new range_1.Range(1, 1, 1, 1);\n    };\n    return DeleteWordPartLeft;\n}(wordOperations_1.DeleteWordCommand));\nexports.DeleteWordPartLeft = DeleteWordPartLeft;\nvar DeleteWordPartRight = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordPartRight, _super);\n    function DeleteWordPartRight() {\n        return _super.call(this, {\n            whitespaceHeuristics: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'deleteWordPartRight',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Delete },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DeleteWordPartRight.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n        var r = cursorWordOperations_1.WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);\n        if (r) {\n            return r;\n        }\n        var lineCount = model.getLineCount();\n        var maxColumn = model.getLineMaxColumn(lineCount);\n        return new range_1.Range(lineCount, maxColumn, lineCount, maxColumn);\n    };\n    return DeleteWordPartRight;\n}(wordOperations_1.DeleteWordCommand));\nexports.DeleteWordPartRight = DeleteWordPartRight;\nvar WordPartLeftCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(WordPartLeftCommand, _super);\n    function WordPartLeftCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WordPartLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n        return cursorWordOperations_1.WordPartOperations.moveWordPartLeft(wordSeparators, model, position);\n    };\n    return WordPartLeftCommand;\n}(wordOperations_1.MoveWordCommand));\nexports.WordPartLeftCommand = WordPartLeftCommand;\nvar CursorWordPartLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordPartLeft, _super);\n    function CursorWordPartLeft() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordPartLeft',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.LeftArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordPartLeft;\n}(WordPartLeftCommand));\nexports.CursorWordPartLeft = CursorWordPartLeft;\n// Register previous id for compatibility purposes\ncommands_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');\nvar CursorWordPartLeftSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordPartLeftSelect, _super);\n    function CursorWordPartLeftSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordPartLeftSelect',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordPartLeftSelect;\n}(WordPartLeftCommand));\nexports.CursorWordPartLeftSelect = CursorWordPartLeftSelect;\n// Register previous id for compatibility purposes\ncommands_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');\nvar WordPartRightCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(WordPartRightCommand, _super);\n    function WordPartRightCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WordPartRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n        return cursorWordOperations_1.WordPartOperations.moveWordPartRight(wordSeparators, model, position);\n    };\n    return WordPartRightCommand;\n}(wordOperations_1.MoveWordCommand));\nexports.WordPartRightCommand = WordPartRightCommand;\nvar CursorWordPartRight = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordPartRight, _super);\n    function CursorWordPartRight() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordPartRight',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.RightArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordPartRight;\n}(WordPartRightCommand));\nexports.CursorWordPartRight = CursorWordPartRight;\nvar CursorWordPartRightSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordPartRightSelect, _super);\n    function CursorWordPartRightSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordPartRightSelect',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordPartRightSelect;\n}(WordPartRightCommand));\nexports.CursorWordPartRightSelect = CursorWordPartRightSelect;\neditorExtensions_1.registerEditorCommand(new DeleteWordPartLeft());\neditorExtensions_1.registerEditorCommand(new DeleteWordPartRight());\neditorExtensions_1.registerEditorCommand(new CursorWordPartLeft());\neditorExtensions_1.registerEditorCommand(new CursorWordPartLeftSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordPartRight());\neditorExtensions_1.registerEditorCommand(new CursorWordPartRightSelect());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { WordNavigationType, WordPartOperations } from 'vs/editor/common/controller/cursorWordOperations';\nimport { WordCharacterClassifier } from 'vs/editor/common/controller/wordCharacterClassifier';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DeleteWordCommand, MoveWordCommand } from 'vs/editor/contrib/wordOperations/wordOperations';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nexport class DeleteWordPartLeft extends DeleteWordCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordPartLeft',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _delete(wordSeparators: WordCharacterClassifier, model: ITextModel, selection: Selection, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): Range {\n\t\tlet r = WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\treturn new Range(1, 1, 1, 1);\n\t}\n}\n\nexport class DeleteWordPartRight extends DeleteWordCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordPartRight',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.Delete },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _delete(wordSeparators: WordCharacterClassifier, model: ITextModel, selection: Selection, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): Range {\n\t\tlet r = WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\tconst lineCount = model.getLineCount();\n\t\tconst maxColumn = model.getLineMaxColumn(lineCount);\n\t\treturn new Range(lineCount, maxColumn, lineCount, maxColumn);\n\t}\n}\n\nexport class WordPartLeftCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType): Position {\n\t\treturn WordPartOperations.moveWordPartLeft(wordSeparators, model, position);\n\t}\n}\nexport class CursorWordPartLeft extends WordPartLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordPartLeft',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n// Register previous id for compatibility purposes\nCommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');\n\nexport class CursorWordPartLeftSelect extends WordPartLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordPartLeftSelect',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyMod.Shift | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n// Register previous id for compatibility purposes\nCommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');\n\nexport class WordPartRightCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType): Position {\n\t\treturn WordPartOperations.moveWordPartRight(wordSeparators, model, position);\n\t}\n}\nexport class CursorWordPartRight extends WordPartRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordPartRight',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\nexport class CursorWordPartRightSelect extends WordPartRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordPartRightSelect',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyMod.Shift | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\n\nregisterEditorCommand(new DeleteWordPartLeft());\nregisterEditorCommand(new DeleteWordPartRight());\nregisterEditorCommand(new CursorWordPartLeft());\nregisterEditorCommand(new CursorWordPartLeftSelect());\nregisterEditorCommand(new CursorWordPartRight());\nregisterEditorCommand(new CursorWordPartRightSelect());\n"]}]}