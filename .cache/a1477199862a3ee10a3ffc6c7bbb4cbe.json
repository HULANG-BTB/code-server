{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar network_1 = require(\"vs/base/common/network\");\nvar resources_1 = require(\"vs/base/common/resources\");\n/**\n * An editor model that just represents a resource that can be loaded.\n */\nvar BinaryEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(BinaryEditorModel, _super);\n    function BinaryEditorModel(resource, name, fileService) {\n        var _this = _super.call(this) || this;\n        _this.resource = resource;\n        _this.name = name;\n        _this.fileService = fileService;\n        _this.resource = resource;\n        _this.name = name;\n        if (resource.scheme === network_1.Schemas.data) {\n            var metadata = resources_1.DataUri.parseMetaData(resource);\n            if (metadata.has(resources_1.DataUri.META_DATA_SIZE)) {\n                _this.size = Number(metadata.get(resources_1.DataUri.META_DATA_SIZE));\n            }\n            _this.mime = metadata.get(resources_1.DataUri.META_DATA_MIME);\n        }\n        return _this;\n    }\n    /**\n     * The name of the binary resource.\n     */\n    BinaryEditorModel.prototype.getName = function () {\n        return this.name;\n    };\n    /**\n     * The resource of the binary resource.\n     */\n    BinaryEditorModel.prototype.getResource = function () {\n        return this.resource;\n    };\n    /**\n     * The size of the binary resource if known.\n     */\n    BinaryEditorModel.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * The mime of the binary resource if known.\n     */\n    BinaryEditorModel.prototype.getMime = function () {\n        return this.mime;\n    };\n    /**\n     * The etag of the binary resource if known.\n     */\n    BinaryEditorModel.prototype.getETag = function () {\n        return this.etag;\n    };\n    BinaryEditorModel.prototype.load = function () {\n        var _this = this;\n        // Make sure to resolve up to date stat for file resources\n        if (this.fileService.canHandleResource(this.resource)) {\n            return this.fileService.resolveFile(this.resource, { resolveMetadata: true }).then(function (stat) {\n                _this.etag = stat.etag;\n                if (typeof stat.size === 'number') {\n                    _this.size = stat.size;\n                }\n                return _this;\n            });\n        }\n        return Promise.resolve(this);\n    };\n    BinaryEditorModel = tslib_1.__decorate([\n        tslib_1.__param(2, files_1.IFileService)\n    ], BinaryEditorModel);\n    return BinaryEditorModel;\n}(editor_1.EditorModel));\nexports.BinaryEditorModel = BinaryEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qDAAyD;AAEzD,wDAA8D;AAC9D,kDAAiD;AACjD,sDAAmD;AAEnD;;GAEG;AACH;IAAuC,6CAAW;IAKjD,2BACkB,QAAa,EACb,IAAY,EACE,WAAyB;QAHzD,YAKC,iBAAO,SAaP;QAjBiB,cAAQ,GAAR,QAAQ,CAAK;QACb,UAAI,GAAJ,IAAI,CAAQ;QACE,iBAAW,GAAX,WAAW,CAAc;QAIxD,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;YACrC,IAAM,QAAQ,GAAG,mBAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,IAAI,QAAQ,CAAC,GAAG,CAAC,mBAAO,CAAC,cAAc,CAAC,EAAE;gBACzC,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAO,CAAC,cAAc,CAAC,CAAC,CAAC;aACzD;YAED,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAO,CAAC,cAAc,CAAE,CAAC;SAClD;;IACF,CAAC;IAED;;OAEG;IACH,mCAAO,GAAP;QACC,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,uCAAW,GAAX;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,mCAAO,GAAP;QACC,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,mCAAO,GAAP;QACC,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,mCAAO,GAAP;QACC,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED,gCAAI,GAAJ;QAAA,iBAeC;QAbA,0DAA0D;QAC1D,IAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACtD,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;gBACtF,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;oBAClC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBACtB;gBAED,OAAO,KAAI,CAAC;YACb,CAAC,CAAC,CAAC;SACH;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IA3EW,iBAAiB;QAQ3B,mBAAA,oBAAY,CAAA;OARF,iBAAiB,CA4E7B;IAAD,wBAAC;CAAA,AA5ED,CAAuC,oBAAW,GA4EjD;AA5EY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { Schemas } from 'vs/base/common/network';\nimport { DataUri } from 'vs/base/common/resources';\n\n/**\n * An editor model that just represents a resource that can be loaded.\n */\nexport class BinaryEditorModel extends EditorModel {\n\tprivate size: number;\n\tprivate etag: string | undefined;\n\tprivate readonly mime: string;\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tprivate readonly name: string,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.resource = resource;\n\t\tthis.name = name;\n\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tif (metadata.has(DataUri.META_DATA_SIZE)) {\n\t\t\t\tthis.size = Number(metadata.get(DataUri.META_DATA_SIZE));\n\t\t\t}\n\n\t\t\tthis.mime = metadata.get(DataUri.META_DATA_MIME)!;\n\t\t}\n\t}\n\n\t/**\n\t * The name of the binary resource.\n\t */\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * The resource of the binary resource.\n\t */\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\t/**\n\t * The size of the binary resource if known.\n\t */\n\tgetSize(): number {\n\t\treturn this.size;\n\t}\n\n\t/**\n\t * The mime of the binary resource if known.\n\t */\n\tgetMime(): string {\n\t\treturn this.mime;\n\t}\n\n\t/**\n\t * The etag of the binary resource if known.\n\t */\n\tgetETag(): string | undefined {\n\t\treturn this.etag;\n\t}\n\n\tload(): Promise<EditorModel> {\n\n\t\t// Make sure to resolve up to date stat for file resources\n\t\tif (this.fileService.canHandleResource(this.resource)) {\n\t\t\treturn this.fileService.resolveFile(this.resource, { resolveMetadata: true }).then(stat => {\n\t\t\t\tthis.etag = stat.etag;\n\t\t\t\tif (typeof stat.size === 'number') {\n\t\t\t\t\tthis.size = stat.size;\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(this);\n\t}\n}\n"]}]}