{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionService.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar path = require(\"vs/base/common/path\");\nvar electron_1 = require(\"electron\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar async_1 = require(\"vs/base/common/async\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar perf = require(\"vs/base/common/performance\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar extensionHost_1 = require(\"vs/workbench/services/extensions/electron-browser/extensionHost\");\nvar extensionDescriptionRegistry_1 = require(\"vs/workbench/services/extensions/node/extensionDescriptionRegistry\");\nvar rpcProtocol_1 = require(\"vs/workbench/services/extensions/node/rpcProtocol\");\nvar cachedExtensionScanner_1 = require(\"vs/workbench/services/extensions/electron-browser/cachedExtensionScanner\");\nvar extensionHostProcessManager_1 = require(\"vs/workbench/services/extensions/electron-browser/extensionHostProcessManager\");\nvar extensions_2 = require(\"vs/platform/extensions/common/extensions\");\nvar network_1 = require(\"vs/base/common/network\");\nvar extensions_3 = require(\"vs/platform/instantiation/common/extensions\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensionDevOptions_1 = require(\"vs/workbench/services/extensions/common/extensionDevOptions\");\nvar hasOwnProperty = Object.hasOwnProperty;\nvar NO_OP_VOID_PROMISE = Promise.resolve(undefined);\nextensionsRegistry_1.schema.properties.engines.properties.vscode.default = \"^\" + package_1.default.version;\nvar productAllowProposedApi = null;\nfunction allowProposedApiFromProduct(id) {\n    // create set if needed\n    if (!productAllowProposedApi) {\n        productAllowProposedApi = new Set();\n        if (arrays_1.isNonEmptyArray(product_1.default.extensionAllowedProposedApi)) {\n            product_1.default.extensionAllowedProposedApi.forEach(function (id) { return productAllowProposedApi.add(extensions_2.ExtensionIdentifier.toKey(id)); });\n        }\n    }\n    return productAllowProposedApi.has(extensions_2.ExtensionIdentifier.toKey(id));\n}\nvar DeltaExtensionsQueueItem = /** @class */ (function () {\n    function DeltaExtensionsQueueItem(toAdd, toRemove) {\n        this.toAdd = toAdd;\n        this.toRemove = toRemove;\n    }\n    return DeltaExtensionsQueueItem;\n}());\nvar ExtensionService = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionService, _super);\n    function ExtensionService(_instantiationService, _notificationService, _environmentService, _telemetryService, _extensionEnablementService, _extensionManagementService, _windowService, _lifecycleService, fileService) {\n        var _this = _super.call(this) || this;\n        _this._instantiationService = _instantiationService;\n        _this._notificationService = _notificationService;\n        _this._environmentService = _environmentService;\n        _this._telemetryService = _telemetryService;\n        _this._extensionEnablementService = _extensionEnablementService;\n        _this._extensionManagementService = _extensionManagementService;\n        _this._windowService = _windowService;\n        _this._lifecycleService = _lifecycleService;\n        _this._onDidRegisterExtensions = _this._register(new event_1.Emitter());\n        _this.onDidRegisterExtensions = _this._onDidRegisterExtensions.event;\n        _this._onDidChangeExtensionsStatus = _this._register(new event_1.Emitter());\n        _this.onDidChangeExtensionsStatus = _this._onDidChangeExtensionsStatus.event;\n        _this._onDidChangeExtensions = _this._register(new event_1.Emitter());\n        _this.onDidChangeExtensions = _this._onDidChangeExtensions.event;\n        _this._onWillActivateByEvent = _this._register(new event_1.Emitter());\n        _this.onWillActivateByEvent = _this._onWillActivateByEvent.event;\n        _this._onDidChangeResponsiveChange = _this._register(new event_1.Emitter());\n        _this.onDidChangeResponsiveChange = _this._onDidChangeResponsiveChange.event;\n        _this.retry = require('vs/../../../../packages/vscode/src/workbench').workbench.retry.register('Extension Host', function () { return _this.startExtensionHost(); });\n        _this._inHandleDeltaExtensions = false;\n        // help the file service to activate providers by activating extensions by file system event\n        _this._register(fileService.onWillActivateFileSystemProvider(function (e) {\n            e.join(_this.activateByEvent(\"onFileSystem:\" + e.scheme));\n        }));\n        _this._extensionHostLogsLocation = uri_1.URI.file(path.join(_this._environmentService.logsPath, \"exthost\" + _this._windowService.getCurrentWindowId()));\n        _this._registry = new extensionDescriptionRegistry_1.ExtensionDescriptionRegistry([]);\n        _this._installedExtensionsReady = new async_1.Barrier();\n        _this._isDev = !_this._environmentService.isBuilt || _this._environmentService.isExtensionDevelopment;\n        _this._extensionsMessages = new Map();\n        _this._allRequestedActivateEvents = Object.create(null);\n        _this._extensionScanner = _this._instantiationService.createInstance(cachedExtensionScanner_1.CachedExtensionScanner);\n        _this._deltaExtensionsQueue = [];\n        _this._extensionHostProcessManagers = [];\n        _this._extensionHostActiveExtensions = new Map();\n        _this._extensionHostProcessActivationTimes = new Map();\n        _this._extensionHostExtensionRuntimeErrors = new Map();\n        _this._startDelayed(_this._lifecycleService);\n        if (_this._extensionEnablementService.allUserExtensionsDisabled) {\n            _this._notificationService.prompt(notification_1.Severity.Info, nls.localize('extensionsDisabled', \"All installed extensions are temporarily disabled. Reload the window to return to the previous state.\"), [{\n                    label: nls.localize('Reload', \"Reload\"),\n                    run: function () {\n                        _this._windowService.reloadWindow();\n                    }\n                }]);\n        }\n        _this._register(_this._extensionEnablementService.onEnablementChanged(function (extensions) {\n            var toAdd = [];\n            var toRemove = [];\n            for (var _i = 0, extensions_4 = extensions; _i < extensions_4.length; _i++) {\n                var extension = extensions_4[_i];\n                if (_this._extensionEnablementService.isEnabled(extension)) {\n                    // an extension has been enabled\n                    toAdd.push(extension);\n                }\n                else {\n                    // an extension has been disabled\n                    toRemove.push(extension.identifier.id);\n                }\n            }\n            _this._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n        }));\n        _this._register(_this._extensionManagementService.onDidInstallExtension(function (event) {\n            if (event.local) {\n                if (_this._extensionEnablementService.isEnabled(event.local)) {\n                    // an extension has been installed\n                    _this._handleDeltaExtensions(new DeltaExtensionsQueueItem([event.local], []));\n                }\n            }\n        }));\n        _this._register(_this._extensionManagementService.onDidUninstallExtension(function (event) {\n            if (!event.error) {\n                // an extension has been uninstalled\n                _this._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n            }\n        }));\n        return _this;\n    }\n    ExtensionService.prototype._handleDeltaExtensions = function (item) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var item_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._deltaExtensionsQueue.push(item);\n                        if (this._inHandleDeltaExtensions) {\n                            // Let the current item finish, the new one will be picked up\n                            return [2 /*return*/];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        if (!(this._deltaExtensionsQueue.length > 0)) return [3 /*break*/, 6];\n                        item_1 = this._deltaExtensionsQueue.shift();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, , 4, 5]);\n                        this._inHandleDeltaExtensions = true;\n                        return [4 /*yield*/, this._deltaExtensions(item_1.toAdd, item_1.toRemove)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        this._inHandleDeltaExtensions = false;\n                        return [7 /*endfinally*/];\n                    case 5: return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionService.prototype._deltaExtensions = function (_toAdd, _toRemove) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var toAdd, i, len, extension, existingExtensionDescription, extensionDescription, toRemove, i, len, extensionId, extensionDescription, result, i;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._windowService.getConfiguration().remoteAuthority) {\n                            return [2 /*return*/];\n                        }\n                        toAdd = [];\n                        i = 0, len = _toAdd.length;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < len)) return [3 /*break*/, 4];\n                        extension = _toAdd[i];\n                        if (extension.location.scheme !== network_1.Schemas.file) {\n                            return [3 /*break*/, 3];\n                        }\n                        existingExtensionDescription = this._registry.getExtensionDescription(extension.identifier.id);\n                        if (existingExtensionDescription) {\n                            // this extension is already running (most likely at a different version)\n                            return [3 /*break*/, 3];\n                        }\n                        return [4 /*yield*/, this._extensionScanner.scanSingleExtension(extension.location.fsPath, extension.type === extensions_2.ExtensionType.System, this.createLogger())];\n                    case 2:\n                        extensionDescription = _a.sent();\n                        if (!extensionDescription) {\n                            // could not scan extension...\n                            return [3 /*break*/, 3];\n                        }\n                        toAdd.push(extensionDescription);\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        toRemove = [];\n                        for (i = 0, len = _toRemove.length; i < len; i++) {\n                            extensionId = _toRemove[i];\n                            extensionDescription = this._registry.getExtensionDescription(extensionId);\n                            if (!extensionDescription) {\n                                // ignore disabling/uninstalling an extension which is not running\n                                continue;\n                            }\n                            if (!this._canRemoveExtension(extensionDescription)) {\n                                // uses non-dynamic extension point or is activated\n                                continue;\n                            }\n                            toRemove.push(extensionDescription);\n                        }\n                        if (toAdd.length === 0 && toRemove.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        result = this._registry.deltaExtensions(toAdd, toRemove.map(function (e) { return e.identifier; }));\n                        toRemove = toRemove.concat(result.removedDueToLooping);\n                        if (result.removedDueToLooping.length > 0) {\n                            this._logOrShowMessage(notification_1.Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(function (e) { return \"'\" + e.identifier.value + \"'\"; }).join(', ')));\n                        }\n                        // Update extension points\n                        this._rehandleExtensionPoints([].concat(toAdd).concat(toRemove));\n                        if (!(this._extensionHostProcessManagers.length > 0)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._extensionHostProcessManagers[0].deltaExtensions(toAdd, toRemove.map(function (e) { return e.identifier; }))];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        this._onDidChangeExtensions.fire(undefined);\n                        for (i = 0; i < toAdd.length; i++) {\n                            this._activateAddedExtensionIfNeeded(toAdd[i]);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionService.prototype._rehandleExtensionPoints = function (extensionDescriptions) {\n        var _this = this;\n        var affectedExtensionPoints = Object.create(null);\n        for (var _i = 0, extensionDescriptions_1 = extensionDescriptions; _i < extensionDescriptions_1.length; _i++) {\n            var extensionDescription = extensionDescriptions_1[_i];\n            if (extensionDescription.contributes) {\n                for (var extPointName in extensionDescription.contributes) {\n                    if (hasOwnProperty.call(extensionDescription.contributes, extPointName)) {\n                        affectedExtensionPoints[extPointName] = true;\n                    }\n                }\n            }\n        }\n        var messageHandler = function (msg) { return _this._handleExtensionPointMessage(msg); };\n        var availableExtensions = this._registry.getAllExtensionDescriptions();\n        var extensionPoints = extensionsRegistry_1.ExtensionsRegistry.getExtensionPoints();\n        for (var i = 0, len = extensionPoints.length; i < len; i++) {\n            if (affectedExtensionPoints[extensionPoints[i].name]) {\n                ExtensionService._handleExtensionPoint(extensionPoints[i], availableExtensions, messageHandler);\n            }\n        }\n    };\n    ExtensionService.prototype.canAddExtension = function (extension) {\n        if (this._windowService.getConfiguration().remoteAuthority) {\n            return false;\n        }\n        if (extension.extensionLocation.scheme !== network_1.Schemas.file) {\n            return false;\n        }\n        var extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n        if (extensionDescription) {\n            // ignore adding an extension which is already running and cannot be removed\n            if (!this._canRemoveExtension(extensionDescription)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    ExtensionService.prototype.canRemoveExtension = function (extension) {\n        if (this._windowService.getConfiguration().remoteAuthority) {\n            return false;\n        }\n        if (extension.extensionLocation.scheme !== network_1.Schemas.file) {\n            return false;\n        }\n        var extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n        if (!extensionDescription) {\n            // ignore removing an extension which is not running\n            return false;\n        }\n        return this._canRemoveExtension(extensionDescription);\n    };\n    ExtensionService.prototype._canRemoveExtension = function (extension) {\n        if (this._extensionHostActiveExtensions.has(extensions_2.ExtensionIdentifier.toKey(extension.identifier))) {\n            // Extension is running, cannot remove it safely\n            return false;\n        }\n        return true;\n    };\n    ExtensionService.prototype._activateAddedExtensionIfNeeded = function (extensionDescription) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var shouldActivate, shouldActivateReason, _i, _a, activationEvent;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        shouldActivate = false;\n                        shouldActivateReason = null;\n                        if (Array.isArray(extensionDescription.activationEvents)) {\n                            for (_i = 0, _a = extensionDescription.activationEvents; _i < _a.length; _i++) {\n                                activationEvent = _a[_i];\n                                // TODO@joao: there's no easy way to contribute this\n                                if (activationEvent === 'onUri') {\n                                    activationEvent = \"onUri:\" + extensions_2.ExtensionIdentifier.toKey(extensionDescription.identifier);\n                                }\n                                if (this._allRequestedActivateEvents[activationEvent]) {\n                                    // This activation event was fired before the extension was added\n                                    shouldActivate = true;\n                                    shouldActivateReason = activationEvent;\n                                    break;\n                                }\n                                if (activationEvent === '*') {\n                                    shouldActivate = true;\n                                    shouldActivateReason = activationEvent;\n                                    break;\n                                }\n                                if (/^workspaceContains/.test(activationEvent)) {\n                                    // do not trigger a search, just activate in this case...\n                                    shouldActivate = true;\n                                    shouldActivateReason = activationEvent;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!shouldActivate) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(this._extensionHostProcessManagers.map(function (extHostManager) { return extHostManager.activate(extensionDescription.identifier, shouldActivateReason); })).then(function () { })];\n                    case 1:\n                        _b.sent();\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionService.prototype._startDelayed = function (lifecycleService) {\n        var _this = this;\n        // delay extension host creation and extension scanning\n        // until the workbench is running. we cannot defer the\n        // extension host more (LifecyclePhase.Restored) because\n        // some editors require the extension host to restore\n        // and this would result in a deadlock\n        // see https://github.com/Microsoft/vscode/issues/41322\n        lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n            // reschedule to ensure this runs after restoring viewlets, panels, and editors\n            async_1.runWhenIdle(function () {\n                perf.mark('willLoadExtensions');\n                _this._startExtensionHostProcess(true, []);\n                _this._scanAndHandleExtensions();\n                _this.whenInstalledExtensionsRegistered().then(function () { return perf.mark('didLoadExtensions'); });\n            }, 50 /*max delay*/);\n        });\n    };\n    ExtensionService.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._onWillActivateByEvent.dispose();\n        this._onDidChangeResponsiveChange.dispose();\n    };\n    ExtensionService.prototype.restartExtensionHost = function () {\n        this._stopExtensionHostProcess();\n        this._startExtensionHostProcess(false, Object.keys(this._allRequestedActivateEvents));\n    };\n    ExtensionService.prototype.startExtensionHost = function () {\n        this._startExtensionHostProcess(false, Object.keys(this._allRequestedActivateEvents));\n    };\n    ExtensionService.prototype.stopExtensionHost = function () {\n        this._stopExtensionHostProcess();\n    };\n    ExtensionService.prototype._stopExtensionHostProcess = function () {\n        var previouslyActivatedExtensionIds = [];\n        this._extensionHostActiveExtensions.forEach(function (value) {\n            previouslyActivatedExtensionIds.push(value);\n        });\n        for (var _i = 0, _a = this._extensionHostProcessManagers; _i < _a.length; _i++) {\n            var manager = _a[_i];\n            manager.dispose();\n        }\n        this._extensionHostProcessManagers = [];\n        this._extensionHostActiveExtensions = new Map();\n        this._extensionHostProcessActivationTimes = new Map();\n        this._extensionHostExtensionRuntimeErrors = new Map();\n        if (previouslyActivatedExtensionIds.length > 0) {\n            this._onDidChangeExtensionsStatus.fire(previouslyActivatedExtensionIds);\n        }\n    };\n    ExtensionService.prototype._startExtensionHostProcess = function (isInitialStart, initialActivationEvents) {\n        var _this = this;\n        this._stopExtensionHostProcess();\n        var autoStart;\n        var extensions;\n        if (isInitialStart) {\n            autoStart = false;\n            extensions = this._extensionScanner.scannedExtensions;\n        }\n        else {\n            // restart case\n            autoStart = true;\n            extensions = this.getExtensions();\n        }\n        var extHostProcessWorker = this._instantiationService.createInstance(extensionHost_1.ExtensionHostProcessWorker, autoStart, extensions, this._extensionHostLogsLocation);\n        extHostProcessWorker.start().then(function () { return _this.retry.recover(); });\n        var extHostProcessManager = this._instantiationService.createInstance(extensionHostProcessManager_1.ExtensionHostProcessManager, extHostProcessWorker, null, initialActivationEvents);\n        extHostProcessManager.onDidCrash(function (_a) {\n            var code = _a[0], signal = _a[1];\n            return _this._onExtensionHostCrashed(code, signal);\n        });\n        extHostProcessManager.onDidChangeResponsiveState(function (responsiveState) { _this._onDidChangeResponsiveChange.fire({ target: extHostProcessManager, isResponsive: responsiveState === rpcProtocol_1.ResponsiveState.Responsive }); });\n        this._extensionHostProcessManagers.push(extHostProcessManager);\n    };\n    ExtensionService.prototype._onExtensionHostCrashed = function (code, signal) {\n        var _this = this;\n        return this.retry.run();\n        console.error('Extension host terminated unexpectedly. Code: ', code, ' Signal: ', signal);\n        this._stopExtensionHostProcess();\n        if (code === 55) {\n            this._notificationService.prompt(notification_1.Severity.Error, nls.localize('extensionHostProcess.versionMismatchCrash', \"Extension host cannot start: version mismatch.\"), [{\n                    label: nls.localize('relaunch', \"Relaunch VS Code\"),\n                    run: function () {\n                        _this._instantiationService.invokeFunction(function (accessor) {\n                            var windowsService = accessor.get(windows_1.IWindowsService);\n                            windowsService.relaunch({});\n                        });\n                    }\n                }]);\n            return;\n        }\n        var message = nls.localize('extensionHostProcess.crash', \"Extension host terminated unexpectedly.\");\n        if (code === 87) {\n            message = nls.localize('extensionHostProcess.unresponsiveCrash', \"Extension host terminated because it was not responsive.\");\n        }\n        this._notificationService.prompt(notification_1.Severity.Error, message, [{\n                label: nls.localize('devTools', \"Open Developer Tools\"),\n                run: function () { return _this._windowService.openDevTools(); }\n            },\n            {\n                label: nls.localize('restart', \"Restart Extension Host\"),\n                run: function () { return _this._startExtensionHostProcess(false, Object.keys(_this._allRequestedActivateEvents)); }\n            }]);\n    };\n    // ---- begin IExtensionService\n    ExtensionService.prototype.activateByEvent = function (activationEvent) {\n        var _this = this;\n        if (this._installedExtensionsReady.isOpen()) {\n            // Extensions have been scanned and interpreted\n            // Record the fact that this activationEvent was requested (in case of a restart)\n            this._allRequestedActivateEvents[activationEvent] = true;\n            if (!this._registry.containsActivationEvent(activationEvent)) {\n                // There is no extension that is interested in this activation event\n                return NO_OP_VOID_PROMISE;\n            }\n            return this._activateByEvent(activationEvent);\n        }\n        else {\n            // Extensions have not been scanned yet.\n            // Record the fact that this activationEvent was requested (in case of a restart)\n            this._allRequestedActivateEvents[activationEvent] = true;\n            return this._installedExtensionsReady.wait().then(function () { return _this._activateByEvent(activationEvent); });\n        }\n    };\n    ExtensionService.prototype._activateByEvent = function (activationEvent) {\n        var result = Promise.all(this._extensionHostProcessManagers.map(function (extHostManager) { return extHostManager.activateByEvent(activationEvent); })).then(function () { });\n        this._onWillActivateByEvent.fire({\n            event: activationEvent,\n            activation: result\n        });\n        return result;\n    };\n    ExtensionService.prototype.whenInstalledExtensionsRegistered = function () {\n        return this._installedExtensionsReady.wait();\n    };\n    ExtensionService.prototype.getExtensions = function () {\n        var _this = this;\n        return this._installedExtensionsReady.wait().then(function () {\n            return _this._registry.getAllExtensionDescriptions();\n        });\n    };\n    ExtensionService.prototype.getExtension = function (id) {\n        var _this = this;\n        return this._installedExtensionsReady.wait().then(function () {\n            return _this._registry.getExtensionDescription(id);\n        });\n    };\n    ExtensionService.prototype.readExtensionPointContributions = function (extPoint) {\n        var _this = this;\n        return this._installedExtensionsReady.wait().then(function () {\n            var availableExtensions = _this._registry.getAllExtensionDescriptions();\n            var result = [], resultLen = 0;\n            for (var i = 0, len = availableExtensions.length; i < len; i++) {\n                var desc = availableExtensions[i];\n                if (desc.contributes && hasOwnProperty.call(desc.contributes, extPoint.name)) {\n                    result[resultLen++] = new extensions_1.ExtensionPointContribution(desc, desc.contributes[extPoint.name]);\n                }\n            }\n            return result;\n        });\n    };\n    ExtensionService.prototype.getExtensionsStatus = function () {\n        var result = Object.create(null);\n        if (this._registry) {\n            var extensions = this._registry.getAllExtensionDescriptions();\n            for (var _i = 0, extensions_5 = extensions; _i < extensions_5.length; _i++) {\n                var extension = extensions_5[_i];\n                var extensionKey = extensions_2.ExtensionIdentifier.toKey(extension.identifier);\n                result[extension.identifier.value] = {\n                    messages: this._extensionsMessages.get(extensionKey) || [],\n                    activationTimes: this._extensionHostProcessActivationTimes.get(extensionKey),\n                    runtimeErrors: this._extensionHostExtensionRuntimeErrors.get(extensionKey) || [],\n                };\n            }\n        }\n        return result;\n    };\n    ExtensionService.prototype.canProfileExtensionHost = function () {\n        for (var i = 0, len = this._extensionHostProcessManagers.length; i < len; i++) {\n            var extHostProcessManager = this._extensionHostProcessManagers[i];\n            if (extHostProcessManager.canProfileExtensionHost()) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ExtensionService.prototype.startExtensionHostProfile = function () {\n        for (var i = 0, len = this._extensionHostProcessManagers.length; i < len; i++) {\n            var extHostProcessManager = this._extensionHostProcessManagers[i];\n            if (extHostProcessManager.canProfileExtensionHost()) {\n                return extHostProcessManager.startExtensionHostProfile();\n            }\n        }\n        throw new Error('Extension host not running or no inspect port available');\n    };\n    ExtensionService.prototype.getInspectPort = function () {\n        if (this._extensionHostProcessManagers.length > 0) {\n            return this._extensionHostProcessManagers[0].getInspectPort();\n        }\n        return 0;\n    };\n    // ---- end IExtensionService\n    // --- impl\n    ExtensionService.prototype.createLogger = function () {\n        var _this = this;\n        return new cachedExtensionScanner_1.Logger(function (severity, source, message) {\n            if (_this._isDev && source) {\n                _this._logOrShowMessage(severity, \"[\" + source + \"]: \" + message);\n            }\n            else {\n                _this._logOrShowMessage(severity, message);\n            }\n        });\n    };\n    ExtensionService.prototype._scanAndHandleExtensions = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extensionHost, extensions, enabledExtensions;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._extensionScanner.startScanningExtensions(this.createLogger());\n                        extensionHost = this._extensionHostProcessManagers[0];\n                        return [4 /*yield*/, this._extensionScanner.scannedExtensions];\n                    case 1:\n                        extensions = _a.sent();\n                        return [4 /*yield*/, this._getRuntimeExtensions(extensions)];\n                    case 2:\n                        enabledExtensions = _a.sent();\n                        this._handleExtensionPoints(enabledExtensions);\n                        extensionHost.start(enabledExtensions.map(function (extension) { return extension.identifier; }).filter(function (id) { return _this._registry.containsExtension(id); }));\n                        this._releaseBarrier();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionService.prototype._handleExtensionPoints = function (allExtensions) {\n        var _this = this;\n        var result = this._registry.deltaExtensions(allExtensions, []);\n        if (result.removedDueToLooping.length > 0) {\n            this._logOrShowMessage(notification_1.Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(function (e) { return \"'\" + e.identifier.value + \"'\"; }).join(', ')));\n        }\n        var availableExtensions = this._registry.getAllExtensionDescriptions();\n        var extensionPoints = extensionsRegistry_1.ExtensionsRegistry.getExtensionPoints();\n        var messageHandler = function (msg) { return _this._handleExtensionPointMessage(msg); };\n        for (var i = 0, len = extensionPoints.length; i < len; i++) {\n            ExtensionService._handleExtensionPoint(extensionPoints[i], availableExtensions, messageHandler);\n        }\n    };\n    ExtensionService.prototype._releaseBarrier = function () {\n        perf.mark('extensionHostReady');\n        this._installedExtensionsReady.open();\n        this._onDidRegisterExtensions.fire(undefined);\n        this._onDidChangeExtensionsStatus.fire(this._registry.getAllExtensionDescriptions().map(function (e) { return e.identifier; }));\n    };\n    ExtensionService.prototype._getRuntimeExtensions = function (allExtensions) {\n        var _this = this;\n        return this._extensionEnablementService.getDisabledExtensions()\n            .then(function (disabledExtensions) {\n            var runtimeExtensions = [];\n            var extensionsToDisable = [];\n            var userMigratedSystemExtensions = [{ id: extensionManagementUtil_1.BetterMergeId }];\n            var enableProposedApiFor = _this._environmentService.args['enable-proposed-api'] || [];\n            var notFound = function (id) { return nls.localize('notFound', \"Extension \\`{0}\\` cannot use PROPOSED API as it cannot be found\", id); };\n            if (enableProposedApiFor.length) {\n                var allProposed = (enableProposedApiFor instanceof Array ? enableProposedApiFor : [enableProposedApiFor]);\n                allProposed.forEach(function (id) {\n                    if (!allExtensions.some(function (description) { return extensions_2.ExtensionIdentifier.equals(description.identifier, id); })) {\n                        console.error(notFound(id));\n                    }\n                });\n                // Make enabled proposed API be lowercase for case insensitive comparison\n                if (Array.isArray(enableProposedApiFor)) {\n                    enableProposedApiFor = enableProposedApiFor.map(function (id) { return id.toLowerCase(); });\n                }\n                else {\n                    enableProposedApiFor = enableProposedApiFor.toLowerCase();\n                }\n            }\n            var enableProposedApiForAll = !_this._environmentService.isBuilt ||\n                (!!_this._environmentService.extensionDevelopmentLocationURI && product_1.default.nameLong !== 'Visual Studio Code') ||\n                (enableProposedApiFor.length === 0 && 'enable-proposed-api' in _this._environmentService.args);\n            var _loop_1 = function (extension) {\n                var isExtensionUnderDevelopment = (_this._environmentService.isExtensionDevelopment\n                    && _this._environmentService.extensionDevelopmentLocationURI\n                    && resources_1.isEqualOrParent(extension.extensionLocation, _this._environmentService.extensionDevelopmentLocationURI));\n                // Do not disable extensions under development\n                if (!isExtensionUnderDevelopment) {\n                    if (disabledExtensions.some(function (disabled) { return extensionManagementUtil_1.areSameExtensions(disabled, { id: extension.identifier.value }); })) {\n                        return \"continue\";\n                    }\n                }\n                if (!extension.isBuiltin) {\n                    // Check if the extension is changed to system extension\n                    var userMigratedSystemExtension = userMigratedSystemExtensions.filter(function (userMigratedSystemExtension) { return extensionManagementUtil_1.areSameExtensions(userMigratedSystemExtension, { id: extension.identifier.value }); })[0];\n                    if (userMigratedSystemExtension) {\n                        extensionsToDisable.push(extension);\n                        return \"continue\";\n                    }\n                }\n                runtimeExtensions.push(_this._updateEnableProposedApi(extension, enableProposedApiForAll, enableProposedApiFor));\n            };\n            for (var _i = 0, allExtensions_1 = allExtensions; _i < allExtensions_1.length; _i++) {\n                var extension = allExtensions_1[_i];\n                _loop_1(extension);\n            }\n            _this._telemetryService.publicLog('extensionsScanned', {\n                totalCount: runtimeExtensions.length,\n                disabledCount: disabledExtensions.length\n            });\n            if (extensionsToDisable.length) {\n                return _this._extensionEnablementService.setEnablement(extensionsToDisable.map(function (e) { return extensions_1.toExtension(e); }), extensionManagement_1.EnablementState.Disabled)\n                    .then(function () { return runtimeExtensions; });\n            }\n            else {\n                return runtimeExtensions;\n            }\n        });\n    };\n    ExtensionService.prototype._updateEnableProposedApi = function (extension, enableProposedApiForAll, enableProposedApiFor) {\n        if (allowProposedApiFromProduct(extension.identifier)) {\n            // fast lane -> proposed api is available to all extensions\n            // that are listed in product.json-files\n            extension.enableProposedApi = true;\n        }\n        else if (extension.enableProposedApi && !extension.isBuiltin) {\n            if (!enableProposedApiForAll &&\n                enableProposedApiFor.indexOf(extension.identifier.value.toLowerCase()) < 0) {\n                extension.enableProposedApi = false;\n                console.error(\"Extension '\" + extension.identifier.value + \" cannot use PROPOSED API (must started out of dev or enabled via --enable-proposed-api)\");\n            }\n            else {\n                // proposed api is available when developing or when an extension was explicitly\n                // spelled out via a command line argument\n                console.warn(\"Extension '\" + extension.identifier.value + \"' uses PROPOSED API which is subject to change and removal without notice.\");\n            }\n        }\n        return extension;\n    };\n    ExtensionService.prototype._handleExtensionPointMessage = function (msg) {\n        var extensionKey = extensions_2.ExtensionIdentifier.toKey(msg.extensionId);\n        if (!this._extensionsMessages.has(extensionKey)) {\n            this._extensionsMessages.set(extensionKey, []);\n        }\n        this._extensionsMessages.get(extensionKey).push(msg);\n        var extension = this._registry.getExtensionDescription(msg.extensionId);\n        var strMsg = \"[\" + msg.extensionId.value + \"]: \" + msg.message;\n        if (extension && extension.isUnderDevelopment) {\n            // This message is about the extension currently being developed\n            this._showMessageToUser(msg.type, strMsg);\n        }\n        else {\n            this._logMessageInConsole(msg.type, strMsg);\n        }\n        if (!this._isDev && msg.extensionId) {\n            var type = msg.type, extensionId = msg.extensionId, extensionPointId = msg.extensionPointId, message = msg.message;\n            /* __GDPR__\n                \"extensionsMessage\" : {\n                    \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                    \"extensionId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"extensionPointId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"message\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                }\n            */\n            this._telemetryService.publicLog('extensionsMessage', {\n                type: type, extensionId: extensionId.value, extensionPointId: extensionPointId, message: message\n            });\n        }\n    };\n    ExtensionService._handleExtensionPoint = function (extensionPoint, availableExtensions, messageHandler) {\n        var users = [], usersLen = 0;\n        for (var i = 0, len = availableExtensions.length; i < len; i++) {\n            var desc = availableExtensions[i];\n            if (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {\n                users[usersLen++] = {\n                    description: desc,\n                    value: desc.contributes[extensionPoint.name],\n                    collector: new extensionsRegistry_1.ExtensionMessageCollector(messageHandler, desc, extensionPoint.name)\n                };\n            }\n        }\n        extensionPoint.acceptUsers(users);\n    };\n    ExtensionService.prototype._showMessageToUser = function (severity, msg) {\n        if (severity === notification_1.Severity.Error || severity === notification_1.Severity.Warning) {\n            this._notificationService.notify({ severity: severity, message: msg });\n        }\n        else {\n            this._logMessageInConsole(severity, msg);\n        }\n    };\n    ExtensionService.prototype._logMessageInConsole = function (severity, msg) {\n        if (severity === notification_1.Severity.Error) {\n            console.error(msg);\n        }\n        else if (severity === notification_1.Severity.Warning) {\n            console.warn(msg);\n        }\n        else {\n            console.log(msg);\n        }\n    };\n    // -- called by extension host\n    ExtensionService.prototype._logOrShowMessage = function (severity, msg) {\n        if (this._isDev) {\n            this._showMessageToUser(severity, msg);\n        }\n        else {\n            this._logMessageInConsole(severity, msg);\n        }\n    };\n    ExtensionService.prototype._activateById = function (extensionId, activationEvent) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var results, activated;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this._extensionHostProcessManagers.map(function (manager) { return manager.activate(extensionId, activationEvent); }))];\n                    case 1:\n                        results = _a.sent();\n                        activated = results.some(function (e) { return e; });\n                        if (!activated) {\n                            throw new Error(\"Unknown extension \" + extensionId.value);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionService.prototype._onWillActivateExtension = function (extensionId) {\n        this._extensionHostActiveExtensions.set(extensions_2.ExtensionIdentifier.toKey(extensionId), extensionId);\n    };\n    ExtensionService.prototype._onDidActivateExtension = function (extensionId, startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent) {\n        this._extensionHostProcessActivationTimes.set(extensions_2.ExtensionIdentifier.toKey(extensionId), new extensions_1.ActivationTimes(startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent));\n        this._onDidChangeExtensionsStatus.fire([extensionId]);\n    };\n    ExtensionService.prototype._onExtensionRuntimeError = function (extensionId, err) {\n        var extensionKey = extensions_2.ExtensionIdentifier.toKey(extensionId);\n        if (!this._extensionHostExtensionRuntimeErrors.has(extensionKey)) {\n            this._extensionHostExtensionRuntimeErrors.set(extensionKey, []);\n        }\n        this._extensionHostExtensionRuntimeErrors.get(extensionKey).push(err);\n        this._onDidChangeExtensionsStatus.fire([extensionId]);\n    };\n    ExtensionService.prototype._onExtensionHostExit = function (code) {\n        // Expected development extension termination: When the extension host goes down we also shutdown the window\n        var devOpts = extensionDevOptions_1.parseExtensionDevOptions(this._environmentService);\n        if (!devOpts.isExtensionDevTestFromCli) {\n            this._windowService.closeWindow();\n        }\n        // When CLI testing make sure to exit with proper exit code\n        else {\n            electron_1.ipcRenderer.send('vscode:exit', code);\n        }\n    };\n    ExtensionService = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, telemetry_1.ITelemetryService),\n        tslib_1.__param(4, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(5, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(6, windows_1.IWindowService),\n        tslib_1.__param(7, lifecycle_2.ILifecycleService),\n        tslib_1.__param(8, files_1.IFileService)\n    ], ExtensionService);\n    return ExtensionService;\n}(lifecycle_1.Disposable));\nexports.ExtensionService = ExtensionService;\nextensions_3.registerSingleton(extensions_1.IExtensionService, ExtensionService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport { ipcRenderer as ipc } from 'electron';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { Barrier, runWhenIdle } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as perf from 'vs/base/common/performance';\nimport { isEqualOrParent } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { EnablementState, IExtensionEnablementService, IExtensionIdentifier, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { BetterMergeId, areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport pkg from 'vs/platform/product/node/package';\nimport product from 'vs/platform/product/node/product';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWindowService, IWindowsService } from 'vs/platform/windows/common/windows';\nimport { ActivationTimes, ExtensionPointContribution, IExtensionService, IExtensionsStatus, IMessage, ProfileSession, IWillActivateEvent, IResponsiveStateChangeEvent, toExtension } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionMessageCollector, ExtensionPoint, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser, schema } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ExtensionHostProcessWorker } from 'vs/workbench/services/extensions/electron-browser/extensionHost';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/node/extensionDescriptionRegistry';\nimport { ResponsiveState } from 'vs/workbench/services/extensions/node/rpcProtocol';\nimport { CachedExtensionScanner, Logger } from 'vs/workbench/services/extensions/electron-browser/cachedExtensionScanner';\nimport { ExtensionHostProcessManager } from 'vs/workbench/services/extensions/electron-browser/extensionHostProcessManager';\nimport { ExtensionIdentifier, IExtension, ExtensionType, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Schemas } from 'vs/base/common/network';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nschema.properties.engines.properties.vscode.default = `^${pkg.version}`;\n\nlet productAllowProposedApi: Set<string> | null = null;\nfunction allowProposedApiFromProduct(id: ExtensionIdentifier): boolean {\n\t// create set if needed\n\tif (!productAllowProposedApi) {\n\t\tproductAllowProposedApi = new Set<string>();\n\t\tif (isNonEmptyArray(product.extensionAllowedProposedApi)) {\n\t\t\tproduct.extensionAllowedProposedApi.forEach((id) => productAllowProposedApi!.add(ExtensionIdentifier.toKey(id)));\n\t\t}\n\t}\n\treturn productAllowProposedApi.has(ExtensionIdentifier.toKey(id));\n}\n\nclass DeltaExtensionsQueueItem {\n\tconstructor(\n\t\tpublic readonly toAdd: IExtension[],\n\t\tpublic readonly toRemove: string[]\n\t) { }\n}\n\nexport class ExtensionService extends Disposable implements IExtensionService {\n\n\tpublic _serviceBrand: any;\n\n\tprivate readonly _extensionHostLogsLocation: URI;\n\tprivate readonly _registry: ExtensionDescriptionRegistry;\n\tprivate readonly _installedExtensionsReady: Barrier;\n\tprivate readonly _isDev: boolean;\n\tprivate readonly _extensionsMessages: Map<string, IMessage[]>;\n\tprivate _allRequestedActivateEvents: { [activationEvent: string]: boolean; };\n\tprivate readonly _extensionScanner: CachedExtensionScanner;\n\tprivate _deltaExtensionsQueue: DeltaExtensionsQueueItem[];\n\n\tprivate readonly _onDidRegisterExtensions: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidRegisterExtensions = this._onDidRegisterExtensions.event;\n\n\tprivate readonly _onDidChangeExtensionsStatus: Emitter<ExtensionIdentifier[]> = this._register(new Emitter<ExtensionIdentifier[]>());\n\tpublic readonly onDidChangeExtensionsStatus: Event<ExtensionIdentifier[]> = this._onDidChangeExtensionsStatus.event;\n\n\tprivate readonly _onDidChangeExtensions: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeExtensions: Event<void> = this._onDidChangeExtensions.event;\n\n\tprivate readonly _onWillActivateByEvent = this._register(new Emitter<IWillActivateEvent>());\n\tpublic readonly onWillActivateByEvent: Event<IWillActivateEvent> = this._onWillActivateByEvent.event;\n\n\tprivate readonly _onDidChangeResponsiveChange = this._register(new Emitter<IResponsiveStateChangeEvent>());\n\tpublic readonly onDidChangeResponsiveChange: Event<IResponsiveStateChangeEvent> = this._onDidChangeResponsiveChange.event;\n\n\t// --- Members used per extension host process\n\tprivate _extensionHostProcessManagers: ExtensionHostProcessManager[];\n\tprivate _extensionHostActiveExtensions: Map<string, ExtensionIdentifier>;\n\tprivate _extensionHostProcessActivationTimes: Map<string, ActivationTimes>;\n\tprivate _extensionHostExtensionRuntimeErrors: Map<string, Error[]>;\n\n\tprivate readonly retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Extension Host', () => this.startExtensionHost());\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IExtensionEnablementService private readonly _extensionEnablementService: IExtensionEnablementService,\n\t\t@IExtensionManagementService private readonly _extensionManagementService: IExtensionManagementService,\n\t\t@IWindowService private readonly _windowService: IWindowService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\t// help the file service to activate providers by activating extensions by file system event\n\t\tthis._register(fileService.onWillActivateFileSystemProvider(e => {\n\t\t\te.join(this.activateByEvent(`onFileSystem:${e.scheme}`));\n\t\t}));\n\n\t\tthis._extensionHostLogsLocation = URI.file(path.join(this._environmentService.logsPath, `exthost${this._windowService.getCurrentWindowId()}`));\n\t\tthis._registry = new ExtensionDescriptionRegistry([]);\n\t\tthis._installedExtensionsReady = new Barrier();\n\t\tthis._isDev = !this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment;\n\t\tthis._extensionsMessages = new Map<string, IMessage[]>();\n\t\tthis._allRequestedActivateEvents = Object.create(null);\n\t\tthis._extensionScanner = this._instantiationService.createInstance(CachedExtensionScanner);\n\t\tthis._deltaExtensionsQueue = [];\n\n\t\tthis._extensionHostProcessManagers = [];\n\t\tthis._extensionHostActiveExtensions = new Map<string, ExtensionIdentifier>();\n\t\tthis._extensionHostProcessActivationTimes = new Map<string, ActivationTimes>();\n\t\tthis._extensionHostExtensionRuntimeErrors = new Map<string, Error[]>();\n\n\t\tthis._startDelayed(this._lifecycleService);\n\n\t\tif (this._extensionEnablementService.allUserExtensionsDisabled) {\n\t\t\tthis._notificationService.prompt(Severity.Info, nls.localize('extensionsDisabled', \"All installed extensions are temporarily disabled. Reload the window to return to the previous state.\"), [{\n\t\t\t\tlabel: nls.localize('Reload', \"Reload\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._windowService.reloadWindow();\n\t\t\t\t}\n\t\t\t}]);\n\t\t}\n\n\t\tthis._register(this._extensionEnablementService.onEnablementChanged((extensions) => {\n\t\t\tlet toAdd: IExtension[] = [];\n\t\t\tlet toRemove: string[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (this._extensionEnablementService.isEnabled(extension)) {\n\t\t\t\t\t// an extension has been enabled\n\t\t\t\t\ttoAdd.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\t// an extension has been disabled\n\t\t\t\t\ttoRemove.push(extension.identifier.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidInstallExtension((event) => {\n\t\t\tif (event.local) {\n\t\t\t\tif (this._extensionEnablementService.isEnabled(event.local)) {\n\t\t\t\t\t// an extension has been installed\n\t\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([event.local], []));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidUninstallExtension((event) => {\n\t\t\tif (!event.error) {\n\t\t\t\t// an extension has been uninstalled\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _inHandleDeltaExtensions = false;\n\tprivate async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {\n\t\tthis._deltaExtensionsQueue.push(item);\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\t// Let the current item finish, the new one will be picked up\n\t\t\treturn;\n\t\t}\n\n\t\twhile (this._deltaExtensionsQueue.length > 0) {\n\t\t\tconst item = this._deltaExtensionsQueue.shift()!;\n\t\t\ttry {\n\t\t\t\tthis._inHandleDeltaExtensions = true;\n\t\t\t\tawait this._deltaExtensions(item.toAdd, item.toRemove);\n\t\t\t} finally {\n\t\t\t\tthis._inHandleDeltaExtensions = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _deltaExtensions(_toAdd: IExtension[], _toRemove: string[]): Promise<void> {\n\t\tif (this._windowService.getConfiguration().remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet toAdd: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toAdd.length; i < len; i++) {\n\t\t\tconst extension = _toAdd[i];\n\n\t\t\tif (extension.location.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst existingExtensionDescription = this._registry.getExtensionDescription(extension.identifier.id);\n\t\t\tif (existingExtensionDescription) {\n\t\t\t\t// this extension is already running (most likely at a different version)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst extensionDescription = await this._extensionScanner.scanSingleExtension(extension.location.fsPath, extension.type === ExtensionType.System, this.createLogger());\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// could not scan extension...\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoAdd.push(extensionDescription);\n\t\t}\n\n\t\tlet toRemove: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toRemove.length; i < len; i++) {\n\t\t\tconst extensionId = _toRemove[i];\n\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// ignore disabling/uninstalling an extension which is not running\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this._canRemoveExtension(extensionDescription)) {\n\t\t\t\t// uses non-dynamic extension point or is activated\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoRemove.push(extensionDescription);\n\t\t}\n\n\t\tif (toAdd.length === 0 && toRemove.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the local registry\n\t\tconst result = this._registry.deltaExtensions(toAdd, toRemove.map(e => e.identifier));\n\t\ttoRemove = toRemove.concat(result.removedDueToLooping);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._logOrShowMessage(Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));\n\t\t}\n\n\t\t// Update extension points\n\t\tthis._rehandleExtensionPoints((<IExtensionDescription[]>[]).concat(toAdd).concat(toRemove));\n\n\t\t// Update the extension host\n\t\tif (this._extensionHostProcessManagers.length > 0) {\n\t\t\tawait this._extensionHostProcessManagers[0].deltaExtensions(toAdd, toRemove.map(e => e.identifier));\n\t\t}\n\n\t\tthis._onDidChangeExtensions.fire(undefined);\n\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tthis._activateAddedExtensionIfNeeded(toAdd[i]);\n\t\t}\n\t}\n\n\tprivate _rehandleExtensionPoints(extensionDescriptions: IExtensionDescription[]): void {\n\t\tconst affectedExtensionPoints: { [extPointName: string]: boolean; } = Object.create(null);\n\t\tfor (let extensionDescription of extensionDescriptions) {\n\t\t\tif (extensionDescription.contributes) {\n\t\t\t\tfor (let extPointName in extensionDescription.contributes) {\n\t\t\t\t\tif (hasOwnProperty.call(extensionDescription.contributes, extPointName)) {\n\t\t\t\t\t\taffectedExtensionPoints[extPointName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst messageHandler = (msg: IMessage) => this._handleExtensionPointMessage(msg);\n\n\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\t\tconst extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\t\tfor (let i = 0, len = extensionPoints.length; i < len; i++) {\n\t\t\tif (affectedExtensionPoints[extensionPoints[i].name]) {\n\t\t\t\tExtensionService._handleExtensionPoint(extensionPoints[i], availableExtensions, messageHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic canAddExtension(extension: IExtensionDescription): boolean {\n\t\tif (this._windowService.getConfiguration().remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (extension.extensionLocation.scheme !== Schemas.file) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (extensionDescription) {\n\t\t\t// ignore adding an extension which is already running and cannot be removed\n\t\t\tif (!this._canRemoveExtension(extensionDescription)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tif (this._windowService.getConfiguration().remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (extension.extensionLocation.scheme !== Schemas.file) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (!extensionDescription) {\n\t\t\t// ignore removing an extension which is not running\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._canRemoveExtension(extensionDescription);\n\t}\n\n\tprivate _canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tif (this._extensionHostActiveExtensions.has(ExtensionIdentifier.toKey(extension.identifier))) {\n\t\t\t// Extension is running, cannot remove it safely\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _activateAddedExtensionIfNeeded(extensionDescription: IExtensionDescription): Promise<void> {\n\n\t\tlet shouldActivate = false;\n\t\tlet shouldActivateReason: string | null = null;\n\t\tif (Array.isArray(extensionDescription.activationEvents)) {\n\t\t\tfor (let activationEvent of extensionDescription.activationEvents) {\n\t\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t\t}\n\n\t\t\t\tif (this._allRequestedActivateEvents[activationEvent]) {\n\t\t\t\t\t// This activation event was fired before the extension was added\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (activationEvent === '*') {\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^workspaceContains/.test(activationEvent)) {\n\t\t\t\t\t// do not trigger a search, just activate in this case...\n\t\t\t\t\tshouldActivate = true;\n\t\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldActivate) {\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostProcessManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, shouldActivateReason!))\n\t\t\t).then(() => { });\n\t\t}\n\t}\n\n\tprivate _startDelayed(lifecycleService: ILifecycleService): void {\n\t\t// delay extension host creation and extension scanning\n\t\t// until the workbench is running. we cannot defer the\n\t\t// extension host more (LifecyclePhase.Restored) because\n\t\t// some editors require the extension host to restore\n\t\t// and this would result in a deadlock\n\t\t// see https://github.com/Microsoft/vscode/issues/41322\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t// reschedule to ensure this runs after restoring viewlets, panels, and editors\n\t\t\trunWhenIdle(() => {\n\t\t\t\tperf.mark('willLoadExtensions');\n\t\t\t\tthis._startExtensionHostProcess(true, []);\n\t\t\t\tthis._scanAndHandleExtensions();\n\t\t\t\tthis.whenInstalledExtensionsRegistered().then(() => perf.mark('didLoadExtensions'));\n\t\t\t}, 50 /*max delay*/);\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._onWillActivateByEvent.dispose();\n\t\tthis._onDidChangeResponsiveChange.dispose();\n\t}\n\n\tpublic restartExtensionHost(): void {\n\t\tthis._stopExtensionHostProcess();\n\t\tthis._startExtensionHostProcess(false, Object.keys(this._allRequestedActivateEvents));\n\t}\n\n\tpublic startExtensionHost(): void {\n\t\tthis._startExtensionHostProcess(false, Object.keys(this._allRequestedActivateEvents));\n\t}\n\n\tpublic stopExtensionHost(): void {\n\t\tthis._stopExtensionHostProcess();\n\t}\n\n\tprivate _stopExtensionHostProcess(): void {\n\t\tlet previouslyActivatedExtensionIds: ExtensionIdentifier[] = [];\n\t\tthis._extensionHostActiveExtensions.forEach((value) => {\n\t\t\tpreviouslyActivatedExtensionIds.push(value);\n\t\t});\n\n\t\tfor (const manager of this._extensionHostProcessManagers) {\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostProcessManagers = [];\n\t\tthis._extensionHostActiveExtensions = new Map<string, ExtensionIdentifier>();\n\t\tthis._extensionHostProcessActivationTimes = new Map<string, ActivationTimes>();\n\t\tthis._extensionHostExtensionRuntimeErrors = new Map<string, Error[]>();\n\n\t\tif (previouslyActivatedExtensionIds.length > 0) {\n\t\t\tthis._onDidChangeExtensionsStatus.fire(previouslyActivatedExtensionIds);\n\t\t}\n\t}\n\n\tprivate _startExtensionHostProcess(isInitialStart: boolean, initialActivationEvents: string[]): void {\n\t\tthis._stopExtensionHostProcess();\n\n\t\tlet autoStart: boolean;\n\t\tlet extensions: Promise<IExtensionDescription[]>;\n\t\tif (isInitialStart) {\n\t\t\tautoStart = false;\n\t\t\textensions = this._extensionScanner.scannedExtensions;\n\t\t} else {\n\t\t\t// restart case\n\t\t\tautoStart = true;\n\t\t\textensions = this.getExtensions();\n\t\t}\n\n\t\tconst extHostProcessWorker = this._instantiationService.createInstance(ExtensionHostProcessWorker, autoStart, extensions, this._extensionHostLogsLocation);\n\t\textHostProcessWorker.start()!.then(() => this.retry.recover());\n\t\tconst extHostProcessManager = this._instantiationService.createInstance(ExtensionHostProcessManager, extHostProcessWorker, null, initialActivationEvents);\n\t\textHostProcessManager.onDidCrash(([code, signal]) => this._onExtensionHostCrashed(code, signal));\n\t\textHostProcessManager.onDidChangeResponsiveState((responsiveState) => { this._onDidChangeResponsiveChange.fire({ target: extHostProcessManager, isResponsive: responsiveState === ResponsiveState.Responsive }); });\n\t\tthis._extensionHostProcessManagers.push(extHostProcessManager);\n\t}\n\n\tprivate _onExtensionHostCrashed(code: number, signal: string | null): void {\n\t\treturn this.retry.run();\n\t\tconsole.error('Extension host terminated unexpectedly. Code: ', code, ' Signal: ', signal);\n\t\tthis._stopExtensionHostProcess();\n\n\t\tif (code === 55) {\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize('extensionHostProcess.versionMismatchCrash', \"Extension host cannot start: version mismatch.\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('relaunch', \"Relaunch VS Code\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._instantiationService.invokeFunction((accessor) => {\n\t\t\t\t\t\t\tconst windowsService = accessor.get(IWindowsService);\n\t\t\t\t\t\t\twindowsService.relaunch({});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tlet message = nls.localize('extensionHostProcess.crash', \"Extension host terminated unexpectedly.\");\n\t\tif (code === 87) {\n\t\t\tmessage = nls.localize('extensionHostProcess.unresponsiveCrash', \"Extension host terminated because it was not responsive.\");\n\t\t}\n\n\t\tthis._notificationService.prompt(Severity.Error, message,\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('devTools', \"Open Developer Tools\"),\n\t\t\t\trun: () => this._windowService.openDevTools()\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize('restart', \"Restart Extension Host\"),\n\t\t\t\trun: () => this._startExtensionHostProcess(false, Object.keys(this._allRequestedActivateEvents))\n\t\t\t}]\n\t\t);\n\t}\n\n\t// ---- begin IExtensionService\n\n\tpublic activateByEvent(activationEvent: string): Promise<void> {\n\t\tif (this._installedExtensionsReady.isOpen()) {\n\t\t\t// Extensions have been scanned and interpreted\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents[activationEvent] = true;\n\n\t\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t\t// There is no extension that is interested in this activation event\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\n\t\t\treturn this._activateByEvent(activationEvent);\n\t\t} else {\n\t\t\t// Extensions have not been scanned yet.\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents[activationEvent] = true;\n\n\t\t\treturn this._installedExtensionsReady.wait().then(() => this._activateByEvent(activationEvent));\n\t\t}\n\t}\n\n\tprivate _activateByEvent(activationEvent: string): Promise<void> {\n\t\tconst result = Promise.all(\n\t\t\tthis._extensionHostProcessManagers.map(extHostManager => extHostManager.activateByEvent(activationEvent))\n\t\t).then(() => { });\n\t\tthis._onWillActivateByEvent.fire({\n\t\t\tevent: activationEvent,\n\t\t\tactivation: result\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic whenInstalledExtensionsRegistered(): Promise<boolean> {\n\t\treturn this._installedExtensionsReady.wait();\n\t}\n\n\tpublic getExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getAllExtensionDescriptions();\n\t\t});\n\t}\n\n\tpublic getExtension(id: string): Promise<IExtensionDescription | undefined> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getExtensionDescription(id);\n\t\t});\n\t}\n\n\tpublic readExtensionPointContributions<T>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\tlet availableExtensions = this._registry.getAllExtensionDescriptions();\n\n\t\t\tlet result: ExtensionPointContribution<T>[] = [], resultLen = 0;\n\t\t\tfor (let i = 0, len = availableExtensions.length; i < len; i++) {\n\t\t\t\tlet desc = availableExtensions[i];\n\n\t\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extPoint.name)) {\n\t\t\t\t\tresult[resultLen++] = new ExtensionPointContribution<T>(desc, desc.contributes[extPoint.name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus; } {\n\t\tlet result: { [id: string]: IExtensionsStatus; } = Object.create(null);\n\t\tif (this._registry) {\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions();\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(extension.identifier);\n\t\t\t\tresult[extension.identifier.value] = {\n\t\t\t\t\tmessages: this._extensionsMessages.get(extensionKey) || [],\n\t\t\t\t\tactivationTimes: this._extensionHostProcessActivationTimes.get(extensionKey),\n\t\t\t\t\truntimeErrors: this._extensionHostExtensionRuntimeErrors.get(extensionKey) || [],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic canProfileExtensionHost(): boolean {\n\t\tfor (let i = 0, len = this._extensionHostProcessManagers.length; i < len; i++) {\n\t\t\tconst extHostProcessManager = this._extensionHostProcessManagers[i];\n\t\t\tif (extHostProcessManager.canProfileExtensionHost()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic startExtensionHostProfile(): Promise<ProfileSession> {\n\t\tfor (let i = 0, len = this._extensionHostProcessManagers.length; i < len; i++) {\n\t\t\tconst extHostProcessManager = this._extensionHostProcessManagers[i];\n\t\t\tif (extHostProcessManager.canProfileExtensionHost()) {\n\t\t\t\treturn extHostProcessManager.startExtensionHostProfile();\n\t\t\t}\n\t\t}\n\t\tthrow new Error('Extension host not running or no inspect port available');\n\t}\n\n\tpublic getInspectPort(): number {\n\t\tif (this._extensionHostProcessManagers.length > 0) {\n\t\t\treturn this._extensionHostProcessManagers[0].getInspectPort();\n\t\t}\n\t\treturn 0;\n\t}\n\n\t// ---- end IExtensionService\n\n\t// --- impl\n\n\tprivate createLogger(): Logger {\n\t\treturn new Logger((severity, source, message) => {\n\t\t\tif (this._isDev && source) {\n\t\t\t\tthis._logOrShowMessage(severity, `[${source}]: ${message}`);\n\t\t\t} else {\n\t\t\t\tthis._logOrShowMessage(severity, message);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _scanAndHandleExtensions(): Promise<void> {\n\t\tthis._extensionScanner.startScanningExtensions(this.createLogger());\n\n\t\tconst extensionHost = this._extensionHostProcessManagers[0];\n\t\tconst extensions = await this._extensionScanner.scannedExtensions;\n\t\tconst enabledExtensions = await this._getRuntimeExtensions(extensions);\n\n\t\tthis._handleExtensionPoints(enabledExtensions);\n\t\textensionHost.start(enabledExtensions.map(extension => extension.identifier).filter(id => this._registry.containsExtension(id)));\n\t\tthis._releaseBarrier();\n\t}\n\n\tprivate _handleExtensionPoints(allExtensions: IExtensionDescription[]): void {\n\t\tconst result = this._registry.deltaExtensions(allExtensions, []);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._logOrShowMessage(Severity.Error, nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));\n\t\t}\n\n\t\tlet availableExtensions = this._registry.getAllExtensionDescriptions();\n\t\tlet extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\n\t\tlet messageHandler = (msg: IMessage) => this._handleExtensionPointMessage(msg);\n\n\t\tfor (let i = 0, len = extensionPoints.length; i < len; i++) {\n\t\t\tExtensionService._handleExtensionPoint(extensionPoints[i], availableExtensions, messageHandler);\n\t\t}\n\t}\n\n\tprivate _releaseBarrier(): void {\n\t\tperf.mark('extensionHostReady');\n\t\tthis._installedExtensionsReady.open();\n\t\tthis._onDidRegisterExtensions.fire(undefined);\n\t\tthis._onDidChangeExtensionsStatus.fire(this._registry.getAllExtensionDescriptions().map(e => e.identifier));\n\t}\n\n\tprivate _getRuntimeExtensions(allExtensions: IExtensionDescription[]): Promise<IExtensionDescription[]> {\n\t\treturn this._extensionEnablementService.getDisabledExtensions()\n\t\t\t.then(disabledExtensions => {\n\n\t\t\t\tconst runtimeExtensions: IExtensionDescription[] = [];\n\t\t\t\tconst extensionsToDisable: IExtensionDescription[] = [];\n\t\t\t\tconst userMigratedSystemExtensions: IExtensionIdentifier[] = [{ id: BetterMergeId }];\n\n\t\t\t\tlet enableProposedApiFor: string | string[] = this._environmentService.args['enable-proposed-api'] || [];\n\n\t\t\t\tconst notFound = (id: string) => nls.localize('notFound', \"Extension \\`{0}\\` cannot use PROPOSED API as it cannot be found\", id);\n\n\t\t\t\tif (enableProposedApiFor.length) {\n\t\t\t\t\tlet allProposed = (enableProposedApiFor instanceof Array ? enableProposedApiFor : [enableProposedApiFor]);\n\t\t\t\t\tallProposed.forEach(id => {\n\t\t\t\t\t\tif (!allExtensions.some(description => ExtensionIdentifier.equals(description.identifier, id))) {\n\t\t\t\t\t\t\tconsole.error(notFound(id));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// Make enabled proposed API be lowercase for case insensitive comparison\n\t\t\t\t\tif (Array.isArray(enableProposedApiFor)) {\n\t\t\t\t\t\tenableProposedApiFor = enableProposedApiFor.map(id => id.toLowerCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenableProposedApiFor = enableProposedApiFor.toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst enableProposedApiForAll = !this._environmentService.isBuilt ||\n\t\t\t\t\t(!!this._environmentService.extensionDevelopmentLocationURI && product.nameLong !== 'Visual Studio Code') ||\n\t\t\t\t\t(enableProposedApiFor.length === 0 && 'enable-proposed-api' in this._environmentService.args);\n\n\t\t\t\tfor (const extension of allExtensions) {\n\t\t\t\t\tconst isExtensionUnderDevelopment = (\n\t\t\t\t\t\tthis._environmentService.isExtensionDevelopment\n\t\t\t\t\t\t&& this._environmentService.extensionDevelopmentLocationURI\n\t\t\t\t\t\t&& isEqualOrParent(extension.extensionLocation, this._environmentService.extensionDevelopmentLocationURI)\n\t\t\t\t\t);\n\t\t\t\t\t// Do not disable extensions under development\n\t\t\t\t\tif (!isExtensionUnderDevelopment) {\n\t\t\t\t\t\tif (disabledExtensions.some(disabled => areSameExtensions(disabled, { id: extension.identifier.value }))) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!extension.isBuiltin) {\n\t\t\t\t\t\t// Check if the extension is changed to system extension\n\t\t\t\t\t\tconst userMigratedSystemExtension = userMigratedSystemExtensions.filter(userMigratedSystemExtension => areSameExtensions(userMigratedSystemExtension, { id: extension.identifier.value }))[0];\n\t\t\t\t\t\tif (userMigratedSystemExtension) {\n\t\t\t\t\t\t\textensionsToDisable.push(extension);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\truntimeExtensions.push(this._updateEnableProposedApi(extension, enableProposedApiForAll, enableProposedApiFor));\n\t\t\t\t}\n\n\t\t\t\tthis._telemetryService.publicLog('extensionsScanned', {\n\t\t\t\t\ttotalCount: runtimeExtensions.length,\n\t\t\t\t\tdisabledCount: disabledExtensions.length\n\t\t\t\t});\n\n\t\t\t\tif (extensionsToDisable.length) {\n\t\t\t\t\treturn this._extensionEnablementService.setEnablement(extensionsToDisable.map(e => toExtension(e)), EnablementState.Disabled)\n\t\t\t\t\t\t.then(() => runtimeExtensions);\n\t\t\t\t} else {\n\t\t\t\t\treturn runtimeExtensions;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _updateEnableProposedApi(extension: IExtensionDescription, enableProposedApiForAll: boolean, enableProposedApiFor: string | string[]): IExtensionDescription {\n\t\tif (allowProposedApiFromProduct(extension.identifier)) {\n\t\t\t// fast lane -> proposed api is available to all extensions\n\t\t\t// that are listed in product.json-files\n\t\t\textension.enableProposedApi = true;\n\n\t\t} else if (extension.enableProposedApi && !extension.isBuiltin) {\n\t\t\tif (\n\t\t\t\t!enableProposedApiForAll &&\n\t\t\t\tenableProposedApiFor.indexOf(extension.identifier.value.toLowerCase()) < 0\n\t\t\t) {\n\t\t\t\textension.enableProposedApi = false;\n\t\t\t\tconsole.error(`Extension '${extension.identifier.value} cannot use PROPOSED API (must started out of dev or enabled via --enable-proposed-api)`);\n\n\t\t\t} else {\n\t\t\t\t// proposed api is available when developing or when an extension was explicitly\n\t\t\t\t// spelled out via a command line argument\n\t\t\t\tconsole.warn(`Extension '${extension.identifier.value}' uses PROPOSED API which is subject to change and removal without notice.`);\n\t\t\t}\n\t\t}\n\t\treturn extension;\n\t}\n\n\tprivate _handleExtensionPointMessage(msg: IMessage) {\n\t\tconst extensionKey = ExtensionIdentifier.toKey(msg.extensionId);\n\n\t\tif (!this._extensionsMessages.has(extensionKey)) {\n\t\t\tthis._extensionsMessages.set(extensionKey, []);\n\t\t}\n\t\tthis._extensionsMessages.get(extensionKey)!.push(msg);\n\n\t\tconst extension = this._registry.getExtensionDescription(msg.extensionId);\n\t\tconst strMsg = `[${msg.extensionId.value}]: ${msg.message}`;\n\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t// This message is about the extension currently being developed\n\t\t\tthis._showMessageToUser(msg.type, strMsg);\n\t\t} else {\n\t\t\tthis._logMessageInConsole(msg.type, strMsg);\n\t\t}\n\n\t\tif (!this._isDev && msg.extensionId) {\n\t\t\tconst { type, extensionId, extensionPointId, message } = msg;\n\t\t\t/* __GDPR__\n\t\t\t\t\"extensionsMessage\" : {\n\t\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\"extensionId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"extensionPointId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"message\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('extensionsMessage', {\n\t\t\t\ttype, extensionId: extensionId.value, extensionPointId, message\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static _handleExtensionPoint<T>(extensionPoint: ExtensionPoint<T>, availableExtensions: IExtensionDescription[], messageHandler: (msg: IMessage) => void): void {\n\t\tlet users: IExtensionPointUser<T>[] = [], usersLen = 0;\n\t\tfor (let i = 0, len = availableExtensions.length; i < len; i++) {\n\t\t\tlet desc = availableExtensions[i];\n\n\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {\n\t\t\t\tusers[usersLen++] = {\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[extensionPoint.name],\n\t\t\t\t\tcollector: new ExtensionMessageCollector(messageHandler, desc, extensionPoint.name)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\textensionPoint.acceptUsers(users);\n\t}\n\n\tprivate _showMessageToUser(severity: Severity, msg: string): void {\n\t\tif (severity === Severity.Error || severity === Severity.Warning) {\n\t\t\tthis._notificationService.notify({ severity, message: msg });\n\t\t} else {\n\t\t\tthis._logMessageInConsole(severity, msg);\n\t\t}\n\t}\n\n\tprivate _logMessageInConsole(severity: Severity, msg: string): void {\n\t\tif (severity === Severity.Error) {\n\t\t\tconsole.error(msg);\n\t\t} else if (severity === Severity.Warning) {\n\t\t\tconsole.warn(msg);\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\t// -- called by extension host\n\n\tpublic _logOrShowMessage(severity: Severity, msg: string): void {\n\t\tif (this._isDev) {\n\t\t\tthis._showMessageToUser(severity, msg);\n\t\t} else {\n\t\t\tthis._logMessageInConsole(severity, msg);\n\t\t}\n\t}\n\n\tpublic async _activateById(extensionId: ExtensionIdentifier, activationEvent: string): Promise<void> {\n\t\tconst results = await Promise.all(\n\t\t\tthis._extensionHostProcessManagers.map(manager => manager.activate(extensionId, activationEvent))\n\t\t);\n\t\tconst activated = results.some(e => e);\n\t\tif (!activated) {\n\t\t\tthrow new Error(`Unknown extension ${extensionId.value}`);\n\t\t}\n\t}\n\n\tpublic _onWillActivateExtension(extensionId: ExtensionIdentifier): void {\n\t\tthis._extensionHostActiveExtensions.set(ExtensionIdentifier.toKey(extensionId), extensionId);\n\t}\n\n\tpublic _onDidActivateExtension(extensionId: ExtensionIdentifier, startup: boolean, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationEvent: string): void {\n\t\tthis._extensionHostProcessActivationTimes.set(ExtensionIdentifier.toKey(extensionId), new ActivationTimes(startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent));\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tpublic _onExtensionRuntimeError(extensionId: ExtensionIdentifier, err: Error): void {\n\t\tconst extensionKey = ExtensionIdentifier.toKey(extensionId);\n\t\tif (!this._extensionHostExtensionRuntimeErrors.has(extensionKey)) {\n\t\t\tthis._extensionHostExtensionRuntimeErrors.set(extensionKey, []);\n\t\t}\n\t\tthis._extensionHostExtensionRuntimeErrors.get(extensionKey)!.push(err);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tpublic _onExtensionHostExit(code: number): void {\n\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tif (!devOpts.isExtensionDevTestFromCli) {\n\t\t\tthis._windowService.closeWindow();\n\t\t}\n\n\t\t// When CLI testing make sure to exit with proper exit code\n\t\telse {\n\t\t\tipc.send('vscode:exit', code);\n\t\t}\n\t}\n}\n\nregisterSingleton(IExtensionService, ExtensionService);"]}]}