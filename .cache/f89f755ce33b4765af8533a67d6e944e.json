{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar baseResolvedKeybinding_1 = require(\"vs/platform/keybinding/common/baseResolvedKeybinding\");\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nvar USLayoutResolvedKeybinding = /** @class */ (function (_super) {\n    tslib_1.__extends(USLayoutResolvedKeybinding, _super);\n    function USLayoutResolvedKeybinding(actual, os) {\n        return _super.call(this, os, actual.parts) || this;\n    }\n    USLayoutResolvedKeybinding.prototype._keyCodeToUILabel = function (keyCode) {\n        if (this._os === platform_1.OperatingSystem.Macintosh) {\n            switch (keyCode) {\n                case keyCodes_1.KeyCode.LeftArrow:\n                    return '←';\n                case keyCodes_1.KeyCode.UpArrow:\n                    return '↑';\n                case keyCodes_1.KeyCode.RightArrow:\n                    return '→';\n                case keyCodes_1.KeyCode.DownArrow:\n                    return '↓';\n            }\n        }\n        return keyCodes_1.KeyCodeUtils.toString(keyCode);\n    };\n    USLayoutResolvedKeybinding.prototype._getLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._keyCodeToUILabel(keybinding.keyCode);\n    };\n    USLayoutResolvedKeybinding.prototype._getAriaLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n    };\n    USLayoutResolvedKeybinding.prototype._keyCodeToElectronAccelerator = function (keyCode) {\n        if (keyCode >= keyCodes_1.KeyCode.NUMPAD_0 && keyCode <= keyCodes_1.KeyCode.NUMPAD_DIVIDE) {\n            // Electron cannot handle numpad keys\n            return null;\n        }\n        switch (keyCode) {\n            case keyCodes_1.KeyCode.UpArrow:\n                return 'Up';\n            case keyCodes_1.KeyCode.DownArrow:\n                return 'Down';\n            case keyCodes_1.KeyCode.LeftArrow:\n                return 'Left';\n            case keyCodes_1.KeyCode.RightArrow:\n                return 'Right';\n        }\n        return keyCodes_1.KeyCodeUtils.toString(keyCode);\n    };\n    USLayoutResolvedKeybinding.prototype._getElectronAccelerator = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return null;\n        }\n        return this._keyCodeToElectronAccelerator(keybinding.keyCode);\n    };\n    USLayoutResolvedKeybinding.prototype._getUserSettingsLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        var result = keyCodes_1.KeyCodeUtils.toUserSettingsUS(keybinding.keyCode);\n        return (result ? result.toLowerCase() : result);\n    };\n    USLayoutResolvedKeybinding.prototype._isWYSIWYG = function () {\n        return true;\n    };\n    USLayoutResolvedKeybinding.prototype._getDispatchPart = function (keybinding) {\n        return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n    };\n    USLayoutResolvedKeybinding.getDispatchStr = function (keybinding) {\n        if (keybinding.isModifierKey()) {\n            return null;\n        }\n        var result = '';\n        if (keybinding.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (keybinding.shiftKey) {\n            result += 'shift+';\n        }\n        if (keybinding.altKey) {\n            result += 'alt+';\n        }\n        if (keybinding.metaKey) {\n            result += 'meta+';\n        }\n        result += keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n        return result;\n    };\n    return USLayoutResolvedKeybinding;\n}(baseResolvedKeybinding_1.BaseResolvedKeybinding));\nexports.USLayoutResolvedKeybinding = USLayoutResolvedKeybinding;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyCodeUtils, Keybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { BaseResolvedKeybinding } from 'vs/platform/keybinding/common/baseResolvedKeybinding';\n\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding<SimpleKeybinding> {\n\n\tconstructor(actual: Keybinding, os: OperatingSystem) {\n\t\tsuper(os, actual.parts);\n\t}\n\n\tprivate _keyCodeToUILabel(keyCode: KeyCode): string {\n\t\tif (this._os === OperatingSystem.Macintosh) {\n\t\t\tswitch (keyCode) {\n\t\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\t\treturn '←';\n\t\t\t\tcase KeyCode.UpArrow:\n\t\t\t\t\treturn '↑';\n\t\t\t\tcase KeyCode.RightArrow:\n\t\t\t\t\treturn '→';\n\t\t\t\tcase KeyCode.DownArrow:\n\t\t\t\t\treturn '↓';\n\t\t\t}\n\t\t}\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprotected _getLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._keyCodeToUILabel(keybinding.keyCode);\n\t}\n\n\tprotected _getAriaLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn KeyCodeUtils.toString(keybinding.keyCode);\n\t}\n\n\tprivate _keyCodeToElectronAccelerator(keyCode: KeyCode): string | null {\n\t\tif (keyCode >= KeyCode.NUMPAD_0 && keyCode <= KeyCode.NUMPAD_DIVIDE) {\n\t\t\t// Electron cannot handle numpad keys\n\t\t\treturn null;\n\t\t}\n\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn 'Up';\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn 'Down';\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn 'Left';\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn 'Right';\n\t\t}\n\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._keyCodeToElectronAccelerator(keybinding.keyCode);\n\t}\n\n\tprotected _getUserSettingsLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tconst result = KeyCodeUtils.toUserSettingsUS(keybinding.keyCode);\n\t\treturn (result ? result.toLowerCase() : result);\n\t}\n\n\tprotected _isWYSIWYG(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected _getDispatchPart(keybinding: SimpleKeybinding): string | null {\n\t\treturn USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n\t}\n\n\tpublic static getDispatchStr(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (keybinding.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (keybinding.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (keybinding.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (keybinding.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += KeyCodeUtils.toString(keybinding.keyCode);\n\n\t\treturn result;\n\t}\n}\n"]}]}