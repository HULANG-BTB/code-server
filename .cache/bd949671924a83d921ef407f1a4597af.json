{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar statusbar_1 = require(\"vs/workbench/browser/parts/statusbar/statusbar\");\nvar statusbar_2 = require(\"vs/platform/statusbar/common/statusbar\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar runtimeExtensionsEditor_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar ports_1 = require(\"vs/base/node/ports\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar runtimeExtensionsInput_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\");\nvar extensions_2 = require(\"vs/platform/extensions/common/extensions\");\nvar ExtensionHostProfileService = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionHostProfileService, _super);\n    function ExtensionHostProfileService(_extensionService, _editorService, _instantiationService, _windowsService, _dialogService) {\n        var _this = _super.call(this) || this;\n        _this._extensionService = _extensionService;\n        _this._editorService = _editorService;\n        _this._instantiationService = _instantiationService;\n        _this._windowsService = _windowsService;\n        _this._dialogService = _dialogService;\n        _this._onDidChangeState = _this._register(new event_1.Emitter());\n        _this.onDidChangeState = _this._onDidChangeState.event;\n        _this._onDidChangeLastProfile = _this._register(new event_1.Emitter());\n        _this.onDidChangeLastProfile = _this._onDidChangeLastProfile.event;\n        _this._unresponsiveProfiles = new Map();\n        _this._profile = null;\n        _this._profileSession = null;\n        _this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n        return _this;\n    }\n    Object.defineProperty(ExtensionHostProfileService.prototype, \"state\", {\n        get: function () { return this._state; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExtensionHostProfileService.prototype, \"lastProfile\", {\n        get: function () { return this._profile; },\n        enumerable: true,\n        configurable: true\n    });\n    ExtensionHostProfileService.prototype._setState = function (state) {\n        var _this = this;\n        if (this._state === state) {\n            return;\n        }\n        this._state = state;\n        if (this._state === runtimeExtensionsEditor_1.ProfileSessionState.Running) {\n            ProfileExtHostStatusbarItem.instance.show(function () {\n                _this.stopProfiling();\n                _this._editorService.openEditor(_this._instantiationService.createInstance(runtimeExtensionsInput_1.RuntimeExtensionsInput), { revealIfOpened: true });\n            });\n        }\n        else if (this._state === runtimeExtensionsEditor_1.ProfileSessionState.Stopping) {\n            ProfileExtHostStatusbarItem.instance.hide();\n        }\n        this._onDidChangeState.fire(undefined);\n    };\n    ExtensionHostProfileService.prototype.startProfiling = function () {\n        var _this = this;\n        if (this._state !== runtimeExtensionsEditor_1.ProfileSessionState.None) {\n            return null;\n        }\n        if (!this._extensionService.canProfileExtensionHost()) {\n            return this._dialogService.confirm({\n                type: 'info',\n                message: nls.localize('restart1', \"Profile Extensions\"),\n                detail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", product_1.default.nameLong),\n                primaryButton: nls.localize('restart3', \"Restart\"),\n                secondaryButton: nls.localize('cancel', \"Cancel\")\n            }).then(function (res) {\n                if (res.confirmed) {\n                    _this._windowsService.relaunch({ addArgs: [\"--inspect-extensions=\" + ports_1.randomPort()] });\n                }\n            });\n        }\n        this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Starting);\n        return this._extensionService.startExtensionHostProfile().then(function (value) {\n            _this._profileSession = value;\n            _this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Running);\n        }, function (err) {\n            errors_1.onUnexpectedError(err);\n            _this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n        });\n    };\n    ExtensionHostProfileService.prototype.stopProfiling = function () {\n        var _this = this;\n        if (this._state !== runtimeExtensionsEditor_1.ProfileSessionState.Running || !this._profileSession) {\n            return;\n        }\n        this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Stopping);\n        this._profileSession.stop().then(function (result) {\n            _this._setLastProfile(result);\n            _this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n        }, function (err) {\n            errors_1.onUnexpectedError(err);\n            _this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n        });\n        this._profileSession = null;\n    };\n    ExtensionHostProfileService.prototype._setLastProfile = function (profile) {\n        this._profile = profile;\n        this._onDidChangeLastProfile.fire(undefined);\n    };\n    ExtensionHostProfileService.prototype.getUnresponsiveProfile = function (extensionId) {\n        return this._unresponsiveProfiles.get(extensions_2.ExtensionIdentifier.toKey(extensionId));\n    };\n    ExtensionHostProfileService.prototype.setUnresponsiveProfile = function (extensionId, profile) {\n        this._unresponsiveProfiles.set(extensions_2.ExtensionIdentifier.toKey(extensionId), profile);\n        this._setLastProfile(profile);\n    };\n    ExtensionHostProfileService = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, windows_1.IWindowsService),\n        tslib_1.__param(4, dialogs_1.IDialogService)\n    ], ExtensionHostProfileService);\n    return ExtensionHostProfileService;\n}(lifecycle_1.Disposable));\nexports.ExtensionHostProfileService = ExtensionHostProfileService;\nvar ProfileExtHostStatusbarItem = /** @class */ (function () {\n    function ProfileExtHostStatusbarItem() {\n        ProfileExtHostStatusbarItem.instance = this;\n        this.toDispose = [];\n        this.timeStarted = 0;\n    }\n    ProfileExtHostStatusbarItem.prototype.show = function (clickHandler) {\n        var _this = this;\n        this.clickHandler = clickHandler;\n        if (this.timeStarted === 0) {\n            this.timeStarted = new Date().getTime();\n            this.statusBarItem.hidden = false;\n            this.labelUpdater = setInterval(function () {\n                _this.updateLabel();\n            }, 1000);\n            this.updateLabel();\n        }\n    };\n    ProfileExtHostStatusbarItem.prototype.hide = function () {\n        this.clickHandler = null;\n        this.statusBarItem.hidden = true;\n        this.timeStarted = 0;\n        clearInterval(this.labelUpdater);\n        this.labelUpdater = null;\n    };\n    ProfileExtHostStatusbarItem.prototype.render = function (container) {\n        var _this = this;\n        if (!this.statusBarItem && container) {\n            this.statusBarItem = dom_1.append(container, dom_1.$('.profileExtHost-statusbar-item'));\n            this.toDispose.push(dom_1.addDisposableListener(this.statusBarItem, 'click', function () {\n                if (_this.clickHandler) {\n                    _this.clickHandler();\n                }\n            }));\n            this.statusBarItem.title = nls.localize('selectAndStartDebug', \"Click to stop profiling.\");\n            var a = dom_1.append(this.statusBarItem, dom_1.$('a'));\n            dom_1.append(a, dom_1.$('.icon'));\n            this.label = dom_1.append(a, dom_1.$('span.label'));\n            this.updateLabel();\n            this.statusBarItem.hidden = true;\n        }\n        return this;\n    };\n    ProfileExtHostStatusbarItem.prototype.updateLabel = function () {\n        var label = 'Profiling Extension Host';\n        if (this.timeStarted > 0) {\n            var secondsRecoreded = (new Date().getTime() - this.timeStarted) / 1000;\n            label = \"Profiling Extension Host (\" + Math.round(secondsRecoreded) + \" sec)\";\n        }\n        this.label.textContent = label;\n    };\n    ProfileExtHostStatusbarItem.prototype.dispose = function () {\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n    };\n    return ProfileExtHostStatusbarItem;\n}());\nexports.ProfileExtHostStatusbarItem = ProfileExtHostStatusbarItem;\nplatform_1.Registry.as(statusbar_1.Extensions.Statusbar).registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(ProfileExtHostStatusbarItem, statusbar_2.StatusbarAlignment.RIGHT));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionHostProfile, ProfileSession, IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { append, $, addDisposableListener } from 'vs/base/browser/dom';\nimport { IStatusbarRegistry, StatusbarItemDescriptor, Extensions, IStatusbarItem } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { StatusbarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IExtensionHostProfileService, ProfileSessionState } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { randomPort } from 'vs/base/node/ports';\nimport product from 'vs/platform/product/node/product';\nimport { RuntimeExtensionsInput } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport class ExtensionHostProfileService extends Disposable implements IExtensionHostProfileService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChangeState: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeState: Event<void> = this._onDidChangeState.event;\n\n\tprivate readonly _onDidChangeLastProfile: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeLastProfile: Event<void> = this._onDidChangeLastProfile.event;\n\n\tprivate readonly _unresponsiveProfiles = new Map<string, IExtensionHostProfile>();\n\tprivate _profile: IExtensionHostProfile | null;\n\tprivate _profileSession: ProfileSession | null;\n\tprivate _state: ProfileSessionState;\n\n\tpublic get state() { return this._state; }\n\tpublic get lastProfile() { return this._profile; }\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWindowsService private readonly _windowsService: IWindowsService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\tsuper();\n\t\tthis._profile = null;\n\t\tthis._profileSession = null;\n\t\tthis._setState(ProfileSessionState.None);\n\t}\n\n\tprivate _setState(state: ProfileSessionState): void {\n\t\tif (this._state === state) {\n\t\t\treturn;\n\t\t}\n\t\tthis._state = state;\n\n\t\tif (this._state === ProfileSessionState.Running) {\n\t\t\tProfileExtHostStatusbarItem.instance.show(() => {\n\t\t\t\tthis.stopProfiling();\n\t\t\t\tthis._editorService.openEditor(this._instantiationService.createInstance(RuntimeExtensionsInput), { revealIfOpened: true });\n\t\t\t});\n\t\t} else if (this._state === ProfileSessionState.Stopping) {\n\t\t\tProfileExtHostStatusbarItem.instance.hide();\n\t\t}\n\n\t\tthis._onDidChangeState.fire(undefined);\n\t}\n\n\tpublic startProfiling(): Promise<any> | null {\n\t\tif (this._state !== ProfileSessionState.None) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this._extensionService.canProfileExtensionHost()) {\n\t\t\treturn this._dialogService.confirm({\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: nls.localize('restart1', \"Profile Extensions\"),\n\t\t\t\tdetail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", product.nameLong),\n\t\t\t\tprimaryButton: nls.localize('restart3', \"Restart\"),\n\t\t\t\tsecondaryButton: nls.localize('cancel', \"Cancel\")\n\t\t\t}).then(res => {\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tthis._windowsService.relaunch({ addArgs: [`--inspect-extensions=${randomPort()}`] });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Starting);\n\n\t\treturn this._extensionService.startExtensionHostProfile().then((value) => {\n\t\t\tthis._profileSession = value;\n\t\t\tthis._setState(ProfileSessionState.Running);\n\t\t}, (err) => {\n\t\t\tonUnexpectedError(err);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t});\n\t}\n\n\tpublic stopProfiling(): void {\n\t\tif (this._state !== ProfileSessionState.Running || !this._profileSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Stopping);\n\t\tthis._profileSession.stop().then((result) => {\n\t\t\tthis._setLastProfile(result);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t}, (err) => {\n\t\t\tonUnexpectedError(err);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t});\n\t\tthis._profileSession = null;\n\t}\n\n\tprivate _setLastProfile(profile: IExtensionHostProfile) {\n\t\tthis._profile = profile;\n\t\tthis._onDidChangeLastProfile.fire(undefined);\n\t}\n\n\tgetUnresponsiveProfile(extensionId: ExtensionIdentifier): IExtensionHostProfile | undefined {\n\t\treturn this._unresponsiveProfiles.get(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tsetUnresponsiveProfile(extensionId: ExtensionIdentifier, profile: IExtensionHostProfile): void {\n\t\tthis._unresponsiveProfiles.set(ExtensionIdentifier.toKey(extensionId), profile);\n\t\tthis._setLastProfile(profile);\n\t}\n\n}\n\nexport class ProfileExtHostStatusbarItem implements IStatusbarItem {\n\n\tpublic static instance: ProfileExtHostStatusbarItem;\n\n\tprivate toDispose: IDisposable[];\n\tprivate statusBarItem: HTMLElement;\n\tprivate label: HTMLElement;\n\tprivate timeStarted: number;\n\tprivate labelUpdater: any;\n\tprivate clickHandler: (() => void) | null;\n\n\tconstructor() {\n\t\tProfileExtHostStatusbarItem.instance = this;\n\t\tthis.toDispose = [];\n\t\tthis.timeStarted = 0;\n\t}\n\n\tpublic show(clickHandler: () => void) {\n\t\tthis.clickHandler = clickHandler;\n\t\tif (this.timeStarted === 0) {\n\t\t\tthis.timeStarted = new Date().getTime();\n\t\t\tthis.statusBarItem.hidden = false;\n\t\t\tthis.labelUpdater = setInterval(() => {\n\t\t\t\tthis.updateLabel();\n\t\t\t}, 1000);\n\t\t\tthis.updateLabel();\n\t\t}\n\t}\n\n\tpublic hide() {\n\t\tthis.clickHandler = null;\n\t\tthis.statusBarItem.hidden = true;\n\t\tthis.timeStarted = 0;\n\t\tclearInterval(this.labelUpdater);\n\t\tthis.labelUpdater = null;\n\t}\n\n\tpublic render(container: HTMLElement): IDisposable {\n\t\tif (!this.statusBarItem && container) {\n\t\t\tthis.statusBarItem = append(container, $('.profileExtHost-statusbar-item'));\n\t\t\tthis.toDispose.push(addDisposableListener(this.statusBarItem, 'click', () => {\n\t\t\t\tif (this.clickHandler) {\n\t\t\t\t\tthis.clickHandler();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis.statusBarItem.title = nls.localize('selectAndStartDebug', \"Click to stop profiling.\");\n\t\t\tconst a = append(this.statusBarItem, $('a'));\n\t\t\tappend(a, $('.icon'));\n\t\t\tthis.label = append(a, $('span.label'));\n\t\t\tthis.updateLabel();\n\t\t\tthis.statusBarItem.hidden = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate updateLabel() {\n\t\tlet label = 'Profiling Extension Host';\n\t\tif (this.timeStarted > 0) {\n\t\t\tlet secondsRecoreded = (new Date().getTime() - this.timeStarted) / 1000;\n\t\t\tlabel = `Profiling Extension Host (${Math.round(secondsRecoreded)} sec)`;\n\t\t}\n\t\tthis.label.textContent = label;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nRegistry.as<IStatusbarRegistry>(Extensions.Statusbar).registerStatusbarItem(\n\tnew StatusbarItemDescriptor(ProfileExtHostStatusbarItem, StatusbarAlignment.RIGHT)\n);\n"]}]}