{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationModels_1 = require(\"vs/platform/configuration/common/configurationModels\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar map_1 = require(\"vs/base/common/map\");\nvar WorkspaceConfigurationModelParser = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceConfigurationModelParser, _super);\n    function WorkspaceConfigurationModelParser(name) {\n        var _this = _super.call(this, name) || this;\n        _this._folders = [];\n        _this._settingsModelParser = new FolderSettingsModelParser(name, [configurationRegistry_1.ConfigurationScope.WINDOW, configurationRegistry_1.ConfigurationScope.RESOURCE]);\n        _this._launchModel = new configurationModels_1.ConfigurationModel();\n        return _this;\n    }\n    Object.defineProperty(WorkspaceConfigurationModelParser.prototype, \"folders\", {\n        get: function () {\n            return this._folders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationModelParser.prototype, \"settingsModel\", {\n        get: function () {\n            return this._settingsModelParser.configurationModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationModelParser.prototype, \"launchModel\", {\n        get: function () {\n            return this._launchModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceConfigurationModelParser.prototype.reprocessWorkspaceSettings = function () {\n        this._settingsModelParser.reprocess();\n    };\n    WorkspaceConfigurationModelParser.prototype.parseRaw = function (raw) {\n        this._folders = (raw['folders'] || []);\n        this._settingsModelParser.parse(raw['settings']);\n        this._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n        return _super.prototype.parseRaw.call(this, raw);\n    };\n    WorkspaceConfigurationModelParser.prototype.createConfigurationModelFrom = function (raw, key) {\n        var _this = this;\n        var data = raw[key];\n        if (data) {\n            var contents = configuration_1.toValuesTree(data, function (message) { return console.error(\"Conflict in settings file \" + _this._name + \": \" + message); });\n            var scopedContents = Object.create(null);\n            scopedContents[key] = contents;\n            var keys = Object.keys(data).map(function (k) { return key + \".\" + k; });\n            return new configurationModels_1.ConfigurationModel(scopedContents, keys, []);\n        }\n        return new configurationModels_1.ConfigurationModel();\n    };\n    return WorkspaceConfigurationModelParser;\n}(configurationModels_1.ConfigurationModelParser));\nexports.WorkspaceConfigurationModelParser = WorkspaceConfigurationModelParser;\nvar StandaloneConfigurationModelParser = /** @class */ (function (_super) {\n    tslib_1.__extends(StandaloneConfigurationModelParser, _super);\n    function StandaloneConfigurationModelParser(name, scope) {\n        var _this = _super.call(this, name) || this;\n        _this.scope = scope;\n        return _this;\n    }\n    StandaloneConfigurationModelParser.prototype.parseRaw = function (raw) {\n        var _this = this;\n        var contents = configuration_1.toValuesTree(raw, function (message) { return console.error(\"Conflict in settings file \" + _this._name + \": \" + message); });\n        var scopedContents = Object.create(null);\n        scopedContents[this.scope] = contents;\n        var keys = Object.keys(raw).map(function (key) { return _this.scope + \".\" + key; });\n        return { contents: scopedContents, keys: keys, overrides: [] };\n    };\n    return StandaloneConfigurationModelParser;\n}(configurationModels_1.ConfigurationModelParser));\nexports.StandaloneConfigurationModelParser = StandaloneConfigurationModelParser;\nvar FolderSettingsModelParser = /** @class */ (function (_super) {\n    tslib_1.__extends(FolderSettingsModelParser, _super);\n    function FolderSettingsModelParser(name, scopes) {\n        var _this = _super.call(this, name) || this;\n        _this.scopes = scopes;\n        return _this;\n    }\n    FolderSettingsModelParser.prototype.parse = function (content) {\n        this._raw = typeof content === 'string' ? this.parseContent(content) : content;\n        this.parseWorkspaceSettings(this._raw);\n    };\n    Object.defineProperty(FolderSettingsModelParser.prototype, \"configurationModel\", {\n        get: function () {\n            return this._settingsModel || new configurationModels_1.ConfigurationModel();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FolderSettingsModelParser.prototype.reprocess = function () {\n        this.parse(this._raw);\n    };\n    FolderSettingsModelParser.prototype.parseWorkspaceSettings = function (rawSettings) {\n        var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n        var rawWorkspaceSettings = this.filterByScope(rawSettings, configurationProperties, true);\n        var configurationModel = this.parseRaw(rawWorkspaceSettings);\n        this._settingsModel = new configurationModels_1.ConfigurationModel(configurationModel.contents, configurationModel.keys, configurationModel.overrides);\n    };\n    FolderSettingsModelParser.prototype.filterByScope = function (properties, configurationProperties, filterOverriddenProperties) {\n        var result = {};\n        for (var key in properties) {\n            if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key) && filterOverriddenProperties) {\n                result[key] = this.filterByScope(properties[key], configurationProperties, false);\n            }\n            else {\n                var scope = this.getScope(key, configurationProperties);\n                if (this.scopes.indexOf(scope) !== -1) {\n                    result[key] = properties[key];\n                }\n            }\n        }\n        return result;\n    };\n    FolderSettingsModelParser.prototype.getScope = function (key, configurationProperties) {\n        var propertySchema = configurationProperties[key];\n        return propertySchema && typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : configurationRegistry_1.ConfigurationScope.WINDOW;\n    };\n    return FolderSettingsModelParser;\n}(configurationModels_1.ConfigurationModelParser));\nexports.FolderSettingsModelParser = FolderSettingsModelParser;\nvar Configuration = /** @class */ (function (_super) {\n    tslib_1.__extends(Configuration, _super);\n    function Configuration(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, _workspace) {\n        var _this = _super.call(this, defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource) || this;\n        _this._workspace = _workspace;\n        return _this;\n    }\n    Configuration.prototype.getValue = function (key, overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        return _super.prototype.getValue.call(this, key, overrides, this._workspace);\n    };\n    Configuration.prototype.inspect = function (key, overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        return _super.prototype.inspect.call(this, key, overrides, this._workspace);\n    };\n    Configuration.prototype.keys = function () {\n        return _super.prototype.keys.call(this, this._workspace);\n    };\n    Configuration.prototype.compareAndUpdateLocalUserConfiguration = function (user) {\n        var _a = configuration_1.compare(this.localUserConfiguration, user), added = _a.added, updated = _a.updated, removed = _a.removed;\n        var changedKeys = added.concat(updated, removed);\n        if (changedKeys.length) {\n            _super.prototype.updateLocalUserConfiguration.call(this, user);\n        }\n        return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n    };\n    Configuration.prototype.compareAndUpdateRemoteUserConfiguration = function (user) {\n        var _a = configuration_1.compare(this.remoteUserConfiguration, user), added = _a.added, updated = _a.updated, removed = _a.removed;\n        var changedKeys = added.concat(updated, removed);\n        if (changedKeys.length) {\n            _super.prototype.updateRemoteUserConfiguration.call(this, user);\n        }\n        return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n    };\n    Configuration.prototype.compareAndUpdateWorkspaceConfiguration = function (workspaceConfiguration) {\n        var _a = configuration_1.compare(this.workspaceConfiguration, workspaceConfiguration), added = _a.added, updated = _a.updated, removed = _a.removed;\n        var changedKeys = added.concat(updated, removed);\n        if (changedKeys.length) {\n            _super.prototype.updateWorkspaceConfiguration.call(this, workspaceConfiguration);\n        }\n        return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys);\n    };\n    Configuration.prototype.compareAndUpdateFolderConfiguration = function (resource, folderConfiguration) {\n        var currentFolderConfiguration = this.folderConfigurations.get(resource);\n        if (currentFolderConfiguration) {\n            var _a = configuration_1.compare(currentFolderConfiguration, folderConfiguration), added = _a.added, updated = _a.updated, removed = _a.removed;\n            var changedKeys = added.concat(updated, removed);\n            if (changedKeys.length) {\n                _super.prototype.updateFolderConfiguration.call(this, resource, folderConfiguration);\n            }\n            return new configurationModels_1.ConfigurationChangeEvent().change(changedKeys, resource);\n        }\n        else {\n            _super.prototype.updateFolderConfiguration.call(this, resource, folderConfiguration);\n            return new configurationModels_1.ConfigurationChangeEvent().change(folderConfiguration.keys, resource);\n        }\n    };\n    Configuration.prototype.compareAndDeleteFolderConfiguration = function (folder) {\n        if (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {\n            // Do not remove workspace configuration\n            return new configurationModels_1.ConfigurationChangeEvent();\n        }\n        var folderConfig = this.folderConfigurations.get(folder);\n        if (!folderConfig) {\n            throw new Error('Unknown folder');\n        }\n        var keys = folderConfig.keys;\n        _super.prototype.deleteFolderConfiguration.call(this, folder);\n        return new configurationModels_1.ConfigurationChangeEvent().change(keys, folder);\n    };\n    Configuration.prototype.compare = function (other) {\n        var _this = this;\n        var result = [];\n        var _loop_1 = function (key) {\n            if (!objects_1.equals(this_1.getValue(key), other.getValue(key))\n                || (this_1._workspace && this_1._workspace.folders.some(function (folder) { return !objects_1.equals(_this.getValue(key, { resource: folder.uri }), other.getValue(key, { resource: folder.uri })); }))) {\n                result.push(key);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = this.allKeys(); _i < _a.length; _i++) {\n            var key = _a[_i];\n            _loop_1(key);\n        }\n        return result;\n    };\n    Configuration.prototype.allKeys = function () {\n        return _super.prototype.allKeys.call(this, this._workspace);\n    };\n    return Configuration;\n}(configurationModels_1.Configuration));\nexports.Configuration = Configuration;\nvar AllKeysConfigurationChangeEvent = /** @class */ (function (_super) {\n    tslib_1.__extends(AllKeysConfigurationChangeEvent, _super);\n    function AllKeysConfigurationChangeEvent(_configuration, source, sourceConfig) {\n        var _this = _super.call(this) || this;\n        _this._configuration = _configuration;\n        _this.source = source;\n        _this.sourceConfig = sourceConfig;\n        _this._changedConfiguration = null;\n        return _this;\n    }\n    Object.defineProperty(AllKeysConfigurationChangeEvent.prototype, \"changedConfiguration\", {\n        get: function () {\n            if (!this._changedConfiguration) {\n                this._changedConfiguration = new configurationModels_1.ConfigurationModel();\n                this.updateKeys(this._changedConfiguration, this.affectedKeys);\n            }\n            return this._changedConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AllKeysConfigurationChangeEvent.prototype, \"changedConfigurationByResource\", {\n        get: function () {\n            return new map_1.ResourceMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AllKeysConfigurationChangeEvent.prototype, \"affectedKeys\", {\n        get: function () {\n            return this._configuration.allKeys();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AllKeysConfigurationChangeEvent.prototype.affectsConfiguration = function (config, resource) {\n        return this.doesConfigurationContains(this.changedConfiguration, config);\n    };\n    return AllKeysConfigurationChangeEvent;\n}(configurationModels_1.AbstractConfigurationChangeEvent));\nexports.AllKeysConfigurationChangeEvent = AllKeysConfigurationChangeEvent;\nvar WorkspaceConfigurationChangeEvent = /** @class */ (function () {\n    function WorkspaceConfigurationChangeEvent(configurationChangeEvent, workspace) {\n        this.configurationChangeEvent = configurationChangeEvent;\n        this.workspace = workspace;\n    }\n    Object.defineProperty(WorkspaceConfigurationChangeEvent.prototype, \"changedConfiguration\", {\n        get: function () {\n            return this.configurationChangeEvent.changedConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationChangeEvent.prototype, \"changedConfigurationByResource\", {\n        get: function () {\n            return this.configurationChangeEvent.changedConfigurationByResource;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationChangeEvent.prototype, \"affectedKeys\", {\n        get: function () {\n            return this.configurationChangeEvent.affectedKeys;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationChangeEvent.prototype, \"source\", {\n        get: function () {\n            return this.configurationChangeEvent.source;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceConfigurationChangeEvent.prototype, \"sourceConfig\", {\n        get: function () {\n            return this.configurationChangeEvent.sourceConfig;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceConfigurationChangeEvent.prototype.affectsConfiguration = function (config, resource) {\n        if (this.configurationChangeEvent.affectsConfiguration(config, resource)) {\n            return true;\n        }\n        if (resource && this.workspace) {\n            var workspaceFolder = this.workspace.getFolder(resource);\n            if (workspaceFolder) {\n                return this.configurationChangeEvent.affectsConfiguration(config, workspaceFolder.uri);\n            }\n        }\n        return false;\n    };\n    return WorkspaceConfigurationChangeEvent;\n}());\nexports.WorkspaceConfigurationChangeEvent = WorkspaceConfigurationChangeEvent;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationModels.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/objects';\nimport { compare, toValuesTree, IConfigurationChangeEvent, ConfigurationTarget, IConfigurationModel, IConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { Configuration as BaseConfiguration, ConfigurationModelParser, ConfigurationChangeEvent, ConfigurationModel, AbstractConfigurationChangeEvent } from 'vs/platform/configuration/common/configurationModels';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, IConfigurationPropertySchema, Extensions, ConfigurationScope, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IStoredWorkspaceFolder } from 'vs/platform/workspaces/common/workspaces';\nimport { Workspace } from 'vs/platform/workspace/common/workspace';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\n\nexport class WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n\n\tprivate _folders: IStoredWorkspaceFolder[] = [];\n\tprivate _settingsModelParser: FolderSettingsModelParser;\n\tprivate _launchModel: ConfigurationModel;\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t\tthis._settingsModelParser = new FolderSettingsModelParser(name, [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE]);\n\t\tthis._launchModel = new ConfigurationModel();\n\t}\n\n\tget folders(): IStoredWorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tget settingsModel(): ConfigurationModel {\n\t\treturn this._settingsModelParser.configurationModel;\n\t}\n\n\tget launchModel(): ConfigurationModel {\n\t\treturn this._launchModel;\n\t}\n\n\treprocessWorkspaceSettings(): void {\n\t\tthis._settingsModelParser.reprocess();\n\t}\n\n\tprotected parseRaw(raw: any): IConfigurationModel {\n\t\tthis._folders = (raw['folders'] || []) as IStoredWorkspaceFolder[];\n\t\tthis._settingsModelParser.parse(raw['settings']);\n\t\tthis._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n\t\treturn super.parseRaw(raw);\n\t}\n\n\tprivate createConfigurationModelFrom(raw: any, key: string): ConfigurationModel {\n\t\tconst data = raw[key];\n\t\tif (data) {\n\t\t\tconst contents = toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\t\tconst scopedContents = Object.create(null);\n\t\t\tscopedContents[key] = contents;\n\t\t\tconst keys = Object.keys(data).map(k => `${key}.${k}`);\n\t\t\treturn new ConfigurationModel(scopedContents, keys, []);\n\t\t}\n\t\treturn new ConfigurationModel();\n\t}\n}\n\nexport class StandaloneConfigurationModelParser extends ConfigurationModelParser {\n\n\tconstructor(name: string, private readonly scope: string) {\n\t\tsuper(name);\n\t}\n\n\tprotected parseRaw(raw: any): IConfigurationModel {\n\t\tconst contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\tconst scopedContents = Object.create(null);\n\t\tscopedContents[this.scope] = contents;\n\t\tconst keys = Object.keys(raw).map(key => `${this.scope}.${key}`);\n\t\treturn { contents: scopedContents, keys, overrides: [] };\n\t}\n\n}\n\nexport class FolderSettingsModelParser extends ConfigurationModelParser {\n\n\tprivate _raw: any;\n\tprivate _settingsModel: ConfigurationModel;\n\n\tconstructor(name: string, private scopes: ConfigurationScope[]) {\n\t\tsuper(name);\n\t}\n\n\tparse(content: string | any): void {\n\t\tthis._raw = typeof content === 'string' ? this.parseContent(content) : content;\n\t\tthis.parseWorkspaceSettings(this._raw);\n\t}\n\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._settingsModel || new ConfigurationModel();\n\t}\n\n\treprocess(): void {\n\t\tthis.parse(this._raw);\n\t}\n\n\tprivate parseWorkspaceSettings(rawSettings: any): void {\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst rawWorkspaceSettings = this.filterByScope(rawSettings, configurationProperties, true);\n\t\tconst configurationModel = this.parseRaw(rawWorkspaceSettings);\n\t\tthis._settingsModel = new ConfigurationModel(configurationModel.contents, configurationModel.keys, configurationModel.overrides);\n\t}\n\n\tprivate filterByScope(properties: {}, configurationProperties: { [qualifiedKey: string]: IConfigurationPropertySchema }, filterOverriddenProperties: boolean): {} {\n\t\tconst result = {};\n\t\tfor (let key in properties) {\n\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key) && filterOverriddenProperties) {\n\t\t\t\tresult[key] = this.filterByScope(properties[key], configurationProperties, false);\n\t\t\t} else {\n\t\t\t\tconst scope = this.getScope(key, configurationProperties);\n\t\t\t\tif (this.scopes.indexOf(scope) !== -1) {\n\t\t\t\t\tresult[key] = properties[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate getScope(key: string, configurationProperties: { [qualifiedKey: string]: IConfigurationPropertySchema }): ConfigurationScope {\n\t\tconst propertySchema = configurationProperties[key];\n\t\treturn propertySchema && typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : ConfigurationScope.WINDOW;\n\t}\n}\n\nexport class Configuration extends BaseConfiguration {\n\n\tconstructor(\n\t\tdefaults: ConfigurationModel,\n\t\tlocalUser: ConfigurationModel,\n\t\tremoteUser: ConfigurationModel,\n\t\tworkspaceConfiguration: ConfigurationModel,\n\t\tfolders: ResourceMap<ConfigurationModel>,\n\t\tmemoryConfiguration: ConfigurationModel,\n\t\tmemoryConfigurationByResource: ResourceMap<ConfigurationModel>,\n\t\tprivate readonly _workspace?: Workspace) {\n\t\tsuper(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);\n\t}\n\n\tgetValue(key: string | undefined, overrides: IConfigurationOverrides = {}): any {\n\t\treturn super.getValue(key, overrides, this._workspace);\n\t}\n\n\tinspect<C>(key: string, overrides: IConfigurationOverrides = {}): {\n\t\tdefault: C,\n\t\tuser: C,\n\t\tworkspace?: C,\n\t\tworkspaceFolder?: C\n\t\tmemory?: C\n\t\tvalue: C,\n\t} {\n\t\treturn super.inspect(key, overrides, this._workspace);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn super.keys(this._workspace);\n\t}\n\n\tcompareAndUpdateLocalUserConfiguration(user: ConfigurationModel): ConfigurationChangeEvent {\n\t\tconst { added, updated, removed } = compare(this.localUserConfiguration, user);\n\t\tlet changedKeys = [...added, ...updated, ...removed];\n\t\tif (changedKeys.length) {\n\t\t\tsuper.updateLocalUserConfiguration(user);\n\t\t}\n\t\treturn new ConfigurationChangeEvent().change(changedKeys);\n\t}\n\n\tcompareAndUpdateRemoteUserConfiguration(user: ConfigurationModel): ConfigurationChangeEvent {\n\t\tconst { added, updated, removed } = compare(this.remoteUserConfiguration, user);\n\t\tlet changedKeys = [...added, ...updated, ...removed];\n\t\tif (changedKeys.length) {\n\t\t\tsuper.updateRemoteUserConfiguration(user);\n\t\t}\n\t\treturn new ConfigurationChangeEvent().change(changedKeys);\n\t}\n\n\tcompareAndUpdateWorkspaceConfiguration(workspaceConfiguration: ConfigurationModel): ConfigurationChangeEvent {\n\t\tconst { added, updated, removed } = compare(this.workspaceConfiguration, workspaceConfiguration);\n\t\tlet changedKeys = [...added, ...updated, ...removed];\n\t\tif (changedKeys.length) {\n\t\t\tsuper.updateWorkspaceConfiguration(workspaceConfiguration);\n\t\t}\n\t\treturn new ConfigurationChangeEvent().change(changedKeys);\n\t}\n\n\tcompareAndUpdateFolderConfiguration(resource: URI, folderConfiguration: ConfigurationModel): ConfigurationChangeEvent {\n\t\tconst currentFolderConfiguration = this.folderConfigurations.get(resource);\n\t\tif (currentFolderConfiguration) {\n\t\t\tconst { added, updated, removed } = compare(currentFolderConfiguration, folderConfiguration);\n\t\t\tlet changedKeys = [...added, ...updated, ...removed];\n\t\t\tif (changedKeys.length) {\n\t\t\t\tsuper.updateFolderConfiguration(resource, folderConfiguration);\n\t\t\t}\n\t\t\treturn new ConfigurationChangeEvent().change(changedKeys, resource);\n\t\t} else {\n\t\t\tsuper.updateFolderConfiguration(resource, folderConfiguration);\n\t\t\treturn new ConfigurationChangeEvent().change(folderConfiguration.keys, resource);\n\t\t}\n\t}\n\n\tcompareAndDeleteFolderConfiguration(folder: URI): ConfigurationChangeEvent {\n\t\tif (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {\n\t\t\t// Do not remove workspace configuration\n\t\t\treturn new ConfigurationChangeEvent();\n\t\t}\n\t\tconst folderConfig = this.folderConfigurations.get(folder);\n\t\tif (!folderConfig) {\n\t\t\tthrow new Error('Unknown folder');\n\t\t}\n\t\tconst keys = folderConfig.keys;\n\t\tsuper.deleteFolderConfiguration(folder);\n\t\treturn new ConfigurationChangeEvent().change(keys, folder);\n\t}\n\n\tcompare(other: Configuration): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (const key of this.allKeys()) {\n\t\t\tif (!equals(this.getValue(key), other.getValue(key))\n\t\t\t\t|| (this._workspace && this._workspace.folders.some(folder => !equals(this.getValue(key, { resource: folder.uri }), other.getValue(key, { resource: folder.uri }))))) {\n\t\t\t\tresult.push(key);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tallKeys(): string[] {\n\t\treturn super.allKeys(this._workspace);\n\t}\n}\n\nexport class AllKeysConfigurationChangeEvent extends AbstractConfigurationChangeEvent implements IConfigurationChangeEvent {\n\n\tprivate _changedConfiguration: ConfigurationModel | null = null;\n\n\tconstructor(private _configuration: Configuration, readonly source: ConfigurationTarget, readonly sourceConfig: any) { super(); }\n\n\tget changedConfiguration(): ConfigurationModel {\n\t\tif (!this._changedConfiguration) {\n\t\t\tthis._changedConfiguration = new ConfigurationModel();\n\t\t\tthis.updateKeys(this._changedConfiguration, this.affectedKeys);\n\t\t}\n\t\treturn this._changedConfiguration;\n\t}\n\n\tget changedConfigurationByResource(): ResourceMap<IConfigurationModel> {\n\t\treturn new ResourceMap();\n\t}\n\n\tget affectedKeys(): string[] {\n\t\treturn this._configuration.allKeys();\n\t}\n\n\taffectsConfiguration(config: string, resource?: URI): boolean {\n\t\treturn this.doesConfigurationContains(this.changedConfiguration, config);\n\t}\n}\n\nexport class WorkspaceConfigurationChangeEvent implements IConfigurationChangeEvent {\n\n\tconstructor(private configurationChangeEvent: IConfigurationChangeEvent, private workspace: Workspace | undefined) { }\n\n\tget changedConfiguration(): IConfigurationModel {\n\t\treturn this.configurationChangeEvent.changedConfiguration;\n\t}\n\n\tget changedConfigurationByResource(): ResourceMap<IConfigurationModel> {\n\t\treturn this.configurationChangeEvent.changedConfigurationByResource;\n\t}\n\n\tget affectedKeys(): string[] {\n\t\treturn this.configurationChangeEvent.affectedKeys;\n\t}\n\n\tget source(): ConfigurationTarget {\n\t\treturn this.configurationChangeEvent.source;\n\t}\n\n\tget sourceConfig(): any {\n\t\treturn this.configurationChangeEvent.sourceConfig;\n\t}\n\n\taffectsConfiguration(config: string, resource?: URI): boolean {\n\t\tif (this.configurationChangeEvent.affectsConfiguration(config, resource)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (resource && this.workspace) {\n\t\t\tlet workspaceFolder = this.workspace.getFolder(resource);\n\t\t\tif (workspaceFolder) {\n\t\t\t\treturn this.configurationChangeEvent.affectsConfiguration(config, workspaceFolder.uri);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}]}