{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings = require(\"vs/base/common/strings\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar findModel_1 = require(\"vs/editor/contrib/find/findModel\");\nvar findOptionsWidget_1 = require(\"vs/editor/contrib/find/findOptionsWidget\");\nvar findState_1 = require(\"vs/editor/contrib/find/findState\");\nvar findWidget_1 = require(\"vs/editor/contrib/find/findWidget\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar SEARCH_STRING_MAX_LENGTH = 524288;\nfunction getSelectionSearchString(editor) {\n    if (!editor.hasModel()) {\n        return null;\n    }\n    var selection = editor.getSelection();\n    // if selection spans multiple lines, default search string to empty\n    if (selection.startLineNumber === selection.endLineNumber) {\n        if (selection.isEmpty()) {\n            var wordAtPosition = editor.getModel().getWordAtPosition(selection.getStartPosition());\n            if (wordAtPosition) {\n                return wordAtPosition.word;\n            }\n        }\n        else {\n            if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {\n                return editor.getModel().getValueInRange(selection);\n            }\n        }\n    }\n    return null;\n}\nexports.getSelectionSearchString = getSelectionSearchString;\nvar FindStartFocusAction;\n(function (FindStartFocusAction) {\n    FindStartFocusAction[FindStartFocusAction[\"NoFocusChange\"] = 0] = \"NoFocusChange\";\n    FindStartFocusAction[FindStartFocusAction[\"FocusFindInput\"] = 1] = \"FocusFindInput\";\n    FindStartFocusAction[FindStartFocusAction[\"FocusReplaceInput\"] = 2] = \"FocusReplaceInput\";\n})(FindStartFocusAction = exports.FindStartFocusAction || (exports.FindStartFocusAction = {}));\nvar CommonFindController = /** @class */ (function (_super) {\n    tslib_1.__extends(CommonFindController, _super);\n    function CommonFindController(editor, contextKeyService, storageService, clipboardService) {\n        var _this = _super.call(this) || this;\n        _this._editor = editor;\n        _this._findWidgetVisible = findModel_1.CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);\n        _this._contextKeyService = contextKeyService;\n        _this._storageService = storageService;\n        _this._clipboardService = clipboardService;\n        _this._updateHistoryDelayer = new async_1.Delayer(500);\n        _this._state = _this._register(new findState_1.FindReplaceState());\n        _this.loadQueryState();\n        _this._register(_this._state.onFindReplaceStateChange(function (e) { return _this._onStateChanged(e); }));\n        _this._model = null;\n        _this._register(_this._editor.onDidChangeModel(function () {\n            var shouldRestartFind = (_this._editor.getModel() && _this._state.isRevealed);\n            _this.disposeModel();\n            _this._state.change({\n                searchScope: null,\n                matchCase: _this._storageService.getBoolean('editor.matchCase', storage_1.StorageScope.WORKSPACE, false),\n                wholeWord: _this._storageService.getBoolean('editor.wholeWord', storage_1.StorageScope.WORKSPACE, false),\n                isRegex: _this._storageService.getBoolean('editor.isRegex', storage_1.StorageScope.WORKSPACE, false)\n            }, false);\n            if (shouldRestartFind) {\n                _this._start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: false && _this._editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: FindStartFocusAction.NoFocusChange,\n                    shouldAnimate: false,\n                    updateSearchScope: false\n                });\n            }\n        }));\n        return _this;\n    }\n    CommonFindController.get = function (editor) {\n        return editor.getContribution(CommonFindController.ID);\n    };\n    CommonFindController.prototype.dispose = function () {\n        this.disposeModel();\n        _super.prototype.dispose.call(this);\n    };\n    CommonFindController.prototype.disposeModel = function () {\n        if (this._model) {\n            this._model.dispose();\n            this._model = null;\n        }\n    };\n    CommonFindController.prototype.getId = function () {\n        return CommonFindController.ID;\n    };\n    CommonFindController.prototype._onStateChanged = function (e) {\n        this.saveQueryState(e);\n        if (e.isRevealed) {\n            if (this._state.isRevealed) {\n                this._findWidgetVisible.set(true);\n            }\n            else {\n                this._findWidgetVisible.reset();\n                this.disposeModel();\n            }\n        }\n        if (e.searchString) {\n            this.setGlobalBufferTerm(this._state.searchString);\n        }\n    };\n    CommonFindController.prototype.saveQueryState = function (e) {\n        if (e.isRegex) {\n            this._storageService.store('editor.isRegex', this._state.actualIsRegex, storage_1.StorageScope.WORKSPACE);\n        }\n        if (e.wholeWord) {\n            this._storageService.store('editor.wholeWord', this._state.actualWholeWord, storage_1.StorageScope.WORKSPACE);\n        }\n        if (e.matchCase) {\n            this._storageService.store('editor.matchCase', this._state.actualMatchCase, storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    CommonFindController.prototype.loadQueryState = function () {\n        this._state.change({\n            matchCase: this._storageService.getBoolean('editor.matchCase', storage_1.StorageScope.WORKSPACE, this._state.matchCase),\n            wholeWord: this._storageService.getBoolean('editor.wholeWord', storage_1.StorageScope.WORKSPACE, this._state.wholeWord),\n            isRegex: this._storageService.getBoolean('editor.isRegex', storage_1.StorageScope.WORKSPACE, this._state.isRegex)\n        }, false);\n    };\n    CommonFindController.prototype.isFindInputFocused = function () {\n        return !!findModel_1.CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);\n    };\n    CommonFindController.prototype.getState = function () {\n        return this._state;\n    };\n    CommonFindController.prototype.closeFindWidget = function () {\n        this._state.change({\n            isRevealed: false,\n            searchScope: null\n        }, false);\n        this._editor.focus();\n    };\n    CommonFindController.prototype.toggleCaseSensitive = function () {\n        this._state.change({ matchCase: !this._state.matchCase }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    };\n    CommonFindController.prototype.toggleWholeWords = function () {\n        this._state.change({ wholeWord: !this._state.wholeWord }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    };\n    CommonFindController.prototype.toggleRegex = function () {\n        this._state.change({ isRegex: !this._state.isRegex }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    };\n    CommonFindController.prototype.toggleSearchScope = function () {\n        if (this._state.searchScope) {\n            this._state.change({ searchScope: null }, true);\n        }\n        else {\n            if (this._editor.hasModel()) {\n                var selection = this._editor.getSelection();\n                if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n                    selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n                }\n                if (!selection.isEmpty()) {\n                    this._state.change({ searchScope: selection }, true);\n                }\n            }\n        }\n    };\n    CommonFindController.prototype.setSearchString = function (searchString) {\n        if (this._state.isRegex) {\n            searchString = strings.escapeRegExpCharacters(searchString);\n        }\n        this._state.change({ searchString: searchString }, false);\n    };\n    CommonFindController.prototype.highlightFindOptions = function () {\n        // overwritten in subclass\n    };\n    CommonFindController.prototype._start = function (opts) {\n        this.disposeModel();\n        if (!this._editor.hasModel()) {\n            // cannot do anything with an editor that doesn't have a model...\n            return;\n        }\n        var stateChanges = {\n            isRevealed: true\n        };\n        if (opts.seedSearchStringFromSelection) {\n            var selectionSearchString = getSelectionSearchString(this._editor);\n            if (selectionSearchString) {\n                if (this._state.isRegex) {\n                    stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);\n                }\n                else {\n                    stateChanges.searchString = selectionSearchString;\n                }\n            }\n        }\n        if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {\n            var selectionSearchString = this.getGlobalBufferTerm();\n            if (selectionSearchString) {\n                stateChanges.searchString = selectionSearchString;\n            }\n        }\n        // Overwrite isReplaceRevealed\n        if (opts.forceRevealReplace) {\n            stateChanges.isReplaceRevealed = true;\n        }\n        else if (!this._findWidgetVisible.get()) {\n            stateChanges.isReplaceRevealed = false;\n        }\n        if (opts.updateSearchScope) {\n            var currentSelection = this._editor.getSelection();\n            if (!currentSelection.isEmpty()) {\n                stateChanges.searchScope = currentSelection;\n            }\n        }\n        this._state.change(stateChanges, false);\n        if (!this._model) {\n            this._model = new findModel_1.FindModelBoundToEditorModel(this._editor, this._state);\n        }\n    };\n    CommonFindController.prototype.start = function (opts) {\n        this._start(opts);\n    };\n    CommonFindController.prototype.moveToNextMatch = function () {\n        if (this._model) {\n            this._model.moveToNextMatch();\n            return true;\n        }\n        return false;\n    };\n    CommonFindController.prototype.moveToPrevMatch = function () {\n        if (this._model) {\n            this._model.moveToPrevMatch();\n            return true;\n        }\n        return false;\n    };\n    CommonFindController.prototype.replace = function () {\n        if (this._model) {\n            this._model.replace();\n            return true;\n        }\n        return false;\n    };\n    CommonFindController.prototype.replaceAll = function () {\n        if (this._model) {\n            this._model.replaceAll();\n            return true;\n        }\n        return false;\n    };\n    CommonFindController.prototype.selectAllMatches = function () {\n        if (this._model) {\n            this._model.selectAllMatches();\n            this._editor.focus();\n            return true;\n        }\n        return false;\n    };\n    CommonFindController.prototype.getGlobalBufferTerm = function () {\n        if (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n            && this._clipboardService\n            && this._editor.hasModel()\n            && !this._editor.getModel().isTooLargeForSyncing()) {\n            return this._clipboardService.readFindText();\n        }\n        return '';\n    };\n    CommonFindController.prototype.setGlobalBufferTerm = function (text) {\n        if (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n            && this._clipboardService\n            && this._editor.hasModel()\n            && !this._editor.getModel().isTooLargeForSyncing()) {\n            this._clipboardService.writeFindText(text);\n        }\n    };\n    CommonFindController.ID = 'editor.contrib.findController';\n    CommonFindController = tslib_1.__decorate([\n        tslib_1.__param(1, contextkey_1.IContextKeyService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, clipboardService_1.IClipboardService)\n    ], CommonFindController);\n    return CommonFindController;\n}(lifecycle_1.Disposable));\nexports.CommonFindController = CommonFindController;\nvar FindController = /** @class */ (function (_super) {\n    tslib_1.__extends(FindController, _super);\n    function FindController(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, storageService, clipboardService) {\n        var _this = _super.call(this, editor, _contextKeyService, storageService, clipboardService) || this;\n        _this._contextViewService = _contextViewService;\n        _this._keybindingService = _keybindingService;\n        _this._themeService = _themeService;\n        return _this;\n    }\n    FindController.prototype._start = function (opts) {\n        if (!this._widget) {\n            this._createFindWidget();\n        }\n        if (!this._widget.getPosition() && this._editor.getConfiguration().contribInfo.find.autoFindInSelection) {\n            // not visible yet so we need to set search scope if `editor.find.autoFindInSelection` is `true`\n            opts.updateSearchScope = true;\n        }\n        _super.prototype._start.call(this, opts);\n        if (opts.shouldFocus === FindStartFocusAction.FocusReplaceInput) {\n            this._widget.focusReplaceInput();\n        }\n        else if (opts.shouldFocus === FindStartFocusAction.FocusFindInput) {\n            this._widget.focusFindInput();\n        }\n    };\n    FindController.prototype.highlightFindOptions = function () {\n        if (!this._widget) {\n            this._createFindWidget();\n        }\n        if (this._state.isRevealed) {\n            this._widget.highlightFindOptions();\n        }\n        else {\n            this._findOptionsWidget.highlightFindOptions();\n        }\n    };\n    FindController.prototype._createFindWidget = function () {\n        this._widget = this._register(new findWidget_1.FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService));\n        this._findOptionsWidget = this._register(new findOptionsWidget_1.FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));\n    };\n    FindController = tslib_1.__decorate([\n        tslib_1.__param(1, contextView_1.IContextViewService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, storage_1.IStorageService),\n        tslib_1.__param(6, instantiation_1.optional(clipboardService_1.IClipboardService))\n    ], FindController);\n    return FindController;\n}(CommonFindController));\nexports.FindController = FindController;\nvar StartFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(StartFindAction, _super);\n    function StartFindAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.StartFindAction,\n            label: nls.localize('startFindAction', \"Find\"),\n            alias: 'Find',\n            precondition: null,\n            kbOpts: {\n                kbExpr: null,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '3_find',\n                title: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, \"&&Find\"),\n                order: 1\n            }\n        }) || this;\n    }\n    StartFindAction.prototype.run = function (accessor, editor) {\n        var controller = CommonFindController.get(editor);\n        if (controller) {\n            controller.start({\n                forceRevealReplace: false,\n                seedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                seedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.globalFindClipboard,\n                shouldFocus: FindStartFocusAction.FocusFindInput,\n                shouldAnimate: true,\n                updateSearchScope: false\n            });\n        }\n    };\n    return StartFindAction;\n}(editorExtensions_1.EditorAction));\nexports.StartFindAction = StartFindAction;\nvar StartFindWithSelectionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(StartFindWithSelectionAction, _super);\n    function StartFindWithSelectionAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.StartFindWithSelection,\n            label: nls.localize('startFindWithSelectionAction', \"Find With Selection\"),\n            alias: 'Find With Selection',\n            precondition: null,\n            kbOpts: {\n                kbExpr: null,\n                primary: 0,\n                mac: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_E,\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    StartFindWithSelectionAction.prototype.run = function (accessor, editor) {\n        var controller = CommonFindController.get(editor);\n        if (controller) {\n            controller.start({\n                forceRevealReplace: false,\n                seedSearchStringFromSelection: true,\n                seedSearchStringFromGlobalClipboard: false,\n                shouldFocus: FindStartFocusAction.FocusFindInput,\n                shouldAnimate: true,\n                updateSearchScope: false\n            });\n            controller.setGlobalBufferTerm(controller.getState().searchString);\n        }\n    };\n    return StartFindWithSelectionAction;\n}(editorExtensions_1.EditorAction));\nexports.StartFindWithSelectionAction = StartFindWithSelectionAction;\nvar MatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MatchFindAction, _super);\n    function MatchFindAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatchFindAction.prototype.run = function (accessor, editor) {\n        var controller = CommonFindController.get(editor);\n        if (controller && !this._run(controller)) {\n            controller.start({\n                forceRevealReplace: false,\n                seedSearchStringFromSelection: (controller.getState().searchString.length === 0) && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                seedSearchStringFromGlobalClipboard: true,\n                shouldFocus: FindStartFocusAction.NoFocusChange,\n                shouldAnimate: true,\n                updateSearchScope: false\n            });\n            this._run(controller);\n        }\n    };\n    return MatchFindAction;\n}(editorExtensions_1.EditorAction));\nexports.MatchFindAction = MatchFindAction;\nvar NextMatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(NextMatchFindAction, _super);\n    function NextMatchFindAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.NextMatchFindAction,\n            label: nls.localize('findNextMatchAction', \"Find Next\"),\n            alias: 'Find Next',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyCode.F3,\n                mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_G, secondary: [keyCodes_1.KeyCode.F3] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    NextMatchFindAction.prototype._run = function (controller) {\n        return controller.moveToNextMatch();\n    };\n    return NextMatchFindAction;\n}(MatchFindAction));\nexports.NextMatchFindAction = NextMatchFindAction;\nvar PreviousMatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PreviousMatchFindAction, _super);\n    function PreviousMatchFindAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.PreviousMatchFindAction,\n            label: nls.localize('findPreviousMatchAction', \"Find Previous\"),\n            alias: 'Find Previous',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3,\n                mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_G, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    PreviousMatchFindAction.prototype._run = function (controller) {\n        return controller.moveToPrevMatch();\n    };\n    return PreviousMatchFindAction;\n}(MatchFindAction));\nexports.PreviousMatchFindAction = PreviousMatchFindAction;\nvar SelectionMatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectionMatchFindAction, _super);\n    function SelectionMatchFindAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectionMatchFindAction.prototype.run = function (accessor, editor) {\n        var controller = CommonFindController.get(editor);\n        if (!controller) {\n            return;\n        }\n        var selectionSearchString = getSelectionSearchString(editor);\n        if (selectionSearchString) {\n            controller.setSearchString(selectionSearchString);\n        }\n        if (!this._run(controller)) {\n            controller.start({\n                forceRevealReplace: false,\n                seedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                seedSearchStringFromGlobalClipboard: false,\n                shouldFocus: FindStartFocusAction.NoFocusChange,\n                shouldAnimate: true,\n                updateSearchScope: false\n            });\n            this._run(controller);\n        }\n    };\n    return SelectionMatchFindAction;\n}(editorExtensions_1.EditorAction));\nexports.SelectionMatchFindAction = SelectionMatchFindAction;\nvar NextSelectionMatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(NextSelectionMatchFindAction, _super);\n    function NextSelectionMatchFindAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.NextSelectionMatchFindAction,\n            label: nls.localize('nextSelectionMatchFindAction', \"Find Next Selection\"),\n            alias: 'Find Next Selection',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F3,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    NextSelectionMatchFindAction.prototype._run = function (controller) {\n        return controller.moveToNextMatch();\n    };\n    return NextSelectionMatchFindAction;\n}(SelectionMatchFindAction));\nexports.NextSelectionMatchFindAction = NextSelectionMatchFindAction;\nvar PreviousSelectionMatchFindAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PreviousSelectionMatchFindAction, _super);\n    function PreviousSelectionMatchFindAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.PreviousSelectionMatchFindAction,\n            label: nls.localize('previousSelectionMatchFindAction', \"Find Previous Selection\"),\n            alias: 'Find Previous Selection',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    PreviousSelectionMatchFindAction.prototype._run = function (controller) {\n        return controller.moveToPrevMatch();\n    };\n    return PreviousSelectionMatchFindAction;\n}(SelectionMatchFindAction));\nexports.PreviousSelectionMatchFindAction = PreviousSelectionMatchFindAction;\nvar StartFindReplaceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(StartFindReplaceAction, _super);\n    function StartFindReplaceAction() {\n        return _super.call(this, {\n            id: findModel_1.FIND_IDS.StartFindReplaceAction,\n            label: nls.localize('startReplace', \"Replace\"),\n            alias: 'Replace',\n            precondition: null,\n            kbOpts: {\n                kbExpr: null,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_H,\n                mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_F },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '3_find',\n                title: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n                order: 2\n            }\n        }) || this;\n    }\n    StartFindReplaceAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel() || editor.getConfiguration().readOnly) {\n            return;\n        }\n        var controller = CommonFindController.get(editor);\n        var currentSelection = editor.getSelection();\n        var findInputFocused = controller.isFindInputFocused();\n        // we only seed search string from selection when the current selection is single line and not empty,\n        // + the find input is not focused\n        var seedSearchStringFromSelection = !currentSelection.isEmpty()\n            && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection\n            && !findInputFocused;\n        /*\n         * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.\n\n         * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput\n         * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput\n         * findInputFocused false seedSearchStringFromSelection false FocusFindInput\n         */\n        var shouldFocus = (findInputFocused || seedSearchStringFromSelection) ?\n            FindStartFocusAction.FocusReplaceInput : FindStartFocusAction.FocusFindInput;\n        if (controller) {\n            controller.start({\n                forceRevealReplace: true,\n                seedSearchStringFromSelection: seedSearchStringFromSelection,\n                seedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                shouldFocus: shouldFocus,\n                shouldAnimate: true,\n                updateSearchScope: false\n            });\n        }\n    };\n    return StartFindReplaceAction;\n}(editorExtensions_1.EditorAction));\nexports.StartFindReplaceAction = StartFindReplaceAction;\neditorExtensions_1.registerEditorContribution(FindController);\neditorExtensions_1.registerEditorAction(StartFindAction);\neditorExtensions_1.registerEditorAction(StartFindWithSelectionAction);\neditorExtensions_1.registerEditorAction(NextMatchFindAction);\neditorExtensions_1.registerEditorAction(PreviousMatchFindAction);\neditorExtensions_1.registerEditorAction(NextSelectionMatchFindAction);\neditorExtensions_1.registerEditorAction(PreviousSelectionMatchFindAction);\neditorExtensions_1.registerEditorAction(StartFindReplaceAction);\nvar FindCommand = editorExtensions_1.EditorCommand.bindToContribution(CommonFindController.get);\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.CloseFindWidgetCommand,\n    precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: function (x) { return x.closeFindWidget(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.Escape,\n        secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ToggleCaseSensitiveCommand,\n    precondition: null,\n    handler: function (x) { return x.toggleCaseSensitive(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: findModel_1.ToggleCaseSensitiveKeybinding.primary,\n        mac: findModel_1.ToggleCaseSensitiveKeybinding.mac,\n        win: findModel_1.ToggleCaseSensitiveKeybinding.win,\n        linux: findModel_1.ToggleCaseSensitiveKeybinding.linux\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ToggleWholeWordCommand,\n    precondition: null,\n    handler: function (x) { return x.toggleWholeWords(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: findModel_1.ToggleWholeWordKeybinding.primary,\n        mac: findModel_1.ToggleWholeWordKeybinding.mac,\n        win: findModel_1.ToggleWholeWordKeybinding.win,\n        linux: findModel_1.ToggleWholeWordKeybinding.linux\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ToggleRegexCommand,\n    precondition: null,\n    handler: function (x) { return x.toggleRegex(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: findModel_1.ToggleRegexKeybinding.primary,\n        mac: findModel_1.ToggleRegexKeybinding.mac,\n        win: findModel_1.ToggleRegexKeybinding.win,\n        linux: findModel_1.ToggleRegexKeybinding.linux\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ToggleSearchScopeCommand,\n    precondition: null,\n    handler: function (x) { return x.toggleSearchScope(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: findModel_1.ToggleSearchScopeKeybinding.primary,\n        mac: findModel_1.ToggleSearchScopeKeybinding.mac,\n        win: findModel_1.ToggleSearchScopeKeybinding.win,\n        linux: findModel_1.ToggleSearchScopeKeybinding.linux\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ReplaceOneAction,\n    precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: function (x) { return x.replace(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_1\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.ReplaceAllAction,\n    precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: function (x) { return x.replaceAll(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Enter\n    }\n}));\neditorExtensions_1.registerEditorCommand(new FindCommand({\n    id: findModel_1.FIND_IDS.SelectAllMatchesAction,\n    precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: function (x) { return x.selectAllMatches(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Enter\n    }\n}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Delayer } from 'vs/base/common/async';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, ServicesAccessor, registerEditorAction, registerEditorCommand, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { CONTEXT_FIND_INPUT_FOCUSED, CONTEXT_FIND_WIDGET_VISIBLE, FIND_IDS, FindModelBoundToEditorModel, ToggleCaseSensitiveKeybinding, ToggleRegexKeybinding, ToggleSearchScopeKeybinding, ToggleWholeWordKeybinding } from 'vs/editor/contrib/find/findModel';\nimport { FindOptionsWidget } from 'vs/editor/contrib/find/findOptionsWidget';\nimport { FindReplaceState, FindReplaceStateChangedEvent, INewFindReplaceState } from 'vs/editor/contrib/find/findState';\nimport { FindWidget, IFindController } from 'vs/editor/contrib/find/findWidget';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { optional } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\n\nconst SEARCH_STRING_MAX_LENGTH = 524288;\n\nexport function getSelectionSearchString(editor: ICodeEditor): string | null {\n\tif (!editor.hasModel()) {\n\t\treturn null;\n\t}\n\n\tconst selection = editor.getSelection();\n\t// if selection spans multiple lines, default search string to empty\n\tif (selection.startLineNumber === selection.endLineNumber) {\n\t\tif (selection.isEmpty()) {\n\t\t\tlet wordAtPosition = editor.getModel().getWordAtPosition(selection.getStartPosition());\n\t\t\tif (wordAtPosition) {\n\t\t\t\treturn wordAtPosition.word;\n\t\t\t}\n\t\t} else {\n\t\t\tif (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {\n\t\t\t\treturn editor.getModel().getValueInRange(selection);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport const enum FindStartFocusAction {\n\tNoFocusChange,\n\tFocusFindInput,\n\tFocusReplaceInput\n}\n\nexport interface IFindStartOptions {\n\tforceRevealReplace: boolean;\n\tseedSearchStringFromSelection: boolean;\n\tseedSearchStringFromGlobalClipboard: boolean;\n\tshouldFocus: FindStartFocusAction;\n\tshouldAnimate: boolean;\n\tupdateSearchScope: boolean;\n}\n\nexport class CommonFindController extends Disposable implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.findController';\n\n\tprotected _editor: ICodeEditor;\n\tprivate readonly _findWidgetVisible: IContextKey<boolean>;\n\tprotected _state: FindReplaceState;\n\tprotected _updateHistoryDelayer: Delayer<void>;\n\tprivate _model: FindModelBoundToEditorModel | null;\n\tprivate readonly _storageService: IStorageService;\n\tprivate readonly _clipboardService: IClipboardService;\n\tprotected readonly _contextKeyService: IContextKeyService;\n\n\tpublic static get(editor: ICodeEditor): CommonFindController {\n\t\treturn editor.getContribution<CommonFindController>(CommonFindController.ID);\n\t}\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IClipboardService clipboardService: IClipboardService\n\t) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._findWidgetVisible = CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);\n\t\tthis._contextKeyService = contextKeyService;\n\t\tthis._storageService = storageService;\n\t\tthis._clipboardService = clipboardService;\n\n\t\tthis._updateHistoryDelayer = new Delayer<void>(500);\n\t\tthis._state = this._register(new FindReplaceState());\n\t\tthis.loadQueryState();\n\t\tthis._register(this._state.onFindReplaceStateChange((e) => this._onStateChanged(e)));\n\n\t\tthis._model = null;\n\n\t\tthis._register(this._editor.onDidChangeModel(() => {\n\t\t\tlet shouldRestartFind = (this._editor.getModel() && this._state.isRevealed);\n\n\t\t\tthis.disposeModel();\n\n\t\t\tthis._state.change({\n\t\t\t\tsearchScope: null,\n\t\t\t\tmatchCase: this._storageService.getBoolean('editor.matchCase', StorageScope.WORKSPACE, false),\n\t\t\t\twholeWord: this._storageService.getBoolean('editor.wholeWord', StorageScope.WORKSPACE, false),\n\t\t\t\tisRegex: this._storageService.getBoolean('editor.isRegex', StorageScope.WORKSPACE, false)\n\t\t\t}, false);\n\n\t\t\tif (shouldRestartFind) {\n\t\t\t\tthis._start({\n\t\t\t\t\tforceRevealReplace: false,\n\t\t\t\t\tseedSearchStringFromSelection: false && this._editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n\t\t\t\t\tseedSearchStringFromGlobalClipboard: false,\n\t\t\t\t\tshouldFocus: FindStartFocusAction.NoFocusChange,\n\t\t\t\t\tshouldAnimate: false,\n\t\t\t\t\tupdateSearchScope: false\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.disposeModel();\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModel(): void {\n\t\tif (this._model) {\n\t\t\tthis._model.dispose();\n\t\t\tthis._model = null;\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn CommonFindController.ID;\n\t}\n\n\tprivate _onStateChanged(e: FindReplaceStateChangedEvent): void {\n\t\tthis.saveQueryState(e);\n\n\t\tif (e.isRevealed) {\n\t\t\tif (this._state.isRevealed) {\n\t\t\t\tthis._findWidgetVisible.set(true);\n\t\t\t} else {\n\t\t\t\tthis._findWidgetVisible.reset();\n\t\t\t\tthis.disposeModel();\n\t\t\t}\n\t\t}\n\t\tif (e.searchString) {\n\t\t\tthis.setGlobalBufferTerm(this._state.searchString);\n\t\t}\n\t}\n\n\tprivate saveQueryState(e: FindReplaceStateChangedEvent) {\n\t\tif (e.isRegex) {\n\t\t\tthis._storageService.store('editor.isRegex', this._state.actualIsRegex, StorageScope.WORKSPACE);\n\t\t}\n\t\tif (e.wholeWord) {\n\t\t\tthis._storageService.store('editor.wholeWord', this._state.actualWholeWord, StorageScope.WORKSPACE);\n\t\t}\n\t\tif (e.matchCase) {\n\t\t\tthis._storageService.store('editor.matchCase', this._state.actualMatchCase, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate loadQueryState() {\n\t\tthis._state.change({\n\t\t\tmatchCase: this._storageService.getBoolean('editor.matchCase', StorageScope.WORKSPACE, this._state.matchCase),\n\t\t\twholeWord: this._storageService.getBoolean('editor.wholeWord', StorageScope.WORKSPACE, this._state.wholeWord),\n\t\t\tisRegex: this._storageService.getBoolean('editor.isRegex', StorageScope.WORKSPACE, this._state.isRegex)\n\t\t}, false);\n\t}\n\n\tpublic isFindInputFocused(): boolean {\n\t\treturn !!CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);\n\t}\n\n\tpublic getState(): FindReplaceState {\n\t\treturn this._state;\n\t}\n\n\tpublic closeFindWidget(): void {\n\t\tthis._state.change({\n\t\t\tisRevealed: false,\n\t\t\tsearchScope: null\n\t\t}, false);\n\t\tthis._editor.focus();\n\t}\n\n\tpublic toggleCaseSensitive(): void {\n\t\tthis._state.change({ matchCase: !this._state.matchCase }, false);\n\t\tif (!this._state.isRevealed) {\n\t\t\tthis.highlightFindOptions();\n\t\t}\n\t}\n\n\tpublic toggleWholeWords(): void {\n\t\tthis._state.change({ wholeWord: !this._state.wholeWord }, false);\n\t\tif (!this._state.isRevealed) {\n\t\t\tthis.highlightFindOptions();\n\t\t}\n\t}\n\n\tpublic toggleRegex(): void {\n\t\tthis._state.change({ isRegex: !this._state.isRegex }, false);\n\t\tif (!this._state.isRevealed) {\n\t\t\tthis.highlightFindOptions();\n\t\t}\n\t}\n\n\tpublic toggleSearchScope(): void {\n\t\tif (this._state.searchScope) {\n\t\t\tthis._state.change({ searchScope: null }, true);\n\t\t} else {\n\t\t\tif (this._editor.hasModel()) {\n\t\t\t\tlet selection = this._editor.getSelection();\n\t\t\t\tif (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n\t\t\t\t\tselection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n\t\t\t\t}\n\t\t\t\tif (!selection.isEmpty()) {\n\t\t\t\t\tthis._state.change({ searchScope: selection }, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setSearchString(searchString: string): void {\n\t\tif (this._state.isRegex) {\n\t\t\tsearchString = strings.escapeRegExpCharacters(searchString);\n\t\t}\n\t\tthis._state.change({ searchString: searchString }, false);\n\t}\n\n\tpublic highlightFindOptions(): void {\n\t\t// overwritten in subclass\n\t}\n\n\tprotected _start(opts: IFindStartOptions): void {\n\t\tthis.disposeModel();\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\t// cannot do anything with an editor that doesn't have a model...\n\t\t\treturn;\n\t\t}\n\n\t\tlet stateChanges: INewFindReplaceState = {\n\t\t\tisRevealed: true\n\t\t};\n\n\t\tif (opts.seedSearchStringFromSelection) {\n\t\t\tlet selectionSearchString = getSelectionSearchString(this._editor);\n\t\t\tif (selectionSearchString) {\n\t\t\t\tif (this._state.isRegex) {\n\t\t\t\t\tstateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);\n\t\t\t\t} else {\n\t\t\t\t\tstateChanges.searchString = selectionSearchString;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {\n\t\t\tlet selectionSearchString = this.getGlobalBufferTerm();\n\t\t\tif (selectionSearchString) {\n\t\t\t\tstateChanges.searchString = selectionSearchString;\n\t\t\t}\n\t\t}\n\n\t\t// Overwrite isReplaceRevealed\n\t\tif (opts.forceRevealReplace) {\n\t\t\tstateChanges.isReplaceRevealed = true;\n\t\t} else if (!this._findWidgetVisible.get()) {\n\t\t\tstateChanges.isReplaceRevealed = false;\n\t\t}\n\n\t\tif (opts.updateSearchScope) {\n\t\t\tlet currentSelection = this._editor.getSelection();\n\t\t\tif (!currentSelection.isEmpty()) {\n\t\t\t\tstateChanges.searchScope = currentSelection;\n\t\t\t}\n\t\t}\n\n\t\tthis._state.change(stateChanges, false);\n\n\t\tif (!this._model) {\n\t\t\tthis._model = new FindModelBoundToEditorModel(this._editor, this._state);\n\t\t}\n\t}\n\n\tpublic start(opts: IFindStartOptions): void {\n\t\tthis._start(opts);\n\t}\n\n\tpublic moveToNextMatch(): boolean {\n\t\tif (this._model) {\n\t\t\tthis._model.moveToNextMatch();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic moveToPrevMatch(): boolean {\n\t\tif (this._model) {\n\t\t\tthis._model.moveToPrevMatch();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic replace(): boolean {\n\t\tif (this._model) {\n\t\t\tthis._model.replace();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic replaceAll(): boolean {\n\t\tif (this._model) {\n\t\t\tthis._model.replaceAll();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic selectAllMatches(): boolean {\n\t\tif (this._model) {\n\t\t\tthis._model.selectAllMatches();\n\t\t\tthis._editor.focus();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getGlobalBufferTerm(): string {\n\t\tif (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n\t\t\t&& this._clipboardService\n\t\t\t&& this._editor.hasModel()\n\t\t\t&& !this._editor.getModel().isTooLargeForSyncing()\n\t\t) {\n\t\t\treturn this._clipboardService.readFindText();\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic setGlobalBufferTerm(text: string) {\n\t\tif (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n\t\t\t&& this._clipboardService\n\t\t\t&& this._editor.hasModel()\n\t\t\t&& !this._editor.getModel().isTooLargeForSyncing()\n\t\t) {\n\t\t\tthis._clipboardService.writeFindText(text);\n\t\t}\n\t}\n}\n\nexport class FindController extends CommonFindController implements IFindController {\n\n\tprivate _widget: FindWidget;\n\tprivate _findOptionsWidget: FindOptionsWidget;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextViewService private readonly _contextViewService: IContextViewService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@optional(IClipboardService) clipboardService: IClipboardService\n\t) {\n\t\tsuper(editor, _contextKeyService, storageService, clipboardService);\n\t}\n\n\tprotected _start(opts: IFindStartOptions): void {\n\t\tif (!this._widget) {\n\t\t\tthis._createFindWidget();\n\t\t}\n\n\t\tif (!this._widget.getPosition() && this._editor.getConfiguration().contribInfo.find.autoFindInSelection) {\n\t\t\t// not visible yet so we need to set search scope if `editor.find.autoFindInSelection` is `true`\n\t\t\topts.updateSearchScope = true;\n\t\t}\n\n\t\tsuper._start(opts);\n\n\t\tif (opts.shouldFocus === FindStartFocusAction.FocusReplaceInput) {\n\t\t\tthis._widget.focusReplaceInput();\n\t\t} else if (opts.shouldFocus === FindStartFocusAction.FocusFindInput) {\n\t\t\tthis._widget.focusFindInput();\n\t\t}\n\t}\n\n\tpublic highlightFindOptions(): void {\n\t\tif (!this._widget) {\n\t\t\tthis._createFindWidget();\n\t\t}\n\t\tif (this._state.isRevealed) {\n\t\t\tthis._widget.highlightFindOptions();\n\t\t} else {\n\t\t\tthis._findOptionsWidget.highlightFindOptions();\n\t\t}\n\t}\n\n\tprivate _createFindWidget() {\n\t\tthis._widget = this._register(new FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService));\n\t\tthis._findOptionsWidget = this._register(new FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));\n\t}\n}\n\nexport class StartFindAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.StartFindAction,\n\t\t\tlabel: nls.localize('startFindAction', \"Find\"),\n\t\t\talias: 'Find',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_F,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '3_find',\n\t\t\t\ttitle: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, \"&&Find\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor | null, editor: ICodeEditor): void {\n\t\tlet controller = CommonFindController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.start({\n\t\t\t\tforceRevealReplace: false,\n\t\t\t\tseedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n\t\t\t\tseedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.globalFindClipboard,\n\t\t\t\tshouldFocus: FindStartFocusAction.FocusFindInput,\n\t\t\t\tshouldAnimate: true,\n\t\t\t\tupdateSearchScope: false\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class StartFindWithSelectionAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.StartFindWithSelection,\n\t\t\tlabel: nls.localize('startFindWithSelectionAction', \"Find With Selection\"),\n\t\t\talias: 'Find With Selection',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_E,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet controller = CommonFindController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.start({\n\t\t\t\tforceRevealReplace: false,\n\t\t\t\tseedSearchStringFromSelection: true,\n\t\t\t\tseedSearchStringFromGlobalClipboard: false,\n\t\t\t\tshouldFocus: FindStartFocusAction.FocusFindInput,\n\t\t\t\tshouldAnimate: true,\n\t\t\t\tupdateSearchScope: false\n\t\t\t});\n\n\t\t\tcontroller.setGlobalBufferTerm(controller.getState().searchString);\n\t\t}\n\t}\n}\nexport abstract class MatchFindAction extends EditorAction {\n\tpublic run(accessor: ServicesAccessor | null, editor: ICodeEditor): void {\n\t\tlet controller = CommonFindController.get(editor);\n\t\tif (controller && !this._run(controller)) {\n\t\t\tcontroller.start({\n\t\t\t\tforceRevealReplace: false,\n\t\t\t\tseedSearchStringFromSelection: (controller.getState().searchString.length === 0) && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n\t\t\t\tseedSearchStringFromGlobalClipboard: true,\n\t\t\t\tshouldFocus: FindStartFocusAction.NoFocusChange,\n\t\t\t\tshouldAnimate: true,\n\t\t\t\tupdateSearchScope: false\n\t\t\t});\n\t\t\tthis._run(controller);\n\t\t}\n\t}\n\n\tprotected abstract _run(controller: CommonFindController): boolean;\n}\n\nexport class NextMatchFindAction extends MatchFindAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.NextMatchFindAction,\n\t\t\tlabel: nls.localize('findNextMatchAction', \"Find Next\"),\n\t\t\talias: 'Find Next',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyCode.F3,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KEY_G, secondary: [KeyCode.F3] },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _run(controller: CommonFindController): boolean {\n\t\treturn controller.moveToNextMatch();\n\t}\n}\n\nexport class PreviousMatchFindAction extends MatchFindAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.PreviousMatchFindAction,\n\t\t\tlabel: nls.localize('findPreviousMatchAction', \"Find Previous\"),\n\t\t\talias: 'Find Previous',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.Shift | KeyCode.F3,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_G, secondary: [KeyMod.Shift | KeyCode.F3] },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _run(controller: CommonFindController): boolean {\n\t\treturn controller.moveToPrevMatch();\n\t}\n}\n\nexport abstract class SelectionMatchFindAction extends EditorAction {\n\tpublic run(accessor: ServicesAccessor | null, editor: ICodeEditor): void {\n\t\tlet controller = CommonFindController.get(editor);\n\t\tif (!controller) {\n\t\t\treturn;\n\t\t}\n\t\tlet selectionSearchString = getSelectionSearchString(editor);\n\t\tif (selectionSearchString) {\n\t\t\tcontroller.setSearchString(selectionSearchString);\n\t\t}\n\t\tif (!this._run(controller)) {\n\t\t\tcontroller.start({\n\t\t\t\tforceRevealReplace: false,\n\t\t\t\tseedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n\t\t\t\tseedSearchStringFromGlobalClipboard: false,\n\t\t\t\tshouldFocus: FindStartFocusAction.NoFocusChange,\n\t\t\t\tshouldAnimate: true,\n\t\t\t\tupdateSearchScope: false\n\t\t\t});\n\t\t\tthis._run(controller);\n\t\t}\n\t}\n\n\tprotected abstract _run(controller: CommonFindController): boolean;\n}\n\nexport class NextSelectionMatchFindAction extends SelectionMatchFindAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.NextSelectionMatchFindAction,\n\t\t\tlabel: nls.localize('nextSelectionMatchFindAction', \"Find Next Selection\"),\n\t\t\talias: 'Find Next Selection',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.F3,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _run(controller: CommonFindController): boolean {\n\t\treturn controller.moveToNextMatch();\n\t}\n}\n\nexport class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.PreviousSelectionMatchFindAction,\n\t\t\tlabel: nls.localize('previousSelectionMatchFindAction', \"Find Previous Selection\"),\n\t\t\talias: 'Find Previous Selection',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.F3,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _run(controller: CommonFindController): boolean {\n\t\treturn controller.moveToPrevMatch();\n\t}\n}\n\nexport class StartFindReplaceAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FIND_IDS.StartFindReplaceAction,\n\t\t\tlabel: nls.localize('startReplace', \"Replace\"),\n\t\t\talias: 'Replace',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_H,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_F },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '3_find',\n\t\t\t\ttitle: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor | null, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel() || editor.getConfiguration().readOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet controller = CommonFindController.get(editor);\n\t\tlet currentSelection = editor.getSelection();\n\t\tlet findInputFocused = controller.isFindInputFocused();\n\t\t// we only seed search string from selection when the current selection is single line and not empty,\n\t\t// + the find input is not focused\n\t\tlet seedSearchStringFromSelection = !currentSelection.isEmpty()\n\t\t\t&& currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection\n\t\t\t&& !findInputFocused;\n\t\t/*\n\t\t * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.\n\n\t\t * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput\n\t\t * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput\n\t\t * findInputFocused false seedSearchStringFromSelection false FocusFindInput\n\t\t */\n\t\tlet shouldFocus = (findInputFocused || seedSearchStringFromSelection) ?\n\t\t\tFindStartFocusAction.FocusReplaceInput : FindStartFocusAction.FocusFindInput;\n\n\n\t\tif (controller) {\n\t\t\tcontroller.start({\n\t\t\t\tforceRevealReplace: true,\n\t\t\t\tseedSearchStringFromSelection: seedSearchStringFromSelection,\n\t\t\t\tseedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n\t\t\t\tshouldFocus: shouldFocus,\n\t\t\t\tshouldAnimate: true,\n\t\t\t\tupdateSearchScope: false\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterEditorContribution(FindController);\n\nregisterEditorAction(StartFindAction);\nregisterEditorAction(StartFindWithSelectionAction);\nregisterEditorAction(NextMatchFindAction);\nregisterEditorAction(PreviousMatchFindAction);\nregisterEditorAction(NextSelectionMatchFindAction);\nregisterEditorAction(PreviousSelectionMatchFindAction);\nregisterEditorAction(StartFindReplaceAction);\n\nconst FindCommand = EditorCommand.bindToContribution<CommonFindController>(CommonFindController.get);\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.CloseFindWidgetCommand,\n\tprecondition: CONTEXT_FIND_WIDGET_VISIBLE,\n\thandler: x => x.closeFindWidget(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ToggleCaseSensitiveCommand,\n\tprecondition: null,\n\thandler: x => x.toggleCaseSensitive(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: ToggleCaseSensitiveKeybinding.primary,\n\t\tmac: ToggleCaseSensitiveKeybinding.mac,\n\t\twin: ToggleCaseSensitiveKeybinding.win,\n\t\tlinux: ToggleCaseSensitiveKeybinding.linux\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ToggleWholeWordCommand,\n\tprecondition: null,\n\thandler: x => x.toggleWholeWords(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: ToggleWholeWordKeybinding.primary,\n\t\tmac: ToggleWholeWordKeybinding.mac,\n\t\twin: ToggleWholeWordKeybinding.win,\n\t\tlinux: ToggleWholeWordKeybinding.linux\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ToggleRegexCommand,\n\tprecondition: null,\n\thandler: x => x.toggleRegex(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: ToggleRegexKeybinding.primary,\n\t\tmac: ToggleRegexKeybinding.mac,\n\t\twin: ToggleRegexKeybinding.win,\n\t\tlinux: ToggleRegexKeybinding.linux\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ToggleSearchScopeCommand,\n\tprecondition: null,\n\thandler: x => x.toggleSearchScope(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: ToggleSearchScopeKeybinding.primary,\n\t\tmac: ToggleSearchScopeKeybinding.mac,\n\t\twin: ToggleSearchScopeKeybinding.win,\n\t\tlinux: ToggleSearchScopeKeybinding.linux\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ReplaceOneAction,\n\tprecondition: CONTEXT_FIND_WIDGET_VISIBLE,\n\thandler: x => x.replace(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_1\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.ReplaceAllAction,\n\tprecondition: CONTEXT_FIND_WIDGET_VISIBLE,\n\thandler: x => x.replaceAll(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Enter\n\t}\n}));\n\nregisterEditorCommand(new FindCommand({\n\tid: FIND_IDS.SelectAllMatchesAction,\n\tprecondition: CONTEXT_FIND_WIDGET_VISIBLE,\n\thandler: x => x.selectAllMatches(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 5,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyMod.Alt | KeyCode.Enter\n\t}\n}));\n"]}]}