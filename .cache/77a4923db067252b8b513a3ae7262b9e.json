{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/titlebar/menubarControl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/titlebar/menubarControl.ts","mtime":1555846338036},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar menubar_1 = require(\"vs/platform/menubar/common/menubar\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar actions_2 = require(\"vs/base/common/actions\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar history_1 = require(\"vs/platform/history/common/history\");\nvar async_1 = require(\"vs/base/common/async\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar update_1 = require(\"vs/platform/update/common/update\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar menubar_2 = require(\"vs/base/browser/ui/menu/menubar\");\nvar menu_1 = require(\"vs/base/browser/ui/menu/menu\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar types_1 = require(\"vs/base/common/types\");\nvar MenubarControl = /** @class */ (function (_super) {\n    tslib_1.__extends(MenubarControl, _super);\n    function MenubarControl(themeService, menubarService, menuService, windowService, windowsService, contextKeyService, keybindingService, configurationService, labelService, updateService, storageService, notificationService, preferencesService, environmentService, accessibilityService) {\n        var _this = _super.call(this) || this;\n        _this.themeService = themeService;\n        _this.menubarService = menubarService;\n        _this.menuService = menuService;\n        _this.windowService = windowService;\n        _this.windowsService = windowsService;\n        _this.contextKeyService = contextKeyService;\n        _this.keybindingService = keybindingService;\n        _this.configurationService = configurationService;\n        _this.labelService = labelService;\n        _this.updateService = updateService;\n        _this.storageService = storageService;\n        _this.notificationService = notificationService;\n        _this.preferencesService = preferencesService;\n        _this.environmentService = environmentService;\n        _this.accessibilityService = accessibilityService;\n        _this.keys = [\n            'files.autoSave',\n            'window.menuBarVisibility',\n            'editor.multiCursorModifier',\n            'workbench.sideBar.location',\n            'workbench.statusBar.visible',\n            'workbench.activityBar.visible',\n            'window.enableMenuBarMnemonics',\n            'window.nativeTabs'\n        ];\n        _this.topLevelTitles = {\n            'File': nls.localize({ key: 'mFile', comment: ['&& denotes a mnemonic'] }, \"&&File\"),\n            'Edit': nls.localize({ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, \"&&Edit\"),\n            'Selection': nls.localize({ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, \"&&Selection\"),\n            'View': nls.localize({ key: 'mView', comment: ['&& denotes a mnemonic'] }, \"&&View\"),\n            'Go': nls.localize({ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, \"&&Go\"),\n            'Debug': nls.localize({ key: 'mDebug', comment: ['&& denotes a mnemonic'] }, \"&&Debug\"),\n            'Terminal': nls.localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\"),\n            'Help': nls.localize({ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, \"&&Help\")\n        };\n        _this.topLevelMenus = {\n            'File': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarFileMenu, _this.contextKeyService)),\n            'Edit': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarEditMenu, _this.contextKeyService)),\n            'Selection': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarSelectionMenu, _this.contextKeyService)),\n            'View': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarViewMenu, _this.contextKeyService)),\n            'Go': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarGoMenu, _this.contextKeyService)),\n            'Debug': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarDebugMenu, _this.contextKeyService)),\n            'Terminal': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarTerminalMenu, _this.contextKeyService)),\n            'Help': _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarHelpMenu, _this.contextKeyService))\n        };\n        if (platform_1.isNative && browser_1.isMacintosh) {\n            _this.topLevelMenus['Preferences'] = _this._register(_this.menuService.createMenu(actions_1.MenuId.MenubarPreferencesMenu, _this.contextKeyService));\n        }\n        _this.menuUpdater = _this._register(new async_1.RunOnceScheduler(function () { return _this.doUpdateMenubar(false); }, 200));\n        _this._onVisibilityChange = _this._register(new event_1.Emitter());\n        _this._onFocusStateChange = _this._register(new event_1.Emitter());\n        if ((platform_1.isNative && browser_1.isMacintosh) || _this.currentTitlebarStyleSetting !== 'custom') {\n            for (var _i = 0, _a = Object.keys(_this.topLevelMenus); _i < _a.length; _i++) {\n                var topLevelMenuName = _a[_i];\n                var menu = _this.topLevelMenus[topLevelMenuName];\n                if (menu) {\n                    _this._register(menu.onDidChange(function () { return _this.updateMenubar(); }));\n                }\n            }\n        }\n        _this.windowService.getRecentlyOpened().then(function (recentlyOpened) {\n            _this.recentlyOpened = recentlyOpened;\n            if ((platform_1.isNative && browser_1.isMacintosh) || _this.currentTitlebarStyleSetting !== 'custom') {\n                _this.doUpdateMenubar(true);\n            }\n        });\n        _this.notifyExistingLinuxUser();\n        _this.notifyUserOfCustomMenubarAccessibility();\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(MenubarControl.prototype, \"currentEnableMenuBarMnemonics\", {\n        get: function () {\n            var enableMenuBarMnemonics = this.configurationService.getValue('window.enableMenuBarMnemonics');\n            if (typeof enableMenuBarMnemonics !== 'boolean') {\n                enableMenuBarMnemonics = true;\n            }\n            return enableMenuBarMnemonics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"currentSidebarPosition\", {\n        get: function () {\n            return this.configurationService.getValue('workbench.sideBar.location');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"currentStatusBarVisibility\", {\n        get: function () {\n            var setting = this.configurationService.getValue('workbench.statusBar.visible');\n            if (typeof setting !== 'boolean') {\n                setting = true;\n            }\n            return setting;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"currentActivityBarVisibility\", {\n        get: function () {\n            var setting = this.configurationService.getValue('workbench.activityBar.visible');\n            if (typeof setting !== 'boolean') {\n                setting = true;\n            }\n            return setting;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"currentMenubarVisibility\", {\n        get: function () {\n            return this.configurationService.getValue('window.menuBarVisibility');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"currentTitlebarStyleSetting\", {\n        get: function () {\n            return windows_1.getTitleBarStyle(this.configurationService, this.environmentService);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MenubarControl.prototype.onDidChangeWindowFocus = function (hasFocus) {\n        if (this.container) {\n            if (hasFocus) {\n                DOM.removeClass(this.container, 'inactive');\n            }\n            else {\n                DOM.addClass(this.container, 'inactive');\n                this.menubar.blur();\n            }\n        }\n    };\n    MenubarControl.prototype.onConfigurationUpdated = function (event) {\n        if (this.keys.some(function (key) { return event.affectsConfiguration(key); })) {\n            this.updateMenubar();\n        }\n        if (event.affectsConfiguration('editor.accessibilitySupport')) {\n            this.notifyUserOfCustomMenubarAccessibility();\n        }\n    };\n    MenubarControl.prototype.onRecentlyOpenedChange = function () {\n        var _this = this;\n        this.windowService.getRecentlyOpened().then(function (recentlyOpened) {\n            _this.recentlyOpened = recentlyOpened;\n            _this.updateMenubar();\n        });\n    };\n    // TODO@sbatten remove after feb19\n    MenubarControl.prototype.notifyExistingLinuxUser = function () {\n        var _this = this;\n        if (!browser_1.isLinux) {\n            return;\n        }\n        var isNewUser = !this.storageService.get('telemetry.lastSessionDate', storage_1.StorageScope.GLOBAL);\n        var hasBeenNotified = this.storageService.getBoolean('menubar/linuxTitlebarRevertNotified', storage_1.StorageScope.GLOBAL, false);\n        var titleBarConfiguration = this.configurationService.inspect('window.titleBarStyle');\n        var customShown = windows_1.getTitleBarStyle(this.configurationService, this.environmentService) === 'custom';\n        if (!hasBeenNotified) {\n            this.storageService.store('menubar/linuxTitlebarRevertNotified', true, storage_1.StorageScope.GLOBAL);\n        }\n        if (isNewUser || hasBeenNotified || (titleBarConfiguration && titleBarConfiguration.user) || customShown) {\n            return;\n        }\n        var message = nls.localize('menubar.linuxTitlebarRevertNotification', \"We have updated the default title bar on Linux to use the native setting. If you prefer, you can go back to the custom setting. More information is available in our [online documentation](https://go.microsoft.com/fwlink/?linkid=2074137).\");\n        this.notificationService.prompt(notification_1.Severity.Info, message, [\n            {\n                label: nls.localize('goToSetting', \"Open Settings\"),\n                run: function () {\n                    return _this.preferencesService.openGlobalSettings(undefined, { query: 'window.titleBarStyle' });\n                }\n            }\n        ]);\n    };\n    MenubarControl.prototype.notifyUserOfCustomMenubarAccessibility = function () {\n        var _this = this;\n        if (browser_1.isMacintosh) {\n            return;\n        }\n        var hasBeenNotified = this.storageService.getBoolean('menubar/accessibleMenubarNotified', storage_1.StorageScope.GLOBAL, false);\n        var usingCustomMenubar = windows_1.getTitleBarStyle(this.configurationService, this.environmentService) === 'custom';\n        var detected = this.accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n        var config = this.configurationService.getValue('editor.accessibilitySupport');\n        if (hasBeenNotified || usingCustomMenubar || !(config === 'on' || (config === 'auto' && detected))) {\n            return;\n        }\n        var message = nls.localize('menubar.customTitlebarAccessibilityNotification', \"Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.\");\n        this.notificationService.prompt(notification_1.Severity.Info, message, [\n            {\n                label: nls.localize('goToSetting', \"Open Settings\"),\n                run: function () {\n                    return _this.preferencesService.openGlobalSettings(undefined, { query: 'window.titleBarStyle' });\n                }\n            }\n        ]);\n        this.storageService.store('menubar/accessibleMenubarNotified', true, storage_1.StorageScope.GLOBAL);\n    };\n    MenubarControl.prototype.registerListeners = function () {\n        var _this = this;\n        // Update when config changes\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(e); }));\n        // Listen to update service\n        this.updateService.onStateChange(function () { return _this.updateMenubar(); });\n        // Listen for changes in recently opened menu\n        this._register(this.windowsService.onRecentlyOpenedChange(function () { _this.onRecentlyOpenedChange(); }));\n        // Listen to keybindings change\n        this._register(this.keybindingService.onDidUpdateKeybindings(function () { return _this.updateMenubar(); }));\n        // These listeners only apply when the custom menubar is being used\n        if (!(platform_1.isNative && browser_1.isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n            // Listen for window focus changes\n            this._register(this.windowService.onDidChangeFocus(function (e) { return _this.onDidChangeWindowFocus(e); }));\n            this._register(this.windowService.onDidChangeMaximize(function (e) { return _this.updateMenubar(); }));\n            this._register(DOM.addDisposableListener(window, DOM.EventType.RESIZE, function () {\n                _this.menubar.blur();\n            }));\n        }\n        // Update recent menu items on formatter registration\n        this._register(this.labelService.onDidChangeFormatters(function () { _this.onRecentlyOpenedChange(); }));\n    };\n    MenubarControl.prototype.doUpdateMenubar = function (firstTime) {\n        if (!(platform_1.isNative && browser_1.isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n            this.setupCustomMenubar(firstTime);\n        }\n        else {\n            // Send menus to main process to be rendered by Electron\n            var menubarData = { menus: {}, keybindings: {} };\n            if (this.getMenubarMenus(menubarData)) {\n                this.menubarService.updateMenubar(this.windowService.getCurrentWindowId(), menubarData);\n            }\n        }\n    };\n    MenubarControl.prototype.updateMenubar = function () {\n        this.menuUpdater.schedule();\n    };\n    MenubarControl.prototype.calculateActionLabel = function (action) {\n        var label = action.label;\n        switch (action.id) {\n            case 'workbench.action.toggleSidebarPosition':\n                if (this.currentSidebarPosition !== 'right') {\n                    label = nls.localize({ key: 'miMoveSidebarRight', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Right\");\n                }\n                else {\n                    label = nls.localize({ key: 'miMoveSidebarLeft', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Left\");\n                }\n                break;\n            case 'workbench.action.toggleStatusbarVisibility':\n                if (this.currentStatusBarVisibility) {\n                    label = nls.localize({ key: 'miHideStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Hide Status Bar\");\n                }\n                else {\n                    label = nls.localize({ key: 'miShowStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Show Status Bar\");\n                }\n                break;\n            case 'workbench.action.toggleActivityBarVisibility':\n                if (this.currentActivityBarVisibility) {\n                    label = nls.localize({ key: 'miHideActivityBar', comment: ['&& denotes a mnemonic'] }, \"Hide &&Activity Bar\");\n                }\n                else {\n                    label = nls.localize({ key: 'miShowActivityBar', comment: ['&& denotes a mnemonic'] }, \"Show &&Activity Bar\");\n                }\n                break;\n            default:\n                break;\n        }\n        return label;\n    };\n    MenubarControl.prototype.createOpenRecentMenuAction = function (recent, isFile) {\n        var _this = this;\n        var label;\n        var uri;\n        var commandId;\n        var typeHint;\n        if (history_1.isRecentFolder(recent)) {\n            uri = recent.folderUri;\n            label = recent.label || this.labelService.getWorkspaceLabel(uri, { verbose: true });\n            commandId = 'openRecentFolder';\n            typeHint = 'folder';\n        }\n        else if (history_1.isRecentWorkspace(recent)) {\n            uri = recent.workspace.configPath;\n            label = recent.label || this.labelService.getWorkspaceLabel(recent.workspace, { verbose: true });\n            commandId = 'openRecentWorkspace';\n            typeHint = 'file';\n        }\n        else {\n            uri = recent.fileUri;\n            label = recent.label || this.labelService.getUriLabel(uri);\n            commandId = 'openRecentFile';\n            typeHint = 'file';\n        }\n        var ret = new actions_2.Action(commandId, labels_1.unmnemonicLabel(label), undefined, undefined, function (event) {\n            var openInNewWindow = event && ((!browser_1.isMacintosh && (event.ctrlKey || event.shiftKey)) || (browser_1.isMacintosh && (event.metaKey || event.altKey)));\n            return _this.windowService.openWindow([{ uri: uri, typeHint: typeHint }], {\n                forceNewWindow: openInNewWindow,\n                forceOpenWorkspaceAsFile: isFile\n            });\n        });\n        return objects_1.assign(ret, { uri: uri });\n    };\n    /* Custom Menu takes actions */\n    MenubarControl.prototype.getOpenRecentActions = function () {\n        if (!this.recentlyOpened) {\n            return [];\n        }\n        var _a = this.recentlyOpened, workspaces = _a.workspaces, files = _a.files;\n        var result = [];\n        if (workspaces.length > 0) {\n            for (var i = 0; i < MenubarControl.MAX_MENU_RECENT_ENTRIES && i < workspaces.length; i++) {\n                result.push(this.createOpenRecentMenuAction(workspaces[i], false));\n            }\n            result.push(new actionbar_1.Separator());\n        }\n        if (files.length > 0) {\n            for (var i = 0; i < MenubarControl.MAX_MENU_RECENT_ENTRIES && i < files.length; i++) {\n                result.push(this.createOpenRecentMenuAction(files[i], true));\n            }\n            result.push(new actionbar_1.Separator());\n        }\n        return result;\n    };\n    MenubarControl.prototype.transformOpenRecentAction = function (action) {\n        if (action instanceof actionbar_1.Separator) {\n            return { id: 'vscode.menubar.separator' };\n        }\n        return {\n            id: action.id,\n            uri: action.uri,\n            enabled: action.enabled,\n            label: action.label\n        };\n    };\n    MenubarControl.prototype.getUpdateAction = function () {\n        var _this = this;\n        var state = this.updateService.state;\n        switch (state.type) {\n            case update_1.StateType.Uninitialized:\n                return null;\n            case update_1.StateType.Idle:\n                var windowId_1 = this.windowService.getCurrentWindowId();\n                return new actions_2.Action('update.check', nls.localize({ key: 'checkForUpdates', comment: ['&& denotes a mnemonic'] }, \"Check for &&Updates...\"), undefined, true, function () {\n                    return _this.updateService.checkForUpdates({ windowId: windowId_1 });\n                });\n            case update_1.StateType.CheckingForUpdates:\n                return new actions_2.Action('update.checking', nls.localize('checkingForUpdates', \"Checking For Updates...\"), undefined, false);\n            case update_1.StateType.AvailableForDownload:\n                return new actions_2.Action('update.downloadNow', nls.localize({ key: 'download now', comment: ['&& denotes a mnemonic'] }, \"D&&ownload Now\"), undefined, true, function () {\n                    return _this.updateService.downloadUpdate();\n                });\n            case update_1.StateType.Downloading:\n                return new actions_2.Action('update.downloading', nls.localize('DownloadingUpdate', \"Downloading Update...\"), undefined, false);\n            case update_1.StateType.Downloaded:\n                return new actions_2.Action('update.install', nls.localize({ key: 'installUpdate...', comment: ['&& denotes a mnemonic'] }, \"Install &&Update...\"), undefined, true, function () {\n                    return _this.updateService.applyUpdate();\n                });\n            case update_1.StateType.Updating:\n                return new actions_2.Action('update.updating', nls.localize('installingUpdate', \"Installing Update...\"), undefined, false);\n            case update_1.StateType.Ready:\n                return new actions_2.Action('update.restart', nls.localize({ key: 'restartToUpdate', comment: ['&& denotes a mnemonic'] }, \"Restart to &&Update\"), undefined, true, function () {\n                    return _this.updateService.quitAndInstall();\n                });\n        }\n    };\n    MenubarControl.prototype.insertActionsBefore = function (nextAction, target) {\n        switch (nextAction.id) {\n            case 'workbench.action.openRecent':\n                target.push.apply(target, this.getOpenRecentActions());\n                break;\n            case 'workbench.action.showAboutDialog':\n                if (!(platform_1.isNative && browser_1.isMacintosh)) {\n                    var updateAction = this.getUpdateAction();\n                    if (updateAction) {\n                        updateAction.label = labels_1.mnemonicMenuLabel(updateAction.label);\n                        target.push(updateAction);\n                        target.push(new actionbar_1.Separator());\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    MenubarControl.prototype.setupCustomMenubar = function (firstTime) {\n        var _this = this;\n        if (firstTime) {\n            this.menubar = this._register(new menubar_2.MenuBar(this.container, {\n                enableMnemonics: this.currentEnableMenuBarMnemonics,\n                visibility: this.currentMenubarVisibility,\n                getKeybinding: function (action) { return _this.keybindingService.lookupKeybinding(action.id); },\n            }));\n            this.accessibilityService.alwaysUnderlineAccessKeys().then(function (val) {\n                _this.alwaysOnMnemonics = val;\n                _this.menubar.update({ enableMnemonics: _this.currentEnableMenuBarMnemonics, visibility: _this.currentMenubarVisibility, getKeybinding: function (action) { return _this.keybindingService.lookupKeybinding(action.id); }, alwaysOnMnemonics: _this.alwaysOnMnemonics });\n            });\n            this._register(this.menubar.onFocusStateChange(function (e) { return _this._onFocusStateChange.fire(e); }));\n            this._register(this.menubar.onVisibilityChange(function (e) { return _this._onVisibilityChange.fire(e); }));\n            this._register(styler_1.attachMenuStyler(this.menubar, this.themeService));\n        }\n        else {\n            this.menubar.update({ enableMnemonics: this.currentEnableMenuBarMnemonics, visibility: this.currentMenubarVisibility, getKeybinding: function (action) { return _this.keybindingService.lookupKeybinding(action.id); }, alwaysOnMnemonics: this.alwaysOnMnemonics });\n        }\n        // Update the menu actions\n        var updateActions = function (menu, target) {\n            target.splice(0);\n            var groups = menu.getActions();\n            for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n                var group = groups_1[_i];\n                var actions = group[1];\n                for (var _a = 0, actions_3 = actions; _a < actions_3.length; _a++) {\n                    var action = actions_3[_a];\n                    _this.insertActionsBefore(action, target);\n                    if (action instanceof actions_1.SubmenuItemAction) {\n                        var submenu = _this.menuService.createMenu(action.item.submenu, _this.contextKeyService);\n                        var submenuActions = [];\n                        updateActions(submenu, submenuActions);\n                        target.push(new menu_1.SubmenuAction(labels_1.mnemonicMenuLabel(action.label), submenuActions));\n                        submenu.dispose();\n                    }\n                    else {\n                        action.label = labels_1.mnemonicMenuLabel(_this.calculateActionLabel(action));\n                        target.push(action);\n                    }\n                }\n                target.push(new actionbar_1.Separator());\n            }\n            target.pop();\n        };\n        var _loop_1 = function (title) {\n            var menu = this_1.topLevelMenus[title];\n            if (firstTime && menu) {\n                this_1._register(menu.onDidChange(function () {\n                    var actions = [];\n                    updateActions(menu, actions);\n                    _this.menubar.updateMenu({ actions: actions, label: labels_1.mnemonicMenuLabel(_this.topLevelTitles[title]) });\n                }));\n            }\n            var actions = [];\n            if (menu) {\n                updateActions(menu, actions);\n            }\n            if (!firstTime) {\n                this_1.menubar.updateMenu({ actions: actions, label: labels_1.mnemonicMenuLabel(this_1.topLevelTitles[title]) });\n            }\n            else {\n                this_1.menubar.push({ actions: actions, label: labels_1.mnemonicMenuLabel(this_1.topLevelTitles[title]) });\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = Object.keys(this.topLevelMenus); _i < _a.length; _i++) {\n            var title = _a[_i];\n            _loop_1(title);\n        }\n    };\n    MenubarControl.prototype.getMenubarKeybinding = function (id) {\n        var binding = this.keybindingService.lookupKeybinding(id);\n        if (!binding) {\n            return undefined;\n        }\n        // first try to resolve a native accelerator\n        var electronAccelerator = binding.getElectronAccelerator();\n        if (electronAccelerator) {\n            return { label: electronAccelerator, userSettingsLabel: types_1.withNullAsUndefined(binding.getUserSettingsLabel()) };\n        }\n        // we need this fallback to support keybindings that cannot show in electron menus (e.g. chords)\n        var acceleratorLabel = binding.getLabel();\n        if (acceleratorLabel) {\n            return { label: acceleratorLabel, isNative: false, userSettingsLabel: types_1.withNullAsUndefined(binding.getUserSettingsLabel()) };\n        }\n        return undefined;\n    };\n    MenubarControl.prototype.populateMenuItems = function (menu, menuToPopulate, keybindings) {\n        var _this = this;\n        var groups = menu.getActions();\n        for (var _i = 0, groups_2 = groups; _i < groups_2.length; _i++) {\n            var group = groups_2[_i];\n            var actions = group[1];\n            actions.forEach(function (menuItem) {\n                var _a;\n                if (menuItem instanceof actions_1.SubmenuItemAction) {\n                    var submenu = { items: [] };\n                    var menuToDispose = _this.menuService.createMenu(menuItem.item.submenu, _this.contextKeyService);\n                    _this.populateMenuItems(menuToDispose, submenu, keybindings);\n                    var menubarSubmenuItem = {\n                        id: menuItem.id,\n                        label: menuItem.label,\n                        submenu: submenu\n                    };\n                    menuToPopulate.items.push(menubarSubmenuItem);\n                    menuToDispose.dispose();\n                }\n                else {\n                    if (menuItem.id === 'workbench.action.openRecent') {\n                        var actions_4 = _this.getOpenRecentActions().map(_this.transformOpenRecentAction);\n                        (_a = menuToPopulate.items).push.apply(_a, actions_4);\n                    }\n                    var menubarMenuItem = {\n                        id: menuItem.id,\n                        label: menuItem.label\n                    };\n                    if (menuItem.checked) {\n                        menubarMenuItem.checked = true;\n                    }\n                    if (!menuItem.enabled) {\n                        menubarMenuItem.enabled = false;\n                    }\n                    menubarMenuItem.label = _this.calculateActionLabel(menubarMenuItem);\n                    keybindings[menuItem.id] = _this.getMenubarKeybinding(menuItem.id);\n                    menuToPopulate.items.push(menubarMenuItem);\n                }\n            });\n            menuToPopulate.items.push({ id: 'vscode.menubar.separator' });\n        }\n        if (menuToPopulate.items.length > 0) {\n            menuToPopulate.items.pop();\n        }\n    };\n    MenubarControl.prototype.getAdditionalKeybindings = function () {\n        var keybindings = {};\n        if (browser_1.isMacintosh) {\n            keybindings['workbench.action.quit'] = (this.getMenubarKeybinding('workbench.action.quit'));\n        }\n        return keybindings;\n    };\n    MenubarControl.prototype.getMenubarMenus = function (menubarData) {\n        if (!menubarData) {\n            return false;\n        }\n        menubarData.keybindings = this.getAdditionalKeybindings();\n        for (var _i = 0, _a = Object.keys(this.topLevelMenus); _i < _a.length; _i++) {\n            var topLevelMenuName = _a[_i];\n            var menu = this.topLevelMenus[topLevelMenuName];\n            if (menu) {\n                var menubarMenu = { items: [] };\n                this.populateMenuItems(menu, menubarMenu, menubarData.keybindings);\n                if (menubarMenu.items.length === 0) {\n                    // Menus are incomplete\n                    return false;\n                }\n                menubarData.menus[topLevelMenuName] = menubarMenu;\n            }\n        }\n        return true;\n    };\n    Object.defineProperty(MenubarControl.prototype, \"onVisibilityChange\", {\n        get: function () {\n            return this._onVisibilityChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MenubarControl.prototype, \"onFocusStateChange\", {\n        get: function () {\n            return this._onFocusStateChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MenubarControl.prototype.layout = function (dimension) {\n        var _this = this;\n        if (this.container) {\n            this.container.style.height = dimension.height + \"px\";\n        }\n        if (this.menubar) {\n            this.menubar.update({ enableMnemonics: this.currentEnableMenuBarMnemonics, visibility: this.currentMenubarVisibility, getKeybinding: function (action) { return _this.keybindingService.lookupKeybinding(action.id); }, alwaysOnMnemonics: this.alwaysOnMnemonics });\n        }\n    };\n    MenubarControl.prototype.getMenubarItemsDimensions = function () {\n        if (this.menubar) {\n            return new DOM.Dimension(this.menubar.getWidth(), this.menubar.getHeight());\n        }\n        return new DOM.Dimension(0, 0);\n    };\n    MenubarControl.prototype.create = function (parent) {\n        this.container = parent;\n        // Build the menubar\n        if (this.container) {\n            if (!(platform_1.isNative && browser_1.isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n                this.doUpdateMenubar(true);\n            }\n        }\n        return this.container;\n    };\n    MenubarControl.MAX_MENU_RECENT_ENTRIES = 10;\n    MenubarControl = tslib_1.__decorate([\n        tslib_1.__param(0, themeService_1.IThemeService),\n        tslib_1.__param(1, menubar_1.IMenubarService),\n        tslib_1.__param(2, actions_1.IMenuService),\n        tslib_1.__param(3, windows_1.IWindowService),\n        tslib_1.__param(4, windows_1.IWindowsService),\n        tslib_1.__param(5, contextkey_1.IContextKeyService),\n        tslib_1.__param(6, keybinding_1.IKeybindingService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, label_1.ILabelService),\n        tslib_1.__param(9, update_1.IUpdateService),\n        tslib_1.__param(10, storage_1.IStorageService),\n        tslib_1.__param(11, notification_1.INotificationService),\n        tslib_1.__param(12, preferences_1.IPreferencesService),\n        tslib_1.__param(13, environment_1.IEnvironmentService),\n        tslib_1.__param(14, accessibility_1.IAccessibilityService)\n    ], MenubarControl);\n    return MenubarControl;\n}(lifecycle_1.Disposable));\nexports.MenubarControl = MenubarControl;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var menubarActiveWindowFgColor = theme.getColor(theme_1.TITLE_BAR_ACTIVE_FOREGROUND);\n    if (menubarActiveWindowFgColor) {\n        collector.addRule(\"\\n\\t\\t.monaco-workbench .menubar > .menubar-menu-button {\\n\\t\\t\\tcolor: \" + menubarActiveWindowFgColor + \";\\n\\t\\t}\\n\\n\\t\\t.monaco-workbench .menubar .toolbar-toggle-more {\\n\\t\\t\\tbackground-color: \" + menubarActiveWindowFgColor + \"\\n\\t\\t}\\n\\t\\t\");\n    }\n    var menubarInactiveWindowFgColor = theme.getColor(theme_1.TITLE_BAR_INACTIVE_FOREGROUND);\n    if (menubarInactiveWindowFgColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .menubar.inactive > .menubar-menu-button {\\n\\t\\t\\t\\tcolor: \" + menubarInactiveWindowFgColor + \";\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .menubar.inactive > .menubar-menu-button .toolbar-toggle-more {\\n\\t\\t\\t\\tbackground-color: \" + menubarInactiveWindowFgColor + \"\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    var menubarSelectedFgColor = theme.getColor(theme_1.MENUBAR_SELECTION_FOREGROUND);\n    if (menubarSelectedFgColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button.open,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:focus,\\n\\t\\t\\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover {\\n\\t\\t\\t\\tcolor: \" + menubarSelectedFgColor + \";\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .menubar  > .menubar-menu-button.open .toolbar-toggle-more,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:focus .toolbar-toggle-more,\\n\\t\\t\\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover .toolbar-toggle-more {\\n\\t\\t\\t\\tbackground-color: \" + menubarSelectedFgColor + \"\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    var menubarSelectedBgColor = theme.getColor(theme_1.MENUBAR_SELECTION_BACKGROUND);\n    if (menubarSelectedBgColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button.open,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:focus,\\n\\t\\t\\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover {\\n\\t\\t\\t\\tbackground-color: \" + menubarSelectedBgColor + \";\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    var menubarSelectedBorderColor = theme.getColor(theme_1.MENUBAR_SELECTION_BORDER);\n    if (menubarSelectedBorderColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:hover {\\n\\t\\t\\t\\toutline: dashed 1px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button.open,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:focus {\\n\\t\\t\\t\\toutline: solid 1px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button.open,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:focus,\\n\\t\\t\\t.monaco-workbench .menubar > .menubar-menu-button:hover {\\n\\t\\t\\t\\toutline-offset: -1px;\\n\\t\\t\\t\\toutline-color: \" + menubarSelectedBorderColor + \";\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/titlebar/menubarControl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/titlebar/menubarControl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IMenubarMenu, IMenubarMenuItemAction, IMenubarMenuItemSubmenu, IMenubarKeybinding, IMenubarService, IMenubarData, MenubarMenuItem } from 'vs/platform/menubar/common/menubar';\nimport { IMenuService, MenuId, IMenu, SubmenuItemAction } from 'vs/platform/actions/common/actions';\nimport { registerThemingParticipant, ITheme, ICssStyleCollector, IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWindowService, MenuBarVisibility, IWindowsService, getTitleBarStyle, URIType } from 'vs/platform/windows/common/windows';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport * as DOM from 'vs/base/browser/dom';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { isNative } from 'vs/base/common/platform';\nimport { isMacintosh, isLinux } from 'vs/base/browser/browser';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IRecentlyOpened, isRecentFolder, IRecent, isRecentWorkspace } from 'vs/platform/history/common/history';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { MENUBAR_SELECTION_FOREGROUND, MENUBAR_SELECTION_BACKGROUND, MENUBAR_SELECTION_BORDER, TITLE_BAR_ACTIVE_FOREGROUND, TITLE_BAR_INACTIVE_FOREGROUND } from 'vs/workbench/common/theme';\nimport { URI } from 'vs/base/common/uri';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IUpdateService, StateType } from 'vs/platform/update/common/update';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { MenuBar } from 'vs/base/browser/ui/menu/menubar';\nimport { SubmenuAction } from 'vs/base/browser/ui/menu/menu';\nimport { attachMenuStyler } from 'vs/platform/theme/common/styler';\nimport { assign } from 'vs/base/common/objects';\nimport { mnemonicMenuLabel, unmnemonicLabel } from 'vs/base/common/labels';\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport class MenubarControl extends Disposable {\n\n\tprivate keys = [\n\t\t'files.autoSave',\n\t\t'window.menuBarVisibility',\n\t\t'editor.multiCursorModifier',\n\t\t'workbench.sideBar.location',\n\t\t'workbench.statusBar.visible',\n\t\t'workbench.activityBar.visible',\n\t\t'window.enableMenuBarMnemonics',\n\t\t'window.nativeTabs'\n\t];\n\n\tprivate topLevelMenus: {\n\t\t'File': IMenu;\n\t\t'Edit': IMenu;\n\t\t'Selection': IMenu;\n\t\t'View': IMenu;\n\t\t'Go': IMenu;\n\t\t'Debug': IMenu;\n\t\t'Terminal': IMenu;\n\t\t'Window'?: IMenu;\n\t\t'Help': IMenu;\n\t\t[index: string]: IMenu | undefined;\n\t};\n\n\tprivate topLevelTitles = {\n\t\t'File': nls.localize({ key: 'mFile', comment: ['&& denotes a mnemonic'] }, \"&&File\"),\n\t\t'Edit': nls.localize({ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, \"&&Edit\"),\n\t\t'Selection': nls.localize({ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, \"&&Selection\"),\n\t\t'View': nls.localize({ key: 'mView', comment: ['&& denotes a mnemonic'] }, \"&&View\"),\n\t\t'Go': nls.localize({ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, \"&&Go\"),\n\t\t'Debug': nls.localize({ key: 'mDebug', comment: ['&& denotes a mnemonic'] }, \"&&Debug\"),\n\t\t'Terminal': nls.localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\"),\n\t\t'Help': nls.localize({ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, \"&&Help\")\n\t};\n\n\tprivate menubar: MenuBar;\n\tprivate menuUpdater: RunOnceScheduler;\n\tprivate container: HTMLElement;\n\tprivate recentlyOpened: IRecentlyOpened;\n\tprivate alwaysOnMnemonics: boolean;\n\n\tprivate readonly _onVisibilityChange: Emitter<boolean>;\n\tprivate readonly _onFocusStateChange: Emitter<boolean>;\n\n\tprivate static MAX_MENU_RECENT_ENTRIES = 10;\n\n\tconstructor(\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IMenubarService private readonly menubarService: IMenubarService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService\n\t) {\n\n\t\tsuper();\n\n\t\tthis.topLevelMenus = {\n\t\t\t'File': this._register(this.menuService.createMenu(MenuId.MenubarFileMenu, this.contextKeyService)),\n\t\t\t'Edit': this._register(this.menuService.createMenu(MenuId.MenubarEditMenu, this.contextKeyService)),\n\t\t\t'Selection': this._register(this.menuService.createMenu(MenuId.MenubarSelectionMenu, this.contextKeyService)),\n\t\t\t'View': this._register(this.menuService.createMenu(MenuId.MenubarViewMenu, this.contextKeyService)),\n\t\t\t'Go': this._register(this.menuService.createMenu(MenuId.MenubarGoMenu, this.contextKeyService)),\n\t\t\t'Debug': this._register(this.menuService.createMenu(MenuId.MenubarDebugMenu, this.contextKeyService)),\n\t\t\t'Terminal': this._register(this.menuService.createMenu(MenuId.MenubarTerminalMenu, this.contextKeyService)),\n\t\t\t'Help': this._register(this.menuService.createMenu(MenuId.MenubarHelpMenu, this.contextKeyService))\n\t\t};\n\n\t\tif (isNative && isMacintosh) {\n\t\t\tthis.topLevelMenus['Preferences'] = this._register(this.menuService.createMenu(MenuId.MenubarPreferencesMenu, this.contextKeyService));\n\t\t}\n\n\t\tthis.menuUpdater = this._register(new RunOnceScheduler(() => this.doUpdateMenubar(false), 200));\n\n\t\tthis._onVisibilityChange = this._register(new Emitter<boolean>());\n\t\tthis._onFocusStateChange = this._register(new Emitter<boolean>());\n\n\t\tif ((isNative && isMacintosh) || this.currentTitlebarStyleSetting !== 'custom') {\n\t\t\tfor (const topLevelMenuName of Object.keys(this.topLevelMenus)) {\n\t\t\t\tconst menu = this.topLevelMenus[topLevelMenuName];\n\t\t\t\tif (menu) {\n\t\t\t\t\tthis._register(menu.onDidChange(() => this.updateMenubar()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.windowService.getRecentlyOpened().then((recentlyOpened) => {\n\t\t\tthis.recentlyOpened = recentlyOpened;\n\n\t\t\tif ((isNative && isMacintosh) || this.currentTitlebarStyleSetting !== 'custom') {\n\t\t\t\tthis.doUpdateMenubar(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.notifyExistingLinuxUser();\n\n\t\tthis.notifyUserOfCustomMenubarAccessibility();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate get currentEnableMenuBarMnemonics(): boolean {\n\t\tlet enableMenuBarMnemonics = this.configurationService.getValue<boolean>('window.enableMenuBarMnemonics');\n\t\tif (typeof enableMenuBarMnemonics !== 'boolean') {\n\t\t\tenableMenuBarMnemonics = true;\n\t\t}\n\n\t\treturn enableMenuBarMnemonics;\n\t}\n\n\tprivate get currentSidebarPosition(): string {\n\t\treturn this.configurationService.getValue<string>('workbench.sideBar.location');\n\t}\n\n\tprivate get currentStatusBarVisibility(): boolean {\n\t\tlet setting = this.configurationService.getValue<boolean>('workbench.statusBar.visible');\n\t\tif (typeof setting !== 'boolean') {\n\t\t\tsetting = true;\n\t\t}\n\n\t\treturn setting;\n\t}\n\n\tprivate get currentActivityBarVisibility(): boolean {\n\t\tlet setting = this.configurationService.getValue<boolean>('workbench.activityBar.visible');\n\t\tif (typeof setting !== 'boolean') {\n\t\t\tsetting = true;\n\t\t}\n\n\t\treturn setting;\n\t}\n\n\tprivate get currentMenubarVisibility(): MenuBarVisibility {\n\t\treturn this.configurationService.getValue<MenuBarVisibility>('window.menuBarVisibility');\n\t}\n\n\tprivate get currentTitlebarStyleSetting(): string {\n\t\treturn getTitleBarStyle(this.configurationService, this.environmentService);\n\t}\n\n\tprivate onDidChangeWindowFocus(hasFocus: boolean): void {\n\t\tif (this.container) {\n\t\t\tif (hasFocus) {\n\t\t\t\tDOM.removeClass(this.container, 'inactive');\n\t\t\t} else {\n\t\t\t\tDOM.addClass(this.container, 'inactive');\n\t\t\t\tthis.menubar.blur();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onConfigurationUpdated(event: IConfigurationChangeEvent): void {\n\t\tif (this.keys.some(key => event.affectsConfiguration(key))) {\n\t\t\tthis.updateMenubar();\n\t\t}\n\n\t\tif (event.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\tthis.notifyUserOfCustomMenubarAccessibility();\n\t\t}\n\t}\n\n\tprivate onRecentlyOpenedChange(): void {\n\t\tthis.windowService.getRecentlyOpened().then(recentlyOpened => {\n\t\t\tthis.recentlyOpened = recentlyOpened;\n\t\t\tthis.updateMenubar();\n\t\t});\n\t}\n\n\t// TODO@sbatten remove after feb19\n\tprivate notifyExistingLinuxUser(): void {\n\t\tif (!isLinux) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isNewUser = !this.storageService.get('telemetry.lastSessionDate', StorageScope.GLOBAL);\n\t\tconst hasBeenNotified = this.storageService.getBoolean('menubar/linuxTitlebarRevertNotified', StorageScope.GLOBAL, false);\n\t\tconst titleBarConfiguration = this.configurationService.inspect('window.titleBarStyle');\n\t\tconst customShown = getTitleBarStyle(this.configurationService, this.environmentService) === 'custom';\n\n\t\tif (!hasBeenNotified) {\n\t\t\tthis.storageService.store('menubar/linuxTitlebarRevertNotified', true, StorageScope.GLOBAL);\n\t\t}\n\n\t\tif (isNewUser || hasBeenNotified || (titleBarConfiguration && titleBarConfiguration.user) || customShown) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = nls.localize('menubar.linuxTitlebarRevertNotification', \"We have updated the default title bar on Linux to use the native setting. If you prefer, you can go back to the custom setting. More information is available in our [online documentation](https://go.microsoft.com/fwlink/?linkid=2074137).\");\n\t\tthis.notificationService.prompt(Severity.Info, message, [\n\t\t\t{\n\t\t\t\tlabel: nls.localize('goToSetting', \"Open Settings\"),\n\t\t\t\trun: () => {\n\t\t\t\t\treturn this.preferencesService.openGlobalSettings(undefined, { query: 'window.titleBarStyle' });\n\t\t\t\t}\n\t\t\t}\n\t\t]);\n\t}\n\n\tprivate notifyUserOfCustomMenubarAccessibility(): void {\n\t\tif (isMacintosh) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasBeenNotified = this.storageService.getBoolean('menubar/accessibleMenubarNotified', StorageScope.GLOBAL, false);\n\t\tconst usingCustomMenubar = getTitleBarStyle(this.configurationService, this.environmentService) === 'custom';\n\t\tconst detected = this.accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\tconst config = this.configurationService.getValue('editor.accessibilitySupport');\n\n\t\tif (hasBeenNotified || usingCustomMenubar || !(config === 'on' || (config === 'auto' && detected))) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = nls.localize('menubar.customTitlebarAccessibilityNotification', \"Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.\");\n\t\tthis.notificationService.prompt(Severity.Info, message, [\n\t\t\t{\n\t\t\t\tlabel: nls.localize('goToSetting', \"Open Settings\"),\n\t\t\t\trun: () => {\n\t\t\t\t\treturn this.preferencesService.openGlobalSettings(undefined, { query: 'window.titleBarStyle' });\n\t\t\t\t}\n\t\t\t}\n\t\t]);\n\n\t\tthis.storageService.store('menubar/accessibleMenubarNotified', true, StorageScope.GLOBAL);\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Update when config changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\n\t\t// Listen to update service\n\t\tthis.updateService.onStateChange(() => this.updateMenubar());\n\n\t\t// Listen for changes in recently opened menu\n\t\tthis._register(this.windowsService.onRecentlyOpenedChange(() => { this.onRecentlyOpenedChange(); }));\n\n\t\t// Listen to keybindings change\n\t\tthis._register(this.keybindingService.onDidUpdateKeybindings(() => this.updateMenubar()));\n\n\t\t// These listeners only apply when the custom menubar is being used\n\t\tif (!(isNative && isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n\t\t\t// Listen for window focus changes\n\t\t\tthis._register(this.windowService.onDidChangeFocus(e => this.onDidChangeWindowFocus(e)));\n\n\t\t\tthis._register(this.windowService.onDidChangeMaximize(e => this.updateMenubar()));\n\n\t\t\tthis._register(DOM.addDisposableListener(window, DOM.EventType.RESIZE, () => {\n\t\t\t\tthis.menubar.blur();\n\t\t\t}));\n\t\t}\n\n\t\t// Update recent menu items on formatter registration\n\t\tthis._register(this.labelService.onDidChangeFormatters(() => { this.onRecentlyOpenedChange(); }));\n\t}\n\n\tprivate doUpdateMenubar(firstTime: boolean): void {\n\t\tif (!(isNative && isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n\t\t\tthis.setupCustomMenubar(firstTime);\n\t\t} else {\n\t\t\t// Send menus to main process to be rendered by Electron\n\t\t\tconst menubarData = { menus: {}, keybindings: {} };\n\t\t\tif (this.getMenubarMenus(menubarData)) {\n\t\t\t\tthis.menubarService.updateMenubar(this.windowService.getCurrentWindowId(), menubarData);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateMenubar(): void {\n\t\tthis.menuUpdater.schedule();\n\t}\n\n\tprivate calculateActionLabel(action: IAction | IMenubarMenuItemAction): string {\n\t\tlet label = action.label;\n\t\tswitch (action.id) {\n\t\t\tcase 'workbench.action.toggleSidebarPosition':\n\t\t\t\tif (this.currentSidebarPosition !== 'right') {\n\t\t\t\t\tlabel = nls.localize({ key: 'miMoveSidebarRight', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Right\");\n\t\t\t\t} else {\n\t\t\t\t\tlabel = nls.localize({ key: 'miMoveSidebarLeft', comment: ['&& denotes a mnemonic'] }, \"&&Move Side Bar Left\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'workbench.action.toggleStatusbarVisibility':\n\t\t\t\tif (this.currentStatusBarVisibility) {\n\t\t\t\t\tlabel = nls.localize({ key: 'miHideStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Hide Status Bar\");\n\t\t\t\t} else {\n\t\t\t\t\tlabel = nls.localize({ key: 'miShowStatusbar', comment: ['&& denotes a mnemonic'] }, \"&&Show Status Bar\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'workbench.action.toggleActivityBarVisibility':\n\t\t\t\tif (this.currentActivityBarVisibility) {\n\t\t\t\t\tlabel = nls.localize({ key: 'miHideActivityBar', comment: ['&& denotes a mnemonic'] }, \"Hide &&Activity Bar\");\n\t\t\t\t} else {\n\t\t\t\t\tlabel = nls.localize({ key: 'miShowActivityBar', comment: ['&& denotes a mnemonic'] }, \"Show &&Activity Bar\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn label;\n\t}\n\n\tprivate createOpenRecentMenuAction(recent: IRecent, isFile: boolean): IAction & { uri: URI } {\n\n\t\tlet label: string;\n\t\tlet uri: URI;\n\t\tlet commandId: string;\n\t\tlet typeHint: URIType | undefined;\n\n\t\tif (isRecentFolder(recent)) {\n\t\t\turi = recent.folderUri;\n\t\t\tlabel = recent.label || this.labelService.getWorkspaceLabel(uri, { verbose: true });\n\t\t\tcommandId = 'openRecentFolder';\n\t\t\ttypeHint = 'folder';\n\t\t} else if (isRecentWorkspace(recent)) {\n\t\t\turi = recent.workspace.configPath;\n\t\t\tlabel = recent.label || this.labelService.getWorkspaceLabel(recent.workspace, { verbose: true });\n\t\t\tcommandId = 'openRecentWorkspace';\n\t\t\ttypeHint = 'file';\n\t\t} else {\n\t\t\turi = recent.fileUri;\n\t\t\tlabel = recent.label || this.labelService.getUriLabel(uri);\n\t\t\tcommandId = 'openRecentFile';\n\t\t\ttypeHint = 'file';\n\t\t}\n\n\t\tconst ret: IAction = new Action(commandId, unmnemonicLabel(label), undefined, undefined, (event) => {\n\t\t\tconst openInNewWindow = event && ((!isMacintosh && (event.ctrlKey || event.shiftKey)) || (isMacintosh && (event.metaKey || event.altKey)));\n\n\t\t\treturn this.windowService.openWindow([{ uri, typeHint }], {\n\t\t\t\tforceNewWindow: openInNewWindow,\n\t\t\t\tforceOpenWorkspaceAsFile: isFile\n\t\t\t});\n\t\t});\n\n\t\treturn assign(ret, { uri: uri });\n\t}\n\n\t/* Custom Menu takes actions */\n\tprivate getOpenRecentActions(): IAction[] {\n\t\tif (!this.recentlyOpened) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst { workspaces, files } = this.recentlyOpened;\n\n\t\tconst result: IAction[] = [];\n\n\t\tif (workspaces.length > 0) {\n\t\t\tfor (let i = 0; i < MenubarControl.MAX_MENU_RECENT_ENTRIES && i < workspaces.length; i++) {\n\t\t\t\tresult.push(this.createOpenRecentMenuAction(workspaces[i], false));\n\t\t\t}\n\n\t\t\tresult.push(new Separator());\n\t\t}\n\n\t\tif (files.length > 0) {\n\t\t\tfor (let i = 0; i < MenubarControl.MAX_MENU_RECENT_ENTRIES && i < files.length; i++) {\n\t\t\t\tresult.push(this.createOpenRecentMenuAction(files[i], true));\n\t\t\t}\n\n\t\t\tresult.push(new Separator());\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate transformOpenRecentAction(action: Separator | (IAction & { uri: URI })): MenubarMenuItem {\n\t\tif (action instanceof Separator) {\n\t\t\treturn { id: 'vscode.menubar.separator' };\n\t\t}\n\n\t\treturn {\n\t\t\tid: action.id,\n\t\t\turi: action.uri,\n\t\t\tenabled: action.enabled,\n\t\t\tlabel: action.label\n\t\t};\n\t}\n\n\tprivate getUpdateAction(): IAction | null {\n\t\tconst state = this.updateService.state;\n\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Uninitialized:\n\t\t\t\treturn null;\n\n\t\t\tcase StateType.Idle:\n\t\t\t\tconst windowId = this.windowService.getCurrentWindowId();\n\t\t\t\treturn new Action('update.check', nls.localize({ key: 'checkForUpdates', comment: ['&& denotes a mnemonic'] }, \"Check for &&Updates...\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.checkForUpdates({ windowId }));\n\n\t\t\tcase StateType.CheckingForUpdates:\n\t\t\t\treturn new Action('update.checking', nls.localize('checkingForUpdates', \"Checking For Updates...\"), undefined, false);\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\treturn new Action('update.downloadNow', nls.localize({ key: 'download now', comment: ['&& denotes a mnemonic'] }, \"D&&ownload Now\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.downloadUpdate());\n\n\t\t\tcase StateType.Downloading:\n\t\t\t\treturn new Action('update.downloading', nls.localize('DownloadingUpdate', \"Downloading Update...\"), undefined, false);\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\treturn new Action('update.install', nls.localize({ key: 'installUpdate...', comment: ['&& denotes a mnemonic'] }, \"Install &&Update...\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.applyUpdate());\n\n\t\t\tcase StateType.Updating:\n\t\t\t\treturn new Action('update.updating', nls.localize('installingUpdate', \"Installing Update...\"), undefined, false);\n\n\t\t\tcase StateType.Ready:\n\t\t\t\treturn new Action('update.restart', nls.localize({ key: 'restartToUpdate', comment: ['&& denotes a mnemonic'] }, \"Restart to &&Update\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.quitAndInstall());\n\t\t}\n\t}\n\n\tprivate insertActionsBefore(nextAction: IAction, target: IAction[]): void {\n\t\tswitch (nextAction.id) {\n\t\t\tcase 'workbench.action.openRecent':\n\t\t\t\ttarget.push(...this.getOpenRecentActions());\n\t\t\t\tbreak;\n\n\t\t\tcase 'workbench.action.showAboutDialog':\n\t\t\t\tif (!(isNative && isMacintosh)) {\n\t\t\t\t\tconst updateAction = this.getUpdateAction();\n\t\t\t\t\tif (updateAction) {\n\t\t\t\t\t\tupdateAction.label = mnemonicMenuLabel(updateAction.label);\n\t\t\t\t\t\ttarget.push(updateAction);\n\t\t\t\t\t\ttarget.push(new Separator());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate setupCustomMenubar(firstTime: boolean): void {\n\t\tif (firstTime) {\n\t\t\tthis.menubar = this._register(new MenuBar(\n\t\t\t\tthis.container, {\n\t\t\t\t\tenableMnemonics: this.currentEnableMenuBarMnemonics,\n\t\t\t\t\tvisibility: this.currentMenubarVisibility,\n\t\t\t\t\tgetKeybinding: (action) => this.keybindingService.lookupKeybinding(action.id),\n\t\t\t\t}\n\t\t\t));\n\n\t\t\tthis.accessibilityService.alwaysUnderlineAccessKeys().then(val => {\n\t\t\t\tthis.alwaysOnMnemonics = val;\n\t\t\t\tthis.menubar.update({ enableMnemonics: this.currentEnableMenuBarMnemonics, visibility: this.currentMenubarVisibility, getKeybinding: (action) => this.keybindingService.lookupKeybinding(action.id), alwaysOnMnemonics: this.alwaysOnMnemonics });\n\t\t\t});\n\n\t\t\tthis._register(this.menubar.onFocusStateChange(e => this._onFocusStateChange.fire(e)));\n\t\t\tthis._register(this.menubar.onVisibilityChange(e => this._onVisibilityChange.fire(e)));\n\n\t\t\tthis._register(attachMenuStyler(this.menubar, this.themeService));\n\t\t} else {\n\t\t\tthis.menubar.update({ enableMnemonics: this.currentEnableMenuBarMnemonics, visibility: this.currentMenubarVisibility, getKeybinding: (action) => this.keybindingService.lookupKeybinding(action.id), alwaysOnMnemonics: this.alwaysOnMnemonics });\n\t\t}\n\n\t\t// Update the menu actions\n\t\tconst updateActions = (menu: IMenu, target: IAction[]) => {\n\t\t\ttarget.splice(0);\n\t\t\tlet groups = menu.getActions();\n\t\t\tfor (let group of groups) {\n\t\t\t\tconst [, actions] = group;\n\n\t\t\t\tfor (let action of actions) {\n\t\t\t\t\tthis.insertActionsBefore(action, target);\n\t\t\t\t\tif (action instanceof SubmenuItemAction) {\n\t\t\t\t\t\tconst submenu = this.menuService.createMenu(action.item.submenu, this.contextKeyService);\n\t\t\t\t\t\tconst submenuActions: SubmenuAction[] = [];\n\t\t\t\t\t\tupdateActions(submenu, submenuActions);\n\t\t\t\t\t\ttarget.push(new SubmenuAction(mnemonicMenuLabel(action.label), submenuActions));\n\t\t\t\t\t\tsubmenu.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\taction.label = mnemonicMenuLabel(this.calculateActionLabel(action));\n\t\t\t\t\t\ttarget.push(action);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttarget.push(new Separator());\n\t\t\t}\n\n\t\t\ttarget.pop();\n\t\t};\n\n\t\tfor (const title of Object.keys(this.topLevelMenus)) {\n\t\t\tconst menu = this.topLevelMenus[title];\n\t\t\tif (firstTime && menu) {\n\t\t\t\tthis._register(menu.onDidChange(() => {\n\t\t\t\t\tconst actions: IAction[] = [];\n\t\t\t\t\tupdateActions(menu, actions);\n\t\t\t\t\tthis.menubar.updateMenu({ actions: actions, label: mnemonicMenuLabel(this.topLevelTitles[title]) });\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst actions: IAction[] = [];\n\t\t\tif (menu) {\n\t\t\t\tupdateActions(menu, actions);\n\t\t\t}\n\n\t\t\tif (!firstTime) {\n\t\t\t\tthis.menubar.updateMenu({ actions: actions, label: mnemonicMenuLabel(this.topLevelTitles[title]) });\n\t\t\t} else {\n\t\t\t\tthis.menubar.push({ actions: actions, label: mnemonicMenuLabel(this.topLevelTitles[title]) });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getMenubarKeybinding(id: string): IMenubarKeybinding | undefined {\n\t\tconst binding = this.keybindingService.lookupKeybinding(id);\n\t\tif (!binding) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// first try to resolve a native accelerator\n\t\tconst electronAccelerator = binding.getElectronAccelerator();\n\t\tif (electronAccelerator) {\n\t\t\treturn { label: electronAccelerator, userSettingsLabel: withNullAsUndefined(binding.getUserSettingsLabel()) };\n\t\t}\n\n\t\t// we need this fallback to support keybindings that cannot show in electron menus (e.g. chords)\n\t\tconst acceleratorLabel = binding.getLabel();\n\t\tif (acceleratorLabel) {\n\t\t\treturn { label: acceleratorLabel, isNative: false, userSettingsLabel: withNullAsUndefined(binding.getUserSettingsLabel()) };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate populateMenuItems(menu: IMenu, menuToPopulate: IMenubarMenu, keybindings: { [id: string]: IMenubarKeybinding | undefined }) {\n\t\tlet groups = menu.getActions();\n\t\tfor (let group of groups) {\n\t\t\tconst [, actions] = group;\n\n\t\t\tactions.forEach(menuItem => {\n\n\t\t\t\tif (menuItem instanceof SubmenuItemAction) {\n\t\t\t\t\tconst submenu = { items: [] };\n\t\t\t\t\tconst menuToDispose = this.menuService.createMenu(menuItem.item.submenu, this.contextKeyService);\n\t\t\t\t\tthis.populateMenuItems(menuToDispose, submenu, keybindings);\n\n\t\t\t\t\tlet menubarSubmenuItem: IMenubarMenuItemSubmenu = {\n\t\t\t\t\t\tid: menuItem.id,\n\t\t\t\t\t\tlabel: menuItem.label,\n\t\t\t\t\t\tsubmenu: submenu\n\t\t\t\t\t};\n\n\t\t\t\t\tmenuToPopulate.items.push(menubarSubmenuItem);\n\t\t\t\t\tmenuToDispose.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tif (menuItem.id === 'workbench.action.openRecent') {\n\t\t\t\t\t\tconst actions = this.getOpenRecentActions().map(this.transformOpenRecentAction);\n\t\t\t\t\t\tmenuToPopulate.items.push(...actions);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet menubarMenuItem: IMenubarMenuItemAction = {\n\t\t\t\t\t\tid: menuItem.id,\n\t\t\t\t\t\tlabel: menuItem.label\n\t\t\t\t\t};\n\n\t\t\t\t\tif (menuItem.checked) {\n\t\t\t\t\t\tmenubarMenuItem.checked = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!menuItem.enabled) {\n\t\t\t\t\t\tmenubarMenuItem.enabled = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tmenubarMenuItem.label = this.calculateActionLabel(menubarMenuItem);\n\t\t\t\t\tkeybindings[menuItem.id] = this.getMenubarKeybinding(menuItem.id);\n\t\t\t\t\tmenuToPopulate.items.push(menubarMenuItem);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmenuToPopulate.items.push({ id: 'vscode.menubar.separator' });\n\t\t}\n\n\t\tif (menuToPopulate.items.length > 0) {\n\t\t\tmenuToPopulate.items.pop();\n\t\t}\n\t}\n\n\tprivate getAdditionalKeybindings(): { [id: string]: IMenubarKeybinding } {\n\t\tconst keybindings = {};\n\t\tif (isMacintosh) {\n\t\t\tkeybindings['workbench.action.quit'] = (this.getMenubarKeybinding('workbench.action.quit'));\n\t\t}\n\n\t\treturn keybindings;\n\t}\n\n\tprivate getMenubarMenus(menubarData: IMenubarData): boolean {\n\t\tif (!menubarData) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmenubarData.keybindings = this.getAdditionalKeybindings();\n\t\tfor (const topLevelMenuName of Object.keys(this.topLevelMenus)) {\n\t\t\tconst menu = this.topLevelMenus[topLevelMenuName];\n\t\t\tif (menu) {\n\t\t\t\tconst menubarMenu: IMenubarMenu = { items: [] };\n\t\t\t\tthis.populateMenuItems(menu, menubarMenu, menubarData.keybindings);\n\t\t\t\tif (menubarMenu.items.length === 0) {\n\t\t\t\t\t// Menus are incomplete\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tmenubarData.menus[topLevelMenuName] = menubarMenu;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic get onVisibilityChange(): Event<boolean> {\n\t\treturn this._onVisibilityChange.event;\n\t}\n\n\tpublic get onFocusStateChange(): Event<boolean> {\n\t\treturn this._onFocusStateChange.event;\n\t}\n\n\tpublic layout(dimension: DOM.Dimension) {\n\t\tif (this.container) {\n\t\t\tthis.container.style.height = `${dimension.height}px`;\n\t\t}\n\n\t\tif (this.menubar) {\n\t\t\tthis.menubar.update({ enableMnemonics: this.currentEnableMenuBarMnemonics, visibility: this.currentMenubarVisibility, getKeybinding: (action) => this.keybindingService.lookupKeybinding(action.id), alwaysOnMnemonics: this.alwaysOnMnemonics });\n\t\t}\n\t}\n\n\tpublic getMenubarItemsDimensions(): DOM.Dimension {\n\t\tif (this.menubar) {\n\t\t\treturn new DOM.Dimension(this.menubar.getWidth(), this.menubar.getHeight());\n\t\t}\n\n\t\treturn new DOM.Dimension(0, 0);\n\t}\n\n\tpublic create(parent: HTMLElement): HTMLElement {\n\t\tthis.container = parent;\n\n\t\t// Build the menubar\n\t\tif (this.container) {\n\n\t\t\tif (!(isNative && isMacintosh) && this.currentTitlebarStyleSetting === 'custom') {\n\t\t\t\tthis.doUpdateMenubar(true);\n\t\t\t}\n\t\t}\n\n\t\treturn this.container;\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\tconst menubarActiveWindowFgColor = theme.getColor(TITLE_BAR_ACTIVE_FOREGROUND);\n\tif (menubarActiveWindowFgColor) {\n\t\tcollector.addRule(`\n\t\t.monaco-workbench .menubar > .menubar-menu-button {\n\t\t\tcolor: ${menubarActiveWindowFgColor};\n\t\t}\n\n\t\t.monaco-workbench .menubar .toolbar-toggle-more {\n\t\t\tbackground-color: ${menubarActiveWindowFgColor}\n\t\t}\n\t\t`);\n\t}\n\n\tconst menubarInactiveWindowFgColor = theme.getColor(TITLE_BAR_INACTIVE_FOREGROUND);\n\tif (menubarInactiveWindowFgColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .menubar.inactive > .menubar-menu-button {\n\t\t\t\tcolor: ${menubarInactiveWindowFgColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .menubar.inactive > .menubar-menu-button .toolbar-toggle-more {\n\t\t\t\tbackground-color: ${menubarInactiveWindowFgColor}\n\t\t\t}\n\t\t`);\n\t}\n\n\n\tconst menubarSelectedFgColor = theme.getColor(MENUBAR_SELECTION_FOREGROUND);\n\tif (menubarSelectedFgColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button.open,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:focus,\n\t\t\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover {\n\t\t\t\tcolor: ${menubarSelectedFgColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .menubar  > .menubar-menu-button.open .toolbar-toggle-more,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:focus .toolbar-toggle-more,\n\t\t\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover .toolbar-toggle-more {\n\t\t\t\tbackground-color: ${menubarSelectedFgColor}\n\t\t\t}\n\t\t`);\n\t}\n\n\tconst menubarSelectedBgColor = theme.getColor(MENUBAR_SELECTION_BACKGROUND);\n\tif (menubarSelectedBgColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button.open,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:focus,\n\t\t\t.monaco-workbench .menubar:not(:focus-within) > .menubar-menu-button:hover {\n\t\t\t\tbackground-color: ${menubarSelectedBgColor};\n\t\t\t}\n\t\t`);\n\t}\n\n\tconst menubarSelectedBorderColor = theme.getColor(MENUBAR_SELECTION_BORDER);\n\tif (menubarSelectedBorderColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:hover {\n\t\t\t\toutline: dashed 1px;\n\t\t\t}\n\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button.open,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:focus {\n\t\t\t\toutline: solid 1px;\n\t\t\t}\n\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button.open,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:focus,\n\t\t\t.monaco-workbench .menubar > .menubar-menu-button:hover {\n\t\t\t\toutline-offset: -1px;\n\t\t\t\toutline-color: ${menubarSelectedBorderColor};\n\t\t\t}\n\t\t`);\n\t}\n});\n"]}]}