{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/contextmenu/electron-browser/contextmenu.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/contextmenu/electron-browser/contextmenu.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"electron\", \"vs/base/parts/contextmenu/common/contextmenu\"], function (require, exports, electron_1, contextmenu_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let contextMenuIdPool = 0;\n    function popup(items, options) {\n        const processedItems = [];\n        const contextMenuId = contextMenuIdPool++;\n        const onClickChannel = `vscode:onContextMenu${contextMenuId}`;\n        const onClickChannelHandler = (_event, itemId, context) => {\n            const item = processedItems[itemId];\n            if (item.click) {\n                item.click(context);\n            }\n        };\n        electron_1.ipcRenderer.once(onClickChannel, onClickChannelHandler);\n        electron_1.ipcRenderer.once(contextmenu_1.CONTEXT_MENU_CLOSE_CHANNEL, (_event, closedContextMenuId) => {\n            if (closedContextMenuId !== contextMenuId) {\n                return;\n            }\n            electron_1.ipcRenderer.removeListener(onClickChannel, onClickChannelHandler);\n            if (options && options.onHide) {\n                options.onHide();\n            }\n        });\n        electron_1.ipcRenderer.send(contextmenu_1.CONTEXT_MENU_CHANNEL, contextMenuId, items.map(item => createItem(item, processedItems)), onClickChannel, options);\n    }\n    exports.popup = popup;\n    function createItem(item, processedItems) {\n        const serializableItem = {\n            id: processedItems.length,\n            label: item.label,\n            type: item.type,\n            accelerator: item.accelerator,\n            checked: item.checked,\n            enabled: typeof item.enabled === 'boolean' ? item.enabled : true,\n            visible: typeof item.visible === 'boolean' ? item.visible : true\n        };\n        processedItems.push(item);\n        // Submenu\n        if (Array.isArray(item.submenu)) {\n            serializableItem.submenu = item.submenu.map(submenuItem => createItem(submenuItem, processedItems));\n        }\n        return serializableItem;\n    }\n});\n",null]}