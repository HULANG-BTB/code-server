{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/tabCompletion.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/tabCompletion.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar snippets_contribution_1 = require(\"./snippets.contribution\");\nvar snippetsService_1 = require(\"./snippetsService\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar suggest_1 = require(\"vs/editor/contrib/suggest/suggest\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar snippetCompletionProvider_1 = require(\"./snippetCompletionProvider\");\nvar TabCompletionController = /** @class */ (function () {\n    function TabCompletionController(_editor, _snippetService, contextKeyService) {\n        var _this = this;\n        this._editor = _editor;\n        this._snippetService = _snippetService;\n        this._activeSnippets = [];\n        this._hasSnippets = TabCompletionController.ContextKey.bindTo(contextKeyService);\n        this._configListener = this._editor.onDidChangeConfiguration(function (e) {\n            if (e.contribInfo) {\n                _this._update();\n            }\n        });\n        this._update();\n    }\n    TabCompletionController.get = function (editor) {\n        return editor.getContribution(TabCompletionController.ID);\n    };\n    TabCompletionController.prototype.getId = function () {\n        return TabCompletionController.ID;\n    };\n    TabCompletionController.prototype.dispose = function () {\n        lifecycle_1.dispose(this._configListener);\n        lifecycle_1.dispose(this._selectionListener);\n    };\n    TabCompletionController.prototype._update = function () {\n        var _this = this;\n        var enabled = this._editor.getConfiguration().contribInfo.tabCompletion === 'onlySnippets';\n        if (this._enabled !== enabled) {\n            this._enabled = enabled;\n            if (!this._enabled) {\n                lifecycle_1.dispose(this._selectionListener);\n            }\n            else {\n                this._selectionListener = this._editor.onDidChangeCursorSelection(function (e) { return _this._updateSnippets(); });\n                if (this._editor.getModel()) {\n                    this._updateSnippets();\n                }\n            }\n        }\n    };\n    TabCompletionController.prototype._updateSnippets = function () {\n        // reset first\n        this._activeSnippets = [];\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // lots of dance for getting the\n        var selection = this._editor.getSelection();\n        var model = this._editor.getModel();\n        model.tokenizeIfCheap(selection.positionLineNumber);\n        var id = model.getLanguageIdAtPosition(selection.positionLineNumber, selection.positionColumn);\n        var snippets = this._snippetService.getSnippetsSync(id);\n        if (!snippets) {\n            // nothing for this language\n            this._hasSnippets.set(false);\n            return;\n        }\n        if (range_1.Range.isEmpty(selection)) {\n            // empty selection -> real text (no whitespace) left of cursor\n            var prefix = snippetsService_1.getNonWhitespacePrefix(model, selection.getPosition());\n            if (prefix) {\n                for (var _i = 0, snippets_1 = snippets; _i < snippets_1.length; _i++) {\n                    var snippet = snippets_1[_i];\n                    if (strings_1.endsWith(prefix, snippet.prefix)) {\n                        this._activeSnippets.push(snippet);\n                    }\n                }\n            }\n        }\n        else if (!range_1.Range.spansMultipleLines(selection) && model.getValueLengthInRange(selection) <= 100) {\n            // actual selection -> snippet must be a full match\n            var selected = model.getValueInRange(selection);\n            if (selected) {\n                for (var _a = 0, snippets_2 = snippets; _a < snippets_2.length; _a++) {\n                    var snippet = snippets_2[_a];\n                    if (selected === snippet.prefix) {\n                        this._activeSnippets.push(snippet);\n                    }\n                }\n            }\n        }\n        this._hasSnippets.set(this._activeSnippets.length > 0);\n    };\n    TabCompletionController.prototype.performSnippetCompletions = function () {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (this._activeSnippets.length === 1) {\n            // one -> just insert\n            var snippet = this._activeSnippets[0];\n            snippetController2_1.SnippetController2.get(this._editor).insert(snippet.codeSnippet, snippet.prefix.length, 0);\n        }\n        else if (this._activeSnippets.length > 1) {\n            // two or more -> show IntelliSense box\n            var position_1 = this._editor.getPosition();\n            suggest_1.showSimpleSuggestions(this._editor, this._activeSnippets.map(function (snippet) {\n                var range = range_1.Range.fromPositions(position_1.delta(0, -snippet.prefix.length), position_1);\n                return new snippetCompletionProvider_1.SnippetCompletion(snippet, range);\n            }));\n        }\n    };\n    TabCompletionController.ID = 'editor.tabCompletionController';\n    TabCompletionController.ContextKey = new contextkey_1.RawContextKey('hasSnippetCompletions', undefined);\n    TabCompletionController = tslib_1.__decorate([\n        tslib_1.__param(1, snippets_contribution_1.ISnippetsService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService)\n    ], TabCompletionController);\n    return TabCompletionController;\n}());\nexports.TabCompletionController = TabCompletionController;\neditorExtensions_1.registerEditorContribution(TabCompletionController);\nvar TabCompletionCommand = editorExtensions_1.EditorCommand.bindToContribution(TabCompletionController.get);\neditorExtensions_1.registerEditorCommand(new TabCompletionCommand({\n    id: 'insertSnippet',\n    precondition: TabCompletionController.ContextKey,\n    handler: function (x) { return x.performSnippetCompletions(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib,\n        kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.tabDoesNotMoveFocus, snippetController2_1.SnippetController2.InSnippetMode.toNegated()),\n        primary: keyCodes_1.KeyCode.Tab\n    }\n}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/tabCompletion.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/tabCompletion.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { RawContextKey, IContextKeyService, ContextKeyExpr, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ISnippetsService } from './snippets.contribution';\nimport { getNonWhitespacePrefix } from './snippetsService';\nimport { endsWith } from 'vs/base/common/strings';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { Range } from 'vs/editor/common/core/range';\nimport { registerEditorContribution, EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { showSimpleSuggestions } from 'vs/editor/contrib/suggest/suggest';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Snippet } from './snippetsFile';\nimport { SnippetCompletion } from './snippetCompletionProvider';\n\nexport class TabCompletionController implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.tabCompletionController';\n\tstatic ContextKey = new RawContextKey<boolean>('hasSnippetCompletions', undefined);\n\n\tpublic static get(editor: ICodeEditor): TabCompletionController {\n\t\treturn editor.getContribution<TabCompletionController>(TabCompletionController.ID);\n\t}\n\n\tprivate _hasSnippets: IContextKey<boolean>;\n\tprivate _activeSnippets: Snippet[] = [];\n\tprivate _enabled: boolean;\n\tprivate _selectionListener: IDisposable;\n\tprivate _configListener: IDisposable;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ISnippetsService private readonly _snippetService: ISnippetsService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasSnippets = TabCompletionController.ContextKey.bindTo(contextKeyService);\n\t\tthis._configListener = this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.contribInfo) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t\tthis._update();\n\t}\n\n\tgetId(): string {\n\t\treturn TabCompletionController.ID;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._configListener);\n\t\tdispose(this._selectionListener);\n\t}\n\n\tprivate _update(): void {\n\t\tconst enabled = this._editor.getConfiguration().contribInfo.tabCompletion === 'onlySnippets';\n\t\tif (this._enabled !== enabled) {\n\t\t\tthis._enabled = enabled;\n\t\t\tif (!this._enabled) {\n\t\t\t\tdispose(this._selectionListener);\n\t\t\t} else {\n\t\t\t\tthis._selectionListener = this._editor.onDidChangeCursorSelection(e => this._updateSnippets());\n\t\t\t\tif (this._editor.getModel()) {\n\t\t\t\t\tthis._updateSnippets();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateSnippets(): void {\n\n\t\t// reset first\n\t\tthis._activeSnippets = [];\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// lots of dance for getting the\n\t\tconst selection = this._editor.getSelection();\n\t\tconst model = this._editor.getModel();\n\t\tmodel.tokenizeIfCheap(selection.positionLineNumber);\n\t\tconst id = model.getLanguageIdAtPosition(selection.positionLineNumber, selection.positionColumn);\n\t\tconst snippets = this._snippetService.getSnippetsSync(id);\n\n\t\tif (!snippets) {\n\t\t\t// nothing for this language\n\t\t\tthis._hasSnippets.set(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (Range.isEmpty(selection)) {\n\t\t\t// empty selection -> real text (no whitespace) left of cursor\n\t\t\tconst prefix = getNonWhitespacePrefix(model, selection.getPosition());\n\t\t\tif (prefix) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (endsWith(prefix, snippet.prefix)) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (!Range.spansMultipleLines(selection) && model.getValueLengthInRange(selection) <= 100) {\n\t\t\t// actual selection -> snippet must be a full match\n\t\t\tconst selected = model.getValueInRange(selection);\n\t\t\tif (selected) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (selected === snippet.prefix) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._hasSnippets.set(this._activeSnippets.length > 0);\n\t}\n\n\tperformSnippetCompletions(): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._activeSnippets.length === 1) {\n\t\t\t// one -> just insert\n\t\t\tconst [snippet] = this._activeSnippets;\n\t\t\tSnippetController2.get(this._editor).insert(snippet.codeSnippet, snippet.prefix.length, 0);\n\n\t\t} else if (this._activeSnippets.length > 1) {\n\t\t\t// two or more -> show IntelliSense box\n\t\t\tconst position = this._editor.getPosition();\n\t\t\tshowSimpleSuggestions(this._editor, this._activeSnippets.map(snippet => {\n\t\t\t\tconst range = Range.fromPositions(position.delta(0, -snippet.prefix.length), position);\n\t\t\t\treturn new SnippetCompletion(snippet, range);\n\t\t\t}));\n\t\t}\n\t}\n}\n\nregisterEditorContribution(TabCompletionController);\n\nconst TabCompletionCommand = EditorCommand.bindToContribution<TabCompletionController>(TabCompletionController.get);\n\nregisterEditorCommand(new TabCompletionCommand({\n\tid: 'insertSnippet',\n\tprecondition: TabCompletionController.ContextKey,\n\thandler: x => x.performSnippetCompletions(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib,\n\t\tkbExpr: ContextKeyExpr.and(\n\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\tSnippetController2.InSnippetMode.toNegated()\n\t\t),\n\t\tprimary: KeyCode.Tab\n\t}\n}));\n"]}]}