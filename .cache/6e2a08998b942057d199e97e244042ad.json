{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar path_1 = require(\"vs/base/common/path\");\nvar resources = require(\"vs/base/common/resources\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar network_1 = require(\"vs/base/common/network\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar UNKNOWN_SOURCE_LABEL = nls.localize('unknownSource', \"Unknown Source\");\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n *\n */\nvar Source = /** @class */ (function () {\n    function Source(raw_, sessionId) {\n        var path;\n        if (raw_) {\n            this.raw = raw_;\n            path = this.raw.path || this.raw.name || '';\n            this.available = true;\n        }\n        else {\n            this.raw = { name: UNKNOWN_SOURCE_LABEL };\n            this.available = false;\n            path = debug_1.DEBUG_SCHEME + \":\" + UNKNOWN_SOURCE_LABEL;\n        }\n        if (typeof this.raw.sourceReference === 'number' && this.raw.sourceReference > 0) {\n            this.uri = uri_1.URI.parse(debug_1.DEBUG_SCHEME + \":\" + encodeURIComponent(path) + \"?session=\" + encodeURIComponent(sessionId) + \"&ref=\" + this.raw.sourceReference);\n        }\n        else {\n            if (debugUtils_1.isUri(path)) { // path looks like a uri\n                this.uri = uri_1.URI.parse(path);\n            }\n            else {\n                // assume a filesystem path\n                if (path_1.isAbsolute(path)) {\n                    this.uri = uri_1.URI.file(path);\n                }\n                else {\n                    // path is relative: since VS Code cannot deal with this by itself\n                    // create a debug url that will result in a DAP 'source' request when the url is resolved.\n                    this.uri = uri_1.URI.parse(debug_1.DEBUG_SCHEME + \":\" + encodeURIComponent(path) + \"?session=\" + encodeURIComponent(sessionId));\n                }\n            }\n        }\n    }\n    Object.defineProperty(Source.prototype, \"name\", {\n        get: function () {\n            return this.raw.name || resources.basenameOrAuthority(this.uri);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Source.prototype, \"origin\", {\n        get: function () {\n            return this.raw.origin;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Source.prototype, \"presentationHint\", {\n        get: function () {\n            return this.raw.presentationHint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Source.prototype, \"reference\", {\n        get: function () {\n            return this.raw.sourceReference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Source.prototype, \"inMemory\", {\n        get: function () {\n            return this.uri.scheme === debug_1.DEBUG_SCHEME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Source.prototype.openInEditor = function (editorService, selection, preserveFocus, sideBySide, pinned) {\n        return !this.available ? Promise.resolve(null) : editorService.openEditor({\n            resource: this.uri,\n            description: this.origin,\n            options: {\n                preserveFocus: preserveFocus,\n                selection: selection,\n                revealIfVisible: true,\n                revealInCenterIfOutsideViewport: true,\n                pinned: pinned || (!preserveFocus && !this.inMemory)\n            }\n        }, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP);\n    };\n    Source.getEncodedDebugData = function (modelUri) {\n        var path;\n        var sourceReference;\n        var sessionId;\n        switch (modelUri.scheme) {\n            case network_1.Schemas.file:\n                path = path_1.normalize(modelUri.fsPath);\n                break;\n            case debug_1.DEBUG_SCHEME:\n                path = modelUri.path;\n                if (modelUri.query) {\n                    var keyvalues = modelUri.query.split('&');\n                    for (var _i = 0, keyvalues_1 = keyvalues; _i < keyvalues_1.length; _i++) {\n                        var keyvalue = keyvalues_1[_i];\n                        var pair = keyvalue.split('=');\n                        if (pair.length === 2) {\n                            switch (pair[0]) {\n                                case 'session':\n                                    sessionId = decodeURIComponent(pair[1]);\n                                    break;\n                                case 'ref':\n                                    sourceReference = parseInt(pair[1]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n                break;\n            default:\n                path = modelUri.toString();\n                break;\n        }\n        return {\n            name: resources.basenameOrAuthority(modelUri),\n            path: path,\n            sourceReference: sourceReference,\n            sessionId: sessionId\n        };\n    };\n    return Source;\n}());\nexports.Source = Source;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { normalize, isAbsolute } from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport { DEBUG_SCHEME } from 'vs/workbench/contrib/debug/common/debug';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IEditorService, SIDE_GROUP, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { Schemas } from 'vs/base/common/network';\nimport { isUri } from 'vs/workbench/contrib/debug/common/debugUtils';\n\nconst UNKNOWN_SOURCE_LABEL = nls.localize('unknownSource', \"Unknown Source\");\n\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n *\n */\n\nexport class Source {\n\n\tpublic readonly uri: uri;\n\tpublic available: boolean;\n\tpublic raw: DebugProtocol.Source;\n\n\tconstructor(raw_: DebugProtocol.Source | undefined, sessionId: string) {\n\t\tlet path: string;\n\t\tif (raw_) {\n\t\t\tthis.raw = raw_;\n\t\t\tpath = this.raw.path || this.raw.name || '';\n\t\t\tthis.available = true;\n\t\t} else {\n\t\t\tthis.raw = { name: UNKNOWN_SOURCE_LABEL };\n\t\t\tthis.available = false;\n\t\t\tpath = `${DEBUG_SCHEME}:${UNKNOWN_SOURCE_LABEL}`;\n\t\t}\n\n\t\tif (typeof this.raw.sourceReference === 'number' && this.raw.sourceReference > 0) {\n\t\t\tthis.uri = uri.parse(`${DEBUG_SCHEME}:${encodeURIComponent(path)}?session=${encodeURIComponent(sessionId)}&ref=${this.raw.sourceReference}`);\n\t\t} else {\n\t\t\tif (isUri(path)) {\t// path looks like a uri\n\t\t\t\tthis.uri = uri.parse(path);\n\t\t\t} else {\n\t\t\t\t// assume a filesystem path\n\t\t\t\tif (isAbsolute(path)) {\n\t\t\t\t\tthis.uri = uri.file(path);\n\t\t\t\t} else {\n\t\t\t\t\t// path is relative: since VS Code cannot deal with this by itself\n\t\t\t\t\t// create a debug url that will result in a DAP 'source' request when the url is resolved.\n\t\t\t\t\tthis.uri = uri.parse(`${DEBUG_SCHEME}:${encodeURIComponent(path)}?session=${encodeURIComponent(sessionId)}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget name() {\n\t\treturn this.raw.name || resources.basenameOrAuthority(this.uri);\n\t}\n\n\tget origin() {\n\t\treturn this.raw.origin;\n\t}\n\n\tget presentationHint() {\n\t\treturn this.raw.presentationHint;\n\t}\n\n\tget reference() {\n\t\treturn this.raw.sourceReference;\n\t}\n\n\tget inMemory() {\n\t\treturn this.uri.scheme === DEBUG_SCHEME;\n\t}\n\n\topenInEditor(editorService: IEditorService, selection: IRange, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<any> {\n\t\treturn !this.available ? Promise.resolve(null) : editorService.openEditor({\n\t\t\tresource: this.uri,\n\t\t\tdescription: this.origin,\n\t\t\toptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tselection,\n\t\t\t\trevealIfVisible: true,\n\t\t\t\trevealInCenterIfOutsideViewport: true,\n\t\t\t\tpinned: pinned || (!preserveFocus && !this.inMemory)\n\t\t\t}\n\t\t}, sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t}\n\n\tstatic getEncodedDebugData(modelUri: uri): { name: string, path: string, sessionId?: string, sourceReference?: number } {\n\t\tlet path: string;\n\t\tlet sourceReference: number | undefined;\n\t\tlet sessionId: string | undefined;\n\n\t\tswitch (modelUri.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = normalize(modelUri.fsPath);\n\t\t\t\tbreak;\n\t\t\tcase DEBUG_SCHEME:\n\t\t\t\tpath = modelUri.path;\n\t\t\t\tif (modelUri.query) {\n\t\t\t\t\tconst keyvalues = modelUri.query.split('&');\n\t\t\t\t\tfor (let keyvalue of keyvalues) {\n\t\t\t\t\t\tconst pair = keyvalue.split('=');\n\t\t\t\t\t\tif (pair.length === 2) {\n\t\t\t\t\t\t\tswitch (pair[0]) {\n\t\t\t\t\t\t\t\tcase 'session':\n\t\t\t\t\t\t\t\t\tsessionId = decodeURIComponent(pair[1]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'ref':\n\t\t\t\t\t\t\t\t\tsourceReference = parseInt(pair[1]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = modelUri.toString();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tname: resources.basenameOrAuthority(modelUri),\n\t\t\tpath,\n\t\t\tsourceReference,\n\t\t\tsessionId\n\t\t};\n\t}\n}\n"]}]}