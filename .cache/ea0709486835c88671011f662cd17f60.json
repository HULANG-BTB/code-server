{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/activityaction\");\nvar nls = require(\"vs/nls\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar keyboardEvent_1 = require(\"vs/base/browser/keyboardEvent\");\nvar touch_1 = require(\"vs/base/browser/touch\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar compositeBarActions_1 = require(\"vs/workbench/browser/parts/compositeBarActions\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar activityBarService_1 = require(\"vs/workbench/services/activityBar/browser/activityBarService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar ViewletActivityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewletActivityAction, _super);\n    function ViewletActivityAction(activity, viewletService, layoutService, telemetryService) {\n        var _this = _super.call(this, activity) || this;\n        _this.viewletService = viewletService;\n        _this.layoutService = layoutService;\n        _this.telemetryService = telemetryService;\n        _this.lastRun = 0;\n        return _this;\n    }\n    ViewletActivityAction.prototype.run = function (event) {\n        var _this = this;\n        if (event instanceof MouseEvent && event.button === 2) {\n            return Promise.resolve(false); // do not run on right click\n        }\n        // prevent accident trigger on a doubleclick (to help nervous people)\n        var now = Date.now();\n        if (now > this.lastRun /* https://github.com/Microsoft/vscode/issues/25830 */ && now - this.lastRun < ViewletActivityAction.preventDoubleClickDelay) {\n            return Promise.resolve(true);\n        }\n        this.lastRun = now;\n        var sideBarVisible = this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART);\n        var activeViewlet = this.viewletService.getActiveViewlet();\n        // Hide sidebar if selected viewlet already visible\n        if (sideBarVisible && activeViewlet && activeViewlet.getId() === this.activity.id) {\n            this.logAction('hide');\n            this.layoutService.setSideBarHidden(true);\n            return Promise.resolve();\n        }\n        this.logAction('show');\n        return this.viewletService.openViewlet(this.activity.id, true).then(function () { return _this.activate(); });\n    };\n    ViewletActivityAction.prototype.logAction = function (action) {\n        /* __GDPR__\n            \"activityBarAction\" : {\n                \"viewletId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"action\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this.telemetryService.publicLog('activityBarAction', { viewletId: this.activity.id, action: action });\n    };\n    ViewletActivityAction.preventDoubleClickDelay = 300;\n    ViewletActivityAction = tslib_1.__decorate([\n        tslib_1.__param(1, viewlet_1.IViewletService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, telemetry_1.ITelemetryService)\n    ], ViewletActivityAction);\n    return ViewletActivityAction;\n}(compositeBarActions_1.ActivityAction));\nexports.ViewletActivityAction = ViewletActivityAction;\nvar ToggleViewletAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleViewletAction, _super);\n    function ToggleViewletAction(_viewlet, layoutService, viewletService) {\n        var _this = _super.call(this, _viewlet.id, _viewlet.name) || this;\n        _this._viewlet = _viewlet;\n        _this.layoutService = layoutService;\n        _this.viewletService = viewletService;\n        return _this;\n    }\n    ToggleViewletAction.prototype.run = function () {\n        var sideBarVisible = this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART);\n        var activeViewlet = this.viewletService.getActiveViewlet();\n        // Hide sidebar if selected viewlet already visible\n        if (sideBarVisible && activeViewlet && activeViewlet.getId() === this._viewlet.id) {\n            this.layoutService.setSideBarHidden(true);\n            return Promise.resolve();\n        }\n        return this.viewletService.openViewlet(this._viewlet.id, true);\n    };\n    ToggleViewletAction = tslib_1.__decorate([\n        tslib_1.__param(1, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(2, viewlet_1.IViewletService)\n    ], ToggleViewletAction);\n    return ToggleViewletAction;\n}(actions_1.Action));\nexports.ToggleViewletAction = ToggleViewletAction;\nvar GlobalActivityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalActivityAction, _super);\n    function GlobalActivityAction(activity) {\n        return _super.call(this, activity) || this;\n    }\n    return GlobalActivityAction;\n}(compositeBarActions_1.ActivityAction));\nexports.GlobalActivityAction = GlobalActivityAction;\nvar GlobalActivityActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalActivityActionItem, _super);\n    function GlobalActivityActionItem(action, colors, themeService, contextMenuService) {\n        var _this = _super.call(this, action, { draggable: false, colors: colors, icon: true }, themeService) || this;\n        _this.contextMenuService = contextMenuService;\n        return _this;\n    }\n    GlobalActivityActionItem.prototype.render = function (container) {\n        var _this = this;\n        _super.prototype.render.call(this, container);\n        // Context menus are triggered on mouse down so that an item can be picked\n        // and executed with releasing the mouse over it\n        this._register(DOM.addDisposableListener(this.container, DOM.EventType.MOUSE_DOWN, function (e) {\n            DOM.EventHelper.stop(e, true);\n            _this.showContextMenu();\n        }));\n        this._register(DOM.addDisposableListener(this.container, DOM.EventType.KEY_UP, function (e) {\n            var event = new keyboardEvent_1.StandardKeyboardEvent(e);\n            if (event.equals(keyCodes_1.KeyCode.Enter) || event.equals(keyCodes_1.KeyCode.Space)) {\n                DOM.EventHelper.stop(e, true);\n                _this.showContextMenu();\n            }\n        }));\n        this._register(DOM.addDisposableListener(this.container, touch_1.EventType.Tap, function (e) {\n            DOM.EventHelper.stop(e, true);\n            _this.showContextMenu();\n        }));\n    };\n    GlobalActivityActionItem.prototype.showContextMenu = function () {\n        var globalAction = this._action;\n        var activity = globalAction.activity;\n        var actions = activity.getActions();\n        var containerPosition = DOM.getDomNodePagePosition(this.container);\n        var location = { x: containerPosition.left + containerPosition.width / 2, y: containerPosition.top };\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return location; },\n            getActions: function () { return actions; },\n            onHide: function () { return lifecycle_1.dispose(actions); }\n        });\n    };\n    GlobalActivityActionItem = tslib_1.__decorate([\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, contextView_1.IContextMenuService)\n    ], GlobalActivityActionItem);\n    return GlobalActivityActionItem;\n}(compositeBarActions_1.ActivityActionItem));\nexports.GlobalActivityActionItem = GlobalActivityActionItem;\nvar PlaceHolderViewletActivityAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PlaceHolderViewletActivityAction, _super);\n    function PlaceHolderViewletActivityAction(id, iconUrl, viewletService, layoutService, telemetryService) {\n        var _this = _super.call(this, { id: id, name: id, cssClass: \"extensionViewlet-placeholder-\" + id.replace(/\\./g, '-') }, viewletService, layoutService, telemetryService) || this;\n        var iconClass = \".monaco-workbench .activitybar .monaco-action-bar .action-label.\" + _this.class; // Generate Placeholder CSS to show the icon in the activity bar\n        DOM.createCSSRule(iconClass, \"-webkit-mask: url('\" + (iconUrl || '') + \"') no-repeat 50% 50%\");\n        return _this;\n    }\n    PlaceHolderViewletActivityAction.prototype.setActivity = function (activity) {\n        this.activity = activity;\n    };\n    PlaceHolderViewletActivityAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_1.IViewletService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(4, telemetry_1.ITelemetryService)\n    ], PlaceHolderViewletActivityAction);\n    return PlaceHolderViewletActivityAction;\n}(ViewletActivityAction));\nexports.PlaceHolderViewletActivityAction = PlaceHolderViewletActivityAction;\nvar PlaceHolderToggleCompositePinnedAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PlaceHolderToggleCompositePinnedAction, _super);\n    function PlaceHolderToggleCompositePinnedAction(id, compositeBar) {\n        return _super.call(this, { id: id, name: id, cssClass: undefined }, compositeBar) || this;\n    }\n    PlaceHolderToggleCompositePinnedAction.prototype.setActivity = function (activity) {\n        this.label = activity.name;\n    };\n    return PlaceHolderToggleCompositePinnedAction;\n}(compositeBarActions_1.ToggleCompositePinnedAction));\nexports.PlaceHolderToggleCompositePinnedAction = PlaceHolderToggleCompositePinnedAction;\nvar SwitchSideBarViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchSideBarViewAction, _super);\n    function SwitchSideBarViewAction(id, name, viewletService, activityBarService) {\n        var _this = _super.call(this, id, name) || this;\n        _this.viewletService = viewletService;\n        _this.activityBarService = activityBarService;\n        return _this;\n    }\n    SwitchSideBarViewAction.prototype.run = function (offset) {\n        var pinnedViewletIds = this.activityBarService.getPinnedViewletIds();\n        var activeViewlet = this.viewletService.getActiveViewlet();\n        if (!activeViewlet) {\n            return Promise.resolve();\n        }\n        var targetViewletId;\n        for (var i = 0; i < pinnedViewletIds.length; i++) {\n            if (pinnedViewletIds[i] === activeViewlet.getId()) {\n                targetViewletId = pinnedViewletIds[(i + pinnedViewletIds.length + offset) % pinnedViewletIds.length];\n                break;\n            }\n        }\n        return this.viewletService.openViewlet(targetViewletId, true);\n    };\n    SwitchSideBarViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_1.IViewletService),\n        tslib_1.__param(3, activityBarService_1.IActivityBarService)\n    ], SwitchSideBarViewAction);\n    return SwitchSideBarViewAction;\n}(actions_1.Action));\nvar PreviousSideBarViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PreviousSideBarViewAction, _super);\n    function PreviousSideBarViewAction(id, name, viewletService, activityBarService) {\n        return _super.call(this, id, name, viewletService, activityBarService) || this;\n    }\n    PreviousSideBarViewAction.prototype.run = function () {\n        return _super.prototype.run.call(this, -1);\n    };\n    PreviousSideBarViewAction.ID = 'workbench.action.previousSideBarView';\n    PreviousSideBarViewAction.LABEL = nls.localize('previousSideBarView', 'Previous Side Bar View');\n    PreviousSideBarViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_1.IViewletService),\n        tslib_1.__param(3, activityBarService_1.IActivityBarService)\n    ], PreviousSideBarViewAction);\n    return PreviousSideBarViewAction;\n}(SwitchSideBarViewAction));\nexports.PreviousSideBarViewAction = PreviousSideBarViewAction;\nvar NextSideBarViewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(NextSideBarViewAction, _super);\n    function NextSideBarViewAction(id, name, viewletService, activityBarService) {\n        return _super.call(this, id, name, viewletService, activityBarService) || this;\n    }\n    NextSideBarViewAction.prototype.run = function () {\n        return _super.prototype.run.call(this, 1);\n    };\n    NextSideBarViewAction.ID = 'workbench.action.nextSideBarView';\n    NextSideBarViewAction.LABEL = nls.localize('nextSideBarView', 'Next Side Bar View');\n    NextSideBarViewAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_1.IViewletService),\n        tslib_1.__param(3, activityBarService_1.IActivityBarService)\n    ], NextSideBarViewAction);\n    return NextSideBarViewAction;\n}(SwitchSideBarViewAction));\nexports.NextSideBarViewAction = NextSideBarViewAction;\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(PreviousSideBarViewAction, PreviousSideBarViewAction.ID, PreviousSideBarViewAction.LABEL), 'View: Open Previous Side Bar View', nls.localize('view', \"View\"));\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(NextSideBarViewAction, NextSideBarViewAction.ID, NextSideBarViewAction.LABEL), 'View: Open Next Side Bar View', nls.localize('view', \"View\"));\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var activeForegroundColor = theme.getColor(theme_1.ACTIVITY_BAR_FOREGROUND);\n    if (activeForegroundColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active .action-label,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus .action-label,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover .action-label {\\n\\t\\t\\t\\tbackground-color: \" + activeForegroundColor + \" !important;\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    // Styling with Outline color (e.g. high contrast theme)\n    var outline = theme.getColor(colorRegistry_1.activeContrastBorder);\n    if (outline) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:before {\\n\\t\\t\\t\\tcontent: \\\"\\\";\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 9px;\\n\\t\\t\\t\\tleft: 9px;\\n\\t\\t\\t\\theight: 32px;\\n\\t\\t\\t\\twidth: 32px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:hover:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:hover:before {\\n\\t\\t\\t\\toutline: 1px solid;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover:before {\\n\\t\\t\\t\\toutline: 1px dashed;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus:before {\\n\\t\\t\\t\\tborder-left-color: \" + outline + \";\\n\\t\\t\\t}\\n\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:hover:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:hover:before,\\n\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover:before {\\n\\t\\t\\t\\toutline-color: \" + outline + \";\\n\\t\\t\\t}\\n\\t\\t\");\n    }\n    // Styling without outline color\n    else {\n        var focusBorderColor = theme.getColor(colorRegistry_1.focusBorder);\n        if (focusBorderColor) {\n            collector.addRule(\"\\n\\t\\t\\t\\t\\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus:before {\\n\\t\\t\\t\\t\\t\\tborder-left-color: \" + focusBorderColor + \";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\");\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/activityaction';\nimport * as nls from 'vs/nls';\nimport * as DOM from 'vs/base/browser/dom';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { EventType as TouchEventType, GestureEvent } from 'vs/base/browser/touch';\nimport { Action } from 'vs/base/common/actions';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { activeContrastBorder, focusBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { ICssStyleCollector, ITheme, IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { ActivityAction, ActivityActionItem, ICompositeBar, ICompositeBarColors, ToggleCompositePinnedAction } from 'vs/workbench/browser/parts/compositeBarActions';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { IActivity, IGlobalActivity } from 'vs/workbench/common/activity';\nimport { ACTIVITY_BAR_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IActivityBarService } from 'vs/workbench/services/activityBar/browser/activityBarService';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\n\nexport class ViewletActivityAction extends ActivityAction {\n\n\tprivate static readonly preventDoubleClickDelay = 300;\n\n\tprivate lastRun: number = 0;\n\n\tconstructor(\n\t\tactivity: IActivity,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper(activity);\n\t}\n\n\trun(event: any): Promise<any> {\n\t\tif (event instanceof MouseEvent && event.button === 2) {\n\t\t\treturn Promise.resolve(false); // do not run on right click\n\t\t}\n\n\t\t// prevent accident trigger on a doubleclick (to help nervous people)\n\t\tconst now = Date.now();\n\t\tif (now > this.lastRun /* https://github.com/Microsoft/vscode/issues/25830 */ && now - this.lastRun < ViewletActivityAction.preventDoubleClickDelay) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\t\tthis.lastRun = now;\n\n\t\tconst sideBarVisible = this.layoutService.isVisible(Parts.SIDEBAR_PART);\n\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\n\t\t// Hide sidebar if selected viewlet already visible\n\t\tif (sideBarVisible && activeViewlet && activeViewlet.getId() === this.activity.id) {\n\t\t\tthis.logAction('hide');\n\t\t\tthis.layoutService.setSideBarHidden(true);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.logAction('show');\n\t\treturn this.viewletService.openViewlet(this.activity.id, true).then(() => this.activate());\n\t}\n\n\tprivate logAction(action: string) {\n\t\t/* __GDPR__\n\t\t\t\"activityBarAction\" : {\n\t\t\t\t\"viewletId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"action\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('activityBarAction', { viewletId: this.activity.id, action });\n\t}\n}\n\nexport class ToggleViewletAction extends Action {\n\n\tconstructor(\n\t\tprivate _viewlet: ViewletDescriptor,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IViewletService private readonly viewletService: IViewletService\n\t) {\n\t\tsuper(_viewlet.id, _viewlet.name);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst sideBarVisible = this.layoutService.isVisible(Parts.SIDEBAR_PART);\n\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\n\t\t// Hide sidebar if selected viewlet already visible\n\t\tif (sideBarVisible && activeViewlet && activeViewlet.getId() === this._viewlet.id) {\n\t\t\tthis.layoutService.setSideBarHidden(true);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.viewletService.openViewlet(this._viewlet.id, true);\n\t}\n}\n\nexport class GlobalActivityAction extends ActivityAction {\n\n\tconstructor(activity: IGlobalActivity) {\n\t\tsuper(activity);\n\t}\n}\n\nexport class GlobalActivityActionItem extends ActivityActionItem {\n\n\tconstructor(\n\t\taction: GlobalActivityAction,\n\t\tcolors: (theme: ITheme) => ICompositeBarColors,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService protected contextMenuService: IContextMenuService\n\t) {\n\t\tsuper(action, { draggable: false, colors, icon: true }, themeService);\n\t}\n\n\trender(container: HTMLElement): void {\n\t\tsuper.render(container);\n\n\t\t// Context menus are triggered on mouse down so that an item can be picked\n\t\t// and executed with releasing the mouse over it\n\n\t\tthis._register(DOM.addDisposableListener(this.container, DOM.EventType.MOUSE_DOWN, (e: MouseEvent) => {\n\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\tthis.showContextMenu();\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(this.container, DOM.EventType.KEY_UP, (e: KeyboardEvent) => {\n\t\t\tlet event = new StandardKeyboardEvent(e);\n\t\t\tif (event.equals(KeyCode.Enter) || event.equals(KeyCode.Space)) {\n\t\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\t\tthis.showContextMenu();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(this.container, TouchEventType.Tap, (e: GestureEvent) => {\n\t\t\tDOM.EventHelper.stop(e, true);\n\t\t\tthis.showContextMenu();\n\t\t}));\n\t}\n\n\tprivate showContextMenu(): void {\n\t\tconst globalAction = this._action as GlobalActivityAction;\n\t\tconst activity = globalAction.activity as IGlobalActivity;\n\t\tconst actions = activity.getActions();\n\t\tconst containerPosition = DOM.getDomNodePagePosition(this.container);\n\t\tconst location = { x: containerPosition.left + containerPosition.width / 2, y: containerPosition.top };\n\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => location,\n\t\t\tgetActions: () => actions,\n\t\t\tonHide: () => dispose(actions)\n\t\t});\n\t}\n}\n\nexport class PlaceHolderViewletActivityAction extends ViewletActivityAction {\n\n\tconstructor(\n\t\tid: string, iconUrl: URI,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tsuper({ id, name: id, cssClass: `extensionViewlet-placeholder-${id.replace(/\\./g, '-')}` }, viewletService, layoutService, telemetryService);\n\n\t\tconst iconClass = `.monaco-workbench .activitybar .monaco-action-bar .action-label.${this.class}`; // Generate Placeholder CSS to show the icon in the activity bar\n\t\tDOM.createCSSRule(iconClass, `-webkit-mask: url('${iconUrl || ''}') no-repeat 50% 50%`);\n\t}\n\n\tsetActivity(activity: IActivity): void {\n\t\tthis.activity = activity;\n\t}\n}\n\nexport class PlaceHolderToggleCompositePinnedAction extends ToggleCompositePinnedAction {\n\n\tconstructor(id: string, compositeBar: ICompositeBar) {\n\t\tsuper({ id, name: id, cssClass: undefined }, compositeBar);\n\t}\n\n\tsetActivity(activity: IActivity): void {\n\t\tthis.label = activity.name;\n\t}\n}\n\nclass SwitchSideBarViewAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IActivityBarService private readonly activityBarService: IActivityBarService\n\t) {\n\t\tsuper(id, name);\n\t}\n\n\trun(offset: number): Promise<any> {\n\t\tconst pinnedViewletIds = this.activityBarService.getPinnedViewletIds();\n\n\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\t\tif (!activeViewlet) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tlet targetViewletId: string | undefined;\n\t\tfor (let i = 0; i < pinnedViewletIds.length; i++) {\n\t\t\tif (pinnedViewletIds[i] === activeViewlet.getId()) {\n\t\t\t\ttargetViewletId = pinnedViewletIds[(i + pinnedViewletIds.length + offset) % pinnedViewletIds.length];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn this.viewletService.openViewlet(targetViewletId, true);\n\t}\n}\n\nexport class PreviousSideBarViewAction extends SwitchSideBarViewAction {\n\n\tstatic readonly ID = 'workbench.action.previousSideBarView';\n\tstatic LABEL = nls.localize('previousSideBarView', 'Previous Side Bar View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IActivityBarService activityBarService: IActivityBarService\n\t) {\n\t\tsuper(id, name, viewletService, activityBarService);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn super.run(-1);\n\t}\n}\n\nexport class NextSideBarViewAction extends SwitchSideBarViewAction {\n\n\tstatic readonly ID = 'workbench.action.nextSideBarView';\n\tstatic LABEL = nls.localize('nextSideBarView', 'Next Side Bar View');\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IActivityBarService activityBarService: IActivityBarService\n\t) {\n\t\tsuper(id, name, viewletService, activityBarService);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn super.run(1);\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(PreviousSideBarViewAction, PreviousSideBarViewAction.ID, PreviousSideBarViewAction.LABEL), 'View: Open Previous Side Bar View', nls.localize('view', \"View\"));\nregistry.registerWorkbenchAction(new SyncActionDescriptor(NextSideBarViewAction, NextSideBarViewAction.ID, NextSideBarViewAction.LABEL), 'View: Open Next Side Bar View', nls.localize('view', \"View\"));\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\n\tconst activeForegroundColor = theme.getColor(ACTIVITY_BAR_FOREGROUND);\n\tif (activeForegroundColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active .action-label,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus .action-label,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover .action-label {\n\t\t\t\tbackground-color: ${activeForegroundColor} !important;\n\t\t\t}\n\t\t`);\n\t}\n\n\t// Styling with Outline color (e.g. high contrast theme)\n\tconst outline = theme.getColor(activeContrastBorder);\n\tif (outline) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:before {\n\t\t\t\tcontent: \"\";\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 9px;\n\t\t\t\tleft: 9px;\n\t\t\t\theight: 32px;\n\t\t\t\twidth: 32px;\n\t\t\t}\n\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:hover:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:hover:before {\n\t\t\t\toutline: 1px solid;\n\t\t\t}\n\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover:before {\n\t\t\t\toutline: 1px dashed;\n\t\t\t}\n\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus:before {\n\t\t\t\tborder-left-color: ${outline};\n\t\t\t}\n\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.active:hover:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item.checked:hover:before,\n\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:hover:before {\n\t\t\t\toutline-color: ${outline};\n\t\t\t}\n\t\t`);\n\t}\n\n\t// Styling without outline color\n\telse {\n\t\tconst focusBorderColor = theme.getColor(focusBorder);\n\t\tif (focusBorderColor) {\n\t\t\tcollector.addRule(`\n\t\t\t\t\t.monaco-workbench .activitybar > .content .monaco-action-bar .action-item:focus:before {\n\t\t\t\t\t\tborder-left-color: ${focusBorderColor};\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t}\n\t}\n});\n"]}]}