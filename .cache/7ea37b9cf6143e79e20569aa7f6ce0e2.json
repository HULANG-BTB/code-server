{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\"], function (require, exports, strings) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Viewport {\n        constructor(top, left, width, height) {\n            this.top = top | 0;\n            this.left = left | 0;\n            this.width = width | 0;\n            this.height = height | 0;\n        }\n    }\n    exports.Viewport = Viewport;\n    class MinimapLinesRenderingData {\n        constructor(tabSize, data) {\n            this.tabSize = tabSize;\n            this.data = data;\n        }\n    }\n    exports.MinimapLinesRenderingData = MinimapLinesRenderingData;\n    class ViewLineData {\n        constructor(content, continuesWithWrappedLine, minColumn, maxColumn, tokens) {\n            this.content = content;\n            this.continuesWithWrappedLine = continuesWithWrappedLine;\n            this.minColumn = minColumn;\n            this.maxColumn = maxColumn;\n            this.tokens = tokens;\n        }\n    }\n    exports.ViewLineData = ViewLineData;\n    class ViewLineRenderingData {\n        constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize) {\n            this.minColumn = minColumn;\n            this.maxColumn = maxColumn;\n            this.content = content;\n            this.continuesWithWrappedLine = continuesWithWrappedLine;\n            this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n            this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n            this.tokens = tokens;\n            this.inlineDecorations = inlineDecorations;\n            this.tabSize = tabSize;\n        }\n        static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n            if (mightContainNonBasicASCII) {\n                return strings.isBasicASCII(lineContent);\n            }\n            return true;\n        }\n        static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n            if (!isBasicASCII && mightContainRTL) {\n                return strings.containsRTL(lineContent);\n            }\n            return false;\n        }\n    }\n    exports.ViewLineRenderingData = ViewLineRenderingData;\n    var InlineDecorationType;\n    (function (InlineDecorationType) {\n        InlineDecorationType[InlineDecorationType[\"Regular\"] = 0] = \"Regular\";\n        InlineDecorationType[InlineDecorationType[\"Before\"] = 1] = \"Before\";\n        InlineDecorationType[InlineDecorationType[\"After\"] = 2] = \"After\";\n        InlineDecorationType[InlineDecorationType[\"RegularAffectingLetterSpacing\"] = 3] = \"RegularAffectingLetterSpacing\";\n    })(InlineDecorationType = exports.InlineDecorationType || (exports.InlineDecorationType = {}));\n    class InlineDecoration {\n        constructor(range, inlineClassName, type) {\n            this.range = range;\n            this.inlineClassName = inlineClassName;\n            this.type = type;\n        }\n    }\n    exports.InlineDecoration = InlineDecoration;\n    class ViewModelDecoration {\n        constructor(range, options) {\n            this.range = range;\n            this.options = options;\n        }\n    }\n    exports.ViewModelDecoration = ViewModelDecoration;\n});\n",null]}