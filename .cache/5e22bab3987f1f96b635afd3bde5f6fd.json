{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/commandsHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/commandsHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar types = require(\"vs/base/common/types\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar quickOpen_2 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar map_1 = require(\"vs/base/common/map\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nexports.ALL_COMMANDS_PREFIX = '>';\nvar lastCommandPaletteInput;\nvar commandHistory;\nvar commandCounter = 1;\nfunction resolveCommandHistory(configurationService) {\n    var config = configurationService.getValue();\n    var commandHistory = config.workbench && config.workbench.commandPalette && config.workbench.commandPalette.history;\n    if (typeof commandHistory !== 'number') {\n        commandHistory = CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n    return commandHistory;\n}\nvar CommandsHistory = /** @class */ (function (_super) {\n    tslib_1.__extends(CommandsHistory, _super);\n    function CommandsHistory(storageService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.storageService = storageService;\n        _this.configurationService = configurationService;\n        _this.updateConfiguration();\n        _this.load();\n        _this.registerListeners();\n        return _this;\n    }\n    CommandsHistory.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.updateConfiguration(); }));\n        this._register(this.storageService.onWillSaveState(function () { return _this.saveState(); }));\n    };\n    CommandsHistory.prototype.updateConfiguration = function () {\n        this.commandHistoryLength = resolveCommandHistory(this.configurationService);\n        if (commandHistory) {\n            commandHistory.limit = this.commandHistoryLength;\n        }\n    };\n    CommandsHistory.prototype.load = function () {\n        var raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, storage_1.StorageScope.GLOBAL);\n        var serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                // invalid data\n            }\n        }\n        commandHistory = new map_1.LRUCache(this.commandHistoryLength, 1);\n        if (serializedCache) {\n            var entries = void 0;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort(function (a, b) { return a.value - b.value; });\n            }\n            entries.forEach(function (entry) { return commandHistory.set(entry.key, entry.value); });\n        }\n        commandCounter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, storage_1.StorageScope.GLOBAL, commandCounter);\n    };\n    CommandsHistory.prototype.push = function (commandId) {\n        commandHistory.set(commandId, commandCounter++); // set counter to command\n    };\n    CommandsHistory.prototype.peek = function (commandId) {\n        return commandHistory.peek(commandId);\n    };\n    CommandsHistory.prototype.saveState = function () {\n        var serializedCache = { usesLRU: true, entries: [] };\n        commandHistory.forEach(function (value, key) { return serializedCache.entries.push({ key: key, value: value }); });\n        this.storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), storage_1.StorageScope.GLOBAL);\n        this.storageService.store(CommandsHistory.PREF_KEY_COUNTER, commandCounter, storage_1.StorageScope.GLOBAL);\n    };\n    CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n    CommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\n    CommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n    CommandsHistory = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], CommandsHistory);\n    return CommandsHistory;\n}(lifecycle_1.Disposable));\nvar ShowAllCommandsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowAllCommandsAction, _super);\n    function ShowAllCommandsAction(id, label, quickOpenService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    ShowAllCommandsAction.prototype.run = function (context) {\n        var config = this.configurationService.getValue();\n        var restoreInput = config.workbench && config.workbench.commandPalette && config.workbench.commandPalette.preserveInput === true;\n        // Show with last command palette input if any and configured\n        var value = exports.ALL_COMMANDS_PREFIX;\n        if (restoreInput && lastCommandPaletteInput) {\n            value = \"\" + value + lastCommandPaletteInput;\n        }\n        this.quickOpenService.show(value, { inputSelection: lastCommandPaletteInput ? { start: 1 /* after prefix */, end: value.length } : undefined });\n        return Promise.resolve(undefined);\n    };\n    ShowAllCommandsAction.ID = 'workbench.action.showCommands';\n    ShowAllCommandsAction.LABEL = nls.localize('showTriggerActions', \"Show All Commands\");\n    ShowAllCommandsAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_2.IQuickOpenService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ShowAllCommandsAction);\n    return ShowAllCommandsAction;\n}(actions_1.Action));\nexports.ShowAllCommandsAction = ShowAllCommandsAction;\nvar ClearCommandHistoryAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearCommandHistoryAction, _super);\n    function ClearCommandHistoryAction(id, label, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    ClearCommandHistoryAction.prototype.run = function (context) {\n        var commandHistoryLength = resolveCommandHistory(this.configurationService);\n        if (commandHistoryLength > 0) {\n            commandHistory = new map_1.LRUCache(commandHistoryLength);\n            commandCounter = 1;\n        }\n        return Promise.resolve(undefined);\n    };\n    ClearCommandHistoryAction.ID = 'workbench.action.clearCommandHistory';\n    ClearCommandHistoryAction.LABEL = nls.localize('clearCommandHistory', \"Clear Command History\");\n    ClearCommandHistoryAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ClearCommandHistoryAction);\n    return ClearCommandHistoryAction;\n}(actions_1.Action));\nexports.ClearCommandHistoryAction = ClearCommandHistoryAction;\nvar CommandPaletteEditorAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CommandPaletteEditorAction, _super);\n    function CommandPaletteEditorAction() {\n        return _super.call(this, {\n            id: ShowAllCommandsAction.ID,\n            label: nls.localize('showCommands.label', \"Command Palette...\"),\n            alias: 'Command Palette',\n            precondition: null,\n            menuOpts: {\n                group: 'z_commands',\n                order: 1\n            }\n        }) || this;\n    }\n    CommandPaletteEditorAction.prototype.run = function (accessor, editor) {\n        var quickOpenService = accessor.get(quickOpen_2.IQuickOpenService);\n        // Show with prefix\n        quickOpenService.show(exports.ALL_COMMANDS_PREFIX);\n        return Promise.resolve(undefined);\n    };\n    return CommandPaletteEditorAction;\n}(editorExtensions_1.EditorAction));\nvar BaseCommandEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseCommandEntry, _super);\n    function BaseCommandEntry(commandId, keybinding, label, alias, highlights, onBeforeRun, notificationService, telemetryService) {\n        var _this = _super.call(this) || this;\n        _this.commandId = commandId;\n        _this.keybinding = keybinding;\n        _this.label = label;\n        _this.onBeforeRun = onBeforeRun;\n        _this.notificationService = notificationService;\n        _this.telemetryService = telemetryService;\n        _this.labelLowercase = _this.label.toLowerCase();\n        _this.keybindingAriaLabel = keybinding ? keybinding.getAriaLabel() || undefined : undefined;\n        if (_this.label !== alias) {\n            _this.alias = alias;\n        }\n        else {\n            highlights.alias = undefined;\n        }\n        _this.setHighlights(highlights.label, undefined, highlights.alias);\n        return _this;\n    }\n    BaseCommandEntry.prototype.getCommandId = function () {\n        return this.commandId;\n    };\n    BaseCommandEntry.prototype.getLabel = function () {\n        return this.label;\n    };\n    BaseCommandEntry.prototype.getSortLabel = function () {\n        return this.labelLowercase;\n    };\n    BaseCommandEntry.prototype.getDescription = function () {\n        return this.description;\n    };\n    BaseCommandEntry.prototype.setDescription = function (description) {\n        this.description = description;\n    };\n    BaseCommandEntry.prototype.getKeybinding = function () {\n        return this.keybinding;\n    };\n    BaseCommandEntry.prototype.getDetail = function () {\n        return this.alias;\n    };\n    BaseCommandEntry.prototype.getAriaLabel = function () {\n        if (this.keybindingAriaLabel) {\n            return nls.localize('entryAriaLabelWithKey', \"{0}, {1}, commands\", this.getLabel(), this.keybindingAriaLabel);\n        }\n        return nls.localize('entryAriaLabel', \"{0}, commands\", this.getLabel());\n    };\n    BaseCommandEntry.prototype.run = function (mode, context) {\n        if (mode === quickOpen_1.Mode.OPEN) {\n            this.runAction(this.getAction());\n            return true;\n        }\n        return false;\n    };\n    BaseCommandEntry.prototype.runAction = function (action) {\n        var _this = this;\n        // Indicate onBeforeRun\n        this.onBeforeRun(this.commandId);\n        // Use a timeout to give the quick open widget a chance to close itself first\n        setTimeout(function () {\n            if (action && (!(action instanceof actions_1.Action) || action.enabled)) {\n                try {\n                    /* __GDPR__\n                        \"workbenchActionExecuted\" : {\n                            \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                            \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                        }\n                    */\n                    _this.telemetryService.publicLog('workbenchActionExecuted', { id: action.id, from: 'quick open' });\n                    (action.run() || Promise.resolve()).then(function () {\n                        if (action instanceof actions_1.Action) {\n                            action.dispose();\n                        }\n                    }, function (err) { return _this.onError(err); });\n                }\n                catch (error) {\n                    _this.onError(error);\n                }\n            }\n            else {\n                _this.notificationService.info(nls.localize('actionNotEnabled', \"Command '{0}' is not enabled in the current context.\", _this.getLabel()));\n            }\n        }, 50);\n    };\n    BaseCommandEntry.prototype.onError = function (error) {\n        if (errors_1.isPromiseCanceledError(error)) {\n            return;\n        }\n        this.notificationService.error(error || nls.localize('canNotRun', \"Command '{0}' resulted in an error.\", this.label));\n    };\n    BaseCommandEntry = tslib_1.__decorate([\n        tslib_1.__param(6, notification_1.INotificationService),\n        tslib_1.__param(7, telemetry_1.ITelemetryService)\n    ], BaseCommandEntry);\n    return BaseCommandEntry;\n}(quickOpenModel_1.QuickOpenEntryGroup));\nvar EditorActionCommandEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorActionCommandEntry, _super);\n    function EditorActionCommandEntry(commandId, keybinding, label, meta, highlights, action, onBeforeRun, notificationService, telemetryService) {\n        var _this = _super.call(this, commandId, keybinding, label, meta, highlights, onBeforeRun, notificationService, telemetryService) || this;\n        _this.action = action;\n        return _this;\n    }\n    EditorActionCommandEntry.prototype.getAction = function () {\n        return this.action;\n    };\n    EditorActionCommandEntry = tslib_1.__decorate([\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, telemetry_1.ITelemetryService)\n    ], EditorActionCommandEntry);\n    return EditorActionCommandEntry;\n}(BaseCommandEntry));\nvar ActionCommandEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(ActionCommandEntry, _super);\n    function ActionCommandEntry(commandId, keybinding, label, alias, highlights, action, onBeforeRun, notificationService, telemetryService) {\n        var _this = _super.call(this, commandId, keybinding, label, alias, highlights, onBeforeRun, notificationService, telemetryService) || this;\n        _this.action = action;\n        return _this;\n    }\n    ActionCommandEntry.prototype.getAction = function () {\n        return this.action;\n    };\n    ActionCommandEntry = tslib_1.__decorate([\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, telemetry_1.ITelemetryService)\n    ], ActionCommandEntry);\n    return ActionCommandEntry;\n}(BaseCommandEntry));\nvar wordFilter = filters_1.or(filters_1.matchesPrefix, filters_1.matchesWords, filters_1.matchesContiguousSubString);\nvar CommandsHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(CommandsHandler, _super);\n    function CommandsHandler(editorService, instantiationService, keybindingService, menuService, configurationService, extensionService) {\n        var _this = _super.call(this) || this;\n        _this.editorService = editorService;\n        _this.instantiationService = instantiationService;\n        _this.keybindingService = keybindingService;\n        _this.menuService = menuService;\n        _this.configurationService = configurationService;\n        _this.extensionService = extensionService;\n        _this.commandsHistory = _this.instantiationService.createInstance(CommandsHistory);\n        _this.extensionService.whenInstalledExtensionsRegistered().then(function () { return _this.extensionsRegistered = true; });\n        _this.configurationService.onDidChangeConfiguration(function (e) { return _this.updateConfiguration(); });\n        _this.updateConfiguration();\n        return _this;\n    }\n    CommandsHandler.prototype.updateConfiguration = function () {\n        this.commandHistoryEnabled = resolveCommandHistory(this.configurationService) > 0;\n    };\n    CommandsHandler.prototype.getResults = function (searchValue, token) {\n        var _this = this;\n        if (this.extensionsRegistered) {\n            return this.doGetResults(searchValue, token);\n        }\n        // If extensions are not yet registered, we wait for a little moment to give them\n        // a chance to register so that the complete set of commands shows up as result\n        // We do not want to delay functionality beyond that time though to keep the commands\n        // functional.\n        return Promise.race([async_1.timeout(800), this.extensionService.whenInstalledExtensionsRegistered().then(function () { return undefined; })]).then(function () { return _this.doGetResults(searchValue, token); });\n    };\n    CommandsHandler.prototype.doGetResults = function (searchValue, token) {\n        var _this = this;\n        if (token.isCancellationRequested) {\n            return Promise.resolve(new quickOpenModel_1.QuickOpenModel([]));\n        }\n        searchValue = searchValue.trim();\n        // Remember as last command palette input\n        lastCommandPaletteInput = searchValue;\n        // Editor Actions\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        var editorActions = [];\n        if (activeTextEditorWidget && types.isFunction(activeTextEditorWidget.getSupportedActions)) {\n            editorActions = activeTextEditorWidget.getSupportedActions();\n        }\n        var editorEntries = this.editorActionsToEntries(editorActions, searchValue);\n        // Other Actions\n        var menu = this.editorService.invokeWithinEditorContext(function (accessor) { return _this.menuService.createMenu(actions_2.MenuId.CommandPalette, accessor.get(contextkey_1.IContextKeyService)); });\n        var menuActions = menu.getActions().reduce(function (r, _a) {\n            var actions = _a[1];\n            return r.concat(actions);\n        }, []).filter(function (action) { return action instanceof actions_2.MenuItemAction; });\n        var commandEntries = this.menuItemActionsToEntries(menuActions, searchValue);\n        menu.dispose();\n        // Concat\n        var entries = editorEntries.concat(commandEntries);\n        // Remove duplicates\n        entries = arrays.distinct(entries, function (entry) { return \"\" + entry.getLabel() + entry.getGroupLabel() + entry.getCommandId(); });\n        // Handle label clashes\n        var commandLabels = new Set();\n        entries.forEach(function (entry) {\n            var commandLabel = \"\" + entry.getLabel() + entry.getGroupLabel();\n            if (commandLabels.has(commandLabel)) {\n                entry.setDescription(entry.getCommandId());\n            }\n            else {\n                commandLabels.add(commandLabel);\n            }\n        });\n        // Sort by MRU order and fallback to name otherwie\n        entries = entries.sort(function (elementA, elementB) {\n            var counterA = _this.commandsHistory.peek(elementA.getCommandId());\n            var counterB = _this.commandsHistory.peek(elementB.getCommandId());\n            if (counterA && counterB) {\n                return counterA > counterB ? -1 : 1; // use more recently used command before older\n            }\n            if (counterA) {\n                return -1; // first command was used, so it wins over the non used one\n            }\n            if (counterB) {\n                return 1; // other command was used so it wins over the command\n            }\n            // both commands were never used, so we sort by name\n            return elementA.getSortLabel().localeCompare(elementB.getSortLabel());\n        });\n        // Introduce group marker border between recently used and others\n        // only if we have recently used commands in the result set\n        var firstEntry = entries[0];\n        if (firstEntry && this.commandsHistory.peek(firstEntry.getCommandId())) {\n            firstEntry.setGroupLabel(nls.localize('recentlyUsed', \"recently used\"));\n            for (var i = 1; i < entries.length; i++) {\n                var entry = entries[i];\n                if (!this.commandsHistory.peek(entry.getCommandId())) {\n                    entry.setShowBorder(true);\n                    entry.setGroupLabel(nls.localize('morecCommands', \"other commands\"));\n                    break;\n                }\n            }\n        }\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(entries));\n    };\n    CommandsHandler.prototype.editorActionsToEntries = function (actions, searchValue) {\n        var _this = this;\n        var entries = [];\n        for (var _i = 0, actions_3 = actions; _i < actions_3.length; _i++) {\n            var action = actions_3[_i];\n            if (action.id === ShowAllCommandsAction.ID) {\n                continue; // avoid duplicates\n            }\n            var label = action.label;\n            if (label) {\n                // Alias for non default languages\n                var alias = !platform_1.Language.isDefaultVariant() ? action.alias : null;\n                var labelHighlights = wordFilter(searchValue, label);\n                var aliasHighlights = alias ? wordFilter(searchValue, alias) : null;\n                if (labelHighlights || aliasHighlights) {\n                    entries.push(this.instantiationService.createInstance(EditorActionCommandEntry, action.id, this.keybindingService.lookupKeybinding(action.id), label, alias, { label: labelHighlights, alias: aliasHighlights }, action, function (id) { return _this.onBeforeRunCommand(id); }));\n                }\n            }\n        }\n        return entries;\n    };\n    CommandsHandler.prototype.onBeforeRunCommand = function (commandId) {\n        // Remember in commands history\n        this.commandsHistory.push(commandId);\n    };\n    CommandsHandler.prototype.menuItemActionsToEntries = function (actions, searchValue) {\n        var _this = this;\n        var entries = [];\n        for (var _i = 0, actions_4 = actions; _i < actions_4.length; _i++) {\n            var action = actions_4[_i];\n            var title = typeof action.item.title === 'string' ? action.item.title : action.item.title.value;\n            var category = void 0, label = title;\n            if (action.item.category) {\n                category = typeof action.item.category === 'string' ? action.item.category : action.item.category.value;\n                label = nls.localize('cat.title', \"{0}: {1}\", category, title);\n            }\n            if (label) {\n                var labelHighlights = wordFilter(searchValue, label);\n                // Add an 'alias' in original language when running in different locale\n                var aliasTitle = (!platform_1.Language.isDefaultVariant() && typeof action.item.title !== 'string') ? action.item.title.original : null;\n                var aliasCategory = (!platform_1.Language.isDefaultVariant() && category && action.item.category && typeof action.item.category !== 'string') ? action.item.category.original : null;\n                var alias = void 0;\n                if (aliasTitle && category) {\n                    alias = aliasCategory ? aliasCategory + \": \" + aliasTitle : category + \": \" + aliasTitle;\n                }\n                else if (aliasTitle) {\n                    alias = aliasTitle;\n                }\n                var aliasHighlights = alias ? wordFilter(searchValue, alias) : null;\n                if (labelHighlights || aliasHighlights) {\n                    entries.push(this.instantiationService.createInstance(ActionCommandEntry, action.id, this.keybindingService.lookupKeybinding(action.item.id), label, alias, { label: labelHighlights, alias: aliasHighlights }, action, function (id) { return _this.onBeforeRunCommand(id); }));\n                }\n            }\n        }\n        return entries;\n    };\n    CommandsHandler.prototype.getAutoFocus = function (searchValue, context) {\n        var autoFocusPrefixMatch = searchValue.trim();\n        if (autoFocusPrefixMatch && this.commandHistoryEnabled) {\n            var firstEntry = context.model && context.model.entries[0];\n            if (firstEntry instanceof BaseCommandEntry && this.commandsHistory.peek(firstEntry.getCommandId())) {\n                autoFocusPrefixMatch = undefined; // keep focus on MRU element if we have history elements\n            }\n        }\n        return {\n            autoFocusFirstEntry: true,\n            autoFocusPrefixMatch: autoFocusPrefixMatch\n        };\n    };\n    CommandsHandler.prototype.getEmptyLabel = function (searchString) {\n        return nls.localize('noCommandsMatching', \"No commands matching\");\n    };\n    CommandsHandler.ID = 'workbench.picker.commands';\n    CommandsHandler = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, keybinding_1.IKeybindingService),\n        tslib_1.__param(3, actions_2.IMenuService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, extensions_1.IExtensionService)\n    ], CommandsHandler);\n    return CommandsHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.CommandsHandler = CommandsHandler;\neditorExtensions_1.registerEditorAction(CommandPaletteEditorAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/commandsHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/commandsHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as arrays from 'vs/base/common/arrays';\nimport * as types from 'vs/base/common/types';\nimport { Language } from 'vs/base/common/platform';\nimport { Action } from 'vs/base/common/actions';\nimport { Mode, IEntryRunContext, IAutoFocus, IModel, IQuickNavigateConfiguration } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenEntryGroup, IHighlight, QuickOpenModel, QuickOpenEntry } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { IMenuService, MenuId, MenuItemAction } from 'vs/platform/actions/common/actions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { QuickOpenHandler, IWorkbenchQuickOpenConfiguration } from 'vs/workbench/browser/quickopen';\nimport { IEditorAction } from 'vs/editor/common/editorCommon';\nimport { matchesWords, matchesPrefix, matchesContiguousSubString, or } from 'vs/base/common/filters';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { registerEditorAction, EditorAction, IEditorCommandMenuOptions } from 'vs/editor/browser/editorExtensions';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { LRUCache } from 'vs/base/common/map';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { timeout } from 'vs/base/common/async';\n\nexport const ALL_COMMANDS_PREFIX = '>';\n\nlet lastCommandPaletteInput: string;\nlet commandHistory: LRUCache<string, number>;\nlet commandCounter = 1;\n\ninterface ISerializedCommandHistory {\n\tusesLRU?: boolean;\n\tentries: { key: string; value: number }[];\n}\n\nfunction resolveCommandHistory(configurationService: IConfigurationService): number {\n\tconst config = <IWorkbenchQuickOpenConfiguration>configurationService.getValue();\n\n\tlet commandHistory = config.workbench && config.workbench.commandPalette && config.workbench.commandPalette.history;\n\tif (typeof commandHistory !== 'number') {\n\t\tcommandHistory = CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n\t}\n\n\treturn commandHistory;\n}\n\nclass CommandsHistory extends Disposable {\n\n\tstatic readonly DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n\n\tprivate static readonly PREF_KEY_CACHE = 'commandPalette.mru.cache';\n\tprivate static readonly PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n\n\tprivate commandHistoryLength: number;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateConfiguration();\n\t\tthis.load();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration()));\n\t\tthis._register(this.storageService.onWillSaveState(() => this.saveState()));\n\t}\n\n\tprivate updateConfiguration(): void {\n\t\tthis.commandHistoryLength = resolveCommandHistory(this.configurationService);\n\n\t\tif (commandHistory) {\n\t\t\tcommandHistory.limit = this.commandHistoryLength;\n\t\t}\n\t}\n\n\tprivate load(): void {\n\t\tconst raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, StorageScope.GLOBAL);\n\t\tlet serializedCache: ISerializedCommandHistory | undefined;\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tserializedCache = JSON.parse(raw);\n\t\t\t} catch (error) {\n\t\t\t\t// invalid data\n\t\t\t}\n\t\t}\n\n\t\tcommandHistory = new LRUCache<string, number>(this.commandHistoryLength, 1);\n\t\tif (serializedCache) {\n\t\t\tlet entries: { key: string; value: number }[];\n\t\t\tif (serializedCache.usesLRU) {\n\t\t\t\tentries = serializedCache.entries;\n\t\t\t} else {\n\t\t\t\tentries = serializedCache.entries.sort((a, b) => a.value - b.value);\n\t\t\t}\n\t\t\tentries.forEach(entry => commandHistory.set(entry.key, entry.value));\n\t\t}\n\n\t\tcommandCounter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, StorageScope.GLOBAL, commandCounter);\n\t}\n\n\tpush(commandId: string): void {\n\t\tcommandHistory.set(commandId, commandCounter++); // set counter to command\n\t}\n\n\tpeek(commandId: string): number | undefined {\n\t\treturn commandHistory.peek(commandId);\n\t}\n\n\tprivate saveState(): void {\n\t\tconst serializedCache: ISerializedCommandHistory = { usesLRU: true, entries: [] };\n\t\tcommandHistory.forEach((value, key) => serializedCache.entries.push({ key, value }));\n\n\t\tthis.storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), StorageScope.GLOBAL);\n\t\tthis.storageService.store(CommandsHistory.PREF_KEY_COUNTER, commandCounter, StorageScope.GLOBAL);\n\t}\n}\n\nexport class ShowAllCommandsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.showCommands';\n\tstatic readonly LABEL = nls.localize('showTriggerActions', \"Show All Commands\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(context?: any): Promise<void> {\n\t\tconst config = <IWorkbenchQuickOpenConfiguration>this.configurationService.getValue();\n\t\tconst restoreInput = config.workbench && config.workbench.commandPalette && config.workbench.commandPalette.preserveInput === true;\n\n\t\t// Show with last command palette input if any and configured\n\t\tlet value = ALL_COMMANDS_PREFIX;\n\t\tif (restoreInput && lastCommandPaletteInput) {\n\t\t\tvalue = `${value}${lastCommandPaletteInput}`;\n\t\t}\n\n\t\tthis.quickOpenService.show(value, { inputSelection: lastCommandPaletteInput ? { start: 1 /* after prefix */, end: value.length } : undefined });\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ClearCommandHistoryAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.clearCommandHistory';\n\tstatic readonly LABEL = nls.localize('clearCommandHistory', \"Clear Command History\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(context?: any): Promise<void> {\n\t\tconst commandHistoryLength = resolveCommandHistory(this.configurationService);\n\t\tif (commandHistoryLength > 0) {\n\t\t\tcommandHistory = new LRUCache<string, number>(commandHistoryLength);\n\t\t\tcommandCounter = 1;\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nclass CommandPaletteEditorAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowAllCommandsAction.ID,\n\t\t\tlabel: nls.localize('showCommands.label', \"Command Palette...\"),\n\t\t\talias: 'Command Palette',\n\t\t\tprecondition: null,\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 1\n\t\t\t} as IEditorCommandMenuOptions\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst quickOpenService = accessor.get(IQuickOpenService);\n\n\t\t// Show with prefix\n\t\tquickOpenService.show(ALL_COMMANDS_PREFIX);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nabstract class BaseCommandEntry extends QuickOpenEntryGroup {\n\tprivate description: string;\n\tprivate alias: string;\n\tprivate labelLowercase: string;\n\tprivate readonly keybindingAriaLabel?: string;\n\n\tconstructor(\n\t\tprivate commandId: string,\n\t\tprivate keybinding: ResolvedKeybinding,\n\t\tprivate label: string,\n\t\talias: string,\n\t\thighlights: { label: IHighlight[], alias?: IHighlight[] },\n\t\tprivate onBeforeRun: (commandId: string) => void,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService protected telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\tthis.labelLowercase = this.label.toLowerCase();\n\t\tthis.keybindingAriaLabel = keybinding ? keybinding.getAriaLabel() || undefined : undefined;\n\n\t\tif (this.label !== alias) {\n\t\t\tthis.alias = alias;\n\t\t} else {\n\t\t\thighlights.alias = undefined;\n\t\t}\n\n\t\tthis.setHighlights(highlights.label, undefined, highlights.alias);\n\t}\n\n\tgetCommandId(): string {\n\t\treturn this.commandId;\n\t}\n\n\tgetLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tgetSortLabel(): string {\n\t\treturn this.labelLowercase;\n\t}\n\n\tgetDescription(): string {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description: string): void {\n\t\tthis.description = description;\n\t}\n\n\tgetKeybinding(): ResolvedKeybinding {\n\t\treturn this.keybinding;\n\t}\n\n\tgetDetail(): string {\n\t\treturn this.alias;\n\t}\n\n\tgetAriaLabel(): string {\n\t\tif (this.keybindingAriaLabel) {\n\t\t\treturn nls.localize('entryAriaLabelWithKey', \"{0}, {1}, commands\", this.getLabel(), this.keybindingAriaLabel);\n\t\t}\n\n\t\treturn nls.localize('entryAriaLabel', \"{0}, commands\", this.getLabel());\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tthis.runAction(this.getAction());\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected abstract getAction(): Action | IEditorAction;\n\n\tprotected runAction(action: Action | IEditorAction): void {\n\n\t\t// Indicate onBeforeRun\n\t\tthis.onBeforeRun(this.commandId);\n\n\t\t// Use a timeout to give the quick open widget a chance to close itself first\n\t\tsetTimeout(() => {\n\t\t\tif (action && (!(action instanceof Action) || action.enabled)) {\n\t\t\t\ttry {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"workbenchActionExecuted\" : {\n\t\t\t\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tthis.telemetryService.publicLog('workbenchActionExecuted', { id: action.id, from: 'quick open' });\n\t\t\t\t\t(action.run() || Promise.resolve()).then(() => {\n\t\t\t\t\t\tif (action instanceof Action) {\n\t\t\t\t\t\t\taction.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, err => this.onError(err));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.onError(error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.notificationService.info(nls.localize('actionNotEnabled', \"Command '{0}' is not enabled in the current context.\", this.getLabel()));\n\t\t\t}\n\t\t}, 50);\n\t}\n\n\tprivate onError(error?: Error): void {\n\t\tif (isPromiseCanceledError(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.error(error || nls.localize('canNotRun', \"Command '{0}' resulted in an error.\", this.label));\n\t}\n}\n\nclass EditorActionCommandEntry extends BaseCommandEntry {\n\n\tconstructor(\n\t\tcommandId: string,\n\t\tkeybinding: ResolvedKeybinding,\n\t\tlabel: string,\n\t\tmeta: string,\n\t\thighlights: { label: IHighlight[], alias: IHighlight[] },\n\t\tprivate action: IEditorAction,\n\t\tonBeforeRun: (commandId: string) => void,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tsuper(commandId, keybinding, label, meta, highlights, onBeforeRun, notificationService, telemetryService);\n\t}\n\n\tprotected getAction(): Action | IEditorAction {\n\t\treturn this.action;\n\t}\n}\n\nclass ActionCommandEntry extends BaseCommandEntry {\n\n\tconstructor(\n\t\tcommandId: string,\n\t\tkeybinding: ResolvedKeybinding,\n\t\tlabel: string,\n\t\talias: string,\n\t\thighlights: { label: IHighlight[], alias: IHighlight[] },\n\t\tprivate action: Action,\n\t\tonBeforeRun: (commandId: string) => void,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tsuper(commandId, keybinding, label, alias, highlights, onBeforeRun, notificationService, telemetryService);\n\t}\n\n\tprotected getAction(): Action | IEditorAction {\n\t\treturn this.action;\n\t}\n}\n\nconst wordFilter = or(matchesPrefix, matchesWords, matchesContiguousSubString);\n\nexport class CommandsHandler extends QuickOpenHandler {\n\n\tstatic readonly ID = 'workbench.picker.commands';\n\n\tprivate commandHistoryEnabled: boolean;\n\tprivate commandsHistory: CommandsHistory;\n\tprivate extensionsRegistered: boolean;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\n\t\tthis.commandsHistory = this.instantiationService.createInstance(CommandsHistory);\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => this.extensionsRegistered = true);\n\n\t\tthis.configurationService.onDidChangeConfiguration(e => this.updateConfiguration());\n\t\tthis.updateConfiguration();\n\t}\n\n\tprivate updateConfiguration(): void {\n\t\tthis.commandHistoryEnabled = resolveCommandHistory(this.configurationService) > 0;\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tif (this.extensionsRegistered) {\n\t\t\treturn this.doGetResults(searchValue, token);\n\t\t}\n\n\t\t// If extensions are not yet registered, we wait for a little moment to give them\n\t\t// a chance to register so that the complete set of commands shows up as result\n\t\t// We do not want to delay functionality beyond that time though to keep the commands\n\t\t// functional.\n\t\treturn Promise.race([timeout(800), this.extensionService.whenInstalledExtensionsRegistered().then(() => undefined)]).then(() => this.doGetResults(searchValue, token));\n\t}\n\n\tprivate doGetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn Promise.resolve(new QuickOpenModel([]));\n\t\t}\n\n\t\tsearchValue = searchValue.trim();\n\n\t\t// Remember as last command palette input\n\t\tlastCommandPaletteInput = searchValue;\n\n\t\t// Editor Actions\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tlet editorActions: IEditorAction[] = [];\n\t\tif (activeTextEditorWidget && types.isFunction(activeTextEditorWidget.getSupportedActions)) {\n\t\t\teditorActions = activeTextEditorWidget.getSupportedActions();\n\t\t}\n\n\t\tconst editorEntries = this.editorActionsToEntries(editorActions, searchValue);\n\n\t\t// Other Actions\n\t\tconst menu = this.editorService.invokeWithinEditorContext(accessor => this.menuService.createMenu(MenuId.CommandPalette, accessor.get(IContextKeyService)));\n\t\tconst menuActions = menu.getActions().reduce((r, [, actions]) => [...r, ...actions], <MenuItemAction[]>[]).filter(action => action instanceof MenuItemAction) as MenuItemAction[];\n\t\tconst commandEntries = this.menuItemActionsToEntries(menuActions, searchValue);\n\t\tmenu.dispose();\n\n\t\t// Concat\n\t\tlet entries = [...editorEntries, ...commandEntries];\n\n\t\t// Remove duplicates\n\t\tentries = arrays.distinct(entries, entry => `${entry.getLabel()}${entry.getGroupLabel()}${entry.getCommandId()}`);\n\n\t\t// Handle label clashes\n\t\tconst commandLabels = new Set<string>();\n\t\tentries.forEach(entry => {\n\t\t\tconst commandLabel = `${entry.getLabel()}${entry.getGroupLabel()}`;\n\t\t\tif (commandLabels.has(commandLabel)) {\n\t\t\t\tentry.setDescription(entry.getCommandId());\n\t\t\t} else {\n\t\t\t\tcommandLabels.add(commandLabel);\n\t\t\t}\n\t\t});\n\n\t\t// Sort by MRU order and fallback to name otherwie\n\t\tentries = entries.sort((elementA, elementB) => {\n\t\t\tconst counterA = this.commandsHistory.peek(elementA.getCommandId());\n\t\t\tconst counterB = this.commandsHistory.peek(elementB.getCommandId());\n\n\t\t\tif (counterA && counterB) {\n\t\t\t\treturn counterA > counterB ? -1 : 1; // use more recently used command before older\n\t\t\t}\n\n\t\t\tif (counterA) {\n\t\t\t\treturn -1; // first command was used, so it wins over the non used one\n\t\t\t}\n\n\t\t\tif (counterB) {\n\t\t\t\treturn 1; // other command was used so it wins over the command\n\t\t\t}\n\n\t\t\t// both commands were never used, so we sort by name\n\t\t\treturn elementA.getSortLabel().localeCompare(elementB.getSortLabel());\n\t\t});\n\n\t\t// Introduce group marker border between recently used and others\n\t\t// only if we have recently used commands in the result set\n\t\tconst firstEntry = entries[0];\n\t\tif (firstEntry && this.commandsHistory.peek(firstEntry.getCommandId())) {\n\t\t\tfirstEntry.setGroupLabel(nls.localize('recentlyUsed', \"recently used\"));\n\t\t\tfor (let i = 1; i < entries.length; i++) {\n\t\t\t\tconst entry = entries[i];\n\t\t\t\tif (!this.commandsHistory.peek(entry.getCommandId())) {\n\t\t\t\t\tentry.setShowBorder(true);\n\t\t\t\t\tentry.setGroupLabel(nls.localize('morecCommands', \"other commands\"));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(new QuickOpenModel(entries));\n\t}\n\n\tprivate editorActionsToEntries(actions: IEditorAction[], searchValue: string): EditorActionCommandEntry[] {\n\t\tconst entries: EditorActionCommandEntry[] = [];\n\n\t\tfor (const action of actions) {\n\t\t\tif (action.id === ShowAllCommandsAction.ID) {\n\t\t\t\tcontinue; // avoid duplicates\n\t\t\t}\n\n\t\t\tconst label = action.label;\n\t\t\tif (label) {\n\n\t\t\t\t// Alias for non default languages\n\t\t\t\tconst alias = !Language.isDefaultVariant() ? action.alias : null;\n\t\t\t\tconst labelHighlights = wordFilter(searchValue, label);\n\t\t\t\tconst aliasHighlights = alias ? wordFilter(searchValue, alias) : null;\n\n\t\t\t\tif (labelHighlights || aliasHighlights) {\n\t\t\t\t\tentries.push(this.instantiationService.createInstance(EditorActionCommandEntry, action.id, this.keybindingService.lookupKeybinding(action.id), label, alias, { label: labelHighlights, alias: aliasHighlights }, action, (id: string) => this.onBeforeRunCommand(id)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn entries;\n\t}\n\n\tprivate onBeforeRunCommand(commandId: string): void {\n\n\t\t// Remember in commands history\n\t\tthis.commandsHistory.push(commandId);\n\t}\n\n\tprivate menuItemActionsToEntries(actions: MenuItemAction[], searchValue: string): ActionCommandEntry[] {\n\t\tconst entries: ActionCommandEntry[] = [];\n\n\t\tfor (let action of actions) {\n\t\t\tconst title = typeof action.item.title === 'string' ? action.item.title : action.item.title.value;\n\t\t\tlet category, label = title;\n\t\t\tif (action.item.category) {\n\t\t\t\tcategory = typeof action.item.category === 'string' ? action.item.category : action.item.category.value;\n\t\t\t\tlabel = nls.localize('cat.title', \"{0}: {1}\", category, title);\n\t\t\t}\n\n\t\t\tif (label) {\n\t\t\t\tconst labelHighlights = wordFilter(searchValue, label);\n\n\t\t\t\t// Add an 'alias' in original language when running in different locale\n\t\t\t\tconst aliasTitle = (!Language.isDefaultVariant() && typeof action.item.title !== 'string') ? action.item.title.original : null;\n\t\t\t\tconst aliasCategory = (!Language.isDefaultVariant() && category && action.item.category && typeof action.item.category !== 'string') ? action.item.category.original : null;\n\t\t\t\tlet alias;\n\t\t\t\tif (aliasTitle && category) {\n\t\t\t\t\talias = aliasCategory ? `${aliasCategory}: ${aliasTitle}` : `${category}: ${aliasTitle}`;\n\t\t\t\t} else if (aliasTitle) {\n\t\t\t\t\talias = aliasTitle;\n\t\t\t\t}\n\t\t\t\tconst aliasHighlights = alias ? wordFilter(searchValue, alias) : null;\n\n\t\t\t\tif (labelHighlights || aliasHighlights) {\n\t\t\t\t\tentries.push(this.instantiationService.createInstance(ActionCommandEntry, action.id, this.keybindingService.lookupKeybinding(action.item.id), label, alias, { label: labelHighlights, alias: aliasHighlights }, action, (id: string) => this.onBeforeRunCommand(id)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn entries;\n\t}\n\n\tgetAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\tlet autoFocusPrefixMatch: string | undefined = searchValue.trim();\n\n\t\tif (autoFocusPrefixMatch && this.commandHistoryEnabled) {\n\t\t\tconst firstEntry = context.model && context.model.entries[0];\n\t\t\tif (firstEntry instanceof BaseCommandEntry && this.commandsHistory.peek(firstEntry.getCommandId())) {\n\t\t\t\tautoFocusPrefixMatch = undefined; // keep focus on MRU element if we have history elements\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tautoFocusFirstEntry: true,\n\t\t\tautoFocusPrefixMatch\n\t\t};\n\t}\n\n\tgetEmptyLabel(searchString: string): string {\n\t\treturn nls.localize('noCommandsMatching', \"No commands matching\");\n\t}\n}\n\nregisterEditorAction(CommandPaletteEditorAction);\n"]}]}