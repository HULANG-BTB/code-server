{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\", \"vs/editor/common/editorContextKeys\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/services/editorWorkerService\", \"./inPlaceReplaceCommand\", \"vs/editor/browser/core/editorState\", \"vs/platform/theme/common/themeService\", \"vs/editor/common/view/editorColorRegistry\", \"vs/editor/common/model/textModel\", \"vs/base/common/async\", \"vs/base/common/errors\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, nls, keyCodes_1, range_1, selection_1, editorContextKeys_1, editorExtensions_1, editorWorkerService_1, inPlaceReplaceCommand_1, editorState_1, themeService_1, editorColorRegistry_1, textModel_1, async_1, errors_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let InPlaceReplaceController = class InPlaceReplaceController {\n        constructor(editor, editorWorkerService) {\n            this.decorationIds = [];\n            this.editor = editor;\n            this.editorWorkerService = editorWorkerService;\n        }\n        static get(editor) {\n            return editor.getContribution(InPlaceReplaceController.ID);\n        }\n        dispose() {\n        }\n        getId() {\n            return InPlaceReplaceController.ID;\n        }\n        run(source, up) {\n            // cancel any pending request\n            if (this.currentRequest) {\n                this.currentRequest.cancel();\n            }\n            const editorSelection = this.editor.getSelection();\n            const model = this.editor.getModel();\n            if (!model || !editorSelection) {\n                return undefined;\n            }\n            let selection = editorSelection;\n            if (selection.startLineNumber !== selection.endLineNumber) {\n                // Can't accept multiline selection\n                return undefined;\n            }\n            const state = new editorState_1.EditorState(this.editor, editorState_1.CodeEditorStateFlag.Value | editorState_1.CodeEditorStateFlag.Position);\n            const modelURI = model.uri;\n            if (!this.editorWorkerService.canNavigateValueSet(modelURI)) {\n                return Promise.resolve(undefined);\n            }\n            this.currentRequest = async_1.createCancelablePromise(token => this.editorWorkerService.navigateValueSet(modelURI, selection, up));\n            return this.currentRequest.then(result => {\n                if (!result || !result.range || !result.value) {\n                    // No proper result\n                    return;\n                }\n                if (!state.validate(this.editor)) {\n                    // state has changed\n                    return;\n                }\n                // Selection\n                let editRange = range_1.Range.lift(result.range);\n                let highlightRange = result.range;\n                let diff = result.value.length - (selection.endColumn - selection.startColumn);\n                // highlight\n                highlightRange = {\n                    startLineNumber: highlightRange.startLineNumber,\n                    startColumn: highlightRange.startColumn,\n                    endLineNumber: highlightRange.endLineNumber,\n                    endColumn: highlightRange.startColumn + result.value.length\n                };\n                if (diff > 1) {\n                    selection = new selection_1.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);\n                }\n                // Insert new text\n                const command = new inPlaceReplaceCommand_1.InPlaceReplaceCommand(editRange, selection, result.value);\n                this.editor.pushUndoStop();\n                this.editor.executeCommand(source, command);\n                this.editor.pushUndoStop();\n                // add decoration\n                this.decorationIds = this.editor.deltaDecorations(this.decorationIds, [{\n                        range: highlightRange,\n                        options: InPlaceReplaceController.DECORATION\n                    }]);\n                // remove decoration after delay\n                if (this.decorationRemover) {\n                    this.decorationRemover.cancel();\n                }\n                this.decorationRemover = async_1.timeout(350);\n                this.decorationRemover.then(() => this.decorationIds = this.editor.deltaDecorations(this.decorationIds, [])).catch(errors_1.onUnexpectedError);\n            }).catch(errors_1.onUnexpectedError);\n        }\n    };\n    InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';\n    InPlaceReplaceController.DECORATION = textModel_1.ModelDecorationOptions.register({\n        className: 'valueSetReplacement'\n    });\n    InPlaceReplaceController = __decorate([\n        __param(1, editorWorkerService_1.IEditorWorkerService)\n    ], InPlaceReplaceController);\n    class InPlaceReplaceUp extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.inPlaceReplace.up',\n                label: nls.localize('InPlaceReplaceAction.previous.label', \"Replace with Previous Value\"),\n                alias: 'Replace with Previous Value',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_COMMA,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            const controller = InPlaceReplaceController.get(editor);\n            if (!controller) {\n                return Promise.resolve(undefined);\n            }\n            return controller.run(this.id, true);\n        }\n    }\n    class InPlaceReplaceDown extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.inPlaceReplace.down',\n                label: nls.localize('InPlaceReplaceAction.next.label', \"Replace with Next Value\"),\n                alias: 'Replace with Next Value',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_DOT,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            const controller = InPlaceReplaceController.get(editor);\n            if (!controller) {\n                return Promise.resolve(undefined);\n            }\n            return controller.run(this.id, false);\n        }\n    }\n    editorExtensions_1.registerEditorContribution(InPlaceReplaceController);\n    editorExtensions_1.registerEditorAction(InPlaceReplaceUp);\n    editorExtensions_1.registerEditorAction(InPlaceReplaceDown);\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const border = theme.getColor(editorColorRegistry_1.editorBracketMatchBorder);\n        if (border) {\n            collector.addRule(`.monaco-editor.vs .valueSetReplacement { outline: solid 2px ${border}; }`);\n        }\n    });\n});\n",null]}