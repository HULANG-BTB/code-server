{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findOptionsWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findOptionsWidget.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/browser/ui/findinput/findInputCheckboxes\", \"vs/base/browser/ui/widget\", \"vs/base/common/async\", \"vs/editor/browser/editorBrowser\", \"vs/editor/contrib/find/findModel\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\"], function (require, exports, dom, findInputCheckboxes_1, widget_1, async_1, editorBrowser_1, findModel_1, colorRegistry_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FindOptionsWidget extends widget_1.Widget {\n        constructor(editor, state, keybindingService, themeService) {\n            super();\n            this._hideSoon = this._register(new async_1.RunOnceScheduler(() => this._hide(), 2000));\n            this._isVisible = false;\n            this._editor = editor;\n            this._state = state;\n            this._keybindingService = keybindingService;\n            this._domNode = document.createElement('div');\n            this._domNode.className = 'findOptionsWidget';\n            this._domNode.style.display = 'none';\n            this._domNode.style.top = '10px';\n            this._domNode.setAttribute('role', 'presentation');\n            this._domNode.setAttribute('aria-hidden', 'true');\n            const inputActiveOptionBorderColor = themeService.getTheme().getColor(colorRegistry_1.inputActiveOptionBorder);\n            this.caseSensitive = this._register(new findInputCheckboxes_1.CaseSensitiveCheckbox({\n                appendTitle: this._keybindingLabelFor(findModel_1.FIND_IDS.ToggleCaseSensitiveCommand),\n                isChecked: this._state.matchCase,\n                inputActiveOptionBorder: inputActiveOptionBorderColor\n            }));\n            this._domNode.appendChild(this.caseSensitive.domNode);\n            this._register(this.caseSensitive.onChange(() => {\n                this._state.change({\n                    matchCase: this.caseSensitive.checked\n                }, false);\n            }));\n            this.wholeWords = this._register(new findInputCheckboxes_1.WholeWordsCheckbox({\n                appendTitle: this._keybindingLabelFor(findModel_1.FIND_IDS.ToggleWholeWordCommand),\n                isChecked: this._state.wholeWord,\n                inputActiveOptionBorder: inputActiveOptionBorderColor\n            }));\n            this._domNode.appendChild(this.wholeWords.domNode);\n            this._register(this.wholeWords.onChange(() => {\n                this._state.change({\n                    wholeWord: this.wholeWords.checked\n                }, false);\n            }));\n            this.regex = this._register(new findInputCheckboxes_1.RegexCheckbox({\n                appendTitle: this._keybindingLabelFor(findModel_1.FIND_IDS.ToggleRegexCommand),\n                isChecked: this._state.isRegex,\n                inputActiveOptionBorder: inputActiveOptionBorderColor\n            }));\n            this._domNode.appendChild(this.regex.domNode);\n            this._register(this.regex.onChange(() => {\n                this._state.change({\n                    isRegex: this.regex.checked\n                }, false);\n            }));\n            this._editor.addOverlayWidget(this);\n            this._register(this._state.onFindReplaceStateChange((e) => {\n                let somethingChanged = false;\n                if (e.isRegex) {\n                    this.regex.checked = this._state.isRegex;\n                    somethingChanged = true;\n                }\n                if (e.wholeWord) {\n                    this.wholeWords.checked = this._state.wholeWord;\n                    somethingChanged = true;\n                }\n                if (e.matchCase) {\n                    this.caseSensitive.checked = this._state.matchCase;\n                    somethingChanged = true;\n                }\n                if (!this._state.isRevealed && somethingChanged) {\n                    this._revealTemporarily();\n                }\n            }));\n            this._register(dom.addDisposableNonBubblingMouseOutListener(this._domNode, (e) => this._onMouseOut()));\n            this._register(dom.addDisposableListener(this._domNode, 'mouseover', (e) => this._onMouseOver()));\n            this._applyTheme(themeService.getTheme());\n            this._register(themeService.onThemeChange(this._applyTheme.bind(this)));\n        }\n        _keybindingLabelFor(actionId) {\n            let kb = this._keybindingService.lookupKeybinding(actionId);\n            if (!kb) {\n                return '';\n            }\n            return ` (${kb.getLabel()})`;\n        }\n        dispose() {\n            this._editor.removeOverlayWidget(this);\n            super.dispose();\n        }\n        // ----- IOverlayWidget API\n        getId() {\n            return FindOptionsWidget.ID;\n        }\n        getDomNode() {\n            return this._domNode;\n        }\n        getPosition() {\n            return {\n                preference: editorBrowser_1.OverlayWidgetPositionPreference.TOP_RIGHT_CORNER\n            };\n        }\n        highlightFindOptions() {\n            this._revealTemporarily();\n        }\n        _revealTemporarily() {\n            this._show();\n            this._hideSoon.schedule();\n        }\n        _onMouseOut() {\n            this._hideSoon.schedule();\n        }\n        _onMouseOver() {\n            this._hideSoon.cancel();\n        }\n        _show() {\n            if (this._isVisible) {\n                return;\n            }\n            this._isVisible = true;\n            this._domNode.style.display = 'block';\n        }\n        _hide() {\n            if (!this._isVisible) {\n                return;\n            }\n            this._isVisible = false;\n            this._domNode.style.display = 'none';\n        }\n        _applyTheme(theme) {\n            let inputStyles = { inputActiveOptionBorder: theme.getColor(colorRegistry_1.inputActiveOptionBorder) };\n            this.caseSensitive.style(inputStyles);\n            this.wholeWords.style(inputStyles);\n            this.regex.style(inputStyles);\n        }\n    }\n    FindOptionsWidget.ID = 'editor.contrib.findOptionsWidget';\n    exports.FindOptionsWidget = FindOptionsWidget;\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const widgetBackground = theme.getColor(colorRegistry_1.editorWidgetBackground);\n        if (widgetBackground) {\n            collector.addRule(`.monaco-editor .findOptionsWidget { background-color: ${widgetBackground}; }`);\n        }\n        const widgetShadowColor = theme.getColor(colorRegistry_1.widgetShadow);\n        if (widgetShadowColor) {\n            collector.addRule(`.monaco-editor .findOptionsWidget { box-shadow: 0 2px 8px ${widgetShadowColor}; }`);\n        }\n        const hcBorder = theme.getColor(colorRegistry_1.contrastBorder);\n        if (hcBorder) {\n            collector.addRule(`.monaco-editor .findOptionsWidget { border: 2px solid ${hcBorder}; }`);\n        }\n    });\n});\n",null]}