{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar platform = require(\"vs/base/common/platform\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar terminalService_1 = require(\"vs/workbench/contrib/terminal/common/terminalService\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar terminalTab_1 = require(\"vs/workbench/contrib/terminal/browser/terminalTab\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar terminalInstance_1 = require(\"vs/workbench/contrib/terminal/browser/terminalInstance\");\nvar TerminalService = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalService, _super);\n    function TerminalService(contextKeyService, panelService, _layoutService, lifecycleService, storageService, notificationService, dialogService, _instantiationService, _windowService, extensionService, fileService) {\n        var _this = _super.call(this, contextKeyService, panelService, lifecycleService, storageService, notificationService, dialogService, extensionService, fileService) || this;\n        _this._layoutService = _layoutService;\n        _this._instantiationService = _instantiationService;\n        _this._windowService = _windowService;\n        return _this;\n    }\n    TerminalService.prototype.createInstance = function (terminalFocusContextKey, configHelper, container, shellLaunchConfig, doCreateProcess) {\n        var instance = this._instantiationService.createInstance(terminalInstance_1.TerminalInstance, terminalFocusContextKey, configHelper, container, shellLaunchConfig);\n        this._onInstanceCreated.fire(instance);\n        return instance;\n    };\n    TerminalService.prototype.createTerminal = function (shell, wasNewTerminalAction) {\n        if (shell === void 0) { shell = {}; }\n        var terminalTab = this._instantiationService.createInstance(terminalTab_1.TerminalTab, this._terminalFocusContextKey, this.configHelper, this._terminalContainer, shell);\n        this._terminalTabs.push(terminalTab);\n        var instance = terminalTab.terminalInstances[0];\n        terminalTab.addDisposable(terminalTab.onDisposed(this._onTabDisposed.fire, this._onTabDisposed));\n        terminalTab.addDisposable(terminalTab.onInstancesChanged(this._onInstancesChanged.fire, this._onInstancesChanged));\n        this._initInstanceListeners(instance);\n        if (this.terminalInstances.length === 1) {\n            // It's the first instance so it should be made active automatically\n            this.setActiveInstanceByIndex(0);\n        }\n        this._onInstancesChanged.fire();\n        this._suggestShellChange(wasNewTerminalAction);\n        return instance;\n    };\n    TerminalService.prototype._suggestShellChange = function (wasNewTerminalAction) {\n        var _this = this;\n        // Only suggest on Windows since $SHELL works great for macOS/Linux\n        if (!platform.isWindows) {\n            return;\n        }\n        if (this._windowService.getConfiguration().remoteAuthority) {\n            // Don't suggest if the opened workspace is remote\n            return;\n        }\n        // Only suggest when the terminal instance is being created by an explicit user action to\n        // launch a terminal, as opposed to something like tasks, debug, panel restore, etc.\n        if (!wasNewTerminalAction) {\n            return;\n        }\n        if (this._windowService.getConfiguration().remoteAuthority) {\n            // Don't suggest if the opened workspace is remote\n            return;\n        }\n        // Don't suggest if the user has explicitly opted out\n        var neverSuggest = this._storageService.getBoolean(terminal_1.NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, storage_1.StorageScope.GLOBAL, false);\n        if (neverSuggest) {\n            return;\n        }\n        // Never suggest if the setting is non-default already (ie. they set the setting manually)\n        if (this.configHelper.config.shell.windows !== this._getDefaultShell(platform.Platform.Windows)) {\n            this._storageService.store(terminal_1.NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, true, storage_1.StorageScope.GLOBAL);\n            return;\n        }\n        this._notificationService.prompt(notification_1.Severity.Info, nls.localize('terminal.integrated.chooseWindowsShellInfo', \"You can change the default terminal shell by selecting the customize button.\"), [{\n                label: nls.localize('customize', \"Customize\"),\n                run: function () {\n                    _this.selectDefaultWindowsShell().then(function (shell) {\n                        if (!shell) {\n                            return Promise.resolve(null);\n                        }\n                        // Launch a new instance with the newly selected shell\n                        var instance = _this.createTerminal({\n                            executable: shell,\n                            args: _this.configHelper.config.shellArgs.windows\n                        });\n                        if (instance) {\n                            _this.setActiveInstance(instance);\n                        }\n                        return Promise.resolve(null);\n                    });\n                }\n            },\n            {\n                label: nls.localize('never again', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () { return _this._storageService.store(terminal_1.NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, true, storage_1.StorageScope.GLOBAL); }\n            }]);\n    };\n    TerminalService.prototype.focusFindWidget = function () {\n        var _this = this;\n        return this.showPanel(false).then(function () {\n            var panel = _this._panelService.getActivePanel();\n            panel.focusFindWidget();\n            _this._findWidgetVisible.set(true);\n        });\n    };\n    TerminalService.prototype.hideFindWidget = function () {\n        var panel = this._panelService.getActivePanel();\n        if (panel && panel.getId() === terminal_1.TERMINAL_PANEL_ID) {\n            panel.hideFindWidget();\n            this._findWidgetVisible.reset();\n            panel.focus();\n        }\n    };\n    TerminalService.prototype.findNext = function () {\n        var panel = this._panelService.getActivePanel();\n        if (panel && panel.getId() === terminal_1.TERMINAL_PANEL_ID) {\n            panel.showFindWidget();\n            panel.getFindWidget().find(false);\n        }\n    };\n    TerminalService.prototype.findPrevious = function () {\n        var panel = this._panelService.getActivePanel();\n        if (panel && panel.getId() === terminal_1.TERMINAL_PANEL_ID) {\n            panel.showFindWidget();\n            panel.getFindWidget().find(true);\n        }\n    };\n    TerminalService.prototype.setContainers = function (panelContainer, terminalContainer) {\n        var _this = this;\n        this._configHelper.panelContainer = panelContainer;\n        this._terminalContainer = terminalContainer;\n        this._terminalTabs.forEach(function (tab) { return tab.attachToElement(_this._terminalContainer); });\n    };\n    TerminalService.prototype.hidePanel = function () {\n        var panel = this._panelService.getActivePanel();\n        if (panel && panel.getId() === terminal_1.TERMINAL_PANEL_ID) {\n            this._layoutService.setPanelHidden(true);\n        }\n    };\n    TerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, panelService_1.IPanelService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, lifecycle_1.ILifecycleService),\n        tslib_1.__param(4, storage_1.IStorageService),\n        tslib_1.__param(5, notification_1.INotificationService),\n        tslib_1.__param(6, dialogs_1.IDialogService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, windows_1.IWindowService),\n        tslib_1.__param(9, extensions_1.IExtensionService),\n        tslib_1.__param(10, files_1.IFileService)\n    ], TerminalService);\n    return TerminalService;\n}(terminalService_1.TerminalService));\nexports.TerminalService = TerminalService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as platform from 'vs/base/common/platform';\nimport { ITerminalService, TERMINAL_PANEL_ID, ITerminalInstance, IShellLaunchConfig, NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, ITerminalConfigHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalService as CommonTerminalService } from 'vs/workbench/contrib/terminal/common/terminalService';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { TerminalPanel } from 'vs/workbench/contrib/terminal/browser/terminalPanel';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { TerminalTab } from 'vs/workbench/contrib/terminal/browser/terminalTab';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { TerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminalInstance';\nimport { IBrowserTerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminal';\n\nexport abstract class TerminalService extends CommonTerminalService implements ITerminalService {\n\tprotected _configHelper: IBrowserTerminalConfigHelper;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IWorkbenchLayoutService private _layoutService: IWorkbenchLayoutService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t\t@IWindowService private _windowService: IWindowService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t) {\n\t\tsuper(contextKeyService, panelService, lifecycleService, storageService, notificationService, dialogService, extensionService, fileService);\n\t}\n\n\tprotected abstract _getDefaultShell(p: platform.Platform): string;\n\n\tpublic createInstance(terminalFocusContextKey: IContextKey<boolean>, configHelper: ITerminalConfigHelper, container: HTMLElement | undefined, shellLaunchConfig: IShellLaunchConfig, doCreateProcess: boolean): ITerminalInstance {\n\t\tconst instance = this._instantiationService.createInstance(TerminalInstance, terminalFocusContextKey, configHelper, container, shellLaunchConfig);\n\t\tthis._onInstanceCreated.fire(instance);\n\t\treturn instance;\n\t}\n\n\tpublic createTerminal(shell: IShellLaunchConfig = {}, wasNewTerminalAction?: boolean): ITerminalInstance {\n\t\tconst terminalTab = this._instantiationService.createInstance(TerminalTab,\n\t\t\tthis._terminalFocusContextKey,\n\t\t\tthis.configHelper,\n\t\t\tthis._terminalContainer,\n\t\t\tshell);\n\t\tthis._terminalTabs.push(terminalTab);\n\t\tconst instance = terminalTab.terminalInstances[0];\n\t\tterminalTab.addDisposable(terminalTab.onDisposed(this._onTabDisposed.fire, this._onTabDisposed));\n\t\tterminalTab.addDisposable(terminalTab.onInstancesChanged(this._onInstancesChanged.fire, this._onInstancesChanged));\n\t\tthis._initInstanceListeners(instance);\n\t\tif (this.terminalInstances.length === 1) {\n\t\t\t// It's the first instance so it should be made active automatically\n\t\t\tthis.setActiveInstanceByIndex(0);\n\t\t}\n\t\tthis._onInstancesChanged.fire();\n\t\tthis._suggestShellChange(wasNewTerminalAction);\n\t\treturn instance;\n\t}\n\n\tprivate _suggestShellChange(wasNewTerminalAction?: boolean): void {\n\t\t// Only suggest on Windows since $SHELL works great for macOS/Linux\n\t\tif (!platform.isWindows) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._windowService.getConfiguration().remoteAuthority) {\n\t\t\t// Don't suggest if the opened workspace is remote\n\t\t\treturn;\n\t\t}\n\n\t\t// Only suggest when the terminal instance is being created by an explicit user action to\n\t\t// launch a terminal, as opposed to something like tasks, debug, panel restore, etc.\n\t\tif (!wasNewTerminalAction) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._windowService.getConfiguration().remoteAuthority) {\n\t\t\t// Don't suggest if the opened workspace is remote\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't suggest if the user has explicitly opted out\n\t\tconst neverSuggest = this._storageService.getBoolean(NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, StorageScope.GLOBAL, false);\n\t\tif (neverSuggest) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Never suggest if the setting is non-default already (ie. they set the setting manually)\n\t\tif (this.configHelper.config.shell.windows !== this._getDefaultShell(platform.Platform.Windows)) {\n\t\t\tthis._storageService.store(NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, true, StorageScope.GLOBAL);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('terminal.integrated.chooseWindowsShellInfo', \"You can change the default terminal shell by selecting the customize button.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('customize', \"Customize\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.selectDefaultWindowsShell().then(shell => {\n\t\t\t\t\t\tif (!shell) {\n\t\t\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Launch a new instance with the newly selected shell\n\t\t\t\t\t\tconst instance = this.createTerminal({\n\t\t\t\t\t\t\texecutable: shell,\n\t\t\t\t\t\t\targs: this.configHelper.config.shellArgs.windows\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize('never again', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => this._storageService.store(NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY, true, StorageScope.GLOBAL)\n\t\t\t}]\n\t\t);\n\t}\n\n\tpublic focusFindWidget(): Promise<void> {\n\t\treturn this.showPanel(false).then(() => {\n\t\t\tconst panel = this._panelService.getActivePanel() as TerminalPanel;\n\t\t\tpanel.focusFindWidget();\n\t\t\tthis._findWidgetVisible.set(true);\n\t\t});\n\t}\n\n\tpublic hideFindWidget(): void {\n\t\tconst panel = this._panelService.getActivePanel() as TerminalPanel;\n\t\tif (panel && panel.getId() === TERMINAL_PANEL_ID) {\n\t\t\tpanel.hideFindWidget();\n\t\t\tthis._findWidgetVisible.reset();\n\t\t\tpanel.focus();\n\t\t}\n\t}\n\n\tpublic findNext(): void {\n\t\tconst panel = this._panelService.getActivePanel() as TerminalPanel;\n\t\tif (panel && panel.getId() === TERMINAL_PANEL_ID) {\n\t\t\tpanel.showFindWidget();\n\t\t\tpanel.getFindWidget().find(false);\n\t\t}\n\t}\n\n\tpublic findPrevious(): void {\n\t\tconst panel = this._panelService.getActivePanel() as TerminalPanel;\n\t\tif (panel && panel.getId() === TERMINAL_PANEL_ID) {\n\t\t\tpanel.showFindWidget();\n\t\t\tpanel.getFindWidget().find(true);\n\t\t}\n\t}\n\n\tpublic setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): void {\n\t\tthis._configHelper.panelContainer = panelContainer;\n\t\tthis._terminalContainer = terminalContainer;\n\t\tthis._terminalTabs.forEach(tab => tab.attachToElement(this._terminalContainer));\n\t}\n\n\tpublic hidePanel(): void {\n\t\tconst panel = this._panelService.getActivePanel();\n\t\tif (panel && panel.getId() === TERMINAL_PANEL_ID) {\n\t\t\tthis._layoutService.setPanelHidden(true);\n\t\t}\n\t}\n}"]}]}