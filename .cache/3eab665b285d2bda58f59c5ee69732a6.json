{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar SettingValueType;\n(function (SettingValueType) {\n    SettingValueType[\"Null\"] = \"null\";\n    SettingValueType[\"Enum\"] = \"enum\";\n    SettingValueType[\"String\"] = \"string\";\n    SettingValueType[\"Integer\"] = \"integer\";\n    SettingValueType[\"Number\"] = \"number\";\n    SettingValueType[\"Boolean\"] = \"boolean\";\n    SettingValueType[\"Exclude\"] = \"exclude\";\n    SettingValueType[\"Complex\"] = \"complex\";\n    SettingValueType[\"NullableInteger\"] = \"nullable-integer\";\n    SettingValueType[\"NullableNumber\"] = \"nullable-number\";\n})(SettingValueType = exports.SettingValueType || (exports.SettingValueType = {}));\n/**\n * TODO Why do we need this class?\n */\nvar SettingsEditorOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsEditorOptions, _super);\n    function SettingsEditorOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SettingsEditorOptions.create = function (settings) {\n        var options = new SettingsEditorOptions();\n        options.target = settings.target;\n        options.folderUri = settings.folderUri;\n        options.query = settings.query;\n        // IEditorOptions\n        options.preserveFocus = settings.preserveFocus;\n        options.forceReload = settings.forceReload;\n        options.revealIfVisible = settings.revealIfVisible;\n        options.revealIfOpened = settings.revealIfOpened;\n        options.pinned = settings.pinned;\n        options.index = settings.index;\n        options.inactive = settings.inactive;\n        return options;\n    };\n    return SettingsEditorOptions;\n}(editor_1.EditorOptions));\nexports.SettingsEditorOptions = SettingsEditorOptions;\nexports.IPreferencesService = instantiation_1.createDecorator('preferencesService');\nfunction getSettingsTargetName(target, resource, workspaceContextService) {\n    switch (target) {\n        case configuration_1.ConfigurationTarget.USER:\n            return nls_1.localize('userSettingsTarget', \"User Settings\");\n        case configuration_1.ConfigurationTarget.WORKSPACE:\n            return nls_1.localize('workspaceSettingsTarget', \"Workspace Settings\");\n        case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n            var folder = workspaceContextService.getWorkspaceFolder(resource);\n            return folder ? folder.name : '';\n    }\n    return '';\n}\nexports.getSettingsTargetName = getSettingsTargetName;\nexports.FOLDER_SETTINGS_PATH = '.vscode/settings.json';\nexports.DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';\nexports.USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAOhG,8BAAkC;AAClC,gFAAqF;AAGrF,gFAAiF;AAEjF,qDAAoE;AAIpE,IAAY,gBAWX;AAXD,WAAY,gBAAgB;IAC3B,iCAAa,CAAA;IACb,iCAAa,CAAA;IACb,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;IACnB,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;IACnB,uCAAmB,CAAA;IACnB,uCAAmB,CAAA;IACnB,wDAAoC,CAAA;IACpC,sDAAkC,CAAA;AACnC,CAAC,EAXW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAW3B;AA4HD;;GAEG;AACH;IAA2C,iDAAa;IAAxD;;IAwBA,CAAC;IAlBO,4BAAM,GAAb,UAAc,QAAgC;QAC7C,IAAM,OAAO,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAE5C,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACjC,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACvC,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAE/B,iBAAiB;QACjB,OAAO,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;QAC/C,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QAC3C,OAAO,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;QACnD,OAAO,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;QACjD,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACjC,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAErC,OAAO,OAAO,CAAC;IAChB,CAAC;IACF,4BAAC;AAAD,CAAC,AAxBD,CAA2C,sBAAa,GAwBvD;AAxBY,sDAAqB;AA6BrB,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;AA0B9F,SAAgB,qBAAqB,CAAC,MAA2B,EAAE,QAAa,EAAE,uBAAiD;IAClI,QAAQ,MAAM,EAAE;QACf,KAAK,mCAAmB,CAAC,IAAI;YAC5B,OAAO,cAAQ,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC;QACxD,KAAK,mCAAmB,CAAC,SAAS;YACjC,OAAO,cAAQ,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAC;QAClE,KAAK,mCAAmB,CAAC,gBAAgB;YACxC,IAAM,MAAM,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YACpE,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;KAClC;IACD,OAAO,EAAE,CAAC;AACX,CAAC;AAXD,sDAWC;AAEY,QAAA,oBAAoB,GAAG,uBAAuB,CAAC;AAC/C,QAAA,+BAA+B,GAAG,wCAAwC,CAAC;AAC3E,QAAA,sBAAsB,GAAG,iCAAiC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { EditorOptions, IEditor } from 'vs/workbench/common/editor';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\n\nexport enum SettingValueType {\n\tNull = 'null',\n\tEnum = 'enum',\n\tString = 'string',\n\tInteger = 'integer',\n\tNumber = 'number',\n\tBoolean = 'boolean',\n\tExclude = 'exclude',\n\tComplex = 'complex',\n\tNullableInteger = 'nullable-integer',\n\tNullableNumber = 'nullable-number'\n}\n\nexport interface ISettingsGroup {\n\tid: string;\n\trange: IRange;\n\ttitle: string;\n\ttitleRange: IRange;\n\tsections: ISettingsSection[];\n\tcontributedByExtension: boolean;\n}\n\nexport interface ISettingsSection {\n\ttitleRange?: IRange;\n\ttitle?: string;\n\tsettings: ISetting[];\n}\n\nexport interface ISetting {\n\trange: IRange;\n\tkey: string;\n\tkeyRange: IRange;\n\tvalue: any;\n\tvalueRange: IRange;\n\tdescription: string[];\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionRanges: IRange[];\n\toverrides?: ISetting[];\n\toverrideOf?: ISetting;\n\tdeprecationMessage?: string;\n\n\tscope?: ConfigurationScope;\n\ttype?: string | string[];\n\tenum?: string[];\n\tenumDescriptions?: string[];\n\tenumDescriptionsAreMarkdown?: boolean;\n\ttags?: string[];\n\tvalidator?: (value: any) => string | null;\n}\n\nexport interface IExtensionSetting extends ISetting {\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface ISearchResult {\n\tfilterMatches: ISettingMatch[];\n\texactMatch?: boolean;\n\tmetadata?: IFilterMetadata;\n}\n\nexport interface ISearchResultGroup {\n\tid: string;\n\tlabel: string;\n\tresult: ISearchResult;\n\torder: number;\n}\n\nexport interface IFilterResult {\n\tquery?: string;\n\tfilteredGroups: ISettingsGroup[];\n\tallGroups: ISettingsGroup[];\n\tmatches: IRange[];\n\tmetadata?: IStringDictionary<IFilterMetadata>;\n\texactMatch?: boolean;\n}\n\nexport interface ISettingMatch {\n\tsetting: ISetting;\n\tmatches: IRange[] | null;\n\tscore: number;\n}\n\nexport interface IScoredResults {\n\t[key: string]: IRemoteSetting;\n}\n\nexport interface IRemoteSetting {\n\tscore: number;\n\tkey: string;\n\tid: string;\n\tdefaultValue: string;\n\tdescription: string;\n\tpackageId: string;\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface IFilterMetadata {\n\trequestUrl: string;\n\trequestBody: string;\n\ttimestamp: number;\n\tduration: number;\n\tscoredResults: IScoredResults;\n\n\t/** The number of requests made, since requests are split by number of filters */\n\trequestCount?: number;\n\n\t/** The name of the server that actually served the request */\n\tcontext: string;\n}\n\nexport interface IPreferencesEditorModel<T> {\n\turi?: URI;\n\tgetPreference(key: string): T | undefined;\n\tdispose(): void;\n}\n\nexport type IGroupFilter = (group: ISettingsGroup) => boolean | null;\nexport type ISettingMatcher = (setting: ISetting, group: ISettingsGroup) => { matches: IRange[], score: number } | null;\n\nexport interface ISettingsEditorModel extends IPreferencesEditorModel<ISetting> {\n\treadonly onDidChangeGroups: Event<void>;\n\tsettingsGroups: ISettingsGroup[];\n\tfilterSettings(filter: string, groupFilter: IGroupFilter, settingMatcher: ISettingMatcher): ISettingMatch[];\n\tfindValueMatches(filter: string, setting: ISetting): IRange[];\n\tupdateResultGroup(id: string, resultGroup: ISearchResultGroup | undefined): IFilterResult | undefined;\n}\n\nexport interface ISettingsEditorOptions extends IEditorOptions {\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n}\n\n/**\n * TODO Why do we need this class?\n */\nexport class SettingsEditorOptions extends EditorOptions implements ISettingsEditorOptions {\n\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n\n\tstatic create(settings: ISettingsEditorOptions): SettingsEditorOptions {\n\t\tconst options = new SettingsEditorOptions();\n\n\t\toptions.target = settings.target;\n\t\toptions.folderUri = settings.folderUri;\n\t\toptions.query = settings.query;\n\n\t\t// IEditorOptions\n\t\toptions.preserveFocus = settings.preserveFocus;\n\t\toptions.forceReload = settings.forceReload;\n\t\toptions.revealIfVisible = settings.revealIfVisible;\n\t\toptions.revealIfOpened = settings.revealIfOpened;\n\t\toptions.pinned = settings.pinned;\n\t\toptions.index = settings.index;\n\t\toptions.inactive = settings.inactive;\n\n\t\treturn options;\n\t}\n}\n\nexport interface IKeybindingsEditorModel<T> extends IPreferencesEditorModel<T> {\n}\n\nexport const IPreferencesService = createDecorator<IPreferencesService>('preferencesService');\n\nexport interface IPreferencesService {\n\t_serviceBrand: any;\n\n\tuserSettingsResource: URI;\n\tworkspaceSettingsResource: URI | null;\n\tgetFolderSettingsResource(resource: URI): URI | null;\n\n\tresolveModel(uri: URI): Promise<ITextModel | null>;\n\tcreatePreferencesEditorModel<T>(uri: URI): Promise<IPreferencesEditorModel<T>>;\n\tcreateSettings2EditorModel(): Settings2EditorModel; // TODO\n\n\topenRawDefaultSettings(): Promise<IEditor | null>;\n\topenSettings(jsonEditor?: boolean): Promise<IEditor | null>;\n\topenGlobalSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null>;\n\topenRemoteSettings(): Promise<IEditor | null>;\n\topenWorkspaceSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null>;\n\topenFolderSettings(folder: URI, jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditor | null>;\n\tswitchSettings(target: ConfigurationTarget, resource: URI, jsonEditor?: boolean): Promise<void>;\n\topenGlobalKeybindingSettings(textual: boolean): Promise<void>;\n\topenDefaultKeybindingsFile(): Promise<IEditor | null>;\n\n\tconfigureSettingsForLanguage(language: string | null): void;\n}\n\nexport function getSettingsTargetName(target: ConfigurationTarget, resource: URI, workspaceContextService: IWorkspaceContextService): string {\n\tswitch (target) {\n\t\tcase ConfigurationTarget.USER:\n\t\t\treturn localize('userSettingsTarget', \"User Settings\");\n\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\treturn localize('workspaceSettingsTarget', \"Workspace Settings\");\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\tconst folder = workspaceContextService.getWorkspaceFolder(resource);\n\t\t\treturn folder ? folder.name : '';\n\t}\n\treturn '';\n}\n\nexport const FOLDER_SETTINGS_PATH = '.vscode/settings.json';\nexport const DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';\nexport const USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';\n"]}]}