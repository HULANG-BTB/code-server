{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/async\", \"vs/base/common/json\", \"vs/base/common/jsonEdit\", \"vs/base/common/lifecycle\", \"vs/base/common/types\", \"vs/base/common/uri\", \"vs/editor/common/core/editOperation\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\", \"vs/editor/common/services/resolverService\", \"vs/platform/configuration/common/configuration\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/environment/common/environment\", \"vs/platform/files/common/files\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, nls_1, async_1, json, jsonEdit_1, lifecycle_1, types_1, uri_1, editOperation_1, range_1, selection_1, resolverService_1, configuration_1, contextkey_1, environment_1, files_1, instantiation_1, textfiles_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IKeybindingEditingService = instantiation_1.createDecorator('keybindingEditingService');\n    let KeybindingsEditingService = class KeybindingsEditingService extends lifecycle_1.Disposable {\n        constructor(textModelResolverService, textFileService, fileService, configurationService, environmentService) {\n            super();\n            this.textModelResolverService = textModelResolverService;\n            this.textFileService = textFileService;\n            this.fileService = fileService;\n            this.configurationService = configurationService;\n            this.environmentService = environmentService;\n            this.resource = uri_1.URI.file(this.environmentService.appKeybindingsPath);\n            this.queue = new async_1.Queue();\n        }\n        editKeybinding(keybindingItem, key, when) {\n            return this.queue.queue(() => this.doEditKeybinding(keybindingItem, key, when)); // queue up writes to prevent race conditions\n        }\n        resetKeybinding(keybindingItem) {\n            return this.queue.queue(() => this.doResetKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n        }\n        removeKeybinding(keybindingItem) {\n            return this.queue.queue(() => this.doRemoveKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n        }\n        doEditKeybinding(keybindingItem, key, when) {\n            return this.resolveAndValidate()\n                .then(reference => {\n                const model = reference.object.textEditorModel;\n                const userKeybindingEntries = json.parse(model.getValue());\n                const userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n                this.updateKeybinding(keybindingItem, key, when, model, userKeybindingEntryIndex);\n                if (keybindingItem.isDefault && keybindingItem.resolvedKeybinding) {\n                    this.removeDefaultKeybinding(keybindingItem, model);\n                }\n                return this.save().then(() => reference.dispose());\n            });\n        }\n        doRemoveKeybinding(keybindingItem) {\n            return this.resolveAndValidate()\n                .then(reference => {\n                const model = reference.object.textEditorModel;\n                if (keybindingItem.isDefault) {\n                    this.removeDefaultKeybinding(keybindingItem, model);\n                }\n                else {\n                    this.removeUserKeybinding(keybindingItem, model);\n                }\n                return this.save().then(() => reference.dispose());\n            });\n        }\n        doResetKeybinding(keybindingItem) {\n            return this.resolveAndValidate()\n                .then(reference => {\n                const model = reference.object.textEditorModel;\n                if (!keybindingItem.isDefault) {\n                    this.removeUserKeybinding(keybindingItem, model);\n                    this.removeUnassignedDefaultKeybinding(keybindingItem, model);\n                }\n                return this.save().then(() => reference.dispose());\n            });\n        }\n        save() {\n            return this.textFileService.save(this.resource);\n        }\n        updateKeybinding(keybindingItem, newKey, when, model, userKeybindingEntryIndex) {\n            const { tabSize, insertSpaces } = model.getOptions();\n            const eol = model.getEOL();\n            if (userKeybindingEntryIndex !== -1) {\n                // Update the keybinding with new key\n                this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex, 'key'], newKey, { tabSize, insertSpaces, eol })[0], model);\n                const edits = jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex, 'when'], when, { tabSize, insertSpaces, eol });\n                if (edits.length > 0) {\n                    this.applyEditsToBuffer(edits[0], model);\n                }\n            }\n            else {\n                // Add the new keybinding with new key\n                this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [-1], this.asObject(newKey, keybindingItem.command, when, false), { tabSize, insertSpaces, eol })[0], model);\n            }\n        }\n        removeUserKeybinding(keybindingItem, model) {\n            const { tabSize, insertSpaces } = model.getOptions();\n            const eol = model.getEOL();\n            const userKeybindingEntries = json.parse(model.getValue());\n            const userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n            if (userKeybindingEntryIndex !== -1) {\n                this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex], undefined, { tabSize, insertSpaces, eol })[0], model);\n            }\n        }\n        removeDefaultKeybinding(keybindingItem, model) {\n            const { tabSize, insertSpaces } = model.getOptions();\n            const eol = model.getEOL();\n            const key = keybindingItem.resolvedKeybinding ? keybindingItem.resolvedKeybinding.getUserSettingsLabel() : null;\n            if (key) {\n                this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [-1], this.asObject(key, keybindingItem.command, keybindingItem.when ? keybindingItem.when.serialize() : undefined, true), { tabSize, insertSpaces, eol })[0], model);\n            }\n        }\n        removeUnassignedDefaultKeybinding(keybindingItem, model) {\n            const { tabSize, insertSpaces } = model.getOptions();\n            const eol = model.getEOL();\n            const userKeybindingEntries = json.parse(model.getValue());\n            const indices = this.findUnassignedDefaultKeybindingEntryIndex(keybindingItem, userKeybindingEntries).reverse();\n            for (const index of indices) {\n                this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [index], undefined, { tabSize, insertSpaces, eol })[0], model);\n            }\n        }\n        findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries) {\n            for (let index = 0; index < userKeybindingEntries.length; index++) {\n                const keybinding = userKeybindingEntries[index];\n                if (keybinding.command === keybindingItem.command) {\n                    if (!keybinding.when && !keybindingItem.when) {\n                        return index;\n                    }\n                    if (keybinding.when && keybindingItem.when) {\n                        const contextKeyExpr = contextkey_1.ContextKeyExpr.deserialize(keybinding.when);\n                        if (contextKeyExpr && contextKeyExpr.serialize() === keybindingItem.when.serialize()) {\n                            return index;\n                        }\n                    }\n                }\n            }\n            return -1;\n        }\n        findUnassignedDefaultKeybindingEntryIndex(keybindingItem, userKeybindingEntries) {\n            const indices = [];\n            for (let index = 0; index < userKeybindingEntries.length; index++) {\n                if (userKeybindingEntries[index].command === `-${keybindingItem.command}`) {\n                    indices.push(index);\n                }\n            }\n            return indices;\n        }\n        asObject(key, command, when, negate) {\n            const object = { key };\n            if (command) {\n                object['command'] = negate ? `-${command}` : command;\n            }\n            if (when) {\n                object['when'] = when;\n            }\n            return object;\n        }\n        applyEditsToBuffer(edit, model) {\n            const startPosition = model.getPositionAt(edit.offset);\n            const endPosition = model.getPositionAt(edit.offset + edit.length);\n            const range = new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n            let currentText = model.getValueInRange(range);\n            const editOperation = currentText ? editOperation_1.EditOperation.replace(range, edit.content) : editOperation_1.EditOperation.insert(startPosition, edit.content);\n            model.pushEditOperations([new selection_1.Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n        }\n        resolveModelReference() {\n            return this.fileService.existsFile(this.resource)\n                .then(exists => {\n                const EOL = this.configurationService.getValue('files', { overrideIdentifier: 'json' })['eol'];\n                const result = exists ? Promise.resolve(null) : this.fileService.updateContent(this.resource, this.getEmptyContent(EOL), { encoding: 'utf8' });\n                return result.then(() => this.textModelResolverService.createModelReference(this.resource));\n            });\n        }\n        resolveAndValidate() {\n            // Target cannot be dirty if not writing into buffer\n            if (this.textFileService.isDirty(this.resource)) {\n                return Promise.reject(new Error(nls_1.localize('errorKeybindingsFileDirty', \"Unable to write because the keybindings configuration file is dirty. Please save it first and then try again.\")));\n            }\n            return this.resolveModelReference()\n                .then(reference => {\n                const model = reference.object.textEditorModel;\n                const EOL = model.getEOL();\n                if (model.getValue()) {\n                    const parsed = this.parse(model);\n                    if (parsed.parseErrors.length) {\n                        return Promise.reject(new Error(nls_1.localize('parseErrors', \"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.\")));\n                    }\n                    if (parsed.result) {\n                        if (!types_1.isArray(parsed.result)) {\n                            return Promise.reject(new Error(nls_1.localize('errorInvalidConfiguration', \"Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.\")));\n                        }\n                    }\n                    else {\n                        const content = EOL + '[]';\n                        this.applyEditsToBuffer({ content, length: content.length, offset: model.getValue().length }, model);\n                    }\n                }\n                else {\n                    const content = this.getEmptyContent(EOL);\n                    this.applyEditsToBuffer({ content, length: content.length, offset: 0 }, model);\n                }\n                return reference;\n            });\n        }\n        parse(model) {\n            const parseErrors = [];\n            const result = json.parse(model.getValue(), parseErrors);\n            return { result, parseErrors };\n        }\n        getEmptyContent(EOL) {\n            return '// ' + nls_1.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + EOL + '[]';\n        }\n    };\n    KeybindingsEditingService = __decorate([\n        __param(0, resolverService_1.ITextModelService),\n        __param(1, textfiles_1.ITextFileService),\n        __param(2, files_1.IFileService),\n        __param(3, configuration_1.IConfigurationService),\n        __param(4, environment_1.IEnvironmentService)\n    ], KeybindingsEditingService);\n    exports.KeybindingsEditingService = KeybindingsEditingService;\n    extensions_1.registerSingleton(exports.IKeybindingEditingService, KeybindingsEditingService, true);\n});\n",null]}