{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar JSONContributionRegistry = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar schemaRegistry = platform_2.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\nvar PreferencesContribution = /** @class */ (function () {\n    function PreferencesContribution(modelService, textModelResolverService, preferencesService, modeService, editorService, environmentService, workspaceService, configurationService) {\n        var _this = this;\n        this.modelService = modelService;\n        this.textModelResolverService = textModelResolverService;\n        this.preferencesService = preferencesService;\n        this.modeService = modeService;\n        this.editorService = editorService;\n        this.environmentService = environmentService;\n        this.workspaceService = workspaceService;\n        this.configurationService = configurationService;\n        this.settingsListener = this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(preferences_1.USE_SPLIT_JSON_SETTING)) {\n                _this.handleSettingsEditorOverride();\n            }\n        });\n        this.handleSettingsEditorOverride();\n        this.start();\n    }\n    PreferencesContribution.prototype.handleSettingsEditorOverride = function () {\n        var _this = this;\n        // dispose any old listener we had\n        this.editorOpeningListener = lifecycle_1.dispose(this.editorOpeningListener);\n        // install editor opening listener unless user has disabled this\n        if (!!this.configurationService.getValue(preferences_1.USE_SPLIT_JSON_SETTING)) {\n            this.editorOpeningListener = this.editorService.overrideOpenEditor(function (editor, options, group) { return _this.onEditorOpening(editor, options, group); });\n        }\n    };\n    PreferencesContribution.prototype.onEditorOpening = function (editor, options, group) {\n        var resource = editor.getResource();\n        if (!resource ||\n            !strings_1.endsWith(resource.path, 'settings.json') || // resource must end in settings.json\n            !this.configurationService.getValue(preferences_1.USE_SPLIT_JSON_SETTING) // user has not disabled default settings editor\n        ) {\n            return undefined;\n        }\n        // If the resource was already opened before in the group, do not prevent\n        // the opening of that resource. Otherwise we would have the same settings\n        // opened twice (https://github.com/Microsoft/vscode/issues/36447)\n        if (group.isOpened(editor)) {\n            return undefined;\n        }\n        // Global User Settings File\n        if (resources_1.isEqual(resource, uri_1.URI.file(this.environmentService.appSettingsPath), !platform_1.isLinux)) {\n            return { override: this.preferencesService.openGlobalSettings(true, options, group) };\n        }\n        // Single Folder Workspace Settings File\n        var state = this.workspaceService.getWorkbenchState();\n        if (state === workspace_1.WorkbenchState.FOLDER) {\n            var folders = this.workspaceService.getWorkspace().folders;\n            if (resources_1.isEqual(resource, folders[0].toResource(preferences_1.FOLDER_SETTINGS_PATH))) {\n                return { override: this.preferencesService.openWorkspaceSettings(true, options, group) };\n            }\n        }\n        // Multi Folder Workspace Settings File\n        else if (state === workspace_1.WorkbenchState.WORKSPACE) {\n            var folders = this.workspaceService.getWorkspace().folders;\n            for (var _i = 0, folders_1 = folders; _i < folders_1.length; _i++) {\n                var folder = folders_1[_i];\n                if (resources_1.isEqual(resource, folder.toResource(preferences_1.FOLDER_SETTINGS_PATH))) {\n                    return { override: this.preferencesService.openFolderSettings(folder.uri, true, options, group) };\n                }\n            }\n        }\n        return undefined;\n    };\n    PreferencesContribution.prototype.start = function () {\n        var _this = this;\n        this.textModelResolverService.registerTextModelContentProvider('vscode', {\n            provideTextContent: function (uri) {\n                if (uri.scheme !== 'vscode') {\n                    return null;\n                }\n                if (uri.authority === 'schemas') {\n                    var schemaModel = _this.getSchemaModel(uri);\n                    if (schemaModel) {\n                        return Promise.resolve(schemaModel);\n                    }\n                }\n                return _this.preferencesService.resolveModel(uri);\n            }\n        });\n    };\n    PreferencesContribution.prototype.getSchemaModel = function (uri) {\n        var schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n        if (schema) {\n            var modelContent = JSON.stringify(schema);\n            var languageSelection = this.modeService.create('jsonc');\n            var model_1 = this.modelService.createModel(modelContent, languageSelection, uri);\n            var disposables_1 = [];\n            disposables_1.push(schemaRegistry.onDidChangeSchema(function (schemaUri) {\n                if (schemaUri === uri.toString()) {\n                    schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n                    model_1.setValue(JSON.stringify(schema));\n                }\n            }));\n            disposables_1.push(model_1.onWillDispose(function () { return lifecycle_1.dispose(disposables_1); }));\n            return model_1;\n        }\n        return null;\n    };\n    PreferencesContribution.prototype.dispose = function () {\n        this.editorOpeningListener = lifecycle_1.dispose(this.editorOpeningListener);\n        this.settingsListener = lifecycle_1.dispose(this.settingsListener);\n    };\n    PreferencesContribution = tslib_1.__decorate([\n        tslib_1.__param(0, modelService_1.IModelService),\n        tslib_1.__param(1, resolverService_1.ITextModelService),\n        tslib_1.__param(2, preferences_1.IPreferencesService),\n        tslib_1.__param(3, modeService_1.IModeService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, environment_1.IEnvironmentService),\n        tslib_1.__param(6, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], PreferencesContribution);\n    return PreferencesContribution;\n}());\nexports.PreferencesContribution = PreferencesContribution;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { isLinux } from 'vs/base/common/platform';\nimport { isEqual } from 'vs/base/common/resources';\nimport { endsWith } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IEditorInput } from 'vs/workbench/common/editor';\nimport { IEditorService, IOpenEditorOverride } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { FOLDER_SETTINGS_PATH, IPreferencesService, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';\n\nconst schemaRegistry = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\n\nexport class PreferencesContribution implements IWorkbenchContribution {\n\tprivate editorOpeningListener: IDisposable;\n\tprivate settingsListener: IDisposable;\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.settingsListener = this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(USE_SPLIT_JSON_SETTING)) {\n\t\t\t\tthis.handleSettingsEditorOverride();\n\t\t\t}\n\t\t});\n\t\tthis.handleSettingsEditorOverride();\n\n\t\tthis.start();\n\t}\n\n\tprivate handleSettingsEditorOverride(): void {\n\n\t\t// dispose any old listener we had\n\t\tthis.editorOpeningListener = dispose(this.editorOpeningListener);\n\n\t\t// install editor opening listener unless user has disabled this\n\t\tif (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING)) {\n\t\t\tthis.editorOpeningListener = this.editorService.overrideOpenEditor((editor, options, group) => this.onEditorOpening(editor, options, group));\n\t\t}\n\t}\n\n\tprivate onEditorOpening(editor: IEditorInput, options: IEditorOptions | ITextEditorOptions | undefined, group: IEditorGroup): IOpenEditorOverride | undefined {\n\t\tconst resource = editor.getResource();\n\t\tif (\n\t\t\t!resource ||\n\t\t\t!endsWith(resource.path, 'settings.json') ||\t\t\t\t\t\t\t\t// resource must end in settings.json\n\t\t\t!this.configurationService.getValue(USE_SPLIT_JSON_SETTING)\t\t\t\t\t// user has not disabled default settings editor\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// If the resource was already opened before in the group, do not prevent\n\t\t// the opening of that resource. Otherwise we would have the same settings\n\t\t// opened twice (https://github.com/Microsoft/vscode/issues/36447)\n\t\tif (group.isOpened(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Global User Settings File\n\t\tif (isEqual(resource, URI.file(this.environmentService.appSettingsPath), !isLinux)) {\n\t\t\treturn { override: this.preferencesService.openGlobalSettings(true, options, group) };\n\t\t}\n\n\t\t// Single Folder Workspace Settings File\n\t\tconst state = this.workspaceService.getWorkbenchState();\n\t\tif (state === WorkbenchState.FOLDER) {\n\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\tif (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\treturn { override: this.preferencesService.openWorkspaceSettings(true, options, group) };\n\t\t\t}\n\t\t}\n\n\t\t// Multi Folder Workspace Settings File\n\t\telse if (state === WorkbenchState.WORKSPACE) {\n\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\tfor (const folder of folders) {\n\t\t\t\tif (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\t\treturn { override: this.preferencesService.openFolderSettings(folder.uri, true, options, group) };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate start(): void {\n\n\t\tthis.textModelResolverService.registerTextModelContentProvider('vscode', {\n\t\t\tprovideTextContent: (uri: URI): Promise<ITextModel | null> | null => {\n\t\t\t\tif (uri.scheme !== 'vscode') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (uri.authority === 'schemas') {\n\t\t\t\t\tconst schemaModel = this.getSchemaModel(uri);\n\t\t\t\t\tif (schemaModel) {\n\t\t\t\t\t\treturn Promise.resolve(schemaModel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.preferencesService.resolveModel(uri);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSchemaModel(uri: URI): ITextModel | null {\n\t\tlet schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n\t\tif (schema) {\n\t\t\tconst modelContent = JSON.stringify(schema);\n\t\t\tconst languageSelection = this.modeService.create('jsonc');\n\t\t\tconst model = this.modelService.createModel(modelContent, languageSelection, uri);\n\t\t\tconst disposables: IDisposable[] = [];\n\t\t\tdisposables.push(schemaRegistry.onDidChangeSchema(schemaUri => {\n\t\t\t\tif (schemaUri === uri.toString()) {\n\t\t\t\t\tschema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n\t\t\t\t\tmodel.setValue(JSON.stringify(schema));\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.push(model.onWillDispose(() => dispose(disposables)));\n\n\t\t\treturn model;\n\t\t}\n\t\treturn null;\n\t}\n\n\tdispose(): void {\n\t\tthis.editorOpeningListener = dispose(this.editorOpeningListener);\n\t\tthis.settingsListener = dispose(this.settingsListener);\n\t}\n}\n"]}]}