{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfigurationImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfigurationImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar TextResourceConfigurationService = /** @class */ (function (_super) {\n    tslib_1.__extends(TextResourceConfigurationService, _super);\n    function TextResourceConfigurationService(configurationService, modelService, modeService) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.modelService = modelService;\n        _this.modeService = modeService;\n        _this._onDidChangeConfiguration = _this._register(new event_1.Emitter());\n        _this.onDidChangeConfiguration = _this._onDidChangeConfiguration.event;\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) { return _this._onDidChangeConfiguration.fire(e); }));\n        return _this;\n    }\n    TextResourceConfigurationService.prototype.getValue = function (resource, arg2, arg3) {\n        if (typeof arg3 === 'string') {\n            return this._getValue(resource, position_1.Position.isIPosition(arg2) ? arg2 : null, arg3);\n        }\n        return this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);\n    };\n    TextResourceConfigurationService.prototype._getValue = function (resource, position, section) {\n        var language = resource ? this.getLanguage(resource, position) : undefined;\n        if (typeof section === 'undefined') {\n            return this.configurationService.getValue({ resource: resource, overrideIdentifier: language });\n        }\n        return this.configurationService.getValue(section, { resource: resource, overrideIdentifier: language });\n    };\n    TextResourceConfigurationService.prototype.getLanguage = function (resource, position) {\n        var model = this.modelService.getModel(resource);\n        if (model) {\n            return position ? this.modeService.getLanguageIdentifier(model.getLanguageIdAtPosition(position.lineNumber, position.column)).language : model.getLanguageIdentifier().language;\n        }\n        return this.modeService.getModeIdByFilepathOrFirstLine(resource.path);\n    };\n    TextResourceConfigurationService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, modeService_1.IModeService)\n    ], TextResourceConfigurationService);\n    return TextResourceConfigurationService;\n}(lifecycle_1.Disposable));\nexports.TextResourceConfigurationService = TextResourceConfigurationService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfigurationImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/resourceConfigurationImpl.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAAsD;AACtD,sDAAsD;AAEtD,2DAAqE;AACrE,qEAAqE;AACrE,uEAAuE;AAEvE,gFAAkH;AAElH;IAAsD,4DAAU;IAO/D,0CACyC,oBAA2C,EACnD,YAA2B,EAC5B,WAAyB;QAHzD,YAKC,iBAAO,SAEP;QANwC,0BAAoB,GAApB,oBAAoB,CAAuB;QACnD,kBAAY,GAAZ,YAAY,CAAe;QAC5B,iBAAW,GAAX,WAAW,CAAc;QANxC,+BAAyB,GAAuC,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAA6B,CAAC,CAAC;QAC1H,8BAAwB,GAAqC,KAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;QAQjH,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAtC,CAAsC,CAAC,CAAC,CAAC;;IACjH,CAAC;IAID,mDAAQ,GAAR,UAAY,QAAa,EAAE,IAAU,EAAE,IAAU;QAChD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,mBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAChF;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACpF,CAAC;IAEO,oDAAS,GAAjB,UAAqB,QAAa,EAAE,QAA0B,EAAE,OAA2B;QAC1F,IAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7E,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YACnC,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAI,EAAE,QAAQ,UAAA,EAAE,kBAAkB,EAAE,QAAQ,EAAE,CAAC,CAAC;SACzF;QACD,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAI,OAAO,EAAE,EAAE,QAAQ,UAAA,EAAE,kBAAkB,EAAE,QAAQ,EAAE,CAAC,CAAC;IACnG,CAAC;IAEO,sDAAW,GAAnB,UAAoB,QAAa,EAAE,QAA0B;QAC5D,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,KAAK,EAAE;YACV,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,QAAQ,CAAC;SACjL;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEvE,CAAC;IAxCW,gCAAgC;QAQ1C,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,4BAAa,CAAA;QACb,mBAAA,0BAAY,CAAA;OAVF,gCAAgC,CAyC5C;IAAD,uCAAC;CAAA,AAzCD,CAAsD,sBAAU,GAyC/D;AAzCY,4EAAgC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport class TextResourceConfigurationService extends Disposable implements ITextResourceConfigurationService {\n\n\tpublic _serviceBrand: any;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> = this._register(new Emitter<IConfigurationChangeEvent>());\n\tpublic readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> = this._onDidChangeConfiguration.event;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this._onDidChangeConfiguration.fire(e)));\n\t}\n\n\tgetValue<T>(resource: URI, section?: string): T;\n\tgetValue<T>(resource: URI, at?: IPosition, section?: string): T;\n\tgetValue<T>(resource: URI, arg2?: any, arg3?: any): T {\n\t\tif (typeof arg3 === 'string') {\n\t\t\treturn this._getValue(resource, Position.isIPosition(arg2) ? arg2 : null, arg3);\n\t\t}\n\t\treturn this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);\n\t}\n\n\tprivate _getValue<T>(resource: URI, position: IPosition | null, section: string | undefined): T {\n\t\tconst language = resource ? this.getLanguage(resource, position) : undefined;\n\t\tif (typeof section === 'undefined') {\n\t\t\treturn this.configurationService.getValue<T>({ resource, overrideIdentifier: language });\n\t\t}\n\t\treturn this.configurationService.getValue<T>(section, { resource, overrideIdentifier: language });\n\t}\n\n\tprivate getLanguage(resource: URI, position: IPosition | null): string | null {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (model) {\n\t\t\treturn position ? this.modeService.getLanguageIdentifier(model.getLanguageIdAtPosition(position.lineNumber, position.column))!.language : model.getLanguageIdentifier().language;\n\t\t}\n\t\treturn this.modeService.getModeIdByFilepathOrFirstLine(resource.path);\n\n\t}\n}"]}]}