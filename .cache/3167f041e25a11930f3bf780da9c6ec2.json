{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar iconLabel_1 = require(\"vs/base/browser/ui/iconLabel/iconLabel\");\nvar comparers_1 = require(\"vs/base/common/comparers\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar highlightedLabel_1 = require(\"vs/base/browser/ui/highlightedlabel/highlightedLabel\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar keybindingLabel_1 = require(\"vs/base/browser/ui/keybindingLabel/keybindingLabel\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar IDS = 0;\nvar QuickOpenItemAccessorClass = /** @class */ (function () {\n    function QuickOpenItemAccessorClass() {\n    }\n    QuickOpenItemAccessorClass.prototype.getItemLabel = function (entry) {\n        return entry.getLabel();\n    };\n    QuickOpenItemAccessorClass.prototype.getItemDescription = function (entry) {\n        return entry.getDescription();\n    };\n    QuickOpenItemAccessorClass.prototype.getItemPath = function (entry) {\n        var resource = entry.getResource();\n        return resource ? resource.fsPath : undefined;\n    };\n    return QuickOpenItemAccessorClass;\n}());\nexports.QuickOpenItemAccessorClass = QuickOpenItemAccessorClass;\nexports.QuickOpenItemAccessor = new QuickOpenItemAccessorClass();\nvar QuickOpenEntry = /** @class */ (function () {\n    function QuickOpenEntry(highlights) {\n        if (highlights === void 0) { highlights = []; }\n        this.id = (IDS++).toString();\n        this.labelHighlights = highlights;\n        this.descriptionHighlights = [];\n    }\n    /**\n     * A unique identifier for the entry\n     */\n    QuickOpenEntry.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * The label of the entry to identify it from others in the list\n     */\n    QuickOpenEntry.prototype.getLabel = function () {\n        return null;\n    };\n    /**\n     * The options for the label to use for this entry\n     */\n    QuickOpenEntry.prototype.getLabelOptions = function () {\n        return null;\n    };\n    /**\n     * The label of the entry to use when a screen reader wants to read about the entry\n     */\n    QuickOpenEntry.prototype.getAriaLabel = function () {\n        return arrays_1.coalesce([this.getLabel(), this.getDescription(), this.getDetail()])\n            .join(', ');\n    };\n    /**\n     * Detail information about the entry that is optional and can be shown below the label\n     */\n    QuickOpenEntry.prototype.getDetail = function () {\n        return null;\n    };\n    /**\n     * The icon of the entry to identify it from others in the list\n     */\n    QuickOpenEntry.prototype.getIcon = function () {\n        return null;\n    };\n    /**\n     * A secondary description that is optional and can be shown right to the label\n     */\n    QuickOpenEntry.prototype.getDescription = function () {\n        return null;\n    };\n    /**\n     * A tooltip to show when hovering over the entry.\n     */\n    QuickOpenEntry.prototype.getTooltip = function () {\n        return null;\n    };\n    /**\n     * A tooltip to show when hovering over the description portion of the entry.\n     */\n    QuickOpenEntry.prototype.getDescriptionTooltip = function () {\n        return null;\n    };\n    /**\n     * An optional keybinding to show for an entry.\n     */\n    QuickOpenEntry.prototype.getKeybinding = function () {\n        return null;\n    };\n    /**\n     * A resource for this entry. Resource URIs can be used to compare different kinds of entries and group\n     * them together.\n     */\n    QuickOpenEntry.prototype.getResource = function () {\n        return null;\n    };\n    /**\n     * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.\n     */\n    QuickOpenEntry.prototype.isHidden = function () {\n        return this.hidden;\n    };\n    /**\n     * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.\n     */\n    QuickOpenEntry.prototype.setHidden = function (hidden) {\n        this.hidden = hidden;\n    };\n    /**\n     * Allows to set highlight ranges that should show up for the entry label and optionally description if set.\n     */\n    QuickOpenEntry.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {\n        this.labelHighlights = labelHighlights;\n        this.descriptionHighlights = descriptionHighlights;\n        this.detailHighlights = detailHighlights;\n    };\n    /**\n     * Allows to return highlight ranges that should show up for the entry label and description.\n     */\n    QuickOpenEntry.prototype.getHighlights = function () {\n        return [this.labelHighlights, this.descriptionHighlights, this.detailHighlights];\n    };\n    /**\n     * Called when the entry is selected for opening. Returns a boolean value indicating if an action was performed or not.\n     * The mode parameter gives an indication if the element is previewed (using arrow keys) or opened.\n     *\n     * The context parameter provides additional context information how the run was triggered.\n     */\n    QuickOpenEntry.prototype.run = function (mode, context) {\n        return false;\n    };\n    /**\n     * Determines if this quick open entry should merge with the editor history in quick open. If set to true\n     * and the resource of this entry is the same as the resource for an editor history, it will not show up\n     * because it is considered to be a duplicate of an editor history.\n     */\n    QuickOpenEntry.prototype.mergeWithEditorHistory = function () {\n        return false;\n    };\n    return QuickOpenEntry;\n}());\nexports.QuickOpenEntry = QuickOpenEntry;\nvar QuickOpenEntryGroup = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenEntryGroup, _super);\n    function QuickOpenEntryGroup(entry, groupLabel, withBorder) {\n        var _this = _super.call(this) || this;\n        _this.entry = entry;\n        _this.groupLabel = groupLabel;\n        _this.withBorder = withBorder;\n        return _this;\n    }\n    /**\n     * The label of the group or null if none.\n     */\n    QuickOpenEntryGroup.prototype.getGroupLabel = function () {\n        return this.groupLabel;\n    };\n    QuickOpenEntryGroup.prototype.setGroupLabel = function (groupLabel) {\n        this.groupLabel = groupLabel;\n    };\n    /**\n     * Whether to show a border on top of the group entry or not.\n     */\n    QuickOpenEntryGroup.prototype.showBorder = function () {\n        return !!this.withBorder;\n    };\n    QuickOpenEntryGroup.prototype.setShowBorder = function (showBorder) {\n        this.withBorder = showBorder;\n    };\n    QuickOpenEntryGroup.prototype.getLabel = function () {\n        return this.entry ? this.entry.getLabel() : _super.prototype.getLabel.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getLabelOptions = function () {\n        return this.entry ? this.entry.getLabelOptions() : _super.prototype.getLabelOptions.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getAriaLabel = function () {\n        return this.entry ? this.entry.getAriaLabel() : _super.prototype.getAriaLabel.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getDetail = function () {\n        return this.entry ? this.entry.getDetail() : _super.prototype.getDetail.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getResource = function () {\n        return this.entry ? this.entry.getResource() : _super.prototype.getResource.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getIcon = function () {\n        return this.entry ? this.entry.getIcon() : _super.prototype.getIcon.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getDescription = function () {\n        return this.entry ? this.entry.getDescription() : _super.prototype.getDescription.call(this);\n    };\n    QuickOpenEntryGroup.prototype.getEntry = function () {\n        return this.entry;\n    };\n    QuickOpenEntryGroup.prototype.getHighlights = function () {\n        return this.entry ? this.entry.getHighlights() : _super.prototype.getHighlights.call(this);\n    };\n    QuickOpenEntryGroup.prototype.isHidden = function () {\n        return this.entry ? this.entry.isHidden() : _super.prototype.isHidden.call(this);\n    };\n    QuickOpenEntryGroup.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {\n        this.entry ? this.entry.setHighlights(labelHighlights, descriptionHighlights, detailHighlights) : _super.prototype.setHighlights.call(this, labelHighlights, descriptionHighlights, detailHighlights);\n    };\n    QuickOpenEntryGroup.prototype.setHidden = function (hidden) {\n        this.entry ? this.entry.setHidden(hidden) : _super.prototype.setHidden.call(this, hidden);\n    };\n    QuickOpenEntryGroup.prototype.run = function (mode, context) {\n        return this.entry ? this.entry.run(mode, context) : _super.prototype.run.call(this, mode, context);\n    };\n    return QuickOpenEntryGroup;\n}(QuickOpenEntry));\nexports.QuickOpenEntryGroup = QuickOpenEntryGroup;\nvar NoActionProvider = /** @class */ (function () {\n    function NoActionProvider() {\n    }\n    NoActionProvider.prototype.hasActions = function (tree, element) {\n        return false;\n    };\n    NoActionProvider.prototype.getActions = function (tree, element) {\n        return null;\n    };\n    return NoActionProvider;\n}());\nvar templateEntry = 'quickOpenEntry';\nvar templateEntryGroup = 'quickOpenEntryGroup';\nvar Renderer = /** @class */ (function () {\n    function Renderer(actionProvider, actionRunner) {\n        if (actionProvider === void 0) { actionProvider = new NoActionProvider(); }\n        this.actionProvider = actionProvider;\n        this.actionRunner = actionRunner;\n    }\n    Renderer.prototype.getHeight = function (entry) {\n        if (entry.getDetail()) {\n            return 44;\n        }\n        return 22;\n    };\n    Renderer.prototype.getTemplateId = function (entry) {\n        if (entry instanceof QuickOpenEntryGroup) {\n            return templateEntryGroup;\n        }\n        return templateEntry;\n    };\n    Renderer.prototype.renderTemplate = function (templateId, container, styles) {\n        var entryContainer = document.createElement('div');\n        DOM.addClass(entryContainer, 'sub-content');\n        container.appendChild(entryContainer);\n        // Entry\n        var row1 = DOM.$('.quick-open-row');\n        var row2 = DOM.$('.quick-open-row');\n        var entry = DOM.$('.quick-open-entry', undefined, row1, row2);\n        entryContainer.appendChild(entry);\n        // Icon\n        var icon = document.createElement('span');\n        row1.appendChild(icon);\n        // Label\n        var label = new iconLabel_1.IconLabel(row1, { supportHighlights: true, supportDescriptionHighlights: true });\n        // Keybinding\n        var keybindingContainer = document.createElement('span');\n        row1.appendChild(keybindingContainer);\n        DOM.addClass(keybindingContainer, 'quick-open-entry-keybinding');\n        var keybinding = new keybindingLabel_1.KeybindingLabel(keybindingContainer, platform_1.OS);\n        // Detail\n        var detailContainer = document.createElement('div');\n        row2.appendChild(detailContainer);\n        DOM.addClass(detailContainer, 'quick-open-entry-meta');\n        var detail = new highlightedLabel_1.HighlightedLabel(detailContainer, true);\n        // Entry Group\n        var group;\n        if (templateId === templateEntryGroup) {\n            group = document.createElement('div');\n            DOM.addClass(group, 'results-group');\n            container.appendChild(group);\n        }\n        // Actions\n        DOM.addClass(container, 'actions');\n        var actionBarContainer = document.createElement('div');\n        DOM.addClass(actionBarContainer, 'primary-action-bar');\n        container.appendChild(actionBarContainer);\n        var actionBar = new actionbar_1.ActionBar(actionBarContainer, {\n            actionRunner: this.actionRunner\n        });\n        return {\n            container: container,\n            entry: entry,\n            icon: icon,\n            label: label,\n            detail: detail,\n            keybinding: keybinding,\n            group: group,\n            actionBar: actionBar\n        };\n    };\n    Renderer.prototype.renderElement = function (entry, templateId, data, styles) {\n        // Action Bar\n        if (this.actionProvider.hasActions(null, entry)) {\n            DOM.addClass(data.container, 'has-actions');\n        }\n        else {\n            DOM.removeClass(data.container, 'has-actions');\n        }\n        data.actionBar.context = entry; // make sure the context is the current element\n        var actions = this.actionProvider.getActions(null, entry);\n        if (data.actionBar.isEmpty() && actions && actions.length > 0) {\n            data.actionBar.push(actions, { icon: true, label: false });\n        }\n        else if (!data.actionBar.isEmpty() && (!actions || actions.length === 0)) {\n            data.actionBar.clear();\n        }\n        // Entry group class\n        if (entry instanceof QuickOpenEntryGroup && entry.getGroupLabel()) {\n            DOM.addClass(data.container, 'has-group-label');\n        }\n        else {\n            DOM.removeClass(data.container, 'has-group-label');\n        }\n        // Entry group\n        if (entry instanceof QuickOpenEntryGroup) {\n            var group = entry;\n            var groupData = data;\n            // Border\n            if (group.showBorder()) {\n                DOM.addClass(groupData.container, 'results-group-separator');\n                if (styles.pickerGroupBorder) {\n                    groupData.container.style.borderTopColor = styles.pickerGroupBorder.toString();\n                }\n            }\n            else {\n                DOM.removeClass(groupData.container, 'results-group-separator');\n                groupData.container.style.borderTopColor = null;\n            }\n            // Group Label\n            var groupLabel = group.getGroupLabel() || '';\n            if (groupData.group) {\n                groupData.group.textContent = groupLabel;\n                if (styles.pickerGroupForeground) {\n                    groupData.group.style.color = styles.pickerGroupForeground.toString();\n                }\n            }\n        }\n        // Normal Entry\n        if (entry instanceof QuickOpenEntry) {\n            var _a = entry.getHighlights(), labelHighlights = _a[0], descriptionHighlights = _a[1], detailHighlights = _a[2];\n            // Icon\n            var iconClass = entry.getIcon() ? ('quick-open-entry-icon ' + entry.getIcon()) : '';\n            data.icon.className = iconClass;\n            // Label\n            var options = entry.getLabelOptions() || Object.create(null);\n            options.matches = labelHighlights || [];\n            options.title = types.withNullAsUndefined(entry.getTooltip());\n            options.descriptionTitle = entry.getDescriptionTooltip() || types.withNullAsUndefined(entry.getDescription()); // tooltip over description because it could overflow\n            options.descriptionMatches = descriptionHighlights || [];\n            data.label.setLabel(types.withNullAsUndefined(entry.getLabel()), types.withNullAsUndefined(entry.getDescription()), options);\n            // Meta\n            data.detail.set(types.withNullAsUndefined(entry.getDetail()), detailHighlights);\n            // Keybinding\n            data.keybinding.set(entry.getKeybinding());\n        }\n    };\n    Renderer.prototype.disposeTemplate = function (templateId, templateData) {\n        var data = templateData;\n        data.actionBar.dispose();\n        data.actionBar = null;\n        data.container = null;\n        data.entry = null;\n        data.keybinding = null;\n        data.detail = null;\n        data.group = null;\n        data.icon = null;\n        data.label.dispose();\n        data.label = null;\n    };\n    return Renderer;\n}());\nvar QuickOpenModel = /** @class */ (function () {\n    function QuickOpenModel(entries, actionProvider) {\n        if (entries === void 0) { entries = []; }\n        if (actionProvider === void 0) { actionProvider = new NoActionProvider(); }\n        this._entries = entries;\n        this._dataSource = this;\n        this._renderer = new Renderer(actionProvider);\n        this._filter = this;\n        this._runner = this;\n        this._accessibilityProvider = this;\n    }\n    Object.defineProperty(QuickOpenModel.prototype, \"entries\", {\n        get: function () { return this._entries; },\n        set: function (entries) {\n            this._entries = entries;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuickOpenModel.prototype, \"dataSource\", {\n        get: function () { return this._dataSource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuickOpenModel.prototype, \"renderer\", {\n        get: function () { return this._renderer; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuickOpenModel.prototype, \"filter\", {\n        get: function () { return this._filter; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuickOpenModel.prototype, \"runner\", {\n        get: function () { return this._runner; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuickOpenModel.prototype, \"accessibilityProvider\", {\n        get: function () { return this._accessibilityProvider; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds entries that should show up in the quick open viewer.\n     */\n    QuickOpenModel.prototype.addEntries = function (entries) {\n        if (types.isArray(entries)) {\n            this._entries = this._entries.concat(entries);\n        }\n    };\n    /**\n     * Set the entries that should show up in the quick open viewer.\n     */\n    QuickOpenModel.prototype.setEntries = function (entries) {\n        if (types.isArray(entries)) {\n            this._entries = entries;\n        }\n    };\n    /**\n     * Get the entries that should show up in the quick open viewer.\n     *\n     * @visibleOnly optional parameter to only return visible entries\n     */\n    QuickOpenModel.prototype.getEntries = function (visibleOnly) {\n        if (visibleOnly) {\n            return this._entries.filter(function (e) { return !e.isHidden(); });\n        }\n        return this._entries;\n    };\n    QuickOpenModel.prototype.getId = function (entry) {\n        return entry.getId();\n    };\n    QuickOpenModel.prototype.getLabel = function (entry) {\n        return entry.getLabel();\n    };\n    QuickOpenModel.prototype.getAriaLabel = function (entry) {\n        var ariaLabel = entry.getAriaLabel();\n        if (ariaLabel) {\n            return nls.localize('quickOpenAriaLabelEntry', \"{0}, picker\", entry.getAriaLabel());\n        }\n        return nls.localize('quickOpenAriaLabel', \"picker\");\n    };\n    QuickOpenModel.prototype.isVisible = function (entry) {\n        return !entry.isHidden();\n    };\n    QuickOpenModel.prototype.run = function (entry, mode, context) {\n        return entry.run(mode, context);\n    };\n    return QuickOpenModel;\n}());\nexports.QuickOpenModel = QuickOpenModel;\n/**\n * A good default sort implementation for quick open entries respecting highlight information\n * as well as associated resources.\n */\nfunction compareEntries(elementA, elementB, lookFor) {\n    // Give matches with label highlights higher priority over\n    // those with only description highlights\n    var labelHighlightsA = elementA.getHighlights()[0] || [];\n    var labelHighlightsB = elementB.getHighlights()[0] || [];\n    if (labelHighlightsA.length && !labelHighlightsB.length) {\n        return -1;\n    }\n    if (!labelHighlightsA.length && labelHighlightsB.length) {\n        return 1;\n    }\n    // Fallback to the full path if labels are identical and we have associated resources\n    var nameA = elementA.getLabel();\n    var nameB = elementB.getLabel();\n    if (nameA === nameB) {\n        var resourceA = elementA.getResource();\n        var resourceB = elementB.getResource();\n        if (resourceA && resourceB) {\n            nameA = resourceA.fsPath;\n            nameB = resourceB.fsPath;\n        }\n    }\n    return comparers_1.compareAnything(nameA, nameB, lookFor);\n}\nexports.compareEntries = compareEntries;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/quickopen/browser/quickOpenModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { ITree, IActionProvider } from 'vs/base/parts/tree/browser/tree';\nimport { IconLabel, IIconLabelValueOptions } from 'vs/base/browser/ui/iconLabel/iconLabel';\nimport { IQuickNavigateConfiguration, IModel, IDataSource, IFilter, IAccessiblityProvider, IRenderer, IRunner, Mode, IEntryRunContext } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { IAction, IActionRunner } from 'vs/base/common/actions';\nimport { compareAnything } from 'vs/base/common/comparers';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { HighlightedLabel } from 'vs/base/browser/ui/highlightedlabel/highlightedLabel';\nimport * as DOM from 'vs/base/browser/dom';\nimport { IQuickOpenStyles } from 'vs/base/parts/quickopen/browser/quickOpenWidget';\nimport { KeybindingLabel } from 'vs/base/browser/ui/keybindingLabel/keybindingLabel';\nimport { OS } from 'vs/base/common/platform';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { IItemAccessor } from 'vs/base/parts/quickopen/common/quickOpenScorer';\nimport { coalesce } from 'vs/base/common/arrays';\n\nexport interface IContext {\n\tevent: any;\n\tquickNavigateConfiguration: IQuickNavigateConfiguration;\n}\n\nexport interface IHighlight {\n\tstart: number;\n\tend: number;\n}\n\nlet IDS = 0;\n\nexport class QuickOpenItemAccessorClass implements IItemAccessor<QuickOpenEntry> {\n\n\tgetItemLabel(entry: QuickOpenEntry): string | null {\n\t\treturn entry.getLabel();\n\t}\n\n\tgetItemDescription(entry: QuickOpenEntry): string | null {\n\t\treturn entry.getDescription();\n\t}\n\n\tgetItemPath(entry: QuickOpenEntry): string | undefined {\n\t\tconst resource = entry.getResource();\n\n\t\treturn resource ? resource.fsPath : undefined;\n\t}\n}\n\nexport const QuickOpenItemAccessor = new QuickOpenItemAccessorClass();\n\nexport class QuickOpenEntry {\n\tprivate id: string;\n\tprivate labelHighlights: IHighlight[];\n\tprivate descriptionHighlights?: IHighlight[];\n\tprivate detailHighlights?: IHighlight[];\n\tprivate hidden: boolean;\n\n\tconstructor(highlights: IHighlight[] = []) {\n\t\tthis.id = (IDS++).toString();\n\t\tthis.labelHighlights = highlights;\n\t\tthis.descriptionHighlights = [];\n\t}\n\n\t/**\n\t * A unique identifier for the entry\n\t */\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * The label of the entry to identify it from others in the list\n\t */\n\tgetLabel(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * The options for the label to use for this entry\n\t */\n\tgetLabelOptions(): IIconLabelValueOptions | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * The label of the entry to use when a screen reader wants to read about the entry\n\t */\n\tgetAriaLabel(): string {\n\t\treturn coalesce([this.getLabel(), this.getDescription(), this.getDetail()])\n\t\t\t.join(', ');\n\t}\n\n\t/**\n\t * Detail information about the entry that is optional and can be shown below the label\n\t */\n\tgetDetail(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * The icon of the entry to identify it from others in the list\n\t */\n\tgetIcon(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * A secondary description that is optional and can be shown right to the label\n\t */\n\tgetDescription(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * A tooltip to show when hovering over the entry.\n\t */\n\tgetTooltip(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * A tooltip to show when hovering over the description portion of the entry.\n\t */\n\tgetDescriptionTooltip(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * An optional keybinding to show for an entry.\n\t */\n\tgetKeybinding(): ResolvedKeybinding | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * A resource for this entry. Resource URIs can be used to compare different kinds of entries and group\n\t * them together.\n\t */\n\tgetResource(): URI | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.\n\t */\n\tisHidden(): boolean {\n\t\treturn this.hidden;\n\t}\n\n\t/**\n\t * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.\n\t */\n\tsetHidden(hidden: boolean): void {\n\t\tthis.hidden = hidden;\n\t}\n\n\t/**\n\t * Allows to set highlight ranges that should show up for the entry label and optionally description if set.\n\t */\n\tsetHighlights(labelHighlights: IHighlight[], descriptionHighlights?: IHighlight[], detailHighlights?: IHighlight[]): void {\n\t\tthis.labelHighlights = labelHighlights;\n\t\tthis.descriptionHighlights = descriptionHighlights;\n\t\tthis.detailHighlights = detailHighlights;\n\t}\n\n\t/**\n\t * Allows to return highlight ranges that should show up for the entry label and description.\n\t */\n\tgetHighlights(): [IHighlight[] /* Label */, IHighlight[] | undefined /* Description */, IHighlight[] | undefined /* Detail */] {\n\t\treturn [this.labelHighlights, this.descriptionHighlights, this.detailHighlights];\n\t}\n\n\t/**\n\t * Called when the entry is selected for opening. Returns a boolean value indicating if an action was performed or not.\n\t * The mode parameter gives an indication if the element is previewed (using arrow keys) or opened.\n\t *\n\t * The context parameter provides additional context information how the run was triggered.\n\t */\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determines if this quick open entry should merge with the editor history in quick open. If set to true\n\t * and the resource of this entry is the same as the resource for an editor history, it will not show up\n\t * because it is considered to be a duplicate of an editor history.\n\t */\n\tmergeWithEditorHistory(): boolean {\n\t\treturn false;\n\t}\n}\n\nexport class QuickOpenEntryGroup extends QuickOpenEntry {\n\tprivate entry?: QuickOpenEntry;\n\tprivate groupLabel?: string;\n\tprivate withBorder?: boolean;\n\n\tconstructor(entry?: QuickOpenEntry, groupLabel?: string, withBorder?: boolean) {\n\t\tsuper();\n\n\t\tthis.entry = entry;\n\t\tthis.groupLabel = groupLabel;\n\t\tthis.withBorder = withBorder;\n\t}\n\n\t/**\n\t * The label of the group or null if none.\n\t */\n\tgetGroupLabel(): string | undefined {\n\t\treturn this.groupLabel;\n\t}\n\n\tsetGroupLabel(groupLabel: string | undefined): void {\n\t\tthis.groupLabel = groupLabel;\n\t}\n\n\t/**\n\t * Whether to show a border on top of the group entry or not.\n\t */\n\tshowBorder(): boolean {\n\t\treturn !!this.withBorder;\n\t}\n\n\tsetShowBorder(showBorder: boolean): void {\n\t\tthis.withBorder = showBorder;\n\t}\n\n\tgetLabel(): string | null {\n\t\treturn this.entry ? this.entry.getLabel() : super.getLabel();\n\t}\n\n\tgetLabelOptions(): IIconLabelValueOptions | null {\n\t\treturn this.entry ? this.entry.getLabelOptions() : super.getLabelOptions();\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn this.entry ? this.entry.getAriaLabel() : super.getAriaLabel();\n\t}\n\n\tgetDetail(): string | null {\n\t\treturn this.entry ? this.entry.getDetail() : super.getDetail();\n\t}\n\n\tgetResource(): URI | null {\n\t\treturn this.entry ? this.entry.getResource() : super.getResource();\n\t}\n\n\tgetIcon(): string | null {\n\t\treturn this.entry ? this.entry.getIcon() : super.getIcon();\n\t}\n\n\tgetDescription(): string | null {\n\t\treturn this.entry ? this.entry.getDescription() : super.getDescription();\n\t}\n\n\tgetEntry(): QuickOpenEntry | undefined {\n\t\treturn this.entry;\n\t}\n\n\tgetHighlights(): [IHighlight[], IHighlight[] | undefined, IHighlight[] | undefined] {\n\t\treturn this.entry ? this.entry.getHighlights() : super.getHighlights();\n\t}\n\n\tisHidden(): boolean {\n\t\treturn this.entry ? this.entry.isHidden() : super.isHidden();\n\t}\n\n\tsetHighlights(labelHighlights: IHighlight[], descriptionHighlights?: IHighlight[], detailHighlights?: IHighlight[]): void {\n\t\tthis.entry ? this.entry.setHighlights(labelHighlights, descriptionHighlights, detailHighlights) : super.setHighlights(labelHighlights, descriptionHighlights, detailHighlights);\n\t}\n\n\tsetHidden(hidden: boolean): void {\n\t\tthis.entry ? this.entry.setHidden(hidden) : super.setHidden(hidden);\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\treturn this.entry ? this.entry.run(mode, context) : super.run(mode, context);\n\t}\n}\n\nclass NoActionProvider implements IActionProvider {\n\n\thasActions(tree: ITree, element: any): boolean {\n\t\treturn false;\n\t}\n\n\tgetActions(tree: ITree, element: any): IAction[] | null {\n\t\treturn null;\n\t}\n}\n\nexport interface IQuickOpenEntryTemplateData {\n\tcontainer: HTMLElement;\n\tentry: HTMLElement;\n\ticon: HTMLSpanElement;\n\tlabel: IconLabel;\n\tdetail: HighlightedLabel;\n\tkeybinding: KeybindingLabel;\n\tactionBar: ActionBar;\n}\n\nexport interface IQuickOpenEntryGroupTemplateData extends IQuickOpenEntryTemplateData {\n\tgroup?: HTMLDivElement;\n}\n\nconst templateEntry = 'quickOpenEntry';\nconst templateEntryGroup = 'quickOpenEntryGroup';\n\nclass Renderer implements IRenderer<QuickOpenEntry> {\n\n\tprivate actionProvider: IActionProvider;\n\tprivate actionRunner?: IActionRunner;\n\n\tconstructor(actionProvider: IActionProvider = new NoActionProvider(), actionRunner?: IActionRunner) {\n\t\tthis.actionProvider = actionProvider;\n\t\tthis.actionRunner = actionRunner;\n\t}\n\n\tgetHeight(entry: QuickOpenEntry): number {\n\t\tif (entry.getDetail()) {\n\t\t\treturn 44;\n\t\t}\n\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(entry: QuickOpenEntry): string {\n\t\tif (entry instanceof QuickOpenEntryGroup) {\n\t\t\treturn templateEntryGroup;\n\t\t}\n\n\t\treturn templateEntry;\n\t}\n\n\trenderTemplate(templateId: string, container: HTMLElement, styles: IQuickOpenStyles): IQuickOpenEntryGroupTemplateData {\n\t\tconst entryContainer = document.createElement('div');\n\t\tDOM.addClass(entryContainer, 'sub-content');\n\t\tcontainer.appendChild(entryContainer);\n\n\t\t// Entry\n\t\tconst row1 = DOM.$('.quick-open-row');\n\t\tconst row2 = DOM.$('.quick-open-row');\n\t\tconst entry = DOM.$('.quick-open-entry', undefined, row1, row2);\n\t\tentryContainer.appendChild(entry);\n\n\t\t// Icon\n\t\tconst icon = document.createElement('span');\n\t\trow1.appendChild(icon);\n\n\t\t// Label\n\t\tconst label = new IconLabel(row1, { supportHighlights: true, supportDescriptionHighlights: true });\n\n\t\t// Keybinding\n\t\tconst keybindingContainer = document.createElement('span');\n\t\trow1.appendChild(keybindingContainer);\n\t\tDOM.addClass(keybindingContainer, 'quick-open-entry-keybinding');\n\t\tconst keybinding = new KeybindingLabel(keybindingContainer, OS);\n\n\t\t// Detail\n\t\tconst detailContainer = document.createElement('div');\n\t\trow2.appendChild(detailContainer);\n\t\tDOM.addClass(detailContainer, 'quick-open-entry-meta');\n\t\tconst detail = new HighlightedLabel(detailContainer, true);\n\n\t\t// Entry Group\n\t\tlet group: HTMLDivElement | undefined;\n\t\tif (templateId === templateEntryGroup) {\n\t\t\tgroup = document.createElement('div');\n\t\t\tDOM.addClass(group, 'results-group');\n\t\t\tcontainer.appendChild(group);\n\t\t}\n\n\t\t// Actions\n\t\tDOM.addClass(container, 'actions');\n\n\t\tconst actionBarContainer = document.createElement('div');\n\t\tDOM.addClass(actionBarContainer, 'primary-action-bar');\n\t\tcontainer.appendChild(actionBarContainer);\n\n\t\tconst actionBar = new ActionBar(actionBarContainer, {\n\t\t\tactionRunner: this.actionRunner\n\t\t});\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tentry,\n\t\t\ticon,\n\t\t\tlabel,\n\t\t\tdetail,\n\t\t\tkeybinding,\n\t\t\tgroup,\n\t\t\tactionBar\n\t\t};\n\t}\n\n\trenderElement(entry: QuickOpenEntry, templateId: string, data: IQuickOpenEntryGroupTemplateData, styles: IQuickOpenStyles): void {\n\n\t\t// Action Bar\n\t\tif (this.actionProvider.hasActions(null, entry)) {\n\t\t\tDOM.addClass(data.container, 'has-actions');\n\t\t} else {\n\t\t\tDOM.removeClass(data.container, 'has-actions');\n\t\t}\n\n\t\tdata.actionBar.context = entry; // make sure the context is the current element\n\n\t\tconst actions = this.actionProvider.getActions(null, entry);\n\t\tif (data.actionBar.isEmpty() && actions && actions.length > 0) {\n\t\t\tdata.actionBar.push(actions, { icon: true, label: false });\n\t\t} else if (!data.actionBar.isEmpty() && (!actions || actions.length === 0)) {\n\t\t\tdata.actionBar.clear();\n\t\t}\n\n\t\t// Entry group class\n\t\tif (entry instanceof QuickOpenEntryGroup && entry.getGroupLabel()) {\n\t\t\tDOM.addClass(data.container, 'has-group-label');\n\t\t} else {\n\t\t\tDOM.removeClass(data.container, 'has-group-label');\n\t\t}\n\n\t\t// Entry group\n\t\tif (entry instanceof QuickOpenEntryGroup) {\n\t\t\tconst group = <QuickOpenEntryGroup>entry;\n\t\t\tconst groupData = data;\n\n\t\t\t// Border\n\t\t\tif (group.showBorder()) {\n\t\t\t\tDOM.addClass(groupData.container, 'results-group-separator');\n\t\t\t\tif (styles.pickerGroupBorder) {\n\t\t\t\t\tgroupData.container.style.borderTopColor = styles.pickerGroupBorder.toString();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tDOM.removeClass(groupData.container, 'results-group-separator');\n\t\t\t\tgroupData.container.style.borderTopColor = null;\n\t\t\t}\n\n\t\t\t// Group Label\n\t\t\tconst groupLabel = group.getGroupLabel() || '';\n\t\t\tif (groupData.group) {\n\t\t\t\tgroupData.group.textContent = groupLabel;\n\t\t\t\tif (styles.pickerGroupForeground) {\n\t\t\t\t\tgroupData.group.style.color = styles.pickerGroupForeground.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normal Entry\n\t\tif (entry instanceof QuickOpenEntry) {\n\t\t\tconst [labelHighlights, descriptionHighlights, detailHighlights] = entry.getHighlights();\n\n\t\t\t// Icon\n\t\t\tconst iconClass = entry.getIcon() ? ('quick-open-entry-icon ' + entry.getIcon()) : '';\n\t\t\tdata.icon.className = iconClass;\n\n\t\t\t// Label\n\t\t\tconst options: IIconLabelValueOptions = entry.getLabelOptions() || Object.create(null);\n\t\t\toptions.matches = labelHighlights || [];\n\t\t\toptions.title = types.withNullAsUndefined(entry.getTooltip());\n\t\t\toptions.descriptionTitle = entry.getDescriptionTooltip() || types.withNullAsUndefined(entry.getDescription()); // tooltip over description because it could overflow\n\t\t\toptions.descriptionMatches = descriptionHighlights || [];\n\t\t\tdata.label.setLabel(types.withNullAsUndefined(entry.getLabel()), types.withNullAsUndefined(entry.getDescription()), options);\n\n\t\t\t// Meta\n\t\t\tdata.detail.set(types.withNullAsUndefined(entry.getDetail()), detailHighlights);\n\n\t\t\t// Keybinding\n\t\t\tdata.keybinding.set(entry.getKeybinding()!);\n\t\t}\n\t}\n\n\tdisposeTemplate(templateId: string, templateData: IQuickOpenEntryGroupTemplateData): void {\n\t\tconst data = templateData as IQuickOpenEntryGroupTemplateData;\n\t\tdata.actionBar.dispose();\n\t\tdata.actionBar = null!;\n\t\tdata.container = null!;\n\t\tdata.entry = null!;\n\t\tdata.keybinding = null!;\n\t\tdata.detail = null!;\n\t\tdata.group = null!;\n\t\tdata.icon = null!;\n\t\tdata.label.dispose();\n\t\tdata.label = null!;\n\t}\n}\n\nexport class QuickOpenModel implements\n\tIModel<QuickOpenEntry>,\n\tIDataSource<QuickOpenEntry>,\n\tIFilter<QuickOpenEntry>,\n\tIRunner<QuickOpenEntry>,\n\tIAccessiblityProvider<QuickOpenEntry>\n{\n\tprivate _entries: QuickOpenEntry[];\n\tprivate _dataSource: IDataSource<QuickOpenEntry>;\n\tprivate _renderer: IRenderer<QuickOpenEntry>;\n\tprivate _filter: IFilter<QuickOpenEntry>;\n\tprivate _runner: IRunner<QuickOpenEntry>;\n\tprivate _accessibilityProvider: IAccessiblityProvider<QuickOpenEntry>;\n\n\tconstructor(entries: QuickOpenEntry[] = [], actionProvider: IActionProvider = new NoActionProvider()) {\n\t\tthis._entries = entries;\n\t\tthis._dataSource = this;\n\t\tthis._renderer = new Renderer(actionProvider);\n\t\tthis._filter = this;\n\t\tthis._runner = this;\n\t\tthis._accessibilityProvider = this;\n\t}\n\n\tget entries() { return this._entries; }\n\tget dataSource() { return this._dataSource; }\n\tget renderer() { return this._renderer; }\n\tget filter() { return this._filter; }\n\tget runner() { return this._runner; }\n\tget accessibilityProvider() { return this._accessibilityProvider; }\n\n\tset entries(entries: QuickOpenEntry[]) {\n\t\tthis._entries = entries;\n\t}\n\n\t/**\n\t * Adds entries that should show up in the quick open viewer.\n\t */\n\taddEntries(entries: QuickOpenEntry[]): void {\n\t\tif (types.isArray(entries)) {\n\t\t\tthis._entries = this._entries.concat(entries);\n\t\t}\n\t}\n\n\t/**\n\t * Set the entries that should show up in the quick open viewer.\n\t */\n\tsetEntries(entries: QuickOpenEntry[]): void {\n\t\tif (types.isArray(entries)) {\n\t\t\tthis._entries = entries;\n\t\t}\n\t}\n\n\t/**\n\t * Get the entries that should show up in the quick open viewer.\n\t *\n\t * @visibleOnly optional parameter to only return visible entries\n\t */\n\tgetEntries(visibleOnly?: boolean): QuickOpenEntry[] {\n\t\tif (visibleOnly) {\n\t\t\treturn this._entries.filter((e) => !e.isHidden());\n\t\t}\n\n\t\treturn this._entries;\n\t}\n\n\tgetId(entry: QuickOpenEntry): string {\n\t\treturn entry.getId();\n\t}\n\n\tgetLabel(entry: QuickOpenEntry): string | null {\n\t\treturn entry.getLabel();\n\t}\n\n\tgetAriaLabel(entry: QuickOpenEntry): string {\n\t\tconst ariaLabel = entry.getAriaLabel();\n\t\tif (ariaLabel) {\n\t\t\treturn nls.localize('quickOpenAriaLabelEntry', \"{0}, picker\", entry.getAriaLabel());\n\t\t}\n\n\t\treturn nls.localize('quickOpenAriaLabel', \"picker\");\n\t}\n\n\tisVisible(entry: QuickOpenEntry): boolean {\n\t\treturn !entry.isHidden();\n\t}\n\n\trun(entry: QuickOpenEntry, mode: Mode, context: IEntryRunContext): boolean {\n\t\treturn entry.run(mode, context);\n\t}\n}\n\n/**\n * A good default sort implementation for quick open entries respecting highlight information\n * as well as associated resources.\n */\nexport function compareEntries(elementA: QuickOpenEntry, elementB: QuickOpenEntry, lookFor: string): number {\n\n\t// Give matches with label highlights higher priority over\n\t// those with only description highlights\n\tconst labelHighlightsA = elementA.getHighlights()[0] || [];\n\tconst labelHighlightsB = elementB.getHighlights()[0] || [];\n\tif (labelHighlightsA.length && !labelHighlightsB.length) {\n\t\treturn -1;\n\t}\n\n\tif (!labelHighlightsA.length && labelHighlightsB.length) {\n\t\treturn 1;\n\t}\n\n\t// Fallback to the full path if labels are identical and we have associated resources\n\tlet nameA = elementA.getLabel()!;\n\tlet nameB = elementB.getLabel()!;\n\tif (nameA === nameB) {\n\t\tconst resourceA = elementA.getResource();\n\t\tconst resourceB = elementB.getResource();\n\n\t\tif (resourceA && resourceB) {\n\t\t\tnameA = resourceA.fsPath;\n\t\t\tnameB = resourceB.fsPath;\n\t\t}\n\t}\n\n\treturn compareAnything(nameA, nameB, lookFor);\n}\n"]}]}