{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar experimentService_1 = require(\"vs/workbench/contrib/experiments/node/experimentService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar ExperimentalPrompts = /** @class */ (function (_super) {\n    tslib_1.__extends(ExperimentalPrompts, _super);\n    function ExperimentalPrompts(experimentService, viewletService, notificationService, telemetryService) {\n        var _this = _super.call(this) || this;\n        _this.experimentService = experimentService;\n        _this.viewletService = viewletService;\n        _this.notificationService = notificationService;\n        _this.telemetryService = telemetryService;\n        _this._disposables = [];\n        _this.experimentService.onExperimentEnabled(function (e) {\n            if (e.action && e.action.type === experimentService_1.ExperimentActionType.Prompt && e.state === experimentService_1.ExperimentState.Run) {\n                _this.showExperimentalPrompts(e);\n            }\n        }, _this, _this._disposables);\n        return _this;\n    }\n    ExperimentalPrompts.prototype.showExperimentalPrompts = function (experiment) {\n        var _this = this;\n        if (!experiment || !experiment.enabled || !experiment.action || experiment.state !== experimentService_1.ExperimentState.Run) {\n            return;\n        }\n        var logTelemetry = function (commandText) {\n            /* __GDPR__\n                \"experimentalPrompts\" : {\n                    \"experimentId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                    \"commandText\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                    \"cancelled\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            _this.telemetryService.publicLog('experimentalPrompts', {\n                experimentId: experiment.id,\n                commandText: commandText,\n                cancelled: !commandText\n            });\n        };\n        var actionProperties = experiment.action.properties;\n        var promptText = ExperimentalPrompts.getLocalizedText(actionProperties.promptText, platform_1.language || '');\n        if (!actionProperties || !promptText) {\n            return;\n        }\n        if (!actionProperties.commands) {\n            actionProperties.commands = [];\n        }\n        var choices = actionProperties.commands.map(function (command) {\n            var commandText = ExperimentalPrompts.getLocalizedText(command.text, platform_1.language || '');\n            return {\n                label: commandText,\n                run: function () {\n                    logTelemetry(commandText);\n                    if (command.externalLink) {\n                        window.open(command.externalLink);\n                    }\n                    else if (command.curatedExtensionsKey && Array.isArray(command.curatedExtensionsList)) {\n                        _this.viewletService.openViewlet('workbench.view.extensions', true)\n                            .then(function (viewlet) { return viewlet; })\n                            .then(function (viewlet) {\n                            if (viewlet) {\n                                viewlet.search('curated:' + command.curatedExtensionsKey);\n                            }\n                        });\n                    }\n                    _this.experimentService.markAsCompleted(experiment.id);\n                }\n            };\n        });\n        this.notificationService.prompt(notification_1.Severity.Info, promptText, choices, {\n            onCancel: function () {\n                logTelemetry();\n                _this.experimentService.markAsCompleted(experiment.id);\n            }\n        });\n    };\n    ExperimentalPrompts.prototype.dispose = function () {\n        this._disposables = lifecycle_1.dispose(this._disposables);\n    };\n    ExperimentalPrompts.getLocalizedText = function (text, displayLanguage) {\n        if (typeof text === 'string') {\n            return text;\n        }\n        var msgInEnglish = text['en'] || text['en-us'];\n        displayLanguage = displayLanguage.toLowerCase();\n        if (!text[displayLanguage] && displayLanguage.indexOf('-') === 2) {\n            displayLanguage = displayLanguage.substr(0, 2);\n        }\n        return text[displayLanguage] || msgInEnglish;\n    };\n    ExperimentalPrompts = tslib_1.__decorate([\n        tslib_1.__param(0, experimentService_1.IExperimentService),\n        tslib_1.__param(1, viewlet_1.IViewletService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, telemetry_1.ITelemetryService)\n    ], ExperimentalPrompts);\n    return ExperimentalPrompts;\n}(lifecycle_1.Disposable));\nexports.ExperimentalPrompts = ExperimentalPrompts;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { INotificationService, Severity, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { IExperimentService, IExperiment, ExperimentActionType, IExperimentActionPromptProperties, IExperimentActionPromptCommand, ExperimentState } from 'vs/workbench/contrib/experiments/node/experimentService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionsViewlet } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { language } from 'vs/base/common/platform';\n\nexport class ExperimentalPrompts extends Disposable implements IWorkbenchContribution {\n\tprivate _disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\n\t) {\n\t\tsuper();\n\t\tthis.experimentService.onExperimentEnabled(e => {\n\t\t\tif (e.action && e.action.type === ExperimentActionType.Prompt && e.state === ExperimentState.Run) {\n\t\t\t\tthis.showExperimentalPrompts(e);\n\t\t\t}\n\t\t}, this, this._disposables);\n\t}\n\n\tprivate showExperimentalPrompts(experiment: IExperiment): void {\n\t\tif (!experiment || !experiment.enabled || !experiment.action || experiment.state !== ExperimentState.Run) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst logTelemetry = (commandText?: string) => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"experimentalPrompts\" : {\n\t\t\t\t\t\"experimentId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"commandText\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"cancelled\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('experimentalPrompts', {\n\t\t\t\texperimentId: experiment.id,\n\t\t\t\tcommandText,\n\t\t\t\tcancelled: !commandText\n\t\t\t});\n\t\t};\n\n\t\tconst actionProperties = (<IExperimentActionPromptProperties>experiment.action.properties);\n\t\tconst promptText = ExperimentalPrompts.getLocalizedText(actionProperties.promptText, language || '');\n\t\tif (!actionProperties || !promptText) {\n\t\t\treturn;\n\t\t}\n\t\tif (!actionProperties.commands) {\n\t\t\tactionProperties.commands = [];\n\t\t}\n\n\t\tconst choices: IPromptChoice[] = actionProperties.commands.map((command: IExperimentActionPromptCommand) => {\n\t\t\tconst commandText = ExperimentalPrompts.getLocalizedText(command.text, language || '');\n\t\t\treturn {\n\t\t\t\tlabel: commandText,\n\t\t\t\trun: () => {\n\t\t\t\t\tlogTelemetry(commandText);\n\t\t\t\t\tif (command.externalLink) {\n\t\t\t\t\t\twindow.open(command.externalLink);\n\t\t\t\t\t} else if (command.curatedExtensionsKey && Array.isArray(command.curatedExtensionsList)) {\n\t\t\t\t\t\tthis.viewletService.openViewlet('workbench.view.extensions', true)\n\t\t\t\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\t\t\tif (viewlet) {\n\t\t\t\t\t\t\t\t\tviewlet.search('curated:' + command.curatedExtensionsKey);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.experimentService.markAsCompleted(experiment.id);\n\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tthis.notificationService.prompt(Severity.Info, promptText, choices, {\n\t\t\tonCancel: () => {\n\t\t\t\tlogTelemetry();\n\t\t\t\tthis.experimentService.markAsCompleted(experiment.id);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose() {\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n\n\tstatic getLocalizedText(text: string | { [key: string]: string }, displayLanguage: string): string {\n\t\tif (typeof text === 'string') {\n\t\t\treturn text;\n\t\t}\n\t\tconst msgInEnglish = text['en'] || text['en-us'];\n\t\tdisplayLanguage = displayLanguage.toLowerCase();\n\t\tif (!text[displayLanguage] && displayLanguage.indexOf('-') === 2) {\n\t\t\tdisplayLanguage = displayLanguage.substr(0, 2);\n\t\t}\n\t\treturn text[displayLanguage] || msgInEnglish;\n\t}\n}\n"]}]}