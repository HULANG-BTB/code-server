{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/settingsEditor2.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/settingsEditor2.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar async_1 = require(\"vs/base/common/async\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar collections = require(\"vs/base/common/collections\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar iterator_1 = require(\"vs/base/common/iterator\");\nvar types_1 = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nrequire(\"vs/css!./media/settingsEditor2\");\nvar nls_1 = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar baseEditor_1 = require(\"vs/workbench/browser/parts/editor/baseEditor\");\nvar suggestEnabledInput_1 = require(\"vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput\");\nvar preferencesWidgets_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesWidgets\");\nvar settingsLayout_1 = require(\"vs/workbench/contrib/preferences/browser/settingsLayout\");\nvar settingsTree_1 = require(\"vs/workbench/contrib/preferences/browser/settingsTree\");\nvar settingsTreeModels_1 = require(\"vs/workbench/contrib/preferences/browser/settingsTreeModels\");\nvar settingsWidgets_1 = require(\"vs/workbench/contrib/preferences/browser/settingsWidgets\");\nvar tocTree_1 = require(\"vs/workbench/contrib/preferences/browser/tocTree\");\nvar preferences_1 = require(\"vs/workbench/contrib/preferences/common/preferences\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar preferences_2 = require(\"vs/workbench/services/preferences/common/preferences\");\nfunction createGroupIterator(group) {\n    var groupsIt = iterator_1.Iterator.fromArray(group.children);\n    return iterator_1.Iterator.map(groupsIt, function (g) {\n        return {\n            element: g,\n            children: g instanceof settingsTreeModels_1.SettingsTreeGroupElement ?\n                createGroupIterator(g) :\n                undefined\n        };\n    });\n}\nvar $ = DOM.$;\nvar SETTINGS_EDITOR_STATE_KEY = 'settingsEditorState';\nvar SettingsEditor2 = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsEditor2, _super);\n    function SettingsEditor2(telemetryService, configurationService, themeService, preferencesService, instantiationService, preferencesSearchService, logService, contextKeyService, storageService, notificationService, editorGroupService, keybindingService) {\n        var _this = _super.call(this, SettingsEditor2.ID, telemetryService, themeService, storageService) || this;\n        _this.configurationService = configurationService;\n        _this.preferencesService = preferencesService;\n        _this.instantiationService = instantiationService;\n        _this.preferencesSearchService = preferencesSearchService;\n        _this.logService = logService;\n        _this.storageService = storageService;\n        _this.notificationService = notificationService;\n        _this.editorGroupService = editorGroupService;\n        _this.keybindingService = keybindingService;\n        _this.settingsTreeScrollTop = 0;\n        _this.delayedFilterLogging = new async_1.Delayer(1000);\n        _this.localSearchDelayer = new async_1.Delayer(300);\n        _this.remoteSearchThrottle = new async_1.ThrottledDelayer(200);\n        _this.viewState = { settingsTarget: configuration_1.ConfigurationTarget.USER };\n        _this.settingFastUpdateDelayer = new async_1.Delayer(SettingsEditor2.SETTING_UPDATE_FAST_DEBOUNCE);\n        _this.settingSlowUpdateDelayer = new async_1.Delayer(SettingsEditor2.SETTING_UPDATE_SLOW_DEBOUNCE);\n        _this.inSettingsEditorContextKey = preferences_1.CONTEXT_SETTINGS_EDITOR.bindTo(contextKeyService);\n        _this.searchFocusContextKey = preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(contextKeyService);\n        _this.tocRowFocused = preferences_1.CONTEXT_TOC_ROW_FOCUS.bindTo(contextKeyService);\n        _this.scheduledRefreshes = new Map();\n        _this.editorMemento = _this.getEditorMemento(editorGroupService, SETTINGS_EDITOR_STATE_KEY);\n        _this._register(configurationService.onDidChangeConfiguration(function (e) {\n            if (e.source !== configuration_1.ConfigurationTarget.DEFAULT) {\n                _this.onConfigUpdate(e.affectedKeys);\n            }\n        }));\n        return _this;\n    }\n    SettingsEditor2.shouldSettingUpdateFast = function (type) {\n        if (types_1.isArray(type)) {\n            // nullable integer/number or complex\n            return false;\n        }\n        return type === preferences_2.SettingValueType.Enum ||\n            type === preferences_2.SettingValueType.Complex ||\n            type === preferences_2.SettingValueType.Boolean ||\n            type === preferences_2.SettingValueType.Exclude;\n    };\n    Object.defineProperty(SettingsEditor2.prototype, \"minimumWidth\", {\n        get: function () { return 375; },\n        // these setters need to exist because this extends from BaseEditor\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditor2.prototype, \"maximumWidth\", {\n        get: function () { return Number.POSITIVE_INFINITY; },\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditor2.prototype, \"currentSettingsModel\", {\n        get: function () {\n            return this.searchResultModel || this.settingsTreeModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditor2.prototype, \"searchResultModel\", {\n        get: function () {\n            return this._searchResultModel;\n        },\n        set: function (value) {\n            this._searchResultModel = value;\n            DOM.toggleClass(this.rootElement, 'search-mode', !!this._searchResultModel);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsEditor2.prototype, \"currentSettingsContextMenuKeyBindingLabel\", {\n        get: function () {\n            var keybinding = this.keybindingService.lookupKeybinding(preferences_1.SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU);\n            return (keybinding && keybinding.getAriaLabel()) || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SettingsEditor2.prototype.createEditor = function (parent) {\n        parent.setAttribute('tabindex', '-1');\n        this.rootElement = DOM.append(parent, $('.settings-editor'));\n        this.createHeader(this.rootElement);\n        this.createBody(this.rootElement);\n        this.updateStyles();\n    };\n    SettingsEditor2.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        this.inSettingsEditorContextKey.set(true);\n        return _super.prototype.setInput.call(this, input, options, token)\n            .then(function () { return new Promise(process.nextTick); }) // Force setInput to be async\n            .then(function () {\n            if (!options) {\n                if (!_this.viewState.settingsTarget) {\n                    // Persist?\n                    options = preferences_2.SettingsEditorOptions.create({ target: configuration_1.ConfigurationTarget.USER });\n                }\n            }\n            else if (!options.target) {\n                options.target = configuration_1.ConfigurationTarget.USER;\n            }\n            _this._setOptions(options);\n            _this._register(input.onDispose(function () {\n                _this.searchWidget.setValue('');\n            }));\n            return _this.render(token);\n        })\n            .then(function () {\n            // Init TOC selection\n            _this.updateTreeScrollSync();\n            _this.restoreCachedState();\n        });\n    };\n    SettingsEditor2.prototype.restoreCachedState = function () {\n        var cachedState = this.group && this.input && this.editorMemento.loadEditorState(this.group, this.input);\n        if (cachedState && typeof cachedState.target === 'object') {\n            cachedState.target = uri_1.URI.revive(cachedState.target);\n        }\n        if (cachedState) {\n            var settingsTarget = cachedState.target;\n            this.settingsTargetsWidget.settingsTarget = settingsTarget;\n            this.onDidSettingsTargetChange(settingsTarget);\n            this.searchWidget.setValue(cachedState.searchQuery);\n        }\n    };\n    SettingsEditor2.prototype.setOptions = function (options) {\n        _super.prototype.setOptions.call(this, options);\n        this._setOptions(options);\n    };\n    SettingsEditor2.prototype._setOptions = function (options) {\n        if (!options) {\n            return;\n        }\n        if (options.query) {\n            this.searchWidget.setValue(options.query);\n        }\n        var target = options.folderUri || options.target;\n        this.settingsTargetsWidget.settingsTarget = target;\n        this.viewState.settingsTarget = target;\n    };\n    SettingsEditor2.prototype.clearInput = function () {\n        this.inSettingsEditorContextKey.set(false);\n        if (this.input) {\n            this.editorMemento.clearEditorState(this.input, this.group);\n        }\n        _super.prototype.clearInput.call(this);\n    };\n    SettingsEditor2.prototype.layout = function (dimension) {\n        this.layoutTrees(dimension);\n        var innerWidth = dimension.width - 24 * 2; // 24px padding on left and right\n        var monacoWidth = (innerWidth > 1000 ? 1000 : innerWidth) - 10;\n        this.searchWidget.layout({ height: 20, width: monacoWidth });\n        DOM.toggleClass(this.rootElement, 'mid-width', dimension.width < 1000 && dimension.width >= 600);\n        DOM.toggleClass(this.rootElement, 'narrow-width', dimension.width < 600);\n    };\n    SettingsEditor2.prototype.focus = function () {\n        if (this.lastFocusedSettingElement) {\n            var elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), this.lastFocusedSettingElement);\n            if (elements.length) {\n                var control = elements[0].querySelector(settingsTree_1.AbstractSettingRenderer.CONTROL_SELECTOR);\n                if (control) {\n                    control.focus();\n                    return;\n                }\n            }\n        }\n        this.focusSearch();\n    };\n    SettingsEditor2.prototype.focusSettings = function () {\n        // Update ARIA global labels\n        var labelElement = this.settingsAriaExtraLabelsContainer.querySelector('#settings_aria_more_actions_shortcut_label');\n        if (labelElement) {\n            var settingsContextMenuShortcut = this.currentSettingsContextMenuKeyBindingLabel;\n            if (settingsContextMenuShortcut) {\n                labelElement.setAttribute('aria-label', nls_1.localize('settingsContextMenuAriaShortcut', \"For more actions, Press {0}.\", settingsContextMenuShortcut));\n            }\n        }\n        var firstFocusable = this.settingsTree.getHTMLElement().querySelector(settingsTree_1.AbstractSettingRenderer.CONTROL_SELECTOR);\n        if (firstFocusable) {\n            firstFocusable.focus();\n        }\n    };\n    SettingsEditor2.prototype.showContextMenu = function () {\n        var activeElement = this.getActiveElementInSettingsTree();\n        if (!activeElement) {\n            return;\n        }\n        var settingDOMElement = this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n        if (!settingDOMElement) {\n            return;\n        }\n        var focusedKey = this.settingRenderers.getKeyForDOMElementInSetting(settingDOMElement);\n        if (!focusedKey) {\n            return;\n        }\n        var elements = this.currentSettingsModel.getElementsByName(focusedKey);\n        if (elements && elements[0]) {\n            this.settingRenderers.showContextMenu(elements[0], settingDOMElement);\n        }\n    };\n    SettingsEditor2.prototype.focusSearch = function (filter, selectAll) {\n        if (selectAll === void 0) { selectAll = true; }\n        if (filter && this.searchWidget) {\n            this.searchWidget.setValue(filter);\n        }\n        this.searchWidget.focus(selectAll);\n    };\n    SettingsEditor2.prototype.clearSearchResults = function () {\n        this.searchWidget.setValue('');\n    };\n    SettingsEditor2.prototype.clearSearchFilters = function () {\n        var query = this.searchWidget.getValue();\n        SettingsEditor2.SUGGESTIONS.forEach(function (suggestion) {\n            query = query.replace(suggestion, '');\n        });\n        this.searchWidget.setValue(query.trim());\n    };\n    SettingsEditor2.prototype.createHeader = function (parent) {\n        var _this = this;\n        this.headerContainer = DOM.append(parent, $('.settings-header'));\n        var searchContainer = DOM.append(this.headerContainer, $('.search-container'));\n        var searchBoxLabel = nls_1.localize('SearchSettings.AriaLabel', \"Search settings\");\n        this.searchWidget = this._register(this.instantiationService.createInstance(suggestEnabledInput_1.SuggestEnabledInput, SettingsEditor2.ID + \".searchbox\", searchContainer, {\n            triggerCharacters: ['@'],\n            provideResults: function (query) {\n                return SettingsEditor2.SUGGESTIONS.filter(function (tag) { return query.indexOf(tag) === -1; }).map(function (tag) { return tag + ' '; });\n            }\n        }, searchBoxLabel, 'settingseditor:searchinput' + SettingsEditor2.NUM_INSTANCES++, {\n            placeholderText: searchBoxLabel,\n            focusContextKey: this.searchFocusContextKey,\n        }));\n        this._register(this.searchWidget.onFocus(function () {\n            _this.lastFocusedSettingElement = '';\n        }));\n        this._register(suggestEnabledInput_1.attachSuggestEnabledInputBoxStyler(this.searchWidget, this.themeService, {\n            inputBorder: settingsWidgets_1.settingsTextInputBorder\n        }));\n        this.countElement = DOM.append(searchContainer, DOM.$('.settings-count-widget'));\n        this._register(styler_1.attachStylerCallback(this.themeService, { badgeBackground: colorRegistry_1.badgeBackground, contrastBorder: colorRegistry_1.contrastBorder, badgeForeground: colorRegistry_1.badgeForeground }, function (colors) {\n            var background = colors.badgeBackground ? colors.badgeBackground.toString() : null;\n            var border = colors.contrastBorder ? colors.contrastBorder.toString() : null;\n            var foreground = colors.badgeForeground ? colors.badgeForeground.toString() : null;\n            _this.countElement.style.backgroundColor = background;\n            _this.countElement.style.color = foreground;\n            _this.countElement.style.borderWidth = border ? '1px' : null;\n            _this.countElement.style.borderStyle = border ? 'solid' : null;\n            _this.countElement.style.borderColor = border;\n        }));\n        this._register(this.searchWidget.onInputDidChange(function () { return _this.onSearchInputChanged(); }));\n        var headerControlsContainer = DOM.append(this.headerContainer, $('.settings-header-controls'));\n        var targetWidgetContainer = DOM.append(headerControlsContainer, $('.settings-target-container'));\n        this.settingsTargetsWidget = this._register(this.instantiationService.createInstance(preferencesWidgets_1.SettingsTargetsWidget, targetWidgetContainer));\n        this.settingsTargetsWidget.settingsTarget = configuration_1.ConfigurationTarget.USER;\n        this.settingsTargetsWidget.onDidTargetChange(function (target) { return _this.onDidSettingsTargetChange(target); });\n    };\n    SettingsEditor2.prototype.onDidSettingsTargetChange = function (target) {\n        this.viewState.settingsTarget = target;\n        // TODO Instead of rebuilding the whole model, refresh and uncache the inspected setting value\n        this.onConfigUpdate(undefined, true);\n    };\n    SettingsEditor2.prototype.onDidClickSetting = function (evt, recursed) {\n        var _this = this;\n        var elements = this.currentSettingsModel.getElementsByName(evt.targetKey);\n        if (elements && elements[0]) {\n            var sourceTop = this.settingsTree.getRelativeTop(evt.source);\n            if (typeof sourceTop !== 'number') {\n                return;\n            }\n            if (sourceTop < 0) {\n                // e.g. clicked a searched element, now the search has been cleared\n                sourceTop = 0.5;\n            }\n            this.settingsTree.reveal(elements[0], sourceTop);\n            var domElements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), evt.targetKey);\n            if (domElements && domElements[0]) {\n                var control = domElements[0].querySelector(settingsTree_1.AbstractSettingRenderer.CONTROL_SELECTOR);\n                if (control) {\n                    control.focus();\n                }\n            }\n        }\n        else if (!recursed) {\n            var p = this.triggerSearch('');\n            p.then(function () {\n                _this.searchWidget.setValue('');\n                _this.onDidClickSetting(evt, true);\n            });\n        }\n    };\n    SettingsEditor2.prototype.switchToSettingsFile = function () {\n        var query = settingsTreeModels_1.parseQuery(this.searchWidget.getValue());\n        return this.openSettingsFile(query.query);\n    };\n    SettingsEditor2.prototype.openSettingsFile = function (query) {\n        var currentSettingsTarget = this.settingsTargetsWidget.settingsTarget;\n        var options = { query: query };\n        if (currentSettingsTarget === configuration_1.ConfigurationTarget.USER) {\n            return this.preferencesService.openGlobalSettings(true, options);\n        }\n        else if (currentSettingsTarget === configuration_1.ConfigurationTarget.WORKSPACE) {\n            return this.preferencesService.openWorkspaceSettings(true, options);\n        }\n        else {\n            return this.preferencesService.openFolderSettings(currentSettingsTarget, true, options);\n        }\n    };\n    SettingsEditor2.prototype.createBody = function (parent) {\n        var _this = this;\n        var bodyContainer = DOM.append(parent, $('.settings-body'));\n        this.noResultsMessage = DOM.append(bodyContainer, $('.no-results-message'));\n        this.noResultsMessage.innerText = nls_1.localize('noResults', \"No Settings Found\");\n        this.clearFilterLinkContainer = $('span.clear-search-filters');\n        this.clearFilterLinkContainer.textContent = ' - ';\n        var clearFilterLink = DOM.append(this.clearFilterLinkContainer, $('a.pointer.prominent', { tabindex: 0 }, nls_1.localize('clearSearchFilters', 'Clear Filters')));\n        this._register(DOM.addDisposableListener(clearFilterLink, DOM.EventType.CLICK, function (e) {\n            DOM.EventHelper.stop(e, false);\n            _this.clearSearchFilters();\n        }));\n        DOM.append(this.noResultsMessage, this.clearFilterLinkContainer);\n        var clearSearchContainer = $('span.clear-search');\n        clearSearchContainer.textContent = ' - ';\n        var clearSearch = DOM.append(clearSearchContainer, $('a.pointer.prominent', { tabindex: 0 }, nls_1.localize('clearSearch', 'Clear Search')));\n        this._register(DOM.addDisposableListener(clearSearch, DOM.EventType.CLICK, function (e) {\n            DOM.EventHelper.stop(e, false);\n            _this.clearSearchResults();\n            _this.focusSearch();\n        }));\n        DOM.append(this.noResultsMessage, clearSearchContainer);\n        this._register(styler_1.attachStylerCallback(this.themeService, { editorForeground: colorRegistry_1.editorForeground }, function (colors) {\n            _this.noResultsMessage.style.color = colors.editorForeground ? colors.editorForeground.toString() : null;\n        }));\n        this.createTOC(bodyContainer);\n        this.createFocusSink(bodyContainer, function (e) {\n            if (DOM.findParentWithClass(e.relatedTarget, 'settings-editor-tree')) {\n                if (_this.settingsTree.scrollTop > 0) {\n                    var firstElement = _this.settingsTree.firstVisibleElement;\n                    _this.settingsTree.reveal(firstElement, 0.1);\n                    return true;\n                }\n            }\n            else {\n                var firstControl = _this.settingsTree.getHTMLElement().querySelector(settingsTree_1.AbstractSettingRenderer.CONTROL_SELECTOR);\n                if (firstControl) {\n                    firstControl.focus();\n                }\n            }\n            return false;\n        }, 'settings list focus helper');\n        this.createSettingsTree(bodyContainer);\n        this.createFocusSink(bodyContainer, function (e) {\n            if (DOM.findParentWithClass(e.relatedTarget, 'settings-editor-tree')) {\n                if (_this.settingsTree.scrollTop < _this.settingsTree.scrollHeight) {\n                    var lastElement = _this.settingsTree.lastVisibleElement;\n                    _this.settingsTree.reveal(lastElement, 0.9);\n                    return true;\n                }\n            }\n            return false;\n        }, 'settings list focus helper');\n    };\n    SettingsEditor2.prototype.createFocusSink = function (container, callback, label) {\n        var listFocusSink = DOM.append(container, $('.settings-tree-focus-sink'));\n        listFocusSink.setAttribute('aria-label', label);\n        listFocusSink.tabIndex = 0;\n        this._register(DOM.addDisposableListener(listFocusSink, 'focus', function (e) {\n            if (e.relatedTarget && callback(e)) {\n                e.relatedTarget.focus();\n            }\n        }));\n        return listFocusSink;\n    };\n    SettingsEditor2.prototype.createTOC = function (parent) {\n        var _this = this;\n        this.tocTreeModel = new tocTree_1.TOCTreeModel(this.viewState);\n        this.tocTreeContainer = DOM.append(parent, $('.settings-toc-container'));\n        this.tocTree = this._register(this.instantiationService.createInstance(tocTree_1.TOCTree, DOM.append(this.tocTreeContainer, $('.settings-toc-wrapper')), this.viewState));\n        this._register(this.tocTree.onDidChangeFocus(function (e) {\n            var element = e.elements[0];\n            if (_this.tocFocusedElement === element) {\n                return;\n            }\n            _this.tocFocusedElement = element;\n            _this.tocTree.setSelection(element ? [element] : []);\n            if (_this.searchResultModel) {\n                if (_this.viewState.filterToCategory !== element) {\n                    _this.viewState.filterToCategory = types_1.withNullAsUndefined(element);\n                    _this.renderTree();\n                    _this.settingsTree.scrollTop = 0;\n                }\n            }\n            else if (element && (!e.browserEvent || !e.browserEvent.fromScroll)) {\n                _this.settingsTree.reveal(element, 0);\n            }\n        }));\n        this._register(this.tocTree.onDidFocus(function () {\n            _this.tocRowFocused.set(true);\n        }));\n        this._register(this.tocTree.onDidBlur(function () {\n            _this.tocRowFocused.set(false);\n        }));\n    };\n    SettingsEditor2.prototype.createSettingsTree = function (parent) {\n        var _this = this;\n        this.settingsTreeContainer = DOM.append(parent, $('.settings-tree-container'));\n        // Add  ARIA extra labels div\n        this.settingsAriaExtraLabelsContainer = DOM.append(this.settingsTreeContainer, $('.settings-aria-extra-labels'));\n        this.settingsAriaExtraLabelsContainer.id = 'settings_aria_extra_labels';\n        // Add global labels here\n        var labelDiv = DOM.append(this.settingsAriaExtraLabelsContainer, $('.settings-aria-extra-label'));\n        labelDiv.id = 'settings_aria_more_actions_shortcut_label';\n        labelDiv.setAttribute('aria-label', '');\n        this.settingRenderers = this.instantiationService.createInstance(settingsTree_1.SettingTreeRenderers);\n        this._register(this.settingRenderers.onDidChangeSetting(function (e) { return _this.onDidChangeSetting(e.key, e.value, e.type); }));\n        this._register(this.settingRenderers.onDidOpenSettings(function (settingKey) {\n            _this.openSettingsFile(settingKey);\n        }));\n        this._register(this.settingRenderers.onDidClickSettingLink(function (settingName) { return _this.onDidClickSetting(settingName); }));\n        this._register(this.settingRenderers.onDidFocusSetting(function (element) {\n            _this.lastFocusedSettingElement = element.setting.key;\n            _this.settingsTree.reveal(element);\n        }));\n        this._register(this.settingRenderers.onDidClickOverrideElement(function (element) {\n            if (configuration_1.ConfigurationTargetToString(configuration_1.ConfigurationTarget.WORKSPACE) === element.scope.toUpperCase()) {\n                _this.settingsTargetsWidget.updateTarget(configuration_1.ConfigurationTarget.WORKSPACE);\n            }\n            else if (configuration_1.ConfigurationTargetToString(configuration_1.ConfigurationTarget.USER) === element.scope.toUpperCase()) {\n                _this.settingsTargetsWidget.updateTarget(configuration_1.ConfigurationTarget.USER);\n            }\n            _this.searchWidget.setValue(element.targetKey);\n        }));\n        this.settingsTree = this._register(this.instantiationService.createInstance(settingsTree_1.SettingsTree, this.settingsTreeContainer, this.viewState, this.settingRenderers.allRenderers));\n        this.settingsTree.getHTMLElement().attributes.removeNamedItem('tabindex');\n        this._register(this.settingsTree.onDidScroll(function () {\n            if (_this.settingsTree.scrollTop === _this.settingsTreeScrollTop) {\n                return;\n            }\n            _this.settingsTreeScrollTop = _this.settingsTree.scrollTop;\n            // setTimeout because calling setChildren on the settingsTree can trigger onDidScroll, so it fires when\n            // setChildren has called on the settings tree but not the toc tree yet, so their rendered elements are out of sync\n            setTimeout(function () {\n                _this.updateTreeScrollSync();\n            }, 0);\n        }));\n    };\n    SettingsEditor2.prototype.notifyNoSaveNeeded = function () {\n        if (!this.storageService.getBoolean('hasNotifiedOfSettingsAutosave', storage_1.StorageScope.GLOBAL, false)) {\n            this.storageService.store('hasNotifiedOfSettingsAutosave', true, storage_1.StorageScope.GLOBAL);\n            this.notificationService.info(nls_1.localize('settingsNoSaveNeeded', \"Your changes are automatically saved as you edit.\"));\n        }\n    };\n    SettingsEditor2.prototype.onDidChangeSetting = function (key, value, type) {\n        var _this = this;\n        this.notifyNoSaveNeeded();\n        if (this.pendingSettingUpdate && this.pendingSettingUpdate.key !== key) {\n            this.updateChangedSetting(key, value);\n        }\n        this.pendingSettingUpdate = { key: key, value: value };\n        if (SettingsEditor2.shouldSettingUpdateFast(type)) {\n            this.settingFastUpdateDelayer.trigger(function () { return _this.updateChangedSetting(key, value); });\n        }\n        else {\n            this.settingSlowUpdateDelayer.trigger(function () { return _this.updateChangedSetting(key, value); });\n        }\n    };\n    SettingsEditor2.prototype.updateTreeScrollSync = function () {\n        var _this = this;\n        this.settingRenderers.cancelSuggesters();\n        if (this.searchResultModel) {\n            return;\n        }\n        if (!this.tocTreeModel) {\n            return;\n        }\n        var elementToSync = this.settingsTree.firstVisibleElement;\n        var element = elementToSync instanceof settingsTreeModels_1.SettingsTreeSettingElement ? elementToSync.parent :\n            elementToSync instanceof settingsTreeModels_1.SettingsTreeGroupElement ? elementToSync :\n                null;\n        // It's possible for this to be called when the TOC and settings tree are out of sync - e.g. when the settings tree has deferred a refresh because\n        // it is focused. So, bail if element doesn't exist in the TOC.\n        var nodeExists = true;\n        try {\n            this.tocTree.getNode(element);\n        }\n        catch (e) {\n            nodeExists = false;\n        }\n        if (!nodeExists) {\n            return;\n        }\n        if (element && this.tocTree.getSelection()[0] !== element) {\n            var ancestors = this.getAncestors(element);\n            ancestors.forEach(function (e) { return _this.tocTree.expand(e); });\n            this.tocTree.reveal(element);\n            var elementTop = this.tocTree.getRelativeTop(element);\n            if (typeof elementTop !== 'number') {\n                return;\n            }\n            this.tocTree.collapseAll();\n            ancestors.forEach(function (e) { return _this.tocTree.expand(e); });\n            if (elementTop < 0 || elementTop > 1) {\n                this.tocTree.reveal(element);\n            }\n            else {\n                this.tocTree.reveal(element, elementTop);\n            }\n            this.tocTree.expand(element);\n            this.tocTree.setSelection([element]);\n            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n            fakeKeyboardEvent.fromScroll = true;\n            this.tocTree.setFocus([element], fakeKeyboardEvent);\n        }\n    };\n    SettingsEditor2.prototype.getAncestors = function (element) {\n        var ancestors = [];\n        while (element.parent) {\n            if (element.parent.id !== 'root') {\n                ancestors.push(element.parent);\n            }\n            element = element.parent;\n        }\n        return ancestors.reverse();\n    };\n    SettingsEditor2.prototype.updateChangedSetting = function (key, value) {\n        var _this = this;\n        // ConfigurationService displays the error if this fails.\n        // Force a render afterwards because onDidConfigurationUpdate doesn't fire if the update doesn't result in an effective setting value change\n        var settingsTarget = this.settingsTargetsWidget.settingsTarget;\n        var resource = uri_1.URI.isUri(settingsTarget) ? settingsTarget : undefined;\n        var configurationTarget = (resource ? configuration_1.ConfigurationTarget.WORKSPACE_FOLDER : settingsTarget);\n        var overrides = { resource: resource };\n        var isManualReset = value === undefined;\n        // If the user is changing the value back to the default, do a 'reset' instead\n        var inspected = this.configurationService.inspect(key, overrides);\n        if (inspected.default === value) {\n            value = undefined;\n        }\n        return this.configurationService.updateValue(key, value, overrides, configurationTarget)\n            .then(function () {\n            _this.renderTree(key, isManualReset);\n            var reportModifiedProps = {\n                key: key,\n                query: _this.searchWidget.getValue(),\n                searchResults: _this.searchResultModel && _this.searchResultModel.getUniqueResults(),\n                rawResults: _this.searchResultModel && _this.searchResultModel.getRawResults(),\n                showConfiguredOnly: !!_this.viewState.tagFilters && _this.viewState.tagFilters.has(preferences_1.MODIFIED_SETTING_TAG),\n                isReset: typeof value === 'undefined',\n                settingsTarget: _this.settingsTargetsWidget.settingsTarget\n            };\n            return _this.reportModifiedSetting(reportModifiedProps);\n        });\n    };\n    SettingsEditor2.prototype.reportModifiedSetting = function (props) {\n        this.pendingSettingUpdate = null;\n        var groupId = undefined;\n        var nlpIndex = undefined;\n        var displayIndex = undefined;\n        if (props.searchResults) {\n            var remoteResult = props.searchResults[settingsTreeModels_1.SearchResultIdx.Remote];\n            var localResult = props.searchResults[settingsTreeModels_1.SearchResultIdx.Local];\n            var localIndex = arrays.firstIndex(localResult.filterMatches, function (m) { return m.setting.key === props.key; });\n            groupId = localIndex >= 0 ?\n                'local' :\n                'remote';\n            displayIndex = localIndex >= 0 ?\n                localIndex :\n                remoteResult && (arrays.firstIndex(remoteResult.filterMatches, function (m) { return m.setting.key === props.key; }) + localResult.filterMatches.length);\n            if (this.searchResultModel) {\n                var rawResults = this.searchResultModel.getRawResults();\n                if (rawResults[settingsTreeModels_1.SearchResultIdx.Remote]) {\n                    var _nlpIndex = arrays.firstIndex(rawResults[settingsTreeModels_1.SearchResultIdx.Remote].filterMatches, function (m) { return m.setting.key === props.key; });\n                    nlpIndex = _nlpIndex >= 0 ? _nlpIndex : undefined;\n                }\n            }\n        }\n        var reportedTarget = props.settingsTarget === configuration_1.ConfigurationTarget.USER ? 'user' :\n            props.settingsTarget === configuration_1.ConfigurationTarget.WORKSPACE ? 'workspace' :\n                'folder';\n        var data = {\n            key: props.key,\n            query: props.query,\n            groupId: groupId,\n            nlpIndex: nlpIndex,\n            displayIndex: displayIndex,\n            showConfiguredOnly: props.showConfiguredOnly,\n            isReset: props.isReset,\n            target: reportedTarget\n        };\n        /* __GDPR__\n            \"settingsEditor.settingModified\" : {\n                \"key\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"query\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n                \"groupId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"nlpIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"displayIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"showConfiguredOnly\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"isReset\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this.telemetryService.publicLog('settingsEditor.settingModified', data);\n    };\n    SettingsEditor2.prototype.render = function (token) {\n        var _this = this;\n        if (this.input) {\n            return this.input.resolve()\n                .then(function (model) {\n                if (token.isCancellationRequested) {\n                    return undefined;\n                }\n                _this._register(model.onDidChangeGroups(function () { return _this.onConfigUpdate(); }));\n                _this.defaultSettingsEditorModel = model;\n                return _this.onConfigUpdate();\n            });\n        }\n        return Promise.resolve(null);\n    };\n    SettingsEditor2.prototype.onSearchModeToggled = function () {\n        DOM.removeClass(this.rootElement, 'no-toc-search');\n        if (this.configurationService.getValue('workbench.settings.settingsSearchTocBehavior') === 'hide') {\n            DOM.toggleClass(this.rootElement, 'no-toc-search', !!this.searchResultModel);\n        }\n    };\n    SettingsEditor2.prototype.scheduleRefresh = function (element, key) {\n        var _this = this;\n        if (key === void 0) { key = ''; }\n        if (key && this.scheduledRefreshes.has(key)) {\n            return;\n        }\n        if (!key) {\n            this.scheduledRefreshes.forEach(function (r) { return r.dispose(); });\n            this.scheduledRefreshes.clear();\n        }\n        var scheduledRefreshTracker = DOM.trackFocus(element);\n        this.scheduledRefreshes.set(key, scheduledRefreshTracker);\n        scheduledRefreshTracker.onDidBlur(function () {\n            scheduledRefreshTracker.dispose();\n            _this.scheduledRefreshes.delete(key);\n            _this.onConfigUpdate([key]);\n        });\n    };\n    SettingsEditor2.prototype.onConfigUpdate = function (keys, forceRefresh) {\n        if (forceRefresh === void 0) { forceRefresh = false; }\n        if (keys && this.settingsTreeModel) {\n            return this.updateElementsByKey(keys);\n        }\n        var groups = this.defaultSettingsEditorModel.settingsGroups.slice(1); // Without commonlyUsed\n        var dividedGroups = collections.groupBy(groups, function (g) { return g.contributedByExtension ? 'extension' : 'core'; });\n        var settingsResult = settingsTree_1.resolveSettingsTree(settingsLayout_1.tocData, dividedGroups.core);\n        var resolvedSettingsRoot = settingsResult.tree;\n        // Warn for settings not included in layout\n        if (settingsResult.leftoverSettings.size && !this.hasWarnedMissingSettings) {\n            var settingKeyList_1 = [];\n            settingsResult.leftoverSettings.forEach(function (s) {\n                settingKeyList_1.push(s.key);\n            });\n            this.logService.warn(\"SettingsEditor2: Settings not included in settingsLayout.ts: \" + settingKeyList_1.join(', '));\n            this.hasWarnedMissingSettings = true;\n        }\n        var commonlyUsed = settingsTree_1.resolveSettingsTree(settingsLayout_1.commonlyUsedData, dividedGroups.core);\n        resolvedSettingsRoot.children.unshift(commonlyUsed.tree);\n        resolvedSettingsRoot.children.push(settingsTree_1.resolveExtensionsSettings(dividedGroups.extension || []));\n        if (this.searchResultModel) {\n            this.searchResultModel.updateChildren();\n        }\n        if (this.settingsTreeModel) {\n            this.settingsTreeModel.update(resolvedSettingsRoot);\n            // Make sure that all extensions' settings are included in search results\n            var cachedState = this.group && this.input && this.editorMemento.loadEditorState(this.group, this.input);\n            if (cachedState && cachedState.searchQuery) {\n                this.triggerSearch(cachedState.searchQuery);\n            }\n            else {\n                this.renderTree(undefined, forceRefresh);\n                this.refreshTOCTree();\n            }\n        }\n        else {\n            this.settingsTreeModel = this.instantiationService.createInstance(settingsTreeModels_1.SettingsTreeModel, this.viewState);\n            this.settingsTreeModel.update(resolvedSettingsRoot);\n            this.tocTreeModel.settingsTreeRoot = this.settingsTreeModel.root;\n            this.refreshTOCTree();\n            this.refreshTree();\n            this.tocTree.collapseAll();\n        }\n    };\n    SettingsEditor2.prototype.updateElementsByKey = function (keys) {\n        var _this = this;\n        if (keys.length) {\n            if (this.searchResultModel) {\n                keys.forEach(function (key) { return _this.searchResultModel.updateElementsByName(key); });\n            }\n            if (this.settingsTreeModel) {\n                keys.forEach(function (key) { return _this.settingsTreeModel.updateElementsByName(key); });\n            }\n            keys.forEach(function (key) { return _this.renderTree(key); });\n        }\n        else {\n            return this.renderTree();\n        }\n    };\n    SettingsEditor2.prototype.getActiveElementInSettingsTree = function () {\n        return (document.activeElement && DOM.isAncestor(document.activeElement, this.settingsTree.getHTMLElement())) ?\n            document.activeElement :\n            null;\n    };\n    SettingsEditor2.prototype.renderTree = function (key, force) {\n        if (force === void 0) { force = false; }\n        if (!force && key && this.scheduledRefreshes.has(key)) {\n            this.updateModifiedLabelForKey(key);\n            return;\n        }\n        // If the context view is focused, delay rendering settings\n        if (this.contextViewFocused()) {\n            var element = document.querySelector('.context-view');\n            if (element) {\n                this.scheduleRefresh(element, key);\n            }\n            return;\n        }\n        // If a setting control is currently focused, schedule a refresh for later\n        var activeElement = this.getActiveElementInSettingsTree();\n        var focusedSetting = activeElement && this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n        if (focusedSetting && !force) {\n            // If a single setting is being refreshed, it's ok to refresh now if that is not the focused setting\n            if (key) {\n                var focusedKey = focusedSetting.getAttribute(settingsTree_1.AbstractSettingRenderer.SETTING_KEY_ATTR);\n                if (focusedKey === key &&\n                    !DOM.hasClass(focusedSetting, 'setting-item-exclude')) { // update `exclude`s live, as they have a separate \"submit edit\" step built in before this\n                    this.updateModifiedLabelForKey(key);\n                    this.scheduleRefresh(focusedSetting, key);\n                    return;\n                }\n            }\n            else {\n                this.scheduleRefresh(focusedSetting);\n                return;\n            }\n        }\n        this.renderResultCountMessages();\n        if (key) {\n            var elements = this.currentSettingsModel.getElementsByName(key);\n            if (elements && elements.length) {\n                // TODO https://github.com/Microsoft/vscode/issues/57360\n                this.refreshTree();\n            }\n            else {\n                // Refresh requested for a key that we don't know about\n                return;\n            }\n        }\n        else {\n            this.refreshTree();\n        }\n        return;\n    };\n    SettingsEditor2.prototype.contextViewFocused = function () {\n        return !!DOM.findParentWithClass(document.activeElement, 'context-view');\n    };\n    SettingsEditor2.prototype.refreshTree = function () {\n        if (this.isVisible()) {\n            this.settingsTree.setChildren(null, createGroupIterator(this.currentSettingsModel.root));\n        }\n    };\n    SettingsEditor2.prototype.refreshTOCTree = function () {\n        if (this.isVisible()) {\n            this.tocTreeModel.update();\n            this.tocTree.setChildren(null, tocTree_1.createTOCIterator(this.tocTreeModel, this.tocTree));\n        }\n    };\n    SettingsEditor2.prototype.updateModifiedLabelForKey = function (key) {\n        var dataElements = this.currentSettingsModel.getElementsByName(key);\n        var isModified = dataElements && dataElements[0] && dataElements[0].isConfigured; // all elements are either configured or not\n        var elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), key);\n        if (elements && elements[0]) {\n            DOM.toggleClass(elements[0], 'is-configured', !!isModified);\n        }\n    };\n    SettingsEditor2.prototype.onSearchInputChanged = function () {\n        var _this = this;\n        var query = this.searchWidget.getValue().trim();\n        this.delayedFilterLogging.cancel();\n        this.triggerSearch(query.replace(/›/g, ' ')).then(function () {\n            if (query && _this.searchResultModel) {\n                _this.delayedFilterLogging.trigger(function () { return _this.reportFilteringUsed(query, _this.searchResultModel.getUniqueResults()); });\n            }\n        });\n    };\n    SettingsEditor2.prototype.parseSettingFromJSON = function (query) {\n        var match = query.match(/\"([a-zA-Z.]+)\": /);\n        return match && match[1];\n    };\n    SettingsEditor2.prototype.triggerSearch = function (query) {\n        var _this = this;\n        this.viewState.tagFilters = new Set();\n        if (query) {\n            var parsedQuery = settingsTreeModels_1.parseQuery(query);\n            query = parsedQuery.query;\n            parsedQuery.tags.forEach(function (tag) { return _this.viewState.tagFilters.add(tag); });\n        }\n        if (query && query !== '@') {\n            query = this.parseSettingFromJSON(query) || query;\n            return this.triggerFilterPreferences(query);\n        }\n        else {\n            if (this.viewState.tagFilters && this.viewState.tagFilters.size) {\n                this.searchResultModel = this.createFilterModel();\n            }\n            else {\n                this.searchResultModel = null;\n            }\n            this.localSearchDelayer.cancel();\n            this.remoteSearchThrottle.cancel();\n            if (this.searchInProgress) {\n                this.searchInProgress.cancel();\n                this.searchInProgress.dispose();\n                this.searchInProgress = null;\n            }\n            this.viewState.filterToCategory = undefined;\n            this.tocTreeModel.currentSearchModel = this.searchResultModel;\n            this.onSearchModeToggled();\n            if (this.searchResultModel) {\n                // Added a filter model\n                this.tocTree.setSelection([]);\n                this.tocTree.expandAll();\n                this.renderResultCountMessages();\n                this.refreshTree();\n            }\n            else {\n                // Leaving search mode\n                this.tocTree.collapseAll();\n                this.renderResultCountMessages();\n                this.refreshTree();\n            }\n            this.refreshTOCTree();\n        }\n        return Promise.resolve();\n    };\n    /**\n     * Return a fake SearchResultModel which can hold a flat list of all settings, to be filtered (@modified etc)\n     */\n    SettingsEditor2.prototype.createFilterModel = function () {\n        var filterModel = this.instantiationService.createInstance(settingsTreeModels_1.SearchResultModel, this.viewState);\n        var fullResult = {\n            filterMatches: []\n        };\n        for (var _i = 0, _a = this.defaultSettingsEditorModel.settingsGroups.slice(1); _i < _a.length; _i++) {\n            var g = _a[_i];\n            for (var _b = 0, _c = g.sections; _b < _c.length; _b++) {\n                var sect = _c[_b];\n                for (var _d = 0, _e = sect.settings; _d < _e.length; _d++) {\n                    var setting = _e[_d];\n                    fullResult.filterMatches.push({ setting: setting, matches: [], score: 0 });\n                }\n            }\n        }\n        filterModel.setResult(0, fullResult);\n        return filterModel;\n    };\n    SettingsEditor2.prototype.reportFilteringUsed = function (query, results) {\n        var nlpResult = results[settingsTreeModels_1.SearchResultIdx.Remote];\n        var nlpMetadata = nlpResult && nlpResult.metadata;\n        var durations = {};\n        durations['nlpResult'] = nlpMetadata && nlpMetadata.duration;\n        // Count unique results\n        var counts = {};\n        var filterResult = results[settingsTreeModels_1.SearchResultIdx.Local];\n        if (filterResult) {\n            counts['filterResult'] = filterResult.filterMatches.length;\n        }\n        if (nlpResult) {\n            counts['nlpResult'] = nlpResult.filterMatches.length;\n        }\n        var requestCount = nlpMetadata && nlpMetadata.requestCount;\n        var data = {\n            query: query,\n            durations: durations,\n            counts: counts,\n            requestCount: requestCount\n        };\n        /* __GDPR__\n            \"settingsEditor.filter\" : {\n                \"query\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n                \"durations.nlpResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"counts.nlpResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"counts.filterResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"requestCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        this.telemetryService.publicLog('settingsEditor.filter', data);\n    };\n    SettingsEditor2.prototype.triggerFilterPreferences = function (query) {\n        var _this = this;\n        if (this.searchInProgress) {\n            this.searchInProgress.cancel();\n            this.searchInProgress = null;\n        }\n        // Trigger the local search. If it didn't find an exact match, trigger the remote search.\n        var searchInProgress = this.searchInProgress = new cancellation_1.CancellationTokenSource();\n        return this.localSearchDelayer.trigger(function () {\n            if (searchInProgress && !searchInProgress.token.isCancellationRequested) {\n                return _this.localFilterPreferences(query).then(function (result) {\n                    if (result && !result.exactMatch) {\n                        _this.remoteSearchThrottle.trigger(function () {\n                            return searchInProgress && !searchInProgress.token.isCancellationRequested ?\n                                _this.remoteSearchPreferences(query, _this.searchInProgress.token) :\n                                Promise.resolve();\n                        });\n                    }\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        });\n    };\n    SettingsEditor2.prototype.localFilterPreferences = function (query, token) {\n        var localSearchProvider = this.preferencesSearchService.getLocalSearchProvider(query);\n        return this.filterOrSearchPreferences(query, settingsTreeModels_1.SearchResultIdx.Local, localSearchProvider, token);\n    };\n    SettingsEditor2.prototype.remoteSearchPreferences = function (query, token) {\n        var remoteSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query);\n        var newExtSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query, true);\n        return Promise.all([\n            this.filterOrSearchPreferences(query, settingsTreeModels_1.SearchResultIdx.Remote, remoteSearchProvider, token),\n            this.filterOrSearchPreferences(query, settingsTreeModels_1.SearchResultIdx.NewExtensions, newExtSearchProvider, token)\n        ]).then(function () { });\n    };\n    SettingsEditor2.prototype.filterOrSearchPreferences = function (query, type, searchProvider, token) {\n        var _this = this;\n        return this._filterOrSearchPreferencesModel(query, this.defaultSettingsEditorModel, searchProvider, token).then(function (result) {\n            if (token && token.isCancellationRequested) {\n                // Handle cancellation like this because cancellation is lost inside the search provider due to async/await\n                return null;\n            }\n            if (!_this.searchResultModel) {\n                _this.searchResultModel = _this.instantiationService.createInstance(settingsTreeModels_1.SearchResultModel, _this.viewState);\n                _this.searchResultModel.setResult(type, result);\n                _this.tocTreeModel.currentSearchModel = _this.searchResultModel;\n                _this.onSearchModeToggled();\n            }\n            else {\n                _this.searchResultModel.setResult(type, result);\n                _this.tocTreeModel.update();\n            }\n            _this.tocTree.setSelection([]);\n            _this.viewState.filterToCategory = undefined;\n            _this.tocTree.expandAll();\n            _this.renderTree(undefined, true);\n            _this.refreshTOCTree();\n            return result;\n        });\n    };\n    SettingsEditor2.prototype.renderResultCountMessages = function () {\n        if (!this.currentSettingsModel) {\n            return;\n        }\n        if (this.tocTreeModel && this.tocTreeModel.settingsTreeRoot) {\n            var count = this.tocTreeModel.settingsTreeRoot.count;\n            switch (count) {\n                case 0:\n                    this.countElement.innerText = nls_1.localize('noResults', \"No Settings Found\");\n                    break;\n                case 1:\n                    this.countElement.innerText = nls_1.localize('oneResult', \"1 Setting Found\");\n                    break;\n                default: this.countElement.innerText = nls_1.localize('moreThanOneResult', \"{0} Settings Found\", count);\n            }\n            this.countElement.style.display = 'block';\n            DOM.toggleClass(this.rootElement, 'no-results', count === 0);\n            this.clearFilterLinkContainer.style.display = this.viewState.tagFilters && this.viewState.tagFilters.size > 0\n                ? 'initial'\n                : 'none';\n        }\n    };\n    SettingsEditor2.prototype._filterOrSearchPreferencesModel = function (filter, model, provider, token) {\n        var _this = this;\n        var searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n        return searchP\n            .then(null, function (err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            else {\n                /* __GDPR__\n                    \"settingsEditor.searchError\" : {\n                        \"message\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" },\n                        \"filter\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                var message = errors_1.getErrorMessage(err).trim();\n                if (message && message !== 'Error') {\n                    // \"Error\" = any generic network error\n                    _this.telemetryService.publicLog('settingsEditor.searchError', { message: message, filter: filter });\n                    _this.logService.info('Setting search error: ' + message);\n                }\n                return Promise.resolve(null);\n            }\n        });\n    };\n    SettingsEditor2.prototype.layoutTrees = function (dimension) {\n        var listHeight = dimension.height - (76 + 11 /* header height + padding*/);\n        var settingsTreeHeight = listHeight - 14;\n        this.settingsTreeContainer.style.height = settingsTreeHeight + \"px\";\n        this.settingsTree.layout(settingsTreeHeight, dimension.width);\n        var tocTreeHeight = listHeight - 16;\n        this.tocTreeContainer.style.height = tocTreeHeight + \"px\";\n        this.tocTree.layout(tocTreeHeight);\n    };\n    SettingsEditor2.prototype.saveState = function () {\n        if (this.isVisible()) {\n            var searchQuery = this.searchWidget.getValue().trim();\n            var target = this.settingsTargetsWidget.settingsTarget;\n            if (this.group && this.input) {\n                this.editorMemento.saveEditorState(this.group, this.input, { searchQuery: searchQuery, target: target });\n            }\n        }\n        _super.prototype.saveState.call(this);\n    };\n    SettingsEditor2.ID = 'workbench.editor.settings2';\n    SettingsEditor2.NUM_INSTANCES = 0;\n    SettingsEditor2.SETTING_UPDATE_FAST_DEBOUNCE = 200;\n    SettingsEditor2.SETTING_UPDATE_SLOW_DEBOUNCE = 1000;\n    SettingsEditor2.SUGGESTIONS = [\n        \"@\" + preferences_1.MODIFIED_SETTING_TAG, '@tag:usesOnlineServices'\n    ];\n    SettingsEditor2 = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, preferences_2.IPreferencesService),\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, preferences_1.IPreferencesSearchService),\n        tslib_1.__param(6, log_1.ILogService),\n        tslib_1.__param(7, contextkey_1.IContextKeyService),\n        tslib_1.__param(8, storage_1.IStorageService),\n        tslib_1.__param(9, notification_1.INotificationService),\n        tslib_1.__param(10, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(11, keybinding_1.IKeybindingService)\n    ], SettingsEditor2);\n    return SettingsEditor2;\n}(baseEditor_1.BaseEditor));\nexports.SettingsEditor2 = SettingsEditor2;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/settingsEditor2.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/settingsEditor2.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { ITreeElement } from 'vs/base/browser/ui/tree/tree';\nimport * as arrays from 'vs/base/common/arrays';\nimport { Delayer, ThrottledDelayer } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport * as collections from 'vs/base/common/collections';\nimport { getErrorMessage, isPromiseCanceledError } from 'vs/base/common/errors';\nimport { Iterator } from 'vs/base/common/iterator';\nimport { isArray, withNullAsUndefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport 'vs/css!./media/settingsEditor2';\nimport { localize } from 'vs/nls';\nimport { ConfigurationTarget, ConfigurationTargetToString, IConfigurationOverrides, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { badgeBackground, badgeForeground, contrastBorder, editorForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { attachStylerCallback } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { IEditor, IEditorMemento } from 'vs/workbench/common/editor';\nimport { attachSuggestEnabledInputBoxStyler, SuggestEnabledInput } from 'vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput';\nimport { SettingsTarget, SettingsTargetsWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';\nimport { commonlyUsedData, tocData } from 'vs/workbench/contrib/preferences/browser/settingsLayout';\nimport { AbstractSettingRenderer, ISettingLinkClickEvent, ISettingOverrideClickEvent, resolveExtensionsSettings, resolveSettingsTree, SettingsTree, SettingTreeRenderers } from 'vs/workbench/contrib/preferences/browser/settingsTree';\nimport { ISettingsEditorViewState, parseQuery, SearchResultIdx, SearchResultModel, SettingsTreeElement, SettingsTreeGroupChild, SettingsTreeGroupElement, SettingsTreeModel, SettingsTreeSettingElement } from 'vs/workbench/contrib/preferences/browser/settingsTreeModels';\nimport { settingsTextInputBorder } from 'vs/workbench/contrib/preferences/browser/settingsWidgets';\nimport { createTOCIterator, TOCTree, TOCTreeModel } from 'vs/workbench/contrib/preferences/browser/tocTree';\nimport { CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, IPreferencesSearchService, ISearchProvider, MODIFIED_SETTING_TAG, SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IPreferencesService, ISearchResult, ISettingsEditorModel, ISettingsEditorOptions, SettingsEditorOptions, SettingValueType } from 'vs/workbench/services/preferences/common/preferences';\nimport { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\n\nfunction createGroupIterator(group: SettingsTreeGroupElement): Iterator<ITreeElement<SettingsTreeGroupChild>> {\n\tconst groupsIt = Iterator.fromArray(group.children);\n\n\treturn Iterator.map(groupsIt, g => {\n\t\treturn {\n\t\t\telement: g,\n\t\t\tchildren: g instanceof SettingsTreeGroupElement ?\n\t\t\t\tcreateGroupIterator(g) :\n\t\t\t\tundefined\n\t\t};\n\t});\n}\n\nconst $ = DOM.$;\n\ninterface IFocusEventFromScroll extends KeyboardEvent {\n\tfromScroll: true;\n}\n\nconst SETTINGS_EDITOR_STATE_KEY = 'settingsEditorState';\nexport class SettingsEditor2 extends BaseEditor {\n\n\tstatic readonly ID: string = 'workbench.editor.settings2';\n\tprivate static NUM_INSTANCES: number = 0;\n\tprivate static SETTING_UPDATE_FAST_DEBOUNCE: number = 200;\n\tprivate static SETTING_UPDATE_SLOW_DEBOUNCE: number = 1000;\n\n\tprivate static readonly SUGGESTIONS: string[] = [\n\t\t`@${MODIFIED_SETTING_TAG}`, '@tag:usesOnlineServices'\n\t];\n\n\tprivate static shouldSettingUpdateFast(type: SettingValueType | SettingValueType[]): boolean {\n\t\tif (isArray(type)) {\n\t\t\t// nullable integer/number or complex\n\t\t\treturn false;\n\t\t}\n\t\treturn type === SettingValueType.Enum ||\n\t\t\ttype === SettingValueType.Complex ||\n\t\t\ttype === SettingValueType.Boolean ||\n\t\t\ttype === SettingValueType.Exclude;\n\t}\n\n\tprivate defaultSettingsEditorModel: Settings2EditorModel;\n\n\tprivate rootElement: HTMLElement;\n\tprivate headerContainer: HTMLElement;\n\tprivate searchWidget: SuggestEnabledInput;\n\tprivate countElement: HTMLElement;\n\tprivate settingsTargetsWidget: SettingsTargetsWidget;\n\n\tprivate settingsTreeContainer: HTMLElement;\n\tprivate settingsTree: SettingsTree;\n\tprivate settingRenderers: SettingTreeRenderers;\n\tprivate tocTreeModel: TOCTreeModel;\n\tprivate settingsTreeModel: SettingsTreeModel;\n\tprivate noResultsMessage: HTMLElement;\n\tprivate clearFilterLinkContainer: HTMLElement;\n\n\tprivate tocTreeContainer: HTMLElement;\n\tprivate tocTree: TOCTree;\n\n\tprivate settingsAriaExtraLabelsContainer: HTMLElement;\n\n\tprivate delayedFilterLogging: Delayer<void>;\n\tprivate localSearchDelayer: Delayer<void>;\n\tprivate remoteSearchThrottle: ThrottledDelayer<void>;\n\tprivate searchInProgress: CancellationTokenSource | null;\n\n\tprivate settingFastUpdateDelayer: Delayer<void>;\n\tprivate settingSlowUpdateDelayer: Delayer<void>;\n\tprivate pendingSettingUpdate: { key: string, value: any } | null;\n\n\tprivate readonly viewState: ISettingsEditorViewState;\n\tprivate _searchResultModel: SearchResultModel | null;\n\n\tprivate tocRowFocused: IContextKey<boolean>;\n\tprivate inSettingsEditorContextKey: IContextKey<boolean>;\n\tprivate searchFocusContextKey: IContextKey<boolean>;\n\n\tprivate scheduledRefreshes: Map<string, DOM.IFocusTracker>;\n\tprivate lastFocusedSettingElement: string;\n\n\t/** Don't spam warnings */\n\tprivate hasWarnedMissingSettings: boolean;\n\n\tprivate editorMemento: IEditorMemento<ISettingsEditor2State>;\n\n\tprivate tocFocusedElement: SettingsTreeGroupElement | null;\n\tprivate settingsTreeScrollTop = 0;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IPreferencesSearchService private readonly preferencesSearchService: IPreferencesSearchService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IEditorGroupsService protected editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper(SettingsEditor2.ID, telemetryService, themeService, storageService);\n\t\tthis.delayedFilterLogging = new Delayer<void>(1000);\n\t\tthis.localSearchDelayer = new Delayer(300);\n\t\tthis.remoteSearchThrottle = new ThrottledDelayer(200);\n\t\tthis.viewState = { settingsTarget: ConfigurationTarget.USER };\n\n\t\tthis.settingFastUpdateDelayer = new Delayer<void>(SettingsEditor2.SETTING_UPDATE_FAST_DEBOUNCE);\n\t\tthis.settingSlowUpdateDelayer = new Delayer<void>(SettingsEditor2.SETTING_UPDATE_SLOW_DEBOUNCE);\n\n\t\tthis.inSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(contextKeyService);\n\t\tthis.searchFocusContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(contextKeyService);\n\t\tthis.tocRowFocused = CONTEXT_TOC_ROW_FOCUS.bindTo(contextKeyService);\n\n\t\tthis.scheduledRefreshes = new Map<string, DOM.IFocusTracker>();\n\n\t\tthis.editorMemento = this.getEditorMemento<ISettingsEditor2State>(editorGroupService, SETTINGS_EDITOR_STATE_KEY);\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\tthis.onConfigUpdate(e.affectedKeys);\n\t\t\t}\n\t\t}));\n\t}\n\n\tget minimumWidth(): number { return 375; }\n\tget maximumWidth(): number { return Number.POSITIVE_INFINITY; }\n\n\t// these setters need to exist because this extends from BaseEditor\n\tset minimumWidth(value: number) { /*noop*/ }\n\tset maximumWidth(value: number) { /*noop*/ }\n\n\tprivate get currentSettingsModel() {\n\t\treturn this.searchResultModel || this.settingsTreeModel;\n\t}\n\n\tprivate get searchResultModel(): SearchResultModel | null {\n\t\treturn this._searchResultModel;\n\t}\n\n\tprivate set searchResultModel(value: SearchResultModel | null) {\n\t\tthis._searchResultModel = value;\n\n\t\tDOM.toggleClass(this.rootElement, 'search-mode', !!this._searchResultModel);\n\t}\n\n\tprivate get currentSettingsContextMenuKeyBindingLabel(): string {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU);\n\t\treturn (keybinding && keybinding.getAriaLabel()) || '';\n\t}\n\n\tcreateEditor(parent: HTMLElement): void {\n\t\tparent.setAttribute('tabindex', '-1');\n\t\tthis.rootElement = DOM.append(parent, $('.settings-editor'));\n\n\t\tthis.createHeader(this.rootElement);\n\t\tthis.createBody(this.rootElement);\n\t\tthis.updateStyles();\n\t}\n\n\tsetInput(input: SettingsEditor2Input, options: SettingsEditorOptions, token: CancellationToken): Promise<void> {\n\t\tthis.inSettingsEditorContextKey.set(true);\n\t\treturn super.setInput(input, options, token)\n\t\t\t.then(() => new Promise(process.nextTick)) // Force setInput to be async\n\t\t\t.then(() => {\n\t\t\t\tif (!options) {\n\t\t\t\t\tif (!this.viewState.settingsTarget) {\n\t\t\t\t\t\t// Persist?\n\t\t\t\t\t\toptions = SettingsEditorOptions.create({ target: ConfigurationTarget.USER });\n\t\t\t\t\t}\n\t\t\t\t} else if (!options.target) {\n\t\t\t\t\toptions.target = ConfigurationTarget.USER;\n\t\t\t\t}\n\t\t\t\tthis._setOptions(options);\n\n\t\t\t\tthis._register(input.onDispose(() => {\n\t\t\t\t\tthis.searchWidget.setValue('');\n\t\t\t\t}));\n\n\t\t\t\treturn this.render(token);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Init TOC selection\n\t\t\t\tthis.updateTreeScrollSync();\n\n\t\t\t\tthis.restoreCachedState();\n\t\t\t});\n\t}\n\n\tprivate restoreCachedState(): void {\n\t\tconst cachedState = this.group && this.input && this.editorMemento.loadEditorState(this.group, this.input);\n\t\tif (cachedState && typeof cachedState.target === 'object') {\n\t\t\tcachedState.target = URI.revive(cachedState.target);\n\t\t}\n\n\t\tif (cachedState) {\n\t\t\tconst settingsTarget = cachedState.target;\n\t\t\tthis.settingsTargetsWidget.settingsTarget = settingsTarget;\n\t\t\tthis.onDidSettingsTargetChange(settingsTarget);\n\t\t\tthis.searchWidget.setValue(cachedState.searchQuery);\n\t\t}\n\t}\n\n\tsetOptions(options: SettingsEditorOptions): void {\n\t\tsuper.setOptions(options);\n\n\t\tthis._setOptions(options);\n\t}\n\n\tprivate _setOptions(options: SettingsEditorOptions): void {\n\t\tif (!options) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.query) {\n\t\t\tthis.searchWidget.setValue(options.query);\n\t\t}\n\n\t\tconst target: SettingsTarget = options.folderUri || <SettingsTarget>options.target;\n\t\tthis.settingsTargetsWidget.settingsTarget = target;\n\t\tthis.viewState.settingsTarget = target;\n\t}\n\n\tclearInput(): void {\n\t\tthis.inSettingsEditorContextKey.set(false);\n\t\tif (this.input) {\n\t\t\tthis.editorMemento.clearEditorState(this.input, this.group);\n\t\t}\n\n\t\tsuper.clearInput();\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\t\tthis.layoutTrees(dimension);\n\n\t\tconst innerWidth = dimension.width - 24 * 2; // 24px padding on left and right\n\t\tconst monacoWidth = (innerWidth > 1000 ? 1000 : innerWidth) - 10;\n\t\tthis.searchWidget.layout({ height: 20, width: monacoWidth });\n\n\t\tDOM.toggleClass(this.rootElement, 'mid-width', dimension.width < 1000 && dimension.width >= 600);\n\t\tDOM.toggleClass(this.rootElement, 'narrow-width', dimension.width < 600);\n\t}\n\n\tfocus(): void {\n\t\tif (this.lastFocusedSettingElement) {\n\t\t\tconst elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), this.lastFocusedSettingElement);\n\t\t\tif (elements.length) {\n\t\t\t\tconst control = elements[0].querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\t\t\tif (control) {\n\t\t\t\t\t(<HTMLElement>control).focus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.focusSearch();\n\t}\n\n\tfocusSettings(): void {\n\t\t// Update ARIA global labels\n\t\tconst labelElement = this.settingsAriaExtraLabelsContainer.querySelector('#settings_aria_more_actions_shortcut_label');\n\t\tif (labelElement) {\n\t\t\tconst settingsContextMenuShortcut = this.currentSettingsContextMenuKeyBindingLabel;\n\t\t\tif (settingsContextMenuShortcut) {\n\t\t\t\tlabelElement.setAttribute('aria-label', localize('settingsContextMenuAriaShortcut', \"For more actions, Press {0}.\", settingsContextMenuShortcut));\n\t\t\t}\n\t\t}\n\n\t\tconst firstFocusable = this.settingsTree.getHTMLElement().querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\tif (firstFocusable) {\n\t\t\t(<HTMLElement>firstFocusable).focus();\n\t\t}\n\t}\n\n\tshowContextMenu(): void {\n\t\tconst activeElement = this.getActiveElementInSettingsTree();\n\t\tif (!activeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingDOMElement = this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n\t\tif (!settingDOMElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focusedKey = this.settingRenderers.getKeyForDOMElementInSetting(settingDOMElement);\n\t\tif (!focusedKey) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elements = this.currentSettingsModel.getElementsByName(focusedKey);\n\t\tif (elements && elements[0]) {\n\t\t\tthis.settingRenderers.showContextMenu(elements[0], settingDOMElement);\n\t\t}\n\t}\n\n\tfocusSearch(filter?: string, selectAll = true): void {\n\t\tif (filter && this.searchWidget) {\n\t\t\tthis.searchWidget.setValue(filter);\n\t\t}\n\n\t\tthis.searchWidget.focus(selectAll);\n\t}\n\n\tclearSearchResults(): void {\n\t\tthis.searchWidget.setValue('');\n\t}\n\n\tclearSearchFilters(): void {\n\t\tlet query = this.searchWidget.getValue();\n\n\t\tSettingsEditor2.SUGGESTIONS.forEach(suggestion => {\n\t\t\tquery = query.replace(suggestion, '');\n\t\t});\n\n\t\tthis.searchWidget.setValue(query.trim());\n\t}\n\n\tprivate createHeader(parent: HTMLElement): void {\n\t\tthis.headerContainer = DOM.append(parent, $('.settings-header'));\n\n\t\tconst searchContainer = DOM.append(this.headerContainer, $('.search-container'));\n\n\t\tconst searchBoxLabel = localize('SearchSettings.AriaLabel', \"Search settings\");\n\t\tthis.searchWidget = this._register(this.instantiationService.createInstance(SuggestEnabledInput, `${SettingsEditor2.ID}.searchbox`, searchContainer, {\n\t\t\ttriggerCharacters: ['@'],\n\t\t\tprovideResults: (query: string) => {\n\t\t\t\treturn SettingsEditor2.SUGGESTIONS.filter(tag => query.indexOf(tag) === -1).map(tag => tag + ' ');\n\t\t\t}\n\t\t}, searchBoxLabel, 'settingseditor:searchinput' + SettingsEditor2.NUM_INSTANCES++, {\n\t\t\t\tplaceholderText: searchBoxLabel,\n\t\t\t\tfocusContextKey: this.searchFocusContextKey,\n\t\t\t\t// TODO: Aria-live\n\t\t\t})\n\t\t);\n\n\t\tthis._register(this.searchWidget.onFocus(() => {\n\t\t\tthis.lastFocusedSettingElement = '';\n\t\t}));\n\n\t\tthis._register(attachSuggestEnabledInputBoxStyler(this.searchWidget, this.themeService, {\n\t\t\tinputBorder: settingsTextInputBorder\n\t\t}));\n\n\t\tthis.countElement = DOM.append(searchContainer, DOM.$('.settings-count-widget'));\n\t\tthis._register(attachStylerCallback(this.themeService, { badgeBackground, contrastBorder, badgeForeground }, colors => {\n\t\t\tconst background = colors.badgeBackground ? colors.badgeBackground.toString() : null;\n\t\t\tconst border = colors.contrastBorder ? colors.contrastBorder.toString() : null;\n\t\t\tconst foreground = colors.badgeForeground ? colors.badgeForeground.toString() : null;\n\n\t\t\tthis.countElement.style.backgroundColor = background;\n\t\t\tthis.countElement.style.color = foreground;\n\n\t\t\tthis.countElement.style.borderWidth = border ? '1px' : null;\n\t\t\tthis.countElement.style.borderStyle = border ? 'solid' : null;\n\t\t\tthis.countElement.style.borderColor = border;\n\t\t}));\n\n\t\tthis._register(this.searchWidget.onInputDidChange(() => this.onSearchInputChanged()));\n\n\t\tconst headerControlsContainer = DOM.append(this.headerContainer, $('.settings-header-controls'));\n\t\tconst targetWidgetContainer = DOM.append(headerControlsContainer, $('.settings-target-container'));\n\t\tthis.settingsTargetsWidget = this._register(this.instantiationService.createInstance(SettingsTargetsWidget, targetWidgetContainer));\n\t\tthis.settingsTargetsWidget.settingsTarget = ConfigurationTarget.USER;\n\t\tthis.settingsTargetsWidget.onDidTargetChange(target => this.onDidSettingsTargetChange(target));\n\t}\n\n\tprivate onDidSettingsTargetChange(target: SettingsTarget): void {\n\t\tthis.viewState.settingsTarget = target;\n\n\t\t// TODO Instead of rebuilding the whole model, refresh and uncache the inspected setting value\n\t\tthis.onConfigUpdate(undefined, true);\n\t}\n\n\tprivate onDidClickSetting(evt: ISettingLinkClickEvent, recursed?: boolean): void {\n\t\tconst elements = this.currentSettingsModel.getElementsByName(evt.targetKey);\n\t\tif (elements && elements[0]) {\n\t\t\tlet sourceTop = this.settingsTree.getRelativeTop(evt.source);\n\t\t\tif (typeof sourceTop !== 'number') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (sourceTop < 0) {\n\t\t\t\t// e.g. clicked a searched element, now the search has been cleared\n\t\t\t\tsourceTop = 0.5;\n\t\t\t}\n\n\t\t\tthis.settingsTree.reveal(elements[0], sourceTop);\n\n\t\t\tconst domElements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), evt.targetKey);\n\t\t\tif (domElements && domElements[0]) {\n\t\t\t\tconst control = domElements[0].querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\t\t\tif (control) {\n\t\t\t\t\t(<HTMLElement>control).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!recursed) {\n\t\t\tconst p = this.triggerSearch('');\n\t\t\tp.then(() => {\n\t\t\t\tthis.searchWidget.setValue('');\n\t\t\t\tthis.onDidClickSetting(evt, true);\n\t\t\t});\n\t\t}\n\t}\n\n\tswitchToSettingsFile(): Promise<IEditor | null> {\n\t\tconst query = parseQuery(this.searchWidget.getValue());\n\t\treturn this.openSettingsFile(query.query);\n\t}\n\n\tprivate openSettingsFile(query?: string): Promise<IEditor | null> {\n\t\tconst currentSettingsTarget = this.settingsTargetsWidget.settingsTarget;\n\n\t\tconst options: ISettingsEditorOptions = { query };\n\t\tif (currentSettingsTarget === ConfigurationTarget.USER) {\n\t\t\treturn this.preferencesService.openGlobalSettings(true, options);\n\t\t} else if (currentSettingsTarget === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn this.preferencesService.openWorkspaceSettings(true, options);\n\t\t} else {\n\t\t\treturn this.preferencesService.openFolderSettings(currentSettingsTarget, true, options);\n\t\t}\n\t}\n\n\tprivate createBody(parent: HTMLElement): void {\n\t\tconst bodyContainer = DOM.append(parent, $('.settings-body'));\n\n\t\tthis.noResultsMessage = DOM.append(bodyContainer, $('.no-results-message'));\n\n\t\tthis.noResultsMessage.innerText = localize('noResults', \"No Settings Found\");\n\n\t\tthis.clearFilterLinkContainer = $('span.clear-search-filters');\n\n\t\tthis.clearFilterLinkContainer.textContent = ' - ';\n\t\tconst clearFilterLink = DOM.append(this.clearFilterLinkContainer, $('a.pointer.prominent', { tabindex: 0 }, localize('clearSearchFilters', 'Clear Filters')));\n\t\tthis._register(DOM.addDisposableListener(clearFilterLink, DOM.EventType.CLICK, (e: MouseEvent) => {\n\t\t\tDOM.EventHelper.stop(e, false);\n\t\t\tthis.clearSearchFilters();\n\t\t}));\n\n\t\tDOM.append(this.noResultsMessage, this.clearFilterLinkContainer);\n\n\t\tconst clearSearchContainer = $('span.clear-search');\n\t\tclearSearchContainer.textContent = ' - ';\n\n\t\tconst clearSearch = DOM.append(clearSearchContainer, $('a.pointer.prominent', { tabindex: 0 }, localize('clearSearch', 'Clear Search')));\n\t\tthis._register(DOM.addDisposableListener(clearSearch, DOM.EventType.CLICK, (e: MouseEvent) => {\n\t\t\tDOM.EventHelper.stop(e, false);\n\t\t\tthis.clearSearchResults();\n\t\t\tthis.focusSearch();\n\t\t}));\n\n\t\tDOM.append(this.noResultsMessage, clearSearchContainer);\n\n\t\tthis._register(attachStylerCallback(this.themeService, { editorForeground }, colors => {\n\t\t\tthis.noResultsMessage.style.color = colors.editorForeground ? colors.editorForeground.toString() : null;\n\t\t}));\n\n\t\tthis.createTOC(bodyContainer);\n\n\t\tthis.createFocusSink(\n\t\t\tbodyContainer,\n\t\t\te => {\n\t\t\t\tif (DOM.findParentWithClass(e.relatedTarget, 'settings-editor-tree')) {\n\t\t\t\t\tif (this.settingsTree.scrollTop > 0) {\n\t\t\t\t\t\tconst firstElement = this.settingsTree.firstVisibleElement;\n\t\t\t\t\t\tthis.settingsTree.reveal(firstElement, 0.1);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst firstControl = this.settingsTree.getHTMLElement().querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\t\t\t\tif (firstControl) {\n\t\t\t\t\t\t(<HTMLElement>firstControl).focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t'settings list focus helper');\n\n\t\tthis.createSettingsTree(bodyContainer);\n\n\t\tthis.createFocusSink(\n\t\t\tbodyContainer,\n\t\t\te => {\n\t\t\t\tif (DOM.findParentWithClass(e.relatedTarget, 'settings-editor-tree')) {\n\t\t\t\t\tif (this.settingsTree.scrollTop < this.settingsTree.scrollHeight) {\n\t\t\t\t\t\tconst lastElement = this.settingsTree.lastVisibleElement;\n\t\t\t\t\t\tthis.settingsTree.reveal(lastElement, 0.9);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t'settings list focus helper'\n\t\t);\n\t}\n\n\tprivate createFocusSink(container: HTMLElement, callback: (e: any) => boolean, label: string): HTMLElement {\n\t\tconst listFocusSink = DOM.append(container, $('.settings-tree-focus-sink'));\n\t\tlistFocusSink.setAttribute('aria-label', label);\n\t\tlistFocusSink.tabIndex = 0;\n\t\tthis._register(DOM.addDisposableListener(listFocusSink, 'focus', (e: any) => {\n\t\t\tif (e.relatedTarget && callback(e)) {\n\t\t\t\te.relatedTarget.focus();\n\t\t\t}\n\t\t}));\n\n\t\treturn listFocusSink;\n\t}\n\n\tprivate createTOC(parent: HTMLElement): void {\n\t\tthis.tocTreeModel = new TOCTreeModel(this.viewState);\n\t\tthis.tocTreeContainer = DOM.append(parent, $('.settings-toc-container'));\n\n\t\tthis.tocTree = this._register(this.instantiationService.createInstance(TOCTree,\n\t\t\tDOM.append(this.tocTreeContainer, $('.settings-toc-wrapper')),\n\t\t\tthis.viewState));\n\n\t\tthis._register(this.tocTree.onDidChangeFocus(e => {\n\t\t\tconst element: SettingsTreeGroupElement | null = e.elements[0];\n\t\t\tif (this.tocFocusedElement === element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.tocFocusedElement = element;\n\t\t\tthis.tocTree.setSelection(element ? [element] : []);\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tif (this.viewState.filterToCategory !== element) {\n\t\t\t\t\tthis.viewState.filterToCategory = withNullAsUndefined(element);\n\t\t\t\t\tthis.renderTree();\n\t\t\t\t\tthis.settingsTree.scrollTop = 0;\n\t\t\t\t}\n\t\t\t} else if (element && (!e.browserEvent || !(<IFocusEventFromScroll>e.browserEvent).fromScroll)) {\n\t\t\t\tthis.settingsTree.reveal(element, 0);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidFocus(() => {\n\t\t\tthis.tocRowFocused.set(true);\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidBlur(() => {\n\t\t\tthis.tocRowFocused.set(false);\n\t\t}));\n\t}\n\n\tprivate createSettingsTree(parent: HTMLElement): void {\n\t\tthis.settingsTreeContainer = DOM.append(parent, $('.settings-tree-container'));\n\n\t\t// Add  ARIA extra labels div\n\t\tthis.settingsAriaExtraLabelsContainer = DOM.append(this.settingsTreeContainer, $('.settings-aria-extra-labels'));\n\t\tthis.settingsAriaExtraLabelsContainer.id = 'settings_aria_extra_labels';\n\t\t// Add global labels here\n\t\tconst labelDiv = DOM.append(this.settingsAriaExtraLabelsContainer, $('.settings-aria-extra-label'));\n\t\tlabelDiv.id = 'settings_aria_more_actions_shortcut_label';\n\t\tlabelDiv.setAttribute('aria-label', '');\n\n\t\tthis.settingRenderers = this.instantiationService.createInstance(SettingTreeRenderers);\n\t\tthis._register(this.settingRenderers.onDidChangeSetting(e => this.onDidChangeSetting(e.key, e.value, e.type)));\n\t\tthis._register(this.settingRenderers.onDidOpenSettings(settingKey => {\n\t\t\tthis.openSettingsFile(settingKey);\n\t\t}));\n\t\tthis._register(this.settingRenderers.onDidClickSettingLink(settingName => this.onDidClickSetting(settingName)));\n\t\tthis._register(this.settingRenderers.onDidFocusSetting(element => {\n\t\t\tthis.lastFocusedSettingElement = element.setting.key;\n\t\t\tthis.settingsTree.reveal(element);\n\t\t}));\n\t\tthis._register(this.settingRenderers.onDidClickOverrideElement((element: ISettingOverrideClickEvent) => {\n\t\t\tif (ConfigurationTargetToString(ConfigurationTarget.WORKSPACE) === element.scope.toUpperCase()) {\n\t\t\t\tthis.settingsTargetsWidget.updateTarget(ConfigurationTarget.WORKSPACE);\n\t\t\t} else if (ConfigurationTargetToString(ConfigurationTarget.USER) === element.scope.toUpperCase()) {\n\t\t\t\tthis.settingsTargetsWidget.updateTarget(ConfigurationTarget.USER);\n\t\t\t}\n\n\t\t\tthis.searchWidget.setValue(element.targetKey);\n\t\t}));\n\n\t\tthis.settingsTree = this._register(this.instantiationService.createInstance(SettingsTree,\n\t\t\tthis.settingsTreeContainer,\n\t\t\tthis.viewState,\n\t\t\tthis.settingRenderers.allRenderers));\n\t\tthis.settingsTree.getHTMLElement().attributes.removeNamedItem('tabindex');\n\n\t\tthis._register(this.settingsTree.onDidScroll(() => {\n\t\t\tif (this.settingsTree.scrollTop === this.settingsTreeScrollTop) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.settingsTreeScrollTop = this.settingsTree.scrollTop;\n\n\t\t\t// setTimeout because calling setChildren on the settingsTree can trigger onDidScroll, so it fires when\n\t\t\t// setChildren has called on the settings tree but not the toc tree yet, so their rendered elements are out of sync\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.updateTreeScrollSync();\n\t\t\t}, 0);\n\t\t}));\n\t}\n\n\tprivate notifyNoSaveNeeded() {\n\t\tif (!this.storageService.getBoolean('hasNotifiedOfSettingsAutosave', StorageScope.GLOBAL, false)) {\n\t\t\tthis.storageService.store('hasNotifiedOfSettingsAutosave', true, StorageScope.GLOBAL);\n\t\t\tthis.notificationService.info(localize('settingsNoSaveNeeded', \"Your changes are automatically saved as you edit.\"));\n\t\t}\n\t}\n\n\tprivate onDidChangeSetting(key: string, value: any, type: SettingValueType | SettingValueType[]): void {\n\t\tthis.notifyNoSaveNeeded();\n\n\t\tif (this.pendingSettingUpdate && this.pendingSettingUpdate.key !== key) {\n\t\t\tthis.updateChangedSetting(key, value);\n\t\t}\n\n\t\tthis.pendingSettingUpdate = { key, value };\n\t\tif (SettingsEditor2.shouldSettingUpdateFast(type)) {\n\t\t\tthis.settingFastUpdateDelayer.trigger(() => this.updateChangedSetting(key, value));\n\t\t} else {\n\t\t\tthis.settingSlowUpdateDelayer.trigger(() => this.updateChangedSetting(key, value));\n\t\t}\n\t}\n\n\tprivate updateTreeScrollSync(): void {\n\t\tthis.settingRenderers.cancelSuggesters();\n\t\tif (this.searchResultModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tocTreeModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementToSync = this.settingsTree.firstVisibleElement;\n\t\tconst element = elementToSync instanceof SettingsTreeSettingElement ? elementToSync.parent :\n\t\t\telementToSync instanceof SettingsTreeGroupElement ? elementToSync :\n\t\t\t\tnull;\n\n\t\t// It's possible for this to be called when the TOC and settings tree are out of sync - e.g. when the settings tree has deferred a refresh because\n\t\t// it is focused. So, bail if element doesn't exist in the TOC.\n\t\tlet nodeExists = true;\n\t\ttry { this.tocTree.getNode(element); } catch (e) { nodeExists = false; }\n\t\tif (!nodeExists) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element && this.tocTree.getSelection()[0] !== element) {\n\t\t\tconst ancestors = this.getAncestors(element);\n\t\t\tancestors.forEach(e => this.tocTree.expand(<SettingsTreeGroupElement>e));\n\n\t\t\tthis.tocTree.reveal(element);\n\t\t\tconst elementTop = this.tocTree.getRelativeTop(element);\n\t\t\tif (typeof elementTop !== 'number') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.tocTree.collapseAll();\n\n\t\t\tancestors.forEach(e => this.tocTree.expand(<SettingsTreeGroupElement>e));\n\t\t\tif (elementTop < 0 || elementTop > 1) {\n\t\t\t\tthis.tocTree.reveal(element);\n\t\t\t} else {\n\t\t\t\tthis.tocTree.reveal(element, elementTop);\n\t\t\t}\n\n\t\t\tthis.tocTree.expand(element);\n\n\t\t\tthis.tocTree.setSelection([element]);\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t(<IFocusEventFromScroll>fakeKeyboardEvent).fromScroll = true;\n\t\t\tthis.tocTree.setFocus([element], fakeKeyboardEvent);\n\t\t}\n\t}\n\n\tprivate getAncestors(element: SettingsTreeElement): SettingsTreeElement[] {\n\t\tconst ancestors: any[] = [];\n\n\t\twhile (element.parent) {\n\t\t\tif (element.parent.id !== 'root') {\n\t\t\t\tancestors.push(element.parent);\n\t\t\t}\n\n\t\t\telement = element.parent;\n\t\t}\n\n\t\treturn ancestors.reverse();\n\t}\n\n\tprivate updateChangedSetting(key: string, value: any): Promise<void> {\n\t\t// ConfigurationService displays the error if this fails.\n\t\t// Force a render afterwards because onDidConfigurationUpdate doesn't fire if the update doesn't result in an effective setting value change\n\t\tconst settingsTarget = this.settingsTargetsWidget.settingsTarget;\n\t\tconst resource = URI.isUri(settingsTarget) ? settingsTarget : undefined;\n\t\tconst configurationTarget = <ConfigurationTarget>(resource ? ConfigurationTarget.WORKSPACE_FOLDER : settingsTarget);\n\t\tconst overrides: IConfigurationOverrides = { resource };\n\n\t\tconst isManualReset = value === undefined;\n\n\t\t// If the user is changing the value back to the default, do a 'reset' instead\n\t\tconst inspected = this.configurationService.inspect(key, overrides);\n\t\tif (inspected.default === value) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\treturn this.configurationService.updateValue(key, value, overrides, configurationTarget)\n\t\t\t.then(() => {\n\t\t\t\tthis.renderTree(key, isManualReset);\n\t\t\t\tconst reportModifiedProps = {\n\t\t\t\t\tkey,\n\t\t\t\t\tquery: this.searchWidget.getValue(),\n\t\t\t\t\tsearchResults: this.searchResultModel && this.searchResultModel.getUniqueResults(),\n\t\t\t\t\trawResults: this.searchResultModel && this.searchResultModel.getRawResults(),\n\t\t\t\t\tshowConfiguredOnly: !!this.viewState.tagFilters && this.viewState.tagFilters.has(MODIFIED_SETTING_TAG),\n\t\t\t\t\tisReset: typeof value === 'undefined',\n\t\t\t\t\tsettingsTarget: this.settingsTargetsWidget.settingsTarget as SettingsTarget\n\t\t\t\t};\n\n\t\t\t\treturn this.reportModifiedSetting(reportModifiedProps);\n\t\t\t});\n\t}\n\n\tprivate reportModifiedSetting(props: { key: string, query: string, searchResults: ISearchResult[] | null, rawResults: ISearchResult[] | null, showConfiguredOnly: boolean, isReset: boolean, settingsTarget: SettingsTarget }): void {\n\t\tthis.pendingSettingUpdate = null;\n\n\t\tlet groupId: string | undefined = undefined;\n\t\tlet nlpIndex: number | undefined = undefined;\n\t\tlet displayIndex: number | undefined = undefined;\n\t\tif (props.searchResults) {\n\t\t\tconst remoteResult = props.searchResults[SearchResultIdx.Remote];\n\t\t\tconst localResult = props.searchResults[SearchResultIdx.Local];\n\n\t\t\tconst localIndex = arrays.firstIndex(localResult!.filterMatches, m => m.setting.key === props.key);\n\t\t\tgroupId = localIndex >= 0 ?\n\t\t\t\t'local' :\n\t\t\t\t'remote';\n\n\t\t\tdisplayIndex = localIndex >= 0 ?\n\t\t\t\tlocalIndex :\n\t\t\t\tremoteResult && (arrays.firstIndex(remoteResult.filterMatches, m => m.setting.key === props.key) + localResult.filterMatches.length);\n\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tconst rawResults = this.searchResultModel.getRawResults();\n\t\t\t\tif (rawResults[SearchResultIdx.Remote]) {\n\t\t\t\t\tconst _nlpIndex = arrays.firstIndex(rawResults[SearchResultIdx.Remote].filterMatches, m => m.setting.key === props.key);\n\t\t\t\t\tnlpIndex = _nlpIndex >= 0 ? _nlpIndex : undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst reportedTarget = props.settingsTarget === ConfigurationTarget.USER ? 'user' :\n\t\t\tprops.settingsTarget === ConfigurationTarget.WORKSPACE ? 'workspace' :\n\t\t\t\t'folder';\n\n\t\tconst data = {\n\t\t\tkey: props.key,\n\t\t\tquery: props.query,\n\t\t\tgroupId,\n\t\t\tnlpIndex,\n\t\t\tdisplayIndex,\n\t\t\tshowConfiguredOnly: props.showConfiguredOnly,\n\t\t\tisReset: props.isReset,\n\t\t\ttarget: reportedTarget\n\t\t};\n\n\t\t/* __GDPR__\n\t\t\t\"settingsEditor.settingModified\" : {\n\t\t\t\t\"key\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"query\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"groupId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"nlpIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"displayIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"showConfiguredOnly\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"isReset\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('settingsEditor.settingModified', data);\n\t}\n\n\tprivate render(token: CancellationToken): Promise<any> {\n\t\tif (this.input) {\n\t\t\treturn this.input.resolve()\n\t\t\t\t.then((model: Settings2EditorModel) => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._register(model.onDidChangeGroups(() => this.onConfigUpdate()));\n\t\t\t\t\tthis.defaultSettingsEditorModel = model;\n\t\t\t\t\treturn this.onConfigUpdate();\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprivate onSearchModeToggled(): void {\n\t\tDOM.removeClass(this.rootElement, 'no-toc-search');\n\t\tif (this.configurationService.getValue('workbench.settings.settingsSearchTocBehavior') === 'hide') {\n\t\t\tDOM.toggleClass(this.rootElement, 'no-toc-search', !!this.searchResultModel);\n\t\t}\n\t}\n\n\tprivate scheduleRefresh(element: HTMLElement, key = ''): void {\n\t\tif (key && this.scheduledRefreshes.has(key)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!key) {\n\t\t\tthis.scheduledRefreshes.forEach(r => r.dispose());\n\t\t\tthis.scheduledRefreshes.clear();\n\t\t}\n\n\t\tconst scheduledRefreshTracker = DOM.trackFocus(element);\n\t\tthis.scheduledRefreshes.set(key, scheduledRefreshTracker);\n\t\tscheduledRefreshTracker.onDidBlur(() => {\n\t\t\tscheduledRefreshTracker.dispose();\n\t\t\tthis.scheduledRefreshes.delete(key);\n\t\t\tthis.onConfigUpdate([key]);\n\t\t});\n\t}\n\n\tprivate onConfigUpdate(keys?: string[], forceRefresh = false): void {\n\t\tif (keys && this.settingsTreeModel) {\n\t\t\treturn this.updateElementsByKey(keys);\n\t\t}\n\n\t\tconst groups = this.defaultSettingsEditorModel.settingsGroups.slice(1); // Without commonlyUsed\n\t\tconst dividedGroups = collections.groupBy(groups, g => g.contributedByExtension ? 'extension' : 'core');\n\t\tconst settingsResult = resolveSettingsTree(tocData, dividedGroups.core);\n\t\tconst resolvedSettingsRoot = settingsResult.tree;\n\n\t\t// Warn for settings not included in layout\n\t\tif (settingsResult.leftoverSettings.size && !this.hasWarnedMissingSettings) {\n\t\t\tconst settingKeyList: string[] = [];\n\t\t\tsettingsResult.leftoverSettings.forEach(s => {\n\t\t\t\tsettingKeyList.push(s.key);\n\t\t\t});\n\n\t\t\tthis.logService.warn(`SettingsEditor2: Settings not included in settingsLayout.ts: ${settingKeyList.join(', ')}`);\n\t\t\tthis.hasWarnedMissingSettings = true;\n\t\t}\n\n\t\tconst commonlyUsed = resolveSettingsTree(commonlyUsedData, dividedGroups.core);\n\t\tresolvedSettingsRoot.children!.unshift(commonlyUsed.tree);\n\n\t\tresolvedSettingsRoot.children!.push(resolveExtensionsSettings(dividedGroups.extension || []));\n\n\t\tif (this.searchResultModel) {\n\t\t\tthis.searchResultModel.updateChildren();\n\t\t}\n\n\t\tif (this.settingsTreeModel) {\n\t\t\tthis.settingsTreeModel.update(resolvedSettingsRoot);\n\n\t\t\t// Make sure that all extensions' settings are included in search results\n\t\t\tconst cachedState = this.group && this.input && this.editorMemento.loadEditorState(this.group, this.input);\n\t\t\tif (cachedState && cachedState.searchQuery) {\n\t\t\t\tthis.triggerSearch(cachedState.searchQuery);\n\t\t\t} else {\n\t\t\t\tthis.renderTree(undefined, forceRefresh);\n\t\t\t\tthis.refreshTOCTree();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.settingsTreeModel = this.instantiationService.createInstance(SettingsTreeModel, this.viewState);\n\t\t\tthis.settingsTreeModel.update(resolvedSettingsRoot);\n\t\t\tthis.tocTreeModel.settingsTreeRoot = this.settingsTreeModel.root as SettingsTreeGroupElement;\n\n\t\t\tthis.refreshTOCTree();\n\t\t\tthis.refreshTree();\n\n\t\t\tthis.tocTree.collapseAll();\n\t\t}\n\t}\n\n\tprivate updateElementsByKey(keys: string[]): void {\n\t\tif (keys.length) {\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tkeys.forEach(key => this.searchResultModel!.updateElementsByName(key));\n\t\t\t}\n\n\t\t\tif (this.settingsTreeModel) {\n\t\t\t\tkeys.forEach(key => this.settingsTreeModel.updateElementsByName(key));\n\t\t\t}\n\n\t\t\tkeys.forEach(key => this.renderTree(key));\n\t\t} else {\n\t\t\treturn this.renderTree();\n\t\t}\n\t}\n\n\tprivate getActiveElementInSettingsTree(): HTMLElement | null {\n\t\treturn (document.activeElement && DOM.isAncestor(document.activeElement, this.settingsTree.getHTMLElement())) ?\n\t\t\t<HTMLElement>document.activeElement :\n\t\t\tnull;\n\t}\n\n\tprivate renderTree(key?: string, force = false): void {\n\t\tif (!force && key && this.scheduledRefreshes.has(key)) {\n\t\t\tthis.updateModifiedLabelForKey(key);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the context view is focused, delay rendering settings\n\t\tif (this.contextViewFocused()) {\n\t\t\tconst element = document.querySelector('.context-view');\n\t\t\tif (element) {\n\t\t\t\tthis.scheduleRefresh(element as HTMLElement, key);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If a setting control is currently focused, schedule a refresh for later\n\t\tconst activeElement = this.getActiveElementInSettingsTree();\n\t\tconst focusedSetting = activeElement && this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n\t\tif (focusedSetting && !force) {\n\t\t\t// If a single setting is being refreshed, it's ok to refresh now if that is not the focused setting\n\t\t\tif (key) {\n\t\t\t\tconst focusedKey = focusedSetting.getAttribute(AbstractSettingRenderer.SETTING_KEY_ATTR);\n\t\t\t\tif (focusedKey === key &&\n\t\t\t\t\t!DOM.hasClass(focusedSetting, 'setting-item-exclude')) { // update `exclude`s live, as they have a separate \"submit edit\" step built in before this\n\n\t\t\t\t\tthis.updateModifiedLabelForKey(key);\n\t\t\t\t\tthis.scheduleRefresh(focusedSetting, key);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.scheduleRefresh(focusedSetting);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.renderResultCountMessages();\n\n\t\tif (key) {\n\t\t\tconst elements = this.currentSettingsModel.getElementsByName(key);\n\t\t\tif (elements && elements.length) {\n\t\t\t\t// TODO https://github.com/Microsoft/vscode/issues/57360\n\t\t\t\tthis.refreshTree();\n\t\t\t} else {\n\t\t\t\t// Refresh requested for a key that we don't know about\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.refreshTree();\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate contextViewFocused(): boolean {\n\t\treturn !!DOM.findParentWithClass(<HTMLElement>document.activeElement, 'context-view');\n\t}\n\n\tprivate refreshTree(): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.settingsTree.setChildren(null, createGroupIterator(this.currentSettingsModel.root));\n\t\t}\n\t}\n\n\tprivate refreshTOCTree(): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.tocTreeModel.update();\n\t\t\tthis.tocTree.setChildren(null, createTOCIterator(this.tocTreeModel, this.tocTree));\n\t\t}\n\t}\n\n\tprivate updateModifiedLabelForKey(key: string): void {\n\t\tconst dataElements = this.currentSettingsModel.getElementsByName(key);\n\t\tconst isModified = dataElements && dataElements[0] && dataElements[0].isConfigured; // all elements are either configured or not\n\t\tconst elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), key);\n\t\tif (elements && elements[0]) {\n\t\t\tDOM.toggleClass(elements[0], 'is-configured', !!isModified);\n\t\t}\n\t}\n\n\tprivate onSearchInputChanged(): void {\n\t\tconst query = this.searchWidget.getValue().trim();\n\t\tthis.delayedFilterLogging.cancel();\n\t\tthis.triggerSearch(query.replace(/›/g, ' ')).then(() => {\n\t\t\tif (query && this.searchResultModel) {\n\t\t\t\tthis.delayedFilterLogging.trigger(() => this.reportFilteringUsed(query, this.searchResultModel!.getUniqueResults()));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate parseSettingFromJSON(query: string): string | null {\n\t\tconst match = query.match(/\"([a-zA-Z.]+)\": /);\n\t\treturn match && match[1];\n\t}\n\n\tprivate triggerSearch(query: string): Promise<void> {\n\t\tthis.viewState.tagFilters = new Set<string>();\n\t\tif (query) {\n\t\t\tconst parsedQuery = parseQuery(query);\n\t\t\tquery = parsedQuery.query;\n\t\t\tparsedQuery.tags.forEach(tag => this.viewState.tagFilters!.add(tag));\n\t\t}\n\n\t\tif (query && query !== '@') {\n\t\t\tquery = this.parseSettingFromJSON(query) || query;\n\t\t\treturn this.triggerFilterPreferences(query);\n\t\t} else {\n\t\t\tif (this.viewState.tagFilters && this.viewState.tagFilters.size) {\n\t\t\t\tthis.searchResultModel = this.createFilterModel();\n\t\t\t} else {\n\t\t\t\tthis.searchResultModel = null;\n\t\t\t}\n\n\t\t\tthis.localSearchDelayer.cancel();\n\t\t\tthis.remoteSearchThrottle.cancel();\n\t\t\tif (this.searchInProgress) {\n\t\t\t\tthis.searchInProgress.cancel();\n\t\t\t\tthis.searchInProgress.dispose();\n\t\t\t\tthis.searchInProgress = null;\n\t\t\t}\n\n\t\t\tthis.viewState.filterToCategory = undefined;\n\t\t\tthis.tocTreeModel.currentSearchModel = this.searchResultModel;\n\t\t\tthis.onSearchModeToggled();\n\n\t\t\tif (this.searchResultModel) {\n\t\t\t\t// Added a filter model\n\t\t\t\tthis.tocTree.setSelection([]);\n\t\t\t\tthis.tocTree.expandAll();\n\t\t\t\tthis.renderResultCountMessages();\n\t\t\t\tthis.refreshTree();\n\t\t\t} else {\n\t\t\t\t// Leaving search mode\n\t\t\t\tthis.tocTree.collapseAll();\n\t\t\t\tthis.renderResultCountMessages();\n\t\t\t\tthis.refreshTree();\n\t\t\t}\n\n\t\t\tthis.refreshTOCTree();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Return a fake SearchResultModel which can hold a flat list of all settings, to be filtered (@modified etc)\n\t */\n\tprivate createFilterModel(): SearchResultModel {\n\t\tconst filterModel = this.instantiationService.createInstance(SearchResultModel, this.viewState);\n\n\t\tconst fullResult: ISearchResult = {\n\t\t\tfilterMatches: []\n\t\t};\n\t\tfor (const g of this.defaultSettingsEditorModel.settingsGroups.slice(1)) {\n\t\t\tfor (const sect of g.sections) {\n\t\t\t\tfor (const setting of sect.settings) {\n\t\t\t\t\tfullResult.filterMatches.push({ setting, matches: [], score: 0 });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfilterModel.setResult(0, fullResult);\n\n\t\treturn filterModel;\n\t}\n\n\tprivate reportFilteringUsed(query: string, results: ISearchResult[]): void {\n\t\tconst nlpResult = results[SearchResultIdx.Remote];\n\t\tconst nlpMetadata = nlpResult && nlpResult.metadata;\n\n\t\tconst durations = {};\n\t\tdurations['nlpResult'] = nlpMetadata && nlpMetadata.duration;\n\n\t\t// Count unique results\n\t\tconst counts = {};\n\t\tconst filterResult = results[SearchResultIdx.Local];\n\t\tif (filterResult) {\n\t\t\tcounts['filterResult'] = filterResult.filterMatches.length;\n\t\t}\n\n\t\tif (nlpResult) {\n\t\t\tcounts['nlpResult'] = nlpResult.filterMatches.length;\n\t\t}\n\n\t\tconst requestCount = nlpMetadata && nlpMetadata.requestCount;\n\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tdurations,\n\t\t\tcounts,\n\t\t\trequestCount\n\t\t};\n\n\t\t/* __GDPR__\n\t\t\t\"settingsEditor.filter\" : {\n\t\t\t\t\"query\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"durations.nlpResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"counts.nlpResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"counts.filterResult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"requestCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('settingsEditor.filter', data);\n\t}\n\n\tprivate triggerFilterPreferences(query: string): Promise<void> {\n\t\tif (this.searchInProgress) {\n\t\t\tthis.searchInProgress.cancel();\n\t\t\tthis.searchInProgress = null;\n\t\t}\n\n\t\t// Trigger the local search. If it didn't find an exact match, trigger the remote search.\n\t\tconst searchInProgress = this.searchInProgress = new CancellationTokenSource();\n\t\treturn this.localSearchDelayer.trigger(() => {\n\t\t\tif (searchInProgress && !searchInProgress.token.isCancellationRequested) {\n\t\t\t\treturn this.localFilterPreferences(query).then(result => {\n\t\t\t\t\tif (result && !result.exactMatch) {\n\t\t\t\t\t\tthis.remoteSearchThrottle.trigger(() => {\n\t\t\t\t\t\t\treturn searchInProgress && !searchInProgress.token.isCancellationRequested ?\n\t\t\t\t\t\t\t\tthis.remoteSearchPreferences(query, this.searchInProgress!.token) :\n\t\t\t\t\t\t\t\tPromise.resolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate localFilterPreferences(query: string, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst localSearchProvider = this.preferencesSearchService.getLocalSearchProvider(query);\n\t\treturn this.filterOrSearchPreferences(query, SearchResultIdx.Local, localSearchProvider, token);\n\t}\n\n\tprivate remoteSearchPreferences(query: string, token?: CancellationToken): Promise<void> {\n\t\tconst remoteSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query);\n\t\tconst newExtSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query, true);\n\n\t\treturn Promise.all([\n\t\t\tthis.filterOrSearchPreferences(query, SearchResultIdx.Remote, remoteSearchProvider, token),\n\t\t\tthis.filterOrSearchPreferences(query, SearchResultIdx.NewExtensions, newExtSearchProvider, token)\n\t\t]).then(() => { });\n\t}\n\n\tprivate filterOrSearchPreferences(query: string, type: SearchResultIdx, searchProvider?: ISearchProvider, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\treturn this._filterOrSearchPreferencesModel(query, this.defaultSettingsEditorModel, searchProvider, token).then(result => {\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t// Handle cancellation like this because cancellation is lost inside the search provider due to async/await\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (!this.searchResultModel) {\n\t\t\t\tthis.searchResultModel = this.instantiationService.createInstance(SearchResultModel, this.viewState);\n\t\t\t\tthis.searchResultModel.setResult(type, result);\n\t\t\t\tthis.tocTreeModel.currentSearchModel = this.searchResultModel;\n\t\t\t\tthis.onSearchModeToggled();\n\t\t\t} else {\n\t\t\t\tthis.searchResultModel.setResult(type, result);\n\t\t\t\tthis.tocTreeModel.update();\n\t\t\t}\n\n\t\t\tthis.tocTree.setSelection([]);\n\t\t\tthis.viewState.filterToCategory = undefined;\n\t\t\tthis.tocTree.expandAll();\n\n\t\t\tthis.renderTree(undefined, true);\n\t\t\tthis.refreshTOCTree();\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tprivate renderResultCountMessages() {\n\t\tif (!this.currentSettingsModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.tocTreeModel && this.tocTreeModel.settingsTreeRoot) {\n\t\t\tconst count = this.tocTreeModel.settingsTreeRoot.count;\n\t\t\tswitch (count) {\n\t\t\t\tcase 0: this.countElement.innerText = localize('noResults', \"No Settings Found\"); break;\n\t\t\t\tcase 1: this.countElement.innerText = localize('oneResult', \"1 Setting Found\"); break;\n\t\t\t\tdefault: this.countElement.innerText = localize('moreThanOneResult', \"{0} Settings Found\", count);\n\t\t\t}\n\n\t\t\tthis.countElement.style.display = 'block';\n\t\t\tDOM.toggleClass(this.rootElement, 'no-results', count === 0);\n\t\t\tthis.clearFilterLinkContainer.style.display = this.viewState.tagFilters && this.viewState.tagFilters.size > 0\n\t\t\t\t? 'initial'\n\t\t\t\t: 'none';\n\t\t}\n\t}\n\n\tprivate _filterOrSearchPreferencesModel(filter: string, model: ISettingsEditorModel, provider?: ISearchProvider, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n\t\treturn searchP\n\t\t\t.then<ISearchResult>(null, err => {\n\t\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t} else {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"settingsEditor.searchError\" : {\n\t\t\t\t\t\t\t\"message\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\"filter\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tconst message = getErrorMessage(err).trim();\n\t\t\t\t\tif (message && message !== 'Error') {\n\t\t\t\t\t\t// \"Error\" = any generic network error\n\t\t\t\t\t\tthis.telemetryService.publicLog('settingsEditor.searchError', { message, filter });\n\t\t\t\t\t\tthis.logService.info('Setting search error: ' + message);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate layoutTrees(dimension: DOM.Dimension): void {\n\t\tconst listHeight = dimension.height - (76 + 11 /* header height + padding*/);\n\t\tconst settingsTreeHeight = listHeight - 14;\n\t\tthis.settingsTreeContainer.style.height = `${settingsTreeHeight}px`;\n\t\tthis.settingsTree.layout(settingsTreeHeight, dimension.width);\n\n\t\tconst tocTreeHeight = listHeight - 16;\n\t\tthis.tocTreeContainer.style.height = `${tocTreeHeight}px`;\n\t\tthis.tocTree.layout(tocTreeHeight);\n\t}\n\n\tprotected saveState(): void {\n\t\tif (this.isVisible()) {\n\t\t\tconst searchQuery = this.searchWidget.getValue().trim();\n\t\t\tconst target = this.settingsTargetsWidget.settingsTarget as SettingsTarget;\n\t\t\tif (this.group && this.input) {\n\t\t\t\tthis.editorMemento.saveEditorState(this.group, this.input, { searchQuery, target });\n\t\t\t}\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n}\n\ninterface ISettingsEditor2State {\n\tsearchQuery: string;\n\ttarget: SettingsTarget;\n}\n"]}]}