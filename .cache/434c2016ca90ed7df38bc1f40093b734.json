{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/insertSnippet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/insertSnippet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar snippets_contribution_1 = require(\"vs/workbench/contrib/snippets/browser/snippets.contribution\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar snippetsFile_1 = require(\"vs/workbench/contrib/snippets/browser/snippetsFile\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar Args = /** @class */ (function () {\n    function Args(snippet, name, langId) {\n        this.snippet = snippet;\n        this.name = name;\n        this.langId = langId;\n    }\n    Args.fromUser = function (arg) {\n        if (!arg || typeof arg !== 'object') {\n            return Args._empty;\n        }\n        var snippet = arg.snippet, name = arg.name, langId = arg.langId;\n        if (typeof snippet !== 'string') {\n            snippet = undefined;\n        }\n        if (typeof name !== 'string') {\n            name = undefined;\n        }\n        if (typeof langId !== 'string') {\n            langId = undefined;\n        }\n        return new Args(snippet, name, langId);\n    };\n    Args._empty = new Args(undefined, undefined, undefined);\n    return Args;\n}());\nvar InsertSnippetAction = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertSnippetAction, _super);\n    function InsertSnippetAction() {\n        return _super.call(this, {\n            id: 'editor.action.insertSnippet',\n            label: nls.localize('snippet.suggestions.label', \"Insert Snippet\"),\n            alias: 'Insert Snippet',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            description: {\n                description: \"Insert Snippet\",\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'snippet': {\n                                    'type': 'string'\n                                },\n                                'langId': {\n                                    'type': 'string',\n                                },\n                                'name': {\n                                    'type': 'string'\n                                }\n                            },\n                        }\n                    }]\n            }\n        }) || this;\n    }\n    InsertSnippetAction.prototype.run = function (accessor, editor, arg) {\n        var _this = this;\n        var modeService = accessor.get(modeService_1.IModeService);\n        var snippetService = accessor.get(snippets_contribution_1.ISnippetsService);\n        if (!editor.hasModel()) {\n            return undefined;\n        }\n        var quickInputService = accessor.get(quickInput_1.IQuickInputService);\n        var _a = editor.getPosition(), lineNumber = _a.lineNumber, column = _a.column;\n        var _b = Args.fromUser(arg), snippet = _b.snippet, name = _b.name, langId = _b.langId;\n        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var languageId, otherLangId, otherLangId, snippets, picks, prevSnippet, _i, snippets_1, snippet_1, pick, label;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (snippet) {\n                            return [2 /*return*/, resolve(new snippetsFile_1.Snippet([], '', '', '', snippet, '', snippetsFile_1.SnippetSource.User))];\n                        }\n                        languageId = modes_1.LanguageId.Null;\n                        if (langId) {\n                            otherLangId = modeService.getLanguageIdentifier(langId);\n                            if (otherLangId) {\n                                languageId = otherLangId.id;\n                            }\n                        }\n                        else {\n                            editor.getModel().tokenizeIfCheap(lineNumber);\n                            languageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n                            otherLangId = modeService.getLanguageIdentifier(languageId);\n                            if (otherLangId && !modeService.getLanguageName(otherLangId.language)) {\n                                languageId = editor.getModel().getLanguageIdentifier().id;\n                            }\n                        }\n                        if (!name) return [3 /*break*/, 2];\n                        return [4 /*yield*/, snippetService.getSnippets(languageId)];\n                    case 1:\n                        // take selected snippet\n                        (_a.sent()).every(function (snippet) {\n                            if (snippet.name !== name) {\n                                return true;\n                            }\n                            resolve(snippet);\n                            return false;\n                        });\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, snippetService.getSnippets(languageId)];\n                    case 3:\n                        snippets = (_a.sent()).sort(snippetsFile_1.Snippet.compare);\n                        picks = [];\n                        prevSnippet = void 0;\n                        for (_i = 0, snippets_1 = snippets; _i < snippets_1.length; _i++) {\n                            snippet_1 = snippets_1[_i];\n                            pick = {\n                                label: snippet_1.prefix,\n                                detail: snippet_1.description,\n                                snippet: snippet_1\n                            };\n                            if (!prevSnippet || prevSnippet.snippetSource !== snippet_1.snippetSource) {\n                                label = '';\n                                switch (snippet_1.snippetSource) {\n                                    case snippetsFile_1.SnippetSource.User:\n                                        label = nls.localize('sep.userSnippet', \"User Snippets\");\n                                        break;\n                                    case snippetsFile_1.SnippetSource.Extension:\n                                        label = nls.localize('sep.extSnippet', \"Extension Snippets\");\n                                        break;\n                                    case snippetsFile_1.SnippetSource.Workspace:\n                                        label = nls.localize('sep.workspaceSnippet', \"Workspace Snippets\");\n                                        break;\n                                }\n                                picks.push({ type: 'separator', label: label });\n                            }\n                            picks.push(pick);\n                            prevSnippet = snippet_1;\n                        }\n                        return [2 /*return*/, quickInputService.pick(picks, { matchOnDetail: true }).then(function (pick) { return resolve(pick && pick.snippet); }, reject)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); }).then(function (snippet) {\n            if (snippet) {\n                snippetController2_1.SnippetController2.get(editor).insert(snippet.codeSnippet, 0, 0);\n            }\n        });\n    };\n    return InsertSnippetAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(InsertSnippetAction);\n// compatibility command to make sure old keybinding are still working\ncommands_1.CommandsRegistry.registerCommand('editor.action.showSnippets', function (accessor) {\n    return accessor.get(commands_1.ICommandService).executeCommand('editor.action.insertSnippet');\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/insertSnippet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/insertSnippet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { registerEditorAction, ServicesAccessor, EditorAction } from 'vs/editor/browser/editorExtensions';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { ICommandService, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IQuickPickItem, IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\n\ninterface ISnippetPick extends IQuickPickItem {\n\tsnippet: Snippet;\n}\n\nclass Args {\n\n\tstatic fromUser(arg: any): Args {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn Args._empty;\n\t\t}\n\t\tlet { snippet, name, langId } = arg;\n\t\tif (typeof snippet !== 'string') {\n\t\t\tsnippet = undefined;\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tname = undefined;\n\t\t}\n\t\tif (typeof langId !== 'string') {\n\t\t\tlangId = undefined;\n\t\t}\n\t\treturn new Args(snippet, name, langId);\n\t}\n\n\tprivate static readonly _empty = new Args(undefined, undefined, undefined);\n\n\tprivate constructor(\n\t\tpublic readonly snippet: string | undefined,\n\t\tpublic readonly name: string | undefined,\n\t\tpublic readonly langId: string | undefined\n\t) { }\n}\n\nclass InsertSnippetAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertSnippet',\n\t\t\tlabel: nls.localize('snippet.suggestions.label', \"Insert Snippet\"),\n\t\t\talias: 'Insert Snippet',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tdescription: {\n\t\t\t\tdescription: `Insert Snippet`,\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'snippet': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'langId': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'name': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor, arg: any): Promise<void> | undefined {\n\t\tconst modeService = accessor.get(IModeService);\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst { lineNumber, column } = editor.getPosition();\n\t\tlet { snippet, name, langId } = Args.fromUser(arg);\n\n\t\treturn new Promise<Snippet>(async (resolve, reject) => {\n\n\t\t\tif (snippet) {\n\t\t\t\treturn resolve(new Snippet(\n\t\t\t\t\t[],\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\tsnippet,\n\t\t\t\t\t'',\n\t\t\t\t\tSnippetSource.User,\n\t\t\t\t));\n\t\t\t}\n\n\t\t\tlet languageId = LanguageId.Null;\n\t\t\tif (langId) {\n\t\t\t\tconst otherLangId = modeService.getLanguageIdentifier(langId);\n\t\t\t\tif (otherLangId) {\n\t\t\t\t\tlanguageId = otherLangId.id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teditor.getModel().tokenizeIfCheap(lineNumber);\n\t\t\t\tlanguageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n\n\t\t\t\t// validate the `languageId` to ensure this is a user\n\t\t\t\t// facing language with a name and the chance to have\n\t\t\t\t// snippets, else fall back to the outer language\n\t\t\t\tconst otherLangId = modeService.getLanguageIdentifier(languageId);\n\t\t\t\tif (otherLangId && !modeService.getLanguageName(otherLangId.language)) {\n\t\t\t\t\tlanguageId = editor.getModel().getLanguageIdentifier().id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\t// take selected snippet\n\t\t\t\t(await snippetService.getSnippets(languageId)).every(snippet => {\n\t\t\t\t\tif (snippet.name !== name) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tresolve(snippet);\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// let user pick a snippet\n\t\t\t\tconst snippets = (await snippetService.getSnippets(languageId)).sort(Snippet.compare);\n\t\t\t\tconst picks: QuickPickInput<ISnippetPick>[] = [];\n\t\t\t\tlet prevSnippet: Snippet | undefined;\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tconst pick: ISnippetPick = {\n\t\t\t\t\t\tlabel: snippet.prefix,\n\t\t\t\t\t\tdetail: snippet.description,\n\t\t\t\t\t\tsnippet\n\t\t\t\t\t};\n\t\t\t\t\tif (!prevSnippet || prevSnippet.snippetSource !== snippet.snippetSource) {\n\t\t\t\t\t\tlet label = '';\n\t\t\t\t\t\tswitch (snippet.snippetSource) {\n\t\t\t\t\t\t\tcase SnippetSource.User:\n\t\t\t\t\t\t\t\tlabel = nls.localize('sep.userSnippet', \"User Snippets\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase SnippetSource.Extension:\n\t\t\t\t\t\t\t\tlabel = nls.localize('sep.extSnippet', \"Extension Snippets\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase SnippetSource.Workspace:\n\t\t\t\t\t\t\t\tlabel = nls.localize('sep.workspaceSnippet', \"Workspace Snippets\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpicks.push({ type: 'separator', label });\n\n\t\t\t\t\t}\n\t\t\t\t\tpicks.push(pick);\n\t\t\t\t\tprevSnippet = snippet;\n\t\t\t\t}\n\t\t\t\treturn quickInputService.pick(picks, { matchOnDetail: true }).then(pick => resolve(pick && pick.snippet), reject);\n\t\t\t}\n\t\t}).then(snippet => {\n\t\t\tif (snippet) {\n\t\t\t\tSnippetController2.get(editor).insert(snippet.codeSnippet, 0, 0);\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterEditorAction(InsertSnippetAction);\n\n// compatibility command to make sure old keybinding are still working\nCommandsRegistry.registerCommand('editor.action.showSnippets', accessor => {\n\treturn accessor.get(ICommandService).executeCommand('editor.action.insertSnippet');\n});\n"]}]}