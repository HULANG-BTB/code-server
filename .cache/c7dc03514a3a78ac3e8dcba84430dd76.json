{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadClipboard.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadClipboard.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar MainThreadCommands = /** @class */ (function () {\n    function MainThreadCommands(_context, _clipboardService) {\n        this._clipboardService = _clipboardService;\n    }\n    MainThreadCommands.prototype.dispose = function () {\n        // nothing\n    };\n    MainThreadCommands.prototype.$readText = function () {\n        return Promise.resolve(this._clipboardService.readText());\n    };\n    MainThreadCommands.prototype.$writeText = function (value) {\n        this._clipboardService.writeText(value);\n        return Promise.resolve();\n    };\n    MainThreadCommands = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadClipboard),\n        tslib_1.__param(1, clipboardService_1.IClipboardService)\n    ], MainThreadCommands);\n    return MainThreadCommands;\n}());\nexports.MainThreadCommands = MainThreadCommands;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadClipboard.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadClipboard.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,6EAAgF;AAChF,+DAAmF;AACnF,kFAAkF;AAGlF;IAEC,4BACC,QAAa,EACuB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IACrE,CAAC;IAEL,oCAAO,GAAP;QACC,UAAU;IACX,CAAC;IAED,sCAAS,GAAT;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,uCAAU,GAAV,UAAW,KAAa;QACvB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACxC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAlBW,kBAAkB;QAD9B,uCAAoB,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAKnD,mBAAA,oCAAiB,CAAA;OAJP,kBAAkB,CAmB9B;IAAD,yBAAC;CAAA,AAnBD,IAmBC;AAnBY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { MainContext, MainThreadClipboardShape } from '../common/extHost.protocol';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\n\n@extHostNamedCustomer(MainContext.MainThreadClipboard)\nexport class MainThreadCommands implements MainThreadClipboardShape {\n\n\tconstructor(\n\t\t_context: any,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t) { }\n\n\tdispose(): void {\n\t\t// nothing\n\t}\n\n\t$readText(): Promise<string> {\n\t\treturn Promise.resolve(this._clipboardService.readText());\n\t}\n\n\t$writeText(value: string): Promise<void> {\n\t\tthis._clipboardService.writeText(value);\n\t\treturn Promise.resolve();\n\t}\n}\n"]}]}