{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/workbench.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/workbench.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"os\", \"@coder/logger\", \"./client\", \"./fill/paths\", \"./fill/paste\", \"vs/workbench/contrib/files/common/explorerModel\", \"vs/workbench/services/editor/common/editorService\", \"vs/platform/notification/common/notification\", \"vs/platform/progress/common/progress\", \"vs/platform/windows/common/windows\", \"vs/platform/log/common/log\", \"vs/platform/contextkey/common/contextkey\", \"vs/base/common/uri\", \"./fill/platform\", \"./fill/dom\", \"./fill/codeEditor\", \"./fill/environmentService\", \"./fill/labels\", \"./fill/menuRegistry\", \"./fill/mouseEvent\", \"./fill/storageDatabase\", \"./fill/vscodeTextmate\", \"./fill/windowsService\", \"./fill/workbenchRegistry\", \"./fill/workspacesService\"], function (require, exports, os, logger_1, client_1, paths, paste_1, explorerModel_1, editorService_1, notification_1, progress_1, windows_1, log_1, contextkey_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Initializes VS Code and provides a way to call into general client\n     * functionality.\n     */\n    class Workbench {\n        constructor() {\n            this.retry = client_1.client.retry;\n            this.windowId = parseInt(new Date().toISOString().replace(/[-:.TZ]/g, \"\"), 10);\n        }\n        /**\n         * Handle a drop event on the file explorer.\n         */\n        handleExternalDrop(target, originalEvent) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield client_1.client.upload.uploadDropped(originalEvent, (target instanceof explorerModel_1.ExplorerItem ? target : target.roots[0]).resource);\n            });\n        }\n        /**\n         * Handle a drop event on the editor.\n         */\n        handleDrop(event, resolveTargetGroup, afterDrop, targetIndex) {\n            client_1.client.upload.uploadDropped(event, uri_1.URI.file(paths.getWorkingDirectory())).then((paths) => __awaiter(this, void 0, void 0, function* () {\n                const uris = paths.map((p) => uri_1.URI.file(p));\n                if (uris.length) {\n                    yield this.serviceCollection.get(windows_1.IWindowsService).addRecentlyOpened(uris);\n                }\n                const editors = uris.map(uri => ({\n                    resource: uri,\n                    options: {\n                        pinned: true,\n                        index: targetIndex,\n                    },\n                }));\n                const targetGroup = resolveTargetGroup();\n                yield this.serviceCollection.get(editorService_1.IEditorService).openEditors(editors, targetGroup);\n                afterDrop(targetGroup);\n            })).catch((error) => {\n                logger_1.logger.error(error.message);\n            });\n        }\n        /**\n         * Use to toggle the paste option inside editors based on the native clipboard.\n         */\n        get clipboardContextKey() {\n            if (!this._clipboardContextKey) {\n                throw new Error(\"Trying to access clipboard context key before it has been set\");\n            }\n            return this._clipboardContextKey;\n        }\n        get clipboardText() {\n            return client_1.client.clipboard.readText();\n        }\n        /**\n         * Create a paste action for use in text inputs.\n         */\n        get pasteAction() {\n            return new paste_1.PasteAction();\n        }\n        set workspace(ws) {\n            if (typeof ws === \"undefined\") {\n                window.localStorage.removeItem(\"workspace\");\n            }\n            else {\n                window.localStorage.setItem(\"workspace\", JSON.stringify(ws));\n            }\n            location.reload();\n        }\n        get workspace() {\n            const ws = window.localStorage.getItem(\"workspace\");\n            try {\n                return JSON.parse(ws);\n            }\n            catch (ex) {\n                return undefined;\n            }\n        }\n        get serviceCollection() {\n            if (!this._serviceCollection) {\n                throw new Error(\"Trying to access service collection before it has been set\");\n            }\n            return this._serviceCollection;\n        }\n        set serviceCollection(collection) {\n            this._serviceCollection = collection;\n            const contextKeys = this.serviceCollection.get(contextkey_1.IContextKeyService);\n            const bounded = this.clipboardContextKey.bindTo(contextKeys);\n            client_1.client.clipboard.onPermissionChange((enabled) => {\n                bounded.set(enabled);\n            });\n            client_1.client.clipboard.initialize();\n            client_1.client.progressService = {\n                start: (title, task, onCancel) => {\n                    let lastProgress = 0;\n                    return this.serviceCollection.get(progress_1.IProgressService2).withProgress({\n                        location: progress_1.ProgressLocation.Notification,\n                        title,\n                        cancellable: true,\n                    }, (progress) => {\n                        return task({\n                            report: (p) => {\n                                progress.report({ increment: p - lastProgress });\n                                lastProgress = p;\n                            },\n                        });\n                    }, () => {\n                        onCancel();\n                    });\n                },\n            };\n            client_1.client.notificationService = {\n                error: (error) => this.serviceCollection.get(notification_1.INotificationService).error(error),\n                prompt: (severity, message, buttons, onCancel) => {\n                    const handle = this.serviceCollection.get(notification_1.INotificationService).prompt(severity, message, buttons, { onCancel });\n                    return {\n                        close: () => handle.close(),\n                        updateMessage: (message) => handle.updateMessage(message),\n                        updateButtons: (buttons) => handle.updateActions({\n                            primary: buttons.map((button) => ({\n                                id: \"\",\n                                label: button.label,\n                                tooltip: \"\",\n                                class: undefined,\n                                enabled: true,\n                                checked: false,\n                                radio: false,\n                                dispose: () => undefined,\n                                run: () => Promise.resolve(button.run()),\n                            })),\n                        }),\n                    };\n                },\n            };\n        }\n        /**\n         * Start VS Code.\n         */\n        initialize() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this._clipboardContextKey = new contextkey_1.RawContextKey(\"nativeClipboard\", client_1.client.clipboard.isEnabled);\n                const workspace = this.workspace || uri_1.URI.file(paths.getWorkingDirectory());\n                // If we try to import this above, workbench will be undefined due to\n                // circular imports.\n                require(\"vs/workbench/workbench.main\");\n                const { main } = require(\"vs/workbench/electron-browser/main\");\n                const config = {\n                    machineId: \"1\",\n                    windowId: this.windowId,\n                    logLevel: log_1.LogLevel.Info,\n                    mainPid: 1,\n                    appRoot: paths.getDefaultUserDataPath(),\n                    execPath: os.tmpdir(),\n                    userEnv: {},\n                    nodeCachedDataDir: os.tmpdir(),\n                    perfEntries: [],\n                    _: [],\n                };\n                if (workspace.configPath) {\n                    // tslint:disable-next-line:no-any\n                    let wid = Object.assign({}, workspace);\n                    if (!uri_1.URI.isUri(wid.configPath)) {\n                        // Ensure that the configPath is a valid URI.\n                        wid.configPath = uri_1.URI.file(wid.configPath);\n                    }\n                    config.workspace = wid;\n                }\n                else {\n                    config.folderUri = workspace;\n                }\n                try {\n                    yield main(config);\n                }\n                catch (ex) {\n                    if (ex.toString().indexOf(\"UriError\") !== -1 || ex.toString().indexOf(\"backupPath\") !== -1) {\n                        /**\n                         * Resolves the error of the workspace identifier being invalid.\n                         */\n                        // tslint:disable-next-line:no-console\n                        console.error(ex);\n                        this.workspace = undefined;\n                        location.reload();\n                        return;\n                    }\n                }\n            });\n        }\n    }\n    exports.Workbench = Workbench;\n    exports.workbench = new Workbench();\n});\n",null]}