{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/quickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/quickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar Filters = require(\"vs/base/common/filters\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar Quickopen = require(\"vs/workbench/browser/quickopen\");\nvar Model = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar taskService_1 = require(\"vs/workbench/contrib/tasks/common/taskService\");\nvar actions_2 = require(\"vs/workbench/browser/actions\");\nvar TaskEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskEntry, _super);\n    function TaskEntry(quickOpenService, taskService, _task, highlights) {\n        if (highlights === void 0) { highlights = []; }\n        var _this = _super.call(this, highlights) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.taskService = taskService;\n        _this._task = _task;\n        return _this;\n    }\n    TaskEntry.prototype.getLabel = function () {\n        return this.task._label;\n    };\n    TaskEntry.prototype.getDescription = function () {\n        if (!this.taskService.needsFolderQualification()) {\n            return null;\n        }\n        var workspaceFolder = this.task.getWorkspaceFolder();\n        if (!workspaceFolder) {\n            return null;\n        }\n        return \"\" + workspaceFolder.name;\n    };\n    TaskEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, tasks\", this.getLabel());\n    };\n    Object.defineProperty(TaskEntry.prototype, \"task\", {\n        get: function () {\n            return this._task;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TaskEntry.prototype.doRun = function (task, options) {\n        this.taskService.run(task, options).then(undefined, function (reason) {\n            // eat the error, it has already been surfaced to the user and we don't care about it here\n        });\n        if (!task.command || (task.command.presentation && task.command.presentation.focus)) {\n            this.quickOpenService.close();\n            return false;\n        }\n        return true;\n    };\n    return TaskEntry;\n}(Model.QuickOpenEntry));\nexports.TaskEntry = TaskEntry;\nvar TaskGroupEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskGroupEntry, _super);\n    function TaskGroupEntry(entry, groupLabel, withBorder) {\n        return _super.call(this, entry, groupLabel, withBorder) || this;\n    }\n    return TaskGroupEntry;\n}(Model.QuickOpenEntryGroup));\nexports.TaskGroupEntry = TaskGroupEntry;\nvar QuickOpenHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenHandler, _super);\n    function QuickOpenHandler(quickOpenService, taskService) {\n        var _this = _super.call(this) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.taskService = taskService;\n        _this.quickOpenService = quickOpenService;\n        _this.taskService = taskService;\n        return _this;\n    }\n    QuickOpenHandler.prototype.onOpen = function () {\n        this.tasks = this.getTasks();\n    };\n    QuickOpenHandler.prototype.onClose = function (canceled) {\n        this.tasks = undefined;\n    };\n    QuickOpenHandler.prototype.getResults = function (input, token) {\n        var _this = this;\n        if (!this.tasks) {\n            return Promise.resolve(null);\n        }\n        return this.tasks.then(function (tasks) {\n            var entries = [];\n            if (tasks.length === 0 || token.isCancellationRequested) {\n                return new Model.QuickOpenModel(entries);\n            }\n            var recentlyUsedTasks = _this.taskService.getRecentlyUsedTasks();\n            var recent = [];\n            var configured = [];\n            var detected = [];\n            var taskMap = Object.create(null);\n            tasks.forEach(function (task) {\n                var key = task.getRecentlyUsedKey();\n                if (key) {\n                    taskMap[key] = task;\n                }\n            });\n            recentlyUsedTasks.keys().forEach(function (key) {\n                var task = taskMap[key];\n                if (task) {\n                    recent.push(task);\n                }\n            });\n            for (var _i = 0, tasks_2 = tasks; _i < tasks_2.length; _i++) {\n                var task = tasks_2[_i];\n                var key = task.getRecentlyUsedKey();\n                if (!key || !recentlyUsedTasks.has(key)) {\n                    if (tasks_1.CustomTask.is(task)) {\n                        configured.push(task);\n                    }\n                    else {\n                        detected.push(task);\n                    }\n                }\n            }\n            var sorter = _this.taskService.createSorter();\n            var hasRecentlyUsed = recent.length > 0;\n            _this.fillEntries(entries, input, recent, nls.localize('recentlyUsed', 'recently used tasks'));\n            configured = configured.sort(function (a, b) { return sorter.compare(a, b); });\n            var hasConfigured = configured.length > 0;\n            _this.fillEntries(entries, input, configured, nls.localize('configured', 'configured tasks'), hasRecentlyUsed);\n            detected = detected.sort(function (a, b) { return sorter.compare(a, b); });\n            _this.fillEntries(entries, input, detected, nls.localize('detected', 'detected tasks'), hasRecentlyUsed || hasConfigured);\n            return new Model.QuickOpenModel(entries, new actions_2.ContributableActionProvider());\n        });\n    };\n    QuickOpenHandler.prototype.fillEntries = function (entries, input, tasks, groupLabel, withBorder) {\n        if (withBorder === void 0) { withBorder = false; }\n        var first = true;\n        for (var _i = 0, tasks_3 = tasks; _i < tasks_3.length; _i++) {\n            var task = tasks_3[_i];\n            var highlights = Filters.matchesFuzzy(input, task._label);\n            if (!highlights) {\n                continue;\n            }\n            if (first) {\n                first = false;\n                entries.push(new TaskGroupEntry(this.createEntry(task, highlights), groupLabel, withBorder));\n            }\n            else {\n                entries.push(this.createEntry(task, highlights));\n            }\n        }\n    };\n    QuickOpenHandler.prototype.getAutoFocus = function (input) {\n        return {\n            autoFocusFirstEntry: !!input\n        };\n    };\n    return QuickOpenHandler;\n}(Quickopen.QuickOpenHandler));\nexports.QuickOpenHandler = QuickOpenHandler;\nvar CustomizeTaskAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomizeTaskAction, _super);\n    function CustomizeTaskAction(taskService, quickOpenService) {\n        var _this = _super.call(this, CustomizeTaskAction.ID, CustomizeTaskAction.LABEL) || this;\n        _this.taskService = taskService;\n        _this.quickOpenService = quickOpenService;\n        _this.updateClass();\n        return _this;\n    }\n    CustomizeTaskAction.prototype.updateClass = function () {\n        this.class = 'quick-open-task-configure';\n    };\n    CustomizeTaskAction.prototype.run = function (element) {\n        var _this = this;\n        var task = this.getTask(element);\n        if (tasks_1.ContributedTask.is(task)) {\n            return this.taskService.customize(task, undefined, true).then(function () {\n                _this.quickOpenService.close();\n            });\n        }\n        else {\n            return this.taskService.openConfig(task).then(function () {\n                _this.quickOpenService.close();\n            });\n        }\n    };\n    CustomizeTaskAction.prototype.getTask = function (element) {\n        if (element instanceof TaskEntry) {\n            return element.task;\n        }\n        else if (element instanceof TaskGroupEntry) {\n            return element.getEntry().task;\n        }\n        return undefined;\n    };\n    CustomizeTaskAction.ID = 'workbench.action.tasks.customizeTask';\n    CustomizeTaskAction.LABEL = nls.localize('customizeTask', \"Configure Task\");\n    return CustomizeTaskAction;\n}(actions_1.Action));\nvar QuickOpenActionContributor = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenActionContributor, _super);\n    function QuickOpenActionContributor(taskService, quickOpenService) {\n        var _this = _super.call(this) || this;\n        _this.action = new CustomizeTaskAction(taskService, quickOpenService);\n        return _this;\n    }\n    QuickOpenActionContributor.prototype.hasActions = function (context) {\n        var task = this.getTask(context);\n        return !!task;\n    };\n    QuickOpenActionContributor.prototype.getActions = function (context) {\n        var actions = [];\n        var task = this.getTask(context);\n        if (task && tasks_1.ContributedTask.is(task) || tasks_1.CustomTask.is(task)) {\n            actions.push(this.action);\n        }\n        return actions;\n    };\n    QuickOpenActionContributor.prototype.getTask = function (context) {\n        if (!context) {\n            return undefined;\n        }\n        var element = context.element;\n        if (element instanceof TaskEntry) {\n            return element.task;\n        }\n        else if (element instanceof TaskGroupEntry) {\n            return element.getEntry().task;\n        }\n        return undefined;\n    };\n    QuickOpenActionContributor = tslib_1.__decorate([\n        tslib_1.__param(0, taskService_1.ITaskService), tslib_1.__param(1, quickOpen_1.IQuickOpenService)\n    ], QuickOpenActionContributor);\n    return QuickOpenActionContributor;\n}(actions_2.ActionBarContributor));\nexports.QuickOpenActionContributor = QuickOpenActionContributor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/quickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/browser/quickOpen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Filters from 'vs/base/common/filters';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { IStringDictionary } from 'vs/base/common/collections';\n\nimport * as Quickopen from 'vs/workbench/browser/quickopen';\nimport * as QuickOpen from 'vs/base/parts/quickopen/common/quickOpen';\nimport * as Model from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\n\nimport { CustomTask, ContributedTask } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService, ProblemMatcherRunOptions } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { ActionBarContributor, ContributableActionProvider } from 'vs/workbench/browser/actions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class TaskEntry extends Model.QuickOpenEntry {\n\n\tconstructor(protected quickOpenService: IQuickOpenService, protected taskService: ITaskService, protected _task: CustomTask | ContributedTask, highlights: Model.IHighlight[] = []) {\n\t\tsuper(highlights);\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.task._label;\n\t}\n\n\tpublic getDescription(): string | null {\n\t\tif (!this.taskService.needsFolderQualification()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet workspaceFolder = this.task.getWorkspaceFolder();\n\t\tif (!workspaceFolder) {\n\t\t\treturn null;\n\t\t}\n\t\treturn `${workspaceFolder.name}`;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, tasks\", this.getLabel());\n\t}\n\n\tpublic get task(): CustomTask | ContributedTask {\n\t\treturn this._task;\n\t}\n\n\tprotected doRun(task: CustomTask | ContributedTask, options?: ProblemMatcherRunOptions): boolean {\n\t\tthis.taskService.run(task, options).then(undefined, reason => {\n\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t});\n\t\tif (!task.command || (task.command.presentation && task.command.presentation.focus)) {\n\t\t\tthis.quickOpenService.close();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class TaskGroupEntry extends Model.QuickOpenEntryGroup {\n\tconstructor(entry: TaskEntry, groupLabel: string, withBorder: boolean) {\n\t\tsuper(entry, groupLabel, withBorder);\n\t}\n}\n\nexport abstract class QuickOpenHandler extends Quickopen.QuickOpenHandler {\n\n\tprivate tasks?: Promise<Array<CustomTask | ContributedTask>>;\n\n\tconstructor(\n\t\tprotected quickOpenService: IQuickOpenService,\n\t\tprotected taskService: ITaskService\n\t) {\n\t\tsuper();\n\n\t\tthis.quickOpenService = quickOpenService;\n\t\tthis.taskService = taskService;\n\t}\n\n\tpublic onOpen(): void {\n\t\tthis.tasks = this.getTasks();\n\t}\n\n\tpublic onClose(canceled: boolean): void {\n\t\tthis.tasks = undefined;\n\t}\n\n\tpublic getResults(input: string, token: CancellationToken): Promise<Model.QuickOpenModel | null> {\n\t\tif (!this.tasks) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\treturn this.tasks.then((tasks) => {\n\t\t\tlet entries: Model.QuickOpenEntry[] = [];\n\t\t\tif (tasks.length === 0 || token.isCancellationRequested) {\n\t\t\t\treturn new Model.QuickOpenModel(entries);\n\t\t\t}\n\t\t\tlet recentlyUsedTasks = this.taskService.getRecentlyUsedTasks();\n\t\t\tlet recent: Array<CustomTask | ContributedTask> = [];\n\t\t\tlet configured: CustomTask[] = [];\n\t\t\tlet detected: ContributedTask[] = [];\n\t\t\tlet taskMap: IStringDictionary<CustomTask | ContributedTask> = Object.create(null);\n\t\t\ttasks.forEach(task => {\n\t\t\t\tlet key = task.getRecentlyUsedKey();\n\t\t\t\tif (key) {\n\t\t\t\t\ttaskMap[key] = task;\n\t\t\t\t}\n\t\t\t});\n\t\t\trecentlyUsedTasks.keys().forEach(key => {\n\t\t\t\tlet task = taskMap[key];\n\t\t\t\tif (task) {\n\t\t\t\t\trecent.push(task);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (let task of tasks) {\n\t\t\t\tlet key = task.getRecentlyUsedKey();\n\t\t\t\tif (!key || !recentlyUsedTasks.has(key)) {\n\t\t\t\t\tif (CustomTask.is(task)) {\n\t\t\t\t\t\tconfigured.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdetected.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst sorter = this.taskService.createSorter();\n\t\t\tlet hasRecentlyUsed: boolean = recent.length > 0;\n\t\t\tthis.fillEntries(entries, input, recent, nls.localize('recentlyUsed', 'recently used tasks'));\n\t\t\tconfigured = configured.sort((a, b) => sorter.compare(a, b));\n\t\t\tlet hasConfigured = configured.length > 0;\n\t\t\tthis.fillEntries(entries, input, configured, nls.localize('configured', 'configured tasks'), hasRecentlyUsed);\n\t\t\tdetected = detected.sort((a, b) => sorter.compare(a, b));\n\t\t\tthis.fillEntries(entries, input, detected, nls.localize('detected', 'detected tasks'), hasRecentlyUsed || hasConfigured);\n\t\t\treturn new Model.QuickOpenModel(entries, new ContributableActionProvider());\n\t\t});\n\t}\n\n\tprivate fillEntries(entries: Model.QuickOpenEntry[], input: string, tasks: Array<CustomTask | ContributedTask>, groupLabel: string, withBorder: boolean = false) {\n\t\tlet first = true;\n\t\tfor (let task of tasks) {\n\t\t\tlet highlights = Filters.matchesFuzzy(input, task._label);\n\t\t\tif (!highlights) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t\tentries.push(new TaskGroupEntry(this.createEntry(task, highlights), groupLabel, withBorder));\n\t\t\t} else {\n\t\t\t\tentries.push(this.createEntry(task, highlights));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract getTasks(): Promise<Array<CustomTask | ContributedTask>>;\n\n\tprotected abstract createEntry(task: CustomTask | ContributedTask, highlights: Model.IHighlight[]): TaskEntry;\n\n\tpublic getAutoFocus(input: string): QuickOpen.IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: !!input\n\t\t};\n\t}\n}\n\nclass CustomizeTaskAction extends Action {\n\n\tprivate static readonly ID = 'workbench.action.tasks.customizeTask';\n\tprivate static readonly LABEL = nls.localize('customizeTask', \"Configure Task\");\n\n\tconstructor(private taskService: ITaskService, private quickOpenService: IQuickOpenService) {\n\t\tsuper(CustomizeTaskAction.ID, CustomizeTaskAction.LABEL);\n\t\tthis.updateClass();\n\t}\n\n\tpublic updateClass(): void {\n\t\tthis.class = 'quick-open-task-configure';\n\t}\n\n\tpublic run(element: any): Promise<any> {\n\t\tlet task = this.getTask(element);\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn this.taskService.customize(task, undefined, true).then(() => {\n\t\t\t\tthis.quickOpenService.close();\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.taskService.openConfig(task).then(() => {\n\t\t\t\tthis.quickOpenService.close();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getTask(element: any): CustomTask | ContributedTask | undefined {\n\t\tif (element instanceof TaskEntry) {\n\t\t\treturn element.task;\n\t\t} else if (element instanceof TaskGroupEntry) {\n\t\t\treturn (element.getEntry() as TaskEntry).task;\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class QuickOpenActionContributor extends ActionBarContributor {\n\n\tprivate action: CustomizeTaskAction;\n\n\tconstructor(@ITaskService taskService: ITaskService, @IQuickOpenService quickOpenService: IQuickOpenService) {\n\t\tsuper();\n\t\tthis.action = new CustomizeTaskAction(taskService, quickOpenService);\n\t}\n\n\tpublic hasActions(context: any): boolean {\n\t\tlet task = this.getTask(context);\n\n\t\treturn !!task;\n\t}\n\n\tpublic getActions(context: any): IAction[] {\n\t\tlet actions: Action[] = [];\n\t\tlet task = this.getTask(context);\n\t\tif (task && ContributedTask.is(task) || CustomTask.is(task)) {\n\t\t\tactions.push(this.action);\n\t\t}\n\t\treturn actions;\n\t}\n\n\tprivate getTask(context: any): CustomTask | ContributedTask | undefined {\n\t\tif (!context) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet element = context.element;\n\t\tif (element instanceof TaskEntry) {\n\t\t\treturn element.task;\n\t\t} else if (element instanceof TaskGroupEntry) {\n\t\t\treturn (element.getEntry() as TaskEntry).task;\n\t\t}\n\t\treturn undefined;\n\t}\n}"]}]}