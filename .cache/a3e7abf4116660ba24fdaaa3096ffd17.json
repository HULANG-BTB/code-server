{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/paging.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/paging.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"vs/base/common/types\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nfunction createPage(elements) {\n    return {\n        isResolved: !!elements,\n        promise: null,\n        cts: null,\n        promiseIndexes: new Set(),\n        elements: elements || []\n    };\n}\nfunction singlePagePager(elements) {\n    return {\n        firstPage: elements,\n        total: elements.length,\n        pageSize: elements.length,\n        getPage: function (pageIndex, cancellationToken) {\n            return Promise.resolve(elements);\n        }\n    };\n}\nexports.singlePagePager = singlePagePager;\nvar PagedModel = /** @class */ (function () {\n    function PagedModel(arg) {\n        this.pages = [];\n        this.pager = types_1.isArray(arg) ? singlePagePager(arg) : arg;\n        var totalPages = Math.ceil(this.pager.total / this.pager.pageSize);\n        this.pages = [\n            createPage(this.pager.firstPage.slice())\n        ].concat(arrays_1.range(totalPages - 1).map(function () { return createPage(); }));\n    }\n    Object.defineProperty(PagedModel.prototype, \"length\", {\n        get: function () { return this.pager.total; },\n        enumerable: true,\n        configurable: true\n    });\n    PagedModel.prototype.isResolved = function (index) {\n        var pageIndex = Math.floor(index / this.pager.pageSize);\n        var page = this.pages[pageIndex];\n        return !!page.isResolved;\n    };\n    PagedModel.prototype.get = function (index) {\n        var pageIndex = Math.floor(index / this.pager.pageSize);\n        var indexInPage = index % this.pager.pageSize;\n        var page = this.pages[pageIndex];\n        return page.elements[indexInPage];\n    };\n    PagedModel.prototype.resolve = function (index, cancellationToken) {\n        if (cancellationToken.isCancellationRequested) {\n            return Promise.reject(errors_1.canceled());\n        }\n        var pageIndex = Math.floor(index / this.pager.pageSize);\n        var indexInPage = index % this.pager.pageSize;\n        var page = this.pages[pageIndex];\n        if (page.isResolved) {\n            return Promise.resolve(page.elements[indexInPage]);\n        }\n        if (!page.promise) {\n            page.cts = new cancellation_1.CancellationTokenSource();\n            page.promise = this.pager.getPage(pageIndex, page.cts.token)\n                .then(function (elements) {\n                page.elements = elements;\n                page.isResolved = true;\n                page.promise = null;\n                page.cts = null;\n            }, function (err) {\n                page.isResolved = false;\n                page.promise = null;\n                page.cts = null;\n                return Promise.reject(err);\n            });\n        }\n        cancellationToken.onCancellationRequested(function () {\n            if (!page.cts) {\n                return;\n            }\n            page.promiseIndexes.delete(index);\n            if (page.promiseIndexes.size === 0) {\n                page.cts.cancel();\n            }\n        });\n        page.promiseIndexes.add(index);\n        return page.promise.then(function () { return page.elements[indexInPage]; });\n    };\n    return PagedModel;\n}());\nexports.PagedModel = PagedModel;\nvar DelayedPagedModel = /** @class */ (function () {\n    function DelayedPagedModel(model, timeout) {\n        if (timeout === void 0) { timeout = 500; }\n        this.model = model;\n        this.timeout = timeout;\n    }\n    Object.defineProperty(DelayedPagedModel.prototype, \"length\", {\n        get: function () { return this.model.length; },\n        enumerable: true,\n        configurable: true\n    });\n    DelayedPagedModel.prototype.isResolved = function (index) {\n        return this.model.isResolved(index);\n    };\n    DelayedPagedModel.prototype.get = function (index) {\n        return this.model.get(index);\n    };\n    DelayedPagedModel.prototype.resolve = function (index, cancellationToken) {\n        var _this = this;\n        return new Promise(function (c, e) {\n            if (cancellationToken.isCancellationRequested) {\n                return e(errors_1.canceled());\n            }\n            var timer = setTimeout(function () {\n                if (cancellationToken.isCancellationRequested) {\n                    return e(errors_1.canceled());\n                }\n                timeoutCancellation.dispose();\n                _this.model.resolve(index, cancellationToken).then(c, e);\n            }, _this.timeout);\n            var timeoutCancellation = cancellationToken.onCancellationRequested(function () {\n                clearTimeout(timer);\n                timeoutCancellation.dispose();\n                e(errors_1.canceled());\n            });\n        });\n    };\n    return DelayedPagedModel;\n}());\nexports.DelayedPagedModel = DelayedPagedModel;\n/**\n * Similar to array.map, `mapPager` lets you map the elements of an\n * abstract paged collection to another type.\n */\nfunction mapPager(pager, fn) {\n    return {\n        firstPage: pager.firstPage.map(fn),\n        total: pager.total,\n        pageSize: pager.pageSize,\n        getPage: function (pageIndex, token) { return pager.getPage(pageIndex, token).then(function (r) { return r.map(fn); }); }\n    };\n}\nexports.mapPager = mapPager;\n/**\n * Merges two pagers.\n */\nfunction mergePagers(one, other) {\n    return {\n        firstPage: one.firstPage.concat(other.firstPage),\n        total: one.total + other.total,\n        pageSize: one.pageSize + other.pageSize,\n        getPage: function (pageIndex, token) {\n            return Promise.all([one.getPage(pageIndex, token), other.getPage(pageIndex, token)])\n                .then(function (_a) {\n                var onePage = _a[0], otherPage = _a[1];\n                return onePage.concat(otherPage);\n            });\n        }\n    };\n}\nexports.mergePagers = mergePagers;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/paging.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/paging.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8CAA+C;AAC/C,4DAAyF;AACzF,gDAAiD;AACjD,gDAA8C;AAoB9C,SAAS,UAAU,CAAI,QAAc;IACpC,OAAO;QACN,UAAU,EAAE,CAAC,CAAC,QAAQ;QACtB,OAAO,EAAE,IAAI;QACb,GAAG,EAAE,IAAI;QACT,cAAc,EAAE,IAAI,GAAG,EAAU;QACjC,QAAQ,EAAE,QAAQ,IAAI,EAAE;KACxB,CAAC;AACH,CAAC;AAYD,SAAgB,eAAe,CAAI,QAAa;IAC/C,OAAO;QACN,SAAS,EAAE,QAAQ;QACnB,KAAK,EAAE,QAAQ,CAAC,MAAM;QACtB,QAAQ,EAAE,QAAQ,CAAC,MAAM;QACzB,OAAO,EAAE,UAAC,SAAiB,EAAE,iBAAoC;YAChE,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;KACD,CAAC;AACH,CAAC;AATD,0CASC;AAED;IAOC,oBAAY,GAAoB;QAJxB,UAAK,GAAe,EAAE,CAAC;QAK9B,IAAI,CAAC,KAAK,GAAG,eAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAE1D,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAErE,IAAI,CAAC,KAAK;YACT,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBACrC,cAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,cAAM,OAAA,UAAU,EAAK,EAAf,CAAe,CAAC,CACnD,CAAC;IACH,CAAC;IAXD,sBAAI,8BAAM;aAAV,cAAuB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAajD,+BAAU,GAAV,UAAW,KAAa;QACvB,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAEnC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IAC1B,CAAC;IAED,wBAAG,GAAH,UAAI,KAAa;QAChB,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAM,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAChD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,4BAAO,GAAP,UAAQ,KAAa,EAAE,iBAAoC;QAC1D,IAAI,iBAAiB,CAAC,uBAAuB,EAAE;YAC9C,OAAO,OAAO,CAAC,MAAM,CAAC,iBAAQ,EAAE,CAAC,CAAC;SAClC;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAM,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAChD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAEnC,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClB,IAAI,CAAC,GAAG,GAAG,IAAI,sCAAuB,EAAE,CAAC;YACzC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;iBAC1D,IAAI,CAAC,UAAA,QAAQ;gBACb,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YACjB,CAAC,EAAE,UAAA,GAAG;gBACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;gBAChB,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;SACJ;QAED,iBAAiB,CAAC,uBAAuB,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACd,OAAO;aACP;YAED,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAElC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;aAClB;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAE/B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAA1B,CAA0B,CAAC,CAAC;IAC5D,CAAC;IACF,iBAAC;AAAD,CAAC,AA9ED,IA8EC;AA9EY,gCAAU;AAgFvB;IAIC,2BAAoB,KAAqB,EAAU,OAAqB;QAArB,wBAAA,EAAA,aAAqB;QAApD,UAAK,GAAL,KAAK,CAAgB;QAAU,YAAO,GAAP,OAAO,CAAc;IAAI,CAAC;IAF7E,sBAAI,qCAAM;aAAV,cAAuB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAIlD,sCAAU,GAAV,UAAW,KAAa;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,+BAAG,GAAH,UAAI,KAAa;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,mCAAO,GAAP,UAAQ,KAAa,EAAE,iBAAoC;QAA3D,iBAqBC;QApBA,OAAO,IAAI,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;YACvB,IAAI,iBAAiB,CAAC,uBAAuB,EAAE;gBAC9C,OAAO,CAAC,CAAC,iBAAQ,EAAE,CAAC,CAAC;aACrB;YAED,IAAM,KAAK,GAAG,UAAU,CAAC;gBACxB,IAAI,iBAAiB,CAAC,uBAAuB,EAAE;oBAC9C,OAAO,CAAC,CAAC,iBAAQ,EAAE,CAAC,CAAC;iBACrB;gBAED,mBAAmB,CAAC,OAAO,EAAE,CAAC;gBAC9B,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACzD,CAAC,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,IAAM,mBAAmB,GAAG,iBAAiB,CAAC,uBAAuB,CAAC;gBACrE,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,mBAAmB,CAAC,OAAO,EAAE,CAAC;gBAC9B,CAAC,CAAC,iBAAQ,EAAE,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,wBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,8CAAiB;AAsC9B;;;GAGG;AACH,SAAgB,QAAQ,CAAO,KAAgB,EAAE,EAAe;IAC/D,OAAO;QACN,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;QAClC,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,OAAO,EAAE,UAAC,SAAS,EAAE,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAT,CAAS,CAAC,EAApD,CAAoD;KACnF,CAAC;AACH,CAAC;AAPD,4BAOC;AAED;;GAEG;AACH,SAAgB,WAAW,CAAI,GAAc,EAAE,KAAgB;IAC9D,OAAO;QACN,SAAS,EAAM,GAAG,CAAC,SAAS,QAAK,KAAK,CAAC,SAAS,CAAC;QACjD,KAAK,EAAE,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK;QAC9B,QAAQ,EAAE,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ;QACvC,OAAO,EAAP,UAAQ,SAAiB,EAAE,KAAK;YAC/B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;iBAClF,IAAI,CAAC,UAAC,EAAoB;oBAAnB,eAAO,EAAE,iBAAS;gBAAM,OAAI,OAAO,QAAK,SAAS;YAAzB,CAA0B,CAAC,CAAC;QAC9D,CAAC;KACD,CAAC;AACH,CAAC;AAVD,kCAUC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isArray } from 'vs/base/common/types';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { range } from 'vs/base/common/arrays';\n\n/**\n * A Pager is a stateless abstraction over a paged collection.\n */\nexport interface IPager<T> {\n\tfirstPage: T[];\n\ttotal: number;\n\tpageSize: number;\n\tgetPage(pageIndex: number, cancellationToken: CancellationToken): Promise<T[]>;\n}\n\ninterface IPage<T> {\n\tisResolved: boolean;\n\tpromise: Promise<void> | null;\n\tcts: CancellationTokenSource | null;\n\tpromiseIndexes: Set<number>;\n\telements: T[];\n}\n\nfunction createPage<T>(elements?: T[]): IPage<T> {\n\treturn {\n\t\tisResolved: !!elements,\n\t\tpromise: null,\n\t\tcts: null,\n\t\tpromiseIndexes: new Set<number>(),\n\t\telements: elements || []\n\t};\n}\n\n/**\n * A PagedModel is a stateful model over an abstracted paged collection.\n */\nexport interface IPagedModel<T> {\n\tlength: number;\n\tisResolved(index: number): boolean;\n\tget(index: number): T;\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T>;\n}\n\nexport function singlePagePager<T>(elements: T[]): IPager<T> {\n\treturn {\n\t\tfirstPage: elements,\n\t\ttotal: elements.length,\n\t\tpageSize: elements.length,\n\t\tgetPage: (pageIndex: number, cancellationToken: CancellationToken): Promise<T[]> => {\n\t\t\treturn Promise.resolve(elements);\n\t\t}\n\t};\n}\n\nexport class PagedModel<T> implements IPagedModel<T> {\n\n\tprivate pager: IPager<T>;\n\tprivate pages: IPage<T>[] = [];\n\n\tget length(): number { return this.pager.total; }\n\n\tconstructor(arg: IPager<T> | T[]) {\n\t\tthis.pager = isArray(arg) ? singlePagePager<T>(arg) : arg;\n\n\t\tconst totalPages = Math.ceil(this.pager.total / this.pager.pageSize);\n\n\t\tthis.pages = [\n\t\t\tcreatePage(this.pager.firstPage.slice()),\n\t\t\t...range(totalPages - 1).map(() => createPage<T>())\n\t\t];\n\t}\n\n\tisResolved(index: number): boolean {\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst page = this.pages[pageIndex];\n\n\t\treturn !!page.isResolved;\n\t}\n\n\tget(index: number): T {\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst indexInPage = index % this.pager.pageSize;\n\t\tconst page = this.pages[pageIndex];\n\n\t\treturn page.elements[indexInPage];\n\t}\n\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T> {\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\treturn Promise.reject(canceled());\n\t\t}\n\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst indexInPage = index % this.pager.pageSize;\n\t\tconst page = this.pages[pageIndex];\n\n\t\tif (page.isResolved) {\n\t\t\treturn Promise.resolve(page.elements[indexInPage]);\n\t\t}\n\n\t\tif (!page.promise) {\n\t\t\tpage.cts = new CancellationTokenSource();\n\t\t\tpage.promise = this.pager.getPage(pageIndex, page.cts.token)\n\t\t\t\t.then(elements => {\n\t\t\t\t\tpage.elements = elements;\n\t\t\t\t\tpage.isResolved = true;\n\t\t\t\t\tpage.promise = null;\n\t\t\t\t\tpage.cts = null;\n\t\t\t\t}, err => {\n\t\t\t\t\tpage.isResolved = false;\n\t\t\t\t\tpage.promise = null;\n\t\t\t\t\tpage.cts = null;\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t}\n\n\t\tcancellationToken.onCancellationRequested(() => {\n\t\t\tif (!page.cts) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpage.promiseIndexes.delete(index);\n\n\t\t\tif (page.promiseIndexes.size === 0) {\n\t\t\t\tpage.cts.cancel();\n\t\t\t}\n\t\t});\n\n\t\tpage.promiseIndexes.add(index);\n\n\t\treturn page.promise.then(() => page.elements[indexInPage]);\n\t}\n}\n\nexport class DelayedPagedModel<T> implements IPagedModel<T> {\n\n\tget length(): number { return this.model.length; }\n\n\tconstructor(private model: IPagedModel<T>, private timeout: number = 500) { }\n\n\tisResolved(index: number): boolean {\n\t\treturn this.model.isResolved(index);\n\t}\n\n\tget(index: number): T {\n\t\treturn this.model.get(index);\n\t}\n\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T> {\n\t\treturn new Promise((c, e) => {\n\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\treturn e(canceled());\n\t\t\t}\n\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\treturn e(canceled());\n\t\t\t\t}\n\n\t\t\t\ttimeoutCancellation.dispose();\n\t\t\t\tthis.model.resolve(index, cancellationToken).then(c, e);\n\t\t\t}, this.timeout);\n\n\t\t\tconst timeoutCancellation = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\ttimeoutCancellation.dispose();\n\t\t\t\te(canceled());\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Similar to array.map, `mapPager` lets you map the elements of an\n * abstract paged collection to another type.\n */\nexport function mapPager<T, R>(pager: IPager<T>, fn: (t: T) => R): IPager<R> {\n\treturn {\n\t\tfirstPage: pager.firstPage.map(fn),\n\t\ttotal: pager.total,\n\t\tpageSize: pager.pageSize,\n\t\tgetPage: (pageIndex, token) => pager.getPage(pageIndex, token).then(r => r.map(fn))\n\t};\n}\n\n/**\n * Merges two pagers.\n */\nexport function mergePagers<T>(one: IPager<T>, other: IPager<T>): IPager<T> {\n\treturn {\n\t\tfirstPage: [...one.firstPage, ...other.firstPage],\n\t\ttotal: one.total + other.total,\n\t\tpageSize: one.pageSize + other.pageSize,\n\t\tgetPage(pageIndex: number, token): Promise<T[]> {\n\t\t\treturn Promise.all([one.getPage(pageIndex, token), other.getPage(pageIndex, token)])\n\t\t\t\t.then(([onePage, otherPage]) => [...onePage, ...otherPage]);\n\t\t}\n\t};\n}"]}]}