{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/viewlet/browser/viewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/viewlet/browser/viewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IViewletService = instantiation_1.createDecorator('viewletService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/viewlet/browser/viewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/viewlet/browser/viewlet.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAoG;AAKvF,QAAA,eAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\n\nexport const IViewletService = createDecorator<IViewletService>('viewletService');\n\nexport interface IViewletService {\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tonDidViewletRegister: Event<ViewletDescriptor>;\n\tonDidViewletDeregister: Event<ViewletDescriptor>;\n\tonDidViewletOpen: Event<IViewlet>;\n\tonDidViewletClose: Event<IViewlet>;\n\n\t/**\n\t * Opens a viewlet with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenViewlet(id: string | undefined, focus?: boolean): Promise<IViewlet | null>;\n\n\t/**\n\t * Returns the current active viewlet or null if none.\n\t */\n\tgetActiveViewlet(): IViewlet | null;\n\n\t/**\n\t * Returns the id of the default viewlet.\n\t */\n\tgetDefaultViewletId(): string;\n\n\t/**\n\t * Returns the viewlet by id.\n\t */\n\tgetViewlet(id: string): ViewletDescriptor | undefined;\n\n\t/**\n\t * Returns all enabled viewlets\n\t */\n\tgetViewlets(): ViewletDescriptor[];\n\n\t/**\n\t * Returns the progress indicator for the side bar.\n\t */\n\tgetProgressIndicator(id: string): IProgressService | null;\n\n\t/**\n\t * Hide the active viewlet.\n\t */\n\thideActiveViewlet(): void;\n\n\t/**\n\t * Return the last active viewlet id.\n\t */\n\tgetLastActiveViewletId(): string;\n}\n"]}]}