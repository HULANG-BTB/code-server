{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/iconv-lite.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/iconv-lite.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nvar tslib_1 = require(\"tslib\");\nvar iconv = require(\"../../node_modules/iconv-lite\");\nvar stream_1 = require(\"stream\");\nvar IconvLiteDecoderStream = /** @class */ (function (_super) {\n    tslib_1.__extends(IconvLiteDecoderStream, _super);\n    function IconvLiteDecoderStream(options) {\n        var _this = _super.call(this, options) || this;\n        // tslint:disable-next-line no-any\n        _this.conv = iconv.getDecoder(options.encoding, undefined);\n        _this.encoding = options.encoding;\n        return _this;\n    }\n    // tslint:disable-next-line no-any\n    IconvLiteDecoderStream.prototype._transform = function (chunk, _encoding, done) {\n        if (!Buffer.isBuffer(chunk)) {\n            return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n        }\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) {\n                this.push(res, this.encoding);\n            }\n            done();\n        }\n        catch (error) {\n            done(error);\n        }\n    };\n    IconvLiteDecoderStream.prototype._flush = function (done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) {\n                this.push(res, this.encoding);\n            }\n            done();\n        }\n        catch (error) {\n            done(error);\n        }\n    };\n    // tslint:disable-next-line no-any\n    IconvLiteDecoderStream.prototype.collect = function (cb) {\n        var res = \"\";\n        this.on(\"error\", cb);\n        this.on(\"data\", function (chunk) { return res += chunk; });\n        this.on(\"end\", function () {\n            cb(null, res);\n        });\n        return this;\n    };\n    return IconvLiteDecoderStream;\n}(stream_1.Transform));\nvar decodeStream = function (encoding) {\n    return new IconvLiteDecoderStream({ encoding: encoding });\n};\nvar target = iconv;\ntarget.decodeStream = decodeStream;\nmodule.exports = target;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/iconv-lite.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/iconv-lite.ts"],"names":[],"mappings":";;AAAA,qDAAuD;AACvD,iCAAsD;AAEtD;IAAqC,kDAAS;IAK7C,gCAAmB,OAA6B;QAAhD,YACC,kBAAM,OAAO,CAAC,SAId;QAHA,kCAAkC;QAClC,KAAI,CAAC,IAAI,GAAI,KAAa,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACnE,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;IAClC,CAAC;IAED,kCAAkC;IAC3B,2CAAU,GAAjB,UAAkB,KAAU,EAAE,SAAiB,EAAE,IAAuB;QACvE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC;SAC5E;QACD,IAAI;YACH,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B;YACD,IAAI,EAAE,CAAC;SACP;QAAC,OAAO,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;SACZ;IACF,CAAC;IAEM,uCAAM,GAAb,UAAc,IAAuB;QACpC,IAAI;YACH,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5B,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B;YACD,IAAI,EAAE,CAAC;SACP;QAAC,OAAO,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;SACZ;IACF,CAAC;IAED,kCAAkC;IAC3B,wCAAO,GAAd,UAAe,EAAiD;QAC/D,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,KAAK,IAAK,OAAA,GAAG,IAAI,KAAK,EAAZ,CAAY,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE;YACd,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACb,CAAC;IACF,6BAAC;AAAD,CAAC,AAnDD,CAAqC,kBAAS,GAmD7C;AAED,IAAM,YAAY,GAAG,UAAC,QAAgB;IACrC,OAAO,IAAI,sBAAsB,CAAC,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,IAAM,MAAM,GAAG,KAAqB,CAAC;AACrC,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;AAEnC,iBAAS,MAAM,CAAC","sourcesContent":["import * as iconv from \"../../node_modules/iconv-lite\";\nimport { Transform, TransformCallback } from \"stream\";\n\nclass IconvLiteDecoderStream extends Transform {\n\t// tslint:disable-next-line no-any\n\tprivate conv: any;\n\tprivate encoding: string;\n\n\tpublic constructor(options: { encoding: string }) {\n\t\tsuper(options);\n\t\t// tslint:disable-next-line no-any\n\t\tthis.conv = (iconv as any).getDecoder(options.encoding, undefined);\n\t\tthis.encoding = options.encoding;\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic _transform(chunk: any, _encoding: string, done: TransformCallback): void {\n\t\tif (!Buffer.isBuffer(chunk)) {\n\t\t\treturn done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n\t\t}\n\t\ttry {\n\t\t\tconst res = this.conv.write(chunk);\n\t\t\tif (res && res.length) {\n\t\t\t\tthis.push(res, this.encoding);\n\t\t\t}\n\t\t\tdone();\n\t\t} catch (error) {\n\t\t\tdone(error);\n\t\t}\n\t}\n\n\tpublic _flush(done: TransformCallback): void {\n\t\ttry {\n\t\t\tconst res = this.conv.end();\n\t\t\tif (res && res.length) {\n\t\t\t\tthis.push(res, this.encoding);\n\t\t\t}\n\t\t\tdone();\n\t\t} catch (error) {\n\t\t\tdone(error);\n\t\t}\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic collect(cb: (error: Error | null, response?: any) => void): this {\n\t\tlet res = \"\";\n\t\tthis.on(\"error\", cb);\n\t\tthis.on(\"data\", (chunk) => res += chunk);\n\t\tthis.on(\"end\", () => {\n\t\t\tcb(null, res);\n\t\t});\n\n\t\treturn this;\n\t}\n}\n\nconst decodeStream = (encoding: string): NodeJS.ReadWriteStream => {\n\treturn new IconvLiteDecoderStream({ encoding });\n};\n\nconst target = iconv as typeof iconv;\ntarget.decodeStream = decodeStream;\n\nexport = target;\n"]}]}