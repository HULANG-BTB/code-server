{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/dnd.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/dnd.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar dom_1 = require(\"vs/base/browser/dom\");\n/**\n * A helper that will execute a provided function when the provided HTMLElement receives\n *  dragover event for 800ms. If the drag is aborted before, the callback will not be triggered.\n */\nvar DelayedDragHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(DelayedDragHandler, _super);\n    function DelayedDragHandler(container, callback) {\n        var _this = _super.call(this) || this;\n        _this._register(dom_1.addDisposableListener(container, 'dragover', function (e) {\n            e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n            if (!_this.timeout) {\n                _this.timeout = setTimeout(function () {\n                    callback();\n                    _this.timeout = null;\n                }, 800);\n            }\n        }));\n        ['dragleave', 'drop', 'dragend'].forEach(function (type) {\n            _this._register(dom_1.addDisposableListener(container, type, function () {\n                _this.clearDragTimeout();\n            }));\n        });\n        return _this;\n    }\n    DelayedDragHandler.prototype.clearDragTimeout = function () {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    };\n    DelayedDragHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.clearDragTimeout();\n    };\n    return DelayedDragHandler;\n}(lifecycle_1.Disposable));\nexports.DelayedDragHandler = DelayedDragHandler;\n// Common data transfers\nexports.DataTransfers = {\n    /**\n     * Application specific resource transfer type\n     */\n    RESOURCES: 'ResourceURLs',\n    /**\n     * Browser specific transfer type to download\n     */\n    DOWNLOAD_URL: 'DownloadURL',\n    /**\n     * Browser specific transfer type for files\n     */\n    FILES: 'Files',\n    /**\n     * Typicaly transfer type for copy/paste transfers.\n     */\n    TEXT: 'text/plain'\n};\nfunction applyDragImage(event, label, clazz) {\n    var dragImage = document.createElement('div');\n    dragImage.className = clazz;\n    dragImage.textContent = label;\n    if (event.dataTransfer) {\n        document.body.appendChild(dragImage);\n        event.dataTransfer.setDragImage(dragImage, -10, -10);\n        // Removes the element when the DND operation is done\n        setTimeout(function () { return document.body.removeChild(dragImage); }, 0);\n    }\n}\nexports.applyDragImage = applyDragImage;\nvar DragAndDropData = /** @class */ (function () {\n    function DragAndDropData(data) {\n        this.data = data;\n    }\n    DragAndDropData.prototype.update = function () {\n        // noop\n    };\n    DragAndDropData.prototype.getData = function () {\n        return this.data;\n    };\n    return DragAndDropData;\n}());\nexports.DragAndDropData = DragAndDropData;\nexports.StaticDND = {\n    CurrentDragAndDropData: undefined\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/dnd.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/dnd.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,sDAAsD;AACtD,2CAA4D;AAE5D;;;GAGG;AACH;IAAwC,8CAAU;IAGjD,4BAAY,SAAsB,EAAE,QAAoB;QAAxD,YACC,iBAAO,SAmBP;QAjBA,KAAI,CAAC,SAAS,CAAC,2BAAqB,CAAC,SAAS,EAAE,UAAU,EAAE,UAAA,CAAC;YAC5D,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,qHAAqH;YAEzI,IAAI,CAAC,KAAI,CAAC,OAAO,EAAE;gBAClB,KAAI,CAAC,OAAO,GAAG,UAAU,CAAC;oBACzB,QAAQ,EAAE,CAAC;oBAEX,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,CAAC,EAAE,GAAG,CAAC,CAAC;aACR;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;YAC5C,KAAI,CAAC,SAAS,CAAC,2BAAqB,CAAC,SAAS,EAAE,IAAwC,EAAE;gBACzF,KAAI,CAAC,gBAAgB,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;;IACJ,CAAC;IAEO,6CAAgB,GAAxB;QACC,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACpB;IACF,CAAC;IAED,oCAAO,GAAP;QACC,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACzB,CAAC;IACF,yBAAC;AAAD,CAAC,AArCD,CAAwC,sBAAU,GAqCjD;AArCY,gDAAkB;AAuC/B,wBAAwB;AACX,QAAA,aAAa,GAAG;IAE5B;;OAEG;IACH,SAAS,EAAE,cAAc;IAEzB;;OAEG;IACH,YAAY,EAAE,aAAa;IAE3B;;OAEG;IACH,KAAK,EAAE,OAAO;IAEd;;OAEG;IACH,IAAI,EAAE,YAAY;CAClB,CAAC;AAEF,SAAgB,cAAc,CAAC,KAAgB,EAAE,KAAoB,EAAE,KAAa;IACnF,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAChD,SAAS,CAAC,SAAS,GAAG,KAAK,CAAC;IAC5B,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;IAE9B,IAAI,KAAK,CAAC,YAAY,EAAE;QACvB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAErD,qDAAqD;QACrD,UAAU,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAApC,CAAoC,EAAE,CAAC,CAAC,CAAC;KAC1D;AACF,CAAC;AAZD,wCAYC;AAOD;IAEC,yBAAoB,IAAO;QAAP,SAAI,GAAJ,IAAI,CAAG;IAAI,CAAC;IAEhC,gCAAM,GAAN;QACC,OAAO;IACR,CAAC;IAED,iCAAO,GAAP;QACC,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IACF,sBAAC;AAAD,CAAC,AAXD,IAWC;AAXY,0CAAe;AAiBf,QAAA,SAAS,GAAe;IACpC,sBAAsB,EAAE,SAAS;CACjC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { addDisposableListener } from 'vs/base/browser/dom';\n\n/**\n * A helper that will execute a provided function when the provided HTMLElement receives\n *  dragover event for 800ms. If the drag is aborted before, the callback will not be triggered.\n */\nexport class DelayedDragHandler extends Disposable {\n\tprivate timeout: any;\n\n\tconstructor(container: HTMLElement, callback: () => void) {\n\t\tsuper();\n\n\t\tthis._register(addDisposableListener(container, 'dragover', e => {\n\t\t\te.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n\t\t\tif (!this.timeout) {\n\t\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\t\tcallback();\n\n\t\t\t\t\tthis.timeout = null;\n\t\t\t\t}, 800);\n\t\t\t}\n\t\t}));\n\n\t\t['dragleave', 'drop', 'dragend'].forEach(type => {\n\t\t\tthis._register(addDisposableListener(container, type as 'dragleave' | 'drop' | 'dragend', () => {\n\t\t\t\tthis.clearDragTimeout();\n\t\t\t}));\n\t\t});\n\t}\n\n\tprivate clearDragTimeout(): void {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.clearDragTimeout();\n\t}\n}\n\n// Common data transfers\nexport const DataTransfers = {\n\n\t/**\n\t * Application specific resource transfer type\n\t */\n\tRESOURCES: 'ResourceURLs',\n\n\t/**\n\t * Browser specific transfer type to download\n\t */\n\tDOWNLOAD_URL: 'DownloadURL',\n\n\t/**\n\t * Browser specific transfer type for files\n\t */\n\tFILES: 'Files',\n\n\t/**\n\t * Typicaly transfer type for copy/paste transfers.\n\t */\n\tTEXT: 'text/plain'\n};\n\nexport function applyDragImage(event: DragEvent, label: string | null, clazz: string): void {\n\tconst dragImage = document.createElement('div');\n\tdragImage.className = clazz;\n\tdragImage.textContent = label;\n\n\tif (event.dataTransfer) {\n\t\tdocument.body.appendChild(dragImage);\n\t\tevent.dataTransfer.setDragImage(dragImage, -10, -10);\n\n\t\t// Removes the element when the DND operation is done\n\t\tsetTimeout(() => document.body.removeChild(dragImage), 0);\n\t}\n}\n\nexport interface IDragAndDropData {\n\tupdate(dataTransfer: DataTransfer): void;\n\tgetData(): any;\n}\n\nexport class DragAndDropData<T> implements IDragAndDropData {\n\n\tconstructor(private data: T) { }\n\n\tupdate(): void {\n\t\t// noop\n\t}\n\n\tgetData(): T {\n\t\treturn this.data;\n\t}\n}\n\nexport interface IStaticDND {\n\tCurrentDragAndDropData: IDragAndDropData | undefined;\n}\n\nexport const StaticDND: IStaticDND = {\n\tCurrentDragAndDropData: undefined\n};"]}]}