{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/commands/replaceCommand\", \"vs/editor/common/controller/cursorCommon\", \"vs/editor/common/controller/cursorEvents\", \"vs/editor/common/controller/cursorWordOperations\", \"vs/editor/common/controller/wordCharacterClassifier\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\", \"vs/editor/common/editorCommon\", \"vs/editor/common/editorContextKeys\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, keyCodes_1, editorExtensions_1, replaceCommand_1, cursorCommon_1, cursorEvents_1, cursorWordOperations_1, wordCharacterClassifier_1, position_1, range_1, selection_1, editorCommon_1, editorContextKeys_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class MoveWordCommand extends editorExtensions_1.EditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n            this._wordNavigationType = opts.wordNavigationType;\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const config = editor.getConfiguration();\n            const wordSeparators = wordCharacterClassifier_1.getMapForWordSeparators(config.wordSeparators);\n            const model = editor.getModel();\n            const selections = editor.getSelections();\n            const result = selections.map((sel) => {\n                const inPosition = new position_1.Position(sel.positionLineNumber, sel.positionColumn);\n                const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n                return this._moveTo(sel, outPosition, this._inSelectionMode);\n            });\n            editor._getCursors().setStates('moveWordCommand', cursorEvents_1.CursorChangeReason.NotSet, result.map(r => cursorCommon_1.CursorState.fromModelSelection(r)));\n            if (result.length === 1) {\n                const pos = new position_1.Position(result[0].positionLineNumber, result[0].positionColumn);\n                editor.revealPosition(pos, editorCommon_1.ScrollType.Smooth);\n            }\n        }\n        _moveTo(from, to, inSelectionMode) {\n            if (inSelectionMode) {\n                // move just position\n                return new selection_1.Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n            }\n            else {\n                // move everything\n                return new selection_1.Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n            }\n        }\n    }\n    exports.MoveWordCommand = MoveWordCommand;\n    class WordLeftCommand extends MoveWordCommand {\n        _move(wordSeparators, model, position, wordNavigationType) {\n            return cursorWordOperations_1.WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n        }\n    }\n    exports.WordLeftCommand = WordLeftCommand;\n    class WordRightCommand extends MoveWordCommand {\n        _move(wordSeparators, model, position, wordNavigationType) {\n            return cursorWordOperations_1.WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n        }\n    }\n    exports.WordRightCommand = WordRightCommand;\n    class CursorWordStartLeft extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordStartLeft',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.LeftArrow,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.LeftArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordStartLeft = CursorWordStartLeft;\n    class CursorWordEndLeft extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordEndLeft',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordEndLeft = CursorWordEndLeft;\n    class CursorWordLeft extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStartFast,\n                id: 'cursorWordLeft',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordLeft = CursorWordLeft;\n    class CursorWordStartLeftSelect extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordStartLeftSelect',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordStartLeftSelect = CursorWordStartLeftSelect;\n    class CursorWordEndLeftSelect extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordEndLeftSelect',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordEndLeftSelect = CursorWordEndLeftSelect;\n    class CursorWordLeftSelect extends WordLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordLeftSelect',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordLeftSelect = CursorWordLeftSelect;\n    class CursorWordStartRight extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordStartRight',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordStartRight = CursorWordStartRight;\n    class CursorWordEndRight extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordEndRight',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.RightArrow,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.RightArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordEndRight = CursorWordEndRight;\n    class CursorWordRight extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordRight',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordRight = CursorWordRight;\n    class CursorWordStartRightSelect extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordStartRightSelect',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordStartRightSelect = CursorWordStartRightSelect;\n    class CursorWordEndRightSelect extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordEndRightSelect',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordEndRightSelect = CursorWordEndRightSelect;\n    class CursorWordRightSelect extends WordRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordRightSelect',\n                precondition: null\n            });\n        }\n    }\n    exports.CursorWordRightSelect = CursorWordRightSelect;\n    class DeleteWordCommand extends editorExtensions_1.EditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._whitespaceHeuristics = opts.whitespaceHeuristics;\n            this._wordNavigationType = opts.wordNavigationType;\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const config = editor.getConfiguration();\n            const wordSeparators = wordCharacterClassifier_1.getMapForWordSeparators(config.wordSeparators);\n            const model = editor.getModel();\n            const selections = editor.getSelections();\n            const commands = selections.map((sel) => {\n                const deleteRange = this._delete(wordSeparators, model, sel, this._whitespaceHeuristics, this._wordNavigationType);\n                return new replaceCommand_1.ReplaceCommand(deleteRange, '');\n            });\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    }\n    exports.DeleteWordCommand = DeleteWordCommand;\n    class DeleteWordLeftCommand extends DeleteWordCommand {\n        _delete(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n            let r = cursorWordOperations_1.WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n            if (r) {\n                return r;\n            }\n            return new range_1.Range(1, 1, 1, 1);\n        }\n    }\n    exports.DeleteWordLeftCommand = DeleteWordLeftCommand;\n    class DeleteWordRightCommand extends DeleteWordCommand {\n        _delete(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n            let r = cursorWordOperations_1.WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n            if (r) {\n                return r;\n            }\n            const lineCount = model.getLineCount();\n            const maxColumn = model.getLineMaxColumn(lineCount);\n            return new range_1.Range(lineCount, maxColumn, lineCount, maxColumn);\n        }\n    }\n    exports.DeleteWordRightCommand = DeleteWordRightCommand;\n    class DeleteWordStartLeft extends DeleteWordLeftCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'deleteWordStartLeft',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    exports.DeleteWordStartLeft = DeleteWordStartLeft;\n    class DeleteWordEndLeft extends DeleteWordLeftCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'deleteWordEndLeft',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    exports.DeleteWordEndLeft = DeleteWordEndLeft;\n    class DeleteWordLeft extends DeleteWordLeftCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'deleteWordLeft',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Backspace },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.DeleteWordLeft = DeleteWordLeft;\n    class DeleteWordStartRight extends DeleteWordRightCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'deleteWordStartRight',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    exports.DeleteWordStartRight = DeleteWordStartRight;\n    class DeleteWordEndRight extends DeleteWordRightCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'deleteWordEndRight',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    exports.DeleteWordEndRight = DeleteWordEndRight;\n    class DeleteWordRight extends DeleteWordRightCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'deleteWordRight',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Delete,\n                    mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Delete },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.DeleteWordRight = DeleteWordRight;\n    editorExtensions_1.registerEditorCommand(new CursorWordStartLeft());\n    editorExtensions_1.registerEditorCommand(new CursorWordEndLeft());\n    editorExtensions_1.registerEditorCommand(new CursorWordLeft());\n    editorExtensions_1.registerEditorCommand(new CursorWordStartLeftSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordEndLeftSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordLeftSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordStartRight());\n    editorExtensions_1.registerEditorCommand(new CursorWordEndRight());\n    editorExtensions_1.registerEditorCommand(new CursorWordRight());\n    editorExtensions_1.registerEditorCommand(new CursorWordStartRightSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordEndRightSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordRightSelect());\n    editorExtensions_1.registerEditorCommand(new DeleteWordStartLeft());\n    editorExtensions_1.registerEditorCommand(new DeleteWordEndLeft());\n    editorExtensions_1.registerEditorCommand(new DeleteWordLeft());\n    editorExtensions_1.registerEditorCommand(new DeleteWordStartRight());\n    editorExtensions_1.registerEditorCommand(new DeleteWordEndRight());\n    editorExtensions_1.registerEditorCommand(new DeleteWordRight());\n});\n",null]}