{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionHostProcessManager.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionHostProcessManager.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors = require(\"vs/base/common/errors\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings = require(\"vs/base/common/strings\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar extensionHostProfiler_1 = require(\"vs/workbench/services/extensions/electron-browser/extensionHostProfiler\");\nvar rpcProtocol_1 = require(\"vs/workbench/services/extensions/node/rpcProtocol\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar stopwatch_1 = require(\"vs/base/common/stopwatch\");\n// Enable to see detailed message communication between window and extension host\nvar LOG_EXTENSION_HOST_COMMUNICATION = false;\nvar LOG_USE_COLORS = true;\nvar NO_OP_VOID_PROMISE = Promise.resolve(undefined);\nvar ExtensionHostProcessManager = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionHostProcessManager, _super);\n    function ExtensionHostProcessManager(extensionHostProcessWorker, _remoteAuthority, initialActivationEvents, _instantiationService, _environmentService) {\n        var _this = _super.call(this) || this;\n        _this._remoteAuthority = _remoteAuthority;\n        _this._instantiationService = _instantiationService;\n        _this._environmentService = _environmentService;\n        _this._onDidChangeResponsiveState = _this._register(new event_1.Emitter());\n        _this.onDidChangeResponsiveState = _this._onDidChangeResponsiveState.event;\n        _this._extensionHostProcessFinishedActivateEvents = Object.create(null);\n        _this._extensionHostProcessRPCProtocol = null;\n        _this._extensionHostProcessCustomers = [];\n        _this._extensionHostProcessWorker = extensionHostProcessWorker;\n        _this.onDidCrash = _this._extensionHostProcessWorker.onCrashed;\n        _this._extensionHostProcessProxy = _this._extensionHostProcessWorker.start().then(function (protocol) {\n            return { value: _this._createExtensionHostCustomers(protocol) };\n        }, function (err) {\n            console.error('Error received from starting extension host');\n            console.error(err);\n            return null;\n        });\n        _this._extensionHostProcessProxy.then(function () {\n            initialActivationEvents.forEach(function (activationEvent) { return _this.activateByEvent(activationEvent); });\n            _this._register(registerLatencyTestProvider({\n                measure: function () { return _this.measure(); }\n            }));\n        });\n        return _this;\n    }\n    ExtensionHostProcessManager.prototype.dispose = function () {\n        if (this._extensionHostProcessWorker) {\n            this._extensionHostProcessWorker.dispose();\n        }\n        if (this._extensionHostProcessRPCProtocol) {\n            this._extensionHostProcessRPCProtocol.dispose();\n        }\n        for (var i = 0, len = this._extensionHostProcessCustomers.length; i < len; i++) {\n            var customer = this._extensionHostProcessCustomers[i];\n            try {\n                customer.dispose();\n            }\n            catch (err) {\n                errors.onUnexpectedError(err);\n            }\n        }\n        this._extensionHostProcessProxy = null;\n        _super.prototype.dispose.call(this);\n    };\n    ExtensionHostProcessManager.prototype.measure = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var proxy, latency, down, up;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getExtensionHostProcessProxy()];\n                    case 1:\n                        proxy = _a.sent();\n                        if (!proxy) {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, this._measureLatency(proxy)];\n                    case 2:\n                        latency = _a.sent();\n                        return [4 /*yield*/, this._measureDown(proxy)];\n                    case 3:\n                        down = _a.sent();\n                        return [4 /*yield*/, this._measureUp(proxy)];\n                    case 4:\n                        up = _a.sent();\n                        return [2 /*return*/, {\n                                remoteAuthority: this._remoteAuthority,\n                                latency: latency,\n                                down: down,\n                                up: up\n                            }];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype._getExtensionHostProcessProxy = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var p;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._extensionHostProcessProxy) {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, this._extensionHostProcessProxy];\n                    case 1:\n                        p = _a.sent();\n                        if (!p) {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, p.value];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype._measureLatency = function (proxy) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var COUNT, sum, i, sw;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        COUNT = 10;\n                        sum = 0;\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < COUNT)) return [3 /*break*/, 4];\n                        sw = stopwatch_1.StopWatch.create(true);\n                        return [4 /*yield*/, proxy.$test_latency(i)];\n                    case 2:\n                        _a.sent();\n                        sw.stop();\n                        sum += sw.elapsed();\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, (sum / COUNT)];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager._convert = function (byteCount, elapsedMillis) {\n        return (byteCount * 1000 * 8) / elapsedMillis;\n    };\n    ExtensionHostProcessManager.prototype._measureUp = function (proxy) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var SIZE, b, sw;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        SIZE = 10 * 1024 * 1024;\n                        b = Buffer.alloc(SIZE, Math.random() % 256);\n                        sw = stopwatch_1.StopWatch.create(true);\n                        return [4 /*yield*/, proxy.$test_up(b)];\n                    case 1:\n                        _a.sent();\n                        sw.stop();\n                        return [2 /*return*/, ExtensionHostProcessManager._convert(SIZE, sw.elapsed())];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype._measureDown = function (proxy) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var SIZE, sw;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        SIZE = 10 * 1024 * 1024;\n                        sw = stopwatch_1.StopWatch.create(true);\n                        return [4 /*yield*/, proxy.$test_down(SIZE)];\n                    case 1:\n                        _a.sent();\n                        sw.stop();\n                        return [2 /*return*/, ExtensionHostProcessManager._convert(SIZE, sw.elapsed())];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype.canProfileExtensionHost = function () {\n        return this._extensionHostProcessWorker && Boolean(this._extensionHostProcessWorker.getInspectPort());\n    };\n    ExtensionHostProcessManager.prototype._createExtensionHostCustomers = function (protocol) {\n        var _this = this;\n        var logger = null;\n        if (LOG_EXTENSION_HOST_COMMUNICATION || this._environmentService.logExtensionHostCommunication) {\n            logger = new RPCLogger();\n        }\n        this._extensionHostProcessRPCProtocol = new rpcProtocol_1.RPCProtocol(protocol, logger);\n        this._register(this._extensionHostProcessRPCProtocol.onDidChangeResponsiveState(function (responsiveState) { return _this._onDidChangeResponsiveState.fire(responsiveState); }));\n        var extHostContext = {\n            remoteAuthority: this._remoteAuthority,\n            getProxy: function (identifier) { return _this._extensionHostProcessRPCProtocol.getProxy(identifier); },\n            set: function (identifier, instance) { return _this._extensionHostProcessRPCProtocol.set(identifier, instance); },\n            assertRegistered: function (identifiers) { return _this._extensionHostProcessRPCProtocol.assertRegistered(identifiers); },\n        };\n        // Named customers\n        var namedCustomers = extHostCustomers_1.ExtHostCustomersRegistry.getNamedCustomers();\n        for (var i = 0, len = namedCustomers.length; i < len; i++) {\n            var _a = namedCustomers[i], id = _a[0], ctor = _a[1];\n            var instance = this._instantiationService.createInstance(ctor, extHostContext);\n            this._extensionHostProcessCustomers.push(instance);\n            this._extensionHostProcessRPCProtocol.set(id, instance);\n        }\n        // Customers\n        var customers = extHostCustomers_1.ExtHostCustomersRegistry.getCustomers();\n        for (var _i = 0, customers_1 = customers; _i < customers_1.length; _i++) {\n            var ctor = customers_1[_i];\n            var instance = this._instantiationService.createInstance(ctor, extHostContext);\n            this._extensionHostProcessCustomers.push(instance);\n        }\n        // Check that no named customers are missing\n        var expected = Object.keys(extHost_protocol_1.MainContext).map(function (key) { return extHost_protocol_1.MainContext[key]; });\n        this._extensionHostProcessRPCProtocol.assertRegistered(expected);\n        return this._extensionHostProcessRPCProtocol.getProxy(extHost_protocol_1.ExtHostContext.ExtHostExtensionService);\n    };\n    ExtensionHostProcessManager.prototype.activate = function (extension, activationEvent) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var proxy;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getExtensionHostProcessProxy()];\n                    case 1:\n                        proxy = _a.sent();\n                        if (!proxy) {\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/, proxy.$activate(extension, activationEvent)];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype.activateByEvent = function (activationEvent) {\n        var _this = this;\n        if (this._extensionHostProcessFinishedActivateEvents[activationEvent] || !this._extensionHostProcessProxy) {\n            return NO_OP_VOID_PROMISE;\n        }\n        return this._extensionHostProcessProxy.then(function (proxy) {\n            if (!proxy) {\n                // this case is already covered above and logged.\n                // i.e. the extension host could not be started\n                return NO_OP_VOID_PROMISE;\n            }\n            return proxy.value.$activateByEvent(activationEvent);\n        }).then(function () {\n            _this._extensionHostProcessFinishedActivateEvents[activationEvent] = true;\n        });\n    };\n    ExtensionHostProcessManager.prototype.startExtensionHostProfile = function () {\n        if (this._extensionHostProcessWorker) {\n            var port = this._extensionHostProcessWorker.getInspectPort();\n            if (port) {\n                return this._instantiationService.createInstance(extensionHostProfiler_1.ExtensionHostProfiler, port).start();\n            }\n        }\n        throw new Error('Extension host not running or no inspect port available');\n    };\n    ExtensionHostProcessManager.prototype.getInspectPort = function () {\n        if (this._extensionHostProcessWorker) {\n            var port = this._extensionHostProcessWorker.getInspectPort();\n            if (port) {\n                return port;\n            }\n        }\n        return 0;\n    };\n    ExtensionHostProcessManager.prototype.resolveAuthority = function (remoteAuthority) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var authorityPlusIndex, pieces, proxy;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        authorityPlusIndex = remoteAuthority.indexOf('+');\n                        if (authorityPlusIndex === -1) {\n                            pieces = remoteAuthority.split(':');\n                            return [2 /*return*/, Promise.resolve({\n                                    authority: remoteAuthority,\n                                    host: pieces[0],\n                                    port: parseInt(pieces[1], 10)\n                                })];\n                        }\n                        return [4 /*yield*/, this._getExtensionHostProcessProxy()];\n                    case 1:\n                        proxy = _a.sent();\n                        if (!proxy) {\n                            throw new Error(\"Cannot resolve authority\");\n                        }\n                        return [2 /*return*/, proxy.$resolveAuthority(remoteAuthority)];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype.start = function (enabledExtensionIds) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var proxy;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getExtensionHostProcessProxy()];\n                    case 1:\n                        proxy = _a.sent();\n                        if (!proxy) {\n                            return [2 /*return*/];\n                        }\n                        return [2 /*return*/, proxy.$startExtensionHost(enabledExtensionIds)];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager.prototype.deltaExtensions = function (toAdd, toRemove) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var proxy;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getExtensionHostProcessProxy()];\n                    case 1:\n                        proxy = _a.sent();\n                        if (!proxy) {\n                            return [2 /*return*/];\n                        }\n                        return [2 /*return*/, proxy.$deltaExtensions(toAdd, toRemove)];\n                }\n            });\n        });\n    };\n    ExtensionHostProcessManager = tslib_1.__decorate([\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, environment_1.IEnvironmentService)\n    ], ExtensionHostProcessManager);\n    return ExtensionHostProcessManager;\n}(lifecycle_1.Disposable));\nexports.ExtensionHostProcessManager = ExtensionHostProcessManager;\nvar colorTables = [\n    ['#2977B1', '#FC802D', '#34A13A', '#D3282F', '#9366BA'],\n    ['#8B564C', '#E177C0', '#7F7F7F', '#BBBE3D', '#2EBECD']\n];\nfunction prettyWithoutArrays(data) {\n    if (Array.isArray(data)) {\n        return data;\n    }\n    if (data && typeof data === 'object' && typeof data.toString === 'function') {\n        var result = data.toString();\n        if (result !== '[object Object]') {\n            return result;\n        }\n    }\n    return data;\n}\nfunction pretty(data) {\n    if (Array.isArray(data)) {\n        return data.map(prettyWithoutArrays);\n    }\n    return prettyWithoutArrays(data);\n}\nvar RPCLogger = /** @class */ (function () {\n    function RPCLogger() {\n        this._totalIncoming = 0;\n        this._totalOutgoing = 0;\n    }\n    RPCLogger.prototype._log = function (direction, totalLength, msgLength, req, initiator, str, data) {\n        data = pretty(data);\n        var colorTable = colorTables[initiator];\n        var color = LOG_USE_COLORS ? colorTable[req % colorTable.length] : '#000000';\n        var args = [\"%c[\" + direction + \"]%c[\" + strings.pad(totalLength, 7, ' ') + \"]%c[len: \" + strings.pad(msgLength, 5, ' ') + \"]%c\" + strings.pad(req, 5, ' ') + \" - \" + str, 'color: darkgreen', 'color: grey', 'color: grey', \"color: \" + color];\n        if (/\\($/.test(str)) {\n            args = args.concat(data);\n            args.push(')');\n        }\n        else {\n            args.push(data);\n        }\n        console.log.apply(console, args);\n    };\n    RPCLogger.prototype.logIncoming = function (msgLength, req, initiator, str, data) {\n        this._totalIncoming += msgLength;\n        this._log('Ext \\u2192 Win', this._totalIncoming, msgLength, req, initiator, str, data);\n    };\n    RPCLogger.prototype.logOutgoing = function (msgLength, req, initiator, str, data) {\n        this._totalOutgoing += msgLength;\n        this._log('Win \\u2192 Ext', this._totalOutgoing, msgLength, req, initiator, str, data);\n    };\n    return RPCLogger;\n}());\nvar providers = [];\nfunction registerLatencyTestProvider(provider) {\n    providers.push(provider);\n    return {\n        dispose: function () {\n            for (var i = 0; i < providers.length; i++) {\n                if (providers[i] === provider) {\n                    providers.splice(i, 1);\n                    return;\n                }\n            }\n        }\n    };\n}\nfunction getLatencyTestProviders() {\n    return providers.slice(0);\n}\nvar MeasureExtHostLatencyAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MeasureExtHostLatencyAction, _super);\n    function MeasureExtHostLatencyAction(id, label, _editorService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._editorService = _editorService;\n        return _this;\n    }\n    MeasureExtHostLatencyAction.prototype.run = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var measurements;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(getLatencyTestProviders().map(function (provider) { return provider.measure(); }))];\n                    case 1:\n                        measurements = _a.sent();\n                        this._editorService.openEditor({ contents: measurements.map(MeasureExtHostLatencyAction._print).join('\\n\\n'), options: { pinned: true } });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MeasureExtHostLatencyAction._print = function (m) {\n        return (m.remoteAuthority ? \"Authority: \" + m.remoteAuthority + \"\\n\" : \"\") + \"Roundtrip latency: \" + m.latency.toFixed(3) + \"ms\\nUp: \" + MeasureExtHostLatencyAction._printSpeed(m.up) + \"\\nDown: \" + MeasureExtHostLatencyAction._printSpeed(m.down) + \"\\n\";\n    };\n    MeasureExtHostLatencyAction._printSpeed = function (n) {\n        if (n <= 1024) {\n            return n + \" bps\";\n        }\n        if (n < 1024 * 1024) {\n            return (n / 1024).toFixed(1) + \" kbps\";\n        }\n        return (n / 1024 / 1024).toFixed(1) + \" Mbps\";\n    };\n    MeasureExtHostLatencyAction.ID = 'editor.action.measureExtHostLatency';\n    MeasureExtHostLatencyAction.LABEL = nls.localize('measureExtHostLatency', \"Measure Extension Host Latency\");\n    MeasureExtHostLatencyAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService)\n    ], MeasureExtHostLatencyAction);\n    return MeasureExtHostLatencyAction;\n}(actions_1.Action));\nexports.MeasureExtHostLatencyAction = MeasureExtHostLatencyAction;\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(MeasureExtHostLatencyAction, MeasureExtHostLatencyAction.ID, MeasureExtHostLatencyAction.LABEL), 'Developer: Measure Extension Host Latency', nls.localize('developer', \"Developer\"));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionHostProcessManager.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionHostProcessManager.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAAgD;AAChD,8CAAsD;AACtD,sDAAmE;AACnE,gDAAkD;AAElD,0EAAiF;AACjF,gFAAuF;AACvF,6EAAoF;AACpF,6EAAsI;AAGtI,iHAAgH;AAEhH,iFAAuI;AAGvI,4BAA8B;AAC9B,kDAAgD;AAChD,8DAA0E;AAC1E,iEAAgE;AAChE,uDAAuG;AACvG,mFAAmF;AAEnF,sDAAqD;AAErD,iFAAiF;AACjF,IAAM,gCAAgC,GAAG,KAAK,CAAC;AAC/C,IAAM,cAAc,GAAG,IAAI,CAAC;AAE5B,IAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAO,SAAS,CAAC,CAAC;AAE5D;IAAiD,uDAAU;IAmB1D,qCACC,0BAAiD,EAChC,gBAAwB,EACzC,uBAAiC,EACO,qBAA4C,EAC9C,mBAAwC;QAL/E,YAOC,iBAAO,SAuBP;QA5BiB,sBAAgB,GAAhB,gBAAgB,CAAQ;QAED,2BAAqB,GAArB,qBAAqB,CAAuB;QAC9C,yBAAmB,GAAnB,mBAAmB,CAAqB;QApB9D,iCAA2B,GAA6B,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAmB,CAAC,CAAC;QACxG,gCAA0B,GAA2B,KAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC;QAsB3G,KAAI,CAAC,2CAA2C,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvE,KAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC;QAC7C,KAAI,CAAC,8BAA8B,GAAG,EAAE,CAAC;QAEzC,KAAI,CAAC,2BAA2B,GAAG,0BAA0B,CAAC;QAC9D,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC;QAC7D,KAAI,CAAC,0BAA0B,GAAG,KAAI,CAAC,2BAA2B,CAAC,KAAK,EAAG,CAAC,IAAI,CAC/E,UAAC,QAAQ;YACR,OAAO,EAAE,KAAK,EAAE,KAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,EAAE,CAAC;QAChE,CAAC,EACD,UAAC,GAAG;YACH,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;YAC7D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,IAAI,CAAC;QACb,CAAC,CACD,CAAC;QACF,KAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACpC,uBAAuB,CAAC,OAAO,CAAC,UAAC,eAAe,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,eAAe,CAAC,EAArC,CAAqC,CAAC,CAAC;YAC5F,KAAI,CAAC,SAAS,CAAC,2BAA2B,CAAC;gBAC1C,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,OAAO,EAAE,EAAd,CAAc;aAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;;IACJ,CAAC;IAEM,6CAAO,GAAd;QACC,IAAI,IAAI,CAAC,2BAA2B,EAAE;YACrC,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,CAAC;SAC3C;QACD,IAAI,IAAI,CAAC,gCAAgC,EAAE;YAC1C,IAAI,CAAC,gCAAgC,CAAC,OAAO,EAAE,CAAC;SAChD;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC/E,IAAM,QAAQ,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI;gBACH,QAAQ,CAAC,OAAO,EAAE,CAAC;aACnB;YAAC,OAAO,GAAG,EAAE;gBACb,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;aAC9B;SACD;QACD,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;QAEvC,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAEa,6CAAO,GAArB;+CAAyB,OAAO;;;;4BACjB,qBAAM,IAAI,CAAC,6BAA6B,EAAE,EAAA;;wBAAlD,KAAK,GAAG,SAA0C;wBACxD,IAAI,CAAC,KAAK,EAAE;4BACX,sBAAO,IAAI,EAAC;yBACZ;wBACe,qBAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAA;;wBAA3C,OAAO,GAAG,SAAiC;wBACpC,qBAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;wBAArC,IAAI,GAAG,SAA8B;wBAChC,qBAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAA;;wBAAjC,EAAE,GAAG,SAA4B;wBACvC,sBAAO;gCACN,eAAe,EAAE,IAAI,CAAC,gBAAgB;gCACtC,OAAO,SAAA;gCACP,IAAI,MAAA;gCACJ,EAAE,IAAA;6BACF,EAAC;;;;KACF;IAEa,mEAA6B,GAA3C;+CAA+C,OAAO;;;;;wBACrD,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;4BACrC,sBAAO,IAAI,EAAC;yBACZ;wBACS,qBAAM,IAAI,CAAC,0BAA0B,EAAA;;wBAAzC,CAAC,GAAG,SAAqC;wBAC/C,IAAI,CAAC,CAAC,EAAE;4BACP,sBAAO,IAAI,EAAC;yBACZ;wBACD,sBAAO,CAAC,CAAC,KAAK,EAAC;;;;KACf;IAEa,qDAAe,GAA7B,UAA8B,KAAmC;+CAAG,OAAO;;;;;wBACpE,KAAK,GAAG,EAAE,CAAC;wBAEb,GAAG,GAAG,CAAC,CAAC;wBACH,CAAC,GAAG,CAAC;;;6BAAE,CAAA,CAAC,GAAG,KAAK,CAAA;wBAClB,EAAE,GAAG,qBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClC,qBAAM,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,EAAE,CAAC,IAAI,EAAE,CAAC;wBACV,GAAG,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;;wBAJM,CAAC,EAAE,CAAA;;4BAM9B,sBAAO,CAAC,GAAG,GAAG,KAAK,CAAC,EAAC;;;;KACrB;IAEc,oCAAQ,GAAvB,UAAwB,SAAiB,EAAE,aAAqB;QAC/D,OAAO,CAAC,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;IAC/C,CAAC;IAEa,gDAAU,GAAxB,UAAyB,KAAmC;+CAAG,OAAO;;;;;wBAC/D,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;wBAE1B,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;wBAC1C,EAAE,GAAG,qBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClC,qBAAM,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAA;;wBAAvB,SAAuB,CAAC;wBACxB,EAAE,CAAC,IAAI,EAAE,CAAC;wBACV,sBAAO,2BAA2B,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,EAAC;;;;KAChE;IAEa,kDAAY,GAA1B,UAA2B,KAAmC;+CAAG,OAAO;;;;;wBACjE,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;wBAExB,EAAE,GAAG,qBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClC,qBAAM,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,EAAE,CAAC,IAAI,EAAE,CAAC;wBACV,sBAAO,2BAA2B,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,EAAC;;;;KAChE;IAEM,6DAAuB,GAA9B;QACC,OAAO,IAAI,CAAC,2BAA2B,IAAI,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,cAAc,EAAE,CAAC,CAAC;IACvG,CAAC;IAEO,mEAA6B,GAArC,UAAsC,QAAiC;QAAvE,iBAqCC;QAnCA,IAAI,MAAM,GAA8B,IAAI,CAAC;QAC7C,IAAI,gCAAgC,IAAI,IAAI,CAAC,mBAAmB,CAAC,6BAA6B,EAAE;YAC/F,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,gCAAgC,GAAG,IAAI,yBAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC1E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gCAAgC,CAAC,0BAA0B,CAAC,UAAC,eAAgC,IAAK,OAAA,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,eAAe,CAAC,EAAtD,CAAsD,CAAC,CAAC,CAAC;QAC/K,IAAM,cAAc,GAAoB;YACvC,eAAe,EAAE,IAAI,CAAC,gBAAgB;YACtC,QAAQ,EAAE,UAAI,UAA8B,IAAQ,OAAA,KAAI,CAAC,gCAAiC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAA3D,CAA2D;YAC/G,GAAG,EAAE,UAAiB,UAA8B,EAAE,QAAW,IAAQ,OAAA,KAAI,CAAC,gCAAiC,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAhE,CAAgE;YACzI,gBAAgB,EAAE,UAAC,WAAmC,IAAW,OAAA,KAAI,CAAC,gCAAiC,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAApE,CAAoE;SACrI,CAAC;QAEF,kBAAkB;QAClB,IAAM,cAAc,GAAG,2CAAwB,CAAC,iBAAiB,EAAE,CAAC;QACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACpD,IAAA,sBAA8B,EAA7B,UAAE,EAAE,YAAyB,CAAC;YACrC,IAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YACjF,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;SACxD;QAED,YAAY;QACZ,IAAM,SAAS,GAAG,2CAAwB,CAAC,YAAY,EAAE,CAAC;QAC1D,KAAmB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;YAAzB,IAAM,IAAI,kBAAA;YACd,IAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YACjF,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnD;QAED,4CAA4C;QAC5C,IAAM,QAAQ,GAA2B,MAAM,CAAC,IAAI,CAAC,8BAAW,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAM,8BAAY,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAC;QACxG,IAAI,CAAC,gCAAgC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAEjE,OAAO,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,iCAAc,CAAC,uBAAuB,CAAC,CAAC;IAC/F,CAAC;IAEY,8CAAQ,GAArB,UAAsB,SAA8B,EAAE,eAAuB;+CAAG,OAAO;;;;4BACxE,qBAAM,IAAI,CAAC,6BAA6B,EAAE,EAAA;;wBAAlD,KAAK,GAAG,SAA0C;wBACxD,IAAI,CAAC,KAAK,EAAE;4BACX,sBAAO,KAAK,EAAC;yBACb;wBACD,sBAAO,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,eAAe,CAAC,EAAC;;;;KACnD;IAEM,qDAAe,GAAtB,UAAuB,eAAuB;QAA9C,iBAcC;QAbA,IAAI,IAAI,CAAC,2CAA2C,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;YAC1G,OAAO,kBAAkB,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAC,KAAK;YACjD,IAAI,CAAC,KAAK,EAAE;gBACX,iDAAiD;gBACjD,+CAA+C;gBAC/C,OAAO,kBAAkB,CAAC;aAC1B;YACD,OAAO,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC,IAAI,CAAC;YACP,KAAI,CAAC,2CAA2C,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;QAC1E,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,+DAAyB,GAAhC;QACC,IAAI,IAAI,CAAC,2BAA2B,EAAE;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,cAAc,EAAE,CAAC;YAC7D,IAAI,IAAI,EAAE;gBACT,OAAO,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,6CAAqB,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;aACtF;SACD;QACD,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC5E,CAAC;IAEM,oDAAc,GAArB;QACC,IAAI,IAAI,CAAC,2BAA2B,EAAE;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,cAAc,EAAE,CAAC;YAC7D,IAAI,IAAI,EAAE;gBACT,OAAO,IAAI,CAAC;aACZ;SACD;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAEY,sDAAgB,GAA7B,UAA8B,eAAuB;+CAAG,OAAO;;;;;wBACxD,kBAAkB,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACxD,IAAI,kBAAkB,KAAK,CAAC,CAAC,EAAE;4BAExB,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAC1C,sBAAO,OAAO,CAAC,OAAO,CAAC;oCACtB,SAAS,EAAE,eAAe;oCAC1B,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;oCACf,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;iCAC7B,CAAC,EAAC;yBACH;wBACa,qBAAM,IAAI,CAAC,6BAA6B,EAAE,EAAA;;wBAAlD,KAAK,GAAG,SAA0C;wBACxD,IAAI,CAAC,KAAK,EAAE;4BACX,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;yBAC5C;wBACD,sBAAO,KAAK,CAAC,iBAAiB,CAAC,eAAe,CAAC,EAAC;;;;KAChD;IAEY,2CAAK,GAAlB,UAAmB,mBAA0C;+CAAG,OAAO;;;;4BACxD,qBAAM,IAAI,CAAC,6BAA6B,EAAE,EAAA;;wBAAlD,KAAK,GAAG,SAA0C;wBACxD,IAAI,CAAC,KAAK,EAAE;4BACX,sBAAO;yBACP;wBACD,sBAAO,KAAK,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,EAAC;;;;KACtD;IAEY,qDAAe,GAA5B,UAA6B,KAA8B,EAAE,QAA+B;+CAAG,OAAO;;;;4BACvF,qBAAM,IAAI,CAAC,6BAA6B,EAAE,EAAA;;wBAAlD,KAAK,GAAG,SAA0C;wBACxD,IAAI,CAAC,KAAK,EAAE;4BACX,sBAAO;yBACP;wBACD,sBAAO,KAAK,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAC;;;;KAC/C;IA7PW,2BAA2B;QAuBrC,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,iCAAmB,CAAA;OAxBT,2BAA2B,CA8PvC;IAAD,kCAAC;CAAA,AA9PD,CAAiD,sBAAU,GA8P1D;AA9PY,kEAA2B;AAgQxC,IAAM,WAAW,GAAG;IACnB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACvD,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;CACvD,CAAC;AAEF,SAAS,mBAAmB,CAAC,IAAS;IACrC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC;KACZ;IACD,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,UAAU,EAAE;QAC5E,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,MAAM,KAAK,iBAAiB,EAAE;YACjC,OAAO,MAAM,CAAC;SACd;KACD;IACD,OAAO,IAAI,CAAC;AACb,CAAC;AAED,SAAS,MAAM,CAAC,IAAS;IACxB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;KACrC;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED;IAAA;QAES,mBAAc,GAAG,CAAC,CAAC;QACnB,mBAAc,GAAG,CAAC,CAAC;IA0B5B,CAAC;IAxBQ,wBAAI,GAAZ,UAAa,SAAiB,EAAE,WAAmB,EAAE,SAAiB,EAAE,GAAW,EAAE,SAA2B,EAAE,GAAW,EAAE,IAAS;QACvI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAEpB,IAAM,UAAU,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/E,IAAI,IAAI,GAAG,CAAC,QAAM,SAAS,YAAO,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,EAAE,GAAG,CAAC,iBAAY,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,WAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,WAAM,GAAK,EAAE,kBAAkB,EAAE,aAAa,EAAE,aAAa,EAAE,YAAU,KAAO,CAAC,CAAC;QAC5N,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACpB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACf;aAAM;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;QACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAA6B,CAAC,CAAC;IAC3D,CAAC;IAED,+BAAW,GAAX,UAAY,SAAiB,EAAE,GAAW,EAAE,SAA2B,EAAE,GAAW,EAAE,IAAU;QAC/F,IAAI,CAAC,cAAc,IAAI,SAAS,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACxF,CAAC;IAED,+BAAW,GAAX,UAAY,SAAiB,EAAE,GAAW,EAAE,SAA2B,EAAE,GAAW,EAAE,IAAU;QAC/F,IAAI,CAAC,cAAc,IAAI,SAAS,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACxF,CAAC;IACF,gBAAC;AAAD,CAAC,AA7BD,IA6BC;AAaD,IAAI,SAAS,GAA6B,EAAE,CAAC;AAC7C,SAAS,2BAA2B,CAAC,QAAgC;IACpE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzB,OAAO;QACN,OAAO,EAAE;YACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;oBAC9B,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACvB,OAAO;iBACP;aACD;QACF,CAAC;KACD,CAAC;AACH,CAAC;AAED,SAAS,uBAAuB;IAC/B,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC;AAED;IAAiD,uDAAM;IAItD,qCACC,EAAU,EACV,KAAa,EACoB,cAA8B;QAHhE,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHiC,oBAAc,GAAd,cAAc,CAAgB;;IAGhE,CAAC;IAEY,yCAAG,GAAhB;+CAAoB,OAAO;;;;4BACL,qBAAM,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,OAAO,EAAE,EAAlB,CAAkB,CAAC,CAAC,EAAA;;wBAA/F,YAAY,GAAG,SAAgF;wBACrG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAA4B,CAAC,CAAC;;;;;KACrK;IAEc,kCAAM,GAArB,UAAsB,CAAuB;QAC5C,OAAO,CAAG,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,gBAAc,CAAC,CAAC,eAAe,OAAI,CAAC,CAAC,CAAC,EAAE,4BAAsB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAW,2BAA2B,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAW,2BAA2B,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAI,CAAC;IACxO,CAAC;IAEc,uCAAW,GAA1B,UAA2B,CAAS;QACnC,IAAI,CAAC,IAAI,IAAI,EAAE;YACd,OAAU,CAAC,SAAM,CAAC;SAClB;QACD,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE;YACpB,OAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAO,CAAC;SACvC;QACD,OAAU,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAO,CAAC;IAC/C,CAAC;IA5BsB,8BAAE,GAAG,qCAAqC,CAAC;IAC3C,iCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,gCAAgC,CAAC,CAAC;IAF3F,2BAA2B;QAOrC,mBAAA,8BAAc,CAAA;OAPJ,2BAA2B,CA8BvC;IAAD,kCAAC;CAAA,AA9BD,CAAiD,gBAAM,GA8BtD;AA9BY,kEAA2B;AAgCxC,IAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC1F,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,2BAA2B,EAAE,2BAA2B,CAAC,EAAE,EAAE,2BAA2B,CAAC,KAAK,CAAC,EAAE,2CAA2C,EAAE,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as errors from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ExtHostCustomersRegistry } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, ExtHostExtensionServiceShape, IExtHostContext, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ProfileSession } from 'vs/workbench/services/extensions/common/extensions';\nimport { IExtensionHostStarter } from 'vs/workbench/services/extensions/electron-browser/extensionHost';\nimport { ExtensionHostProfiler } from 'vs/workbench/services/extensions/electron-browser/extensionHostProfiler';\nimport { ProxyIdentifier } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { IRPCProtocolLogger, RPCProtocol, RequestInitiator, ResponsiveState } from 'vs/workbench/services/extensions/node/rpcProtocol';\nimport { ResolvedAuthority } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IUntitledResourceInput } from 'vs/workbench/common/editor';\nimport { StopWatch } from 'vs/base/common/stopwatch';\n\n// Enable to see detailed message communication between window and extension host\nconst LOG_EXTENSION_HOST_COMMUNICATION = false;\nconst LOG_USE_COLORS = true;\n\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nexport class ExtensionHostProcessManager extends Disposable {\n\n\tpublic readonly onDidCrash: Event<[number, string | null]>;\n\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> = this._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> = this._onDidChangeResponsiveState.event;\n\n\t/**\n\t * A map of already activated events to speed things up if the same activation event is triggered multiple times.\n\t */\n\tprivate readonly _extensionHostProcessFinishedActivateEvents: { [activationEvent: string]: boolean; };\n\tprivate _extensionHostProcessRPCProtocol: RPCProtocol | null;\n\tprivate readonly _extensionHostProcessCustomers: IDisposable[];\n\tprivate readonly _extensionHostProcessWorker: IExtensionHostStarter;\n\t/**\n\t * winjs believes a proxy is a promise because it has a `then` method, so wrap the result in an object.\n\t */\n\tprivate _extensionHostProcessProxy: Promise<{ value: ExtHostExtensionServiceShape; } | null> | null;\n\n\tconstructor(\n\t\textensionHostProcessWorker: IExtensionHostStarter,\n\t\tprivate readonly _remoteAuthority: string,\n\t\tinitialActivationEvents: string[],\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis._extensionHostProcessFinishedActivateEvents = Object.create(null);\n\t\tthis._extensionHostProcessRPCProtocol = null;\n\t\tthis._extensionHostProcessCustomers = [];\n\n\t\tthis._extensionHostProcessWorker = extensionHostProcessWorker;\n\t\tthis.onDidCrash = this._extensionHostProcessWorker.onCrashed;\n\t\tthis._extensionHostProcessProxy = this._extensionHostProcessWorker.start()!.then(\n\t\t\t(protocol) => {\n\t\t\t\treturn { value: this._createExtensionHostCustomers(protocol) };\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tconsole.error('Error received from starting extension host');\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t);\n\t\tthis._extensionHostProcessProxy.then(() => {\n\t\t\tinitialActivationEvents.forEach((activationEvent) => this.activateByEvent(activationEvent));\n\t\t\tthis._register(registerLatencyTestProvider({\n\t\t\t\tmeasure: () => this.measure()\n\t\t\t}));\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._extensionHostProcessWorker) {\n\t\t\tthis._extensionHostProcessWorker.dispose();\n\t\t}\n\t\tif (this._extensionHostProcessRPCProtocol) {\n\t\t\tthis._extensionHostProcessRPCProtocol.dispose();\n\t\t}\n\t\tfor (let i = 0, len = this._extensionHostProcessCustomers.length; i < len; i++) {\n\t\t\tconst customer = this._extensionHostProcessCustomers[i];\n\t\t\ttry {\n\t\t\t\tcustomer.dispose();\n\t\t\t} catch (err) {\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t\tthis._extensionHostProcessProxy = null;\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate async measure(): Promise<ExtHostLatencyResult | null> {\n\t\tconst proxy = await this._getExtensionHostProcessProxy();\n\t\tif (!proxy) {\n\t\t\treturn null;\n\t\t}\n\t\tconst latency = await this._measureLatency(proxy);\n\t\tconst down = await this._measureDown(proxy);\n\t\tconst up = await this._measureUp(proxy);\n\t\treturn {\n\t\t\tremoteAuthority: this._remoteAuthority,\n\t\t\tlatency,\n\t\t\tdown,\n\t\t\tup\n\t\t};\n\t}\n\n\tprivate async _getExtensionHostProcessProxy(): Promise<ExtHostExtensionServiceShape | null> {\n\t\tif (!this._extensionHostProcessProxy) {\n\t\t\treturn null;\n\t\t}\n\t\tconst p = await this._extensionHostProcessProxy;\n\t\tif (!p) {\n\t\t\treturn null;\n\t\t}\n\t\treturn p.value;\n\t}\n\n\tprivate async _measureLatency(proxy: ExtHostExtensionServiceShape): Promise<number> {\n\t\tconst COUNT = 10;\n\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < COUNT; i++) {\n\t\t\tconst sw = StopWatch.create(true);\n\t\t\tawait proxy.$test_latency(i);\n\t\t\tsw.stop();\n\t\t\tsum += sw.elapsed();\n\t\t}\n\t\treturn (sum / COUNT);\n\t}\n\n\tprivate static _convert(byteCount: number, elapsedMillis: number): number {\n\t\treturn (byteCount * 1000 * 8) / elapsedMillis;\n\t}\n\n\tprivate async _measureUp(proxy: ExtHostExtensionServiceShape): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tlet b = Buffer.alloc(SIZE, Math.random() % 256);\n\t\tconst sw = StopWatch.create(true);\n\t\tawait proxy.$test_up(b);\n\t\tsw.stop();\n\t\treturn ExtensionHostProcessManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tprivate async _measureDown(proxy: ExtHostExtensionServiceShape): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tconst sw = StopWatch.create(true);\n\t\tawait proxy.$test_down(SIZE);\n\t\tsw.stop();\n\t\treturn ExtensionHostProcessManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tpublic canProfileExtensionHost(): boolean {\n\t\treturn this._extensionHostProcessWorker && Boolean(this._extensionHostProcessWorker.getInspectPort());\n\t}\n\n\tprivate _createExtensionHostCustomers(protocol: IMessagePassingProtocol): ExtHostExtensionServiceShape {\n\n\t\tlet logger: IRPCProtocolLogger | null = null;\n\t\tif (LOG_EXTENSION_HOST_COMMUNICATION || this._environmentService.logExtensionHostCommunication) {\n\t\t\tlogger = new RPCLogger();\n\t\t}\n\n\t\tthis._extensionHostProcessRPCProtocol = new RPCProtocol(protocol, logger);\n\t\tthis._register(this._extensionHostProcessRPCProtocol.onDidChangeResponsiveState((responsiveState: ResponsiveState) => this._onDidChangeResponsiveState.fire(responsiveState)));\n\t\tconst extHostContext: IExtHostContext = {\n\t\t\tremoteAuthority: this._remoteAuthority,\n\t\t\tgetProxy: <T>(identifier: ProxyIdentifier<T>): T => this._extensionHostProcessRPCProtocol!.getProxy(identifier),\n\t\t\tset: <T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R => this._extensionHostProcessRPCProtocol!.set(identifier, instance),\n\t\t\tassertRegistered: (identifiers: ProxyIdentifier<any>[]): void => this._extensionHostProcessRPCProtocol!.assertRegistered(identifiers),\n\t\t};\n\n\t\t// Named customers\n\t\tconst namedCustomers = ExtHostCustomersRegistry.getNamedCustomers();\n\t\tfor (let i = 0, len = namedCustomers.length; i < len; i++) {\n\t\t\tconst [id, ctor] = namedCustomers[i];\n\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\tthis._extensionHostProcessCustomers.push(instance);\n\t\t\tthis._extensionHostProcessRPCProtocol.set(id, instance);\n\t\t}\n\n\t\t// Customers\n\t\tconst customers = ExtHostCustomersRegistry.getCustomers();\n\t\tfor (const ctor of customers) {\n\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\tthis._extensionHostProcessCustomers.push(instance);\n\t\t}\n\n\t\t// Check that no named customers are missing\n\t\tconst expected: ProxyIdentifier<any>[] = Object.keys(MainContext).map((key) => (<any>MainContext)[key]);\n\t\tthis._extensionHostProcessRPCProtocol.assertRegistered(expected);\n\n\t\treturn this._extensionHostProcessRPCProtocol.getProxy(ExtHostContext.ExtHostExtensionService);\n\t}\n\n\tpublic async activate(extension: ExtensionIdentifier, activationEvent: string): Promise<boolean> {\n\t\tconst proxy = await this._getExtensionHostProcessProxy();\n\t\tif (!proxy) {\n\t\t\treturn false;\n\t\t}\n\t\treturn proxy.$activate(extension, activationEvent);\n\t}\n\n\tpublic activateByEvent(activationEvent: string): Promise<void> {\n\t\tif (this._extensionHostProcessFinishedActivateEvents[activationEvent] || !this._extensionHostProcessProxy) {\n\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t}\n\t\treturn this._extensionHostProcessProxy.then((proxy) => {\n\t\t\tif (!proxy) {\n\t\t\t\t// this case is already covered above and logged.\n\t\t\t\t// i.e. the extension host could not be started\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\t\t\treturn proxy.value.$activateByEvent(activationEvent);\n\t\t}).then(() => {\n\t\t\tthis._extensionHostProcessFinishedActivateEvents[activationEvent] = true;\n\t\t});\n\t}\n\n\tpublic startExtensionHostProfile(): Promise<ProfileSession> {\n\t\tif (this._extensionHostProcessWorker) {\n\t\t\tlet port = this._extensionHostProcessWorker.getInspectPort();\n\t\t\tif (port) {\n\t\t\t\treturn this._instantiationService.createInstance(ExtensionHostProfiler, port).start();\n\t\t\t}\n\t\t}\n\t\tthrow new Error('Extension host not running or no inspect port available');\n\t}\n\n\tpublic getInspectPort(): number {\n\t\tif (this._extensionHostProcessWorker) {\n\t\t\tlet port = this._extensionHostProcessWorker.getInspectPort();\n\t\t\tif (port) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic async resolveAuthority(remoteAuthority: string): Promise<ResolvedAuthority> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not need to be resolved, simply parse the port number\n\t\t\tconst pieces = remoteAuthority.split(':');\n\t\t\treturn Promise.resolve({\n\t\t\t\tauthority: remoteAuthority,\n\t\t\t\thost: pieces[0],\n\t\t\t\tport: parseInt(pieces[1], 10)\n\t\t\t});\n\t\t}\n\t\tconst proxy = await this._getExtensionHostProcessProxy();\n\t\tif (!proxy) {\n\t\t\tthrow new Error(`Cannot resolve authority`);\n\t\t}\n\t\treturn proxy.$resolveAuthority(remoteAuthority);\n\t}\n\n\tpublic async start(enabledExtensionIds: ExtensionIdentifier[]): Promise<void> {\n\t\tconst proxy = await this._getExtensionHostProcessProxy();\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\treturn proxy.$startExtensionHost(enabledExtensionIds);\n\t}\n\n\tpublic async deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void> {\n\t\tconst proxy = await this._getExtensionHostProcessProxy();\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\treturn proxy.$deltaExtensions(toAdd, toRemove);\n\t}\n}\n\nconst colorTables = [\n\t['#2977B1', '#FC802D', '#34A13A', '#D3282F', '#9366BA'],\n\t['#8B564C', '#E177C0', '#7F7F7F', '#BBBE3D', '#2EBECD']\n];\n\nfunction prettyWithoutArrays(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data;\n\t}\n\tif (data && typeof data === 'object' && typeof data.toString === 'function') {\n\t\tlet result = data.toString();\n\t\tif (result !== '[object Object]') {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn data;\n}\n\nfunction pretty(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data.map(prettyWithoutArrays);\n\t}\n\treturn prettyWithoutArrays(data);\n}\n\nclass RPCLogger implements IRPCProtocolLogger {\n\n\tprivate _totalIncoming = 0;\n\tprivate _totalOutgoing = 0;\n\n\tprivate _log(direction: string, totalLength: number, msgLength: number, req: number, initiator: RequestInitiator, str: string, data: any): void {\n\t\tdata = pretty(data);\n\n\t\tconst colorTable = colorTables[initiator];\n\t\tconst color = LOG_USE_COLORS ? colorTable[req % colorTable.length] : '#000000';\n\t\tlet args = [`%c[${direction}]%c[${strings.pad(totalLength, 7, ' ')}]%c[len: ${strings.pad(msgLength, 5, ' ')}]%c${strings.pad(req, 5, ' ')} - ${str}`, 'color: darkgreen', 'color: grey', 'color: grey', `color: ${color}`];\n\t\tif (/\\($/.test(str)) {\n\t\t\targs = args.concat(data);\n\t\t\targs.push(')');\n\t\t} else {\n\t\t\targs.push(data);\n\t\t}\n\t\tconsole.log.apply(console, args as [string, ...string[]]);\n\t}\n\n\tlogIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalIncoming += msgLength;\n\t\tthis._log('Ext \\u2192 Win', this._totalIncoming, msgLength, req, initiator, str, data);\n\t}\n\n\tlogOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalOutgoing += msgLength;\n\t\tthis._log('Win \\u2192 Ext', this._totalOutgoing, msgLength, req, initiator, str, data);\n\t}\n}\n\ninterface ExtHostLatencyResult {\n\tremoteAuthority: string;\n\tup: number;\n\tdown: number;\n\tlatency: number;\n}\n\ninterface ExtHostLatencyProvider {\n\tmeasure(): Promise<ExtHostLatencyResult | null>;\n}\n\nlet providers: ExtHostLatencyProvider[] = [];\nfunction registerLatencyTestProvider(provider: ExtHostLatencyProvider): IDisposable {\n\tproviders.push(provider);\n\treturn {\n\t\tdispose: () => {\n\t\t\tfor (let i = 0; i < providers.length; i++) {\n\t\t\t\tif (providers[i] === provider) {\n\t\t\t\t\tproviders.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction getLatencyTestProviders(): ExtHostLatencyProvider[] {\n\treturn providers.slice(0);\n}\n\nexport class MeasureExtHostLatencyAction extends Action {\n\tpublic static readonly ID = 'editor.action.measureExtHostLatency';\n\tpublic static readonly LABEL = nls.localize('measureExtHostLatency', \"Measure Extension Host Latency\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IEditorService private readonly _editorService: IEditorService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic async run(): Promise<any> {\n\t\tconst measurements = await Promise.all(getLatencyTestProviders().map(provider => provider.measure()));\n\t\tthis._editorService.openEditor({ contents: measurements.map(MeasureExtHostLatencyAction._print).join('\\n\\n'), options: { pinned: true } } as IUntitledResourceInput);\n\t}\n\n\tprivate static _print(m: ExtHostLatencyResult): string {\n\t\treturn `${m.remoteAuthority ? `Authority: ${m.remoteAuthority}\\n` : ``}Roundtrip latency: ${m.latency.toFixed(3)}ms\\nUp: ${MeasureExtHostLatencyAction._printSpeed(m.up)}\\nDown: ${MeasureExtHostLatencyAction._printSpeed(m.down)}\\n`;\n\t}\n\n\tprivate static _printSpeed(n: number): string {\n\t\tif (n <= 1024) {\n\t\t\treturn `${n} bps`;\n\t\t}\n\t\tif (n < 1024 * 1024) {\n\t\t\treturn `${(n / 1024).toFixed(1)} kbps`;\n\t\t}\n\t\treturn `${(n / 1024 / 1024).toFixed(1)} Mbps`;\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(MeasureExtHostLatencyAction, MeasureExtHostLatencyAction.ID, MeasureExtHostLatencyAction.LABEL), 'Developer: Measure Extension Host Latency', nls.localize('developer', \"Developer\"));\n"]}]}