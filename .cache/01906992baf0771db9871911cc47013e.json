{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/rowCache.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/rowCache.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dom_1 = require(\"vs/base/browser/dom\");\nfunction removeFromParent(element) {\n    try {\n        if (element.parentElement) {\n            element.parentElement.removeChild(element);\n        }\n    }\n    catch (e) {\n        // this will throw if this happens due to a blur event, nasty business\n    }\n}\nvar RowCache = /** @class */ (function () {\n    function RowCache(renderers) {\n        this.renderers = renderers;\n        this.cache = new Map();\n    }\n    /**\n     * Returns a row either by creating a new one or reusing\n     * a previously released row which shares the same templateId.\n     */\n    RowCache.prototype.alloc = function (templateId) {\n        var result = this.getTemplateCache(templateId).pop();\n        if (!result) {\n            var domNode = dom_1.$('.monaco-list-row');\n            var renderer = this.getRenderer(templateId);\n            var templateData = renderer.renderTemplate(domNode);\n            result = { domNode: domNode, templateId: templateId, templateData: templateData };\n        }\n        return result;\n    };\n    /**\n     * Releases the row for eventual reuse.\n     */\n    RowCache.prototype.release = function (row) {\n        if (!row) {\n            return;\n        }\n        this.releaseRow(row);\n    };\n    RowCache.prototype.releaseRow = function (row) {\n        var domNode = row.domNode, templateId = row.templateId;\n        if (domNode) {\n            dom_1.removeClass(domNode, 'scrolling');\n            removeFromParent(domNode);\n        }\n        var cache = this.getTemplateCache(templateId);\n        cache.push(row);\n    };\n    RowCache.prototype.getTemplateCache = function (templateId) {\n        var result = this.cache.get(templateId);\n        if (!result) {\n            result = [];\n            this.cache.set(templateId, result);\n        }\n        return result;\n    };\n    RowCache.prototype.garbageCollect = function () {\n        var _this = this;\n        if (!this.renderers) {\n            return;\n        }\n        this.cache.forEach(function (cachedRows, templateId) {\n            for (var _i = 0, cachedRows_1 = cachedRows; _i < cachedRows_1.length; _i++) {\n                var cachedRow = cachedRows_1[_i];\n                var renderer = _this.getRenderer(templateId);\n                renderer.disposeTemplate(cachedRow.templateData);\n                cachedRow.domNode = null;\n                cachedRow.templateData = null;\n            }\n        });\n        this.cache.clear();\n    };\n    RowCache.prototype.dispose = function () {\n        this.garbageCollect();\n        this.cache.clear();\n        this.renderers = null; // StrictNullOverride: nulling out ok in dispose\n    };\n    RowCache.prototype.getRenderer = function (templateId) {\n        var renderer = this.renderers.get(templateId);\n        if (!renderer) {\n            throw new Error(\"No renderer found for \" + templateId);\n        }\n        return renderer;\n    };\n    return RowCache;\n}());\nexports.RowCache = RowCache;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/rowCache.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/rowCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListRenderer } from './list';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { $, removeClass } from 'vs/base/browser/dom';\n\nexport interface IRow {\n\tdomNode: HTMLElement | null;\n\ttemplateId: string;\n\ttemplateData: any;\n}\n\nfunction removeFromParent(element: HTMLElement): void {\n\ttry {\n\t\tif (element.parentElement) {\n\t\t\telement.parentElement.removeChild(element);\n\t\t}\n\t} catch (e) {\n\t\t// this will throw if this happens due to a blur event, nasty business\n\t}\n}\n\nexport class RowCache<T> implements IDisposable {\n\n\tprivate cache = new Map<string, IRow[]>();\n\n\tconstructor(private renderers: Map<string, IListRenderer<T, any>>) { }\n\n\t/**\n\t * Returns a row either by creating a new one or reusing\n\t * a previously released row which shares the same templateId.\n\t */\n\talloc(templateId: string): IRow {\n\t\tlet result = this.getTemplateCache(templateId).pop();\n\n\t\tif (!result) {\n\t\t\tconst domNode = $('.monaco-list-row');\n\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\tconst templateData = renderer.renderTemplate(domNode);\n\t\t\tresult = { domNode, templateId, templateData };\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Releases the row for eventual reuse.\n\t */\n\trelease(row: IRow): void {\n\t\tif (!row) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.releaseRow(row);\n\t}\n\n\tprivate releaseRow(row: IRow): void {\n\t\tconst { domNode, templateId } = row;\n\t\tif (domNode) {\n\t\t\tremoveClass(domNode, 'scrolling');\n\t\t\tremoveFromParent(domNode);\n\t\t}\n\n\t\tconst cache = this.getTemplateCache(templateId);\n\t\tcache.push(row);\n\t}\n\n\tprivate getTemplateCache(templateId: string): IRow[] {\n\t\tlet result = this.cache.get(templateId);\n\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis.cache.set(templateId, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate garbageCollect(): void {\n\t\tif (!this.renderers) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cache.forEach((cachedRows, templateId) => {\n\t\t\tfor (const cachedRow of cachedRows) {\n\t\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\t\trenderer.disposeTemplate(cachedRow.templateData);\n\t\t\t\tcachedRow.domNode = null;\n\t\t\t\tcachedRow.templateData = null;\n\t\t\t}\n\t\t});\n\n\t\tthis.cache.clear();\n\t}\n\n\tdispose(): void {\n\t\tthis.garbageCollect();\n\t\tthis.cache.clear();\n\t\tthis.renderers = null!; // StrictNullOverride: nulling out ok in dispose\n\t}\n\n\tprivate getRenderer(templateId: string): IListRenderer<T, any> {\n\t\tconst renderer = this.renderers.get(templateId);\n\t\tif (!renderer) {\n\t\t\tthrow new Error(`No renderer found for ${templateId}`);\n\t\t}\n\t\treturn renderer;\n\t}\n}"]}]}