{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nexports.Task = tasks_1.Task;\nvar taskSystem_1 = require(\"vs/workbench/contrib/tasks/common/taskSystem\");\nexports.ITaskSummary = taskSystem_1.ITaskSummary;\nexports.TaskTerminateResponse = taskSystem_1.TaskTerminateResponse;\nexports.ITaskService = instantiation_1.createDecorator('taskService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAKhG,gFAAiF;AAIjF,iEAA4K;AAIrJ,eAJd,YAAI,CAIc;AAH3B,2EAAmH;AAG1G,uBAHA,yBAAY,CAGA;AAAQ,gCAHN,kCAAqB,CAGM;AAErC,QAAA,YAAY,GAAG,+BAAe,CAAe,aAAa,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { Event } from 'vs/base/common/event';\nimport { LinkedMap } from 'vs/base/common/map';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Task, ContributedTask, CustomTask, TaskSet, TaskSorter, TaskEvent, TaskIdentifier, ConfiguringTask, TaskRunSource } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskSummary, TaskTerminateResponse, TaskSystemInfo } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { IStringDictionary } from 'vs/base/common/collections';\n\nexport { ITaskSummary, Task, TaskTerminateResponse };\n\nexport const ITaskService = createDecorator<ITaskService>('taskService');\n\nexport interface ITaskProvider {\n\tprovideTasks(validTypes: IStringDictionary<boolean>): Promise<TaskSet>;\n}\n\nexport interface ProblemMatcherRunOptions {\n\tattachProblemMatcher?: boolean;\n}\n\nexport interface CustomizationProperties {\n\tgroup?: string | { kind?: string; isDefault?: boolean; };\n\tproblemMatcher?: string | string[];\n\tisBackground?: boolean;\n}\n\nexport interface TaskFilter {\n\tversion?: string;\n\ttype?: string;\n}\n\ninterface WorkspaceTaskResult {\n\tset: TaskSet | undefined;\n\tconfigurations: {\n\t\tbyIdentifier: IStringDictionary<ConfiguringTask>;\n\t} | undefined;\n\thasErrors: boolean;\n}\n\nexport interface WorkspaceFolderTaskResult extends WorkspaceTaskResult {\n\tworkspaceFolder: IWorkspaceFolder;\n}\n\nexport interface ITaskService {\n\t_serviceBrand: any;\n\tonDidStateChange: Event<TaskEvent>;\n\tsupportsMultipleTaskExecutions: boolean;\n\n\tconfigureAction(): Action;\n\tbuild(): Promise<ITaskSummary>;\n\trunTest(): Promise<ITaskSummary>;\n\trun(task: Task | undefined, options?: ProblemMatcherRunOptions): Promise<ITaskSummary>;\n\tinTerminal(): boolean;\n\tisActive(): Promise<boolean>;\n\tgetActiveTasks(): Promise<Task[]>;\n\trestart(task: Task): void;\n\tterminate(task: Task): Promise<TaskTerminateResponse>;\n\tterminateAll(): Promise<TaskTerminateResponse[]>;\n\ttasks(filter?: TaskFilter): Promise<Task[]>;\n\tgetWorkspaceTasks(runSource?: TaskRunSource): Promise<Map<string, WorkspaceFolderTaskResult>>;\n\t/**\n\t * @param alias The task's name, label or defined identifier.\n\t */\n\tgetTask(workspaceFolder: IWorkspaceFolder | string, alias: string | TaskIdentifier, compareId?: boolean): Promise<Task | undefined>;\n\tgetTasksForGroup(group: string): Promise<Task[]>;\n\tgetRecentlyUsedTasks(): LinkedMap<string, string>;\n\tcreateSorter(): TaskSorter;\n\n\tneedsFolderQualification(): boolean;\n\tcanCustomize(task: ContributedTask | CustomTask): boolean;\n\tcustomize(task: ContributedTask | CustomTask, properties?: {}, openConfig?: boolean): Promise<void>;\n\topenConfig(task: CustomTask | undefined): Promise<void>;\n\n\tregisterTaskProvider(taskProvider: ITaskProvider): IDisposable;\n\n\tregisterTaskSystem(scheme: string, taskSystemInfo: TaskSystemInfo): void;\n\n\textensionCallbackTaskComplete(task: Task, result: number | undefined): Promise<void>;\n}\n"]}]}