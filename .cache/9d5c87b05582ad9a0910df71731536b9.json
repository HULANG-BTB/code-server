{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Protocol = /** @class */ (function () {\n    function Protocol(sender, onMessage) {\n        this.sender = sender;\n        this.onMessage = onMessage;\n    }\n    Protocol.prototype.send = function (message) {\n        try {\n            this.sender.send('ipc:message', message.buffer);\n        }\n        catch (e) {\n            // systems are going down\n        }\n    };\n    Protocol.prototype.dispose = function () {\n        this.sender.send('ipc:disconnect', null);\n    };\n    return Protocol;\n}());\nexports.Protocol = Protocol;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAUhG;IAEC,kBAAoB,MAAc,EAAW,SAA0B;QAAnD,WAAM,GAAN,MAAM,CAAQ;QAAW,cAAS,GAAT,SAAS,CAAiB;IAAI,CAAC;IAE5E,uBAAI,GAAJ,UAAK,OAAiB;QACrB,IAAI;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAW,OAAO,CAAC,MAAO,CAAC,CAAC;SAC1D;QAAC,OAAO,CAAC,EAAE;YACX,yBAAyB;SACzB;IACF,CAAC;IAED,0BAAO,GAAP;QACC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IACF,eAAC;AAAD,CAAC,AAfD,IAeC;AAfY,4BAAQ","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { Event } from 'vs/base/common/event';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport interface Sender {\n\tsend(channel: string, msg: Buffer | null): void;\n}\n\nexport class Protocol implements IMessagePassingProtocol {\n\n\tconstructor(private sender: Sender, readonly onMessage: Event<VSBuffer>) { }\n\n\tsend(message: VSBuffer): void {\n\t\ttry {\n\t\t\tthis.sender.send('ipc:message', (<Buffer>message.buffer));\n\t\t} catch (e) {\n\t\t\t// systems are going down\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.sender.send('ipc:disconnect', null);\n\t}\n}"]}]}