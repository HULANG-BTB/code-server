{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/console.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/console.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nfunction isRemoteConsoleLog(obj) {\n    var entry = obj;\n    return entry && typeof entry.type === 'string' && typeof entry.severity === 'string';\n}\nexports.isRemoteConsoleLog = isRemoteConsoleLog;\nfunction parse(entry) {\n    var args = [];\n    var stack;\n    // Parse Entry\n    try {\n        var parsedArguments = JSON.parse(entry.arguments);\n        // Check for special stack entry as last entry\n        var stackArgument = parsedArguments[parsedArguments.length - 1];\n        if (stackArgument && stackArgument.__$stack) {\n            parsedArguments.pop(); // stack is handled specially\n            stack = stackArgument.__$stack;\n        }\n        args.push.apply(args, parsedArguments);\n    }\n    catch (error) {\n        args.push('Unable to log remote console arguments', entry.arguments);\n    }\n    return { args: args, stack: stack };\n}\nexports.parse = parse;\nfunction getFirstFrame(arg0) {\n    if (typeof arg0 !== 'string') {\n        return getFirstFrame(parse(arg0).stack);\n    }\n    // Parse a source information out of the stack if we have one. Format can be:\n    // at vscode.commands.registerCommand (/Users/someone/Desktop/test-ts/out/src/extension.js:18:17)\n    // or\n    // at /Users/someone/Desktop/test-ts/out/src/extension.js:18:17\n    // or\n    // at c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17\n    // or\n    // at e.$executeContributedCommand(c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17)\n    var stack = arg0;\n    if (stack) {\n        var topFrame = findFirstFrame(stack);\n        // at [^\\/]* => line starts with \"at\" followed by any character except '/' (to not capture unix paths too late)\n        // (?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\) => windows drive letter OR unix root OR unc root\n        // (?:.+) => simple pattern for the path, only works because of the line/col pattern after\n        // :(?:\\d+):(?:\\d+) => :line:column data\n        var matches = /at [^\\/]*((?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\))(?:.+)):(\\d+):(\\d+)/.exec(topFrame || '');\n        if (matches && matches.length === 4) {\n            return {\n                uri: uri_1.URI.file(matches[1]),\n                line: Number(matches[2]),\n                column: Number(matches[3])\n            };\n        }\n    }\n    return undefined;\n}\nexports.getFirstFrame = getFirstFrame;\nfunction findFirstFrame(stack) {\n    if (!stack) {\n        return stack;\n    }\n    var newlineIndex = stack.indexOf('\\n');\n    if (newlineIndex === -1) {\n        return stack;\n    }\n    return stack.substring(0, newlineIndex);\n}\nfunction log(entry, label) {\n    var _a = parse(entry), args = _a.args, stack = _a.stack;\n    var isOneStringArg = typeof args[0] === 'string' && args.length === 1;\n    var topFrame = findFirstFrame(stack);\n    if (topFrame) {\n        topFrame = \"(\" + topFrame.trim() + \")\";\n    }\n    var consoleArgs = [];\n    // First arg is a string\n    if (typeof args[0] === 'string') {\n        if (topFrame && isOneStringArg) {\n            consoleArgs = [\"%c[\" + label + \"] %c\" + args[0] + \" %c\" + topFrame, color('blue'), color('black'), color('grey')];\n        }\n        else {\n            consoleArgs = [\"%c[\" + label + \"] %c\" + args[0], color('blue'), color('black')].concat(args.slice(1));\n        }\n    }\n    // First arg is something else, just apply all\n    else {\n        consoleArgs = [\"%c[\" + label + \"]%\", color('blue')].concat(args);\n    }\n    // Stack: add to args unless already aded\n    if (topFrame && !isOneStringArg) {\n        consoleArgs.push(topFrame);\n    }\n    // Log it\n    console[entry.severity].apply(console, consoleArgs);\n}\nexports.log = log;\nfunction color(color) {\n    return \"color: \" + color;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/console.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/console.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\n\nexport interface IRemoteConsoleLog {\n\ttype: string;\n\tseverity: string;\n\targuments: string;\n}\n\ninterface IStackArgument {\n\t__$stack: string;\n}\n\nexport interface IStackFrame {\n\turi: URI;\n\tline: number;\n\tcolumn: number;\n}\n\nexport function isRemoteConsoleLog(obj: any): obj is IRemoteConsoleLog {\n\tconst entry = obj as IRemoteConsoleLog;\n\n\treturn entry && typeof entry.type === 'string' && typeof entry.severity === 'string';\n}\n\nexport function parse(entry: IRemoteConsoleLog): { args: any[], stack?: string } {\n\tconst args: any[] = [];\n\tlet stack: string | undefined;\n\n\t// Parse Entry\n\ttry {\n\t\tconst parsedArguments: any[] = JSON.parse(entry.arguments);\n\n\t\t// Check for special stack entry as last entry\n\t\tconst stackArgument = parsedArguments[parsedArguments.length - 1] as IStackArgument;\n\t\tif (stackArgument && stackArgument.__$stack) {\n\t\t\tparsedArguments.pop(); // stack is handled specially\n\t\t\tstack = stackArgument.__$stack;\n\t\t}\n\n\t\targs.push(...parsedArguments);\n\t} catch (error) {\n\t\targs.push('Unable to log remote console arguments', entry.arguments);\n\t}\n\n\treturn { args, stack };\n}\n\nexport function getFirstFrame(entry: IRemoteConsoleLog): IStackFrame | undefined;\nexport function getFirstFrame(stack: string | undefined): IStackFrame | undefined;\nexport function getFirstFrame(arg0: IRemoteConsoleLog | string | undefined): IStackFrame | undefined {\n\tif (typeof arg0 !== 'string') {\n\t\treturn getFirstFrame(parse(arg0!).stack);\n\t}\n\n\t// Parse a source information out of the stack if we have one. Format can be:\n\t// at vscode.commands.registerCommand (/Users/someone/Desktop/test-ts/out/src/extension.js:18:17)\n\t// or\n\t// at /Users/someone/Desktop/test-ts/out/src/extension.js:18:17\n\t// or\n\t// at c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17\n\t// or\n\t// at e.$executeContributedCommand(c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17)\n\tconst stack = arg0;\n\tif (stack) {\n\t\tconst topFrame = findFirstFrame(stack);\n\n\t\t// at [^\\/]* => line starts with \"at\" followed by any character except '/' (to not capture unix paths too late)\n\t\t// (?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\) => windows drive letter OR unix root OR unc root\n\t\t// (?:.+) => simple pattern for the path, only works because of the line/col pattern after\n\t\t// :(?:\\d+):(?:\\d+) => :line:column data\n\t\tconst matches = /at [^\\/]*((?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\))(?:.+)):(\\d+):(\\d+)/.exec(topFrame || '');\n\t\tif (matches && matches.length === 4) {\n\t\t\treturn {\n\t\t\t\turi: URI.file(matches[1]),\n\t\t\t\tline: Number(matches[2]),\n\t\t\t\tcolumn: Number(matches[3])\n\t\t\t} as IStackFrame;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction findFirstFrame(stack: string | undefined): string | undefined {\n\tif (!stack) {\n\t\treturn stack;\n\t}\n\n\tconst newlineIndex = stack.indexOf('\\n');\n\tif (newlineIndex === -1) {\n\t\treturn stack;\n\t}\n\n\treturn stack.substring(0, newlineIndex);\n}\n\nexport function log(entry: IRemoteConsoleLog, label: string): void {\n\tconst { args, stack } = parse(entry);\n\n\tconst isOneStringArg = typeof args[0] === 'string' && args.length === 1;\n\n\tlet topFrame = findFirstFrame(stack);\n\tif (topFrame) {\n\t\ttopFrame = `(${topFrame.trim()})`;\n\t}\n\n\tlet consoleArgs: string[] = [];\n\n\t// First arg is a string\n\tif (typeof args[0] === 'string') {\n\t\tif (topFrame && isOneStringArg) {\n\t\t\tconsoleArgs = [`%c[${label}] %c${args[0]} %c${topFrame}`, color('blue'), color('black'), color('grey')];\n\t\t} else {\n\t\t\tconsoleArgs = [`%c[${label}] %c${args[0]}`, color('blue'), color('black'), ...args.slice(1)];\n\t\t}\n\t}\n\n\t// First arg is something else, just apply all\n\telse {\n\t\tconsoleArgs = [`%c[${label}]%`, color('blue'), ...args];\n\t}\n\n\t// Stack: add to args unless already aded\n\tif (topFrame && !isOneStringArg) {\n\t\tconsoleArgs.push(topFrame);\n\t}\n\n\t// Log it\n\tconsole[entry.severity].apply(console, consoleArgs);\n}\n\nfunction color(color: string): string {\n\treturn `color: ${color}`;\n}"]}]}