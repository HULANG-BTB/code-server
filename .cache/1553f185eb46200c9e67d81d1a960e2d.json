{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/characterPair.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/modes/languageConfiguration\"], function (require, exports, languageConfiguration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CharacterPairSupport {\n        constructor(config) {\n            if (config.autoClosingPairs) {\n                this._autoClosingPairs = config.autoClosingPairs.map(el => new languageConfiguration_1.StandardAutoClosingPairConditional(el));\n            }\n            else if (config.brackets) {\n                this._autoClosingPairs = config.brackets.map(b => new languageConfiguration_1.StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n            }\n            else {\n                this._autoClosingPairs = [];\n            }\n            this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n            this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n        }\n        getAutoClosingPairs() {\n            return this._autoClosingPairs;\n        }\n        getAutoCloseBeforeSet() {\n            return this._autoCloseBefore;\n        }\n        shouldAutoClosePair(character, context, column) {\n            // Always complete on empty line\n            if (context.getTokenCount() === 0) {\n                return true;\n            }\n            let tokenIndex = context.findTokenIndexAtOffset(column - 2);\n            let standardTokenType = context.getStandardTokenType(tokenIndex);\n            for (const autoClosingPair of this._autoClosingPairs) {\n                if (autoClosingPair.open === character) {\n                    return autoClosingPair.isOK(standardTokenType);\n                }\n            }\n            return false;\n        }\n        getSurroundingPairs() {\n            return this._surroundingPairs;\n        }\n    }\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = ' \\n\\t';\n    exports.CharacterPairSupport = CharacterPairSupport;\n});\n",null]}