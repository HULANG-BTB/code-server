{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"@coder/logger\", \"vs/platform/registry/common/platform\", \"vs/workbench/common/actions\", \"vs/platform/contextkey/common/contextkey\", \"vs/workbench/electron-browser/actions/developerActions\", \"vs/workbench/contrib/terminal/browser/terminalActions\", \"vs/workbench/contrib/terminal/common/terminal\", \"vs/base/common/keyCodes\", \"../workbench\"], function (require, exports, logger_1, platform_1, actions_1, contextkey_1, developerActions_1, terminalActions_1, terminal_1, keyCodes_1, workbench_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Intercept adding workbench actions so we can skip actions that won't work or\n    // modify actions that need different conditions, keybindings, etc.\n    const registry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\n    const originalRegister = registry.registerWorkbenchAction.bind(registry);\n    registry.registerWorkbenchAction = (descriptor, alias, category, when) => {\n        switch (descriptor.id) {\n            case developerActions_1.ToggleDevToolsAction.ID: // There appears to be no way to toggle this programmatically.\n                logger_1.logger.debug(`Skipping unsupported workbench action ${descriptor.id}`);\n                return {\n                    dispose: () => undefined,\n                };\n            case terminalActions_1.TerminalPasteAction.ID: // Modify the Windows keybinding and add our context key.\n                // tslint:disable-next-line no-any override private\n                descriptor._keybindings = {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n                    linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_V },\n                    win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V },\n                    mac: { primary: 0 },\n                };\n                // tslint:disable-next-line no-any override private\n                descriptor._keybindingContext = contextkey_1.ContextKeyExpr.and(terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS, workbench_1.workbench.clipboardContextKey);\n        }\n        return originalRegister(descriptor, alias, category, when);\n    };\n});\n",null]}