{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @param text The content to stylize.\n * @returns An {@link HTMLSpanElement} that contains the potentially stylized text.\n */\nfunction handleANSIOutput(text, linkDetector) {\n    var root = document.createElement('span');\n    var textLength = text.length;\n    var styleNames = [];\n    var currentPos = 0;\n    var buffer = '';\n    while (currentPos < textLength) {\n        var sequenceFound = false;\n        // Potentially an ANSI escape sequence.\n        // See http://ascii-table.com/ansi-escape-sequences.php & https://en.wikipedia.org/wiki/ANSI_escape_code\n        if (text.charCodeAt(currentPos) === 27 && text.charAt(currentPos + 1) === '[') {\n            var startPos = currentPos;\n            currentPos += 2; // Ignore 'Esc[' as it's in every sequence.\n            var ansiSequence = '';\n            while (currentPos < textLength) {\n                var char = text.charAt(currentPos);\n                ansiSequence += char;\n                currentPos++;\n                // Look for a known sequence terminating character.\n                if (char.match(/^[ABCDHIJKfhmpsu]$/)) {\n                    sequenceFound = true;\n                    break;\n                }\n            }\n            if (sequenceFound) {\n                // Flush buffer with previous styles.\n                appendStylizedStringToContainer(root, buffer, styleNames, linkDetector);\n                buffer = '';\n                /*\n                    * Certain ranges that are matched here do not contain real graphics rendition sequences. For\n                    * the sake of having a simpler expression, they have been included anyway.\n                    */\n                if (ansiSequence.match(/^(?:[349][0-7]|10[0-7]|[013]|4|[34]9)(?:;(?:[349][0-7]|10[0-7]|[013]|4|[34]9))*;?m$/)) {\n                    var styleCodes = ansiSequence.slice(0, -1) // Remove final 'm' character.\n                        .split(';') // Separate style codes.\n                        .filter(function (elem) { return elem !== ''; }) // Filter empty elems as '34;m' -> ['34', ''].\n                        .map(function (elem) { return parseInt(elem, 10); }); // Convert to numbers.\n                    for (var _i = 0, styleCodes_1 = styleCodes; _i < styleCodes_1.length; _i++) {\n                        var code = styleCodes_1[_i];\n                        if (code === 0) {\n                            styleNames = [];\n                        }\n                        else if (code === 1) {\n                            styleNames.push('code-bold');\n                        }\n                        else if (code === 3) {\n                            styleNames.push('code-italic');\n                        }\n                        else if (code === 4) {\n                            styleNames.push('code-underline');\n                        }\n                        else if (code === 39 || (code >= 30 && code <= 37) || (code >= 90 && code <= 97)) {\n                            // Remove all previous foreground colour codes\n                            styleNames = styleNames.filter(function (style) { return !style.match(/^code-foreground-\\d+$/); });\n                            if (code !== 39) {\n                                styleNames.push('code-foreground-' + code);\n                            }\n                        }\n                        else if (code === 49 || (code >= 40 && code <= 47) || (code >= 100 && code <= 107)) {\n                            // Remove all previous background colour codes\n                            styleNames = styleNames.filter(function (style) { return !style.match(/^code-background-\\d+$/); });\n                            if (code !== 49) {\n                                styleNames.push('code-background-' + code);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Unsupported sequence so simply hide it.\n                }\n            }\n            else {\n                currentPos = startPos;\n            }\n        }\n        if (sequenceFound === false) {\n            buffer += text.charAt(currentPos);\n            currentPos++;\n        }\n    }\n    // Flush remaining text buffer if not empty.\n    if (buffer) {\n        appendStylizedStringToContainer(root, buffer, styleNames, linkDetector);\n    }\n    return root;\n}\nexports.handleANSIOutput = handleANSIOutput;\n/**\n * @param root The {@link HTMLElement} to append the content to.\n * @param stringContent The text content to be appended.\n * @param cssClasses The list of CSS styles to apply to the text content.\n * @param linkDetector The {@link LinkDetector} responsible for generating links from {@param stringContent}.\n */\nfunction appendStylizedStringToContainer(root, stringContent, cssClasses, linkDetector) {\n    if (!root || !stringContent) {\n        return;\n    }\n    var container = linkDetector.handleLinks(stringContent);\n    container.className = cssClasses.join(' ');\n    root.appendChild(container);\n}\nexports.appendStylizedStringToContainer = appendStylizedStringToContainer;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LinkDetector } from 'vs/workbench/contrib/debug/browser/linkDetector';\n\n/**\n * @param text The content to stylize.\n * @returns An {@link HTMLSpanElement} that contains the potentially stylized text.\n */\nexport function handleANSIOutput(text: string, linkDetector: LinkDetector): HTMLSpanElement {\n\n\tconst root: HTMLSpanElement = document.createElement('span');\n\tconst textLength: number = text.length;\n\n\tlet styleNames: string[] = [];\n\tlet currentPos: number = 0;\n\tlet buffer: string = '';\n\n\twhile (currentPos < textLength) {\n\n\t\tlet sequenceFound: boolean = false;\n\n\t\t// Potentially an ANSI escape sequence.\n\t\t// See http://ascii-table.com/ansi-escape-sequences.php & https://en.wikipedia.org/wiki/ANSI_escape_code\n\t\tif (text.charCodeAt(currentPos) === 27 && text.charAt(currentPos + 1) === '[') {\n\n\t\t\tconst startPos: number = currentPos;\n\t\t\tcurrentPos += 2; // Ignore 'Esc[' as it's in every sequence.\n\n\t\t\tlet ansiSequence: string = '';\n\n\t\t\twhile (currentPos < textLength) {\n\t\t\t\tconst char: string = text.charAt(currentPos);\n\t\t\t\tansiSequence += char;\n\n\t\t\t\tcurrentPos++;\n\n\t\t\t\t// Look for a known sequence terminating character.\n\t\t\t\tif (char.match(/^[ABCDHIJKfhmpsu]$/)) {\n\t\t\t\t\tsequenceFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (sequenceFound) {\n\n\t\t\t\t// Flush buffer with previous styles.\n\t\t\t\tappendStylizedStringToContainer(root, buffer, styleNames, linkDetector);\n\n\t\t\t\tbuffer = '';\n\n\t\t\t\t/*\n\t\t\t\t\t* Certain ranges that are matched here do not contain real graphics rendition sequences. For\n\t\t\t\t\t* the sake of having a simpler expression, they have been included anyway.\n\t\t\t\t\t*/\n\t\t\t\tif (ansiSequence.match(/^(?:[349][0-7]|10[0-7]|[013]|4|[34]9)(?:;(?:[349][0-7]|10[0-7]|[013]|4|[34]9))*;?m$/)) {\n\n\t\t\t\t\tconst styleCodes: number[] = ansiSequence.slice(0, -1)\t// Remove final 'm' character.\n\t\t\t\t\t\t.split(';')\t\t\t\t\t// Separate style codes.\n\t\t\t\t\t\t.filter(elem => elem !== '')\t\t\t// Filter empty elems as '34;m' -> ['34', ''].\n\t\t\t\t\t\t.map(elem => parseInt(elem, 10));\t\t// Convert to numbers.\n\n\t\t\t\t\tfor (let code of styleCodes) {\n\t\t\t\t\t\tif (code === 0) {\n\t\t\t\t\t\t\tstyleNames = [];\n\t\t\t\t\t\t} else if (code === 1) {\n\t\t\t\t\t\t\tstyleNames.push('code-bold');\n\t\t\t\t\t\t} else if (code === 3) {\n\t\t\t\t\t\t\tstyleNames.push('code-italic');\n\t\t\t\t\t\t} else if (code === 4) {\n\t\t\t\t\t\t\tstyleNames.push('code-underline');\n\t\t\t\t\t\t} else if (code === 39 || (code >= 30 && code <= 37) || (code >= 90 && code <= 97)) {\n\t\t\t\t\t\t\t// Remove all previous foreground colour codes\n\t\t\t\t\t\t\tstyleNames = styleNames.filter(style => !style.match(/^code-foreground-\\d+$/));\n\n\t\t\t\t\t\t\tif (code !== 39) {\n\t\t\t\t\t\t\t\tstyleNames.push('code-foreground-' + code);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (code === 49 || (code >= 40 && code <= 47) || (code >= 100 && code <= 107)) {\n\t\t\t\t\t\t\t// Remove all previous background colour codes\n\t\t\t\t\t\t\tstyleNames = styleNames.filter(style => !style.match(/^code-background-\\d+$/));\n\n\t\t\t\t\t\t\tif (code !== 49) {\n\t\t\t\t\t\t\t\tstyleNames.push('code-background-' + code);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// Unsupported sequence so simply hide it.\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tcurrentPos = startPos;\n\t\t\t}\n\n\t\t}\n\n\t\tif (sequenceFound === false) {\n\t\t\tbuffer += text.charAt(currentPos);\n\t\t\tcurrentPos++;\n\t\t}\n\n\t}\n\n\t// Flush remaining text buffer if not empty.\n\tif (buffer) {\n\t\tappendStylizedStringToContainer(root, buffer, styleNames, linkDetector);\n\t}\n\n\treturn root;\n\n}\n\n/**\n * @param root The {@link HTMLElement} to append the content to.\n * @param stringContent The text content to be appended.\n * @param cssClasses The list of CSS styles to apply to the text content.\n * @param linkDetector The {@link LinkDetector} responsible for generating links from {@param stringContent}.\n */\nexport function appendStylizedStringToContainer(root: HTMLElement, stringContent: string, cssClasses: string[], linkDetector: LinkDetector): void {\n\tif (!root || !stringContent) {\n\t\treturn;\n\t}\n\n\tconst container = linkDetector.handleLinks(stringContent);\n\n\tcontainer.className = cssClasses.join(' ');\n\troot.appendChild(container);\n}\n"]}]}