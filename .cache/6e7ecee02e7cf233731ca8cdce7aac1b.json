{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/protocol/src/node/modules/child_process.ts","dependencies":[{"path":"/home/coding/workspace/packages/protocol/src/node/modules/child_process.ts","mtime":1555841535686},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cp = require(\"child_process\");\nconst util_1 = require(\"../../common/util\");\nconst stream_1 = require(\"./stream\");\nclass ChildProcessProxy {\n    constructor(process) {\n        this.process = process;\n    }\n    async kill(signal) {\n        this.process.kill(signal);\n    }\n    async disconnect() {\n        this.process.disconnect();\n    }\n    async ref() {\n        this.process.ref();\n    }\n    async unref() {\n        this.process.unref();\n    }\n    // tslint:disable-next-line no-any\n    async send(message) {\n        return new Promise((resolve, reject) => {\n            this.process.send(message, (error) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    async getPid() {\n        return this.process.pid;\n    }\n    async onDone(cb) {\n        this.process.on(\"close\", cb);\n    }\n    async dispose() {\n        this.process.kill();\n        setTimeout(() => this.process.kill(\"SIGKILL\"), 5000); // Double tap.\n    }\n    // tslint:disable-next-line no-any\n    async onEvent(cb) {\n        this.process.on(\"close\", (code, signal) => cb(\"close\", code, signal));\n        this.process.on(\"disconnect\", () => cb(\"disconnect\"));\n        this.process.on(\"error\", (error) => cb(\"error\", error));\n        this.process.on(\"exit\", (exitCode, signal) => cb(\"exit\", exitCode, signal));\n        this.process.on(\"message\", (message) => cb(\"message\", message));\n    }\n}\nexports.ChildProcessProxy = ChildProcessProxy;\nclass ChildProcessModuleProxy {\n    constructor(forkProvider) {\n        this.forkProvider = forkProvider;\n    }\n    async exec(command, options, callback) {\n        util_1.preserveEnv(options);\n        return this.returnProxies(cp.exec(command, options, callback));\n    }\n    async fork(modulePath, args, options) {\n        util_1.preserveEnv(options);\n        return this.returnProxies((this.forkProvider || cp.fork)(modulePath, args, options));\n    }\n    async spawn(command, args, options) {\n        util_1.preserveEnv(options);\n        return this.returnProxies(cp.spawn(command, args, options));\n    }\n    returnProxies(process) {\n        return {\n            childProcess: new ChildProcessProxy(process),\n            stdin: process.stdin && new stream_1.WritableProxy(process.stdin),\n            stdout: process.stdout && new stream_1.ReadableProxy(process.stdout),\n            stderr: process.stderr && new stream_1.ReadableProxy(process.stderr),\n        };\n    }\n}\nexports.ChildProcessModuleProxy = ChildProcessModuleProxy;\n",{"version":3,"file":"/home/coding/workspace/packages/protocol/src/node/modules/child_process.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/protocol/src/node/modules/child_process.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cp from \"child_process\";\nimport { ServerProxy } from \"../../common/proxy\";\nimport { preserveEnv } from \"../../common/util\";\nimport { WritableProxy, ReadableProxy } from \"./stream\";\n\n// tslint:disable completed-docs\n\nexport type ForkProvider = (modulePath: string, args?: string[], options?: cp.ForkOptions) => cp.ChildProcess;\n\nexport class ChildProcessProxy implements ServerProxy {\n\tpublic constructor(private readonly process: cp.ChildProcess) {}\n\n\tpublic async kill(signal?: string): Promise<void> {\n\t\tthis.process.kill(signal);\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\tthis.process.disconnect();\n\t}\n\n\tpublic async ref(): Promise<void> {\n\t\tthis.process.ref();\n\t}\n\n\tpublic async unref(): Promise<void> {\n\t\tthis.process.unref();\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async send(message: any): Promise<void> {\n\t\treturn new Promise((resolve, reject): void => {\n\t\t\tthis.process.send(message, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async getPid(): Promise<number> {\n\t\treturn this.process.pid;\n\t}\n\n\tpublic async onDone(cb: () => void): Promise<void> {\n\t\tthis.process.on(\"close\", cb);\n\t}\n\n\tpublic async dispose(): Promise<void> {\n\t\tthis.process.kill();\n\t\tsetTimeout(() => this.process.kill(\"SIGKILL\"), 5000); // Double tap.\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async onEvent(cb: (event: string, ...args: any[]) => void): Promise<void> {\n\t\tthis.process.on(\"close\", (code, signal) => cb(\"close\", code, signal));\n\t\tthis.process.on(\"disconnect\", () => cb(\"disconnect\"));\n\t\tthis.process.on(\"error\", (error) => cb(\"error\", error));\n\t\tthis.process.on(\"exit\", (exitCode, signal) => cb(\"exit\", exitCode, signal));\n\t\tthis.process.on(\"message\", (message) => cb(\"message\", message));\n\t}\n}\n\nexport interface ChildProcessProxies {\n\tchildProcess: ChildProcessProxy;\n\tstdin?: WritableProxy | null;\n\tstdout?: ReadableProxy | null;\n\tstderr?: ReadableProxy | null;\n}\n\nexport class ChildProcessModuleProxy {\n\tpublic constructor(private readonly forkProvider?: ForkProvider) {}\n\n\tpublic async exec(\n\t\tcommand: string,\n\t\toptions?: { encoding?: string | null } & cp.ExecOptions | null,\n\t\tcallback?: ((error: cp.ExecException | null, stdin: string | Buffer, stdout: string | Buffer) => void),\n\t): Promise<ChildProcessProxies> {\n\t\tpreserveEnv(options);\n\n\t\treturn this.returnProxies(cp.exec(command, options, callback));\n\t}\n\n\tpublic async fork(modulePath: string, args?: string[], options?: cp.ForkOptions): Promise<ChildProcessProxies> {\n\t\tpreserveEnv(options);\n\n\t\treturn this.returnProxies((this.forkProvider || cp.fork)(modulePath, args, options));\n\t}\n\n\tpublic async spawn(command: string, args?: string[], options?: cp.SpawnOptions): Promise<ChildProcessProxies> {\n\t\tpreserveEnv(options);\n\n\t\treturn this.returnProxies(cp.spawn(command, args, options));\n\t}\n\n\tprivate returnProxies(process: cp.ChildProcess): ChildProcessProxies {\n\t\treturn {\n\t\t\tchildProcess: new ChildProcessProxy(process),\n\t\t\tstdin: process.stdin && new WritableProxy(process.stdin),\n\t\t\tstdout: process.stdout && new ReadableProxy(process.stdout),\n\t\t\tstderr: process.stderr && new ReadableProxy(process.stderr),\n\t\t};\n\t}\n}\n"]}]}