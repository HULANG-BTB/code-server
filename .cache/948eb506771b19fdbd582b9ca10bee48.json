{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/applicationInsights.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/applicationInsights.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"https\", \"os\", \"child_process\", \"crypto\"], function (require, exports, https, os, child_process_1, crypto_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.defaultClient = \"filler\";\n    class TelemetryClient {\n        constructor() {\n            this.channel = {\n                setUseDiskRetryCaching: () => undefined,\n            };\n            //\n        }\n        trackEvent(options) {\n            if (!options.properties) {\n                options.properties = {};\n            }\n            if (!options.measurements) {\n                options.measurements = {};\n            }\n            try {\n                const cpus = os.cpus();\n                // tslint:disable-next-line:no-any\n                options.measurements.cpu = {\n                    model: cpus[0].model,\n                    cores: cpus.length,\n                };\n            }\n            catch (ex) {\n                // Nothin\n            }\n            try {\n                // tslint:disable-next-line:no-any\n                options.measurements.memory = {\n                    virtual_free: os.freemem(),\n                    virtual_used: os.totalmem(),\n                };\n            }\n            catch (ex) {\n                //\n            }\n            try {\n                // tslint:disable:no-any\n                options.properties[\"common.shell\"] = os.userInfo().shell;\n                options.properties[\"common.release\"] = os.release();\n                options.properties[\"common.arch\"] = os.arch();\n                // tslint:enable:no-any\n            }\n            catch (ex) {\n                //\n            }\n            try {\n                // tslint:disable-next-line:no-any\n                options.properties[\"common.machineId\"] = machineIdSync();\n            }\n            catch (ex) {\n                //\n            }\n            try {\n                const request = https.request({\n                    host: \"v1.telemetry.coder.com\",\n                    port: 443,\n                    path: \"/track\",\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n                request.on(\"error\", () => {\n                    // Do nothing, we don\"t really care\n                });\n                request.write(JSON.stringify(options));\n                request.end();\n            }\n            catch (ex) {\n                // Suppress all errs\n            }\n        }\n        flush(options) {\n            options.callback();\n        }\n    }\n    exports.TelemetryClient = TelemetryClient;\n    const isWindowsProcessMixedOrNativeArchitecture = () => {\n        // detect if the node binary is the same arch as the Windows OS.\n        // or if this is 32 bit node on 64 bit windows.\n        if (process.platform !== \"win32\") {\n            return \"\";\n        }\n        if (process.arch === \"ia32\" && process.env.hasOwnProperty(\"PROCESSOR_ARCHITEW6432\")) {\n            return \"mixed\";\n        }\n        return \"native\";\n    };\n    let { platform } = process, win32RegBinPath = {\n        native: \"%windir%\\\\System32\",\n        mixed: \"%windir%\\\\sysnative\\\\cmd.exe /c %windir%\\\\System32\",\n        \"\": \"\",\n    }, guid = {\n        darwin: \"ioreg -rd1 -c IOPlatformExpertDevice\",\n        win32: `${win32RegBinPath[isWindowsProcessMixedOrNativeArchitecture()]}\\\\REG ` +\n            \"QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography \" +\n            \"/v MachineGuid\",\n        linux: \"( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :\",\n        freebsd: \"kenv -q smbios.system.uuid || sysctl -n kern.hostuuid\",\n    };\n    const hash = (guid) => {\n        return crypto_1.createHash(\"sha256\").update(guid).digest(\"hex\");\n    };\n    const expose = (result) => {\n        switch (platform) {\n            case \"darwin\":\n                return result\n                    .split(\"IOPlatformUUID\")[1]\n                    .split(\"\\n\")[0].replace(/\\=|\\s+|\\\"/ig, \"\")\n                    .toLowerCase();\n            case \"win32\":\n                return result\n                    .toString()\n                    .split(\"REG_SZ\")[1]\n                    .replace(/\\r+|\\n+|\\s+/ig, \"\")\n                    .toLowerCase();\n            case \"linux\":\n                return result\n                    .toString()\n                    .replace(/\\r+|\\n+|\\s+/ig, \"\")\n                    .toLowerCase();\n            case \"freebsd\":\n                return result\n                    .toString()\n                    .replace(/\\r+|\\n+|\\s+/ig, \"\")\n                    .toLowerCase();\n            default:\n                throw new Error(`Unsupported platform: ${process.platform}`);\n        }\n    };\n    let cachedMachineId;\n    const machineIdSync = () => {\n        if (cachedMachineId) {\n            return cachedMachineId;\n        }\n        let id = expose(child_process_1.execSync(guid[platform]).toString());\n        cachedMachineId = hash(id);\n        return cachedMachineId;\n    };\n});\n",null]}