{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/protocol/src/node/modules/spdlog.ts","dependencies":[{"path":"/home/coding/workspace/packages/protocol/src/node/modules/spdlog.ts","mtime":1555841535686},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../../../lib/vscode/src/typings/spdlog.d.ts\" />\nconst events_1 = require(\"events\");\n// tslint:disable completed-docs\nclass RotatingLoggerProxy {\n    constructor(logger) {\n        this.logger = logger;\n        this.emitter = new events_1.EventEmitter();\n    }\n    async trace(message) { this.logger.trace(message); }\n    async debug(message) { this.logger.debug(message); }\n    async info(message) { this.logger.info(message); }\n    async warn(message) { this.logger.warn(message); }\n    async error(message) { this.logger.error(message); }\n    async critical(message) { this.logger.critical(message); }\n    async setLevel(level) { this.logger.setLevel(level); }\n    async clearFormatters() { this.logger.clearFormatters(); }\n    async flush() { this.logger.flush(); }\n    async drop() { this.logger.drop(); }\n    async onDone(cb) {\n        this.emitter.on(\"dispose\", cb);\n    }\n    async dispose() {\n        await this.flush();\n        this.emitter.emit(\"dispose\");\n        this.emitter.removeAllListeners();\n    }\n    // tslint:disable-next-line no-any\n    async onEvent(_cb) {\n        // No events.\n    }\n}\nexports.RotatingLoggerProxy = RotatingLoggerProxy;\nclass SpdlogModuleProxy {\n    async createLogger(name, filePath, fileSize, fileCount) {\n        return new RotatingLoggerProxy(new (require(\"spdlog\").RotatingLogger)(name, filePath, fileSize, fileCount));\n    }\n    async setAsyncMode(bufferSize, flushInterval) {\n        require(\"spdlog\").setAsyncMode(bufferSize, flushInterval);\n    }\n}\nexports.SpdlogModuleProxy = SpdlogModuleProxy;\n",{"version":3,"file":"/home/coding/workspace/packages/protocol/src/node/modules/spdlog.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/protocol/src/node/modules/spdlog.ts"],"names":[],"mappings":";;AAAA,0EAA0E;AAC1E,mCAAsC;AAItC,gCAAgC;AAEhC,MAAa,mBAAmB;IAG/B,YAAoC,MAA6B;QAA7B,WAAM,GAAN,MAAM,CAAuB;QAFhD,YAAO,GAAG,IAAI,qBAAY,EAAE,CAAC;IAEsB,CAAC;IAE9D,KAAK,CAAC,KAAK,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5E,KAAK,CAAC,KAAK,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5E,KAAK,CAAC,IAAI,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1E,KAAK,CAAC,IAAI,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1E,KAAK,CAAC,KAAK,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5E,KAAK,CAAC,QAAQ,CAAE,OAAe,IAAmB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClF,KAAK,CAAC,QAAQ,CAAE,KAAa,IAAmB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9E,KAAK,CAAC,eAAe,KAAqB,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;IAC1E,KAAK,CAAC,KAAK,KAAqB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACtD,KAAK,CAAC,IAAI,KAAqB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAEpD,KAAK,CAAC,MAAM,CAAC,EAAc;QACjC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,OAAO;QACnB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;IACnC,CAAC;IAED,kCAAkC;IAC3B,KAAK,CAAC,OAAO,CAAC,GAA4C;QAChE,aAAa;IACd,CAAC;CACD;AA9BD,kDA8BC;AAED,MAAa,iBAAiB;IACtB,KAAK,CAAC,YAAY,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB,EAAE,SAAiB;QAC5F,OAAO,IAAI,mBAAmB,CAAC,KAAK,OAAO,CAAC,QAAQ,CAA6B,CAAC,cAAc,EAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IACxI,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,UAAkB,EAAE,aAAqB;QAClE,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC;CACD;AARD,8CAQC","sourcesContent":["/// <reference path=\"../../../../../lib/vscode/src/typings/spdlog.d.ts\" />\nimport { EventEmitter } from \"events\";\nimport * as spdlog from \"spdlog\";\nimport { ServerProxy } from \"../../common/proxy\";\n\n// tslint:disable completed-docs\n\nexport class RotatingLoggerProxy implements ServerProxy {\n\tprivate readonly emitter = new EventEmitter();\n\n\tpublic constructor(private readonly logger: spdlog.RotatingLogger) {}\n\n\tpublic async trace (message: string): Promise<void> { this.logger.trace(message); }\n\tpublic async debug (message: string): Promise<void> { this.logger.debug(message); }\n\tpublic async info (message: string): Promise<void> { this.logger.info(message); }\n\tpublic async warn (message: string): Promise<void> { this.logger.warn(message); }\n\tpublic async error (message: string): Promise<void> { this.logger.error(message); }\n\tpublic async critical (message: string): Promise<void> { this.logger.critical(message); }\n\tpublic async setLevel (level: number): Promise<void> { this.logger.setLevel(level); }\n\tpublic async clearFormatters (): Promise<void> { this.logger.clearFormatters(); }\n\tpublic async flush (): Promise<void> { this.logger.flush(); }\n\tpublic async drop (): Promise<void> { this.logger.drop(); }\n\n\tpublic async onDone(cb: () => void): Promise<void> {\n\t\tthis.emitter.on(\"dispose\", cb);\n\t}\n\n\tpublic async dispose(): Promise<void> {\n\t\tawait this.flush();\n\t\tthis.emitter.emit(\"dispose\");\n\t\tthis.emitter.removeAllListeners();\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async onEvent(_cb: (event: string, ...args: any[]) => void): Promise<void> {\n\t\t// No events.\n\t}\n}\n\nexport class SpdlogModuleProxy {\n\tpublic async createLogger(name: string, filePath: string, fileSize: number, fileCount: number): Promise<RotatingLoggerProxy> {\n\t\treturn new RotatingLoggerProxy(new (require(\"spdlog\") as typeof import(\"spdlog\")).RotatingLogger(name, filePath, fileSize, fileCount));\n\t}\n\n\tpublic async setAsyncMode(bufferSize: number, flushInterval: number): Promise<void> {\n\t\trequire(\"spdlog\").setAsyncMode(bufferSize, flushInterval);\n\t}\n}\n"]}]}