{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/contrib/terminal/common/terminal\", \"vs/workbench/contrib/externalTerminal/common/externalTerminal\", \"vs/workbench/contrib/debug/node/terminals\"], function (require, exports, nls, terminal_1, externalTerminal_1, terminals_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TerminalLauncher = class TerminalLauncher {\n        constructor(terminalService, externalTerminalService) {\n            this.terminalService = terminalService;\n            this.externalTerminalService = externalTerminalService;\n        }\n        runInTerminal(args, config) {\n            if (args.kind === 'external') {\n                return this.externalTerminalService.runInTerminal(args.title || '', args.cwd, args.args, args.env || {});\n            }\n            if (!this.terminalDisposedListener) {\n                // React on terminal disposed and check if that is the debug terminal #12956\n                this.terminalDisposedListener = this.terminalService.onInstanceDisposed(terminal => {\n                    if (this.integratedTerminalInstance && this.integratedTerminalInstance.id === terminal.id) {\n                        this.integratedTerminalInstance = undefined;\n                    }\n                });\n            }\n            let t = this.integratedTerminalInstance;\n            if ((t && (typeof t.processId === 'number') && terminals_1.hasChildProcesses(t.processId)) || !t) {\n                t = this.terminalService.createTerminal({ name: args.title || nls.localize('debug.terminal.title', \"debuggee\") });\n                this.integratedTerminalInstance = t;\n            }\n            this.terminalService.setActiveInstance(t);\n            this.terminalService.showPanel(true);\n            return new Promise((resolve, error) => {\n                if (t && typeof t.processId === 'number') {\n                    // no need to wait\n                    resolve(t.processId);\n                }\n                // shell not ready: wait for ready event\n                const toDispose = t.onProcessIdReady(t => {\n                    toDispose.dispose();\n                    resolve(t.processId);\n                });\n                // do not wait longer than 5 seconds\n                setTimeout(_ => {\n                    error(new Error('terminal shell timeout'));\n                }, 5000);\n            }).then(shellProcessId => {\n                const command = terminals_1.prepareCommand(args, config);\n                t.sendText(command, true);\n                return shellProcessId;\n            });\n        }\n    };\n    TerminalLauncher = __decorate([\n        __param(0, terminal_1.ITerminalService),\n        __param(1, externalTerminal_1.IExternalTerminalService)\n    ], TerminalLauncher);\n    exports.TerminalLauncher = TerminalLauncher;\n});\n",null]}