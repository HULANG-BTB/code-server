{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/services/editorWorkerServiceImpl\"], function (require, exports, editorWorkerServiceImpl_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Create a new web worker that has model syncing capabilities built in.\n     * Specify an AMD module to load that will `create` an object that will be proxied.\n     */\n    function createWebWorker(modelService, opts) {\n        return new MonacoWebWorkerImpl(modelService, opts);\n    }\n    exports.createWebWorker = createWebWorker;\n    class MonacoWebWorkerImpl extends editorWorkerServiceImpl_1.EditorWorkerClient {\n        constructor(modelService, opts) {\n            super(modelService, opts.label);\n            this._foreignModuleId = opts.moduleId;\n            this._foreignModuleCreateData = opts.createData || null;\n            this._foreignProxy = null;\n        }\n        _getForeignProxy() {\n            if (!this._foreignProxy) {\n                this._foreignProxy = this._getProxy().then((proxy) => {\n                    return proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData).then((foreignMethods) => {\n                        this._foreignModuleCreateData = null;\n                        const proxyMethodRequest = (method, args) => {\n                            return proxy.fmr(method, args);\n                        };\n                        const createProxyMethod = (method, proxyMethodRequest) => {\n                            return function () {\n                                const args = Array.prototype.slice.call(arguments, 0);\n                                return proxyMethodRequest(method, args);\n                            };\n                        };\n                        let foreignProxy = {};\n                        for (const foreignMethod of foreignMethods) {\n                            foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n                        }\n                        return foreignProxy;\n                    });\n                });\n            }\n            return this._foreignProxy;\n        }\n        getProxy() {\n            return this._getForeignProxy();\n        }\n        withSyncedResources(resources) {\n            return this._withSyncedResources(resources).then(_ => this.getProxy());\n        }\n    }\n});\n",null]}