{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/quickinput/common/quickInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/quickinput/common/quickInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IQuickInputService = instantiation_1.createDecorator('quickInputService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/quickinput/common/quickInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/quickinput/common/quickInput.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AA4OpE,QAAA,kBAAkB,GAAG,+BAAe,CAAqB,mBAAmB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\n\nexport interface IQuickPickItem {\n\ttype?: 'item';\n\tid?: string;\n\tlabel: string;\n\tdescription?: string;\n\tdetail?: string;\n\ticonClasses?: string[];\n\tbuttons?: IQuickInputButton[];\n\tpicked?: boolean;\n\talwaysShow?: boolean;\n}\n\nexport interface IQuickPickSeparator {\n\ttype: 'separator';\n\tlabel?: string;\n}\n\nexport interface IKeyMods {\n\treadonly ctrlCmd: boolean;\n\treadonly alt: boolean;\n}\n\nexport interface IQuickNavigateConfiguration {\n\tkeybindings: ResolvedKeybinding[];\n}\n\nexport interface IPickOptions<T extends IQuickPickItem> {\n\n\t/**\n\t * an optional string to show as place holder in the input box to guide the user what she picks on\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * an optional flag to include the description when filtering the picks\n\t */\n\tmatchOnDescription?: boolean;\n\n\t/**\n\t * an optional flag to include the detail when filtering the picks\n\t */\n\tmatchOnDetail?: boolean;\n\n\t/**\n\t * an optional flag to filter the picks based on label. Defaults to true.\n\t */\n\tmatchOnLabel?: boolean;\n\n\t/**\n\t * an option flag to control whether focus is always automatically brought to a list item. Defaults to true.\n\t */\n\tautoFocusOnList?: boolean;\n\n\t/**\n\t * an optional flag to not close the picker on focus lost\n\t */\n\tignoreFocusLost?: boolean;\n\n\t/**\n\t * an optional flag to make this picker multi-select\n\t */\n\tcanPickMany?: boolean;\n\n\t/**\n\t * enables quick navigate in the picker to open an element without typing\n\t */\n\tquickNavigate?: IQuickNavigateConfiguration;\n\n\t/**\n\t * a context key to set when this picker is active\n\t */\n\tcontextKey?: string;\n\n\t/**\n\t * an optional property for the item to focus initially.\n\t */\n\tactiveItem?: Promise<T> | T;\n\n\tonKeyMods?: (keyMods: IKeyMods) => void;\n\tonDidFocus?: (entry: T) => void;\n\tonDidTriggerItemButton?: (context: IQuickPickItemButtonContext<T>) => void;\n}\n\nexport interface IInputOptions {\n\n\t/**\n\t * the value to prefill in the input box\n\t */\n\tvalue?: string;\n\n\t/**\n\t * the selection of value, default to the whole word\n\t */\n\tvalueSelection?: [number, number];\n\n\t/**\n\t * the text to display underneath the input box\n\t */\n\tprompt?: string;\n\n\t/**\n\t * an optional string to show as place holder in the input box to guide the user what to type\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * set to true to show a password prompt that will not show the typed value\n\t */\n\tpassword?: boolean;\n\n\tignoreFocusLost?: boolean;\n\n\t/**\n\t * an optional function that is used to validate user input.\n\t */\n\tvalidateInput?: (input: string) => Promise<string | null | undefined>;\n}\n\nexport interface IQuickInput {\n\n\ttitle: string | undefined;\n\n\tstep: number | undefined;\n\n\ttotalSteps: number | undefined;\n\n\tenabled: boolean;\n\n\tcontextKey: string | undefined;\n\n\tbusy: boolean;\n\n\tignoreFocusOut: boolean;\n\n\tshow(): void;\n\n\thide(): void;\n\n\tonDidHide: Event<void>;\n\n\tdispose(): void;\n}\n\nexport interface IQuickPick<T extends IQuickPickItem> extends IQuickInput {\n\n\tvalue: string;\n\n\tplaceholder: string | undefined;\n\n\treadonly onDidChangeValue: Event<string>;\n\n\treadonly onDidAccept: Event<void>;\n\n\tbuttons: ReadonlyArray<IQuickInputButton>;\n\n\treadonly onDidTriggerButton: Event<IQuickInputButton>;\n\n\treadonly onDidTriggerItemButton: Event<IQuickPickItemButtonEvent<T>>;\n\n\titems: ReadonlyArray<T | IQuickPickSeparator>;\n\n\tcanSelectMany: boolean;\n\n\tmatchOnDescription: boolean;\n\n\tmatchOnDetail: boolean;\n\n\tmatchOnLabel: boolean;\n\n\tautoFocusOnList: boolean;\n\n\tquickNavigate: IQuickNavigateConfiguration | undefined;\n\n\tactiveItems: ReadonlyArray<T>;\n\n\treadonly onDidChangeActive: Event<T[]>;\n\n\tselectedItems: ReadonlyArray<T>;\n\n\treadonly onDidChangeSelection: Event<T[]>;\n\n\treadonly keyMods: IKeyMods;\n\n\tvalueSelection: Readonly<[number, number]> | undefined;\n\n\tvalidationMessage: string | undefined;\n\n\tinputHasFocus(): boolean;\n}\n\nexport interface IInputBox extends IQuickInput {\n\n\tvalue: string;\n\n\tvalueSelection: Readonly<[number, number]> | undefined;\n\n\tplaceholder: string | undefined;\n\n\tpassword: boolean;\n\n\treadonly onDidChangeValue: Event<string>;\n\n\treadonly onDidAccept: Event<void>;\n\n\tbuttons: ReadonlyArray<IQuickInputButton>;\n\n\treadonly onDidTriggerButton: Event<IQuickInputButton>;\n\n\tprompt: string | undefined;\n\n\tvalidationMessage: string | undefined;\n}\n\nexport interface IQuickInputButton {\n\t/** iconPath or iconClass required */\n\ticonPath?: { dark: URI; light?: URI; };\n\t/** iconPath or iconClass required */\n\ticonClass?: string;\n\ttooltip?: string;\n}\n\nexport interface IQuickPickItemButtonEvent<T extends IQuickPickItem> {\n\tbutton: IQuickInputButton;\n\titem: T;\n}\n\nexport interface IQuickPickItemButtonContext<T extends IQuickPickItem> extends IQuickPickItemButtonEvent<T> {\n\tremoveItem(): void;\n}\n\nexport const IQuickInputService = createDecorator<IQuickInputService>('quickInputService');\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport type QuickPickInput<T = IQuickPickItem> = T | IQuickPickSeparator;\n\nexport interface IQuickInputService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Opens the quick input box for selecting items and returns a promise with the user selected item(s) if any.\n\t */\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: true }, token?: CancellationToken): Promise<T[]>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: false }, token?: CancellationToken): Promise<T>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: Omit<IPickOptions<T>, 'canPickMany'>, token?: CancellationToken): Promise<T>;\n\n\t/**\n\t * Opens the quick input box for text input and returns a promise with the user typed value if any.\n\t */\n\tinput(options?: IInputOptions, token?: CancellationToken): Promise<string>;\n\n\tbackButton: IQuickInputButton;\n\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T>;\n\tcreateInputBox(): IInputBox;\n\n\tfocus(): void;\n\n\ttoggle(): void;\n\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration): void;\n\n\taccept(): Promise<void>;\n\n\tback(): Promise<void>;\n\n\tcancel(): Promise<void>;\n}\n"]}]}