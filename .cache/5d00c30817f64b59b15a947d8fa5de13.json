{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar network_1 = require(\"vs/base/common/network\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar request_1 = require(\"vs/platform/request/node/request\");\nvar request_2 = require(\"vs/base/node/request\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar path_1 = require(\"vs/base/common/path\");\nvar os_1 = require(\"os\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar DownloadService = /** @class */ (function () {\n    function DownloadService(requestService) {\n        this.requestService = requestService;\n    }\n    DownloadService.prototype.download = function (uri, target, cancellationToken) {\n        if (target === void 0) { target = path_1.join(os_1.tmpdir(), uuid_1.generateUuid()); }\n        if (cancellationToken === void 0) { cancellationToken = cancellation_1.CancellationToken.None; }\n        if (uri.scheme === network_1.Schemas.file) {\n            return pfs_1.copy(uri.fsPath, target).then(function () { return target; });\n        }\n        var options = { type: 'GET', url: uri.toString() };\n        return this.requestService.request(options, cancellationToken)\n            .then(function (context) {\n            if (context.res.statusCode === 200) {\n                return request_2.download(target, context).then(function () { return target; });\n            }\n            return request_2.asText(context)\n                .then(function (message) { return Promise.reject(new Error(\"Expected 200, got back \" + context.res.statusCode + \" instead.\\n\\n\" + message)); });\n        });\n    };\n    DownloadService = tslib_1.__decorate([\n        tslib_1.__param(0, request_1.IRequestService)\n    ], DownloadService);\n    return DownloadService;\n}());\nexports.DownloadService = DownloadService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAIhG,kDAAiD;AACjD,wCAAwC;AACxC,4DAAmE;AACnE,gDAAwD;AACxD,4DAAgE;AAChE,4CAA2C;AAC3C,yBAA4B;AAC5B,4CAAmD;AAEnD;IAIC,yBACmC,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IAC9D,CAAC;IAEL,kCAAQ,GAAR,UAAS,GAAQ,EAAE,MAA+C,EAAE,iBAA6D;QAA9G,uBAAA,EAAA,SAAiB,WAAI,CAAC,WAAM,EAAE,EAAE,mBAAY,EAAE,CAAC;QAAE,kCAAA,EAAA,oBAAuC,gCAAiB,CAAC,IAAI;QAChI,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;YAChC,OAAO,UAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;SACnD;QACD,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC;aAC5D,IAAI,CAAC,UAAA,OAAO;YACZ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;gBACnC,OAAO,kBAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;aACpD;YACD,OAAO,gBAAM,CAAC,OAAO,CAAC;iBACpB,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA0B,OAAO,CAAC,GAAG,CAAC,UAAU,qBAAgB,OAAS,CAAC,CAAC,EAApG,CAAoG,CAAC,CAAC;QACzH,CAAC,CAAC,CAAC;IACL,CAAC;IArBW,eAAe;QAKzB,mBAAA,yBAAe,CAAA;OALL,eAAe,CAsB3B;IAAD,sBAAC;CAAA,AAtBD,IAsBC;AAtBY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { copy } from 'vs/base/node/pfs';\nimport { IRequestService } from 'vs/platform/request/node/request';\nimport { asText, download } from 'vs/base/node/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { join } from 'vs/base/common/path';\nimport { tmpdir } from 'os';\nimport { generateUuid } from 'vs/base/common/uuid';\n\nexport class DownloadService implements IDownloadService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IRequestService private readonly requestService: IRequestService\n\t) { }\n\n\tdownload(uri: URI, target: string = join(tmpdir(), generateUuid()), cancellationToken: CancellationToken = CancellationToken.None): Promise<string> {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn copy(uri.fsPath, target).then(() => target);\n\t\t}\n\t\tconst options = { type: 'GET', url: uri.toString() };\n\t\treturn this.requestService.request(options, cancellationToken)\n\t\t\t.then(context => {\n\t\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\t\treturn download(target, context).then(() => target);\n\t\t\t\t}\n\t\t\t\treturn asText(context)\n\t\t\t\t\t.then(message => Promise.reject(new Error(`Expected 200, got back ${context.res.statusCode} instead.\\n\\n${message}`)));\n\t\t\t});\n\t}\n}\n"]}]}