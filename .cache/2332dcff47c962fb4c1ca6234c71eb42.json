{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar nls_1 = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar ExtensionActivationProgress = /** @class */ (function () {\n    function ExtensionActivationProgress(extensionService, progressService, logService) {\n        var options = {\n            location: progress_1.ProgressLocation.Window,\n            title: nls_1.localize('activation', \"Activating Extensions...\")\n        };\n        this._listener = extensionService.onWillActivateByEvent(function (e) {\n            logService.trace('onWillActivateByEvent: ', e.event);\n            progressService.withProgress(options, function (_) { return Promise.race([e.activation, async_1.timeout(5000)]); });\n        });\n    }\n    ExtensionActivationProgress.prototype.dispose = function () {\n        this._listener.dispose();\n    };\n    ExtensionActivationProgress = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService),\n        tslib_1.__param(1, progress_1.IProgressService2),\n        tslib_1.__param(2, log_1.ILogService)\n    ], ExtensionActivationProgress);\n    return ExtensionActivationProgress;\n}());\nexports.ExtensionActivationProgress = ExtensionActivationProgress;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,iFAAuF;AACvF,iEAA2F;AAC3F,8BAAkC;AAElC,8CAA+C;AAC/C,kDAAyD;AAEzD;IAIC,qCACoB,gBAAmC,EACnC,eAAkC,EACxC,UAAuB;QAGpC,IAAM,OAAO,GAAG;YACf,QAAQ,EAAE,2BAAgB,CAAC,MAAM;YACjC,KAAK,EAAE,cAAQ,CAAC,YAAY,EAAE,0BAA0B,CAAC;SACzD,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,qBAAqB,CAAC,UAAA,CAAC;YACxD,UAAU,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YACrD,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAA3C,CAA2C,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,6CAAO,GAAP;QACC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAvBW,2BAA2B;QAKrC,mBAAA,8BAAiB,CAAA;QACjB,mBAAA,4BAAiB,CAAA;QACjB,mBAAA,iBAAW,CAAA;OAPD,2BAA2B,CAwBvC;IAAD,kCAAC;CAAA,AAxBD,IAwBC;AAxBY,kEAA2B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProgressService2, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { localize } from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { timeout } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class ExtensionActivationProgress implements IWorkbenchContribution {\n\n\tprivate readonly _listener: IDisposable;\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IProgressService2 progressService: IProgressService2,\n\t\t@ILogService logService: ILogService,\n\t) {\n\n\t\tconst options = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('activation', \"Activating Extensions...\")\n\t\t};\n\n\t\tthis._listener = extensionService.onWillActivateByEvent(e => {\n\t\t\tlogService.trace('onWillActivateByEvent: ', e.event);\n\t\t\tprogressService.withProgress(options, _ => Promise.race([e.activation, timeout(5000)]));\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._listener.dispose();\n\t}\n}\n"]}]}