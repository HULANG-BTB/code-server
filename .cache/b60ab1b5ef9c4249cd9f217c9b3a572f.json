{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/splash/electron-browser/partsSplash.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/splash/electron-browser/partsSplash.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/base/browser/browser\", \"vs/base/browser/dom\", \"vs/base/common/color\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/workbench/services/broadcast/common/broadcast\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/registry/common/platform\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/workbench/browser/parts/editor/editor\", \"vs/workbench/common/contributions\", \"vs/workbench/common/theme\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/platform/environment/common/environment\", \"vs/platform/files/common/files\", \"vs/base/common/uri\", \"vs/workbench/services/editor/common/editorGroupsService\", \"vs/platform/configuration/common/configuration\"], function (require, exports, path_1, browser_1, dom_1, color_1, event_1, lifecycle_1, broadcast_1, lifecycle_2, platform_1, colorRegistry_1, themeService_1, editor_1, contributions_1, themes, layoutService_1, environment_1, files_1, uri_1, editorGroupsService_1, configuration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let PartsSplash = class PartsSplash {\n        constructor(_themeService, _layoutService, _fileService, _envService, _broadcastService, lifecycleService, editorGroupsService, configService) {\n            this._themeService = _themeService;\n            this._layoutService = _layoutService;\n            this._fileService = _fileService;\n            this._envService = _envService;\n            this._broadcastService = _broadcastService;\n            this._disposables = [];\n            lifecycleService.when(lifecycle_2.LifecyclePhase.Restored).then(_ => this._removePartsSplash());\n            event_1.Event.debounce(event_1.Event.any(browser_1.onDidChangeFullscreen, editorGroupsService.onDidLayout), () => { }, 800)(this._savePartsSplash, this, this._disposables);\n            configService.onDidChangeConfiguration(e => {\n                this._didChangeTitleBarStyle = e.affectsConfiguration('window.titleBarStyle');\n            }, this, this._disposables);\n        }\n        dispose() {\n            lifecycle_1.dispose(this._disposables);\n        }\n        _savePartsSplash() {\n            const baseTheme = themeService_1.getThemeTypeSelector(this._themeService.getTheme().type);\n            const colorInfo = {\n                foreground: this._getThemeColor(colorRegistry_1.foreground),\n                editorBackground: this._getThemeColor(colorRegistry_1.editorBackground),\n                titleBarBackground: this._getThemeColor(themes.TITLE_BAR_ACTIVE_BACKGROUND),\n                activityBarBackground: this._getThemeColor(themes.ACTIVITY_BAR_BACKGROUND),\n                sideBarBackground: this._getThemeColor(themes.SIDE_BAR_BACKGROUND),\n                statusBarBackground: this._getThemeColor(themes.STATUS_BAR_BACKGROUND),\n                statusBarNoFolderBackground: this._getThemeColor(themes.STATUS_BAR_NO_FOLDER_BACKGROUND),\n            };\n            const layoutInfo = !this._shouldSaveLayoutInfo() ? undefined : {\n                sideBarSide: this._layoutService.getSideBarPosition() === layoutService_1.Position.RIGHT ? 'right' : 'left',\n                editorPartMinWidth: editor_1.DEFAULT_EDITOR_MIN_DIMENSIONS.width,\n                titleBarHeight: dom_1.getTotalHeight(this._layoutService.getContainer(layoutService_1.Parts.TITLEBAR_PART)),\n                activityBarWidth: dom_1.getTotalWidth(this._layoutService.getContainer(layoutService_1.Parts.ACTIVITYBAR_PART)),\n                sideBarWidth: dom_1.getTotalWidth(this._layoutService.getContainer(layoutService_1.Parts.SIDEBAR_PART)),\n                statusBarHeight: dom_1.getTotalHeight(this._layoutService.getContainer(layoutService_1.Parts.STATUSBAR_PART)),\n            };\n            this._fileService.updateContent(uri_1.URI.file(path_1.join(this._envService.userDataPath, 'rapid_render.json')), JSON.stringify({\n                id: PartsSplash._splashElementId,\n                colorInfo,\n                layoutInfo,\n                baseTheme\n            }), { encoding: 'utf8' });\n            if (baseTheme !== this._lastBaseTheme || colorInfo.editorBackground !== this._lastBackground) {\n                // notify the main window on background color changes: the main window sets the background color to new windows\n                this._lastBaseTheme = baseTheme;\n                this._lastBackground = colorInfo.editorBackground;\n                // the color needs to be in hex\n                const backgroundColor = this._themeService.getTheme().getColor(colorRegistry_1.editorBackground) || themes.WORKBENCH_BACKGROUND(this._themeService.getTheme());\n                this._broadcastService.broadcast({ channel: 'vscode:changeColorTheme', payload: JSON.stringify({ baseTheme, background: color_1.Color.Format.CSS.formatHex(backgroundColor) }) });\n            }\n        }\n        _getThemeColor(id) {\n            const theme = this._themeService.getTheme();\n            const color = theme.getColor(id);\n            return color ? color.toString() : undefined;\n        }\n        _shouldSaveLayoutInfo() {\n            return !browser_1.isFullscreen() && !this._envService.isExtensionDevelopment && !this._didChangeTitleBarStyle;\n        }\n        _removePartsSplash() {\n            let element = document.getElementById(PartsSplash._splashElementId);\n            if (element) {\n                element.style.display = 'none';\n            }\n            // remove initial colors\n            let defaultStyles = document.head.getElementsByClassName('initialShellColors');\n            if (defaultStyles.length) {\n                document.head.removeChild(defaultStyles[0]);\n            }\n        }\n    };\n    PartsSplash._splashElementId = 'monaco-parts-splash';\n    PartsSplash = __decorate([\n        __param(0, themeService_1.IThemeService),\n        __param(1, layoutService_1.IWorkbenchLayoutService),\n        __param(2, files_1.IFileService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, broadcast_1.IBroadcastService),\n        __param(5, lifecycle_2.ILifecycleService),\n        __param(6, editorGroupsService_1.IEditorGroupsService),\n        __param(7, configuration_1.IConfigurationService)\n    ], PartsSplash);\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(PartsSplash, lifecycle_2.LifecyclePhase.Starting);\n});\n",null]}