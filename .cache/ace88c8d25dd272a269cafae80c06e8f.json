{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageSelector.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/languageSelector.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/glob\"], function (require, exports, glob_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\n        if (Array.isArray(selector)) {\n            // array -> take max individual value\n            let ret = 0;\n            for (const filter of selector) {\n                const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n                if (value === 10) {\n                    return value; // already at the highest\n                }\n                if (value > ret) {\n                    ret = value;\n                }\n            }\n            return ret;\n        }\n        else if (typeof selector === 'string') {\n            if (!candidateIsSynchronized) {\n                return 0;\n            }\n            // short-hand notion, desugars to\n            // 'fooLang' -> { language: 'fooLang'}\n            // '*' -> { language: '*' }\n            if (selector === '*') {\n                return 5;\n            }\n            else if (selector === candidateLanguage) {\n                return 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (selector) {\n            // filter -> select accordingly, use defaults for scheme\n            const { language, pattern, scheme, hasAccessToAllModels } = selector;\n            if (!candidateIsSynchronized && !hasAccessToAllModels) {\n                return 0;\n            }\n            let ret = 0;\n            if (scheme) {\n                if (scheme === candidateUri.scheme) {\n                    ret = 10;\n                }\n                else if (scheme === '*') {\n                    ret = 5;\n                }\n                else {\n                    return 0;\n                }\n            }\n            if (language) {\n                if (language === candidateLanguage) {\n                    ret = 10;\n                }\n                else if (language === '*') {\n                    ret = Math.max(ret, 5);\n                }\n                else {\n                    return 0;\n                }\n            }\n            if (pattern) {\n                if (pattern === candidateUri.fsPath || glob_1.match(pattern, candidateUri.fsPath)) {\n                    ret = 10;\n                }\n                else {\n                    return 0;\n                }\n            }\n            return ret;\n        }\n        else {\n            return 0;\n        }\n    }\n    exports.score = score;\n});\n",null]}