{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/history.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/history.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/iterator\"], function (require, exports, iterator_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class HistoryNavigator {\n        constructor(history = [], limit = 10) {\n            this._initialize(history);\n            this._limit = limit;\n            this._onChange();\n        }\n        getHistory() {\n            return this._elements;\n        }\n        add(t) {\n            this._history.delete(t);\n            this._history.add(t);\n            this._onChange();\n        }\n        next() {\n            return this._navigator.next();\n        }\n        previous() {\n            return this._navigator.previous();\n        }\n        current() {\n            return this._navigator.current();\n        }\n        parent() {\n            return null;\n        }\n        first() {\n            return this._navigator.first();\n        }\n        last() {\n            return this._navigator.last();\n        }\n        has(t) {\n            return this._history.has(t);\n        }\n        clear() {\n            this._initialize([]);\n            this._onChange();\n        }\n        _onChange() {\n            this._reduceToLimit();\n            this._navigator = new iterator_1.ArrayNavigator(this._elements, 0, this._elements.length, this._elements.length);\n        }\n        _reduceToLimit() {\n            const data = this._elements;\n            if (data.length > this._limit) {\n                this._initialize(data.slice(data.length - this._limit));\n            }\n        }\n        _initialize(history) {\n            this._history = new Set();\n            for (const entry of history) {\n                this._history.add(entry);\n            }\n        }\n        get _elements() {\n            const elements = [];\n            this._history.forEach(e => elements.push(e));\n            return elements;\n        }\n    }\n    exports.HistoryNavigator = HistoryNavigator;\n});\n",null]}