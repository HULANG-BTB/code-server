{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalFindWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalFindWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar simpleFindWidget_1 = require(\"vs/editor/contrib/find/simpleFindWidget\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar TerminalFindWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalFindWidget, _super);\n    function TerminalFindWidget(findState, _contextViewService, _contextKeyService, _terminalService) {\n        var _this = _super.call(this, _contextViewService, _contextKeyService, findState, true) || this;\n        _this._contextKeyService = _contextKeyService;\n        _this._terminalService = _terminalService;\n        _this._register(findState.onFindReplaceStateChange(function () {\n            _this.show();\n        }));\n        _this._findInputFocused = terminal_1.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_FOCUSED.bindTo(_this._contextKeyService);\n        _this._findWidgetFocused = terminal_1.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_FOCUSED.bindTo(_this._contextKeyService);\n        return _this;\n    }\n    TerminalFindWidget.prototype.find = function (previous) {\n        var instance = this._terminalService.getActiveInstance();\n        if (instance !== null) {\n            if (previous) {\n                instance.findPrevious(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue() });\n            }\n            else {\n                instance.findNext(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue() });\n            }\n        }\n    };\n    TerminalFindWidget.prototype.hide = function () {\n        _super.prototype.hide.call(this);\n        var instance = this._terminalService.getActiveInstance();\n        if (instance) {\n            instance.focus();\n        }\n    };\n    TerminalFindWidget.prototype.onInputChanged = function () {\n        // Ignore input changes for now\n        var instance = this._terminalService.getActiveInstance();\n        if (instance !== null) {\n            instance.findNext(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue(), incremental: true });\n        }\n    };\n    TerminalFindWidget.prototype.onFocusTrackerFocus = function () {\n        var instance = this._terminalService.getActiveInstance();\n        if (instance) {\n            instance.notifyFindWidgetFocusChanged(true);\n        }\n        this._findWidgetFocused.set(true);\n    };\n    TerminalFindWidget.prototype.onFocusTrackerBlur = function () {\n        var instance = this._terminalService.getActiveInstance();\n        if (instance) {\n            instance.notifyFindWidgetFocusChanged(false);\n        }\n        this._findWidgetFocused.reset();\n    };\n    TerminalFindWidget.prototype.onFindInputFocusTrackerFocus = function () {\n        this._findInputFocused.set(true);\n    };\n    TerminalFindWidget.prototype.onFindInputFocusTrackerBlur = function () {\n        this._findInputFocused.reset();\n    };\n    TerminalFindWidget = tslib_1.__decorate([\n        tslib_1.__param(1, contextView_1.IContextViewService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, terminal_1.ITerminalService)\n    ], TerminalFindWidget);\n    return TerminalFindWidget;\n}(simpleFindWidget_1.SimpleFindWidget));\nexports.TerminalFindWidget = TerminalFindWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalFindWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalFindWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SimpleFindWidget } from 'vs/editor/contrib/find/simpleFindWidget';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { ITerminalService, KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_FOCUSED, KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_FOCUSED } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { FindReplaceState } from 'vs/editor/contrib/find/findState';\n\nexport class TerminalFindWidget extends SimpleFindWidget {\n\tprotected _findInputFocused: IContextKey<boolean>;\n\tprotected _findWidgetFocused: IContextKey<boolean>;\n\n\tconstructor(\n\t\tfindState: FindReplaceState,\n\t\t@IContextViewService _contextViewService: IContextViewService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(_contextViewService, _contextKeyService, findState, true);\n\t\tthis._register(findState.onFindReplaceStateChange(() => {\n\t\t\tthis.show();\n\t\t}));\n\t\tthis._findInputFocused = KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_FOCUSED.bindTo(this._contextKeyService);\n\t\tthis._findWidgetFocused = KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_FOCUSED.bindTo(this._contextKeyService);\n\t}\n\n\tpublic find(previous: boolean) {\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (instance !== null) {\n\t\t\tif (previous) {\n\t\t\t\tinstance.findPrevious(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue() });\n\t\t\t} else {\n\t\t\t\tinstance.findNext(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue() });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic hide() {\n\t\tsuper.hide();\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.focus();\n\t\t}\n\t}\n\n\tprotected onInputChanged() {\n\t\t// Ignore input changes for now\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (instance !== null) {\n\t\t\tinstance.findNext(this.inputValue, { regex: this._getRegexValue(), wholeWord: this._getWholeWordValue(), caseSensitive: this._getCaseSensitiveValue(), incremental: true });\n\t\t}\n\t}\n\n\tprotected onFocusTrackerFocus() {\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.notifyFindWidgetFocusChanged(true);\n\t\t}\n\t\tthis._findWidgetFocused.set(true);\n\t}\n\n\tprotected onFocusTrackerBlur() {\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.notifyFindWidgetFocusChanged(false);\n\t\t}\n\t\tthis._findWidgetFocused.reset();\n\t}\n\n\tprotected onFindInputFocusTrackerFocus() {\n\t\tthis._findInputFocused.set(true);\n\t}\n\n\tprotected onFindInputFocusTrackerBlur() {\n\t\tthis._findInputFocused.reset();\n\t}\n}"]}]}