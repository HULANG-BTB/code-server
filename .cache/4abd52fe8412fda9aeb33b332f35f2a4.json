{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadExtensionService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadExtensionService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_2 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar MainThreadExtensionService = /** @class */ (function () {\n    function MainThreadExtensionService(extHostContext, extensionService, notificationService, extensionsWorkbenchService, windowService) {\n        this._extensionService = extensionService;\n        this._notificationService = notificationService;\n        this._extensionsWorkbenchService = extensionsWorkbenchService;\n        this._windowService = windowService;\n    }\n    MainThreadExtensionService.prototype.dispose = function () {\n    };\n    MainThreadExtensionService.prototype.$activateExtension = function (extensionId, activationEvent) {\n        return this._extensionService._activateById(extensionId, activationEvent);\n    };\n    MainThreadExtensionService.prototype.$onWillActivateExtension = function (extensionId) {\n        this._extensionService._onWillActivateExtension(extensionId);\n    };\n    MainThreadExtensionService.prototype.$onDidActivateExtension = function (extensionId, startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent) {\n        this._extensionService._onDidActivateExtension(extensionId, startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent);\n    };\n    MainThreadExtensionService.prototype.$onExtensionRuntimeError = function (extensionId, data) {\n        var error = new Error();\n        error.name = data.name;\n        error.message = data.message;\n        error.stack = data.stack;\n        this._extensionService._onExtensionRuntimeError(extensionId, error);\n        console.error(\"[\" + extensionId + \"]\" + error.message);\n        console.error(error.stack);\n    };\n    MainThreadExtensionService.prototype.$onExtensionActivationError = function (extensionId, activationError) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (typeof activationError === 'string') {\n                    this._extensionService._logOrShowMessage(severity_1.default.Error, activationError);\n                }\n                else {\n                    this._handleMissingDependency(extensionId, activationError.dependency);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    MainThreadExtensionService.prototype._handleMissingDependency = function (extensionId, missingDependency) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extension, local, installedDependency;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._extensionService.getExtension(extensionId.value)];\n                    case 1:\n                        extension = _a.sent();\n                        if (!extension) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._extensionsWorkbenchService.queryLocal()];\n                    case 2:\n                        local = _a.sent();\n                        installedDependency = local.filter(function (i) { return extensionManagementUtil_1.areSameExtensions(i.identifier, { id: missingDependency }); })[0];\n                        if (!installedDependency) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._handleMissingInstalledDependency(extension, installedDependency)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4: return [4 /*yield*/, this._handleMissingNotInstalledDependency(extension, missingDependency)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MainThreadExtensionService.prototype._handleMissingInstalledDependency = function (extension, missingInstalledDependency) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extName;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                extName = extension.displayName || extension.name;\n                if (missingInstalledDependency.enablementState === extensionManagement_1.EnablementState.Enabled || missingInstalledDependency.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled) {\n                    this._notificationService.notify({\n                        severity: severity_1.default.Error,\n                        message: nls_1.localize('reload window', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not loaded. Would you like to reload the window to load the extension?\", extName, missingInstalledDependency.displayName),\n                        actions: {\n                            primary: [new actions_1.Action('reload', nls_1.localize('reload', \"Reload Window\"), '', true, function () { return _this._windowService.reloadWindow(); })]\n                        }\n                    });\n                }\n                else {\n                    this._notificationService.notify({\n                        severity: severity_1.default.Error,\n                        message: nls_1.localize('disabledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is disabled. Would you like to enable the extension and reload the window?\", extName, missingInstalledDependency.displayName),\n                        actions: {\n                            primary: [new actions_1.Action('enable', nls_1.localize('enable dep', \"Enable and Reload\"), '', true, function () { return _this._extensionsWorkbenchService.setEnablement([missingInstalledDependency], missingInstalledDependency.enablementState === extensionManagement_1.EnablementState.Disabled ? extensionManagement_1.EnablementState.Enabled : extensionManagement_1.EnablementState.WorkspaceEnabled)\n                                    .then(function () { return _this._windowService.reloadWindow(); }, function (e) { return _this._notificationService.error(e); }); })]\n                        }\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    MainThreadExtensionService.prototype._handleMissingNotInstalledDependency = function (extension, missingDependency) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extName, dependencyExtension;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        extName = extension.displayName || extension.name;\n                        return [4 /*yield*/, this._extensionsWorkbenchService.queryGallery({ names: [missingDependency] }, cancellation_1.CancellationToken.None)];\n                    case 1:\n                        dependencyExtension = (_a.sent()).firstPage[0];\n                        if (dependencyExtension) {\n                            this._notificationService.notify({\n                                severity: severity_1.default.Error,\n                                message: nls_1.localize('uninstalledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not installed. Would you like to install the extension and reload the window?\", extName, dependencyExtension.displayName),\n                                actions: {\n                                    primary: [new actions_1.Action('install', nls_1.localize('install missing dep', \"Install and Reload\"), '', true, function () { return _this._extensionsWorkbenchService.install(dependencyExtension)\n                                            .then(function () { return _this._windowService.reloadWindow(); }, function (e) { return _this._notificationService.error(e); }); })]\n                                }\n                            });\n                        }\n                        else {\n                            this._notificationService.error(nls_1.localize('unknownDep', \"Cannot activate the '{0}' extension because it depends on an unknown '{1}' extension .\", extName, missingDependency));\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MainThreadExtensionService.prototype.$onExtensionHostExit = function (code) {\n        this._extensionService._onExtensionHostExit(code);\n    };\n    MainThreadExtensionService = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadExtensionService),\n        tslib_1.__param(1, extensions_1.IExtensionService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, extensions_2.IExtensionsWorkbenchService),\n        tslib_1.__param(4, windows_1.IWindowService)\n    ], MainThreadExtensionService);\n    return MainThreadExtensionService;\n}());\nexports.MainThreadExtensionService = MainThreadExtensionService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadExtensionService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadExtensionService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SerializedError } from 'vs/base/common/errors';\nimport Severity from 'vs/base/common/severity';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IExtHostContext, MainContext, MainThreadExtensionServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionService, ExtensionActivationError } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { EnablementState } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IExtensionsWorkbenchService, IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\n@extHostNamedCustomer(MainContext.MainThreadExtensionService)\nexport class MainThreadExtensionService implements MainThreadExtensionServiceShape {\n\n\tprivate readonly _extensionService: IExtensionService;\n\tprivate readonly _notificationService: INotificationService;\n\tprivate readonly _extensionsWorkbenchService: IExtensionsWorkbenchService;\n\tprivate readonly _windowService: IWindowService;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tthis._extensionService = extensionService;\n\t\tthis._notificationService = notificationService;\n\t\tthis._extensionsWorkbenchService = extensionsWorkbenchService;\n\t\tthis._windowService = windowService;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\t$activateExtension(extensionId: ExtensionIdentifier, activationEvent: string): Promise<void> {\n\t\treturn this._extensionService._activateById(extensionId, activationEvent);\n\t}\n\t$onWillActivateExtension(extensionId: ExtensionIdentifier): void {\n\t\tthis._extensionService._onWillActivateExtension(extensionId);\n\t}\n\t$onDidActivateExtension(extensionId: ExtensionIdentifier, startup: boolean, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationEvent: string): void {\n\t\tthis._extensionService._onDidActivateExtension(extensionId, startup, codeLoadingTime, activateCallTime, activateResolvedTime, activationEvent);\n\t}\n\t$onExtensionRuntimeError(extensionId: ExtensionIdentifier, data: SerializedError): void {\n\t\tconst error = new Error();\n\t\terror.name = data.name;\n\t\terror.message = data.message;\n\t\terror.stack = data.stack;\n\t\tthis._extensionService._onExtensionRuntimeError(extensionId, error);\n\t\tconsole.error(`[${extensionId}]${error.message}`);\n\t\tconsole.error(error.stack);\n\t}\n\tasync $onExtensionActivationError(extensionId: ExtensionIdentifier, activationError: ExtensionActivationError): Promise<void> {\n\t\tif (typeof activationError === 'string') {\n\t\t\tthis._extensionService._logOrShowMessage(Severity.Error, activationError);\n\t\t} else {\n\t\t\tthis._handleMissingDependency(extensionId, activationError.dependency);\n\t\t}\n\t}\n\n\tprivate async _handleMissingDependency(extensionId: ExtensionIdentifier, missingDependency: string): Promise<void> {\n\t\tconst extension = await this._extensionService.getExtension(extensionId.value);\n\t\tif (extension) {\n\t\t\tconst local = await this._extensionsWorkbenchService.queryLocal();\n\t\t\tconst installedDependency = local.filter(i => areSameExtensions(i.identifier, { id: missingDependency }))[0];\n\t\t\tif (installedDependency) {\n\t\t\t\tawait this._handleMissingInstalledDependency(extension, installedDependency);\n\t\t\t} else {\n\t\t\t\tawait this._handleMissingNotInstalledDependency(extension, missingDependency);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _handleMissingInstalledDependency(extension: IExtensionDescription, missingInstalledDependency: IExtension): Promise<void> {\n\t\tconst extName = extension.displayName || extension.name;\n\t\tif (missingInstalledDependency.enablementState === EnablementState.Enabled || missingInstalledDependency.enablementState === EnablementState.WorkspaceEnabled) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('reload window', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not loaded. Would you like to reload the window to load the extension?\", extName, missingInstalledDependency.displayName),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('reload', localize('reload', \"Reload Window\"), '', true, () => this._windowService.reloadWindow())]\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('disabledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is disabled. Would you like to enable the extension and reload the window?\", extName, missingInstalledDependency.displayName),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('enable', localize('enable dep', \"Enable and Reload\"), '', true,\n\t\t\t\t\t\t() => this._extensionsWorkbenchService.setEnablement([missingInstalledDependency], missingInstalledDependency.enablementState === EnablementState.Disabled ? EnablementState.Enabled : EnablementState.WorkspaceEnabled)\n\t\t\t\t\t\t\t.then(() => this._windowService.reloadWindow(), e => this._notificationService.error(e)))]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _handleMissingNotInstalledDependency(extension: IExtensionDescription, missingDependency: string): Promise<void> {\n\t\tconst extName = extension.displayName || extension.name;\n\t\tconst dependencyExtension = (await this._extensionsWorkbenchService.queryGallery({ names: [missingDependency] }, CancellationToken.None)).firstPage[0];\n\t\tif (dependencyExtension) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('uninstalledDep', \"Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not installed. Would you like to install the extension and reload the window?\", extName, dependencyExtension.displayName),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [new Action('install', localize('install missing dep', \"Install and Reload\"), '', true,\n\t\t\t\t\t\t() => this._extensionsWorkbenchService.install(dependencyExtension)\n\t\t\t\t\t\t\t.then(() => this._windowService.reloadWindow(), e => this._notificationService.error(e)))]\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis._notificationService.error(localize('unknownDep', \"Cannot activate the '{0}' extension because it depends on an unknown '{1}' extension .\", extName, missingDependency));\n\t\t}\n\t}\n\n\t$onExtensionHostExit(code: number): void {\n\t\tthis._extensionService._onExtensionHostExit(code);\n\t}\n}\n"]}]}