{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar ColorPickerModel = /** @class */ (function () {\n    function ColorPickerModel(color, availableColorPresentations, presentationIndex) {\n        this.presentationIndex = presentationIndex;\n        this._onColorFlushed = new event_1.Emitter();\n        this.onColorFlushed = this._onColorFlushed.event;\n        this._onDidChangeColor = new event_1.Emitter();\n        this.onDidChangeColor = this._onDidChangeColor.event;\n        this._onDidChangePresentation = new event_1.Emitter();\n        this.onDidChangePresentation = this._onDidChangePresentation.event;\n        this.originalColor = color;\n        this._color = color;\n        this._colorPresentations = availableColorPresentations;\n    }\n    Object.defineProperty(ColorPickerModel.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        set: function (color) {\n            if (this._color.equals(color)) {\n                return;\n            }\n            this._color = color;\n            this._onDidChangeColor.fire(color);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerModel.prototype, \"presentation\", {\n        get: function () { return this.colorPresentations[this.presentationIndex]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerModel.prototype, \"colorPresentations\", {\n        get: function () {\n            return this._colorPresentations;\n        },\n        set: function (colorPresentations) {\n            this._colorPresentations = colorPresentations;\n            if (this.presentationIndex > colorPresentations.length - 1) {\n                this.presentationIndex = 0;\n            }\n            this._onDidChangePresentation.fire(this.presentation);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColorPickerModel.prototype.selectNextColorPresentation = function () {\n        this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n        this.flushColor();\n        this._onDidChangePresentation.fire(this.presentation);\n    };\n    ColorPickerModel.prototype.guessColorPresentation = function (color, originalText) {\n        for (var i = 0; i < this.colorPresentations.length; i++) {\n            if (originalText === this.colorPresentations[i].label) {\n                this.presentationIndex = i;\n                this._onDidChangePresentation.fire(this.presentation);\n                break;\n            }\n        }\n    };\n    ColorPickerModel.prototype.flushColor = function () {\n        this._onColorFlushed.fire(this._color);\n    };\n    return ColorPickerModel;\n}());\nexports.ColorPickerModel = ColorPickerModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,8CAAsD;AAGtD;IA2CC,0BAAY,KAAY,EAAE,2BAAiD,EAAU,iBAAyB;QAAzB,sBAAiB,GAAjB,iBAAiB,CAAQ;QATtG,oBAAe,GAAG,IAAI,eAAO,EAAS,CAAC;QACtC,mBAAc,GAAiB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;QAE3D,sBAAiB,GAAG,IAAI,eAAO,EAAS,CAAC;QACxC,qBAAgB,GAAiB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;QAE/D,6BAAwB,GAAG,IAAI,eAAO,EAAsB,CAAC;QAC5D,4BAAuB,GAA8B,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;QAGjG,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,2BAA2B,CAAC;IACxD,CAAC;IA1CD,sBAAI,mCAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAU,KAAY;YACrB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO;aACP;YAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;;;OATA;IAWD,sBAAI,0CAAY;aAAhB,cAAyC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAIlG,sBAAI,gDAAkB;aAAtB;YACC,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACjC,CAAC;aAED,UAAuB,kBAAwC;YAC9D,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;YAC9C,IAAI,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3D,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;aAC3B;YACD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,CAAC;;;OARA;IAyBD,sDAA2B,GAA3B;QACC,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;QACvF,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,iDAAsB,GAAtB,UAAuB,KAAY,EAAE,YAAoB;QACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxD,IAAI,YAAY,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBACtD,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;gBAC3B,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACtD,MAAM;aACN;SACD;IACF,CAAC;IAED,qCAAU,GAAV;QACC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IACF,uBAAC;AAAD,CAAC,AApED,IAoEC;AApEY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IColorPresentation } from 'vs/editor/common/modes';\n\nexport class ColorPickerModel {\n\n\treadonly originalColor: Color;\n\tprivate _color: Color;\n\n\tget color(): Color {\n\t\treturn this._color;\n\t}\n\n\tset color(color: Color) {\n\t\tif (this._color.equals(color)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._color = color;\n\t\tthis._onDidChangeColor.fire(color);\n\t}\n\n\tget presentation(): IColorPresentation { return this.colorPresentations[this.presentationIndex]; }\n\n\tprivate _colorPresentations: IColorPresentation[];\n\n\tget colorPresentations(): IColorPresentation[] {\n\t\treturn this._colorPresentations;\n\t}\n\n\tset colorPresentations(colorPresentations: IColorPresentation[]) {\n\t\tthis._colorPresentations = colorPresentations;\n\t\tif (this.presentationIndex > colorPresentations.length - 1) {\n\t\t\tthis.presentationIndex = 0;\n\t\t}\n\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t}\n\n\tprivate _onColorFlushed = new Emitter<Color>();\n\treadonly onColorFlushed: Event<Color> = this._onColorFlushed.event;\n\n\tprivate _onDidChangeColor = new Emitter<Color>();\n\treadonly onDidChangeColor: Event<Color> = this._onDidChangeColor.event;\n\n\tprivate _onDidChangePresentation = new Emitter<IColorPresentation>();\n\treadonly onDidChangePresentation: Event<IColorPresentation> = this._onDidChangePresentation.event;\n\n\tconstructor(color: Color, availableColorPresentations: IColorPresentation[], private presentationIndex: number) {\n\t\tthis.originalColor = color;\n\t\tthis._color = color;\n\t\tthis._colorPresentations = availableColorPresentations;\n\t}\n\n\tselectNextColorPresentation(): void {\n\t\tthis.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n\t\tthis.flushColor();\n\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t}\n\n\tguessColorPresentation(color: Color, originalText: string): void {\n\t\tfor (let i = 0; i < this.colorPresentations.length; i++) {\n\t\t\tif (originalText === this.colorPresentations[i].label) {\n\t\t\t\tthis.presentationIndex = i;\n\t\t\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tflushColor(): void {\n\t\tthis._onColorFlushed.fire(this._color);\n\t}\n}\n"]}]}