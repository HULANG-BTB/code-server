{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ipc_net_1 = require(\"vs/base/parts/ipc/common/ipc.net\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar ConnectionType;\n(function (ConnectionType) {\n    ConnectionType[ConnectionType[\"Management\"] = 1] = \"Management\";\n    ConnectionType[ConnectionType[\"ExtensionHost\"] = 2] = \"ExtensionHost\";\n    ConnectionType[ConnectionType[\"Tunnel\"] = 3] = \"Tunnel\";\n})(ConnectionType = exports.ConnectionType || (exports.ConnectionType = {}));\nfunction connectToRemoteExtensionHostAgent(options, connectionType, args) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        return tslib_1.__generator(this, function (_a) {\n            throw new Error(\"Not implemented\");\n        });\n    });\n}\nfunction doConnectRemoteAgentManagement(options) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var protocol;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, connectToRemoteExtensionHostAgent(options, ConnectionType.Management, undefined)];\n                case 1:\n                    protocol = _a.sent();\n                    return [2 /*return*/, new Promise(function (c, e) {\n                            var registration = protocol.onControlMessage(function (raw) {\n                                registration.dispose();\n                                var msg = JSON.parse(raw.toString());\n                                var error = getErrorFromMessage(msg);\n                                if (error) {\n                                    return e(error);\n                                }\n                                if (options.reconnectionProtocol) {\n                                    options.reconnectionProtocol.endAcceptReconnection();\n                                }\n                                c({ protocol: protocol });\n                            });\n                        })];\n            }\n        });\n    });\n}\nfunction doConnectRemoteAgentExtensionHost(options, startArguments) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var protocol;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, connectToRemoteExtensionHostAgent(options, ConnectionType.ExtensionHost, startArguments)];\n                case 1:\n                    protocol = _a.sent();\n                    return [2 /*return*/, new Promise(function (c, e) {\n                            var registration = protocol.onControlMessage(function (raw) {\n                                registration.dispose();\n                                var msg = JSON.parse(raw.toString());\n                                var error = getErrorFromMessage(msg);\n                                if (error) {\n                                    return e(error);\n                                }\n                                var debugPort = msg && msg.debugPort;\n                                if (options.reconnectionProtocol) {\n                                    options.reconnectionProtocol.endAcceptReconnection();\n                                }\n                                c({ protocol: protocol, debugPort: debugPort });\n                            });\n                        })];\n            }\n        });\n    });\n}\nfunction doConnectRemoteAgentTunnel(options, startParams) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var protocol;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, connectToRemoteExtensionHostAgent(options, ConnectionType.Tunnel, startParams)];\n                case 1:\n                    protocol = _a.sent();\n                    return [2 /*return*/, protocol];\n            }\n        });\n    });\n}\nfunction resolveConnectionOptions(options, reconnectionToken, reconnectionProtocol) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var _a, host, port;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, options.addressProvider.getAddress()];\n                case 1:\n                    _a = _b.sent(), host = _a.host, port = _a.port;\n                    return [2 /*return*/, {\n                            isBuilt: options.isBuilt,\n                            commit: options.commit,\n                            host: host,\n                            port: port,\n                            reconnectionToken: reconnectionToken,\n                            reconnectionProtocol: reconnectionProtocol,\n                            webSocketFactory: options.webSocketFactory,\n                        }];\n            }\n        });\n    });\n}\nfunction connectRemoteAgentManagement(options, remoteAuthority, clientId) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var reconnectionToken, simpleOptions, protocol;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    reconnectionToken = uuid_1.generateUuid();\n                    return [4 /*yield*/, resolveConnectionOptions(options, reconnectionToken, null)];\n                case 1:\n                    simpleOptions = _a.sent();\n                    return [4 /*yield*/, doConnectRemoteAgentManagement(simpleOptions)];\n                case 2:\n                    protocol = (_a.sent()).protocol;\n                    return [2 /*return*/, new ManagementPersistentConnection(options, remoteAuthority, clientId, reconnectionToken, protocol)];\n            }\n        });\n    });\n}\nexports.connectRemoteAgentManagement = connectRemoteAgentManagement;\nfunction connectRemoteAgentExtensionHost(options, startArguments) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var reconnectionToken, simpleOptions, _a, protocol, debugPort;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reconnectionToken = uuid_1.generateUuid();\n                    return [4 /*yield*/, resolveConnectionOptions(options, reconnectionToken, null)];\n                case 1:\n                    simpleOptions = _b.sent();\n                    return [4 /*yield*/, doConnectRemoteAgentExtensionHost(simpleOptions, startArguments)];\n                case 2:\n                    _a = _b.sent(), protocol = _a.protocol, debugPort = _a.debugPort;\n                    return [2 /*return*/, new ExtensionHostPersistentConnection(options, startArguments, reconnectionToken, protocol, debugPort)];\n            }\n        });\n    });\n}\nexports.connectRemoteAgentExtensionHost = connectRemoteAgentExtensionHost;\nfunction connectRemoteAgentTunnel(options, tunnelRemotePort) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var simpleOptions, protocol;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, resolveConnectionOptions(options, uuid_1.generateUuid(), null)];\n                case 1:\n                    simpleOptions = _a.sent();\n                    return [4 /*yield*/, doConnectRemoteAgentTunnel(simpleOptions, { port: tunnelRemotePort })];\n                case 2:\n                    protocol = _a.sent();\n                    return [2 /*return*/, protocol];\n            }\n        });\n    });\n}\nexports.connectRemoteAgentTunnel = connectRemoteAgentTunnel;\nvar PersistentConnection = /** @class */ (function (_super) {\n    tslib_1.__extends(PersistentConnection, _super);\n    function PersistentConnection(options, reconnectionToken, protocol) {\n        var _this = _super.call(this) || this;\n        _this._options = options;\n        _this.reconnectionToken = reconnectionToken;\n        _this.protocol = protocol;\n        return _this;\n    }\n    return PersistentConnection;\n}(lifecycle_1.Disposable));\nvar ManagementPersistentConnection = /** @class */ (function (_super) {\n    tslib_1.__extends(ManagementPersistentConnection, _super);\n    function ManagementPersistentConnection(options, remoteAuthority, clientId, reconnectionToken, protocol) {\n        var _this = _super.call(this, options, reconnectionToken, protocol) || this;\n        _this.client = _this._register(new ipc_net_1.Client(protocol, {\n            remoteAuthority: remoteAuthority,\n            clientId: clientId\n        }));\n        return _this;\n    }\n    ManagementPersistentConnection.prototype._reconnect = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, doConnectRemoteAgentManagement(options)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ManagementPersistentConnection;\n}(PersistentConnection));\nexports.ManagementPersistentConnection = ManagementPersistentConnection;\nvar ExtensionHostPersistentConnection = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionHostPersistentConnection, _super);\n    function ExtensionHostPersistentConnection(options, startArguments, reconnectionToken, protocol, debugPort) {\n        var _this = _super.call(this, options, reconnectionToken, protocol) || this;\n        _this._startArguments = startArguments;\n        _this.debugPort = debugPort;\n        return _this;\n    }\n    ExtensionHostPersistentConnection.prototype._reconnect = function (options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, doConnectRemoteAgentExtensionHost(options, this._startArguments)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ExtensionHostPersistentConnection;\n}(PersistentConnection));\nexports.ExtensionHostPersistentConnection = ExtensionHostPersistentConnection;\nfunction getErrorFromMessage(msg) {\n    if (msg && msg.type === 'error') {\n        var error = new Error(\"Connection error: \" + msg.reason);\n        error.code = 'VSCODE_CONNECTION_ERROR';\n        return error;\n    }\n    return null;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Client, PersistentProtocol, ISocket } from 'vs/base/parts/ipc/common/ipc.net';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { RemoteAgentConnectionContext } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport const enum ConnectionType {\n\tManagement = 1,\n\tExtensionHost = 2,\n\tTunnel = 3,\n}\n\ninterface ISimpleConnectionOptions {\n\tisBuilt: boolean;\n\tcommit: string | undefined;\n\thost: string;\n\tport: number;\n\treconnectionToken: string;\n\treconnectionProtocol: PersistentProtocol | null;\n\twebSocketFactory: IWebSocketFactory;\n}\n\nexport interface IConnectCallback {\n\t(err: any | undefined, socket: ISocket | undefined): void;\n}\n\nexport interface IWebSocketFactory {\n\tconnect(host: string, port: number, query: string, callback: IConnectCallback): void;\n}\n\nasync function connectToRemoteExtensionHostAgent(options: ISimpleConnectionOptions, connectionType: ConnectionType, args: any | undefined): Promise<PersistentProtocol> {\n\tthrow new Error(`Not implemented`);\n}\n\ninterface IManagementConnectionResult {\n\tprotocol: PersistentProtocol;\n}\n\nasync function doConnectRemoteAgentManagement(options: ISimpleConnectionOptions): Promise<IManagementConnectionResult> {\n\tconst protocol = await connectToRemoteExtensionHostAgent(options, ConnectionType.Management, undefined);\n\treturn new Promise<IManagementConnectionResult>((c, e) => {\n\t\tconst registration = protocol.onControlMessage(raw => {\n\t\t\tregistration.dispose();\n\t\t\tconst msg = JSON.parse(raw.toString());\n\t\t\tconst error = getErrorFromMessage(msg);\n\t\t\tif (error) {\n\t\t\t\treturn e(error);\n\t\t\t}\n\t\t\tif (options.reconnectionProtocol) {\n\t\t\t\toptions.reconnectionProtocol.endAcceptReconnection();\n\t\t\t}\n\t\t\tc({ protocol });\n\t\t});\n\t});\n}\n\nexport interface IRemoteExtensionHostStartParams {\n\tlanguage: string;\n\tdebugId?: string;\n\tbreak?: boolean;\n\tport?: number | null;\n\tupdatePort?: boolean;\n}\n\ninterface IExtensionHostConnectionResult {\n\tprotocol: PersistentProtocol;\n\tdebugPort?: number;\n}\n\nasync function doConnectRemoteAgentExtensionHost(options: ISimpleConnectionOptions, startArguments: IRemoteExtensionHostStartParams): Promise<IExtensionHostConnectionResult> {\n\tconst protocol = await connectToRemoteExtensionHostAgent(options, ConnectionType.ExtensionHost, startArguments);\n\treturn new Promise<IExtensionHostConnectionResult>((c, e) => {\n\t\tconst registration = protocol.onControlMessage(raw => {\n\t\t\tregistration.dispose();\n\t\t\tconst msg = JSON.parse(raw.toString());\n\t\t\tconst error = getErrorFromMessage(msg);\n\t\t\tif (error) {\n\t\t\t\treturn e(error);\n\t\t\t}\n\t\t\tconst debugPort = msg && msg.debugPort;\n\t\t\tif (options.reconnectionProtocol) {\n\t\t\t\toptions.reconnectionProtocol.endAcceptReconnection();\n\t\t\t}\n\t\t\tc({ protocol, debugPort });\n\t\t});\n\t});\n}\n\nexport interface ITunnelConnectionStartParams {\n\tport: number;\n}\n\nasync function doConnectRemoteAgentTunnel(options: ISimpleConnectionOptions, startParams: ITunnelConnectionStartParams): Promise<PersistentProtocol> {\n\tconst protocol = await connectToRemoteExtensionHostAgent(options, ConnectionType.Tunnel, startParams);\n\treturn protocol;\n}\n\nexport interface IConnectionOptions {\n\tisBuilt: boolean;\n\tcommit: string | undefined;\n\twebSocketFactory: IWebSocketFactory;\n\taddressProvider: IAddressProvider;\n}\n\nasync function resolveConnectionOptions(options: IConnectionOptions, reconnectionToken: string, reconnectionProtocol: PersistentProtocol | null): Promise<ISimpleConnectionOptions> {\n\tconst { host, port } = await options.addressProvider.getAddress();\n\treturn {\n\t\tisBuilt: options.isBuilt,\n\t\tcommit: options.commit,\n\t\thost: host,\n\t\tport: port,\n\t\treconnectionToken: reconnectionToken,\n\t\treconnectionProtocol: reconnectionProtocol,\n\t\twebSocketFactory: options.webSocketFactory,\n\t};\n}\n\nexport interface IAddress {\n\thost: string;\n\tport: number;\n}\n\nexport interface IAddressProvider {\n\tgetAddress(): Promise<IAddress>;\n}\n\nexport async function connectRemoteAgentManagement(options: IConnectionOptions, remoteAuthority: string, clientId: string): Promise<ManagementPersistentConnection> {\n\tconst reconnectionToken = generateUuid();\n\tconst simpleOptions = await resolveConnectionOptions(options, reconnectionToken, null);\n\tconst { protocol } = await doConnectRemoteAgentManagement(simpleOptions);\n\treturn new ManagementPersistentConnection(options, remoteAuthority, clientId, reconnectionToken, protocol);\n}\n\nexport async function connectRemoteAgentExtensionHost(options: IConnectionOptions, startArguments: IRemoteExtensionHostStartParams): Promise<ExtensionHostPersistentConnection> {\n\tconst reconnectionToken = generateUuid();\n\tconst simpleOptions = await resolveConnectionOptions(options, reconnectionToken, null);\n\tconst { protocol, debugPort } = await doConnectRemoteAgentExtensionHost(simpleOptions, startArguments);\n\treturn new ExtensionHostPersistentConnection(options, startArguments, reconnectionToken, protocol, debugPort);\n}\n\nexport async function connectRemoteAgentTunnel(options: IConnectionOptions, tunnelRemotePort: number): Promise<PersistentProtocol> {\n\tconst simpleOptions = await resolveConnectionOptions(options, generateUuid(), null);\n\tconst protocol = await doConnectRemoteAgentTunnel(simpleOptions, { port: tunnelRemotePort });\n\treturn protocol;\n}\n\nabstract class PersistentConnection extends Disposable {\n\n\tprotected readonly _options: IConnectionOptions;\n\tpublic readonly reconnectionToken: string;\n\tpublic readonly protocol: PersistentProtocol;\n\n\tconstructor(options: IConnectionOptions, reconnectionToken: string, protocol: PersistentProtocol) {\n\t\tsuper();\n\t\tthis._options = options;\n\t\tthis.reconnectionToken = reconnectionToken;\n\t\tthis.protocol = protocol;\n\t}\n\n\tprotected abstract _reconnect(options: ISimpleConnectionOptions): Promise<void>;\n}\n\nexport class ManagementPersistentConnection extends PersistentConnection {\n\n\tpublic readonly client: Client<RemoteAgentConnectionContext>;\n\n\tconstructor(options: IConnectionOptions, remoteAuthority: string, clientId: string, reconnectionToken: string, protocol: PersistentProtocol) {\n\t\tsuper(options, reconnectionToken, protocol);\n\t\tthis.client = this._register(new Client<RemoteAgentConnectionContext>(protocol, {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tclientId: clientId\n\t\t}));\n\t}\n\n\tprotected async _reconnect(options: ISimpleConnectionOptions): Promise<void> {\n\t\tawait doConnectRemoteAgentManagement(options);\n\t}\n}\n\nexport class ExtensionHostPersistentConnection extends PersistentConnection {\n\n\tprivate readonly _startArguments: IRemoteExtensionHostStartParams;\n\tpublic readonly debugPort: number | undefined;\n\n\tconstructor(options: IConnectionOptions, startArguments: IRemoteExtensionHostStartParams, reconnectionToken: string, protocol: PersistentProtocol, debugPort: number | undefined) {\n\t\tsuper(options, reconnectionToken, protocol);\n\t\tthis._startArguments = startArguments;\n\t\tthis.debugPort = debugPort;\n\t}\n\n\tprotected async _reconnect(options: ISimpleConnectionOptions): Promise<void> {\n\t\tawait doConnectRemoteAgentExtensionHost(options, this._startArguments);\n\t}\n}\n\nfunction getErrorFromMessage(msg: any): Error | null {\n\tif (msg && msg.type === 'error') {\n\t\tconst error = new Error(`Connection error: ${msg.reason}`);\n\t\t(<any>error).code = 'VSCODE_CONNECTION_ERROR';\n\t\treturn error;\n\t}\n\treturn null;\n}\n"]}]}