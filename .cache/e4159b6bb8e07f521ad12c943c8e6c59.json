{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _a;\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar nls = require(\"vs/nls\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar format_1 = require(\"vs/editor/contrib/format/format\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar lifecycle_2 = require(\"vs/base/common/lifecycle\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar DefaultFormatter = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultFormatter, _super);\n    function DefaultFormatter(_extensionService, _extensionEnablementService, _configService, _notificationService, _quickInputService, _modeService, _statusbarService, _labelService) {\n        var _this = _super.call(this) || this;\n        _this._extensionService = _extensionService;\n        _this._extensionEnablementService = _extensionEnablementService;\n        _this._configService = _configService;\n        _this._notificationService = _notificationService;\n        _this._quickInputService = _quickInputService;\n        _this._modeService = _modeService;\n        _this._statusbarService = _statusbarService;\n        _this._labelService = _labelService;\n        _this._register(_this._extensionService.onDidChangeExtensions(_this._updateConfigValues, _this));\n        _this._register(format_1.FormattingConflicts.setFormatterSelector(function (formatter, document, mode) { return _this._selectFormatter(formatter, document, mode); }));\n        _this._updateConfigValues();\n        return _this;\n    }\n    DefaultFormatter.prototype._updateConfigValues = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extensions, _i, extensions_3, extension;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._extensionService.getExtensions()];\n                    case 1:\n                        extensions = _a.sent();\n                        DefaultFormatter.extensionIds.length = 0;\n                        DefaultFormatter.extensionDescriptions.length = 0;\n                        DefaultFormatter.extensionIds.push(null);\n                        DefaultFormatter.extensionDescriptions.push(nls.localize('nullFormatterDescription', \"None\"));\n                        for (_i = 0, extensions_3 = extensions; _i < extensions_3.length; _i++) {\n                            extension = extensions_3[_i];\n                            if (extension.main) {\n                                DefaultFormatter.extensionIds.push(extension.identifier.value);\n                                DefaultFormatter.extensionDescriptions.push(extension.description || '');\n                            }\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultFormatter._maybeQuotes = function (s) {\n        return s.match(/\\s/) ? \"'\" + s + \"'\" : s;\n    };\n    DefaultFormatter.prototype._selectFormatter = function (formatter, document, mode) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var defaultFormatterId, defaultFormatter, extension, label, message_1, langName, silent, message;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        defaultFormatterId = this._configService.getValue(DefaultFormatter.configName, {\n                            resource: document.uri,\n                            overrideIdentifier: document.getModeId()\n                        });\n                        if (!defaultFormatterId) return [3 /*break*/, 2];\n                        defaultFormatter = formatter.filter(function (formatter) { return extensions_1.ExtensionIdentifier.equals(formatter.extensionId, defaultFormatterId); })[0];\n                        if (defaultFormatter) {\n                            // formatter available\n                            return [2 /*return*/, defaultFormatter];\n                        }\n                        return [4 /*yield*/, this._extensionService.getExtension(defaultFormatterId)];\n                    case 1:\n                        extension = _a.sent();\n                        if (extension && this._extensionEnablementService.isEnabled(extensions_2.toExtension(extension))) {\n                            label = this._labelService.getUriLabel(document.uri, { relative: true });\n                            message_1 = nls.localize('miss', \"Extension '{0}' cannot format '{1}'\", extension.displayName || extension.name, label);\n                            this._statusbarService.setStatusMessage(message_1, 4000);\n                            return [2 /*return*/, undefined];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (formatter.length === 1) {\n                            // ok -> nothing configured but only one formatter available\n                            return [2 /*return*/, formatter[0]];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        langName = this._modeService.getLanguageName(document.getModeId()) || document.getModeId();\n                        silent = mode === format_1.FormattingMode.Silent;\n                        message = !defaultFormatterId\n                            ? nls.localize('config.needed', \"There are multiple formatters for {0}-files. Select a default formatter to continue.\", DefaultFormatter._maybeQuotes(langName))\n                            : nls.localize('config.bad', \"Extension '{0}' is configured as formatter but not available. Select a different default formatter to continue.\", defaultFormatterId);\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                _this._notificationService.prompt(notification_1.Severity.Info, message, [{ label: nls.localize('do.config', \"Configure...\"), run: function () { return _this._pickAndPersistDefaultFormatter(formatter, document).then(resolve, reject); } }], { silent: silent, onCancel: resolve });\n                                if (silent) {\n                                    // don't wait when formatting happens without interaction\n                                    // but pick some formatter...\n                                    resolve(formatter[0]);\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    DefaultFormatter.prototype._pickAndPersistDefaultFormatter = function (formatter, document) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var picks, langName, pick;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        picks = formatter.map(function (formatter, index) {\n                            return {\n                                index: index,\n                                label: formatter.displayName || formatter.extensionId || '?'\n                            };\n                        });\n                        langName = this._modeService.getLanguageName(document.getModeId()) || document.getModeId();\n                        return [4 /*yield*/, this._quickInputService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for {0}-files\", DefaultFormatter._maybeQuotes(langName)) })];\n                    case 1:\n                        pick = _a.sent();\n                        if (!pick || !formatter[pick.index].extensionId) {\n                            return [2 /*return*/, undefined];\n                        }\n                        this._configService.updateValue(DefaultFormatter.configName, formatter[pick.index].extensionId.value, {\n                            resource: document.uri,\n                            overrideIdentifier: document.getModeId()\n                        });\n                        return [2 /*return*/, formatter[pick.index]];\n                }\n            });\n        });\n    };\n    DefaultFormatter.configName = 'editor.defaultFormatter';\n    DefaultFormatter.extensionIds = [];\n    DefaultFormatter.extensionDescriptions = [];\n    DefaultFormatter = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_2.IExtensionService),\n        tslib_1.__param(1, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, modeService_1.IModeService),\n        tslib_1.__param(6, statusbar_1.IStatusbarService),\n        tslib_1.__param(7, label_1.ILabelService)\n    ], DefaultFormatter);\n    return DefaultFormatter;\n}(lifecycle_2.Disposable));\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(DefaultFormatter, lifecycle_1.LifecyclePhase.Restored);\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    overridable: true,\n    properties: (_a = {},\n        _a[DefaultFormatter.configName] = {\n            description: nls.localize('formatter.default', \"Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.\"),\n            type: ['string', 'null'],\n            default: null,\n            enum: DefaultFormatter.extensionIds,\n            markdownEnumDescriptions: DefaultFormatter.extensionDescriptions\n        },\n        _a)\n});\nfunction logFormatterTelemetry(telemetryService, mode, options, pick) {\n    function extKey(obj) {\n        return obj.extensionId ? extensions_1.ExtensionIdentifier.toKey(obj.extensionId) : 'unknown';\n    }\n    /*\n     * __GDPR__\n        \"formatterpick\" : {\n            \"mode\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"extensions\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"pick\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n        }\n     */\n    telemetryService.publicLog('formatterpick', {\n        mode: mode,\n        extensions: options.map(extKey),\n        pick: pick ? extKey(pick) : 'none'\n    });\n}\nfunction showFormatterPick(accessor, model, formatters) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var quickPickService, configService, modeService, overrides, defaultFormatter, picks, configurePick, pick, langName, pick_1;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    quickPickService = accessor.get(quickInput_1.IQuickInputService);\n                    configService = accessor.get(configuration_1.IConfigurationService);\n                    modeService = accessor.get(modeService_1.IModeService);\n                    overrides = { resource: model.uri, overrideIdentifier: model.getModeId() };\n                    defaultFormatter = configService.getValue(DefaultFormatter.configName, overrides);\n                    picks = formatters.map(function (provider, index) {\n                        return {\n                            index: index,\n                            label: provider.displayName || '',\n                            description: extensions_1.ExtensionIdentifier.equals(provider.extensionId, defaultFormatter) ? nls.localize('def', \"(default)\") : undefined,\n                        };\n                    });\n                    configurePick = {\n                        label: nls.localize('config', \"Configure Default Formatter...\")\n                    };\n                    return [4 /*yield*/, quickPickService.pick(picks.concat([{ type: 'separator' }, configurePick]), { placeHolder: nls.localize('format.placeHolder', \"Select a formatter\") })];\n                case 1:\n                    pick = _a.sent();\n                    if (!!pick) return [3 /*break*/, 2];\n                    // dismissed\n                    return [2 /*return*/, undefined];\n                case 2:\n                    if (!(pick === configurePick)) return [3 /*break*/, 4];\n                    langName = modeService.getLanguageName(model.getModeId()) || model.getModeId();\n                    return [4 /*yield*/, quickPickService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for {0}-files\", DefaultFormatter._maybeQuotes(langName)) })];\n                case 3:\n                    pick_1 = _a.sent();\n                    if (pick_1 && formatters[pick_1.index].extensionId) {\n                        configService.updateValue(DefaultFormatter.configName, formatters[pick_1.index].extensionId.value, overrides);\n                    }\n                    return [2 /*return*/, undefined];\n                case 4: \n                // picked one\n                return [2 /*return*/, pick.index];\n            }\n        });\n    });\n}\neditorExtensions_1.registerEditorAction(/** @class */ (function (_super) {\n    tslib_1.__extends(FormatDocumentMultipleAction, _super);\n    function FormatDocumentMultipleAction() {\n        return _super.call(this, {\n            id: 'editor.action.formatDocument.multiple',\n            label: nls.localize('formatDocument.label.multiple', \"Format Document With...\"),\n            alias: 'Format Document...',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasMultipleDocumentFormattingProvider),\n            menuOpts: {\n                group: '1_modification',\n                order: 1.3\n            }\n        }) || this;\n    }\n    FormatDocumentMultipleAction.prototype.run = function (accessor, editor, args) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var instaService, telemetryService, model, provider, pick;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!editor.hasModel()) {\n                            return [2 /*return*/];\n                        }\n                        instaService = accessor.get(instantiation_1.IInstantiationService);\n                        telemetryService = accessor.get(telemetry_1.ITelemetryService);\n                        model = editor.getModel();\n                        provider = format_1.getRealAndSyntheticDocumentFormattersOrdered(model);\n                        return [4 /*yield*/, instaService.invokeFunction(showFormatterPick, model, provider)];\n                    case 1:\n                        pick = _a.sent();\n                        if (!(typeof pick === 'number')) return [3 /*break*/, 3];\n                        return [4 /*yield*/, instaService.invokeFunction(format_1.formatDocumentWithProvider, provider[pick], editor, format_1.FormattingMode.Explicit, cancellation_1.CancellationToken.None)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        logFormatterTelemetry(telemetryService, 'document', provider, typeof pick === 'number' && provider[pick] || undefined);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return FormatDocumentMultipleAction;\n}(editorExtensions_1.EditorAction)));\neditorExtensions_1.registerEditorAction(/** @class */ (function (_super) {\n    tslib_1.__extends(FormatSelectionMultipleAction, _super);\n    function FormatSelectionMultipleAction() {\n        return _super.call(this, {\n            id: 'editor.action.formatSelection.multiple',\n            label: nls.localize('formatSelection.label.multiple', \"Format Selection With...\"),\n            alias: 'Format Code...',\n            precondition: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable), editorContextKeys_1.EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider),\n            menuOpts: {\n                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.hasNonEmptySelection),\n                group: '1_modification',\n                order: 1.31\n            }\n        }) || this;\n    }\n    FormatSelectionMultipleAction.prototype.run = function (accessor, editor) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var instaService, telemetryService, model, range, provider, pick;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!editor.hasModel()) {\n                            return [2 /*return*/];\n                        }\n                        instaService = accessor.get(instantiation_1.IInstantiationService);\n                        telemetryService = accessor.get(telemetry_1.ITelemetryService);\n                        model = editor.getModel();\n                        range = editor.getSelection();\n                        if (range.isEmpty()) {\n                            range = new range_1.Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n                        }\n                        provider = modes_1.DocumentRangeFormattingEditProviderRegistry.ordered(model);\n                        return [4 /*yield*/, instaService.invokeFunction(showFormatterPick, model, provider)];\n                    case 1:\n                        pick = _a.sent();\n                        if (!(typeof pick === 'number')) return [3 /*break*/, 3];\n                        return [4 /*yield*/, instaService.invokeFunction(format_1.formatDocumentRangeWithProvider, provider[pick], editor, range, cancellation_1.CancellationToken.None)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        logFormatterTelemetry(telemetryService, 'range', provider, typeof pick === 'number' && provider[pick] || undefined);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return FormatSelectionMultipleAction;\n}(editorExtensions_1.EditorAction)));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { DocumentRangeFormattingEditProviderRegistry, DocumentFormattingEditProvider, DocumentRangeFormattingEditProvider } from 'vs/editor/common/modes';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { formatDocumentRangeWithProvider, formatDocumentWithProvider, getRealAndSyntheticDocumentFormattersOrdered, FormattingConflicts, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IExtensionService, toExtension } from 'vs/workbench/services/extensions/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';\n\ntype FormattingEditProvider = DocumentFormattingEditProvider | DocumentRangeFormattingEditProvider;\n\nclass DefaultFormatter extends Disposable implements IWorkbenchContribution {\n\n\tstatic configName = 'editor.defaultFormatter';\n\n\tstatic extensionIds: (string | null)[] = [];\n\tstatic extensionDescriptions: string[] = [];\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IExtensionEnablementService private readonly _extensionEnablementService: IExtensionEnablementService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._extensionService.onDidChangeExtensions(this._updateConfigValues, this));\n\t\tthis._register(FormattingConflicts.setFormatterSelector((formatter, document, mode) => this._selectFormatter(formatter, document, mode)));\n\t\tthis._updateConfigValues();\n\t}\n\n\tprivate async _updateConfigValues(): Promise<void> {\n\t\tconst extensions = await this._extensionService.getExtensions();\n\n\t\tDefaultFormatter.extensionIds.length = 0;\n\t\tDefaultFormatter.extensionDescriptions.length = 0;\n\n\t\tDefaultFormatter.extensionIds.push(null);\n\t\tDefaultFormatter.extensionDescriptions.push(nls.localize('nullFormatterDescription', \"None\"));\n\n\t\tfor (const extension of extensions) {\n\t\t\tif (extension.main) {\n\t\t\t\tDefaultFormatter.extensionIds.push(extension.identifier.value);\n\t\t\t\tDefaultFormatter.extensionDescriptions.push(extension.description || '');\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic _maybeQuotes(s: string): string {\n\t\treturn s.match(/\\s/) ? `'${s}'` : s;\n\t}\n\n\tprivate async _selectFormatter<T extends FormattingEditProvider>(formatter: T[], document: ITextModel, mode: FormattingMode): Promise<T | undefined> {\n\n\t\tconst defaultFormatterId = this._configService.getValue<string>(DefaultFormatter.configName, {\n\t\t\tresource: document.uri,\n\t\t\toverrideIdentifier: document.getModeId()\n\t\t});\n\n\t\tif (defaultFormatterId) {\n\t\t\t// good -> formatter configured\n\t\t\tconst [defaultFormatter] = formatter.filter(formatter => ExtensionIdentifier.equals(formatter.extensionId, defaultFormatterId));\n\t\t\tif (defaultFormatter) {\n\t\t\t\t// formatter available\n\t\t\t\treturn defaultFormatter;\n\t\t\t}\n\n\t\t\t// bad -> formatter gone\n\t\t\tconst extension = await this._extensionService.getExtension(defaultFormatterId);\n\t\t\tif (extension && this._extensionEnablementService.isEnabled(toExtension(extension))) {\n\t\t\t\t// formatter does not target this file\n\t\t\t\tconst label = this._labelService.getUriLabel(document.uri, { relative: true });\n\t\t\t\tconst message = nls.localize('miss', \"Extension '{0}' cannot format '{1}'\", extension.displayName || extension.name, label);\n\t\t\t\tthis._statusbarService.setStatusMessage(message, 4000);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else if (formatter.length === 1) {\n\t\t\t// ok -> nothing configured but only one formatter available\n\t\t\treturn formatter[0];\n\t\t}\n\n\t\tconst langName = this._modeService.getLanguageName(document.getModeId()) || document.getModeId();\n\t\tconst silent = mode === FormattingMode.Silent;\n\t\tconst message = !defaultFormatterId\n\t\t\t? nls.localize('config.needed', \"There are multiple formatters for {0}-files. Select a default formatter to continue.\", DefaultFormatter._maybeQuotes(langName))\n\t\t\t: nls.localize('config.bad', \"Extension '{0}' is configured as formatter but not available. Select a different default formatter to continue.\", defaultFormatterId);\n\n\t\treturn new Promise<T | undefined>((resolve, reject) => {\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tmessage,\n\t\t\t\t[{ label: nls.localize('do.config', \"Configure...\"), run: () => this._pickAndPersistDefaultFormatter(formatter, document).then(resolve, reject) }],\n\t\t\t\t{ silent, onCancel: resolve }\n\t\t\t);\n\n\t\t\tif (silent) {\n\t\t\t\t// don't wait when formatting happens without interaction\n\t\t\t\t// but pick some formatter...\n\t\t\t\tresolve(formatter[0]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _pickAndPersistDefaultFormatter<T extends FormattingEditProvider>(formatter: T[], document: ITextModel): Promise<T | undefined> {\n\t\tconst picks = formatter.map((formatter, index) => {\n\t\t\treturn <IIndexedPick>{\n\t\t\t\tindex,\n\t\t\t\tlabel: formatter.displayName || formatter.extensionId || '?'\n\t\t\t};\n\t\t});\n\t\tconst langName = this._modeService.getLanguageName(document.getModeId()) || document.getModeId();\n\t\tconst pick = await this._quickInputService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for {0}-files\", DefaultFormatter._maybeQuotes(langName)) });\n\t\tif (!pick || !formatter[pick.index].extensionId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._configService.updateValue(DefaultFormatter.configName, formatter[pick.index].extensionId!.value, {\n\t\t\tresource: document.uri,\n\t\t\toverrideIdentifier: document.getModeId()\n\t\t});\n\t\treturn formatter[pick.index];\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tDefaultFormatter,\n\tLifecyclePhase.Restored\n);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\tid: 'editor',\n\torder: 5,\n\ttype: 'object',\n\toverridable: true,\n\tproperties: {\n\t\t[DefaultFormatter.configName]: {\n\t\t\tdescription: nls.localize('formatter.default', \"Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.\"),\n\t\t\ttype: ['string', 'null'],\n\t\t\tdefault: null,\n\t\t\tenum: DefaultFormatter.extensionIds,\n\t\t\tmarkdownEnumDescriptions: DefaultFormatter.extensionDescriptions\n\t\t}\n\t}\n});\n\ninterface IIndexedPick extends IQuickPickItem {\n\tindex: number;\n}\n\nfunction logFormatterTelemetry<T extends { extensionId?: ExtensionIdentifier }>(telemetryService: ITelemetryService, mode: 'document' | 'range', options: T[], pick?: T) {\n\n\tfunction extKey(obj: T): string {\n\t\treturn obj.extensionId ? ExtensionIdentifier.toKey(obj.extensionId) : 'unknown';\n\t}\n\t/*\n\t * __GDPR__\n\t\t\"formatterpick\" : {\n\t\t\t\"mode\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"extensions\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"pick\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t}\n\t */\n\ttelemetryService.publicLog('formatterpick', {\n\t\tmode,\n\t\textensions: options.map(extKey),\n\t\tpick: pick ? extKey(pick) : 'none'\n\t});\n}\n\nasync function showFormatterPick(accessor: ServicesAccessor, model: ITextModel, formatters: FormattingEditProvider[]): Promise<number | undefined> {\n\tconst quickPickService = accessor.get(IQuickInputService);\n\tconst configService = accessor.get(IConfigurationService);\n\tconst modeService = accessor.get(IModeService);\n\n\tconst overrides = { resource: model.uri, overrideIdentifier: model.getModeId() };\n\tconst defaultFormatter = configService.getValue<string>(DefaultFormatter.configName, overrides);\n\n\tconst picks = formatters.map((provider, index) => {\n\t\treturn <IIndexedPick>{\n\t\t\tindex,\n\t\t\tlabel: provider.displayName || '',\n\t\t\tdescription: ExtensionIdentifier.equals(provider.extensionId, defaultFormatter) ? nls.localize('def', \"(default)\") : undefined,\n\t\t};\n\t});\n\n\tconst configurePick: IQuickPickItem = {\n\t\tlabel: nls.localize('config', \"Configure Default Formatter...\")\n\t};\n\n\tconst pick = await quickPickService.pick([...picks, { type: 'separator' }, configurePick], { placeHolder: nls.localize('format.placeHolder', \"Select a formatter\") });\n\tif (!pick) {\n\t\t// dismissed\n\t\treturn undefined;\n\n\t} else if (pick === configurePick) {\n\t\t// config default\n\t\tconst langName = modeService.getLanguageName(model.getModeId()) || model.getModeId();\n\t\tconst pick = await quickPickService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for {0}-files\", DefaultFormatter._maybeQuotes(langName)) });\n\t\tif (pick && formatters[pick.index].extensionId) {\n\t\t\tconfigService.updateValue(DefaultFormatter.configName, formatters[pick.index].extensionId!.value, overrides);\n\t\t}\n\t\treturn undefined;\n\n\t} else {\n\t\t// picked one\n\t\treturn (<IIndexedPick>pick).index;\n\t}\n\n}\n\nregisterEditorAction(class FormatDocumentMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument.multiple',\n\t\t\tlabel: nls.localize('formatDocument.label.multiple', \"Format Document With...\"),\n\t\t\talias: 'Format Document...',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasMultipleDocumentFormattingProvider),\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst model = editor.getModel();\n\t\tconst provider = getRealAndSyntheticDocumentFormattersOrdered(model);\n\t\tconst pick = await instaService.invokeFunction(showFormatterPick, model, provider);\n\t\tif (typeof pick === 'number') {\n\t\t\tawait instaService.invokeFunction(formatDocumentWithProvider, provider[pick], editor, FormattingMode.Explicit, CancellationToken.None);\n\t\t}\n\t\tlogFormatterTelemetry(telemetryService, 'document', provider, typeof pick === 'number' && provider[pick] || undefined);\n\t}\n});\n\nregisterEditorAction(class FormatSelectionMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatSelection.multiple',\n\t\t\tlabel: nls.localize('formatSelection.label.multiple', \"Format Selection With...\"),\n\t\t\talias: 'Format Code...',\n\t\t\tprecondition: ContextKeyExpr.and(ContextKeyExpr.and(EditorContextKeys.writable), EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider),\n\t\t\tmenuOpts: {\n\t\t\t\twhen: ContextKeyExpr.and(EditorContextKeys.hasNonEmptySelection),\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.31\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tconst model = editor.getModel();\n\t\tlet range: Range = editor.getSelection();\n\t\tif (range.isEmpty()) {\n\t\t\trange = new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n\t\t}\n\n\t\tconst provider = DocumentRangeFormattingEditProviderRegistry.ordered(model);\n\t\tconst pick = await instaService.invokeFunction(showFormatterPick, model, provider);\n\t\tif (typeof pick === 'number') {\n\t\t\tawait instaService.invokeFunction(formatDocumentRangeWithProvider, provider[pick], editor, range, CancellationToken.None);\n\t\t}\n\n\t\tlogFormatterTelemetry(telemetryService, 'range', provider, typeof pick === 'number' && provider[pick] || undefined);\n\t}\n});\n"]}]}