{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/main.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/main.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fs = require(\"fs\");\nvar gracefulFs = require(\"graceful-fs\");\nvar crypto_1 = require(\"crypto\");\nvar performance_1 = require(\"vs/base/common/performance\");\nvar workbench_1 = require(\"vs/workbench/browser/workbench\");\nvar window_1 = require(\"vs/workbench/electron-browser/window\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar configurationService_1 = require(\"vs/workbench/services/configuration/node/configurationService\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar environmentService_1 = require(\"vs/platform/environment/node/environmentService\");\nvar keybindingService_1 = require(\"vs/workbench/services/keybinding/electron-browser/keybindingService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar windowService_1 = require(\"vs/platform/windows/electron-browser/windowService\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar electron_1 = require(\"electron\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar spdlogService_1 = require(\"vs/platform/log/node/spdlogService\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar storageService_1 = require(\"vs/platform/storage/node/storageService\");\nvar logIpc_1 = require(\"vs/platform/log/node/logIpc\");\nvar network_1 = require(\"vs/base/common/network\");\nvar extfs_1 = require(\"vs/base/node/extfs\");\nvar path_1 = require(\"vs/base/common/path\");\nvar storageIpc_1 = require(\"vs/platform/storage/node/storageIpc\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar driver_1 = require(\"vs/platform/driver/electron-browser/driver\");\nvar mainProcessService_1 = require(\"vs/platform/ipc/electron-browser/mainProcessService\");\nvar remoteAuthorityResolverService_1 = require(\"vs/platform/remote/electron-browser/remoteAuthorityResolverService\");\nvar remoteAuthorityResolver_1 = require(\"vs/platform/remote/common/remoteAuthorityResolver\");\nvar remoteAgentServiceImpl_1 = require(\"vs/workbench/services/remote/electron-browser/remoteAgentServiceImpl\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar fileService2_1 = require(\"vs/workbench/services/files2/common/fileService2\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar diskFileSystemProvider_1 = require(\"vs/workbench/services/files2/electron-browser/diskFileSystemProvider\");\nvar remoteAgentFileSystemChannel_1 = require(\"vs/platform/remote/common/remoteAgentFileSystemChannel\");\nvar remoteHosts_1 = require(\"vs/platform/remote/common/remoteHosts\");\nvar CodeRendererMain = /** @class */ (function (_super) {\n    tslib_1.__extends(CodeRendererMain, _super);\n    function CodeRendererMain(configuration) {\n        var _this = _super.call(this) || this;\n        _this.configuration = configuration;\n        _this.init();\n        return _this;\n    }\n    CodeRendererMain.prototype.init = function () {\n        // Enable gracefulFs\n        gracefulFs.gracefulify(fs);\n        // Massage configuration file URIs\n        this.reviveUris();\n        // Setup perf\n        performance_1.importEntries(this.configuration.perfEntries);\n        // Browser config\n        browser_1.setZoomFactor(electron_1.webFrame.getZoomFactor()); // Ensure others can listen to zoom level changes\n        browser_1.setZoomLevel(electron_1.webFrame.getZoomLevel(), true /* isTrusted */); // Can be trusted because we are not setting it ourselves (https://github.com/Microsoft/vscode/issues/26151)\n        browser_1.setFullscreen(!!this.configuration.fullscreen);\n        // Keyboard support\n        keybindingService_1.KeyboardMapperFactory.INSTANCE._onKeyboardLayoutChanged();\n    };\n    CodeRendererMain.prototype.reviveUris = function () {\n        if (this.configuration.folderUri) {\n            this.configuration.folderUri = uri_1.URI.revive(this.configuration.folderUri);\n        }\n        if (this.configuration.workspace) {\n            this.configuration.workspace = workspaces_1.reviveWorkspaceIdentifier(this.configuration.workspace);\n        }\n        var filesToWait = this.configuration.filesToWait;\n        var filesToWaitPaths = filesToWait && filesToWait.paths;\n        [filesToWaitPaths, this.configuration.filesToOpen, this.configuration.filesToCreate, this.configuration.filesToDiff].forEach(function (paths) {\n            if (Array.isArray(paths)) {\n                paths.forEach(function (path) {\n                    if (path.fileUri) {\n                        path.fileUri = uri_1.URI.revive(path.fileUri);\n                    }\n                });\n            }\n        });\n        if (filesToWait) {\n            filesToWait.waitMarkerFileUri = uri_1.URI.revive(filesToWait.waitMarkerFileUri);\n        }\n    };\n    CodeRendererMain.prototype.open = function () {\n        var _this = this;\n        return this.initServices().then(function (services) {\n            return dom_1.domContentLoaded().then(function () {\n                performance_1.mark('willStartWorkbench');\n                // Create Workbench\n                _this.workbench = new workbench_1.Workbench(document.body, services.serviceCollection, services.logService);\n                // Layout\n                _this._register(dom_1.addDisposableListener(window, dom_1.EventType.RESIZE, function (e) { return _this.onWindowResize(e, true); }));\n                // Workbench Lifecycle\n                _this._register(_this.workbench.onShutdown(function () { return _this.dispose(); }));\n                _this._register(_this.workbench.onWillShutdown(function (event) { return event.join(services.storageService.close()); }));\n                // Startup\n                var instantiationService = _this.workbench.startup();\n                // Window\n                _this._register(instantiationService.createInstance(window_1.ElectronWindow));\n                // Driver\n                if (_this.configuration.driver) {\n                    instantiationService.invokeFunction(function (accessor) { return driver_1.registerWindowDriver(accessor).then(function (disposable) { return _this._register(disposable); }); });\n                }\n                // Config Exporter\n                if (_this.configuration['export-default-configuration']) {\n                    instantiationService.createInstance(configurationService_1.DefaultConfigurationExportHelper);\n                }\n                // Logging\n                services.logService.trace('workbench configuration', JSON.stringify(_this.configuration));\n                require('vs/../../../../packages/vscode/src/workbench').workbench.serviceCollection = services.serviceCollection;\n            });\n        });\n    };\n    CodeRendererMain.prototype.onWindowResize = function (e, retry) {\n        var _this = this;\n        if (e.target === window) {\n            if (window.document && window.document.body && window.document.body.clientWidth === 0) {\n                // TODO@Ben this is an electron issue on macOS when simple fullscreen is enabled\n                // where for some reason the window clientWidth is reported as 0 when switching\n                // between simple fullscreen and normal screen. In that case we schedule the layout\n                // call at the next animation frame once, in the hope that the dimensions are\n                // proper then.\n                if (retry) {\n                    dom_1.scheduleAtNextAnimationFrame(function () { return _this.onWindowResize(e, false); });\n                }\n                return;\n            }\n            this.workbench.layout();\n        }\n    };\n    CodeRendererMain.prototype.initServices = function () {\n        var _this = this;\n        var serviceCollection = new serviceCollection_1.ServiceCollection();\n        // Main Process\n        var mainProcessService = this._register(new mainProcessService_1.MainProcessService(this.configuration.windowId));\n        serviceCollection.set(mainProcessService_1.IMainProcessService, mainProcessService);\n        // Window\n        serviceCollection.set(windows_1.IWindowService, new descriptors_1.SyncDescriptor(windowService_1.WindowService, [this.configuration]));\n        // Environment\n        var environmentService = new environmentService_1.EnvironmentService(this.configuration, this.configuration.execPath);\n        serviceCollection.set(environment_1.IEnvironmentService, environmentService);\n        // Log\n        var logService = this._register(this.createLogService(mainProcessService, environmentService));\n        serviceCollection.set(log_1.ILogService, logService);\n        // Remote\n        var remoteAuthorityResolverService = new remoteAuthorityResolverService_1.RemoteAuthorityResolverService();\n        serviceCollection.set(remoteAuthorityResolver_1.IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n        var remoteAgentService = new remoteAgentServiceImpl_1.RemoteAgentService(this.configuration, environmentService, remoteAuthorityResolverService);\n        serviceCollection.set(remoteAgentService_1.IRemoteAgentService, remoteAgentService);\n        // Files\n        var fileService = new fileService2_1.FileService2(logService);\n        serviceCollection.set(files_1.IFileService, fileService);\n        fileService.registerProvider(network_1.Schemas.file, new diskFileSystemProvider_1.DiskFileSystemProvider(logService));\n        var connection = remoteAgentService.getConnection();\n        if (connection) {\n            var channel = connection.getChannel(remoteAgentFileSystemChannel_1.REMOTE_FILE_SYSTEM_CHANNEL_NAME);\n            fileService.registerProvider(remoteHosts_1.REMOTE_HOST_SCHEME, new remoteAgentFileSystemChannel_1.RemoteExtensionsFileSystemProvider(channel, remoteAgentService.getEnvironment()));\n        }\n        return this.resolveWorkspaceInitializationPayload(environmentService).then(function (payload) { return Promise.all([\n            _this.createWorkspaceService(payload, environmentService, remoteAgentService, logService).then(function (service) {\n                // Workspace\n                serviceCollection.set(workspace_1.IWorkspaceContextService, service);\n                // Configuration\n                serviceCollection.set(configuration_1.IConfigurationService, service);\n                return service;\n            }),\n            _this.createStorageService(payload, environmentService, logService, mainProcessService).then(function (service) {\n                // Storage\n                serviceCollection.set(storage_1.IStorageService, service);\n                return service;\n            })\n        ]).then(function (services) { return ({ serviceCollection: serviceCollection, logService: logService, storageService: services[1] }); }); });\n    };\n    CodeRendererMain.prototype.resolveWorkspaceInitializationPayload = function (environmentService) {\n        var _this = this;\n        // Multi-root workspace\n        if (this.configuration.workspace) {\n            return Promise.resolve(this.configuration.workspace);\n        }\n        // Single-folder workspace\n        var workspaceInitializationPayload = Promise.resolve(undefined);\n        if (this.configuration.folderUri) {\n            workspaceInitializationPayload = this.resolveSingleFolderWorkspaceInitializationPayload(this.configuration.folderUri);\n        }\n        return workspaceInitializationPayload.then(function (payload) {\n            // Fallback to empty workspace if we have no payload yet.\n            if (!payload) {\n                var id = void 0;\n                if (_this.configuration.backupPath) {\n                    id = path_1.basename(_this.configuration.backupPath); // we know the backupPath must be a unique path so we leverage its name as workspace ID\n                }\n                else if (environmentService.isExtensionDevelopment) {\n                    id = 'ext-dev'; // extension development window never stores backups and is a singleton\n                }\n                else {\n                    return Promise.reject(new Error('Unexpected window configuration without backupPath'));\n                }\n                payload = { id: id };\n            }\n            return payload;\n        });\n    };\n    CodeRendererMain.prototype.resolveSingleFolderWorkspaceInitializationPayload = function (folderUri) {\n        // Return early the folder is not local\n        if (folderUri.scheme !== network_1.Schemas.file) {\n            return Promise.resolve({ id: crypto_1.createHash('md5').update(folderUri.toString()).digest('hex'), folder: folderUri });\n        }\n        function computeLocalDiskFolderId(folder, stat) {\n            var ctime;\n            if (platform_1.isLinux) {\n                ctime = stat.ino; // Linux: birthtime is ctime, so we cannot use it! We use the ino instead!\n            }\n            else if (platform_1.isMacintosh) {\n                ctime = stat.birthtime.getTime(); // macOS: birthtime is fine to use as is\n            }\n            else if (platform_1.isWindows) {\n                if (typeof stat.birthtimeMs === 'number') {\n                    ctime = Math.floor(stat.birthtimeMs); // Windows: fix precision issue in node.js 8.x to get 7.x results (see https://github.com/nodejs/node/issues/19897)\n                }\n                else {\n                    ctime = stat.birthtime.getTime();\n                }\n            }\n            // we use the ctime as extra salt to the ID so that we catch the case of a folder getting\n            // deleted and recreated. in that case we do not want to carry over previous state\n            return crypto_1.createHash('md5').update(folder.fsPath).update(ctime ? String(ctime) : '').digest('hex');\n        }\n        // For local: ensure path is absolute and exists\n        var sanitizedFolderPath = extfs_1.sanitizeFilePath(folderUri.fsPath, process.env['VSCODE_CWD'] || process.cwd());\n        return pfs_1.stat(sanitizedFolderPath).then(function (stat) {\n            var sanitizedFolderUri = uri_1.URI.file(sanitizedFolderPath);\n            return {\n                id: computeLocalDiskFolderId(sanitizedFolderUri, stat),\n                folder: sanitizedFolderUri\n            };\n        }, function (error) { return errors_1.onUnexpectedError(error); });\n    };\n    CodeRendererMain.prototype.createWorkspaceService = function (payload, environmentService, remoteAgentService, logService) {\n        var workspaceService = new configurationService_1.WorkspaceService(this.configuration, environmentService, remoteAgentService);\n        return workspaceService.initialize(payload).then(function () { return workspaceService; }, function (error) {\n            errors_1.onUnexpectedError(error);\n            logService.error(error);\n            return workspaceService;\n        });\n    };\n    CodeRendererMain.prototype.createStorageService = function (payload, environmentService, logService, mainProcessService) {\n        var globalStorageDatabase = new storageIpc_1.GlobalStorageDatabaseChannelClient(mainProcessService.getChannel('storage'));\n        var storageService = new storageService_1.StorageService(globalStorageDatabase, logService, environmentService);\n        return storageService.initialize(payload).then(function () { return storageService; }, function (error) {\n            errors_1.onUnexpectedError(error);\n            logService.error(error);\n            return storageService;\n        });\n    };\n    CodeRendererMain.prototype.createLogService = function (mainProcessService, environmentService) {\n        var spdlogService = spdlogService_1.createSpdLogService(\"renderer\" + this.configuration.windowId, this.configuration.logLevel, environmentService.logsPath);\n        var consoleLogService = new log_1.ConsoleLogService(this.configuration.logLevel);\n        var logService = new log_1.MultiplexLogService([consoleLogService, spdlogService]);\n        var logLevelClient = new logIpc_1.LogLevelSetterChannelClient(mainProcessService.getChannel('loglevel'));\n        return new logIpc_1.FollowerLogService(logLevelClient, logService);\n    };\n    return CodeRendererMain;\n}(lifecycle_1.Disposable));\nfunction main(configuration) {\n    var renderer = new CodeRendererMain(configuration);\n    return renderer.open();\n}\nexports.main = main;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/main.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/main.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as gracefulFs from 'graceful-fs';\nimport { createHash } from 'crypto';\nimport { importEntries, mark } from 'vs/base/common/performance';\nimport { Workbench } from 'vs/workbench/browser/workbench';\nimport { ElectronWindow } from 'vs/workbench/electron-browser/window';\nimport { setZoomLevel, setZoomFactor, setFullscreen } from 'vs/base/browser/browser';\nimport { domContentLoaded, addDisposableListener, EventType, scheduleAtNextAnimationFrame } from 'vs/base/browser/dom';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { WorkspaceService, DefaultConfigurationExportHelper } from 'vs/workbench/services/configuration/node/configurationService';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { stat } from 'vs/base/node/pfs';\nimport { EnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { KeyboardMapperFactory } from 'vs/workbench/services/keybinding/electron-browser/keybindingService';\nimport { IWindowConfiguration, IWindowService } from 'vs/platform/windows/common/windows';\nimport { WindowService } from 'vs/platform/windows/electron-browser/windowService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { webFrame } from 'electron';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceInitializationPayload, IMultiFolderWorkspaceInitializationPayload, IEmptyWorkspaceInitializationPayload, ISingleFolderWorkspaceInitializationPayload, reviveWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { createSpdLogService } from 'vs/platform/log/node/spdlogService';\nimport { ConsoleLogService, MultiplexLogService, ILogService } from 'vs/platform/log/common/log';\nimport { StorageService } from 'vs/platform/storage/node/storageService';\nimport { LogLevelSetterChannelClient, FollowerLogService } from 'vs/platform/log/node/logIpc';\nimport { Schemas } from 'vs/base/common/network';\nimport { sanitizeFilePath } from 'vs/base/node/extfs';\nimport { basename } from 'vs/base/common/path';\nimport { GlobalStorageDatabaseChannelClient } from 'vs/platform/storage/node/storageIpc';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { registerWindowDriver } from 'vs/platform/driver/electron-browser/driver';\nimport { IMainProcessService, MainProcessService } from 'vs/platform/ipc/electron-browser/mainProcessService';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/electron-browser/remoteAuthorityResolverService';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/electron-browser/remoteAgentServiceImpl';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { FileService2 } from 'vs/workbench/services/files2/common/fileService2';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProvider } from 'vs/workbench/services/files2/electron-browser/diskFileSystemProvider';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { REMOTE_FILE_SYSTEM_CHANNEL_NAME, RemoteExtensionsFileSystemProvider } from 'vs/platform/remote/common/remoteAgentFileSystemChannel';\nimport { REMOTE_HOST_SCHEME } from 'vs/platform/remote/common/remoteHosts';\n\nclass CodeRendererMain extends Disposable {\n\n\tprivate workbench: Workbench;\n\n\tconstructor(private readonly configuration: IWindowConfiguration) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Enable gracefulFs\n\t\tgracefulFs.gracefulify(fs);\n\n\t\t// Massage configuration file URIs\n\t\tthis.reviveUris();\n\n\t\t// Setup perf\n\t\timportEntries(this.configuration.perfEntries);\n\n\t\t// Browser config\n\t\tsetZoomFactor(webFrame.getZoomFactor()); // Ensure others can listen to zoom level changes\n\t\tsetZoomLevel(webFrame.getZoomLevel(), true /* isTrusted */); // Can be trusted because we are not setting it ourselves (https://github.com/Microsoft/vscode/issues/26151)\n\t\tsetFullscreen(!!this.configuration.fullscreen);\n\n\t\t// Keyboard support\n\t\tKeyboardMapperFactory.INSTANCE._onKeyboardLayoutChanged();\n\t}\n\n\tprivate reviveUris() {\n\t\tif (this.configuration.folderUri) {\n\t\t\tthis.configuration.folderUri = uri.revive(this.configuration.folderUri);\n\t\t}\n\t\tif (this.configuration.workspace) {\n\t\t\tthis.configuration.workspace = reviveWorkspaceIdentifier(this.configuration.workspace);\n\t\t}\n\n\t\tconst filesToWait = this.configuration.filesToWait;\n\t\tconst filesToWaitPaths = filesToWait && filesToWait.paths;\n\t\t[filesToWaitPaths, this.configuration.filesToOpen, this.configuration.filesToCreate, this.configuration.filesToDiff].forEach(paths => {\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tpaths.forEach(path => {\n\t\t\t\t\tif (path.fileUri) {\n\t\t\t\t\t\tpath.fileUri = uri.revive(path.fileUri);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tif (filesToWait) {\n\t\t\tfilesToWait.waitMarkerFileUri = uri.revive(filesToWait.waitMarkerFileUri);\n\t\t}\n\t}\n\n\topen(): Promise<void> {\n\t\treturn this.initServices().then(services => {\n\n\t\t\treturn domContentLoaded().then(() => {\n\t\t\t\tmark('willStartWorkbench');\n\n\t\t\t\t// Create Workbench\n\t\t\t\tthis.workbench = new Workbench(document.body, services.serviceCollection, services.logService);\n\n\t\t\t\t// Layout\n\t\t\t\tthis._register(addDisposableListener(window, EventType.RESIZE, e => this.onWindowResize(e, true)));\n\n\t\t\t\t// Workbench Lifecycle\n\t\t\t\tthis._register(this.workbench.onShutdown(() => this.dispose()));\n\t\t\t\tthis._register(this.workbench.onWillShutdown(event => event.join(services.storageService.close())));\n\n\t\t\t\t// Startup\n\t\t\t\tconst instantiationService = this.workbench.startup();\n\n\t\t\t\t// Window\n\t\t\t\tthis._register(instantiationService.createInstance(ElectronWindow));\n\n\t\t\t\t// Driver\n\t\t\t\tif (this.configuration.driver) {\n\t\t\t\t\tinstantiationService.invokeFunction(accessor => registerWindowDriver(accessor).then(disposable => this._register(disposable)));\n\t\t\t\t}\n\n\t\t\t\t// Config Exporter\n\t\t\t\tif (this.configuration['export-default-configuration']) {\n\t\t\t\t\tinstantiationService.createInstance(DefaultConfigurationExportHelper);\n\t\t\t\t}\n\n\t\t\t\t// Logging\n\t\t\t\tservices.logService.trace('workbench configuration', JSON.stringify(this.configuration));\n\n\t\t\t\t(require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.serviceCollection = services.serviceCollection;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate onWindowResize(e: Event, retry: boolean): void {\n\t\tif (e.target === window) {\n\t\t\tif (window.document && window.document.body && window.document.body.clientWidth === 0) {\n\t\t\t\t// TODO@Ben this is an electron issue on macOS when simple fullscreen is enabled\n\t\t\t\t// where for some reason the window clientWidth is reported as 0 when switching\n\t\t\t\t// between simple fullscreen and normal screen. In that case we schedule the layout\n\t\t\t\t// call at the next animation frame once, in the hope that the dimensions are\n\t\t\t\t// proper then.\n\t\t\t\tif (retry) {\n\t\t\t\t\tscheduleAtNextAnimationFrame(() => this.onWindowResize(e, false));\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.workbench.layout();\n\t\t}\n\t}\n\n\tprivate initServices(): Promise<{ serviceCollection: ServiceCollection, logService: ILogService, storageService: StorageService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\t\t// Main Process\n\t\tconst mainProcessService = this._register(new MainProcessService(this.configuration.windowId));\n\t\tserviceCollection.set(IMainProcessService, mainProcessService);\n\n\t\t// Window\n\t\tserviceCollection.set(IWindowService, new SyncDescriptor(WindowService, [this.configuration]));\n\n\t\t// Environment\n\t\tconst environmentService = new EnvironmentService(this.configuration, this.configuration.execPath);\n\t\tserviceCollection.set(IEnvironmentService, environmentService);\n\n\t\t// Log\n\t\tconst logService = this._register(this.createLogService(mainProcessService, environmentService));\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Remote\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService();\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\t\tconst remoteAgentService = new RemoteAgentService(this.configuration, environmentService, remoteAuthorityResolverService);\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\n\t\t// Files\n\t\tconst fileService = new FileService2(logService);\n\t\tserviceCollection.set(IFileService, fileService);\n\n\t\tfileService.registerProvider(Schemas.file, new DiskFileSystemProvider(logService));\n\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconst channel = connection.getChannel<IChannel>(REMOTE_FILE_SYSTEM_CHANNEL_NAME);\n\t\t\tfileService.registerProvider(REMOTE_HOST_SCHEME, new RemoteExtensionsFileSystemProvider(channel, remoteAgentService.getEnvironment()));\n\t\t}\n\n\t\treturn this.resolveWorkspaceInitializationPayload(environmentService).then(payload => Promise.all([\n\t\t\tthis.createWorkspaceService(payload, environmentService, remoteAgentService, logService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(payload, environmentService, logService, mainProcessService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]).then(services => ({ serviceCollection, logService, storageService: services[1] })));\n\t}\n\n\tprivate resolveWorkspaceInitializationPayload(environmentService: EnvironmentService): Promise<IWorkspaceInitializationPayload> {\n\n\t\t// Multi-root workspace\n\t\tif (this.configuration.workspace) {\n\t\t\treturn Promise.resolve(this.configuration.workspace as IMultiFolderWorkspaceInitializationPayload);\n\t\t}\n\n\t\t// Single-folder workspace\n\t\tlet workspaceInitializationPayload: Promise<IWorkspaceInitializationPayload | undefined> = Promise.resolve(undefined);\n\t\tif (this.configuration.folderUri) {\n\t\t\tworkspaceInitializationPayload = this.resolveSingleFolderWorkspaceInitializationPayload(this.configuration.folderUri);\n\t\t}\n\n\t\treturn workspaceInitializationPayload.then(payload => {\n\n\t\t\t// Fallback to empty workspace if we have no payload yet.\n\t\t\tif (!payload) {\n\t\t\t\tlet id: string;\n\t\t\t\tif (this.configuration.backupPath) {\n\t\t\t\t\tid = basename(this.configuration.backupPath); // we know the backupPath must be a unique path so we leverage its name as workspace ID\n\t\t\t\t} else if (environmentService.isExtensionDevelopment) {\n\t\t\t\t\tid = 'ext-dev'; // extension development window never stores backups and is a singleton\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(new Error('Unexpected window configuration without backupPath'));\n\t\t\t\t}\n\n\t\t\t\tpayload = { id } as IEmptyWorkspaceInitializationPayload;\n\t\t\t}\n\n\t\t\treturn payload;\n\t\t});\n\t}\n\n\tprivate resolveSingleFolderWorkspaceInitializationPayload(folderUri: ISingleFolderWorkspaceIdentifier): Promise<ISingleFolderWorkspaceInitializationPayload | undefined> {\n\n\t\t// Return early the folder is not local\n\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\treturn Promise.resolve({ id: createHash('md5').update(folderUri.toString()).digest('hex'), folder: folderUri });\n\t\t}\n\n\t\tfunction computeLocalDiskFolderId(folder: uri, stat: fs.Stats): string {\n\t\t\tlet ctime: number | undefined;\n\t\t\tif (isLinux) {\n\t\t\t\tctime = stat.ino; // Linux: birthtime is ctime, so we cannot use it! We use the ino instead!\n\t\t\t} else if (isMacintosh) {\n\t\t\t\tctime = stat.birthtime.getTime(); // macOS: birthtime is fine to use as is\n\t\t\t} else if (isWindows) {\n\t\t\t\tif (typeof stat.birthtimeMs === 'number') {\n\t\t\t\t\tctime = Math.floor(stat.birthtimeMs); // Windows: fix precision issue in node.js 8.x to get 7.x results (see https://github.com/nodejs/node/issues/19897)\n\t\t\t\t} else {\n\t\t\t\t\tctime = stat.birthtime.getTime();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we use the ctime as extra salt to the ID so that we catch the case of a folder getting\n\t\t\t// deleted and recreated. in that case we do not want to carry over previous state\n\t\t\treturn createHash('md5').update(folder.fsPath).update(ctime ? String(ctime) : '').digest('hex');\n\t\t}\n\n\t\t// For local: ensure path is absolute and exists\n\t\tconst sanitizedFolderPath = sanitizeFilePath(folderUri.fsPath, process.env['VSCODE_CWD'] || process.cwd());\n\t\treturn stat(sanitizedFolderPath).then(stat => {\n\t\t\tconst sanitizedFolderUri = uri.file(sanitizedFolderPath);\n\t\t\treturn {\n\t\t\t\tid: computeLocalDiskFolderId(sanitizedFolderUri, stat),\n\t\t\t\tfolder: sanitizedFolderUri\n\t\t\t} as ISingleFolderWorkspaceInitializationPayload;\n\t\t}, error => onUnexpectedError(error));\n\t}\n\n\tprivate createWorkspaceService(payload: IWorkspaceInitializationPayload, environmentService: IEnvironmentService, remoteAgentService: IRemoteAgentService, logService: ILogService): Promise<WorkspaceService> {\n\t\tconst workspaceService = new WorkspaceService(this.configuration, environmentService, remoteAgentService);\n\n\t\treturn workspaceService.initialize(payload).then(() => workspaceService, error => {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn workspaceService;\n\t\t});\n\t}\n\n\tprivate createStorageService(payload: IWorkspaceInitializationPayload, environmentService: IEnvironmentService, logService: ILogService, mainProcessService: IMainProcessService): Promise<StorageService> {\n\t\tconst globalStorageDatabase = new GlobalStorageDatabaseChannelClient(mainProcessService.getChannel('storage'));\n\t\tconst storageService = new StorageService(globalStorageDatabase, logService, environmentService);\n\n\t\treturn storageService.initialize(payload).then(() => storageService, error => {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn storageService;\n\t\t});\n\t}\n\n\tprivate createLogService(mainProcessService: IMainProcessService, environmentService: IEnvironmentService): ILogService {\n\t\tconst spdlogService = createSpdLogService(`renderer${this.configuration.windowId}`, this.configuration.logLevel, environmentService.logsPath);\n\t\tconst consoleLogService = new ConsoleLogService(this.configuration.logLevel);\n\t\tconst logService = new MultiplexLogService([consoleLogService, spdlogService]);\n\t\tconst logLevelClient = new LogLevelSetterChannelClient(mainProcessService.getChannel('loglevel'));\n\n\t\treturn new FollowerLogService(logLevelClient, logService);\n\t}\n}\n\nexport function main(configuration: IWindowConfiguration): Promise<void> {\n\tconst renderer = new CodeRendererMain(configuration);\n\n\treturn renderer.open();\n}\n"]}]}