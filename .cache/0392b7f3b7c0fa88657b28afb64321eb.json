{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/composite.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/composite.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar component_1 = require(\"vs/workbench/common/component\");\nvar event_1 = require(\"vs/base/common/event\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\n/**\n * Composites are layed out in the sidebar and panel part of the workbench. At a time only one composite\n * can be open in the sidebar, and only one composite can be open in the panel.\n *\n * Each composite has a minimized representation that is good enough to provide some\n * information about the state of the composite data.\n *\n * The workbench will keep a composite alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a composite goes in the order create(), setVisible(true|false),\n * layout(), focus(), dispose(). During use of the workbench, a composite will often receive a setVisible,\n * layout and focus call, but only one create and dispose call.\n */\nvar Composite = /** @class */ (function (_super) {\n    tslib_1.__extends(Composite, _super);\n    function Composite(id, _telemetryService, themeService, storageService) {\n        var _this = _super.call(this, id, themeService, storageService) || this;\n        _this._telemetryService = _telemetryService;\n        _this._onTitleAreaUpdate = _this._register(new event_1.Emitter());\n        _this._onDidChangeVisibility = _this._register(new event_1.Emitter());\n        _this.visible = false;\n        return _this;\n    }\n    Object.defineProperty(Composite.prototype, \"onTitleAreaUpdate\", {\n        get: function () { return this._onTitleAreaUpdate.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Composite.prototype, \"onDidChangeVisibility\", {\n        get: function () { return this._onDidChangeVisibility.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Composite.prototype, \"onDidFocus\", {\n        get: function () {\n            if (!this._onDidFocus) {\n                this.registerFocusTrackEvents();\n            }\n            return this._onDidFocus.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Composite.prototype, \"onDidBlur\", {\n        get: function () {\n            if (!this._onDidBlur) {\n                this.registerFocusTrackEvents();\n            }\n            return this._onDidBlur.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Composite.prototype.registerFocusTrackEvents = function () {\n        var _this = this;\n        this._onDidFocus = this._register(new event_1.Emitter());\n        this._onDidBlur = this._register(new event_1.Emitter());\n        var focusTracker = this._register(dom_1.trackFocus(this.getContainer()));\n        this._register(focusTracker.onDidFocus(function () { return _this._onDidFocus.fire(); }));\n        this._register(focusTracker.onDidBlur(function () { return _this._onDidBlur.fire(); }));\n    };\n    Composite.prototype.getTitle = function () {\n        return null;\n    };\n    Object.defineProperty(Composite.prototype, \"telemetryService\", {\n        get: function () {\n            return this._telemetryService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Note: Clients should not call this method, the workbench calls this\n     * method. Calling it otherwise may result in unexpected behavior.\n     *\n     * Called to create this composite on the provided parent. This method is only\n     * called once during the lifetime of the workbench.\n     * Note that DOM-dependent calculations should be performed from the setVisible()\n     * call. Only then the composite will be part of the DOM.\n     */\n    Composite.prototype.create = function (parent) {\n        this.parent = parent;\n    };\n    Composite.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n    };\n    /**\n     * Returns the container this composite is being build in.\n     */\n    Composite.prototype.getContainer = function () {\n        return this.parent;\n    };\n    /**\n     * Note: Clients should not call this method, the workbench calls this\n     * method. Calling it otherwise may result in unexpected behavior.\n     *\n     * Called to indicate that the composite has become visible or hidden. This method\n     * is called more than once during workbench lifecycle depending on the user interaction.\n     * The composite will be on-DOM if visible is set to true and off-DOM otherwise.\n     *\n     * Typically this operation should be fast though because setVisible might be called many times during a session.\n     * If there is a long running opertaion it is fine to have it running in the background asyncly and return before.\n     */\n    Composite.prototype.setVisible = function (visible) {\n        if (this.visible !== !!visible) {\n            this.visible = visible;\n            this._onDidChangeVisibility.fire(visible);\n        }\n    };\n    /**\n     * Called when this composite should receive keyboard focus.\n     */\n    Composite.prototype.focus = function () {\n        // Subclasses can implement\n    };\n    /**\n     * Returns an array of actions to show in the action bar of the composite.\n     */\n    Composite.prototype.getActions = function () {\n        return [];\n    };\n    /**\n     * Returns an array of actions to show in the action bar of the composite\n     * in a less prominent way then action from getActions.\n     */\n    Composite.prototype.getSecondaryActions = function () {\n        return [];\n    };\n    /**\n     * Returns an array of actions to show in the context menu of the composite\n     */\n    Composite.prototype.getContextMenuActions = function () {\n        return [];\n    };\n    /**\n     * For any of the actions returned by this composite, provide an IActionItem in\n     * cases where the implementor of the composite wants to override the presentation\n     * of an action. Returns undefined to indicate that the action is not rendered through\n     * an action item.\n     */\n    Composite.prototype.getActionItem = function (action) {\n        return undefined;\n    };\n    /**\n     * Provide a context to be passed to the toolbar.\n     */\n    Composite.prototype.getActionsContext = function () {\n        return null;\n    };\n    /**\n     * Returns the instance of IActionRunner to use with this composite for the\n     * composite tool bar.\n     */\n    Composite.prototype.getActionRunner = function () {\n        if (!this.actionRunner) {\n            this.actionRunner = new actions_1.ActionRunner();\n        }\n        return this.actionRunner;\n    };\n    /**\n     * Method for composite implementors to indicate to the composite container that the title or the actions\n     * of the composite have changed. Calling this method will cause the container to ask for title (getTitle())\n     * and actions (getActions(), getSecondaryActions()) if the composite is visible or the next time the composite\n     * gets visible.\n     */\n    Composite.prototype.updateTitleArea = function () {\n        this._onTitleAreaUpdate.fire();\n    };\n    /**\n     * Returns true if this composite is currently visible and false otherwise.\n     */\n    Composite.prototype.isVisible = function () {\n        return this.visible;\n    };\n    /**\n     * Returns the underlying composite control or null if it is not accessible.\n     */\n    Composite.prototype.getControl = function () {\n        return null;\n    };\n    return Composite;\n}(component_1.Component));\nexports.Composite = Composite;\n/**\n * A composite descriptor is a leightweight descriptor of a composite in the workbench.\n */\nvar CompositeDescriptor = /** @class */ (function () {\n    function CompositeDescriptor(ctor, id, name, cssClass, order, keybindingId) {\n        this.ctor = ctor;\n        this.id = id;\n        this.name = name;\n        this.cssClass = cssClass;\n        this.order = order;\n        this.keybindingId = keybindingId;\n    }\n    CompositeDescriptor.prototype.instantiate = function (instantiationService) {\n        return instantiationService.createInstance(this.ctor);\n    };\n    return CompositeDescriptor;\n}());\nexports.CompositeDescriptor = CompositeDescriptor;\nvar CompositeRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(CompositeRegistry, _super);\n    function CompositeRegistry() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onDidRegister = _this._register(new event_1.Emitter());\n        _this._onDidDeregister = _this._register(new event_1.Emitter());\n        _this.composites = [];\n        return _this;\n    }\n    Object.defineProperty(CompositeRegistry.prototype, \"onDidRegister\", {\n        get: function () { return this._onDidRegister.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompositeRegistry.prototype, \"onDidDeregister\", {\n        get: function () { return this._onDidDeregister.event; },\n        enumerable: true,\n        configurable: true\n    });\n    CompositeRegistry.prototype.registerComposite = function (descriptor) {\n        if (this.compositeById(descriptor.id) !== null) {\n            return;\n        }\n        this.composites.push(descriptor);\n        this._onDidRegister.fire(descriptor);\n    };\n    CompositeRegistry.prototype.deregisterComposite = function (id) {\n        var descriptor = this.compositeById(id);\n        if (descriptor === null) {\n            return;\n        }\n        this.composites.splice(this.composites.indexOf(descriptor), 1);\n        this._onDidDeregister.fire(descriptor);\n    };\n    CompositeRegistry.prototype.getComposite = function (id) {\n        return this.compositeById(id);\n    };\n    CompositeRegistry.prototype.getComposites = function () {\n        return this.composites.slice(0);\n    };\n    CompositeRegistry.prototype.compositeById = function (id) {\n        for (var _i = 0, _a = this.composites; _i < _a.length; _i++) {\n            var composite = _a[_i];\n            if (composite.id === id) {\n                return composite;\n            }\n        }\n        return null;\n    };\n    return CompositeRegistry;\n}(lifecycle_1.Disposable));\nexports.CompositeRegistry = CompositeRegistry;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/composite.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/composite.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction, IActionRunner, ActionRunner } from 'vs/base/common/actions';\nimport { IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { Component } from 'vs/workbench/common/component';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IComposite, ICompositeControl } from 'vs/workbench/common/composite';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IConstructorSignature0, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { trackFocus, Dimension } from 'vs/base/browser/dom';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\n/**\n * Composites are layed out in the sidebar and panel part of the workbench. At a time only one composite\n * can be open in the sidebar, and only one composite can be open in the panel.\n *\n * Each composite has a minimized representation that is good enough to provide some\n * information about the state of the composite data.\n *\n * The workbench will keep a composite alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a composite goes in the order create(), setVisible(true|false),\n * layout(), focus(), dispose(). During use of the workbench, a composite will often receive a setVisible,\n * layout and focus call, but only one create and dispose call.\n */\nexport abstract class Composite extends Component implements IComposite {\n\n\tprivate readonly _onTitleAreaUpdate: Emitter<void> = this._register(new Emitter<void>());\n\tget onTitleAreaUpdate(): Event<void> { return this._onTitleAreaUpdate.event; }\n\n\tprivate readonly _onDidChangeVisibility: Emitter<boolean> = this._register(new Emitter<boolean>());\n\tget onDidChangeVisibility(): Event<boolean> { return this._onDidChangeVisibility.event; }\n\n\tprivate _onDidFocus: Emitter<void>;\n\tget onDidFocus(): Event<void> {\n\t\tif (!this._onDidFocus) {\n\t\t\tthis.registerFocusTrackEvents();\n\t\t}\n\n\t\treturn this._onDidFocus.event;\n\t}\n\n\tprivate _onDidBlur: Emitter<void>;\n\tget onDidBlur(): Event<void> {\n\t\tif (!this._onDidBlur) {\n\t\t\tthis.registerFocusTrackEvents();\n\t\t}\n\n\t\treturn this._onDidBlur.event;\n\t}\n\n\tprivate registerFocusTrackEvents(): void {\n\t\tthis._onDidFocus = this._register(new Emitter<void>());\n\t\tthis._onDidBlur = this._register(new Emitter<void>());\n\n\t\tconst focusTracker = this._register(trackFocus(this.getContainer()));\n\t\tthis._register(focusTracker.onDidFocus(() => this._onDidFocus.fire()));\n\t\tthis._register(focusTracker.onDidBlur(() => this._onDidBlur.fire()));\n\t}\n\n\tprotected actionRunner: IActionRunner;\n\n\tprivate visible: boolean;\n\tprivate parent: HTMLElement;\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate _telemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(id, themeService, storageService);\n\n\t\tthis.visible = false;\n\t}\n\n\tgetTitle(): string | null {\n\t\treturn null;\n\t}\n\n\tprotected get telemetryService(): ITelemetryService {\n\t\treturn this._telemetryService;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to create this composite on the provided parent. This method is only\n\t * called once during the lifetime of the workbench.\n\t * Note that DOM-dependent calculations should be performed from the setVisible()\n\t * call. Only then the composite will be part of the DOM.\n\t */\n\tcreate(parent: HTMLElement): void {\n\t\tthis.parent = parent;\n\t}\n\n\tupdateStyles(): void {\n\t\tsuper.updateStyles();\n\t}\n\n\t/**\n\t * Returns the container this composite is being build in.\n\t */\n\tgetContainer(): HTMLElement {\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to indicate that the composite has become visible or hidden. This method\n\t * is called more than once during workbench lifecycle depending on the user interaction.\n\t * The composite will be on-DOM if visible is set to true and off-DOM otherwise.\n\t *\n\t * Typically this operation should be fast though because setVisible might be called many times during a session.\n\t * If there is a long running opertaion it is fine to have it running in the background asyncly and return before.\n\t */\n\tsetVisible(visible: boolean): void {\n\t\tif (this.visible !== !!visible) {\n\t\t\tthis.visible = visible;\n\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}\n\t}\n\n\t/**\n\t * Called when this composite should receive keyboard focus.\n\t */\n\tfocus(): void {\n\t\t// Subclasses can implement\n\t}\n\n\t/**\n\t * Layout the contents of this composite using the provided dimensions.\n\t */\n\tabstract layout(dimension: Dimension): void;\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite.\n\t */\n\tgetActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite\n\t * in a less prominent way then action from getActions.\n\t */\n\tgetSecondaryActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the context menu of the composite\n\t */\n\tgetContextMenuActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * For any of the actions returned by this composite, provide an IActionItem in\n\t * cases where the implementor of the composite wants to override the presentation\n\t * of an action. Returns undefined to indicate that the action is not rendered through\n\t * an action item.\n\t */\n\tgetActionItem(action: IAction): IActionItem | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Provide a context to be passed to the toolbar.\n\t */\n\tgetActionsContext(): any {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the instance of IActionRunner to use with this composite for the\n\t * composite tool bar.\n\t */\n\tgetActionRunner(): IActionRunner {\n\t\tif (!this.actionRunner) {\n\t\t\tthis.actionRunner = new ActionRunner();\n\t\t}\n\n\t\treturn this.actionRunner;\n\t}\n\n\t/**\n\t * Method for composite implementors to indicate to the composite container that the title or the actions\n\t * of the composite have changed. Calling this method will cause the container to ask for title (getTitle())\n\t * and actions (getActions(), getSecondaryActions()) if the composite is visible or the next time the composite\n\t * gets visible.\n\t */\n\tprotected updateTitleArea(): void {\n\t\tthis._onTitleAreaUpdate.fire();\n\t}\n\n\t/**\n\t * Returns true if this composite is currently visible and false otherwise.\n\t */\n\tisVisible(): boolean {\n\t\treturn this.visible;\n\t}\n\n\t/**\n\t * Returns the underlying composite control or null if it is not accessible.\n\t */\n\tgetControl(): ICompositeControl | null {\n\t\treturn null;\n\t}\n}\n\n/**\n * A composite descriptor is a leightweight descriptor of a composite in the workbench.\n */\nexport abstract class CompositeDescriptor<T extends Composite> {\n\n\tconstructor(\n\t\tprivate readonly ctor: IConstructorSignature0<T>,\n\t\treadonly id: string,\n\t\treadonly name: string,\n\t\treadonly cssClass?: string,\n\t\treadonly order?: number,\n\t\treadonly keybindingId?: string,\n\t) { }\n\n\tinstantiate(instantiationService: IInstantiationService): T {\n\t\treturn instantiationService.createInstance(this.ctor);\n\t}\n}\n\nexport abstract class CompositeRegistry<T extends Composite> extends Disposable {\n\n\tprivate readonly _onDidRegister: Emitter<CompositeDescriptor<T>> = this._register(new Emitter<CompositeDescriptor<T>>());\n\tget onDidRegister(): Event<CompositeDescriptor<T>> { return this._onDidRegister.event; }\n\n\tprivate readonly _onDidDeregister: Emitter<CompositeDescriptor<T>> = this._register(new Emitter<CompositeDescriptor<T>>());\n\tget onDidDeregister(): Event<CompositeDescriptor<T>> { return this._onDidDeregister.event; }\n\n\tprivate composites: CompositeDescriptor<T>[] = [];\n\n\tprotected registerComposite(descriptor: CompositeDescriptor<T>): void {\n\t\tif (this.compositeById(descriptor.id) !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.composites.push(descriptor);\n\t\tthis._onDidRegister.fire(descriptor);\n\t}\n\n\tprotected deregisterComposite(id: string): void {\n\t\tconst descriptor = this.compositeById(id);\n\t\tif (descriptor === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.composites.splice(this.composites.indexOf(descriptor), 1);\n\t\tthis._onDidDeregister.fire(descriptor);\n\t}\n\n\tgetComposite(id: string): CompositeDescriptor<T> | null {\n\t\treturn this.compositeById(id);\n\t}\n\n\tprotected getComposites(): CompositeDescriptor<T>[] {\n\t\treturn this.composites.slice(0);\n\t}\n\n\tprivate compositeById(id: string): CompositeDescriptor<T> | null {\n\t\tfor (const composite of this.composites) {\n\t\t\tif (composite.id === id) {\n\t\t\t\treturn composite;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}]}