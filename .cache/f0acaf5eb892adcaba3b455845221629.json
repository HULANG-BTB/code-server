{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/mime.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/mime.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path_1 = require(\"vs/base/common/path\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar glob_1 = require(\"vs/base/common/glob\");\nexports.MIME_TEXT = 'text/plain';\nexports.MIME_BINARY = 'application/octet-stream';\nexports.MIME_UNKNOWN = 'application/unknown';\nvar registeredAssociations = [];\nvar nonUserRegisteredAssociations = [];\nvar userRegisteredAssociations = [];\n/**\n * Associate a text mime to the registry.\n */\nfunction registerTextMime(association, warnOnOverwrite) {\n    if (warnOnOverwrite === void 0) { warnOnOverwrite = false; }\n    // Register\n    var associationItem = toTextMimeAssociationItem(association);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(function (a) {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(\"Overwriting extension <<\" + associationItem.extension + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(\"Overwriting filename <<\" + associationItem.filename + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(\"Overwriting filepattern <<\" + associationItem.filepattern + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(\"Overwriting firstline <<\" + associationItem.firstline + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n            }\n        });\n    }\n}\nexports.registerTextMime = registerTextMime;\nfunction toTextMimeAssociationItem(association) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: association.userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(path_1.posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear text mimes from the registry.\n */\nfunction clearTextMimes(onlyUserConfigured) {\n    if (!onlyUserConfigured) {\n        registeredAssociations = [];\n        nonUserRegisteredAssociations = [];\n        userRegisteredAssociations = [];\n    }\n    else {\n        registeredAssociations = registeredAssociations.filter(function (a) { return !a.userConfigured; });\n        userRegisteredAssociations = [];\n    }\n}\nexports.clearTextMimes = clearTextMimes;\n/**\n * Given a file, return the best matching mime type for it\n */\nfunction guessMimeTypes(path, firstLine) {\n    if (!path) {\n        return [exports.MIME_UNKNOWN];\n    }\n    path = path.toLowerCase();\n    var filename = path_1.basename(path);\n    // 1.) User configured mappings have highest priority\n    var configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n    if (configuredMime) {\n        return [configuredMime, exports.MIME_TEXT];\n    }\n    // 2.) Registered mappings have middle priority\n    var registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredMime) {\n        return [registeredMime, exports.MIME_TEXT];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        var firstlineMime = guessMimeTypeByFirstline(firstLine);\n        if (firstlineMime) {\n            return [firstlineMime, exports.MIME_TEXT];\n        }\n    }\n    return [exports.MIME_UNKNOWN];\n}\nexports.guessMimeTypes = guessMimeTypes;\nfunction guessMimeTypeByPath(path, filename, associations) {\n    var filenameMatch = null;\n    var patternMatch = null;\n    var extensionMatch = null;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n    for (var i = associations.length - 1; i >= 0; i--) {\n        var association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                var target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (glob_1.match(association.filepatternLowercase, target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (strings_1.endsWith(filename, association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest prio\n    if (filenameMatch) {\n        return filenameMatch.mime;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch.mime;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch.mime;\n    }\n    return null;\n}\nfunction guessMimeTypeByFirstline(firstLine) {\n    if (strings_1.startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        for (var _i = 0, registeredAssociations_1 = registeredAssociations; _i < registeredAssociations_1.length; _i++) {\n            var association = registeredAssociations_1[_i];\n            if (!association.firstline) {\n                continue;\n            }\n            var matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association.mime;\n            }\n        }\n    }\n    return null;\n}\nfunction isUnspecific(mime) {\n    if (!mime) {\n        return true;\n    }\n    if (typeof mime === 'string') {\n        return mime === exports.MIME_BINARY || mime === exports.MIME_TEXT || mime === exports.MIME_UNKNOWN;\n    }\n    return mime.length === 1 && isUnspecific(mime[0]);\n}\nexports.isUnspecific = isUnspecific;\n/**\n * Returns a suggestion for the filename by the following logic:\n * 1. If a relevant extension exists and is an actual filename extension (starting with a dot), suggest the prefix appended by the first one.\n * 2. Otherwise, if there are other extensions, suggest the first one.\n * 3. Otherwise, suggest the prefix.\n */\nfunction suggestFilename(langId, prefix) {\n    var extensions = registeredAssociations\n        .filter(function (assoc) { return !assoc.userConfigured && assoc.extension && assoc.id === langId; })\n        .map(function (assoc) { return assoc.extension; });\n    var extensionsWithDotFirst = arrays_1.coalesce(extensions)\n        .filter(function (assoc) { return strings_1.startsWith(assoc, '.'); });\n    if (extensionsWithDotFirst.length > 0) {\n        return prefix + extensionsWithDotFirst[0];\n    }\n    return extensions[0] || prefix;\n}\nexports.suggestFilename = suggestFilename;\n// Known media mimes that we can handle\nvar mapExtToMediaMimes = {\n    '.bmp': 'image/bmp',\n    '.gif': 'image/gif',\n    '.jpg': 'image/jpg',\n    '.jpeg': 'image/jpg',\n    '.jpe': 'image/jpg',\n    '.png': 'image/png',\n    '.tiff': 'image/tiff',\n    '.tif': 'image/tiff',\n    '.ico': 'image/x-icon',\n    '.tga': 'image/x-tga',\n    '.psd': 'image/vnd.adobe.photoshop',\n    '.webp': 'image/webp',\n    '.mid': 'audio/midi',\n    '.midi': 'audio/midi',\n    '.mp4a': 'audio/mp4',\n    '.mpga': 'audio/mpeg',\n    '.mp2': 'audio/mpeg',\n    '.mp2a': 'audio/mpeg',\n    '.mp3': 'audio/mpeg',\n    '.m2a': 'audio/mpeg',\n    '.m3a': 'audio/mpeg',\n    '.oga': 'audio/ogg',\n    '.ogg': 'audio/ogg',\n    '.spx': 'audio/ogg',\n    '.aac': 'audio/x-aac',\n    '.wav': 'audio/x-wav',\n    '.wma': 'audio/x-ms-wma',\n    '.mp4': 'video/mp4',\n    '.mp4v': 'video/mp4',\n    '.mpg4': 'video/mp4',\n    '.mpeg': 'video/mpeg',\n    '.mpg': 'video/mpeg',\n    '.mpe': 'video/mpeg',\n    '.m1v': 'video/mpeg',\n    '.m2v': 'video/mpeg',\n    '.ogv': 'video/ogg',\n    '.qt': 'video/quicktime',\n    '.mov': 'video/quicktime',\n    '.webm': 'video/webm',\n    '.mkv': 'video/x-matroska',\n    '.mk3d': 'video/x-matroska',\n    '.mks': 'video/x-matroska',\n    '.wmv': 'video/x-ms-wmv',\n    '.flv': 'video/x-flv',\n    '.avi': 'video/x-msvideo',\n    '.movie': 'video/x-sgi-movie'\n};\nfunction getMediaMime(path) {\n    var ext = path_1.extname(path);\n    return mapExtToMediaMimes[ext.toLowerCase()];\n}\nexports.getMediaMime = getMediaMime;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/mime.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/mime.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename, posix, extname } from 'vs/base/common/path';\nimport { endsWith, startsWithUTF8BOM, startsWith } from 'vs/base/common/strings';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { match } from 'vs/base/common/glob';\n\nexport const MIME_TEXT = 'text/plain';\nexport const MIME_BINARY = 'application/octet-stream';\nexport const MIME_UNKNOWN = 'application/unknown';\n\nexport interface ITextMimeAssociation {\n\treadonly id: string;\n\treadonly mime: string;\n\treadonly filename?: string;\n\treadonly extension?: string;\n\treadonly filepattern?: string;\n\treadonly firstline?: RegExp;\n\treadonly userConfigured?: boolean;\n}\n\ninterface ITextMimeAssociationItem extends ITextMimeAssociation {\n\treadonly filenameLowercase?: string;\n\treadonly extensionLowercase?: string;\n\treadonly filepatternLowercase?: string;\n\treadonly filepatternOnPath?: boolean;\n}\n\nlet registeredAssociations: ITextMimeAssociationItem[] = [];\nlet nonUserRegisteredAssociations: ITextMimeAssociationItem[] = [];\nlet userRegisteredAssociations: ITextMimeAssociationItem[] = [];\n\n/**\n * Associate a text mime to the registry.\n */\nexport function registerTextMime(association: ITextMimeAssociation, warnOnOverwrite = false): void {\n\n\t// Register\n\tconst associationItem = toTextMimeAssociationItem(association);\n\tregisteredAssociations.push(associationItem);\n\tif (!associationItem.userConfigured) {\n\t\tnonUserRegisteredAssociations.push(associationItem);\n\t} else {\n\t\tuserRegisteredAssociations.push(associationItem);\n\t}\n\n\t// Check for conflicts unless this is a user configured association\n\tif (warnOnOverwrite && !associationItem.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === associationItem.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (associationItem.extension && a.extension === associationItem.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filename && a.filename === associationItem.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.firstline && a.firstline === associationItem.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toTextMimeAssociationItem(association: ITextMimeAssociation): ITextMimeAssociationItem {\n\treturn {\n\t\tid: association.id,\n\t\tmime: association.mime,\n\t\tfilename: association.filename,\n\t\textension: association.extension,\n\t\tfilepattern: association.filepattern,\n\t\tfirstline: association.firstline,\n\t\tuserConfigured: association.userConfigured,\n\t\tfilenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n\t\textensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n\t\tfilepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n\t\tfilepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n\t};\n}\n\n/**\n * Clear text mimes from the registry.\n */\nexport function clearTextMimes(onlyUserConfigured?: boolean): void {\n\tif (!onlyUserConfigured) {\n\t\tregisteredAssociations = [];\n\t\tnonUserRegisteredAssociations = [];\n\t\tuserRegisteredAssociations = [];\n\t} else {\n\t\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\t\tuserRegisteredAssociations = [];\n\t}\n}\n\n/**\n * Given a file, return the best matching mime type for it\n */\nexport function guessMimeTypes(path: string | null, firstLine?: string): string[] {\n\tif (!path) {\n\t\treturn [MIME_UNKNOWN];\n\t}\n\n\tpath = path.toLowerCase();\n\tconst filename = basename(path);\n\n\t// 1.) User configured mappings have highest priority\n\tconst configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n\tif (configuredMime) {\n\t\treturn [configuredMime, MIME_TEXT];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tconst registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n\tif (registeredMime) {\n\t\treturn [registeredMime, MIME_TEXT];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tconst firstlineMime = guessMimeTypeByFirstline(firstLine);\n\t\tif (firstlineMime) {\n\t\t\treturn [firstlineMime, MIME_TEXT];\n\t\t}\n\t}\n\n\treturn [MIME_UNKNOWN];\n}\n\nfunction guessMimeTypeByPath(path: string, filename: string, associations: ITextMimeAssociationItem[]): string | null {\n\tlet filenameMatch: ITextMimeAssociationItem | null = null;\n\tlet patternMatch: ITextMimeAssociationItem | null = null;\n\tlet extensionMatch: ITextMimeAssociationItem | null = null;\n\n\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t// association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n\tfor (let i = associations.length - 1; i >= 0; i--) {\n\t\tconst association = associations[i];\n\n\t\t// First exact name match\n\t\tif (filename === association.filenameLowercase) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern!.length) {\n\t\t\t\tconst target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\t\t\t\tif (match(association.filepatternLowercase!, target)) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension!.length) {\n\t\t\t\tif (endsWith(filename, association.extensionLowercase!)) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest prio\n\tif (filenameMatch) {\n\t\treturn filenameMatch.mime;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch.mime;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch.mime;\n\t}\n\n\treturn null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine: string): string | null {\n\tif (startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\t\tfor (const association of registeredAssociations) {\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\treturn association.mime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isUnspecific(mime: string[] | string): boolean {\n\tif (!mime) {\n\t\treturn true;\n\t}\n\n\tif (typeof mime === 'string') {\n\t\treturn mime === MIME_BINARY || mime === MIME_TEXT || mime === MIME_UNKNOWN;\n\t}\n\n\treturn mime.length === 1 && isUnspecific(mime[0]);\n}\n\n/**\n * Returns a suggestion for the filename by the following logic:\n * 1. If a relevant extension exists and is an actual filename extension (starting with a dot), suggest the prefix appended by the first one.\n * 2. Otherwise, if there are other extensions, suggest the first one.\n * 3. Otherwise, suggest the prefix.\n */\nexport function suggestFilename(langId: string | null, prefix: string): string {\n\tconst extensions = registeredAssociations\n\t\t.filter(assoc => !assoc.userConfigured && assoc.extension && assoc.id === langId)\n\t\t.map(assoc => assoc.extension);\n\tconst extensionsWithDotFirst = coalesce(extensions)\n\t\t.filter(assoc => startsWith(assoc, '.'));\n\n\tif (extensionsWithDotFirst.length > 0) {\n\t\treturn prefix + extensionsWithDotFirst[0];\n\t}\n\n\treturn extensions[0] || prefix;\n}\n\ninterface MapExtToMediaMimes {\n\t[index: string]: string;\n}\n\n// Known media mimes that we can handle\nconst mapExtToMediaMimes: MapExtToMediaMimes = {\n\t'.bmp': 'image/bmp',\n\t'.gif': 'image/gif',\n\t'.jpg': 'image/jpg',\n\t'.jpeg': 'image/jpg',\n\t'.jpe': 'image/jpg',\n\t'.png': 'image/png',\n\t'.tiff': 'image/tiff',\n\t'.tif': 'image/tiff',\n\t'.ico': 'image/x-icon',\n\t'.tga': 'image/x-tga',\n\t'.psd': 'image/vnd.adobe.photoshop',\n\t'.webp': 'image/webp',\n\t'.mid': 'audio/midi',\n\t'.midi': 'audio/midi',\n\t'.mp4a': 'audio/mp4',\n\t'.mpga': 'audio/mpeg',\n\t'.mp2': 'audio/mpeg',\n\t'.mp2a': 'audio/mpeg',\n\t'.mp3': 'audio/mpeg',\n\t'.m2a': 'audio/mpeg',\n\t'.m3a': 'audio/mpeg',\n\t'.oga': 'audio/ogg',\n\t'.ogg': 'audio/ogg',\n\t'.spx': 'audio/ogg',\n\t'.aac': 'audio/x-aac',\n\t'.wav': 'audio/x-wav',\n\t'.wma': 'audio/x-ms-wma',\n\t'.mp4': 'video/mp4',\n\t'.mp4v': 'video/mp4',\n\t'.mpg4': 'video/mp4',\n\t'.mpeg': 'video/mpeg',\n\t'.mpg': 'video/mpeg',\n\t'.mpe': 'video/mpeg',\n\t'.m1v': 'video/mpeg',\n\t'.m2v': 'video/mpeg',\n\t'.ogv': 'video/ogg',\n\t'.qt': 'video/quicktime',\n\t'.mov': 'video/quicktime',\n\t'.webm': 'video/webm',\n\t'.mkv': 'video/x-matroska',\n\t'.mk3d': 'video/x-matroska',\n\t'.mks': 'video/x-matroska',\n\t'.wmv': 'video/x-ms-wmv',\n\t'.flv': 'video/x-flv',\n\t'.avi': 'video/x-msvideo',\n\t'.movie': 'video/x-sgi-movie'\n};\n\nexport function getMediaMime(path: string): string | undefined {\n\tconst ext = extname(path);\n\treturn mapExtToMediaMimes[ext.toLowerCase()];\n}\n"]}]}