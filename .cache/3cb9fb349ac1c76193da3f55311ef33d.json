{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsToasts.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsToasts.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/notificationsToasts\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar notificationsList_1 = require(\"vs/workbench/browser/parts/notifications/notificationsList\");\nvar event_1 = require(\"vs/base/common/event\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar notificationsCommands_1 = require(\"vs/workbench/browser/parts/notifications/notificationsCommands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar nls_1 = require(\"vs/nls\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar scrollable_1 = require(\"vs/base/common/scrollable\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar async_1 = require(\"vs/base/common/async\");\nvar ToastVisibility;\n(function (ToastVisibility) {\n    ToastVisibility[ToastVisibility[\"HIDDEN_OR_VISIBLE\"] = 0] = \"HIDDEN_OR_VISIBLE\";\n    ToastVisibility[ToastVisibility[\"HIDDEN\"] = 1] = \"HIDDEN\";\n    ToastVisibility[ToastVisibility[\"VISIBLE\"] = 2] = \"VISIBLE\";\n})(ToastVisibility || (ToastVisibility = {}));\nvar NotificationsToasts = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsToasts, _super);\n    function NotificationsToasts(container, model, instantiationService, layoutService, themeService, editorGroupService, contextKeyService, lifecycleService, windowService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.container = container;\n        _this.model = model;\n        _this.instantiationService = instantiationService;\n        _this.layoutService = layoutService;\n        _this.editorGroupService = editorGroupService;\n        _this.lifecycleService = lifecycleService;\n        _this.windowService = windowService;\n        _this.mapNotificationToToast = new Map();\n        _this.notificationsToastsVisibleContextKey = notificationsCommands_1.NotificationsToastsVisibleContext.bindTo(contextKeyService);\n        _this.registerListeners();\n        return _this;\n    }\n    NotificationsToasts.prototype.registerListeners = function () {\n        var _this = this;\n        // Layout\n        this._register(this.layoutService.onLayout(function (dimension) { return _this.layout(dimension); }));\n        // Delay some tasks until after we can show notifications\n        this.onCanShowNotifications().then(function () {\n            // Show toast for initial notifications if any\n            _this.model.notifications.forEach(function (notification) { return _this.addToast(notification); });\n            // Update toasts on notification changes\n            _this._register(_this.model.onDidNotificationChange(function (e) { return _this.onDidNotificationChange(e); }));\n        });\n    };\n    NotificationsToasts.prototype.onCanShowNotifications = function () {\n        var _this = this;\n        // Wait for the running phase to ensure we can draw notifications properly\n        return this.lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n            // Push notificiations out until either workbench is restored\n            // or some time has ellapsed to reduce pressure on the startup\n            return Promise.race([\n                _this.lifecycleService.when(lifecycle_2.LifecyclePhase.Restored),\n                async_1.timeout(2000)\n            ]);\n        });\n    };\n    NotificationsToasts.prototype.onDidNotificationChange = function (e) {\n        switch (e.kind) {\n            case notifications_1.NotificationChangeType.ADD:\n                return this.addToast(e.item);\n            case notifications_1.NotificationChangeType.REMOVE:\n                return this.removeToast(e.item);\n        }\n    };\n    NotificationsToasts.prototype.addToast = function (item) {\n        var _this = this;\n        if (this.isNotificationsCenterVisible) {\n            return; // do not show toasts while notification center is visibles\n        }\n        if (item.silent) {\n            return; // do not show toats for silenced notifications\n        }\n        // Lazily create toasts containers\n        if (!this.notificationsToastsContainer) {\n            this.notificationsToastsContainer = document.createElement('div');\n            dom_1.addClass(this.notificationsToastsContainer, 'notifications-toasts');\n            this.container.appendChild(this.notificationsToastsContainer);\n        }\n        // Make Visible\n        dom_1.addClass(this.notificationsToastsContainer, 'visible');\n        var itemDisposeables = [];\n        // Container\n        var notificationToastContainer = document.createElement('div');\n        dom_1.addClass(notificationToastContainer, 'notification-toast-container');\n        var firstToast = this.notificationsToastsContainer.firstChild;\n        if (firstToast) {\n            this.notificationsToastsContainer.insertBefore(notificationToastContainer, firstToast); // always first\n        }\n        else {\n            this.notificationsToastsContainer.appendChild(notificationToastContainer);\n        }\n        // Toast\n        var notificationToast = document.createElement('div');\n        dom_1.addClass(notificationToast, 'notification-toast');\n        notificationToastContainer.appendChild(notificationToast);\n        // Create toast with item and show\n        var notificationList = this.instantiationService.createInstance(notificationsList_1.NotificationsList, notificationToast, {\n            ariaLabel: nls_1.localize('notificationsToast', \"Notification Toast\"),\n            verticalScrollMode: scrollable_1.ScrollbarVisibility.Hidden\n        });\n        itemDisposeables.push(notificationList);\n        var toast = { item: item, list: notificationList, container: notificationToastContainer, toast: notificationToast, disposeables: itemDisposeables };\n        this.mapNotificationToToast.set(item, toast);\n        itemDisposeables.push(lifecycle_1.toDisposable(function () {\n            if (_this.isVisible(toast)) {\n                _this.notificationsToastsContainer.removeChild(toast.container);\n            }\n        }));\n        // Make visible\n        notificationList.show();\n        // Layout lists\n        var maxDimensions = this.computeMaxDimensions();\n        this.layoutLists(maxDimensions.width);\n        // Show notification\n        notificationList.updateNotificationsList(0, 0, [item]);\n        // Layout container: only after we show the notification to ensure that\n        // the height computation takes the content of it into account!\n        this.layoutContainer(maxDimensions.height);\n        // Update when item height changes due to expansion\n        itemDisposeables.push(item.onDidExpansionChange(function () {\n            notificationList.updateNotificationsList(0, 1, [item]);\n        }));\n        // Update when item height potentially changes due to label changes\n        itemDisposeables.push(item.onDidLabelChange(function (e) {\n            if (e.kind === notifications_1.NotificationViewItemLabelKind.ACTIONS || e.kind === notifications_1.NotificationViewItemLabelKind.MESSAGE) {\n                notificationList.updateNotificationsList(0, 1, [item]);\n            }\n        }));\n        // Remove when item gets closed\n        event_1.Event.once(item.onDidClose)(function () {\n            _this.removeToast(item);\n        });\n        // Automatically purge non-sticky notifications\n        this.purgeNotification(item, notificationToastContainer, notificationList, itemDisposeables);\n        // Theming\n        this.updateStyles();\n        // Context Key\n        this.notificationsToastsVisibleContextKey.set(true);\n        // Animate in\n        dom_1.addClass(notificationToast, 'notification-fade-in');\n        itemDisposeables.push(dom_1.addDisposableListener(notificationToast, 'transitionend', function () {\n            dom_1.removeClass(notificationToast, 'notification-fade-in');\n            dom_1.addClass(notificationToast, 'notification-fade-in-done');\n        }));\n    };\n    NotificationsToasts.prototype.purgeNotification = function (item, notificationToastContainer, notificationList, disposables) {\n        var _this = this;\n        // Track mouse over item\n        var isMouseOverToast = false;\n        disposables.push(dom_1.addDisposableListener(notificationToastContainer, dom_1.EventType.MOUSE_OVER, function () { return isMouseOverToast = true; }));\n        disposables.push(dom_1.addDisposableListener(notificationToastContainer, dom_1.EventType.MOUSE_OUT, function () { return isMouseOverToast = false; }));\n        // Install Timers to Purge Notification\n        var purgeTimeoutHandle;\n        var listener;\n        var hideAfterTimeout = function () {\n            purgeTimeoutHandle = setTimeout(function () {\n                // If the notification is sticky or prompting and the window does not have\n                // focus, we wait for the window to gain focus again before triggering\n                // the timeout again. This prevents an issue where focussing the window\n                // could immediately hide the notification because the timeout was triggered\n                // again.\n                if ((item.sticky || item.hasPrompt()) && !_this.windowService.hasFocus) {\n                    if (!listener) {\n                        listener = _this.windowService.onDidChangeFocus(function (focus) {\n                            if (focus) {\n                                hideAfterTimeout();\n                            }\n                        });\n                        disposables.push(listener);\n                    }\n                }\n                // Otherwise...\n                else if (item.sticky || // never hide sticky notifications\n                    notificationList.hasFocus() || // never hide notifications with focus\n                    isMouseOverToast // never hide notifications under mouse\n                ) {\n                    hideAfterTimeout();\n                }\n                else {\n                    _this.removeToast(item);\n                }\n            }, NotificationsToasts.PURGE_TIMEOUT[item.severity]);\n        };\n        hideAfterTimeout();\n        disposables.push(lifecycle_1.toDisposable(function () { return clearTimeout(purgeTimeoutHandle); }));\n    };\n    NotificationsToasts.prototype.removeToast = function (item) {\n        var notificationToast = this.mapNotificationToToast.get(item);\n        var focusGroup = false;\n        if (notificationToast) {\n            var toastHasDOMFocus = dom_1.isAncestor(document.activeElement, notificationToast.container);\n            if (toastHasDOMFocus) {\n                focusGroup = !(this.focusNext() || this.focusPrevious()); // focus next if any, otherwise focus editor\n            }\n            // Listeners\n            lifecycle_1.dispose(notificationToast.disposeables);\n            // Remove from Map\n            this.mapNotificationToToast.delete(item);\n        }\n        // Layout if we still have toasts\n        if (this.mapNotificationToToast.size > 0) {\n            this.layout(this.workbenchDimensions);\n        }\n        // Otherwise hide if no more toasts to show\n        else {\n            this.doHide();\n            // Move focus back to editor group as needed\n            if (focusGroup) {\n                this.editorGroupService.activeGroup.focus();\n            }\n        }\n    };\n    NotificationsToasts.prototype.removeToasts = function () {\n        this.mapNotificationToToast.forEach(function (toast) { return lifecycle_1.dispose(toast.disposeables); });\n        this.mapNotificationToToast.clear();\n        this.doHide();\n    };\n    NotificationsToasts.prototype.doHide = function () {\n        if (this.notificationsToastsContainer) {\n            dom_1.removeClass(this.notificationsToastsContainer, 'visible');\n        }\n        // Context Key\n        this.notificationsToastsVisibleContextKey.set(false);\n    };\n    NotificationsToasts.prototype.hide = function () {\n        var focusGroup = dom_1.isAncestor(document.activeElement, this.notificationsToastsContainer);\n        this.removeToasts();\n        if (focusGroup) {\n            this.editorGroupService.activeGroup.focus();\n        }\n    };\n    NotificationsToasts.prototype.focus = function () {\n        var toasts = this.getToasts(ToastVisibility.VISIBLE);\n        if (toasts.length > 0) {\n            toasts[0].list.focusFirst();\n            return true;\n        }\n        return false;\n    };\n    NotificationsToasts.prototype.focusNext = function () {\n        var toasts = this.getToasts(ToastVisibility.VISIBLE);\n        for (var i = 0; i < toasts.length; i++) {\n            var toast = toasts[i];\n            if (toast.list.hasFocus()) {\n                var nextToast = toasts[i + 1];\n                if (nextToast) {\n                    nextToast.list.focusFirst();\n                    return true;\n                }\n                break;\n            }\n        }\n        return false;\n    };\n    NotificationsToasts.prototype.focusPrevious = function () {\n        var toasts = this.getToasts(ToastVisibility.VISIBLE);\n        for (var i = 0; i < toasts.length; i++) {\n            var toast = toasts[i];\n            if (toast.list.hasFocus()) {\n                var previousToast = toasts[i - 1];\n                if (previousToast) {\n                    previousToast.list.focusFirst();\n                    return true;\n                }\n                break;\n            }\n        }\n        return false;\n    };\n    NotificationsToasts.prototype.focusFirst = function () {\n        var toast = this.getToasts(ToastVisibility.VISIBLE)[0];\n        if (toast) {\n            toast.list.focusFirst();\n            return true;\n        }\n        return false;\n    };\n    NotificationsToasts.prototype.focusLast = function () {\n        var toasts = this.getToasts(ToastVisibility.VISIBLE);\n        if (toasts.length > 0) {\n            toasts[toasts.length - 1].list.focusFirst();\n            return true;\n        }\n        return false;\n    };\n    NotificationsToasts.prototype.update = function (isCenterVisible) {\n        if (this.isNotificationsCenterVisible !== isCenterVisible) {\n            this.isNotificationsCenterVisible = isCenterVisible;\n            // Hide all toasts when the notificationcenter gets visible\n            if (this.isNotificationsCenterVisible) {\n                this.removeToasts();\n            }\n        }\n    };\n    NotificationsToasts.prototype.updateStyles = function () {\n        var _this = this;\n        this.mapNotificationToToast.forEach(function (t) {\n            var widgetShadowColor = _this.getColor(colorRegistry_1.widgetShadow);\n            t.toast.style.boxShadow = widgetShadowColor ? \"0 0px 8px \" + widgetShadowColor : null;\n            var borderColor = _this.getColor(theme_1.NOTIFICATIONS_TOAST_BORDER);\n            t.toast.style.border = borderColor ? \"1px solid \" + borderColor : null;\n        });\n    };\n    NotificationsToasts.prototype.getToasts = function (state) {\n        var _this = this;\n        var notificationToasts = [];\n        this.mapNotificationToToast.forEach(function (toast) {\n            switch (state) {\n                case ToastVisibility.HIDDEN_OR_VISIBLE:\n                    notificationToasts.push(toast);\n                    break;\n                case ToastVisibility.HIDDEN:\n                    if (!_this.isVisible(toast)) {\n                        notificationToasts.push(toast);\n                    }\n                    break;\n                case ToastVisibility.VISIBLE:\n                    if (_this.isVisible(toast)) {\n                        notificationToasts.push(toast);\n                    }\n                    break;\n            }\n        });\n        return notificationToasts.reverse(); // from newest to oldest\n    };\n    NotificationsToasts.prototype.layout = function (dimension) {\n        this.workbenchDimensions = dimension;\n        var maxDimensions = this.computeMaxDimensions();\n        // Hide toasts that exceed height\n        if (maxDimensions.height) {\n            this.layoutContainer(maxDimensions.height);\n        }\n        // Layout all lists of toasts\n        this.layoutLists(maxDimensions.width);\n    };\n    NotificationsToasts.prototype.computeMaxDimensions = function () {\n        var maxWidth = NotificationsToasts.MAX_WIDTH;\n        var availableWidth = maxWidth;\n        var availableHeight;\n        if (this.workbenchDimensions) {\n            // Make sure notifications are not exceding available width\n            availableWidth = this.workbenchDimensions.width;\n            availableWidth -= (2 * 8); // adjust for paddings left and right\n            // Make sure notifications are not exceeding available height\n            availableHeight = this.workbenchDimensions.height;\n            if (this.layoutService.isVisible(layoutService_1.Parts.STATUSBAR_PART)) {\n                availableHeight -= 22; // adjust for status bar\n            }\n            if (this.layoutService.isVisible(layoutService_1.Parts.TITLEBAR_PART)) {\n                availableHeight -= 22; // adjust for title bar\n            }\n            availableHeight -= (2 * 12); // adjust for paddings top and bottom\n        }\n        availableHeight = typeof availableHeight === 'number'\n            ? Math.round(availableHeight * 0.618) // try to not cover the full height for stacked toasts\n            : 0;\n        return new dom_1.Dimension(Math.min(maxWidth, availableWidth), availableHeight);\n    };\n    NotificationsToasts.prototype.layoutLists = function (width) {\n        this.mapNotificationToToast.forEach(function (toast) { return toast.list.layout(width); });\n    };\n    NotificationsToasts.prototype.layoutContainer = function (heightToGive) {\n        var _this = this;\n        var visibleToasts = 0;\n        this.getToasts(ToastVisibility.HIDDEN_OR_VISIBLE).forEach(function (toast) {\n            // In order to measure the client height, the element cannot have display: none\n            toast.container.style.opacity = '0';\n            _this.setVisibility(toast, true);\n            heightToGive -= toast.container.offsetHeight;\n            var makeVisible = false;\n            if (visibleToasts === NotificationsToasts.MAX_NOTIFICATIONS) {\n                makeVisible = false; // never show more than MAX_NOTIFICATIONS\n            }\n            else if (heightToGive >= 0) {\n                makeVisible = true; // hide toast if available height is too little\n            }\n            // Hide or show toast based on context\n            _this.setVisibility(toast, makeVisible);\n            toast.container.style.opacity = null;\n            if (makeVisible) {\n                visibleToasts++;\n            }\n        });\n    };\n    NotificationsToasts.prototype.setVisibility = function (toast, visible) {\n        if (this.isVisible(toast) === visible) {\n            return;\n        }\n        if (visible) {\n            this.notificationsToastsContainer.appendChild(toast.container);\n        }\n        else {\n            this.notificationsToastsContainer.removeChild(toast.container);\n        }\n    };\n    NotificationsToasts.prototype.isVisible = function (toast) {\n        return !!toast.container.parentElement;\n    };\n    NotificationsToasts.MAX_WIDTH = 450;\n    NotificationsToasts.MAX_NOTIFICATIONS = 3;\n    NotificationsToasts.PURGE_TIMEOUT = (function () {\n        var intervals = Object.create(null);\n        intervals[notification_1.Severity.Info] = 15000;\n        intervals[notification_1.Severity.Warning] = 18000;\n        intervals[notification_1.Severity.Error] = 20000;\n        return intervals;\n    })();\n    NotificationsToasts = tslib_1.__decorate([\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(6, contextkey_1.IContextKeyService),\n        tslib_1.__param(7, lifecycle_2.ILifecycleService),\n        tslib_1.__param(8, windows_1.IWindowService)\n    ], NotificationsToasts);\n    return NotificationsToasts;\n}(theme_1.Themable));\nexports.NotificationsToasts = NotificationsToasts;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsToasts.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsToasts.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsToasts';\nimport { INotificationsModel, NotificationChangeType, INotificationChangeEvent, INotificationViewItem, NotificationViewItemLabelKind } from 'vs/workbench/common/notifications';\nimport { IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { addClass, removeClass, isAncestor, addDisposableListener, EventType, Dimension } from 'vs/base/browser/dom';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { NotificationsList } from 'vs/workbench/browser/parts/notifications/notificationsList';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { Themable, NOTIFICATIONS_TOAST_BORDER } from 'vs/workbench/common/theme';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { NotificationsToastsVisibleContext } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { localize } from 'vs/nls';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { ScrollbarVisibility } from 'vs/base/common/scrollable';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { timeout } from 'vs/base/common/async';\n\ninterface INotificationToast {\n\titem: INotificationViewItem;\n\tlist: NotificationsList;\n\tcontainer: HTMLElement;\n\ttoast: HTMLElement;\n\tdisposeables: IDisposable[];\n}\n\nenum ToastVisibility {\n\tHIDDEN_OR_VISIBLE,\n\tHIDDEN,\n\tVISIBLE\n}\n\nexport class NotificationsToasts extends Themable {\n\n\tprivate static MAX_WIDTH = 450;\n\tprivate static MAX_NOTIFICATIONS = 3;\n\n\tprivate static PURGE_TIMEOUT: { [severity: number]: number } = (() => {\n\t\tconst intervals = Object.create(null);\n\t\tintervals[Severity.Info] = 15000;\n\t\tintervals[Severity.Warning] = 18000;\n\t\tintervals[Severity.Error] = 20000;\n\n\t\treturn intervals;\n\t})();\n\n\tprivate notificationsToastsContainer: HTMLElement;\n\tprivate workbenchDimensions: Dimension;\n\tprivate isNotificationsCenterVisible: boolean;\n\tprivate mapNotificationToToast: Map<INotificationViewItem, INotificationToast>;\n\tprivate notificationsToastsVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate container: HTMLElement,\n\t\tprivate model: INotificationsModel,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.mapNotificationToToast = new Map<INotificationViewItem, INotificationToast>();\n\t\tthis.notificationsToastsVisibleContextKey = NotificationsToastsVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Layout\n\t\tthis._register(this.layoutService.onLayout(dimension => this.layout(dimension)));\n\n\t\t// Delay some tasks until after we can show notifications\n\t\tthis.onCanShowNotifications().then(() => {\n\n\t\t\t// Show toast for initial notifications if any\n\t\t\tthis.model.notifications.forEach(notification => this.addToast(notification));\n\n\t\t\t// Update toasts on notification changes\n\t\t\tthis._register(this.model.onDidNotificationChange(e => this.onDidNotificationChange(e)));\n\t\t});\n\t}\n\n\tprivate onCanShowNotifications(): Promise<void> {\n\n\t\t// Wait for the running phase to ensure we can draw notifications properly\n\t\treturn this.lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\n\t\t\t// Push notificiations out until either workbench is restored\n\t\t\t// or some time has ellapsed to reduce pressure on the startup\n\t\t\treturn Promise.race([\n\t\t\t\tthis.lifecycleService.when(LifecyclePhase.Restored),\n\t\t\t\ttimeout(2000)\n\t\t\t]);\n\t\t});\n\t}\n\n\tprivate onDidNotificationChange(e: INotificationChangeEvent): void {\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\treturn this.addToast(e.item);\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\treturn this.removeToast(e.item);\n\t\t}\n\t}\n\n\tprivate addToast(item: INotificationViewItem): void {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn; // do not show toasts while notification center is visibles\n\t\t}\n\n\t\tif (item.silent) {\n\t\t\treturn; // do not show toats for silenced notifications\n\t\t}\n\n\t\t// Lazily create toasts containers\n\t\tif (!this.notificationsToastsContainer) {\n\t\t\tthis.notificationsToastsContainer = document.createElement('div');\n\t\t\taddClass(this.notificationsToastsContainer, 'notifications-toasts');\n\n\t\t\tthis.container.appendChild(this.notificationsToastsContainer);\n\t\t}\n\n\t\t// Make Visible\n\t\taddClass(this.notificationsToastsContainer, 'visible');\n\n\t\tconst itemDisposeables: IDisposable[] = [];\n\n\t\t// Container\n\t\tconst notificationToastContainer = document.createElement('div');\n\t\taddClass(notificationToastContainer, 'notification-toast-container');\n\n\t\tconst firstToast = this.notificationsToastsContainer.firstChild;\n\t\tif (firstToast) {\n\t\t\tthis.notificationsToastsContainer.insertBefore(notificationToastContainer, firstToast); // always first\n\t\t} else {\n\t\t\tthis.notificationsToastsContainer.appendChild(notificationToastContainer);\n\t\t}\n\n\t\t// Toast\n\t\tconst notificationToast = document.createElement('div');\n\t\taddClass(notificationToast, 'notification-toast');\n\t\tnotificationToastContainer.appendChild(notificationToast);\n\n\t\t// Create toast with item and show\n\t\tconst notificationList = this.instantiationService.createInstance(NotificationsList, notificationToast, {\n\t\t\tariaLabel: localize('notificationsToast', \"Notification Toast\"),\n\t\t\tverticalScrollMode: ScrollbarVisibility.Hidden\n\t\t});\n\t\titemDisposeables.push(notificationList);\n\n\t\tconst toast: INotificationToast = { item, list: notificationList, container: notificationToastContainer, toast: notificationToast, disposeables: itemDisposeables };\n\t\tthis.mapNotificationToToast.set(item, toast);\n\n\t\titemDisposeables.push(toDisposable(() => {\n\t\t\tif (this.isVisible(toast)) {\n\t\t\t\tthis.notificationsToastsContainer.removeChild(toast.container);\n\t\t\t}\n\t\t}));\n\n\t\t// Make visible\n\t\tnotificationList.show();\n\n\t\t// Layout lists\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\t\tthis.layoutLists(maxDimensions.width);\n\n\t\t// Show notification\n\t\tnotificationList.updateNotificationsList(0, 0, [item]);\n\n\t\t// Layout container: only after we show the notification to ensure that\n\t\t// the height computation takes the content of it into account!\n\t\tthis.layoutContainer(maxDimensions.height);\n\n\t\t// Update when item height changes due to expansion\n\t\titemDisposeables.push(item.onDidExpansionChange(() => {\n\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t}));\n\n\t\t// Update when item height potentially changes due to label changes\n\t\titemDisposeables.push(item.onDidLabelChange(e => {\n\t\t\tif (e.kind === NotificationViewItemLabelKind.ACTIONS || e.kind === NotificationViewItemLabelKind.MESSAGE) {\n\t\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t\t}\n\t\t}));\n\n\t\t// Remove when item gets closed\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\tthis.removeToast(item);\n\t\t});\n\n\t\t// Automatically purge non-sticky notifications\n\t\tthis.purgeNotification(item, notificationToastContainer, notificationList, itemDisposeables);\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(true);\n\n\t\t// Animate in\n\t\taddClass(notificationToast, 'notification-fade-in');\n\t\titemDisposeables.push(addDisposableListener(notificationToast, 'transitionend', () => {\n\t\t\tremoveClass(notificationToast, 'notification-fade-in');\n\t\t\taddClass(notificationToast, 'notification-fade-in-done');\n\t\t}));\n\t}\n\n\tprivate purgeNotification(item: INotificationViewItem, notificationToastContainer: HTMLElement, notificationList: NotificationsList, disposables: IDisposable[]): void {\n\n\t\t// Track mouse over item\n\t\tlet isMouseOverToast = false;\n\t\tdisposables.push(addDisposableListener(notificationToastContainer, EventType.MOUSE_OVER, () => isMouseOverToast = true));\n\t\tdisposables.push(addDisposableListener(notificationToastContainer, EventType.MOUSE_OUT, () => isMouseOverToast = false));\n\n\t\t// Install Timers to Purge Notification\n\t\tlet purgeTimeoutHandle: any;\n\t\tlet listener: IDisposable;\n\n\t\tconst hideAfterTimeout = () => {\n\n\t\t\tpurgeTimeoutHandle = setTimeout(() => {\n\n\t\t\t\t// If the notification is sticky or prompting and the window does not have\n\t\t\t\t// focus, we wait for the window to gain focus again before triggering\n\t\t\t\t// the timeout again. This prevents an issue where focussing the window\n\t\t\t\t// could immediately hide the notification because the timeout was triggered\n\t\t\t\t// again.\n\t\t\t\tif ((item.sticky || item.hasPrompt()) && !this.windowService.hasFocus) {\n\t\t\t\t\tif (!listener) {\n\t\t\t\t\t\tlistener = this.windowService.onDidChangeFocus(focus => {\n\t\t\t\t\t\t\tif (focus) {\n\t\t\t\t\t\t\t\thideAfterTimeout();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdisposables.push(listener);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise...\n\t\t\t\telse if (\n\t\t\t\t\titem.sticky ||\t\t\t\t\t\t\t\t// never hide sticky notifications\n\t\t\t\t\tnotificationList.hasFocus() ||\t\t\t\t// never hide notifications with focus\n\t\t\t\t\tisMouseOverToast\t\t\t\t\t\t\t// never hide notifications under mouse\n\t\t\t\t) {\n\t\t\t\t\thideAfterTimeout();\n\t\t\t\t} else {\n\t\t\t\t\tthis.removeToast(item);\n\t\t\t\t}\n\t\t\t}, NotificationsToasts.PURGE_TIMEOUT[item.severity]);\n\t\t};\n\n\t\thideAfterTimeout();\n\n\t\tdisposables.push(toDisposable(() => clearTimeout(purgeTimeoutHandle)));\n\t}\n\n\tprivate removeToast(item: INotificationViewItem): void {\n\t\tconst notificationToast = this.mapNotificationToToast.get(item);\n\t\tlet focusGroup = false;\n\t\tif (notificationToast) {\n\t\t\tconst toastHasDOMFocus = isAncestor(document.activeElement, notificationToast.container);\n\t\t\tif (toastHasDOMFocus) {\n\t\t\t\tfocusGroup = !(this.focusNext() || this.focusPrevious()); // focus next if any, otherwise focus editor\n\t\t\t}\n\n\t\t\t// Listeners\n\t\t\tdispose(notificationToast.disposeables);\n\n\t\t\t// Remove from Map\n\t\t\tthis.mapNotificationToToast.delete(item);\n\t\t}\n\n\t\t// Layout if we still have toasts\n\t\tif (this.mapNotificationToToast.size > 0) {\n\t\t\tthis.layout(this.workbenchDimensions);\n\t\t}\n\n\t\t// Otherwise hide if no more toasts to show\n\t\telse {\n\t\t\tthis.doHide();\n\n\t\t\t// Move focus back to editor group as needed\n\t\t\tif (focusGroup) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeToasts(): void {\n\t\tthis.mapNotificationToToast.forEach(toast => dispose(toast.disposeables));\n\t\tthis.mapNotificationToToast.clear();\n\n\t\tthis.doHide();\n\t}\n\n\tprivate doHide(): void {\n\t\tif (this.notificationsToastsContainer) {\n\t\t\tremoveClass(this.notificationsToastsContainer, 'visible');\n\t\t}\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(false);\n\t}\n\n\thide(): void {\n\t\tconst focusGroup = isAncestor(document.activeElement, this.notificationsToastsContainer);\n\n\t\tthis.removeToasts();\n\n\t\tif (focusGroup) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\tfocus(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[0].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusNext(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst nextToast = toasts[i + 1];\n\t\t\t\tif (nextToast) {\n\t\t\t\t\tnextToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusPrevious(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst previousToast = toasts[i - 1];\n\t\t\t\tif (previousToast) {\n\t\t\t\t\tpreviousToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusFirst(): boolean {\n\t\tconst toast = this.getToasts(ToastVisibility.VISIBLE)[0];\n\t\tif (toast) {\n\t\t\ttoast.list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusLast(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[toasts.length - 1].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tupdate(isCenterVisible: boolean): void {\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\n\t\t\t// Hide all toasts when the notificationcenter gets visible\n\t\t\tif (this.isNotificationsCenterVisible) {\n\t\t\t\tthis.removeToasts();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected updateStyles(): void {\n\t\tthis.mapNotificationToToast.forEach(t => {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tt.toast.style.boxShadow = widgetShadowColor ? `0 0px 8px ${widgetShadowColor}` : null;\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_TOAST_BORDER);\n\t\t\tt.toast.style.border = borderColor ? `1px solid ${borderColor}` : null;\n\t\t});\n\t}\n\n\tprivate getToasts(state: ToastVisibility): INotificationToast[] {\n\t\tconst notificationToasts: INotificationToast[] = [];\n\n\t\tthis.mapNotificationToToast.forEach(toast => {\n\t\t\tswitch (state) {\n\t\t\t\tcase ToastVisibility.HIDDEN_OR_VISIBLE:\n\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.HIDDEN:\n\t\t\t\t\tif (!this.isVisible(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.VISIBLE:\n\t\t\t\t\tif (this.isVisible(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\treturn notificationToasts.reverse(); // from newest to oldest\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\n\t\t// Hide toasts that exceed height\n\t\tif (maxDimensions.height) {\n\t\t\tthis.layoutContainer(maxDimensions.height);\n\t\t}\n\n\t\t// Layout all lists of toasts\n\t\tthis.layoutLists(maxDimensions.width);\n\t}\n\n\tprivate computeMaxDimensions(): Dimension {\n\t\tlet maxWidth = NotificationsToasts.MAX_WIDTH;\n\n\t\tlet availableWidth = maxWidth;\n\t\tlet availableHeight: number | undefined;\n\n\t\tif (this.workbenchDimensions) {\n\n\t\t\t// Make sure notifications are not exceding available width\n\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t// Make sure notifications are not exceeding available height\n\t\t\tavailableHeight = this.workbenchDimensions.height;\n\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART)) {\n\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t}\n\n\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t}\n\n\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t}\n\n\t\tavailableHeight = typeof availableHeight === 'number'\n\t\t\t? Math.round(availableHeight * 0.618) // try to not cover the full height for stacked toasts\n\t\t\t: 0;\n\n\t\treturn new Dimension(Math.min(maxWidth, availableWidth), availableHeight);\n\t}\n\n\tprivate layoutLists(width: number): void {\n\t\tthis.mapNotificationToToast.forEach(toast => toast.list.layout(width));\n\t}\n\n\tprivate layoutContainer(heightToGive: number): void {\n\t\tlet visibleToasts = 0;\n\t\tthis.getToasts(ToastVisibility.HIDDEN_OR_VISIBLE).forEach(toast => {\n\n\t\t\t// In order to measure the client height, the element cannot have display: none\n\t\t\ttoast.container.style.opacity = '0';\n\t\t\tthis.setVisibility(toast, true);\n\n\t\t\theightToGive -= toast.container.offsetHeight;\n\n\t\t\tlet makeVisible = false;\n\t\t\tif (visibleToasts === NotificationsToasts.MAX_NOTIFICATIONS) {\n\t\t\t\tmakeVisible = false; // never show more than MAX_NOTIFICATIONS\n\t\t\t} else if (heightToGive >= 0) {\n\t\t\t\tmakeVisible = true; // hide toast if available height is too little\n\t\t\t}\n\n\t\t\t// Hide or show toast based on context\n\t\t\tthis.setVisibility(toast, makeVisible);\n\t\t\ttoast.container.style.opacity = null;\n\n\t\t\tif (makeVisible) {\n\t\t\t\tvisibleToasts++;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate setVisibility(toast: INotificationToast, visible: boolean): void {\n\t\tif (this.isVisible(toast) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.notificationsToastsContainer.appendChild(toast.container);\n\t\t} else {\n\t\t\tthis.notificationsToastsContainer.removeChild(toast.container);\n\t\t}\n\t}\n\n\tprivate isVisible(toast: INotificationToast): boolean {\n\t\treturn !!toast.container.parentElement;\n\t}\n}\n"]}]}