{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDiagnostics.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDiagnostics.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadDiagnostics = /** @class */ (function () {\n    function MainThreadDiagnostics(extHostContext, markerService) {\n        this._activeOwners = new Set();\n        this._markerService = markerService;\n    }\n    MainThreadDiagnostics.prototype.dispose = function () {\n        var _this = this;\n        this._activeOwners.forEach(function (owner) { return _this._markerService.changeAll(owner, []); });\n    };\n    MainThreadDiagnostics.prototype.$changeMany = function (owner, entries) {\n        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n            var entry = entries_1[_i];\n            var uri = entry[0], markers = entry[1];\n            if (markers) {\n                for (var _a = 0, markers_2 = markers; _a < markers_2.length; _a++) {\n                    var marker = markers_2[_a];\n                    if (marker.relatedInformation) {\n                        for (var _b = 0, _c = marker.relatedInformation; _b < _c.length; _b++) {\n                            var relatedInformation = _c[_b];\n                            relatedInformation.resource = uri_1.URI.revive(relatedInformation.resource);\n                        }\n                    }\n                }\n            }\n            this._markerService.changeOne(owner, uri_1.URI.revive(uri), markers);\n        }\n        this._activeOwners.add(owner);\n    };\n    MainThreadDiagnostics.prototype.$clear = function (owner) {\n        this._markerService.changeAll(owner, []);\n        this._activeOwners.delete(owner);\n    };\n    MainThreadDiagnostics = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadDiagnostics),\n        tslib_1.__param(1, markers_1.IMarkerService)\n    ], MainThreadDiagnostics);\n    return MainThreadDiagnostics;\n}());\nexports.MainThreadDiagnostics = MainThreadDiagnostics;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDiagnostics.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDiagnostics.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8DAAiF;AACjF,0CAAwD;AACxD,+DAAsG;AACtG,6EAAgF;AAGhF;IAKC,+BACC,cAA+B,EACf,aAA6B;QAL7B,kBAAa,GAAG,IAAI,GAAG,EAAU,CAAC;QAOlD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,uCAAO,GAAP;QAAA,iBAEC;QADA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,EAAxC,CAAwC,CAAC,CAAC;IAC/E,CAAC;IAED,2CAAW,GAAX,UAAY,KAAa,EAAE,OAAyC;QACnE,KAAkB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;YAAtB,IAAI,KAAK,gBAAA;YACR,IAAA,cAAG,EAAE,kBAAO,CAAU;YAC3B,IAAI,OAAO,EAAE;gBACZ,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;oBAAzB,IAAM,MAAM,gBAAA;oBAChB,IAAI,MAAM,CAAC,kBAAkB,EAAE;wBAC9B,KAAiC,UAAyB,EAAzB,KAAA,MAAM,CAAC,kBAAkB,EAAzB,cAAyB,EAAzB,IAAyB,EAAE;4BAAvD,IAAM,kBAAkB,SAAA;4BAC5B,kBAAkB,CAAC,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;yBACtE;qBACD;iBACD;aACD;YACD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,sCAAM,GAAN,UAAO,KAAa;QACnB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IApCW,qBAAqB;QADjC,uCAAoB,CAAC,8BAAW,CAAC,qBAAqB,CAAC;QAQrD,mBAAA,wBAAc,CAAA;OAPJ,qBAAqB,CAqCjC;IAAD,4BAAC;CAAA,AArCD,IAqCC;AArCY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkerService, IMarkerData } from 'vs/platform/markers/common/markers';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { MainThreadDiagnosticsShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadDiagnostics)\nexport class MainThreadDiagnostics implements MainThreadDiagnosticsShape {\n\n\tprivate readonly _activeOwners = new Set<string>();\n\tprivate readonly _markerService: IMarkerService;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IMarkerService markerService: IMarkerService\n\t) {\n\t\tthis._markerService = markerService;\n\t}\n\n\tdispose(): void {\n\t\tthis._activeOwners.forEach(owner => this._markerService.changeAll(owner, []));\n\t}\n\n\t$changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\tfor (let entry of entries) {\n\t\t\tlet [uri, markers] = entry;\n\t\t\tif (markers) {\n\t\t\t\tfor (const marker of markers) {\n\t\t\t\t\tif (marker.relatedInformation) {\n\t\t\t\t\t\tfor (const relatedInformation of marker.relatedInformation) {\n\t\t\t\t\t\t\trelatedInformation.resource = URI.revive(relatedInformation.resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._markerService.changeOne(owner, URI.revive(uri), markers);\n\t\t}\n\t\tthis._activeOwners.add(owner);\n\t}\n\n\t$clear(owner: string): void {\n\t\tthis._markerService.changeAll(owner, []);\n\t\tthis._activeOwners.delete(owner);\n\t}\n}\n"]}]}