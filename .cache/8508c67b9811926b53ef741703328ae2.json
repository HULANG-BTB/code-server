{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/widget/embeddedCodeEditorWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/widget/embeddedCodeEditorWidget.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar objects = require(\"vs/base/common/objects\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar diffEditorWidget_1 = require(\"vs/editor/browser/widget/diffEditorWidget\");\nvar editorWorkerService_1 = require(\"vs/editor/common/services/editorWorkerService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar EmbeddedCodeEditorWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedCodeEditorWidget, _super);\n    function EmbeddedCodeEditorWidget(domElement, options, parentEditor, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) {\n        var _this = _super.call(this, domElement, parentEditor.getRawConfiguration(), {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) || this;\n        _this._parentEditor = parentEditor;\n        _this._overwriteOptions = options;\n        // Overwrite parent's options\n        _super.prototype.updateOptions.call(_this, _this._overwriteOptions);\n        _this._register(parentEditor.onDidChangeConfiguration(function (e) { return _this._onParentConfigurationChanged(e); }));\n        return _this;\n    }\n    EmbeddedCodeEditorWidget.prototype.getParentEditor = function () {\n        return this._parentEditor;\n    };\n    EmbeddedCodeEditorWidget.prototype._onParentConfigurationChanged = function (e) {\n        _super.prototype.updateOptions.call(this, this._parentEditor.getRawConfiguration());\n        _super.prototype.updateOptions.call(this, this._overwriteOptions);\n    };\n    EmbeddedCodeEditorWidget.prototype.updateOptions = function (newOptions) {\n        objects.mixin(this._overwriteOptions, newOptions, true);\n        _super.prototype.updateOptions.call(this, this._overwriteOptions);\n    };\n    EmbeddedCodeEditorWidget = tslib_1.__decorate([\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(5, commands_1.ICommandService),\n        tslib_1.__param(6, contextkey_1.IContextKeyService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, notification_1.INotificationService),\n        tslib_1.__param(9, accessibility_1.IAccessibilityService)\n    ], EmbeddedCodeEditorWidget);\n    return EmbeddedCodeEditorWidget;\n}(codeEditorWidget_1.CodeEditorWidget));\nexports.EmbeddedCodeEditorWidget = EmbeddedCodeEditorWidget;\nvar EmbeddedDiffEditorWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedDiffEditorWidget, _super);\n    function EmbeddedDiffEditorWidget(domElement, options, parentEditor, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService) {\n        var _this = _super.call(this, domElement, parentEditor.getRawConfiguration(), editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService) || this;\n        _this._parentEditor = parentEditor;\n        _this._overwriteOptions = options;\n        // Overwrite parent's options\n        _super.prototype.updateOptions.call(_this, _this._overwriteOptions);\n        _this._register(parentEditor.onDidChangeConfiguration(function (e) { return _this._onParentConfigurationChanged(e); }));\n        return _this;\n    }\n    EmbeddedDiffEditorWidget.prototype.getParentEditor = function () {\n        return this._parentEditor;\n    };\n    EmbeddedDiffEditorWidget.prototype._onParentConfigurationChanged = function (e) {\n        _super.prototype.updateOptions.call(this, this._parentEditor.getRawConfiguration());\n        _super.prototype.updateOptions.call(this, this._overwriteOptions);\n    };\n    EmbeddedDiffEditorWidget.prototype.updateOptions = function (newOptions) {\n        objects.mixin(this._overwriteOptions, newOptions, true);\n        _super.prototype.updateOptions.call(this, this._overwriteOptions);\n    };\n    EmbeddedDiffEditorWidget = tslib_1.__decorate([\n        tslib_1.__param(3, editorWorkerService_1.IEditorWorkerService),\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, notification_1.INotificationService)\n    ], EmbeddedDiffEditorWidget);\n    return EmbeddedDiffEditorWidget;\n}(diffEditorWidget_1.DiffEditorWidget));\nexports.EmbeddedDiffEditorWidget = EmbeddedDiffEditorWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/widget/embeddedCodeEditorWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/widget/embeddedCodeEditorWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from 'vs/base/common/objects';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditorWidget';\nimport { IConfigurationChangedEvent, IDiffEditorOptions, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\n\nexport class EmbeddedCodeEditorWidget extends CodeEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: IEditorOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper(domElement, parentEditor.getRawConfiguration(), {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration((e: IConfigurationChangedEvent) => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: IConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawConfiguration());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\tupdateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n\nexport class EmbeddedDiffEditorWidget extends DiffEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IDiffEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: IDiffEditorOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService notificationService: INotificationService\n\t) {\n\t\tsuper(domElement, parentEditor.getRawConfiguration(), editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: IConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawConfiguration());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\tupdateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n"]}]}