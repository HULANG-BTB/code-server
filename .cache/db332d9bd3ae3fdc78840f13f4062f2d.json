{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debug.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debug.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/contextkey/common/contextkey\", \"vs/workbench/common/views\", \"vs/platform/registry/common/platform\"], function (require, exports, nls, instantiation_1, contextkey_1, views_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.VIEWLET_ID = 'workbench.view.debug';\n    exports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\n    exports.VARIABLES_VIEW_ID = 'workbench.debug.variablesView';\n    exports.WATCH_VIEW_ID = 'workbench.debug.watchExpressionsView';\n    exports.CALLSTACK_VIEW_ID = 'workbench.debug.callStackView';\n    exports.LOADED_SCRIPTS_VIEW_ID = 'workbench.debug.loadedScriptsView';\n    exports.BREAKPOINTS_VIEW_ID = 'workbench.debug.breakPointsView';\n    exports.REPL_ID = 'workbench.panel.repl';\n    exports.DEBUG_SERVICE_ID = 'debugService';\n    exports.CONTEXT_DEBUG_TYPE = new contextkey_1.RawContextKey('debugType', undefined);\n    exports.CONTEXT_DEBUG_CONFIGURATION_TYPE = new contextkey_1.RawContextKey('debugConfigurationType', undefined);\n    exports.CONTEXT_DEBUG_STATE = new contextkey_1.RawContextKey('debugState', 'inactive');\n    exports.CONTEXT_IN_DEBUG_MODE = new contextkey_1.RawContextKey('inDebugMode', false);\n    exports.CONTEXT_IN_DEBUG_REPL = new contextkey_1.RawContextKey('inDebugRepl', false);\n    exports.CONTEXT_BREAKPOINT_WIDGET_VISIBLE = new contextkey_1.RawContextKey('breakpointWidgetVisible', false);\n    exports.CONTEXT_IN_BREAKPOINT_WIDGET = new contextkey_1.RawContextKey('inBreakpointWidget', false);\n    exports.CONTEXT_BREAKPOINTS_FOCUSED = new contextkey_1.RawContextKey('breakpointsFocused', true);\n    exports.CONTEXT_WATCH_EXPRESSIONS_FOCUSED = new contextkey_1.RawContextKey('watchExpressionsFocused', true);\n    exports.CONTEXT_VARIABLES_FOCUSED = new contextkey_1.RawContextKey('variablesFocused', true);\n    exports.CONTEXT_EXPRESSION_SELECTED = new contextkey_1.RawContextKey('expressionSelected', false);\n    exports.CONTEXT_BREAKPOINT_SELECTED = new contextkey_1.RawContextKey('breakpointSelected', false);\n    exports.CONTEXT_CALLSTACK_ITEM_TYPE = new contextkey_1.RawContextKey('callStackItemType', undefined);\n    exports.CONTEXT_LOADED_SCRIPTS_SUPPORTED = new contextkey_1.RawContextKey('loadedScriptsSupported', false);\n    exports.CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = new contextkey_1.RawContextKey('loadedScriptsItemType', undefined);\n    exports.CONTEXT_FOCUSED_SESSION_IS_ATTACH = new contextkey_1.RawContextKey('focusedSessionIsAttach', false);\n    exports.CONTEXT_STEP_BACK_SUPPORTED = new contextkey_1.RawContextKey('stepBackSupported', false);\n    exports.CONTEXT_RESTART_FRAME_SUPPORTED = new contextkey_1.RawContextKey('restartFrameSupported', false);\n    exports.EDITOR_CONTRIBUTION_ID = 'editor.contrib.debug';\n    exports.DEBUG_SCHEME = 'debug';\n    exports.INTERNAL_CONSOLE_OPTIONS_SCHEMA = {\n        enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],\n        default: 'openOnFirstSessionStart',\n        description: nls.localize('internalConsoleOptions', \"Controls when the internal debug console should open.\")\n    };\n    var State;\n    (function (State) {\n        State[State[\"Inactive\"] = 0] = \"Inactive\";\n        State[State[\"Initializing\"] = 1] = \"Initializing\";\n        State[State[\"Stopped\"] = 2] = \"Stopped\";\n        State[State[\"Running\"] = 3] = \"Running\";\n    })(State = exports.State || (exports.State = {}));\n    function getStateLabel(state) {\n        switch (state) {\n            case State.Initializing: return 'initializing';\n            case State.Stopped: return 'stopped';\n            case State.Running: return 'running';\n            default: return 'inactive';\n        }\n    }\n    exports.getStateLabel = getStateLabel;\n    class AdapterEndEvent {\n    }\n    exports.AdapterEndEvent = AdapterEndEvent;\n    // Debug service interfaces\n    exports.IDebugService = instantiation_1.createDecorator(exports.DEBUG_SERVICE_ID);\n    // Editor interfaces\n    var BreakpointWidgetContext;\n    (function (BreakpointWidgetContext) {\n        BreakpointWidgetContext[BreakpointWidgetContext[\"CONDITION\"] = 0] = \"CONDITION\";\n        BreakpointWidgetContext[BreakpointWidgetContext[\"HIT_COUNT\"] = 1] = \"HIT_COUNT\";\n        BreakpointWidgetContext[BreakpointWidgetContext[\"LOG_MESSAGE\"] = 2] = \"LOG_MESSAGE\";\n    })(BreakpointWidgetContext = exports.BreakpointWidgetContext || (exports.BreakpointWidgetContext = {}));\n});\n",null]}