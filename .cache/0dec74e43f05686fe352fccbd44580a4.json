{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadStorage = /** @class */ (function () {\n    function MainThreadStorage(extHostContext, storageService) {\n        var _this = this;\n        this._sharedStorageKeysToWatch = new Map();\n        this._storageService = storageService;\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostStorage);\n        this._storageListener = this._storageService.onDidChangeStorage(function (e) {\n            var shared = e.scope === storage_1.StorageScope.GLOBAL;\n            if (shared && _this._sharedStorageKeysToWatch.has(e.key)) {\n                try {\n                    _this._proxy.$acceptValue(shared, e.key, _this._getValue(shared, e.key));\n                }\n                catch (error) {\n                    // ignore parsing errors that can happen\n                }\n            }\n        });\n    }\n    MainThreadStorage.prototype.dispose = function () {\n        this._storageListener.dispose();\n    };\n    MainThreadStorage.prototype.$getValue = function (shared, key) {\n        if (shared) {\n            this._sharedStorageKeysToWatch.set(key, true);\n        }\n        try {\n            return Promise.resolve(this._getValue(shared, key));\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    };\n    MainThreadStorage.prototype._getValue = function (shared, key) {\n        var jsonValue = this._storageService.get(key, shared ? storage_1.StorageScope.GLOBAL : storage_1.StorageScope.WORKSPACE);\n        if (!jsonValue) {\n            return undefined;\n        }\n        return JSON.parse(jsonValue);\n    };\n    MainThreadStorage.prototype.$setValue = function (shared, key, value) {\n        var jsonValue;\n        try {\n            jsonValue = JSON.stringify(value);\n            this._storageService.store(key, jsonValue, shared ? storage_1.StorageScope.GLOBAL : storage_1.StorageScope.WORKSPACE);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n        return Promise.resolve(undefined);\n    };\n    MainThreadStorage = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadStorage),\n        tslib_1.__param(1, storage_1.IStorageService)\n    ], MainThreadStorage);\n    return MainThreadStorage;\n}());\nexports.MainThreadStorage = MainThreadStorage;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8DAAmF;AACnF,+DAAuI;AACvI,6EAAgF;AAIhF;IAOC,2BACC,cAA+B,EACd,cAA+B;QAFjD,iBAiBC;QAnBgB,8BAAyB,GAAyB,IAAI,GAAG,EAAmB,CAAC;QAM7F,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,cAAc,CAAC,CAAC;QAErE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,UAAA,CAAC;YAChE,IAAM,MAAM,GAAG,CAAC,CAAC,KAAK,KAAK,sBAAY,CAAC,MAAM,CAAC;YAC/C,IAAI,MAAM,IAAI,KAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBACxD,IAAI;oBACH,KAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,KAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBACvE;gBAAC,OAAO,KAAK,EAAE;oBACf,wCAAwC;iBACxC;aACD;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,mCAAO,GAAP;QACC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAED,qCAAS,GAAT,UAAa,MAAe,EAAE,GAAW;QACxC,IAAI,MAAM,EAAE;YACX,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9C;QACD,IAAI;YACH,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;SACvD;QAAC,OAAO,KAAK,EAAE;YACf,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7B;IACF,CAAC;IAEO,qCAAS,GAAjB,UAAqB,MAAe,EAAE,GAAW;QAChD,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,sBAAY,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAY,CAAC,SAAS,CAAC,CAAC;QACvG,IAAI,CAAC,SAAS,EAAE;YACf,OAAO,SAAS,CAAC;SACjB;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC;IAED,qCAAS,GAAT,UAAU,MAAe,EAAE,GAAW,EAAE,KAAa;QACpD,IAAI,SAAiB,CAAC;QACtB,IAAI;YACH,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,sBAAY,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAY,CAAC,SAAS,CAAC,CAAC;SAClG;QAAC,OAAO,GAAG,EAAE;YACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IA1DW,iBAAiB;QAD7B,uCAAoB,CAAC,8BAAW,CAAC,iBAAiB,CAAC;QAUjD,mBAAA,yBAAe,CAAA;OATL,iBAAiB,CA2D7B;IAAD,wBAAC;CAAA,AA3DD,IA2DC;AA3DY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { MainThreadStorageShape, MainContext, IExtHostContext, ExtHostStorageShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\n@extHostNamedCustomer(MainContext.MainThreadStorage)\nexport class MainThreadStorage implements MainThreadStorageShape {\n\n\tprivate readonly _storageService: IStorageService;\n\tprivate readonly _proxy: ExtHostStorageShape;\n\tprivate readonly _storageListener: IDisposable;\n\tprivate readonly _sharedStorageKeysToWatch: Map<string, boolean> = new Map<string, boolean>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tthis._storageService = storageService;\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostStorage);\n\n\t\tthis._storageListener = this._storageService.onDidChangeStorage(e => {\n\t\t\tconst shared = e.scope === StorageScope.GLOBAL;\n\t\t\tif (shared && this._sharedStorageKeysToWatch.has(e.key)) {\n\t\t\t\ttry {\n\t\t\t\t\tthis._proxy.$acceptValue(shared, e.key, this._getValue(shared, e.key));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore parsing errors that can happen\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n\n\t$getValue<T>(shared: boolean, key: string): Promise<T | undefined> {\n\t\tif (shared) {\n\t\t\tthis._sharedStorageKeysToWatch.set(key, true);\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(this._getValue<T>(shared, key));\n\t\t} catch (error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\tprivate _getValue<T>(shared: boolean, key: string): T | undefined {\n\t\tconst jsonValue = this._storageService.get(key, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE);\n\t\tif (!jsonValue) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn JSON.parse(jsonValue);\n\t}\n\n\t$setValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\tlet jsonValue: string;\n\t\ttry {\n\t\t\tjsonValue = JSON.stringify(value);\n\t\t\tthis._storageService.store(key, jsonValue, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}