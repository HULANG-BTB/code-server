{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"crypto\", \"fs\", \"vs/base/common/severity\", \"vs/base/common/uri\", \"vs/workbench/services/integrity/common/integrity\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/product/node/product\", \"vs/platform/notification/common/notification\", \"vs/platform/storage/common/storage\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, nls, crypto, fs, severity_1, uri_1, integrity_1, lifecycle_1, product_1, notification_1, storage_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class IntegrityStorage {\n        constructor(storageService) {\n            this.storageService = storageService;\n            this.value = this._read();\n        }\n        _read() {\n            let jsonValue = this.storageService.get(IntegrityStorage.KEY, storage_1.StorageScope.GLOBAL);\n            if (!jsonValue) {\n                return null;\n            }\n            try {\n                return JSON.parse(jsonValue);\n            }\n            catch (err) {\n                return null;\n            }\n        }\n        get() {\n            return this.value;\n        }\n        set(data) {\n            this.value = data;\n            this.storageService.store(IntegrityStorage.KEY, JSON.stringify(this.value), storage_1.StorageScope.GLOBAL);\n        }\n    }\n    IntegrityStorage.KEY = 'integrityService';\n    let IntegrityServiceImpl = class IntegrityServiceImpl {\n        constructor(notificationService, storageService, lifecycleService) {\n            this.notificationService = notificationService;\n            this.lifecycleService = lifecycleService;\n            this._storage = new IntegrityStorage(storageService);\n            this._isPurePromise = this._isPure();\n            this.isPure().then(r => {\n                if (r.isPure) {\n                    // all is good\n                    return;\n                }\n                this._prompt();\n            });\n        }\n        _prompt() {\n            const storedData = this._storage.get();\n            if (storedData && storedData.dontShowPrompt && storedData.commit === product_1.default.commit) {\n                return; // Do not prompt\n            }\n            this.notificationService.prompt(severity_1.default.Warning, nls.localize('integrity.prompt', \"Your {0} installation appears to be corrupt. Please reinstall.\", product_1.default.nameShort), [\n                {\n                    label: nls.localize('integrity.moreInformation', \"More Information\"),\n                    run: () => window.open(uri_1.URI.parse(product_1.default.checksumFailMoreInfoUrl).toString(true))\n                },\n                {\n                    label: nls.localize('integrity.dontShowAgain', \"Don't Show Again\"),\n                    isSecondary: true,\n                    run: () => this._storage.set({ dontShowPrompt: true, commit: product_1.default.commit })\n                }\n            ], { sticky: true });\n        }\n        isPure() {\n            return this._isPurePromise;\n        }\n        _isPure() {\n            const expectedChecksums = product_1.default.checksums || {};\n            return this.lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually).then(() => {\n                let asyncResults = Object.keys(expectedChecksums).map((filename) => {\n                    return this._resolve(filename, expectedChecksums[filename]);\n                });\n                return Promise.all(asyncResults).then((allResults) => {\n                    let isPure = true;\n                    for (let i = 0, len = allResults.length; i < len; i++) {\n                        if (!allResults[i].isPure) {\n                            isPure = false;\n                            break;\n                        }\n                    }\n                    return {\n                        isPure: isPure,\n                        proof: allResults\n                    };\n                });\n            });\n        }\n        _resolve(filename, expected) {\n            let fileUri = uri_1.URI.parse(require.toUrl(filename));\n            return new Promise((resolve, reject) => {\n                fs.readFile(fileUri.fsPath, (err, buff) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    resolve(IntegrityServiceImpl._createChecksumPair(fileUri, this._computeChecksum(buff), expected));\n                });\n            });\n        }\n        _computeChecksum(buff) {\n            let hash = crypto\n                .createHash('md5')\n                .update(buff)\n                .digest('base64')\n                .replace(/=+$/, '');\n            return hash;\n        }\n        static _createChecksumPair(uri, actual, expected) {\n            return {\n                uri: uri,\n                actual: actual,\n                expected: expected,\n                isPure: (actual === expected)\n            };\n        }\n    };\n    IntegrityServiceImpl = __decorate([\n        __param(0, notification_1.INotificationService),\n        __param(1, storage_1.IStorageService),\n        __param(2, lifecycle_1.ILifecycleService)\n    ], IntegrityServiceImpl);\n    exports.IntegrityServiceImpl = IntegrityServiceImpl;\n    extensions_1.registerSingleton(integrity_1.IIntegrityService, IntegrityServiceImpl, true);\n});\n",null]}