{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.linux.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.linux.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/platform/product/node/product\", \"vs/platform/configuration/common/configuration\", \"vs/platform/lifecycle/electron-main/lifecycleMain\", \"vs/platform/request/node/request\", \"vs/platform/update/common/update\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/environment/common/environment\", \"vs/platform/log/common/log\", \"vs/platform/update/electron-main/abstractUpdateService\", \"vs/base/node/request\", \"electron\", \"vs/base/common/cancellation\"], function (require, exports, product_1, configuration_1, lifecycleMain_1, request_1, update_1, telemetry_1, environment_1, log_1, abstractUpdateService_1, request_2, electron_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let LinuxUpdateService = class LinuxUpdateService extends abstractUpdateService_1.AbstractUpdateService {\n        constructor(lifecycleService, configurationService, telemetryService, environmentService, requestService, logService) {\n            super(lifecycleService, configurationService, environmentService, requestService, logService);\n            this.telemetryService = telemetryService;\n        }\n        buildUpdateFeedUrl(quality) {\n            return abstractUpdateService_1.createUpdateURL(`linux-${process.arch}`, quality);\n        }\n        doCheckForUpdates(context) {\n            if (!this.url) {\n                return;\n            }\n            this.setState(update_1.State.CheckingForUpdates(context));\n            this.requestService.request({ url: this.url }, cancellation_1.CancellationToken.None)\n                .then(request_2.asJson)\n                .then(update => {\n                if (!update || !update.url || !update.version || !update.productVersion) {\n                    /* __GDPR__\n                            \"update:notAvailable\" : {\n                                \"explicit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                            }\n                        */\n                    this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });\n                    this.setState(update_1.State.Idle(update_1.UpdateType.Archive));\n                }\n                else {\n                    this.setState(update_1.State.AvailableForDownload(update));\n                }\n            })\n                .then(undefined, err => {\n                this.logService.error(err);\n                /* __GDPR__\n                    \"update:notAvailable\" : {\n                        \"explicit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                    }\n                    */\n                this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });\n                // only show message when explicitly checking for updates\n                const message = !!context ? (err.message || err) : undefined;\n                this.setState(update_1.State.Idle(update_1.UpdateType.Archive, message));\n            });\n        }\n        doDownloadUpdate(state) {\n            return __awaiter(this, void 0, void 0, function* () {\n                // Use the download URL if available as we don't currently detect the package type that was\n                // installed and the website download page is more useful than the tarball generally.\n                if (product_1.default.downloadUrl && product_1.default.downloadUrl.length > 0) {\n                    electron_1.shell.openExternal(product_1.default.downloadUrl);\n                }\n                else if (state.update.url) {\n                    electron_1.shell.openExternal(state.update.url);\n                }\n                this.setState(update_1.State.Idle(update_1.UpdateType.Archive));\n            });\n        }\n    };\n    LinuxUpdateService = __decorate([\n        __param(0, lifecycleMain_1.ILifecycleService),\n        __param(1, configuration_1.IConfigurationService),\n        __param(2, telemetry_1.ITelemetryService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, request_1.IRequestService),\n        __param(5, log_1.ILogService)\n    ], LinuxUpdateService);\n    exports.LinuxUpdateService = LinuxUpdateService;\n});\n",null]}