{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar MainThreadFileSystem = /** @class */ (function () {\n    function MainThreadFileSystem(extHostContext, _fileService, _labelService) {\n        this._fileService = _fileService;\n        this._labelService = _labelService;\n        this._fileProvider = new Map();\n        this._resourceLabelFormatters = new Map();\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostFileSystem);\n    }\n    MainThreadFileSystem.prototype.dispose = function () {\n        this._fileProvider.forEach(function (value) { return value.dispose(); });\n        this._fileProvider.clear();\n    };\n    MainThreadFileSystem.prototype.$registerFileSystemProvider = function (handle, scheme, capabilities) {\n        this._fileProvider.set(handle, new RemoteFileSystemProvider(this._fileService, scheme, capabilities, handle, this._proxy));\n    };\n    MainThreadFileSystem.prototype.$unregisterProvider = function (handle) {\n        lifecycle_1.dispose(this._fileProvider.get(handle));\n        this._fileProvider.delete(handle);\n    };\n    MainThreadFileSystem.prototype.$registerResourceLabelFormatter = function (handle, formatter) {\n        // Dynamicily registered formatters should have priority over those contributed via package.json\n        formatter.priority = true;\n        var disposable = this._labelService.registerFormatter(formatter);\n        this._resourceLabelFormatters.set(handle, disposable);\n    };\n    MainThreadFileSystem.prototype.$unregisterResourceLabelFormatter = function (handle) {\n        lifecycle_1.dispose(this._resourceLabelFormatters.get(handle));\n        this._resourceLabelFormatters.delete(handle);\n    };\n    MainThreadFileSystem.prototype.$onFileSystemChange = function (handle, changes) {\n        var fileProvider = this._fileProvider.get(handle);\n        if (!fileProvider) {\n            throw new Error('Unknown file provider');\n        }\n        fileProvider.$onFileSystemChange(changes);\n    };\n    MainThreadFileSystem = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadFileSystem),\n        tslib_1.__param(1, files_1.IFileService),\n        tslib_1.__param(2, label_1.ILabelService)\n    ], MainThreadFileSystem);\n    return MainThreadFileSystem;\n}());\nexports.MainThreadFileSystem = MainThreadFileSystem;\nvar RemoteFileSystemProvider = /** @class */ (function () {\n    function RemoteFileSystemProvider(fileService, scheme, capabilities, _handle, _proxy) {\n        this._handle = _handle;\n        this._proxy = _proxy;\n        this._onDidChange = new event_1.Emitter();\n        this.onDidChangeFile = this._onDidChange.event;\n        this.onDidChangeCapabilities = event_1.Event.None;\n        this.capabilities = capabilities;\n        this._registration = fileService.registerProvider(scheme, this);\n    }\n    RemoteFileSystemProvider.prototype.dispose = function () {\n        this._registration.dispose();\n        this._onDidChange.dispose();\n    };\n    RemoteFileSystemProvider.prototype.watch = function (resource, opts) {\n        var _this = this;\n        var session = Math.random();\n        this._proxy.$watch(this._handle, session, resource, opts);\n        return lifecycle_1.toDisposable(function () {\n            _this._proxy.$unwatch(_this._handle, session);\n        });\n    };\n    RemoteFileSystemProvider.prototype.$onFileSystemChange = function (changes) {\n        this._onDidChange.fire(changes.map(RemoteFileSystemProvider._createFileChange));\n    };\n    RemoteFileSystemProvider._createFileChange = function (dto) {\n        return { resource: uri_1.URI.revive(dto.resource), type: dto.type };\n    };\n    // --- forwarding calls\n    RemoteFileSystemProvider._asBuffer = function (data) {\n        return Buffer.isBuffer(data) ? data : Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    };\n    RemoteFileSystemProvider.prototype.stat = function (resource) {\n        return this._proxy.$stat(this._handle, resource).then(undefined, function (err) {\n            throw err;\n        });\n    };\n    RemoteFileSystemProvider.prototype.readFile = function (resource) {\n        return this._proxy.$readFile(this._handle, resource);\n    };\n    RemoteFileSystemProvider.prototype.writeFile = function (resource, content, opts) {\n        return this._proxy.$writeFile(this._handle, resource, RemoteFileSystemProvider._asBuffer(content), opts);\n    };\n    RemoteFileSystemProvider.prototype.delete = function (resource, opts) {\n        return this._proxy.$delete(this._handle, resource, opts);\n    };\n    RemoteFileSystemProvider.prototype.mkdir = function (resource) {\n        return this._proxy.$mkdir(this._handle, resource);\n    };\n    RemoteFileSystemProvider.prototype.readdir = function (resource) {\n        return this._proxy.$readdir(this._handle, resource);\n    };\n    RemoteFileSystemProvider.prototype.rename = function (resource, target, opts) {\n        return this._proxy.$rename(this._handle, resource, target, opts);\n    };\n    RemoteFileSystemProvider.prototype.copy = function (resource, target, opts) {\n        return this._proxy.$copy(this._handle, resource, target, opts);\n    };\n    RemoteFileSystemProvider.prototype.open = function (resource, opts) {\n        return this._proxy.$open(this._handle, resource, opts);\n    };\n    RemoteFileSystemProvider.prototype.close = function (fd) {\n        return this._proxy.$close(this._handle, fd);\n    };\n    RemoteFileSystemProvider.prototype.read = function (fd, pos, data, offset, length) {\n        return this._proxy.$read(this._handle, fd, pos, length).then(function (readData) {\n            data.set(readData, offset);\n            return readData.byteLength;\n        });\n    };\n    RemoteFileSystemProvider.prototype.write = function (fd, pos, data, offset, length) {\n        return this._proxy.$write(this._handle, fd, pos, Buffer.from(data, offset, length));\n    };\n    return RemoteFileSystemProvider;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { FileWriteOptions, FileSystemProviderCapabilities, IFileChange, IFileService, IFileSystemProvider, IStat, IWatchOptions, FileType, FileOverwriteOptions, FileDeleteOptions, FileOpenOptions } from 'vs/platform/files/common/files';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, ExtHostFileSystemShape, IExtHostContext, IFileChangeDto, MainContext, MainThreadFileSystemShape } from '../common/extHost.protocol';\nimport { ResourceLabelFormatter, ILabelService } from 'vs/platform/label/common/label';\n\n@extHostNamedCustomer(MainContext.MainThreadFileSystem)\nexport class MainThreadFileSystem implements MainThreadFileSystemShape {\n\n\tprivate readonly _proxy: ExtHostFileSystemShape;\n\tprivate readonly _fileProvider = new Map<number, RemoteFileSystemProvider>();\n\tprivate readonly _resourceLabelFormatters = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILabelService private readonly _labelService: ILabelService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostFileSystem);\n\t}\n\n\tdispose(): void {\n\t\tthis._fileProvider.forEach(value => value.dispose());\n\t\tthis._fileProvider.clear();\n\t}\n\n\t$registerFileSystemProvider(handle: number, scheme: string, capabilities: FileSystemProviderCapabilities): void {\n\t\tthis._fileProvider.set(handle, new RemoteFileSystemProvider(this._fileService, scheme, capabilities, handle, this._proxy));\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tdispose(this._fileProvider.get(handle));\n\t\tthis._fileProvider.delete(handle);\n\t}\n\n\t$registerResourceLabelFormatter(handle: number, formatter: ResourceLabelFormatter): void {\n\t\t// Dynamicily registered formatters should have priority over those contributed via package.json\n\t\tformatter.priority = true;\n\t\tconst disposable = this._labelService.registerFormatter(formatter);\n\t\tthis._resourceLabelFormatters.set(handle, disposable);\n\t}\n\n\t$unregisterResourceLabelFormatter(handle: number): void {\n\t\tdispose(this._resourceLabelFormatters.get(handle));\n\t\tthis._resourceLabelFormatters.delete(handle);\n\t}\n\n\t$onFileSystemChange(handle: number, changes: IFileChangeDto[]): void {\n\t\tconst fileProvider = this._fileProvider.get(handle);\n\t\tif (!fileProvider) {\n\t\t\tthrow new Error('Unknown file provider');\n\t\t}\n\t\tfileProvider.$onFileSystemChange(changes);\n\t}\n}\n\nclass RemoteFileSystemProvider implements IFileSystemProvider {\n\n\tprivate readonly _onDidChange = new Emitter<IFileChange[]>();\n\tprivate readonly _registration: IDisposable;\n\n\treadonly onDidChangeFile: Event<IFileChange[]> = this._onDidChange.event;\n\n\treadonly capabilities: FileSystemProviderCapabilities;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tconstructor(\n\t\tfileService: IFileService,\n\t\tscheme: string,\n\t\tcapabilities: FileSystemProviderCapabilities,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostFileSystemShape\n\t) {\n\t\tthis.capabilities = capabilities;\n\t\tthis._registration = fileService.registerProvider(scheme, this);\n\t}\n\n\tdispose(): void {\n\t\tthis._registration.dispose();\n\t\tthis._onDidChange.dispose();\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions) {\n\t\tconst session = Math.random();\n\t\tthis._proxy.$watch(this._handle, session, resource, opts);\n\t\treturn toDisposable(() => {\n\t\t\tthis._proxy.$unwatch(this._handle, session);\n\t\t});\n\t}\n\n\t$onFileSystemChange(changes: IFileChangeDto[]): void {\n\t\tthis._onDidChange.fire(changes.map(RemoteFileSystemProvider._createFileChange));\n\t}\n\n\tprivate static _createFileChange(dto: IFileChangeDto): IFileChange {\n\t\treturn { resource: URI.revive(dto.resource), type: dto.type };\n\t}\n\n\t// --- forwarding calls\n\n\tprivate static _asBuffer(data: Uint8Array): Buffer {\n\t\treturn Buffer.isBuffer(data) ? data : Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n\t}\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this._proxy.$stat(this._handle, resource).then(undefined, err => {\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\treadFile(resource: URI): Promise<Uint8Array> {\n\t\treturn this._proxy.$readFile(this._handle, resource);\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n\t\treturn this._proxy.$writeFile(this._handle, resource, RemoteFileSystemProvider._asBuffer(content), opts);\n\t}\n\n\tdelete(resource: URI, opts: FileDeleteOptions): Promise<void> {\n\t\treturn this._proxy.$delete(this._handle, resource, opts);\n\t}\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this._proxy.$mkdir(this._handle, resource);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this._proxy.$readdir(this._handle, resource);\n\t}\n\n\trename(resource: URI, target: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\treturn this._proxy.$rename(this._handle, resource, target, opts);\n\t}\n\n\tcopy(resource: URI, target: URI, opts: FileOverwriteOptions): Promise<void> {\n\t\treturn this._proxy.$copy(this._handle, resource, target, opts);\n\t}\n\n\topen(resource: URI, opts: FileOpenOptions): Promise<number> {\n\t\treturn this._proxy.$open(this._handle, resource, opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this._proxy.$close(this._handle, fd);\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this._proxy.$read(this._handle, fd, pos, length).then(readData => {\n\t\t\tdata.set(readData, offset);\n\t\t\treturn readData.byteLength;\n\t\t});\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this._proxy.$write(this._handle, fd, pos, Buffer.from(data, offset, length));\n\t}\n}\n"]}]}