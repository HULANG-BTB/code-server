{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/listCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/listCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar listWidget_1 = require(\"vs/base/browser/ui/list/listWidget\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar listPaging_1 = require(\"vs/base/browser/ui/list/listPaging\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar objectTree_1 = require(\"vs/base/browser/ui/tree/objectTree\");\nvar asyncDataTree_1 = require(\"vs/base/browser/ui/tree/asyncDataTree\");\nvar dataTree_1 = require(\"vs/base/browser/ui/tree/dataTree\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nfunction ensureDOMFocus(widget) {\n    // it can happen that one of the commands is executed while\n    // DOM focus is within another focusable control within the\n    // list/tree item. therefor we should ensure that the\n    // list/tree has DOM focus again after the command ran.\n    if (widget && widget.getHTMLElement() !== document.activeElement) {\n        widget.domFocus();\n    }\n}\nfunction focusDown(accessor, arg2, loop) {\n    if (loop === void 0) { loop = false; }\n    var focused = accessor.get(listService_1.IListService).lastFocusedList;\n    var count = typeof arg2 === 'number' ? arg2 : 1;\n    // Ensure DOM Focus\n    ensureDOMFocus(focused);\n    // List\n    if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n        var list = focused;\n        list.focusNext(count);\n        var listFocus = list.getFocus();\n        if (listFocus.length) {\n            list.reveal(listFocus[0]);\n        }\n    }\n    // ObjectTree\n    else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n        var tree = focused;\n        var fakeKeyboardEvent = new KeyboardEvent('keydown');\n        tree.focusNext(count, loop, fakeKeyboardEvent);\n        var listFocus = tree.getFocus();\n        if (listFocus.length) {\n            tree.reveal(listFocus[0]);\n        }\n    }\n    // Tree\n    else if (focused) {\n        var tree = focused;\n        tree.focusNext(count, { origin: 'keyboard' });\n        tree.reveal(tree.getFocus());\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusDown',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.DownArrow,\n    mac: {\n        primary: keyCodes_1.KeyCode.DownArrow,\n        secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_N]\n    },\n    handler: function (accessor, arg2) { return focusDown(accessor, arg2); }\n});\nfunction expandMultiSelection(focused, previousFocus) {\n    // List\n    if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n        var list = focused;\n        var focus = list.getFocus() ? list.getFocus()[0] : undefined;\n        var selection = list.getSelection();\n        if (selection && typeof focus === 'number' && selection.indexOf(focus) >= 0) {\n            list.setSelection(selection.filter(function (s) { return s !== previousFocus; }));\n        }\n        else {\n            if (typeof focus === 'number') {\n                list.setSelection(selection.concat(focus));\n            }\n        }\n    }\n    // ObjectTree\n    else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n        var list = focused;\n        var focus = list.getFocus() ? list.getFocus()[0] : undefined;\n        if (previousFocus === focus) {\n            return;\n        }\n        var selection = list.getSelection();\n        var fakeKeyboardEvent = new KeyboardEvent('keydown', { shiftKey: true });\n        if (selection && selection.indexOf(focus) >= 0) {\n            list.setSelection(selection.filter(function (s) { return s !== previousFocus; }), fakeKeyboardEvent);\n        }\n        else {\n            list.setSelection(selection.concat(focus), fakeKeyboardEvent);\n        }\n    }\n    // Tree\n    else if (focused) {\n        var tree = focused;\n        var focus = tree.getFocus();\n        var selection = tree.getSelection();\n        if (selection && selection.indexOf(focus) >= 0) {\n            tree.setSelection(selection.filter(function (s) { return s !== previousFocus; }));\n        }\n        else {\n            tree.setSelection(selection.concat(focus));\n        }\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.expandSelectionDown',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(listService_1.WorkbenchListFocusContextKey, listService_1.WorkbenchListSupportsMultiSelectContextKey),\n    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow,\n    handler: function (accessor, arg2) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList || focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            // Focus down first\n            var previousFocus = list.getFocus() ? list.getFocus()[0] : undefined;\n            focusDown(accessor, arg2, false);\n            // Then adjust selection\n            expandMultiSelection(focused, previousFocus);\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            // Focus down first\n            var previousFocus = tree.getFocus();\n            focusDown(accessor, arg2);\n            // Then adjust selection\n            expandMultiSelection(focused, previousFocus);\n        }\n    }\n});\nfunction focusUp(accessor, arg2, loop) {\n    if (loop === void 0) { loop = false; }\n    var focused = accessor.get(listService_1.IListService).lastFocusedList;\n    var count = typeof arg2 === 'number' ? arg2 : 1;\n    // Ensure DOM Focus\n    ensureDOMFocus(focused);\n    // List\n    if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n        var list = focused;\n        list.focusPrevious(count);\n        var listFocus = list.getFocus();\n        if (listFocus.length) {\n            list.reveal(listFocus[0]);\n        }\n    }\n    // ObjectTree\n    else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n        var tree = focused;\n        var fakeKeyboardEvent = new KeyboardEvent('keydown');\n        tree.focusPrevious(count, loop, fakeKeyboardEvent);\n        var listFocus = tree.getFocus();\n        if (listFocus.length) {\n            tree.reveal(listFocus[0]);\n        }\n    }\n    // Tree\n    else if (focused) {\n        var tree = focused;\n        tree.focusPrevious(count, { origin: 'keyboard' });\n        tree.reveal(tree.getFocus());\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusUp',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.UpArrow,\n    mac: {\n        primary: keyCodes_1.KeyCode.UpArrow,\n        secondary: [keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_P]\n    },\n    handler: function (accessor, arg2) { return focusUp(accessor, arg2); }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.expandSelectionUp',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(listService_1.WorkbenchListFocusContextKey, listService_1.WorkbenchListSupportsMultiSelectContextKey),\n    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow,\n    handler: function (accessor, arg2) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList || focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            // Focus up first\n            var previousFocus = list.getFocus() ? list.getFocus()[0] : undefined;\n            focusUp(accessor, arg2, false);\n            // Then adjust selection\n            expandMultiSelection(focused, previousFocus);\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            // Focus up first\n            var previousFocus = tree.getFocus();\n            focusUp(accessor, arg2);\n            // Then adjust selection\n            expandMultiSelection(focused, previousFocus);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.collapse',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.LeftArrow,\n    mac: {\n        primary: keyCodes_1.KeyCode.LeftArrow,\n        secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.UpArrow]\n    },\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // Tree only\n        if (focused && !(focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList)) {\n            if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n                var tree = focused;\n                var focusedElements = tree.getFocus();\n                if (focusedElements.length === 0) {\n                    return;\n                }\n                var focus = focusedElements[0];\n                if (!tree.collapse(focus)) {\n                    var parent = tree.getParentElement(focus);\n                    if (parent) {\n                        var fakeKeyboardEvent = new KeyboardEvent('keydown');\n                        tree.setFocus([parent], fakeKeyboardEvent);\n                        tree.reveal(parent);\n                    }\n                }\n            }\n            else {\n                var tree_1 = focused;\n                var focus_1 = tree_1.getFocus();\n                tree_1.collapse(focus_1).then(function (didCollapse) {\n                    if (focus_1 && !didCollapse) {\n                        tree_1.focusParent({ origin: 'keyboard' });\n                        return tree_1.reveal(tree_1.getFocus());\n                    }\n                    return undefined;\n                });\n            }\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.expand',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.RightArrow,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // Tree only\n        if (focused && !(focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList)) {\n            if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree) {\n                // TODO@Joao: instead of doing this here, just delegate to a tree method\n                var tree = focused;\n                var focusedElements = tree.getFocus();\n                if (focusedElements.length === 0) {\n                    return;\n                }\n                var focus = focusedElements[0];\n                if (!tree.expand(focus)) {\n                    var child = tree.getFirstElementChild(focus);\n                    if (child) {\n                        var node = tree.getNode(child);\n                        if (node.visible) {\n                            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n                            tree.setFocus([child], fakeKeyboardEvent);\n                            tree.reveal(child);\n                        }\n                    }\n                }\n            }\n            else if (focused instanceof asyncDataTree_1.AsyncDataTree) {\n                // TODO@Joao: instead of doing this here, just delegate to a tree method\n                var tree_2 = focused;\n                var focusedElements = tree_2.getFocus();\n                if (focusedElements.length === 0) {\n                    return;\n                }\n                var focus_2 = focusedElements[0];\n                tree_2.expand(focus_2).then(function (didExpand) {\n                    if (focus_2 && !didExpand) {\n                        var child = tree_2.getFirstElementChild(focus_2);\n                        if (child) {\n                            var node = tree_2.getNode(child);\n                            if (node.visible) {\n                                var fakeKeyboardEvent = new KeyboardEvent('keydown');\n                                tree_2.setFocus([child], fakeKeyboardEvent);\n                                tree_2.reveal(child);\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                var tree_3 = focused;\n                var focus_3 = tree_3.getFocus();\n                tree_3.expand(focus_3).then(function (didExpand) {\n                    if (focus_3 && !didExpand) {\n                        tree_3.focusFirstChild({ origin: 'keyboard' });\n                        return tree_3.reveal(tree_3.getFocus());\n                    }\n                    return undefined;\n                });\n            }\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusPageUp',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.PageUp,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // Ensure DOM Focus\n        ensureDOMFocus(focused);\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            list.focusPreviousPage();\n            list.reveal(list.getFocus()[0]);\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n            list.focusPreviousPage(fakeKeyboardEvent);\n            list.reveal(list.getFocus()[0]);\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            tree.focusPreviousPage({ origin: 'keyboard' });\n            tree.reveal(tree.getFocus());\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusPageDown',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.PageDown,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // Ensure DOM Focus\n        ensureDOMFocus(focused);\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            list.focusNextPage();\n            list.reveal(list.getFocus()[0]);\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n            list.focusNextPage(fakeKeyboardEvent);\n            list.reveal(list.getFocus()[0]);\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            tree.focusNextPage({ origin: 'keyboard' });\n            tree.reveal(tree.getFocus());\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusFirst',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.Home,\n    handler: function (accessor) { return listFocusFirst(accessor); }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusFirstChild',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: 0,\n    handler: function (accessor) { return listFocusFirst(accessor, { fromFocused: true }); }\n});\nfunction listFocusFirst(accessor, options) {\n    var focused = accessor.get(listService_1.IListService).lastFocusedList;\n    // Ensure DOM Focus\n    ensureDOMFocus(focused);\n    // List\n    if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n        var list = focused;\n        list.setFocus([0]);\n        list.reveal(0);\n    }\n    // ObjectTree\n    else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n        var tree = focused;\n        var fakeKeyboardEvent = new KeyboardEvent('keydown');\n        tree.focusFirst(fakeKeyboardEvent);\n        var focus = tree.getFocus();\n        if (focus.length > 0) {\n            tree.reveal(focus[0]);\n        }\n    }\n    // Tree\n    else if (focused) {\n        var tree = focused;\n        tree.focusFirst({ origin: 'keyboard' }, options && options.fromFocused ? tree.getFocus() : undefined);\n        tree.reveal(tree.getFocus());\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusLast',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.End,\n    handler: function (accessor) { return listFocusLast(accessor); }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.focusLastChild',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: 0,\n    handler: function (accessor) { return listFocusLast(accessor, { fromFocused: true }); }\n});\nfunction listFocusLast(accessor, options) {\n    var focused = accessor.get(listService_1.IListService).lastFocusedList;\n    // Ensure DOM Focus\n    ensureDOMFocus(focused);\n    // List\n    if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n        var list = focused;\n        list.setFocus([list.length - 1]);\n        list.reveal(list.length - 1);\n    }\n    // ObjectTree\n    else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n        var tree = focused;\n        var fakeKeyboardEvent = new KeyboardEvent('keydown');\n        tree.focusLast(fakeKeyboardEvent);\n        var focus = tree.getFocus();\n        if (focus.length > 0) {\n            tree.reveal(focus[0]);\n        }\n    }\n    // Tree\n    else if (focused) {\n        var tree = focused;\n        tree.focusLast({ origin: 'keyboard' }, options && options.fromFocused ? tree.getFocus() : undefined);\n        tree.reveal(tree.getFocus());\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.select',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.Enter,\n    mac: {\n        primary: keyCodes_1.KeyCode.Enter,\n        secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.DownArrow]\n    },\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            list.setSelection(list.getFocus());\n            list.open(list.getFocus());\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            var fakeKeyboardEvent = listService_1.getSelectionKeyboardEvent('keydown', false);\n            var focus = list.getFocus();\n            if (focus.length > 0) {\n                list.toggleCollapsed(focus[0]);\n            }\n            list.setSelection(focus, fakeKeyboardEvent);\n            list.open(focus, fakeKeyboardEvent);\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            var focus = tree.getFocus();\n            if (focus) {\n                tree.setSelection([focus], { origin: 'keyboard' });\n            }\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.selectAll',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(listService_1.WorkbenchListFocusContextKey, listService_1.WorkbenchListSupportsMultiSelectContextKey),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_A,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            list.setSelection(arrays_1.range(list.length));\n        }\n        // Trees\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var tree = focused;\n            var focus = tree.getFocus();\n            var selection = tree.getSelection();\n            // Which element should be considered to start selecting all?\n            var start = undefined;\n            if (focus.length > 0 && (selection.length === 0 || selection.indexOf(focus[0]) === -1)) {\n                start = focus[0];\n            }\n            if (!start && selection.length > 0) {\n                start = selection[0];\n            }\n            // What is the scope of select all?\n            var scope = undefined;\n            if (!start) {\n                scope = undefined;\n            }\n            else {\n                var selectedNode = tree.getNode(start);\n                var parentNode = selectedNode.parent;\n                if (!parentNode || !parentNode.parent) { // root\n                    scope = undefined;\n                }\n                else {\n                    scope = parentNode.element;\n                }\n            }\n            var newSelection_1 = [];\n            var visit_1 = function (node) {\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    if (child.visible) {\n                        newSelection_1.push(child.element);\n                        if (!child.collapsed) {\n                            visit_1(child);\n                        }\n                    }\n                }\n            };\n            // Add the whole scope subtree to the new selection\n            visit_1(tree.getNode(scope));\n            // If the scope isn't the tree root, it should be part of the new selection\n            if (scope && selection.length === newSelection_1.length) {\n                newSelection_1.unshift(scope);\n            }\n            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n            tree.setSelection(newSelection_1, fakeKeyboardEvent);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.toggleExpand',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: listService_1.WorkbenchListFocusContextKey,\n    primary: keyCodes_1.KeyCode.Space,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // Tree only\n        if (focused && !(focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList)) {\n            if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n                var tree = focused;\n                var focus = tree.getFocus();\n                if (focus.length === 0) {\n                    return;\n                }\n                tree.toggleCollapsed(focus[0]);\n            }\n            else {\n                var tree = focused;\n                var focus = tree.getFocus();\n                if (focus) {\n                    tree.toggleExpansion(focus);\n                }\n            }\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'list.clear',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(listService_1.WorkbenchListFocusContextKey, listService_1.WorkbenchListHasSelectionOrFocus),\n    primary: keyCodes_1.KeyCode.Escape,\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            if (list.getSelection().length > 0) {\n                list.setSelection([]);\n            }\n            else if (list.getFocus().length > 0) {\n                list.setFocus([]);\n            }\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var list = focused;\n            var fakeKeyboardEvent = new KeyboardEvent('keydown');\n            if (list.getSelection().length > 0) {\n                list.setSelection([], fakeKeyboardEvent);\n            }\n            else if (list.getFocus().length > 0) {\n                list.setFocus([], fakeKeyboardEvent);\n            }\n        }\n        // Tree\n        else if (focused) {\n            var tree = focused;\n            if (tree.getSelection().length) {\n                tree.clearSelection({ origin: 'keyboard' });\n            }\n            else if (tree.getFocus()) {\n                tree.clearFocus({ origin: 'keyboard' });\n            }\n        }\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: 'list.toggleKeyboardNavigation',\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            var list = focused;\n            list.toggleKeyboardNavigation();\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var tree = focused;\n            tree.toggleKeyboardNavigation();\n        }\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: 'list.toggleFilterOnType',\n    handler: function (accessor) {\n        var focused = accessor.get(listService_1.IListService).lastFocusedList;\n        // List\n        if (focused instanceof listWidget_1.List || focused instanceof listPaging_1.PagedList) {\n            // TODO@joao\n        }\n        // ObjectTree\n        else if (focused instanceof objectTree_1.ObjectTree || focused instanceof dataTree_1.DataTree || focused instanceof asyncDataTree_1.AsyncDataTree) {\n            var tree = focused;\n            tree.updateOptions({ filterOnType: !tree.filterOnType });\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/listCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/listCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { List } from 'vs/base/browser/ui/list/listWidget';\nimport { WorkbenchListFocusContextKey, IListService, WorkbenchListSupportsMultiSelectContextKey, ListWidget, WorkbenchListHasSelectionOrFocus, getSelectionKeyboardEvent } from 'vs/platform/list/browser/listService';\nimport { PagedList } from 'vs/base/browser/ui/list/listPaging';\nimport { range } from 'vs/base/common/arrays';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ITree } from 'vs/base/parts/tree/browser/tree';\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { AsyncDataTree } from 'vs/base/browser/ui/tree/asyncDataTree';\nimport { DataTree } from 'vs/base/browser/ui/tree/dataTree';\nimport { ITreeNode } from 'vs/base/browser/ui/tree/tree';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\nfunction ensureDOMFocus(widget: ListWidget | undefined): void {\n\t// it can happen that one of the commands is executed while\n\t// DOM focus is within another focusable control within the\n\t// list/tree item. therefor we should ensure that the\n\t// list/tree has DOM focus again after the command ran.\n\tif (widget && widget.getHTMLElement() !== document.activeElement) {\n\t\twidget.domFocus();\n\t}\n}\n\nfunction focusDown(accessor: ServicesAccessor, arg2?: number, loop: boolean = false): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\tconst count = typeof arg2 === 'number' ? arg2 : 1;\n\n\t// Ensure DOM Focus\n\tensureDOMFocus(focused);\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList) {\n\t\tconst list = focused;\n\n\t\tlist.focusNext(count);\n\t\tconst listFocus = list.getFocus();\n\t\tif (listFocus.length) {\n\t\t\tlist.reveal(listFocus[0]);\n\t\t}\n\t}\n\n\t// ObjectTree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst tree = focused;\n\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\ttree.focusNext(count, loop, fakeKeyboardEvent);\n\n\t\tconst listFocus = tree.getFocus();\n\t\tif (listFocus.length) {\n\t\t\ttree.reveal(listFocus[0]);\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused) {\n\t\tconst tree = focused;\n\n\t\ttree.focusNext(count, { origin: 'keyboard' });\n\t\ttree.reveal(tree.getFocus());\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.DownArrow,\n\tmac: {\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KEY_N]\n\t},\n\thandler: (accessor, arg2) => focusDown(accessor, arg2)\n});\n\nfunction expandMultiSelection(focused: List<any> | PagedList<any> | ITree | ObjectTree<any, any> | DataTree<any, any, any> | AsyncDataTree<any, any, any>, previousFocus: any): void {\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\t\tconst selection = list.getSelection();\n\t\tif (selection && typeof focus === 'number' && selection.indexOf(focus) >= 0) {\n\t\t\tlist.setSelection(selection.filter(s => s !== previousFocus));\n\t\t} else {\n\t\t\tif (typeof focus === 'number') {\n\t\t\t\tlist.setSelection(selection.concat(focus));\n\t\t\t}\n\t\t}\n\t}\n\n\t// ObjectTree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\n\t\tif (previousFocus === focus) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = list.getSelection();\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { shiftKey: true });\n\n\t\tif (selection && selection.indexOf(focus) >= 0) {\n\t\t\tlist.setSelection(selection.filter(s => s !== previousFocus), fakeKeyboardEvent);\n\t\t} else {\n\t\t\tlist.setSelection(selection.concat(focus), fakeKeyboardEvent);\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused) {\n\t\tconst tree = focused;\n\n\t\tconst focus = tree.getFocus();\n\t\tconst selection = tree.getSelection();\n\t\tif (selection && selection.indexOf(focus) >= 0) {\n\t\t\ttree.setSelection(selection.filter(s => s !== previousFocus));\n\t\t} else {\n\t\t\ttree.setSelection(selection.concat(focus));\n\t\t}\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expandSelectionDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList || focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\n\t\t\t// Focus down first\n\t\t\tconst previousFocus = list.getFocus() ? list.getFocus()[0] : undefined;\n\t\t\tfocusDown(accessor, arg2, false);\n\n\t\t\t// Then adjust selection\n\t\t\texpandMultiSelection(focused, previousFocus);\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\n\t\t\t// Focus down first\n\t\t\tconst previousFocus = tree.getFocus();\n\t\t\tfocusDown(accessor, arg2);\n\n\t\t\t// Then adjust selection\n\t\t\texpandMultiSelection(focused, previousFocus);\n\t\t}\n\t}\n});\n\nfunction focusUp(accessor: ServicesAccessor, arg2?: number, loop: boolean = false): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\tconst count = typeof arg2 === 'number' ? arg2 : 1;\n\n\t// Ensure DOM Focus\n\tensureDOMFocus(focused);\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList) {\n\t\tconst list = focused;\n\n\t\tlist.focusPrevious(count);\n\t\tconst listFocus = list.getFocus();\n\t\tif (listFocus.length) {\n\t\t\tlist.reveal(listFocus[0]);\n\t\t}\n\t}\n\n\t// ObjectTree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst tree = focused;\n\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\ttree.focusPrevious(count, loop, fakeKeyboardEvent);\n\n\t\tconst listFocus = tree.getFocus();\n\t\tif (listFocus.length) {\n\t\t\ttree.reveal(listFocus[0]);\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused) {\n\t\tconst tree = focused;\n\n\t\ttree.focusPrevious(count, { origin: 'keyboard' });\n\t\ttree.reveal(tree.getFocus());\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.UpArrow,\n\tmac: {\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KEY_P]\n\t},\n\thandler: (accessor, arg2) => focusUp(accessor, arg2)\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expandSelectionUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList || focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\n\t\t\t// Focus up first\n\t\t\tconst previousFocus = list.getFocus() ? list.getFocus()[0] : undefined;\n\t\t\tfocusUp(accessor, arg2, false);\n\n\t\t\t// Then adjust selection\n\t\t\texpandMultiSelection(focused, previousFocus);\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\n\t\t\t// Focus up first\n\t\t\tconst previousFocus = tree.getFocus();\n\t\t\tfocusUp(accessor, arg2);\n\n\t\t\t// Then adjust selection\n\t\t\texpandMultiSelection(focused, previousFocus);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.collapse',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Tree only\n\t\tif (focused && !(focused instanceof List || focused instanceof PagedList)) {\n\t\t\tif (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focusedElements = tree.getFocus();\n\n\t\t\t\tif (focusedElements.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst focus = focusedElements[0];\n\n\t\t\t\tif (!tree.collapse(focus)) {\n\t\t\t\t\tconst parent = tree.getParentElement(focus);\n\n\t\t\t\t\tif (parent) {\n\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\t\ttree.setFocus([parent], fakeKeyboardEvent);\n\t\t\t\t\t\ttree.reveal(parent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\ttree.collapse(focus).then(didCollapse => {\n\t\t\t\t\tif (focus && !didCollapse) {\n\t\t\t\t\t\ttree.focusParent({ origin: 'keyboard' });\n\n\t\t\t\t\t\treturn tree.reveal(tree.getFocus());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expand',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.RightArrow,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Tree only\n\t\tif (focused && !(focused instanceof List || focused instanceof PagedList)) {\n\t\t\tif (focused instanceof ObjectTree || focused instanceof DataTree) {\n\t\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focusedElements = tree.getFocus();\n\n\t\t\t\tif (focusedElements.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst focus = focusedElements[0];\n\n\t\t\t\tif (!tree.expand(focus)) {\n\t\t\t\t\tconst child = tree.getFirstElementChild(focus);\n\n\t\t\t\t\tif (child) {\n\t\t\t\t\t\tconst node = tree.getNode(child);\n\n\t\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\t\t\ttree.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t\ttree.reveal(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (focused instanceof AsyncDataTree) {\n\t\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focusedElements = tree.getFocus();\n\n\t\t\t\tif (focusedElements.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst focus = focusedElements[0];\n\t\t\t\ttree.expand(focus).then(didExpand => {\n\t\t\t\t\tif (focus && !didExpand) {\n\t\t\t\t\t\tconst child = tree.getFirstElementChild(focus);\n\n\t\t\t\t\t\tif (child) {\n\t\t\t\t\t\t\tconst node = tree.getNode(child);\n\n\t\t\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\t\t\t\ttree.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t\t\ttree.reveal(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\ttree.expand(focus).then(didExpand => {\n\t\t\t\t\tif (focus && !didExpand) {\n\t\t\t\t\t\ttree.focusFirstChild({ origin: 'keyboard' });\n\n\t\t\t\t\t\treturn tree.reveal(tree.getFocus());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusPageUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageUp,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Ensure DOM Focus\n\t\tensureDOMFocus(focused);\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\n\t\t\tlist.focusPreviousPage();\n\t\t\tlist.reveal(list.getFocus()[0]);\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tlist.focusPreviousPage(fakeKeyboardEvent);\n\t\t\tlist.reveal(list.getFocus()[0]);\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\n\t\t\ttree.focusPreviousPage({ origin: 'keyboard' });\n\t\t\ttree.reveal(tree.getFocus());\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusPageDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageDown,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Ensure DOM Focus\n\t\tensureDOMFocus(focused);\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\n\t\t\tlist.focusNextPage();\n\t\t\tlist.reveal(list.getFocus()[0]);\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tlist.focusNextPage(fakeKeyboardEvent);\n\t\t\tlist.reveal(list.getFocus()[0]);\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\n\t\t\ttree.focusNextPage({ origin: 'keyboard' });\n\t\t\ttree.reveal(tree.getFocus());\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusFirst',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Home,\n\thandler: accessor => listFocusFirst(accessor)\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusFirstChild',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: 0,\n\thandler: accessor => listFocusFirst(accessor, { fromFocused: true })\n});\n\nfunction listFocusFirst(accessor: ServicesAccessor, options?: { fromFocused: boolean }): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t// Ensure DOM Focus\n\tensureDOMFocus(focused);\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList) {\n\t\tconst list = focused;\n\n\t\tlist.setFocus([0]);\n\t\tlist.reveal(0);\n\t}\n\n\t// ObjectTree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst tree = focused;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\ttree.focusFirst(fakeKeyboardEvent);\n\n\t\tconst focus = tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\ttree.reveal(focus[0]);\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused) {\n\t\tconst tree = focused;\n\n\t\ttree.focusFirst({ origin: 'keyboard' }, options && options.fromFocused ? tree.getFocus() : undefined);\n\t\ttree.reveal(tree.getFocus());\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusLast',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.End,\n\thandler: accessor => listFocusLast(accessor)\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusLastChild',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: 0,\n\thandler: accessor => listFocusLast(accessor, { fromFocused: true })\n});\n\nfunction listFocusLast(accessor: ServicesAccessor, options?: { fromFocused: boolean }): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t// Ensure DOM Focus\n\tensureDOMFocus(focused);\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList) {\n\t\tconst list = focused;\n\n\t\tlist.setFocus([list.length - 1]);\n\t\tlist.reveal(list.length - 1);\n\t}\n\n\t// ObjectTree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst tree = focused;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\ttree.focusLast(fakeKeyboardEvent);\n\n\t\tconst focus = tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\ttree.reveal(focus[0]);\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused) {\n\t\tconst tree = focused;\n\n\t\ttree.focusLast({ origin: 'keyboard' }, options && options.fromFocused ? tree.getFocus() : undefined);\n\t\ttree.reveal(tree.getFocus());\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.select',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.DownArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\t\t\tlist.setSelection(list.getFocus());\n\t\t\tlist.open(list.getFocus());\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\t\t\tconst fakeKeyboardEvent = getSelectionKeyboardEvent('keydown', false);\n\t\t\tconst focus = list.getFocus();\n\n\t\t\tif (focus.length > 0) {\n\t\t\t\tlist.toggleCollapsed(focus[0]);\n\t\t\t}\n\n\t\t\tlist.setSelection(focus, fakeKeyboardEvent);\n\t\t\tlist.open(focus, fakeKeyboardEvent);\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\n\t\t\tif (focus) {\n\t\t\t\ttree.setSelection([focus], { origin: 'keyboard' });\n\t\t\t}\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.selectAll',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_A,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\t\t\tlist.setSelection(range(list.length));\n\t\t}\n\n\t\t// Trees\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\t\t\tconst selection = tree.getSelection();\n\n\t\t\t// Which element should be considered to start selecting all?\n\t\t\tlet start: any | undefined = undefined;\n\n\t\t\tif (focus.length > 0 && (selection.length === 0 || selection.indexOf(focus[0]) === -1)) {\n\t\t\t\tstart = focus[0];\n\t\t\t}\n\n\t\t\tif (!start && selection.length > 0) {\n\t\t\t\tstart = selection[0];\n\t\t\t}\n\n\t\t\t// What is the scope of select all?\n\t\t\tlet scope: any | undefined = undefined;\n\n\t\t\tif (!start) {\n\t\t\t\tscope = undefined;\n\t\t\t} else {\n\t\t\t\tconst selectedNode = tree.getNode(start);\n\t\t\t\tconst parentNode = selectedNode.parent;\n\n\t\t\t\tif (!parentNode || !parentNode.parent) { // root\n\t\t\t\t\tscope = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tscope = parentNode.element;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst newSelection: any[] = [];\n\t\t\tconst visit = (node: ITreeNode<any, any>) => {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tif (child.visible) {\n\t\t\t\t\t\tnewSelection.push(child.element);\n\n\t\t\t\t\t\tif (!child.collapsed) {\n\t\t\t\t\t\t\tvisit(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Add the whole scope subtree to the new selection\n\t\t\tvisit(tree.getNode(scope));\n\n\t\t\t// If the scope isn't the tree root, it should be part of the new selection\n\t\t\tif (scope && selection.length === newSelection.length) {\n\t\t\t\tnewSelection.unshift(scope);\n\t\t\t}\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\ttree.setSelection(newSelection, fakeKeyboardEvent);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.toggleExpand',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Space,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Tree only\n\t\tif (focused && !(focused instanceof List || focused instanceof PagedList)) {\n\t\t\tif (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tif (focus.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttree.toggleCollapsed(focus[0]);\n\t\t\t} else {\n\t\t\t\tconst tree = focused;\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tif (focus) {\n\t\t\t\t\ttree.toggleExpansion(focus);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.clear',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListHasSelectionOrFocus),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\n\t\t\tif (list.getSelection().length > 0) {\n\t\t\t\tlist.setSelection([]);\n\t\t\t} else if (list.getFocus().length > 0) {\n\t\t\t\tlist.setFocus([]);\n\t\t\t}\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst list = focused;\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\n\t\t\tif (list.getSelection().length > 0) {\n\t\t\t\tlist.setSelection([], fakeKeyboardEvent);\n\t\t\t} else if (list.getFocus().length > 0) {\n\t\t\t\tlist.setFocus([], fakeKeyboardEvent);\n\t\t\t}\n\t\t}\n\n\t\t// Tree\n\t\telse if (focused) {\n\t\t\tconst tree = focused;\n\n\t\t\tif (tree.getSelection().length) {\n\t\t\t\ttree.clearSelection({ origin: 'keyboard' });\n\t\t\t} else if (tree.getFocus()) {\n\t\t\t\ttree.clearFocus({ origin: 'keyboard' });\n\t\t\t}\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'list.toggleKeyboardNavigation',\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\tconst list = focused;\n\t\t\tlist.toggleKeyboardNavigation();\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\ttree.toggleKeyboardNavigation();\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'list.toggleFilterOnType',\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList) {\n\t\t\t// TODO@joao\n\t\t}\n\n\t\t// ObjectTree\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\ttree.updateOptions({ filterOnType: !tree.filterOnType });\n\t\t}\n\t}\n});\n"]}]}