{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/list.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/list.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ListAriaRootRole;\n(function (ListAriaRootRole) {\n    /** default tree structure role */\n    ListAriaRootRole[\"TREE\"] = \"tree\";\n    /** role='tree' can interfere with screenreaders reading nested elements inside the tree row. Use FORM in that case. */\n    ListAriaRootRole[\"FORM\"] = \"form\";\n})(ListAriaRootRole = exports.ListAriaRootRole || (exports.ListAriaRootRole = {}));\nvar ListDragOverEffect;\n(function (ListDragOverEffect) {\n    ListDragOverEffect[ListDragOverEffect[\"Copy\"] = 0] = \"Copy\";\n    ListDragOverEffect[ListDragOverEffect[\"Move\"] = 1] = \"Move\";\n})(ListDragOverEffect = exports.ListDragOverEffect || (exports.ListDragOverEffect = {}));\nexports.ListDragOverReactions = {\n    reject: function () { return { accept: false }; },\n    accept: function () { return { accept: true }; },\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/list.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/list/list.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AA8DhG,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC3B,kCAAkC;IAClC,iCAAa,CAAA;IAEb,uHAAuH;IACvH,iCAAa,CAAA;AACd,CAAC,EANW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAM3B;AAaD,IAAkB,kBAGjB;AAHD,WAAkB,kBAAkB;IACnC,2DAAI,CAAA;IACJ,2DAAI,CAAA;AACL,CAAC,EAHiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAGnC;AAQY,QAAA,qBAAqB,GAAG;IACpC,MAAM,EAAN,cAAkC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7D,MAAM,EAAN,cAAkC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;CAC5D,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GestureEvent } from 'vs/base/browser/touch';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { IDragAndDropData } from 'vs/base/browser/dnd';\n\nexport interface IListVirtualDelegate<T> {\n\tgetHeight(element: T): number;\n\tgetTemplateId(element: T): string;\n\thasDynamicHeight?(element: T): boolean;\n\tsetDynamicHeight?(element: T, height: number): void;\n}\n\nexport interface IListRenderer<T, TTemplateData> {\n\ttemplateId: string;\n\trenderTemplate(container: HTMLElement): TTemplateData;\n\trenderElement(element: T, index: number, templateData: TTemplateData, dynamicHeightProbing?: boolean): void;\n\tdisposeElement?(element: T, index: number, templateData: TTemplateData, dynamicHeightProbing?: boolean): void;\n\tdisposeTemplate(templateData: TTemplateData): void;\n}\n\nexport interface IListEvent<T> {\n\telements: T[];\n\tindexes: number[];\n\tbrowserEvent?: UIEvent;\n}\n\nexport interface IListMouseEvent<T> {\n\tbrowserEvent: MouseEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListTouchEvent<T> {\n\tbrowserEvent: TouchEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListGestureEvent<T> {\n\tbrowserEvent: GestureEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListDragEvent<T> {\n\tbrowserEvent: DragEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n}\n\nexport interface IListContextMenuEvent<T> {\n\tbrowserEvent: UIEvent;\n\telement: T | undefined;\n\tindex: number | undefined;\n\tanchor: HTMLElement | { x: number; y: number; };\n}\n\nexport interface IIdentityProvider<T> {\n\tgetId(element: T): { toString(): string; };\n}\n\nexport enum ListAriaRootRole {\n\t/** default tree structure role */\n\tTREE = 'tree',\n\n\t/** role='tree' can interfere with screenreaders reading nested elements inside the tree row. Use FORM in that case. */\n\tFORM = 'form'\n}\n\nexport interface IKeyboardNavigationLabelProvider<T> {\n\n\t/**\n\t * Return a keyboard navigation label which will be used by the\n\t * list for filtering/navigating. Return `undefined` to make an\n\t * element always match.\n\t */\n\tgetKeyboardNavigationLabel(element: T): { toString(): string | undefined; } | undefined;\n\tmightProducePrintableCharacter?(event: IKeyboardEvent): boolean;\n}\n\nexport const enum ListDragOverEffect {\n\tCopy,\n\tMove\n}\n\nexport interface IListDragOverReaction {\n\taccept: boolean;\n\teffect?: ListDragOverEffect;\n\tfeedback?: number[]; // use -1 for entire list\n}\n\nexport const ListDragOverReactions = {\n\treject(): IListDragOverReaction { return { accept: false }; },\n\taccept(): IListDragOverReaction { return { accept: true }; },\n};\n\nexport interface IListDragAndDrop<T> {\n\tgetDragURI(element: T): string | null;\n\tgetDragLabel?(elements: T[]): string | undefined;\n\tonDragStart?(data: IDragAndDropData, originalEvent: DragEvent): void;\n\tonDragOver(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): boolean | IListDragOverReaction;\n\tdrop(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): void;\n}\n"]}]}