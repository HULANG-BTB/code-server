{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar RuntimeExtensionsInput = /** @class */ (function (_super) {\n    tslib_1.__extends(RuntimeExtensionsInput, _super);\n    function RuntimeExtensionsInput() {\n        return _super.call(this) || this;\n    }\n    RuntimeExtensionsInput.prototype.getTypeId = function () {\n        return RuntimeExtensionsInput.ID;\n    };\n    RuntimeExtensionsInput.prototype.getName = function () {\n        return nls.localize('extensionsInputName', \"Running Extensions\");\n    };\n    RuntimeExtensionsInput.prototype.matches = function (other) {\n        if (!(other instanceof RuntimeExtensionsInput)) {\n            return false;\n        }\n        return true;\n    };\n    RuntimeExtensionsInput.prototype.resolve = function () {\n        return Promise.resolve(null);\n    };\n    RuntimeExtensionsInput.prototype.supportsSplitEditor = function () {\n        return false;\n    };\n    RuntimeExtensionsInput.prototype.getResource = function () {\n        return uri_1.URI.from({\n            scheme: 'runtime-extensions',\n            path: 'default'\n        });\n    };\n    RuntimeExtensionsInput.ID = 'workbench.runtimeExtensions.input';\n    return RuntimeExtensionsInput;\n}(editor_1.EditorInput));\nexports.RuntimeExtensionsInput = RuntimeExtensionsInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,0CAAyC;AACzC,qDAAyD;AAEzD;IAA4C,kDAAW;IAItD;eACC,iBAAO;IACR,CAAC;IAED,0CAAS,GAAT;QACC,OAAO,sBAAsB,CAAC,EAAE,CAAC;IAClC,CAAC;IAED,wCAAO,GAAP;QACC,OAAO,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC;IAClE,CAAC;IAED,wCAAO,GAAP,UAAQ,KAAU;QACjB,IAAI,CAAC,CAAC,KAAK,YAAY,sBAAsB,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC;SACb;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,wCAAO,GAAP;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,oDAAmB,GAAnB;QACC,OAAO,KAAK,CAAC;IACd,CAAC;IAED,4CAAW,GAAX;QACC,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,oBAAoB;YAC5B,IAAI,EAAE,SAAS;SACf,CAAC,CAAC;IACJ,CAAC;IAlCe,yBAAE,GAAG,mCAAmC,CAAC;IAmC1D,6BAAC;CAAA,AArCD,CAA4C,oBAAW,GAqCtD;AArCY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { EditorInput } from 'vs/workbench/common/editor';\n\nexport class RuntimeExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.runtimeExtensions.input';\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetTypeId(): string {\n\t\treturn RuntimeExtensionsInput.ID;\n\t}\n\n\tgetName(): string {\n\t\treturn nls.localize('extensionsInputName', \"Running Extensions\");\n\t}\n\n\tmatches(other: any): boolean {\n\t\tif (!(other instanceof RuntimeExtensionsInput)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tresolve(): Promise<any> {\n\t\treturn Promise.resolve(null);\n\t}\n\n\tsupportsSplitEditor(): boolean {\n\t\treturn false;\n\t}\n\n\tgetResource(): URI {\n\t\treturn URI.from({\n\t\t\tscheme: 'runtime-extensions',\n\t\t\tpath: 'default'\n\t\t});\n\t}\n}\n"]}]}