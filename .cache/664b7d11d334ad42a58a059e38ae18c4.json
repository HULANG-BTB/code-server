{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/node/crypto.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/crypto.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"fs\", \"crypto\", \"vs/base/common/functional\"], function (require, exports, fs, crypto, functional_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function checksum(path, sha1hash) {\n        const promise = new Promise((c, e) => {\n            const input = fs.createReadStream(path);\n            const hash = crypto.createHash('sha1');\n            const hashStream = hash;\n            input.pipe(hashStream);\n            const done = functional_1.once((err, result) => {\n                input.removeAllListeners();\n                hashStream.removeAllListeners();\n                if (err) {\n                    e(err);\n                }\n                else {\n                    c(result);\n                }\n            });\n            input.once('error', done);\n            input.once('end', done);\n            hashStream.once('error', done);\n            hashStream.once('data', (data) => done(undefined, data.toString('hex')));\n        });\n        return promise.then(hash => {\n            if (hash !== sha1hash) {\n                return Promise.reject(new Error('Hash mismatch'));\n            }\n            return Promise.resolve();\n        });\n    }\n    exports.checksum = checksum;\n});\n",null]}