{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\", \"vs/base/common/charCode\"], function (require, exports, strings, charCode_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ReplacePattern {\n        constructor(replaceString, arg2, arg3) {\n            this._hasParameters = false;\n            this._replacePattern = replaceString;\n            let searchPatternInfo;\n            let parseParameters;\n            if (typeof arg2 === 'boolean') {\n                parseParameters = arg2;\n                this._regExp = arg3;\n            }\n            else {\n                searchPatternInfo = arg2;\n                parseParameters = !!searchPatternInfo.isRegExp;\n                this._regExp = strings.createRegExp(searchPatternInfo.pattern, !!searchPatternInfo.isRegExp, { matchCase: searchPatternInfo.isCaseSensitive, wholeWord: searchPatternInfo.isWordMatch, multiline: searchPatternInfo.isMultiline, global: false });\n            }\n            if (parseParameters) {\n                this.parseReplaceString(replaceString);\n            }\n            if (this._regExp.global) {\n                this._regExp = strings.createRegExp(this._regExp.source, true, { matchCase: !this._regExp.ignoreCase, wholeWord: false, multiline: this._regExp.multiline, global: false });\n            }\n        }\n        get hasParameters() {\n            return this._hasParameters;\n        }\n        get pattern() {\n            return this._replacePattern;\n        }\n        get regExp() {\n            return this._regExp;\n        }\n        /**\n        * Returns the replace string for the first match in the given text.\n        * If text has no matches then returns null.\n        */\n        getReplaceString(text) {\n            this._regExp.lastIndex = 0;\n            let match = this._regExp.exec(text);\n            if (match) {\n                if (this.hasParameters) {\n                    if (match[0] === text) {\n                        return text.replace(this._regExp, this.pattern);\n                    }\n                    let replaceString = text.replace(this._regExp, this.pattern);\n                    return replaceString.substr(match.index, match[0].length - (text.length - replaceString.length));\n                }\n                return this.pattern;\n            }\n            return null;\n        }\n        /**\n         * \\n => LF\n         * \\t => TAB\n         * \\\\ => \\\n         * $0 => $& (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter)\n         * everything else stays untouched\n         */\n        parseReplaceString(replaceString) {\n            if (!replaceString || replaceString.length === 0) {\n                return;\n            }\n            let substrFrom = 0, result = '';\n            for (let i = 0, len = replaceString.length; i < len; i++) {\n                let chCode = replaceString.charCodeAt(i);\n                if (chCode === charCode_1.CharCode.Backslash) {\n                    // move to next char\n                    i++;\n                    if (i >= len) {\n                        // string ends with a \\\n                        break;\n                    }\n                    let nextChCode = replaceString.charCodeAt(i);\n                    let replaceWithCharacter = null;\n                    switch (nextChCode) {\n                        case charCode_1.CharCode.Backslash:\n                            // \\\\ => \\\n                            replaceWithCharacter = '\\\\';\n                            break;\n                        case charCode_1.CharCode.n:\n                            // \\n => LF\n                            replaceWithCharacter = '\\n';\n                            break;\n                        case charCode_1.CharCode.t:\n                            // \\t => TAB\n                            replaceWithCharacter = '\\t';\n                            break;\n                    }\n                    if (replaceWithCharacter) {\n                        result += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n                        substrFrom = i + 1;\n                    }\n                }\n                if (chCode === charCode_1.CharCode.DollarSign) {\n                    // move to next char\n                    i++;\n                    if (i >= len) {\n                        // string ends with a $\n                        break;\n                    }\n                    let nextChCode = replaceString.charCodeAt(i);\n                    let replaceWithCharacter = null;\n                    switch (nextChCode) {\n                        case charCode_1.CharCode.Digit0:\n                            // $0 => $&\n                            replaceWithCharacter = '$&';\n                            this._hasParameters = true;\n                            break;\n                        case charCode_1.CharCode.BackTick:\n                        case charCode_1.CharCode.SingleQuote:\n                            this._hasParameters = true;\n                            break;\n                        default:\n                            // check if it is a valid string parameter $n (0 <= n <= 99). $0 is already handled by now.\n                            if (!this.between(nextChCode, charCode_1.CharCode.Digit1, charCode_1.CharCode.Digit9)) {\n                                break;\n                            }\n                            if (i === replaceString.length - 1) {\n                                this._hasParameters = true;\n                                break;\n                            }\n                            let charCode = replaceString.charCodeAt(++i);\n                            if (!this.between(charCode, charCode_1.CharCode.Digit0, charCode_1.CharCode.Digit9)) {\n                                this._hasParameters = true;\n                                --i;\n                                break;\n                            }\n                            if (i === replaceString.length - 1) {\n                                this._hasParameters = true;\n                                break;\n                            }\n                            charCode = replaceString.charCodeAt(++i);\n                            if (!this.between(charCode, charCode_1.CharCode.Digit0, charCode_1.CharCode.Digit9)) {\n                                this._hasParameters = true;\n                                --i;\n                                break;\n                            }\n                            break;\n                    }\n                    if (replaceWithCharacter) {\n                        result += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n                        substrFrom = i + 1;\n                    }\n                }\n            }\n            if (substrFrom === 0) {\n                // no replacement occurred\n                return;\n            }\n            this._replacePattern = result + replaceString.substring(substrFrom);\n        }\n        between(value, from, to) {\n            return from <= value && value <= to;\n        }\n    }\n    exports.ReplacePattern = ReplacePattern;\n});\n",null]}