{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar aria_1 = require(\"vs/base/browser/ui/aria/aria\");\nvar nls_1 = require(\"vs/nls\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar event_1 = require(\"vs/base/common/event\");\nvar NotificationsAlerts = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsAlerts, _super);\n    function NotificationsAlerts(model) {\n        var _this = _super.call(this) || this;\n        _this.model = model;\n        // Alert initial notifications if any\n        model.notifications.forEach(function (n) { return _this.triggerAriaAlert(n); });\n        _this.registerListeners();\n        return _this;\n    }\n    NotificationsAlerts.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.model.onDidNotificationChange(function (e) { return _this.onDidNotificationChange(e); }));\n    };\n    NotificationsAlerts.prototype.onDidNotificationChange = function (e) {\n        if (e.kind === notifications_1.NotificationChangeType.ADD) {\n            // ARIA alert for screen readers\n            this.triggerAriaAlert(e.item);\n            // Always log errors to console with full details\n            if (e.item.severity === notification_1.Severity.Error) {\n                if (e.item.message.original instanceof Error) {\n                    console.error(e.item.message.original);\n                }\n                else {\n                    console.error(errorMessage_1.toErrorMessage(e.item.message.value, true));\n                }\n            }\n        }\n    };\n    NotificationsAlerts.prototype.triggerAriaAlert = function (notifiation) {\n        var _this = this;\n        // Trigger the alert again whenever the label changes\n        var listener = notifiation.onDidLabelChange(function (e) {\n            if (e.kind === notifications_1.NotificationViewItemLabelKind.MESSAGE) {\n                _this.doTriggerAriaAlert(notifiation);\n            }\n        });\n        event_1.Event.once(notifiation.onDidClose)(function () { return listener.dispose(); });\n        this.doTriggerAriaAlert(notifiation);\n    };\n    NotificationsAlerts.prototype.doTriggerAriaAlert = function (notifiation) {\n        var alertText;\n        if (notifiation.severity === notification_1.Severity.Error) {\n            alertText = nls_1.localize('alertErrorMessage', \"Error: {0}\", notifiation.message.value);\n        }\n        else if (notifiation.severity === notification_1.Severity.Warning) {\n            alertText = nls_1.localize('alertWarningMessage', \"Warning: {0}\", notifiation.message.value);\n        }\n        else {\n            alertText = nls_1.localize('alertInfoMessage', \"Info: {0}\", notifiation.message.value);\n        }\n        aria_1.alert(alertText);\n    };\n    return NotificationsAlerts;\n}(lifecycle_1.Disposable));\nexports.NotificationsAlerts = NotificationsAlerts;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qDAAqD;AACrD,8BAAkC;AAClC,mEAAgL;AAChL,sDAAsD;AACtD,4DAA6D;AAC7D,6EAAwE;AACxE,8CAA6C;AAE7C;IAAyC,+CAAU;IAElD,6BAAoB,KAA0B;QAA9C,YACC,iBAAO,SAMP;QAPmB,WAAK,GAAL,KAAK,CAAqB;QAG7C,qCAAqC;QACrC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAE3D,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IAEO,+CAAiB,GAAzB;QAAA,iBAEC;QADA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IAC1F,CAAC;IAEO,qDAAuB,GAA/B,UAAgC,CAA2B;QAC1D,IAAI,CAAC,CAAC,IAAI,KAAK,sCAAsB,CAAC,GAAG,EAAE;YAE1C,gCAAgC;YAChC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAE9B,iDAAiD;YACjD,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,uBAAQ,CAAC,KAAK,EAAE;gBACvC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,YAAY,KAAK,EAAE;oBAC7C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACvC;qBAAM;oBACN,OAAO,CAAC,KAAK,CAAC,6BAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;iBAC1D;aACD;SACD;IACF,CAAC;IAEO,8CAAgB,GAAxB,UAAyB,WAAkC;QAA3D,iBAYC;QAVA,qDAAqD;QACrD,IAAM,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAC,UAAA,CAAC;YAC9C,IAAI,CAAC,CAAC,IAAI,KAAK,6CAA6B,CAAC,OAAO,EAAE;gBACrD,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;aACrC;QACF,CAAC,CAAC,CAAC;QAEH,aAAK,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,cAAM,OAAA,QAAQ,CAAC,OAAO,EAAE,EAAlB,CAAkB,CAAC,CAAC;QAE7D,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEO,gDAAkB,GAA1B,UAA2B,WAAkC;QAC5D,IAAI,SAAiB,CAAC;QACtB,IAAI,WAAW,CAAC,QAAQ,KAAK,uBAAQ,CAAC,KAAK,EAAE;YAC5C,SAAS,GAAG,cAAQ,CAAC,mBAAmB,EAAE,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACnF;aAAM,IAAI,WAAW,CAAC,QAAQ,KAAK,uBAAQ,CAAC,OAAO,EAAE;YACrD,SAAS,GAAG,cAAQ,CAAC,qBAAqB,EAAE,cAAc,EAAE,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACvF;aAAM;YACN,SAAS,GAAG,cAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACjF;QAED,YAAK,CAAC,SAAS,CAAC,CAAC;IAClB,CAAC;IACF,0BAAC;AAAD,CAAC,AA1DD,CAAyC,sBAAU,GA0DlD;AA1DY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { localize } from 'vs/nls';\nimport { INotificationViewItem, INotificationsModel, NotificationChangeType, INotificationChangeEvent, NotificationViewItemLabelKind } from 'vs/workbench/common/notifications';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\n\nexport class NotificationsAlerts extends Disposable {\n\n\tconstructor(private model: INotificationsModel) {\n\t\tsuper();\n\n\t\t// Alert initial notifications if any\n\t\tmodel.notifications.forEach(n => this.triggerAriaAlert(n));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidNotificationChange(e => this.onDidNotificationChange(e)));\n\t}\n\n\tprivate onDidNotificationChange(e: INotificationChangeEvent): void {\n\t\tif (e.kind === NotificationChangeType.ADD) {\n\n\t\t\t// ARIA alert for screen readers\n\t\t\tthis.triggerAriaAlert(e.item);\n\n\t\t\t// Always log errors to console with full details\n\t\t\tif (e.item.severity === Severity.Error) {\n\t\t\t\tif (e.item.message.original instanceof Error) {\n\t\t\t\t\tconsole.error(e.item.message.original);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(toErrorMessage(e.item.message.value, true));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate triggerAriaAlert(notifiation: INotificationViewItem): void {\n\n\t\t// Trigger the alert again whenever the label changes\n\t\tconst listener = notifiation.onDidLabelChange(e => {\n\t\t\tif (e.kind === NotificationViewItemLabelKind.MESSAGE) {\n\t\t\t\tthis.doTriggerAriaAlert(notifiation);\n\t\t\t}\n\t\t});\n\n\t\tEvent.once(notifiation.onDidClose)(() => listener.dispose());\n\n\t\tthis.doTriggerAriaAlert(notifiation);\n\t}\n\n\tprivate doTriggerAriaAlert(notifiation: INotificationViewItem): void {\n\t\tlet alertText: string;\n\t\tif (notifiation.severity === Severity.Error) {\n\t\t\talertText = localize('alertErrorMessage', \"Error: {0}\", notifiation.message.value);\n\t\t} else if (notifiation.severity === Severity.Warning) {\n\t\t\talertText = localize('alertWarningMessage', \"Warning: {0}\", notifiation.message.value);\n\t\t} else {\n\t\t\talertText = localize('alertInfoMessage', \"Info: {0}\", notifiation.message.value);\n\t\t}\n\n\t\talert(alertText);\n\t}\n}"]}]}