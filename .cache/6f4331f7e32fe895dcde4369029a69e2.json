{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/common/editor\", \"vs/base/common/uri\"], function (require, exports, nls_1, editor_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtensionsInput extends editor_1.EditorInput {\n        constructor(_extension) {\n            super();\n            this._extension = _extension;\n        }\n        get extension() { return this._extension; }\n        getTypeId() {\n            return ExtensionsInput.ID;\n        }\n        getName() {\n            return nls_1.localize('extensionsInputName', \"Extension: {0}\", this.extension.displayName);\n        }\n        matches(other) {\n            if (!(other instanceof ExtensionsInput)) {\n                return false;\n            }\n            const otherExtensionInput = other;\n            // TODO@joao is this correct?\n            return this.extension === otherExtensionInput.extension;\n        }\n        resolve() {\n            return Promise.resolve(null);\n        }\n        supportsSplitEditor() {\n            return false;\n        }\n        getResource() {\n            return uri_1.URI.from({\n                scheme: 'extension',\n                path: this.extension.identifier.id\n            });\n        }\n    }\n    ExtensionsInput.ID = 'workbench.extensions.input2';\n    exports.ExtensionsInput = ExtensionsInput;\n});\n",null]}