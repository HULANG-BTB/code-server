{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/hover.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/hover.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/editor/browser/editorBrowser\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/core/range\", \"vs/editor/common/editorContextKeys\", \"vs/editor/common/services/modeService\", \"vs/editor/contrib/hover/hoverOperation\", \"vs/editor/contrib/hover/modesContentHover\", \"vs/editor/contrib/hover/modesGlyphHover\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/opener/common/opener\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/editor/common/services/markersDecorationService\", \"vs/platform/keybinding/common/keybinding\", \"vs/platform/contextview/browser/contextView\", \"vs/editor/browser/services/bulkEditService\", \"vs/platform/commands/common/commands\", \"vs/platform/accessibility/common/accessibility\", \"vs/css!./hover\"], function (require, exports, nls, keyCodes_1, lifecycle_1, editorBrowser_1, editorExtensions_1, range_1, editorContextKeys_1, modeService_1, hoverOperation_1, modesContentHover_1, modesGlyphHover_1, keybindingsRegistry_1, opener_1, colorRegistry_1, themeService_1, markersDecorationService_1, keybinding_1, contextView_1, bulkEditService_1, commands_1, accessibility_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ModesHoverController = class ModesHoverController {\n        constructor(_editor, _openerService, _modeService, _markerDecorationsService, _keybindingService, _contextMenuService, _bulkEditService, _commandService, _themeService) {\n            this._editor = _editor;\n            this._openerService = _openerService;\n            this._modeService = _modeService;\n            this._markerDecorationsService = _markerDecorationsService;\n            this._keybindingService = _keybindingService;\n            this._contextMenuService = _contextMenuService;\n            this._bulkEditService = _bulkEditService;\n            this._commandService = _commandService;\n            this._themeService = _themeService;\n            this._toUnhook = [];\n            this._isMouseDown = false;\n            this._hoverClicked = false;\n            this._hookEvents();\n            this._didChangeConfigurationHandler = this._editor.onDidChangeConfiguration((e) => {\n                if (e.contribInfo) {\n                    this._hideWidgets();\n                    this._unhookEvents();\n                    this._hookEvents();\n                }\n            });\n        }\n        get contentWidget() {\n            if (!this._contentWidget) {\n                this._createHoverWidget();\n            }\n            return this._contentWidget;\n        }\n        get glyphWidget() {\n            if (!this._glyphWidget) {\n                this._createHoverWidget();\n            }\n            return this._glyphWidget;\n        }\n        static get(editor) {\n            return editor.getContribution(ModesHoverController.ID);\n        }\n        _hookEvents() {\n            const hideWidgetsEventHandler = () => this._hideWidgets();\n            const hoverOpts = this._editor.getConfiguration().contribInfo.hover;\n            this._isHoverEnabled = hoverOpts.enabled;\n            this._isHoverSticky = hoverOpts.sticky;\n            if (this._isHoverEnabled) {\n                this._toUnhook.push(this._editor.onMouseDown((e) => this._onEditorMouseDown(e)));\n                this._toUnhook.push(this._editor.onMouseUp((e) => this._onEditorMouseUp(e)));\n                this._toUnhook.push(this._editor.onMouseMove((e) => this._onEditorMouseMove(e)));\n                this._toUnhook.push(this._editor.onKeyDown((e) => this._onKeyDown(e)));\n                this._toUnhook.push(this._editor.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n            }\n            else {\n                this._toUnhook.push(this._editor.onMouseMove(hideWidgetsEventHandler));\n            }\n            this._toUnhook.push(this._editor.onMouseLeave(hideWidgetsEventHandler));\n            this._toUnhook.push(this._editor.onDidChangeModel(hideWidgetsEventHandler));\n            this._toUnhook.push(this._editor.onDidScrollChange((e) => this._onEditorScrollChanged(e)));\n        }\n        _unhookEvents() {\n            this._toUnhook = lifecycle_1.dispose(this._toUnhook);\n        }\n        _onModelDecorationsChanged() {\n            this.contentWidget.onModelDecorationsChanged();\n            this.glyphWidget.onModelDecorationsChanged();\n        }\n        _onEditorScrollChanged(e) {\n            if (e.scrollTopChanged || e.scrollLeftChanged) {\n                this._hideWidgets();\n            }\n        }\n        _onEditorMouseDown(mouseEvent) {\n            this._isMouseDown = true;\n            const targetType = mouseEvent.target.type;\n            if (targetType === editorBrowser_1.MouseTargetType.CONTENT_WIDGET && mouseEvent.target.detail === modesContentHover_1.ModesContentHoverWidget.ID) {\n                this._hoverClicked = true;\n                // mouse down on top of content hover widget\n                return;\n            }\n            if (targetType === editorBrowser_1.MouseTargetType.OVERLAY_WIDGET && mouseEvent.target.detail === modesGlyphHover_1.ModesGlyphHoverWidget.ID) {\n                // mouse down on top of overlay hover widget\n                return;\n            }\n            if (targetType !== editorBrowser_1.MouseTargetType.OVERLAY_WIDGET && mouseEvent.target.detail !== modesGlyphHover_1.ModesGlyphHoverWidget.ID) {\n                this._hoverClicked = false;\n            }\n            this._hideWidgets();\n        }\n        _onEditorMouseUp(mouseEvent) {\n            this._isMouseDown = false;\n        }\n        _onEditorMouseMove(mouseEvent) {\n            // const this._editor.getConfiguration().contribInfo.hover.sticky;\n            let targetType = mouseEvent.target.type;\n            if (this._isMouseDown && this._hoverClicked && this.contentWidget.isColorPickerVisible()) {\n                return;\n            }\n            if (this._isHoverSticky && targetType === editorBrowser_1.MouseTargetType.CONTENT_WIDGET && mouseEvent.target.detail === modesContentHover_1.ModesContentHoverWidget.ID) {\n                // mouse moved on top of content hover widget\n                return;\n            }\n            if (this._isHoverSticky && targetType === editorBrowser_1.MouseTargetType.OVERLAY_WIDGET && mouseEvent.target.detail === modesGlyphHover_1.ModesGlyphHoverWidget.ID) {\n                // mouse moved on top of overlay hover widget\n                return;\n            }\n            if (targetType === editorBrowser_1.MouseTargetType.CONTENT_EMPTY) {\n                const epsilon = this._editor.getConfiguration().fontInfo.typicalHalfwidthCharacterWidth / 2;\n                const data = mouseEvent.target.detail;\n                if (data && !data.isAfterLines && typeof data.horizontalDistanceToText === 'number' && data.horizontalDistanceToText < epsilon) {\n                    // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n                    targetType = editorBrowser_1.MouseTargetType.CONTENT_TEXT;\n                }\n            }\n            if (targetType === editorBrowser_1.MouseTargetType.CONTENT_TEXT) {\n                this.glyphWidget.hide();\n                if (this._isHoverEnabled && mouseEvent.target.range) {\n                    this.contentWidget.startShowingAt(mouseEvent.target.range, hoverOperation_1.HoverStartMode.Delayed, false);\n                }\n            }\n            else if (targetType === editorBrowser_1.MouseTargetType.GUTTER_GLYPH_MARGIN) {\n                this.contentWidget.hide();\n                if (this._isHoverEnabled && mouseEvent.target.position) {\n                    this.glyphWidget.startShowingAt(mouseEvent.target.position.lineNumber);\n                }\n            }\n            else {\n                this._hideWidgets();\n            }\n        }\n        _onKeyDown(e) {\n            if (e.keyCode !== keyCodes_1.KeyCode.Ctrl && e.keyCode !== keyCodes_1.KeyCode.Alt && e.keyCode !== keyCodes_1.KeyCode.Meta && e.keyCode !== keyCodes_1.KeyCode.Shift) {\n                // Do not hide hover when a modifier key is pressed\n                this._hideWidgets();\n            }\n        }\n        _hideWidgets() {\n            if (!this._contentWidget || (this._isMouseDown && this._hoverClicked && this._contentWidget.isColorPickerVisible())) {\n                return;\n            }\n            this._glyphWidget.hide();\n            this._contentWidget.hide();\n        }\n        _createHoverWidget() {\n            this._contentWidget = new modesContentHover_1.ModesContentHoverWidget(this._editor, this._markerDecorationsService, this._themeService, this._keybindingService, this._contextMenuService, this._bulkEditService, this._commandService, this._modeService, this._openerService);\n            this._glyphWidget = new modesGlyphHover_1.ModesGlyphHoverWidget(this._editor, this._modeService, this._openerService);\n        }\n        showContentHover(range, mode, focus) {\n            this.contentWidget.startShowingAt(range, mode, focus);\n        }\n        getId() {\n            return ModesHoverController.ID;\n        }\n        dispose() {\n            this._unhookEvents();\n            this._didChangeConfigurationHandler.dispose();\n            if (this._glyphWidget) {\n                this._glyphWidget.dispose();\n            }\n            if (this._contentWidget) {\n                this._contentWidget.dispose();\n            }\n        }\n    };\n    ModesHoverController.ID = 'editor.contrib.hover';\n    ModesHoverController = __decorate([\n        __param(1, opener_1.IOpenerService),\n        __param(2, modeService_1.IModeService),\n        __param(3, markersDecorationService_1.IMarkerDecorationsService),\n        __param(4, keybinding_1.IKeybindingService),\n        __param(5, contextView_1.IContextMenuService),\n        __param(6, bulkEditService_1.IBulkEditService),\n        __param(7, commands_1.ICommandService),\n        __param(8, themeService_1.IThemeService)\n    ], ModesHoverController);\n    exports.ModesHoverController = ModesHoverController;\n    class ShowHoverAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.showHover',\n                label: nls.localize({\n                    key: 'showHover',\n                    comment: [\n                        'Label for action that will trigger the showing of a hover in the editor.',\n                        'This allows for users to show the hover without using the mouse.'\n                    ]\n                }, \"Show Hover\"),\n                alias: 'Show Hover',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_I),\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            let controller = ModesHoverController.get(editor);\n            if (!controller) {\n                return;\n            }\n            const position = editor.getPosition();\n            const range = new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column);\n            const focus = editor.getConfiguration().accessibilitySupport === accessibility_1.AccessibilitySupport.Enabled;\n            controller.showContentHover(range, hoverOperation_1.HoverStartMode.Immediate, focus);\n        }\n    }\n    editorExtensions_1.registerEditorContribution(ModesHoverController);\n    editorExtensions_1.registerEditorAction(ShowHoverAction);\n    // theming\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const editorHoverHighlightColor = theme.getColor(colorRegistry_1.editorHoverHighlight);\n        if (editorHoverHighlightColor) {\n            collector.addRule(`.monaco-editor .hoverHighlight { background-color: ${editorHoverHighlightColor}; }`);\n        }\n        const hoverBackground = theme.getColor(colorRegistry_1.editorHoverBackground);\n        if (hoverBackground) {\n            collector.addRule(`.monaco-editor .monaco-editor-hover { background-color: ${hoverBackground}; }`);\n        }\n        const hoverBorder = theme.getColor(colorRegistry_1.editorHoverBorder);\n        if (hoverBorder) {\n            collector.addRule(`.monaco-editor .monaco-editor-hover { border: 1px solid ${hoverBorder}; }`);\n            collector.addRule(`.monaco-editor .monaco-editor-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid ${hoverBorder.transparent(0.5)}; }`);\n            collector.addRule(`.monaco-editor .monaco-editor-hover hr { border-top: 1px solid ${hoverBorder.transparent(0.5)}; }`);\n            collector.addRule(`.monaco-editor .monaco-editor-hover hr { border-bottom: 0px solid ${hoverBorder.transparent(0.5)}; }`);\n        }\n        const link = theme.getColor(colorRegistry_1.textLinkForeground);\n        if (link) {\n            collector.addRule(`.monaco-editor .monaco-editor-hover a { color: ${link}; }`);\n        }\n        const actionsBackground = theme.getColor(colorRegistry_1.editorHoverStatusBarBackground);\n        if (actionsBackground) {\n            collector.addRule(`.monaco-editor .monaco-editor-hover .hover-row .actions { background-color: ${actionsBackground}; }`);\n        }\n        const codeBackground = theme.getColor(colorRegistry_1.textCodeBlockBackground);\n        if (codeBackground) {\n            collector.addRule(`.monaco-editor .monaco-editor-hover code { background-color: ${codeBackground}; }`);\n        }\n    });\n});\n",null]}