{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferences.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/configuration/common/configuration\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/common/editor\"], function (require, exports, nls_1, configuration_1, instantiation_1, editor_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var SettingValueType;\n    (function (SettingValueType) {\n        SettingValueType[\"Null\"] = \"null\";\n        SettingValueType[\"Enum\"] = \"enum\";\n        SettingValueType[\"String\"] = \"string\";\n        SettingValueType[\"Integer\"] = \"integer\";\n        SettingValueType[\"Number\"] = \"number\";\n        SettingValueType[\"Boolean\"] = \"boolean\";\n        SettingValueType[\"Exclude\"] = \"exclude\";\n        SettingValueType[\"Complex\"] = \"complex\";\n        SettingValueType[\"NullableInteger\"] = \"nullable-integer\";\n        SettingValueType[\"NullableNumber\"] = \"nullable-number\";\n    })(SettingValueType = exports.SettingValueType || (exports.SettingValueType = {}));\n    /**\n     * TODO Why do we need this class?\n     */\n    class SettingsEditorOptions extends editor_1.EditorOptions {\n        static create(settings) {\n            const options = new SettingsEditorOptions();\n            options.target = settings.target;\n            options.folderUri = settings.folderUri;\n            options.query = settings.query;\n            // IEditorOptions\n            options.preserveFocus = settings.preserveFocus;\n            options.forceReload = settings.forceReload;\n            options.revealIfVisible = settings.revealIfVisible;\n            options.revealIfOpened = settings.revealIfOpened;\n            options.pinned = settings.pinned;\n            options.index = settings.index;\n            options.inactive = settings.inactive;\n            return options;\n        }\n    }\n    exports.SettingsEditorOptions = SettingsEditorOptions;\n    exports.IPreferencesService = instantiation_1.createDecorator('preferencesService');\n    function getSettingsTargetName(target, resource, workspaceContextService) {\n        switch (target) {\n            case configuration_1.ConfigurationTarget.USER:\n                return nls_1.localize('userSettingsTarget', \"User Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                return nls_1.localize('workspaceSettingsTarget', \"Workspace Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                const folder = workspaceContextService.getWorkspaceFolder(resource);\n                return folder ? folder.name : '';\n        }\n        return '';\n    }\n    exports.getSettingsTargetName = getSettingsTargetName;\n    exports.FOLDER_SETTINGS_PATH = '.vscode/settings.json';\n    exports.DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';\n    exports.USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';\n});\n",null]}