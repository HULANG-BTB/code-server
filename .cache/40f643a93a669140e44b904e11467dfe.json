{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/menuPreventer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/menuPreventer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\n/**\n * Prevents the top-level menu from showing up when doing Alt + Click in the editor\n */\nvar MenuPreventer = /** @class */ (function (_super) {\n    tslib_1.__extends(MenuPreventer, _super);\n    function MenuPreventer(editor) {\n        var _this = _super.call(this) || this;\n        _this._editor = editor;\n        _this._altListeningMouse = false;\n        _this._altMouseTriggered = false;\n        // A global crossover handler to prevent menu bar from showing up\n        // When <alt> is hold, we will listen to mouse events and prevent\n        // the release event up <alt> if the mouse is triggered.\n        _this._register(_this._editor.onMouseDown(function (e) {\n            if (_this._altListeningMouse) {\n                _this._altMouseTriggered = true;\n            }\n        }));\n        _this._register(_this._editor.onKeyDown(function (e) {\n            if (e.equals(keyCodes_1.KeyMod.Alt)) {\n                if (!_this._altListeningMouse) {\n                    _this._altMouseTriggered = false;\n                }\n                _this._altListeningMouse = true;\n            }\n        }));\n        _this._register(_this._editor.onKeyUp(function (e) {\n            if (e.equals(keyCodes_1.KeyMod.Alt)) {\n                if (_this._altMouseTriggered) {\n                    e.preventDefault();\n                }\n                _this._altListeningMouse = false;\n                _this._altMouseTriggered = false;\n            }\n        }));\n        return _this;\n    }\n    MenuPreventer.prototype.getId = function () {\n        return MenuPreventer.ID;\n    };\n    MenuPreventer.ID = 'editor.contrib.menuPreventer';\n    return MenuPreventer;\n}(lifecycle_1.Disposable));\nexports.MenuPreventer = MenuPreventer;\neditorExtensions_1.registerEditorContribution(MenuPreventer);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/menuPreventer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/menuPreventer.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oDAAiD;AACjD,sDAAsD;AAEtD,uEAAgF;AAGhF;;GAEG;AACH;IAAmC,yCAAU;IAQ5C,uBAAY,MAAmB;QAA/B,YACC,iBAAO,SAiCP;QAhCA,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAEhC,iEAAiE;QACjE,iEAAiE;QACjE,wDAAwD;QAExD,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAC,CAAC;YACzC,IAAI,KAAI,CAAC,kBAAkB,EAAE;gBAC5B,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAC/B;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAC,CAAC;YACvC,IAAI,CAAC,CAAC,MAAM,CAAC,iBAAM,CAAC,GAAG,CAAC,EAAE;gBACzB,IAAI,CAAC,KAAI,CAAC,kBAAkB,EAAE;oBAC7B,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBAChC;gBACD,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAC/B;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC;YACrC,IAAI,CAAC,CAAC,MAAM,CAAC,iBAAM,CAAC,GAAG,CAAC,EAAE;gBACzB,IAAI,KAAI,CAAC,kBAAkB,EAAE;oBAC5B,CAAC,CAAC,cAAc,EAAE,CAAC;iBACnB;gBACD,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;aAChC;QACF,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAEM,6BAAK,GAAZ;QACC,OAAO,aAAa,CAAC,EAAE,CAAC;IACzB,CAAC;IA5CuB,gBAAE,GAAG,8BAA8B,CAAC;IA6C7D,oBAAC;CAAA,AA/CD,CAAmC,sBAAU,GA+C5C;AA/CY,sCAAa;AAiD1B,6CAA0B,CAAC,aAAa,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\n\n/**\n * Prevents the top-level menu from showing up when doing Alt + Click in the editor\n */\nexport class MenuPreventer extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.menuPreventer';\n\n\tprivate _editor: ICodeEditor;\n\tprivate _altListeningMouse: boolean;\n\tprivate _altMouseTriggered: boolean;\n\n\tconstructor(editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._altListeningMouse = false;\n\t\tthis._altMouseTriggered = false;\n\n\t\t// A global crossover handler to prevent menu bar from showing up\n\t\t// When <alt> is hold, we will listen to mouse events and prevent\n\t\t// the release event up <alt> if the mouse is triggered.\n\n\t\tthis._register(this._editor.onMouseDown((e) => {\n\t\t\tif (this._altListeningMouse) {\n\t\t\t\tthis._altMouseTriggered = true;\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._editor.onKeyDown((e) => {\n\t\t\tif (e.equals(KeyMod.Alt)) {\n\t\t\t\tif (!this._altListeningMouse) {\n\t\t\t\t\tthis._altMouseTriggered = false;\n\t\t\t\t}\n\t\t\t\tthis._altListeningMouse = true;\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._editor.onKeyUp((e) => {\n\t\t\tif (e.equals(KeyMod.Alt)) {\n\t\t\t\tif (this._altMouseTriggered) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\tthis._altListeningMouse = false;\n\t\t\t\tthis._altMouseTriggered = false;\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic getId(): string {\n\t\treturn MenuPreventer.ID;\n\t}\n}\n\nregisterEditorContribution(MenuPreventer);\n"]}]}