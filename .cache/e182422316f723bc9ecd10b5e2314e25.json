{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/registry/common/platform\", \"vs/nls\", \"vs/platform/product/node/product\", \"vs/platform/actions/common/actions\", \"vs/workbench/common/actions\", \"vs/workbench/contrib/issue/electron-browser/issueActions\", \"vs/platform/instantiation/common/extensions\", \"vs/workbench/contrib/issue/electron-browser/issue\", \"vs/workbench/contrib/issue/electron-browser/issueService\", \"vs/platform/commands/common/commands\", \"vs/platform/issue/common/issue\"], function (require, exports, platform_1, nls, product_1, actions_1, actions_2, issueActions_1, extensions_1, issue_1, issueService_1, commands_1, issue_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const helpCategory = nls.localize('help', \"Help\");\n    const workbenchActionsRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    if (!!product_1.default.reportIssueUrl) {\n        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.OpenIssueReporterAction, issueActions_1.OpenIssueReporterAction.ID, issueActions_1.OpenIssueReporterAction.LABEL), 'Help: Open Issue Reporter', helpCategory);\n        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.ReportPerformanceIssueUsingReporterAction, issueActions_1.ReportPerformanceIssueUsingReporterAction.ID, issueActions_1.ReportPerformanceIssueUsingReporterAction.LABEL), 'Help: Report Performance Issue', helpCategory);\n    }\n    const developerCategory = nls.localize('developer', \"Developer\");\n    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.OpenProcessExplorer, issueActions_1.OpenProcessExplorer.ID, issueActions_1.OpenProcessExplorer.LABEL), 'Developer: Open Process Explorer', developerCategory);\n    extensions_1.registerSingleton(issue_1.IWorkbenchIssueService, issueService_1.WorkbenchIssueService, true);\n    commands_1.CommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n        return accessor.get(issue_2.IIssueService).getSystemStatus();\n    });\n});\n",null]}