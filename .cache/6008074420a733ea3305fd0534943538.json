{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/extensions\", \"vs/base/common/event\", \"vs/workbench/services/heap/common/heap\"], function (require, exports, extensions_1, event_1, heap_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class HeapService {\n        constructor() {\n            this._onGarbageCollection = new event_1.Emitter();\n            this.onGarbageCollection = this._onGarbageCollection.event;\n            this._activeSignals = new WeakMap();\n            this._activeIds = new Set();\n            //\n        }\n        dispose() {\n            clearInterval(this._consumeHandle);\n        }\n        trackObject(obj) {\n            if (typeof process === 'undefined' || typeof process.stdout === 'undefined') {\n                return;\n            } // Doesn't work in the browser (for running the extension host in worker).\n            if (!obj) {\n                return;\n            }\n            const ident = obj.$ident;\n            if (typeof ident !== 'number') {\n                return;\n            }\n            if (this._activeIds.has(ident)) {\n                return;\n            }\n            if (this._ctor) {\n                // track and leave\n                this._activeIds.add(ident);\n                this._activeSignals.set(obj, new this._ctor(ident));\n            }\n            else {\n                // make sure to load gc-signals, then track and leave\n                if (!this._ctorInit) {\n                    this._ctorInit = new Promise((resolve_1, reject_1) => { require(['gc-signals'], resolve_1, reject_1); }).then(({ GCSignal, consumeSignals }) => {\n                        this._ctor = GCSignal;\n                        this._consumeHandle = setInterval(() => {\n                            const ids = consumeSignals();\n                            if (ids.length > 0) {\n                                // local book-keeping\n                                for (const id of ids) {\n                                    this._activeIds.delete(id);\n                                }\n                                // fire event\n                                this._onGarbageCollection.fire(ids);\n                            }\n                        }, 15 * 1000);\n                    });\n                }\n                this._ctorInit.then(() => {\n                    this._activeIds.add(ident);\n                    this._activeSignals.set(obj, new this._ctor(ident));\n                });\n            }\n        }\n    }\n    exports.HeapService = HeapService;\n    extensions_1.registerSingleton(heap_1.IHeapService, HeapService, true);\n});\n",null]}