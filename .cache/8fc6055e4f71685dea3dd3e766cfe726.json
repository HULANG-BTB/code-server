{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorDeleteOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorDeleteOperations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar replaceCommand_1 = require(\"vs/editor/common/commands/replaceCommand\");\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar cursorMoveOperations_1 = require(\"vs/editor/common/controller/cursorMoveOperations\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar DeleteOperations = /** @class */ (function () {\n    function DeleteOperations() {\n    }\n    DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\n        var commands = [];\n        var shouldPushStackElementBefore = (prevEditOperationType !== cursorCommon_1.EditOperationType.DeletingRight);\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            var deleteSelection = selection;\n            if (deleteSelection.isEmpty()) {\n                var position = selection.getPosition();\n                var rightOfPosition = cursorMoveOperations_1.MoveOperations.right(config, model, position.lineNumber, position.column);\n                deleteSelection = new range_1.Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n            }\n            if (deleteSelection.isEmpty()) {\n                // Probably at end of file => ignore\n                commands[i] = null;\n                continue;\n            }\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new replaceCommand_1.ReplaceCommand(deleteSelection, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    };\n    DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\n        if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\n            return false;\n        }\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            var position = selection.getPosition();\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            var lineText = model.getLineContent(position.lineNumber);\n            var character = lineText[position.column - 2];\n            if (!config.autoClosingPairsOpen.hasOwnProperty(character)) {\n                return false;\n            }\n            if (cursorCommon_1.isQuote(character)) {\n                if (config.autoClosingQuotes === 'never') {\n                    return false;\n                }\n            }\n            else {\n                if (config.autoClosingBrackets === 'never') {\n                    return false;\n                }\n            }\n            var afterCharacter = lineText[position.column - 1];\n            var closeCharacter = config.autoClosingPairsOpen[character];\n            if (afterCharacter !== closeCharacter) {\n                return false;\n            }\n        }\n        return true;\n    };\n    DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\n        var commands = [];\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var position = selections[i].getPosition();\n            var deleteSelection = new range_1.Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n            commands[i] = new replaceCommand_1.ReplaceCommand(deleteSelection, '');\n        }\n        return [true, commands];\n    };\n    DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\n        if (this._isAutoClosingPairDelete(config, model, selections)) {\n            return this._runAutoClosingPairDelete(config, model, selections);\n        }\n        var commands = [];\n        var shouldPushStackElementBefore = (prevEditOperationType !== cursorCommon_1.EditOperationType.DeletingLeft);\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            var deleteSelection = selection;\n            if (deleteSelection.isEmpty()) {\n                var position = selection.getPosition();\n                if (config.useTabStops && position.column > 1) {\n                    var lineContent = model.getLineContent(position.lineNumber);\n                    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n                    var lastIndentationColumn = (firstNonWhitespaceIndex === -1\n                        ? /* entire string is whitespace */ lineContent.length + 1\n                        : firstNonWhitespaceIndex + 1);\n                    if (position.column <= lastIndentationColumn) {\n                        var fromVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, position);\n                        var toVisibleColumn = cursorCommon_1.CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n                        var toColumn = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n                        deleteSelection = new range_1.Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n                    }\n                    else {\n                        deleteSelection = new range_1.Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n                    }\n                }\n                else {\n                    var leftOfPosition = cursorMoveOperations_1.MoveOperations.left(config, model, position.lineNumber, position.column);\n                    deleteSelection = new range_1.Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\n                }\n            }\n            if (deleteSelection.isEmpty()) {\n                // Probably at beginning of file => ignore\n                commands[i] = null;\n                continue;\n            }\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new replaceCommand_1.ReplaceCommand(deleteSelection, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    };\n    DeleteOperations.cut = function (config, model, selections) {\n        var commands = [];\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            if (selection.isEmpty()) {\n                if (config.emptySelectionClipboard) {\n                    // This is a full line cut\n                    var position = selection.getPosition();\n                    var startLineNumber = void 0, startColumn = void 0, endLineNumber = void 0, endColumn = void 0;\n                    if (position.lineNumber < model.getLineCount()) {\n                        // Cutting a line in the middle of the model\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber + 1;\n                        endColumn = 1;\n                    }\n                    else if (position.lineNumber > 1) {\n                        // Cutting the last line & there are more than 1 lines in the model\n                        startLineNumber = position.lineNumber - 1;\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    else {\n                        // Cutting the single line that the model contains\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    var deleteSelection = new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn);\n                    if (!deleteSelection.isEmpty()) {\n                        commands[i] = new replaceCommand_1.ReplaceCommand(deleteSelection, '');\n                    }\n                    else {\n                        commands[i] = null;\n                    }\n                }\n                else {\n                    // Cannot cut empty selection\n                    commands[i] = null;\n                }\n            }\n            else {\n                commands[i] = new replaceCommand_1.ReplaceCommand(selection, '');\n            }\n        }\n        return new cursorCommon_1.EditOperationResult(cursorCommon_1.EditOperationType.Other, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    };\n    return DeleteOperations;\n}());\nexports.DeleteOperations = DeleteOperations;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorDeleteOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorDeleteOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { ReplaceCommand } from 'vs/editor/common/commands/replaceCommand';\nimport { CursorColumns, CursorConfiguration, EditOperationResult, EditOperationType, ICursorSimpleModel, isQuote } from 'vs/editor/common/controller/cursorCommon';\nimport { MoveOperations } from 'vs/editor/common/controller/cursorMoveOperations';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand } from 'vs/editor/common/editorCommon';\n\nexport class DeleteOperations {\n\n\tpublic static deleteRight(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): [boolean, Array<ICommand | null>] {\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore = (prevEditOperationType !== EditOperationType.DeletingRight);\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tlet deleteSelection: Range = selection;\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\tlet position = selection.getPosition();\n\t\t\t\tlet rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\n\t\t\t\tdeleteSelection = new Range(\n\t\t\t\t\trightOfPosition.lineNumber,\n\t\t\t\t\trightOfPosition.column,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t// Probably at end of file => ignore\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tprivate static _isAutoClosingPairDelete(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): boolean {\n\t\tif (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\t\t\tconst position = selection.getPosition();\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst lineText = model.getLineContent(position.lineNumber);\n\t\t\tconst character = lineText[position.column - 2];\n\n\t\t\tif (!config.autoClosingPairsOpen.hasOwnProperty(character)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (isQuote(character)) {\n\t\t\t\tif (config.autoClosingQuotes === 'never') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (config.autoClosingBrackets === 'never') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst afterCharacter = lineText[position.column - 1];\n\t\t\tconst closeCharacter = config.autoClosingPairsOpen[character];\n\n\t\t\tif (afterCharacter !== closeCharacter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static _runAutoClosingPairDelete(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): [boolean, ICommand[]] {\n\t\tlet commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst position = selections[i].getPosition();\n\t\t\tconst deleteSelection = new Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column - 1,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column + 1\n\t\t\t);\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [true, commands];\n\t}\n\n\tpublic static deleteLeft(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): [boolean, Array<ICommand | null>] {\n\n\t\tif (this._isAutoClosingPairDelete(config, model, selections)) {\n\t\t\treturn this._runAutoClosingPairDelete(config, model, selections);\n\t\t}\n\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore = (prevEditOperationType !== EditOperationType.DeletingLeft);\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tlet deleteSelection: Range = selection;\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\tlet position = selection.getPosition();\n\n\t\t\t\tif (config.useTabStops && position.column > 1) {\n\t\t\t\t\tlet lineContent = model.getLineContent(position.lineNumber);\n\n\t\t\t\t\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\t\t\tlet lastIndentationColumn = (\n\t\t\t\t\t\tfirstNonWhitespaceIndex === -1\n\t\t\t\t\t\t\t? /* entire string is whitespace */lineContent.length + 1\n\t\t\t\t\t\t\t: firstNonWhitespaceIndex + 1\n\t\t\t\t\t);\n\n\t\t\t\t\tif (position.column <= lastIndentationColumn) {\n\t\t\t\t\t\tlet fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n\t\t\t\t\t\tlet toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n\t\t\t\t\t\tlet toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n\t\t\t\t\t\tdeleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\n\t\t\t\t\tdeleteSelection = new Range(\n\t\t\t\t\t\tleftOfPosition.lineNumber,\n\t\t\t\t\t\tleftOfPosition.column,\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t// Probably at beginning of file => ignore\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tpublic static cut(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): EditOperationResult {\n\t\tlet commands: Array<ICommand | null> = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (config.emptySelectionClipboard) {\n\t\t\t\t\t// This is a full line cut\n\n\t\t\t\t\tlet position = selection.getPosition();\n\n\t\t\t\t\tlet startLineNumber: number,\n\t\t\t\t\t\tstartColumn: number,\n\t\t\t\t\t\tendLineNumber: number,\n\t\t\t\t\t\tendColumn: number;\n\n\t\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\t\t// Cutting a line in the middle of the model\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber + 1;\n\t\t\t\t\t\tendColumn = 1;\n\t\t\t\t\t} else if (position.lineNumber > 1) {\n\t\t\t\t\t\t// Cutting the last line & there are more than 1 lines in the model\n\t\t\t\t\t\tstartLineNumber = position.lineNumber - 1;\n\t\t\t\t\t\tstartColumn = model.getLineMaxColumn(position.lineNumber - 1);\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Cutting the single line that the model contains\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet deleteSelection = new Range(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tendColumn\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommands[i] = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Cannot cut empty selection\n\t\t\t\t\tcommands[i] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcommands[i] = new ReplaceCommand(selection, '');\n\t\t\t}\n\t\t}\n\t\treturn new EditOperationResult(EditOperationType.Other, commands, {\n\t\t\tshouldPushStackElementBefore: true,\n\t\t\tshouldPushStackElementAfter: true\n\t\t});\n\t}\n}\n"]}]}