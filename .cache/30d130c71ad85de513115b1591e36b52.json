{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/log/common/log.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/log/common/log.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/lifecycle\", \"vs/base/common/platform\", \"vs/base/common/event\"], function (require, exports, instantiation_1, lifecycle_1, platform_1, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ILogService = instantiation_1.createDecorator('logService');\n    function now() {\n        return new Date().toISOString();\n    }\n    var LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n        LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n        LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n        LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\n        LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n        LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\n        LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n    exports.DEFAULT_LOG_LEVEL = LogLevel.Info;\n    class AbstractLogService extends lifecycle_1.Disposable {\n        constructor() {\n            super(...arguments);\n            this.level = exports.DEFAULT_LOG_LEVEL;\n            this._onDidChangeLogLevel = this._register(new event_1.Emitter());\n            this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n        }\n        setLevel(level) {\n            if (this.level !== level) {\n                this.level = level;\n                this._onDidChangeLogLevel.fire(this.level);\n            }\n        }\n        getLevel() {\n            return this.level;\n        }\n    }\n    exports.AbstractLogService = AbstractLogService;\n    class ConsoleLogMainService extends AbstractLogService {\n        constructor(logLevel = exports.DEFAULT_LOG_LEVEL) {\n            super();\n            this.setLevel(logLevel);\n            this.useColors = !platform_1.isWindows;\n        }\n        trace(message, ...args) {\n            if (this.getLevel() <= LogLevel.Trace) {\n                if (this.useColors) {\n                    console.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.log(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        debug(message, ...args) {\n            if (this.getLevel() <= LogLevel.Debug) {\n                if (this.useColors) {\n                    console.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.log(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        info(message, ...args) {\n            if (this.getLevel() <= LogLevel.Info) {\n                if (this.useColors) {\n                    console.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.log(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        warn(message, ...args) {\n            if (this.getLevel() <= LogLevel.Warning) {\n                if (this.useColors) {\n                    console.warn(`\\x1b[93m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.warn(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        error(message, ...args) {\n            if (this.getLevel() <= LogLevel.Error) {\n                if (this.useColors) {\n                    console.error(`\\x1b[91m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.error(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        critical(message, ...args) {\n            if (this.getLevel() <= LogLevel.Critical) {\n                if (this.useColors) {\n                    console.error(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n                }\n                else {\n                    console.error(`[main ${now()}]`, message, ...args);\n                }\n            }\n        }\n        dispose() {\n            // noop\n        }\n    }\n    exports.ConsoleLogMainService = ConsoleLogMainService;\n    class ConsoleLogService extends AbstractLogService {\n        constructor(logLevel = exports.DEFAULT_LOG_LEVEL) {\n            super();\n            this.setLevel(logLevel);\n        }\n        trace(message, ...args) {\n            if (this.getLevel() <= LogLevel.Trace) {\n                console.log('%cTRACE', 'color: #888', message, ...args);\n            }\n        }\n        debug(message, ...args) {\n            if (this.getLevel() <= LogLevel.Debug) {\n                console.log('%cDEBUG', 'background: #eee; color: #888', message, ...args);\n            }\n        }\n        info(message, ...args) {\n            if (this.getLevel() <= LogLevel.Info) {\n                console.log('%c INFO', 'color: #33f', message, ...args);\n            }\n        }\n        warn(message, ...args) {\n            if (this.getLevel() <= LogLevel.Warning) {\n                console.log('%c WARN', 'color: #993', message, ...args);\n            }\n        }\n        error(message, ...args) {\n            if (this.getLevel() <= LogLevel.Error) {\n                console.log('%c  ERR', 'color: #f33', message, ...args);\n            }\n        }\n        critical(message, ...args) {\n            if (this.getLevel() <= LogLevel.Critical) {\n                console.log('%cCRITI', 'background: #f33; color: white', message, ...args);\n            }\n        }\n        dispose() { }\n    }\n    exports.ConsoleLogService = ConsoleLogService;\n    class MultiplexLogService extends AbstractLogService {\n        constructor(logServices) {\n            super();\n            this.logServices = logServices;\n            if (logServices.length) {\n                this.setLevel(logServices[0].getLevel());\n            }\n        }\n        setLevel(level) {\n            for (const logService of this.logServices) {\n                logService.setLevel(level);\n            }\n            super.setLevel(level);\n        }\n        trace(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.trace(message, ...args);\n            }\n        }\n        debug(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.debug(message, ...args);\n            }\n        }\n        info(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.info(message, ...args);\n            }\n        }\n        warn(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.warn(message, ...args);\n            }\n        }\n        error(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.error(message, ...args);\n            }\n        }\n        critical(message, ...args) {\n            for (const logService of this.logServices) {\n                logService.critical(message, ...args);\n            }\n        }\n        dispose() {\n            for (const logService of this.logServices) {\n                logService.dispose();\n            }\n        }\n    }\n    exports.MultiplexLogService = MultiplexLogService;\n    class DelegatedLogService extends lifecycle_1.Disposable {\n        constructor(logService) {\n            super();\n            this.logService = logService;\n            this._register(logService);\n        }\n        get onDidChangeLogLevel() {\n            return this.logService.onDidChangeLogLevel;\n        }\n        setLevel(level) {\n            this.logService.setLevel(level);\n        }\n        getLevel() {\n            return this.logService.getLevel();\n        }\n        trace(message, ...args) {\n            this.logService.trace(message, ...args);\n        }\n        debug(message, ...args) {\n            this.logService.debug(message, ...args);\n        }\n        info(message, ...args) {\n            this.logService.info(message, ...args);\n        }\n        warn(message, ...args) {\n            this.logService.warn(message, ...args);\n        }\n        error(message, ...args) {\n            this.logService.error(message, ...args);\n        }\n        critical(message, ...args) {\n            this.logService.critical(message, ...args);\n        }\n    }\n    exports.DelegatedLogService = DelegatedLogService;\n    class NullLogService {\n        constructor() {\n            this.onDidChangeLogLevel = new event_1.Emitter().event;\n        }\n        setLevel(level) { }\n        getLevel() { return LogLevel.Info; }\n        trace(message, ...args) { }\n        debug(message, ...args) { }\n        info(message, ...args) { }\n        warn(message, ...args) { }\n        error(message, ...args) { }\n        critical(message, ...args) { }\n        dispose() { }\n    }\n    exports.NullLogService = NullLogService;\n    function getLogLevel(environmentService) {\n        if (environmentService.verbose) {\n            return LogLevel.Trace;\n        }\n        if (typeof environmentService.args.log === 'string') {\n            const logLevel = environmentService.args.log.toLowerCase();\n            switch (logLevel) {\n                case 'trace':\n                    return LogLevel.Trace;\n                case 'debug':\n                    return LogLevel.Debug;\n                case 'info':\n                    return LogLevel.Info;\n                case 'warn':\n                    return LogLevel.Warning;\n                case 'error':\n                    return LogLevel.Error;\n                case 'critical':\n                    return LogLevel.Critical;\n                case 'off':\n                    return LogLevel.Off;\n            }\n        }\n        return exports.DEFAULT_LOG_LEVEL;\n    }\n    exports.getLogLevel = getLogLevel;\n});\n",null]}