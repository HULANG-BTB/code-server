{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar issue_1 = require(\"vs/platform/issue/common/issue\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar electron_1 = require(\"electron\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar WorkbenchIssueService = /** @class */ (function () {\n    function WorkbenchIssueService(issueService, themeService, extensionManagementService, extensionEnablementService, windowService) {\n        this.issueService = issueService;\n        this.themeService = themeService;\n        this.extensionManagementService = extensionManagementService;\n        this.extensionEnablementService = extensionEnablementService;\n        this.windowService = windowService;\n    }\n    WorkbenchIssueService.prototype.openReporter = function (dataOverrides) {\n        var _this = this;\n        if (dataOverrides === void 0) { dataOverrides = {}; }\n        return this.extensionManagementService.getInstalled(extensions_1.ExtensionType.User).then(function (extensions) {\n            var enabledExtensions = extensions.filter(function (extension) { return _this.extensionEnablementService.isEnabled(extension); });\n            var extensionData = enabledExtensions.map(function (extension) {\n                var manifest = extension.manifest;\n                var manifestKeys = manifest.contributes ? Object.keys(manifest.contributes) : [];\n                var isTheme = !manifest.activationEvents && manifestKeys.length === 1 && manifestKeys[0] === 'themes';\n                return {\n                    name: manifest.name,\n                    publisher: manifest.publisher,\n                    version: manifest.version,\n                    repositoryUrl: manifest.repository && manifest.repository.url,\n                    bugsUrl: manifest.bugs && manifest.bugs.url,\n                    displayName: manifest.displayName,\n                    id: extension.identifier.id,\n                    isTheme: isTheme\n                };\n            });\n            var theme = _this.themeService.getTheme();\n            var issueReporterData = objects_1.assign({\n                styles: getIssueReporterStyles(theme),\n                zoomLevel: electron_1.webFrame.getZoomLevel(),\n                enabledExtensions: extensionData\n            }, dataOverrides);\n            return _this.issueService.openReporter(issueReporterData);\n        });\n    };\n    WorkbenchIssueService.prototype.openProcessExplorer = function () {\n        var theme = this.themeService.getTheme();\n        var data = {\n            pid: this.windowService.getConfiguration().mainPid,\n            zoomLevel: electron_1.webFrame.getZoomLevel(),\n            styles: {\n                backgroundColor: getColor(theme, colorRegistry_1.editorBackground),\n                color: getColor(theme, colorRegistry_1.editorForeground),\n                hoverBackground: getColor(theme, colorRegistry_1.listHoverBackground),\n                hoverForeground: getColor(theme, colorRegistry_1.listHoverForeground),\n                highlightForeground: getColor(theme, colorRegistry_1.listHighlightForeground),\n            }\n        };\n        return this.issueService.openProcessExplorer(data);\n    };\n    WorkbenchIssueService = tslib_1.__decorate([\n        tslib_1.__param(0, issue_1.IIssueService),\n        tslib_1.__param(1, themeService_1.IThemeService),\n        tslib_1.__param(2, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(3, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(4, windows_1.IWindowService)\n    ], WorkbenchIssueService);\n    return WorkbenchIssueService;\n}());\nexports.WorkbenchIssueService = WorkbenchIssueService;\nfunction getIssueReporterStyles(theme) {\n    return {\n        backgroundColor: getColor(theme, theme_1.SIDE_BAR_BACKGROUND),\n        color: getColor(theme, colorRegistry_1.foreground),\n        textLinkColor: getColor(theme, colorRegistry_1.textLinkForeground),\n        textLinkActiveForeground: getColor(theme, colorRegistry_1.textLinkActiveForeground),\n        inputBackground: getColor(theme, colorRegistry_1.inputBackground),\n        inputForeground: getColor(theme, colorRegistry_1.inputForeground),\n        inputBorder: getColor(theme, colorRegistry_1.inputBorder),\n        inputActiveBorder: getColor(theme, colorRegistry_1.inputActiveOptionBorder),\n        inputErrorBorder: getColor(theme, colorRegistry_1.inputValidationErrorBorder),\n        buttonBackground: getColor(theme, colorRegistry_1.buttonBackground),\n        buttonForeground: getColor(theme, colorRegistry_1.buttonForeground),\n        buttonHoverBackground: getColor(theme, colorRegistry_1.buttonHoverBackground),\n        sliderActiveColor: getColor(theme, colorRegistry_1.scrollbarSliderActiveBackground),\n        sliderBackgroundColor: getColor(theme, colorRegistry_1.scrollbarSliderBackground),\n        sliderHoverColor: getColor(theme, colorRegistry_1.scrollbarSliderHoverBackground),\n    };\n}\nexports.getIssueReporterStyles = getIssueReporterStyles;\nfunction getColor(theme, key) {\n    var color = theme.getColor(key);\n    return color ? color.toString() : undefined;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IssueReporterStyles, IIssueService, IssueReporterData, ProcessExplorerData, IssueReporterExtensionData } from 'vs/platform/issue/common/issue';\nimport { ITheme, IThemeService } from 'vs/platform/theme/common/themeService';\nimport { textLinkForeground, inputBackground, inputBorder, inputForeground, buttonBackground, buttonHoverBackground, buttonForeground, inputValidationErrorBorder, foreground, inputActiveOptionBorder, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground, editorBackground, editorForeground, listHoverBackground, listHoverForeground, listHighlightForeground, textLinkActiveForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { SIDE_BAR_BACKGROUND } from 'vs/workbench/common/theme';\nimport { IExtensionManagementService, IExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { webFrame } from 'electron';\nimport { assign } from 'vs/base/common/objects';\nimport { IWorkbenchIssueService } from 'vs/workbench/contrib/issue/electron-browser/issue';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\n\nexport class WorkbenchIssueService implements IWorkbenchIssueService {\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IIssueService private readonly issueService: IIssueService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionEnablementService private readonly extensionEnablementService: IExtensionEnablementService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) { }\n\n\topenReporter(dataOverrides: Partial<IssueReporterData> = {}): Promise<void> {\n\t\treturn this.extensionManagementService.getInstalled(ExtensionType.User).then(extensions => {\n\t\t\tconst enabledExtensions = extensions.filter(extension => this.extensionEnablementService.isEnabled(extension));\n\t\t\tconst extensionData: IssueReporterExtensionData[] = enabledExtensions.map(extension => {\n\t\t\t\tconst { manifest } = extension;\n\t\t\t\tconst manifestKeys = manifest.contributes ? Object.keys(manifest.contributes) : [];\n\t\t\t\tconst isTheme = !manifest.activationEvents && manifestKeys.length === 1 && manifestKeys[0] === 'themes';\n\n\t\t\t\treturn {\n\t\t\t\t\tname: manifest.name,\n\t\t\t\t\tpublisher: manifest.publisher,\n\t\t\t\t\tversion: manifest.version,\n\t\t\t\t\trepositoryUrl: manifest.repository && manifest.repository.url,\n\t\t\t\t\tbugsUrl: manifest.bugs && manifest.bugs.url,\n\t\t\t\t\tdisplayName: manifest.displayName,\n\t\t\t\t\tid: extension.identifier.id,\n\t\t\t\t\tisTheme: isTheme\n\t\t\t\t};\n\t\t\t});\n\t\t\tconst theme = this.themeService.getTheme();\n\t\t\tconst issueReporterData: IssueReporterData = assign(\n\t\t\t\t{\n\t\t\t\t\tstyles: getIssueReporterStyles(theme),\n\t\t\t\t\tzoomLevel: webFrame.getZoomLevel(),\n\t\t\t\t\tenabledExtensions: extensionData\n\t\t\t\t},\n\t\t\t\tdataOverrides);\n\n\t\t\treturn this.issueService.openReporter(issueReporterData);\n\t\t});\n\t}\n\n\topenProcessExplorer(): Promise<void> {\n\t\tconst theme = this.themeService.getTheme();\n\t\tconst data: ProcessExplorerData = {\n\t\t\tpid: this.windowService.getConfiguration().mainPid,\n\t\t\tzoomLevel: webFrame.getZoomLevel(),\n\t\t\tstyles: {\n\t\t\t\tbackgroundColor: getColor(theme, editorBackground),\n\t\t\t\tcolor: getColor(theme, editorForeground),\n\t\t\t\thoverBackground: getColor(theme, listHoverBackground),\n\t\t\t\thoverForeground: getColor(theme, listHoverForeground),\n\t\t\t\thighlightForeground: getColor(theme, listHighlightForeground),\n\t\t\t}\n\t\t};\n\t\treturn this.issueService.openProcessExplorer(data);\n\t}\n}\n\nexport function getIssueReporterStyles(theme: ITheme): IssueReporterStyles {\n\treturn {\n\t\tbackgroundColor: getColor(theme, SIDE_BAR_BACKGROUND),\n\t\tcolor: getColor(theme, foreground),\n\t\ttextLinkColor: getColor(theme, textLinkForeground),\n\t\ttextLinkActiveForeground: getColor(theme, textLinkActiveForeground),\n\t\tinputBackground: getColor(theme, inputBackground),\n\t\tinputForeground: getColor(theme, inputForeground),\n\t\tinputBorder: getColor(theme, inputBorder),\n\t\tinputActiveBorder: getColor(theme, inputActiveOptionBorder),\n\t\tinputErrorBorder: getColor(theme, inputValidationErrorBorder),\n\t\tbuttonBackground: getColor(theme, buttonBackground),\n\t\tbuttonForeground: getColor(theme, buttonForeground),\n\t\tbuttonHoverBackground: getColor(theme, buttonHoverBackground),\n\t\tsliderActiveColor: getColor(theme, scrollbarSliderActiveBackground),\n\t\tsliderBackgroundColor: getColor(theme, scrollbarSliderBackground),\n\t\tsliderHoverColor: getColor(theme, scrollbarSliderHoverBackground),\n\t};\n}\n\nfunction getColor(theme: ITheme, key: string): string | undefined {\n\tconst color = theme.getColor(key);\n\treturn color ? color.toString() : undefined;\n}\n"]}]}