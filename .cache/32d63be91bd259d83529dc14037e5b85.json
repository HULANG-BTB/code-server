{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar FindOptionOverride;\n(function (FindOptionOverride) {\n    FindOptionOverride[FindOptionOverride[\"NotSet\"] = 0] = \"NotSet\";\n    FindOptionOverride[FindOptionOverride[\"True\"] = 1] = \"True\";\n    FindOptionOverride[FindOptionOverride[\"False\"] = 2] = \"False\";\n})(FindOptionOverride = exports.FindOptionOverride || (exports.FindOptionOverride = {}));\nfunction effectiveOptionValue(override, value) {\n    if (override === FindOptionOverride.True) {\n        return true;\n    }\n    if (override === FindOptionOverride.False) {\n        return false;\n    }\n    return value;\n}\nvar FindReplaceState = /** @class */ (function () {\n    function FindReplaceState() {\n        this._searchString = '';\n        this._replaceString = '';\n        this._isRevealed = false;\n        this._isReplaceRevealed = false;\n        this._isRegex = false;\n        this._isRegexOverride = FindOptionOverride.NotSet;\n        this._wholeWord = false;\n        this._wholeWordOverride = FindOptionOverride.NotSet;\n        this._matchCase = false;\n        this._matchCaseOverride = FindOptionOverride.NotSet;\n        this._searchScope = null;\n        this._matchesPosition = 0;\n        this._matchesCount = 0;\n        this._currentMatch = null;\n        this._onFindReplaceStateChange = new event_1.Emitter();\n    }\n    Object.defineProperty(FindReplaceState.prototype, \"searchString\", {\n        get: function () { return this._searchString; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"replaceString\", {\n        get: function () { return this._replaceString; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"isRevealed\", {\n        get: function () { return this._isRevealed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"isReplaceRevealed\", {\n        get: function () { return this._isReplaceRevealed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"isRegex\", {\n        get: function () { return effectiveOptionValue(this._isRegexOverride, this._isRegex); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"wholeWord\", {\n        get: function () { return effectiveOptionValue(this._wholeWordOverride, this._wholeWord); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"matchCase\", {\n        get: function () { return effectiveOptionValue(this._matchCaseOverride, this._matchCase); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"actualIsRegex\", {\n        get: function () { return this._isRegex; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"actualWholeWord\", {\n        get: function () { return this._wholeWord; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"actualMatchCase\", {\n        get: function () { return this._matchCase; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"searchScope\", {\n        get: function () { return this._searchScope; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"matchesPosition\", {\n        get: function () { return this._matchesPosition; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"matchesCount\", {\n        get: function () { return this._matchesCount; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"currentMatch\", {\n        get: function () { return this._currentMatch; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindReplaceState.prototype, \"onFindReplaceStateChange\", {\n        get: function () { return this._onFindReplaceStateChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    FindReplaceState.prototype.dispose = function () {\n    };\n    FindReplaceState.prototype.changeMatchInfo = function (matchesPosition, matchesCount, currentMatch) {\n        var changeEvent = {\n            moveCursor: false,\n            updateHistory: false,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false\n        };\n        var somethingChanged = false;\n        if (matchesCount === 0) {\n            matchesPosition = 0;\n        }\n        if (matchesPosition > matchesCount) {\n            matchesPosition = matchesCount;\n        }\n        if (this._matchesPosition !== matchesPosition) {\n            this._matchesPosition = matchesPosition;\n            changeEvent.matchesPosition = true;\n            somethingChanged = true;\n        }\n        if (this._matchesCount !== matchesCount) {\n            this._matchesCount = matchesCount;\n            changeEvent.matchesCount = true;\n            somethingChanged = true;\n        }\n        if (typeof currentMatch !== 'undefined') {\n            if (!range_1.Range.equalsRange(this._currentMatch, currentMatch)) {\n                this._currentMatch = currentMatch;\n                changeEvent.currentMatch = true;\n                somethingChanged = true;\n            }\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    };\n    FindReplaceState.prototype.change = function (newState, moveCursor, updateHistory) {\n        if (updateHistory === void 0) { updateHistory = true; }\n        var changeEvent = {\n            moveCursor: moveCursor,\n            updateHistory: updateHistory,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false\n        };\n        var somethingChanged = false;\n        var oldEffectiveIsRegex = this.isRegex;\n        var oldEffectiveWholeWords = this.wholeWord;\n        var oldEffectiveMatchCase = this.matchCase;\n        if (typeof newState.searchString !== 'undefined') {\n            if (this._searchString !== newState.searchString) {\n                this._searchString = newState.searchString;\n                changeEvent.searchString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.replaceString !== 'undefined') {\n            if (this._replaceString !== newState.replaceString) {\n                this._replaceString = newState.replaceString;\n                changeEvent.replaceString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRevealed !== 'undefined') {\n            if (this._isRevealed !== newState.isRevealed) {\n                this._isRevealed = newState.isRevealed;\n                changeEvent.isRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isReplaceRevealed !== 'undefined') {\n            if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n                this._isReplaceRevealed = newState.isReplaceRevealed;\n                changeEvent.isReplaceRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRegex !== 'undefined') {\n            this._isRegex = newState.isRegex;\n        }\n        if (typeof newState.wholeWord !== 'undefined') {\n            this._wholeWord = newState.wholeWord;\n        }\n        if (typeof newState.matchCase !== 'undefined') {\n            this._matchCase = newState.matchCase;\n        }\n        if (typeof newState.searchScope !== 'undefined') {\n            if (!range_1.Range.equalsRange(this._searchScope, newState.searchScope)) {\n                this._searchScope = newState.searchScope;\n                changeEvent.searchScope = true;\n                somethingChanged = true;\n            }\n        }\n        // Overrides get set when they explicitly come in and get reset anytime something else changes\n        this._isRegexOverride = (typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : FindOptionOverride.NotSet);\n        this._wholeWordOverride = (typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : FindOptionOverride.NotSet);\n        this._matchCaseOverride = (typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : FindOptionOverride.NotSet);\n        if (oldEffectiveIsRegex !== this.isRegex) {\n            somethingChanged = true;\n            changeEvent.isRegex = true;\n        }\n        if (oldEffectiveWholeWords !== this.wholeWord) {\n            somethingChanged = true;\n            changeEvent.wholeWord = true;\n        }\n        if (oldEffectiveMatchCase !== this.matchCase) {\n            somethingChanged = true;\n            changeEvent.matchCase = true;\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    };\n    return FindReplaceState;\n}());\nexports.FindReplaceState = FindReplaceState;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findState.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Range } from 'vs/editor/common/core/range';\n\nexport interface FindReplaceStateChangedEvent {\n\tmoveCursor: boolean;\n\tupdateHistory: boolean;\n\n\tsearchString: boolean;\n\treplaceString: boolean;\n\tisRevealed: boolean;\n\tisReplaceRevealed: boolean;\n\tisRegex: boolean;\n\twholeWord: boolean;\n\tmatchCase: boolean;\n\tsearchScope: boolean;\n\tmatchesPosition: boolean;\n\tmatchesCount: boolean;\n\tcurrentMatch: boolean;\n}\n\nexport const enum FindOptionOverride {\n\tNotSet = 0,\n\tTrue = 1,\n\tFalse = 2\n}\n\nexport interface INewFindReplaceState {\n\tsearchString?: string;\n\treplaceString?: string;\n\tisRevealed?: boolean;\n\tisReplaceRevealed?: boolean;\n\tisRegex?: boolean;\n\tisRegexOverride?: FindOptionOverride;\n\twholeWord?: boolean;\n\twholeWordOverride?: FindOptionOverride;\n\tmatchCase?: boolean;\n\tmatchCaseOverride?: FindOptionOverride;\n\tsearchScope?: Range | null;\n}\n\nfunction effectiveOptionValue(override: FindOptionOverride, value: boolean): boolean {\n\tif (override === FindOptionOverride.True) {\n\t\treturn true;\n\t}\n\tif (override === FindOptionOverride.False) {\n\t\treturn false;\n\t}\n\treturn value;\n}\n\nexport class FindReplaceState implements IDisposable {\n\tprivate _searchString: string;\n\tprivate _replaceString: string;\n\tprivate _isRevealed: boolean;\n\tprivate _isReplaceRevealed: boolean;\n\tprivate _isRegex: boolean;\n\tprivate _isRegexOverride: FindOptionOverride;\n\tprivate _wholeWord: boolean;\n\tprivate _wholeWordOverride: FindOptionOverride;\n\tprivate _matchCase: boolean;\n\tprivate _matchCaseOverride: FindOptionOverride;\n\tprivate _searchScope: Range | null;\n\tprivate _matchesPosition: number;\n\tprivate _matchesCount: number;\n\tprivate _currentMatch: Range | null;\n\tprivate readonly _onFindReplaceStateChange: Emitter<FindReplaceStateChangedEvent>;\n\n\tpublic get searchString(): string { return this._searchString; }\n\tpublic get replaceString(): string { return this._replaceString; }\n\tpublic get isRevealed(): boolean { return this._isRevealed; }\n\tpublic get isReplaceRevealed(): boolean { return this._isReplaceRevealed; }\n\tpublic get isRegex(): boolean { return effectiveOptionValue(this._isRegexOverride, this._isRegex); }\n\tpublic get wholeWord(): boolean { return effectiveOptionValue(this._wholeWordOverride, this._wholeWord); }\n\tpublic get matchCase(): boolean { return effectiveOptionValue(this._matchCaseOverride, this._matchCase); }\n\n\tpublic get actualIsRegex(): boolean { return this._isRegex; }\n\tpublic get actualWholeWord(): boolean { return this._wholeWord; }\n\tpublic get actualMatchCase(): boolean { return this._matchCase; }\n\n\tpublic get searchScope(): Range | null { return this._searchScope; }\n\tpublic get matchesPosition(): number { return this._matchesPosition; }\n\tpublic get matchesCount(): number { return this._matchesCount; }\n\tpublic get currentMatch(): Range | null { return this._currentMatch; }\n\tpublic get onFindReplaceStateChange(): Event<FindReplaceStateChangedEvent> { return this._onFindReplaceStateChange.event; }\n\n\tconstructor() {\n\t\tthis._searchString = '';\n\t\tthis._replaceString = '';\n\t\tthis._isRevealed = false;\n\t\tthis._isReplaceRevealed = false;\n\t\tthis._isRegex = false;\n\t\tthis._isRegexOverride = FindOptionOverride.NotSet;\n\t\tthis._wholeWord = false;\n\t\tthis._wholeWordOverride = FindOptionOverride.NotSet;\n\t\tthis._matchCase = false;\n\t\tthis._matchCaseOverride = FindOptionOverride.NotSet;\n\t\tthis._searchScope = null;\n\t\tthis._matchesPosition = 0;\n\t\tthis._matchesCount = 0;\n\t\tthis._currentMatch = null;\n\t\tthis._onFindReplaceStateChange = new Emitter<FindReplaceStateChangedEvent>();\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic changeMatchInfo(matchesPosition: number, matchesCount: number, currentMatch: Range | undefined): void {\n\t\tlet changeEvent: FindReplaceStateChangedEvent = {\n\t\t\tmoveCursor: false,\n\t\t\tupdateHistory: false,\n\t\t\tsearchString: false,\n\t\t\treplaceString: false,\n\t\t\tisRevealed: false,\n\t\t\tisReplaceRevealed: false,\n\t\t\tisRegex: false,\n\t\t\twholeWord: false,\n\t\t\tmatchCase: false,\n\t\t\tsearchScope: false,\n\t\t\tmatchesPosition: false,\n\t\t\tmatchesCount: false,\n\t\t\tcurrentMatch: false\n\t\t};\n\t\tlet somethingChanged = false;\n\n\t\tif (matchesCount === 0) {\n\t\t\tmatchesPosition = 0;\n\t\t}\n\t\tif (matchesPosition > matchesCount) {\n\t\t\tmatchesPosition = matchesCount;\n\t\t}\n\n\t\tif (this._matchesPosition !== matchesPosition) {\n\t\t\tthis._matchesPosition = matchesPosition;\n\t\t\tchangeEvent.matchesPosition = true;\n\t\t\tsomethingChanged = true;\n\t\t}\n\t\tif (this._matchesCount !== matchesCount) {\n\t\t\tthis._matchesCount = matchesCount;\n\t\t\tchangeEvent.matchesCount = true;\n\t\t\tsomethingChanged = true;\n\t\t}\n\n\t\tif (typeof currentMatch !== 'undefined') {\n\t\t\tif (!Range.equalsRange(this._currentMatch, currentMatch)) {\n\t\t\t\tthis._currentMatch = currentMatch;\n\t\t\t\tchangeEvent.currentMatch = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (somethingChanged) {\n\t\t\tthis._onFindReplaceStateChange.fire(changeEvent);\n\t\t}\n\t}\n\n\tpublic change(newState: INewFindReplaceState, moveCursor: boolean, updateHistory: boolean = true): void {\n\t\tlet changeEvent: FindReplaceStateChangedEvent = {\n\t\t\tmoveCursor: moveCursor,\n\t\t\tupdateHistory: updateHistory,\n\t\t\tsearchString: false,\n\t\t\treplaceString: false,\n\t\t\tisRevealed: false,\n\t\t\tisReplaceRevealed: false,\n\t\t\tisRegex: false,\n\t\t\twholeWord: false,\n\t\t\tmatchCase: false,\n\t\t\tsearchScope: false,\n\t\t\tmatchesPosition: false,\n\t\t\tmatchesCount: false,\n\t\t\tcurrentMatch: false\n\t\t};\n\t\tlet somethingChanged = false;\n\n\t\tconst oldEffectiveIsRegex = this.isRegex;\n\t\tconst oldEffectiveWholeWords = this.wholeWord;\n\t\tconst oldEffectiveMatchCase = this.matchCase;\n\n\t\tif (typeof newState.searchString !== 'undefined') {\n\t\t\tif (this._searchString !== newState.searchString) {\n\t\t\t\tthis._searchString = newState.searchString;\n\t\t\t\tchangeEvent.searchString = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (typeof newState.replaceString !== 'undefined') {\n\t\t\tif (this._replaceString !== newState.replaceString) {\n\t\t\t\tthis._replaceString = newState.replaceString;\n\t\t\t\tchangeEvent.replaceString = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (typeof newState.isRevealed !== 'undefined') {\n\t\t\tif (this._isRevealed !== newState.isRevealed) {\n\t\t\t\tthis._isRevealed = newState.isRevealed;\n\t\t\t\tchangeEvent.isRevealed = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (typeof newState.isReplaceRevealed !== 'undefined') {\n\t\t\tif (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n\t\t\t\tthis._isReplaceRevealed = newState.isReplaceRevealed;\n\t\t\t\tchangeEvent.isReplaceRevealed = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (typeof newState.isRegex !== 'undefined') {\n\t\t\tthis._isRegex = newState.isRegex;\n\t\t}\n\t\tif (typeof newState.wholeWord !== 'undefined') {\n\t\t\tthis._wholeWord = newState.wholeWord;\n\t\t}\n\t\tif (typeof newState.matchCase !== 'undefined') {\n\t\t\tthis._matchCase = newState.matchCase;\n\t\t}\n\t\tif (typeof newState.searchScope !== 'undefined') {\n\t\t\tif (!Range.equalsRange(this._searchScope, newState.searchScope)) {\n\t\t\t\tthis._searchScope = newState.searchScope;\n\t\t\t\tchangeEvent.searchScope = true;\n\t\t\t\tsomethingChanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Overrides get set when they explicitly come in and get reset anytime something else changes\n\t\tthis._isRegexOverride = (typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : FindOptionOverride.NotSet);\n\t\tthis._wholeWordOverride = (typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : FindOptionOverride.NotSet);\n\t\tthis._matchCaseOverride = (typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : FindOptionOverride.NotSet);\n\n\t\tif (oldEffectiveIsRegex !== this.isRegex) {\n\t\t\tsomethingChanged = true;\n\t\t\tchangeEvent.isRegex = true;\n\t\t}\n\t\tif (oldEffectiveWholeWords !== this.wholeWord) {\n\t\t\tsomethingChanged = true;\n\t\t\tchangeEvent.wholeWord = true;\n\t\t}\n\t\tif (oldEffectiveMatchCase !== this.matchCase) {\n\t\t\tsomethingChanged = true;\n\t\t\tchangeEvent.matchCase = true;\n\t\t}\n\n\t\tif (somethingChanged) {\n\t\t\tthis._onFindReplaceStateChange.fire(changeEvent);\n\t\t}\n\t}\n}\n"]}]}