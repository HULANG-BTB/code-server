{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalProcessExtHostProxy.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalProcessExtHostProxy.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/workbench/contrib/terminal/common/terminal\", \"vs/workbench/services/extensions/common/extensions\"], function (require, exports, event_1, terminal_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TerminalProcessExtHostProxy = class TerminalProcessExtHostProxy {\n        constructor(terminalId, shellLaunchConfig, activeWorkspaceRootUri, cols, rows, _terminalService, _extensionService) {\n            this.terminalId = terminalId;\n            this._terminalService = _terminalService;\n            this._extensionService = _extensionService;\n            this._disposables = [];\n            this._onProcessData = new event_1.Emitter();\n            this._onProcessExit = new event_1.Emitter();\n            this._onProcessIdReady = new event_1.Emitter();\n            this._onProcessTitleChanged = new event_1.Emitter();\n            this._onInput = new event_1.Emitter();\n            this._onResize = new event_1.Emitter();\n            this._onShutdown = new event_1.Emitter();\n            this._onRequestInitialCwd = new event_1.Emitter();\n            this._onRequestCwd = new event_1.Emitter();\n            this._onRequestLatency = new event_1.Emitter();\n            this._pendingInitialCwdRequests = [];\n            this._pendingCwdRequests = [];\n            this._pendingLatencyRequests = [];\n            this._extensionService.whenInstalledExtensionsRegistered().then(() => {\n                // TODO: MainThreadTerminalService is not ready at this point, fix this\n                setTimeout(() => {\n                    this._terminalService.requestExtHostProcess(this, shellLaunchConfig, activeWorkspaceRootUri, cols, rows);\n                }, 0);\n            });\n        }\n        get onProcessData() { return this._onProcessData.event; }\n        get onProcessExit() { return this._onProcessExit.event; }\n        get onProcessIdReady() { return this._onProcessIdReady.event; }\n        get onProcessTitleChanged() { return this._onProcessTitleChanged.event; }\n        get onInput() { return this._onInput.event; }\n        get onResize() { return this._onResize.event; }\n        get onShutdown() { return this._onShutdown.event; }\n        get onRequestInitialCwd() { return this._onRequestInitialCwd.event; }\n        get onRequestCwd() { return this._onRequestCwd.event; }\n        get onRequestLatency() { return this._onRequestLatency.event; }\n        dispose() {\n            this._disposables.forEach(d => d.dispose());\n            this._disposables.length = 0;\n        }\n        emitData(data) {\n            this._onProcessData.fire(data);\n        }\n        emitTitle(title) {\n            this._onProcessTitleChanged.fire(title);\n        }\n        emitPid(pid) {\n            this._onProcessIdReady.fire(pid);\n        }\n        emitExit(exitCode) {\n            this._onProcessExit.fire(exitCode);\n            this.dispose();\n        }\n        emitInitialCwd(initialCwd) {\n            while (this._pendingInitialCwdRequests.length > 0) {\n                this._pendingInitialCwdRequests.pop()(initialCwd);\n            }\n        }\n        emitCwd(cwd) {\n            while (this._pendingCwdRequests.length > 0) {\n                this._pendingCwdRequests.pop()(cwd);\n            }\n        }\n        emitLatency(latency) {\n            while (this._pendingLatencyRequests.length > 0) {\n                this._pendingLatencyRequests.pop()(latency);\n            }\n        }\n        shutdown(immediate) {\n            this._onShutdown.fire(immediate);\n        }\n        input(data) {\n            this._onInput.fire(data);\n        }\n        resize(cols, rows) {\n            this._onResize.fire({ cols, rows });\n        }\n        getInitialCwd() {\n            return new Promise(resolve => {\n                this._onRequestInitialCwd.fire();\n                this._pendingInitialCwdRequests.push(resolve);\n            });\n        }\n        getCwd() {\n            return new Promise(resolve => {\n                this._onRequestCwd.fire();\n                this._pendingCwdRequests.push(resolve);\n            });\n        }\n        getLatency() {\n            return new Promise(resolve => {\n                this._onRequestLatency.fire();\n                this._pendingLatencyRequests.push(resolve);\n            });\n        }\n    };\n    TerminalProcessExtHostProxy = __decorate([\n        __param(5, terminal_1.ITerminalService),\n        __param(6, extensions_1.IExtensionService)\n    ], TerminalProcessExtHostProxy);\n    exports.TerminalProcessExtHostProxy = TerminalProcessExtHostProxy;\n});\n",null]}