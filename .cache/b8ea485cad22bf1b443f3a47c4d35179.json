{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/argv.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/argv.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"minimist\", \"os\", \"vs/nls\", \"path\", \"fs\"], function (require, exports, minimist, os, nls_1, path_1, fs_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * This code is also used by standalone cli's. Avoid adding any other dependencies.\n     */\n    class HelpCategories {\n        constructor() {\n            this.o = nls_1.localize('optionsUpperCase', \"Options\");\n            this.e = nls_1.localize('extensionsManagement', \"Extensions Management\");\n            this.t = nls_1.localize('troubleshooting', \"Troubleshooting\");\n        }\n    }\n    exports.options = [\n        { id: 'diff', type: 'boolean', cat: 'o', alias: 'd', args: ['file', 'file'], description: nls_1.localize('diff', \"Compare two files with each other.\") },\n        { id: 'add', type: 'boolean', cat: 'o', alias: 'a', args: 'folder', description: nls_1.localize('add', \"Add folder(s) to the last active window.\") },\n        { id: 'goto', type: 'boolean', cat: 'o', alias: 'g', args: 'file:line[:character]', description: nls_1.localize('goto', \"Open a file at the path on the specified line and character position.\") },\n        { id: 'new-window', type: 'boolean', cat: 'o', alias: 'n', description: nls_1.localize('newWindow', \"Force to open a new window.\") },\n        { id: 'reuse-window', type: 'boolean', cat: 'o', alias: 'r', description: nls_1.localize('reuseWindow', \"Force to open a file or folder in an already opened window.\") },\n        { id: 'wait', type: 'boolean', cat: 'o', alias: 'w', description: nls_1.localize('wait', \"Wait for the files to be closed before returning.\") },\n        { id: 'locale', type: 'string', cat: 'o', args: 'locale', description: nls_1.localize('locale', \"The locale to use (e.g. en-US or zh-TW).\") },\n        { id: 'user-data-dir', type: 'string', cat: 'o', args: 'dir', description: nls_1.localize('userDataDir', \"Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.\") },\n        { id: 'version', type: 'boolean', cat: 'o', alias: 'v', description: nls_1.localize('version', \"Print version.\") },\n        { id: 'help', type: 'boolean', cat: 'o', alias: 'h', description: nls_1.localize('help', \"Print usage.\") },\n        { id: 'folder-uri', type: 'string', cat: 'o', args: 'uri', description: nls_1.localize('folderUri', \"Opens a window with given folder uri(s)\") },\n        { id: 'file-uri', type: 'string', cat: 'o', args: 'uri', description: nls_1.localize('fileUri', \"Opens a window with given file uri(s)\") },\n        { id: 'extensions-dir', type: 'string', deprecates: 'extensionHomePath', cat: 'e', args: 'dir', description: nls_1.localize('extensionHomePath', \"Set the root path for extensions.\") },\n        { id: 'list-extensions', type: 'boolean', cat: 'e', description: nls_1.localize('listExtensions', \"List the installed extensions.\") },\n        { id: 'show-versions', type: 'boolean', cat: 'e', description: nls_1.localize('showVersions', \"Show versions of installed extensions, when using --list-extension.\") },\n        { id: 'install-extension', type: 'string', cat: 'e', args: 'extension-id', description: nls_1.localize('installExtension', \"Installs or updates the extension. Use `--force` argument to avoid prompts.\") },\n        { id: 'uninstall-extension', type: 'string', cat: 'e', args: 'extension-id', description: nls_1.localize('uninstallExtension', \"Uninstalls an extension.\") },\n        { id: 'enable-proposed-api', type: 'string', cat: 'e', args: 'extension-id', description: nls_1.localize('experimentalApis', \"Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.\") },\n        { id: 'verbose', type: 'boolean', cat: 't', description: nls_1.localize('verbose', \"Print verbose output (implies --wait).\") },\n        { id: 'log', type: 'string', cat: 't', args: 'level', description: nls_1.localize('log', \"Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.\") },\n        { id: 'status', type: 'boolean', alias: 's', cat: 't', description: nls_1.localize('status', \"Print process usage and diagnostics information.\") },\n        { id: 'prof-modules', type: 'boolean', alias: 'p', cat: 't', description: nls_1.localize('prof-modules', \"Capture performance markers while loading JS modules and print them with 'F1 > Developer: Startup Performance\") },\n        { id: 'prof-startup', type: 'boolean', cat: 't', description: nls_1.localize('prof-startup', \"Run CPU profiler during startup\") },\n        { id: 'disable-extensions', type: 'boolean', deprecates: 'disableExtensions', cat: 't', description: nls_1.localize('disableExtensions', \"Disable all installed extensions.\") },\n        { id: 'disable-extension', type: 'string', cat: 't', args: 'extension-id', description: nls_1.localize('disableExtension', \"Disable an extension.\") },\n        { id: 'inspect-extensions', type: 'string', deprecates: 'debugPluginHost', args: 'port', cat: 't', description: nls_1.localize('inspect-extensions', \"Allow debugging and profiling of extensions. Check the developer tools for the connection URI.\") },\n        { id: 'inspect-brk-extensions', type: 'string', deprecates: 'debugBrkPluginHost', args: 'port', cat: 't', description: nls_1.localize('inspect-brk-extensions', \"Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI.\") },\n        { id: 'disable-gpu', type: 'boolean', cat: 't', description: nls_1.localize('disableGPU', \"Disable GPU hardware acceleration.\") },\n        { id: 'upload-logs', type: 'string', cat: 't', description: nls_1.localize('uploadLogs', \"Uploads logs from current session to a secure endpoint.\") },\n        { id: 'max-memory', type: 'string', cat: 't', description: nls_1.localize('maxMemory', \"Max memory size for a window (in Mbytes).\") },\n        { id: 'remote', type: 'string' },\n        { id: 'extensionDevelopmentPath', type: 'string' },\n        { id: 'extensionTestsPath', type: 'string' },\n        { id: 'debugId', type: 'string' },\n        { id: 'inspect-search', type: 'string', deprecates: 'debugSearch' },\n        { id: 'inspect-brk-search', type: 'string', deprecates: 'debugBrkSearch' },\n        { id: 'export-default-configuration', type: 'string' },\n        { id: 'install-source', type: 'string' },\n        { id: 'driver', type: 'string' },\n        { id: 'logExtensionHostCommunication', type: 'boolean' },\n        { id: 'skip-getting-started', type: 'boolean' },\n        { id: 'skip-release-notes', type: 'boolean' },\n        { id: 'sticky-quickopen', type: 'boolean' },\n        { id: 'disable-restore-windows', type: 'boolean' },\n        { id: 'disable-telemetry', type: 'boolean' },\n        { id: 'disable-updates', type: 'boolean' },\n        { id: 'disable-crash-reporter', type: 'boolean' },\n        { id: 'skip-add-to-recently-opened', type: 'boolean' },\n        { id: 'unity-launch', type: 'boolean' },\n        { id: 'open-url', type: 'boolean' },\n        { id: 'nolazy', type: 'boolean' },\n        { id: 'issue', type: 'boolean' },\n        { id: 'file-write', type: 'boolean' },\n        { id: 'file-chmod', type: 'boolean' },\n        { id: 'driver-verbose', type: 'boolean' },\n        { id: 'force', type: 'boolean' },\n        { id: 'trace-category-filter', type: 'string' },\n        { id: 'trace-options', type: 'string' },\n        { id: 'prof-code-loading', type: 'boolean' },\n        { id: 'nodeless', type: 'boolean' } // TODO@ben revisit electron5 nodeless support\n    ];\n    function parseArgs(args, isOptionSupported = (_) => true) {\n        const alias = {};\n        const string = [];\n        const boolean = [];\n        for (let o of exports.options) {\n            if (isOptionSupported(o)) {\n                if (o.alias) {\n                    alias[o.id] = o.alias;\n                }\n            }\n            if (o.type === 'string') {\n                string.push(o.id);\n                if (o.deprecates) {\n                    string.push(o.deprecates);\n                }\n            }\n            else if (o.type === 'boolean') {\n                boolean.push(o.id);\n                if (o.deprecates) {\n                    boolean.push(o.deprecates);\n                }\n            }\n        }\n        // remote aliases to avoid confusion\n        const parsedArgs = minimist(args, { string, boolean, alias });\n        for (let o of exports.options) {\n            if (o.alias) {\n                delete parsedArgs[o.alias];\n            }\n            if (o.deprecates && parsedArgs.hasOwnProperty(o.deprecates) && !parsedArgs[o.id]) {\n                parsedArgs[o.id] = parsedArgs[o.deprecates];\n                delete parsedArgs[o.deprecates];\n            }\n        }\n        return parsedArgs;\n    }\n    exports.parseArgs = parseArgs;\n    function formatUsage(option) {\n        let args = '';\n        if (option.args) {\n            if (Array.isArray(option.args)) {\n                args = ` <${option.args.join('> <')}>`;\n            }\n            else {\n                args = ` <${option.args}>`;\n            }\n        }\n        if (option.alias) {\n            return `-${option.alias} --${option.id}${args}`;\n        }\n        return `--${option.id}${args}`;\n    }\n    // exported only for testing\n    function formatOptions(docOptions, columns) {\n        let usageTexts = docOptions.map(formatUsage);\n        let argLength = Math.max.apply(null, usageTexts.map(k => k.length)) + 2 /*left padding*/ + 1 /*right padding*/;\n        if (columns - argLength < 25) {\n            // Use a condensed version on narrow terminals\n            return docOptions.reduce((r, o, i) => r.concat([`  ${usageTexts[i]}`, `      ${o.description}`]), []);\n        }\n        let descriptionColumns = columns - argLength - 1;\n        let result = [];\n        docOptions.forEach((o, i) => {\n            let usage = usageTexts[i];\n            let wrappedDescription = wrapText(o.description, descriptionColumns);\n            let keyPadding = indent(argLength - usage.length - 2 /*left padding*/);\n            result.push('  ' + usage + keyPadding + wrappedDescription[0]);\n            for (let i = 1; i < wrappedDescription.length; i++) {\n                result.push(indent(argLength) + wrappedDescription[i]);\n            }\n        });\n        return result;\n    }\n    exports.formatOptions = formatOptions;\n    function indent(count) {\n        return ' '.repeat(count);\n    }\n    function wrapText(text, columns) {\n        let lines = [];\n        while (text.length) {\n            let index = text.length < columns ? text.length : text.lastIndexOf(' ', columns);\n            let line = text.slice(0, index).trim();\n            text = text.slice(index);\n            lines.push(line);\n        }\n        return lines;\n    }\n    function buildHelpMessage(productName, executableName, version, isOptionSupported = (_) => true) {\n        const columns = (process.stdout).isTTY && (process.stdout).columns || 80;\n        let categories = new HelpCategories();\n        let help = [`${productName} ${version}`];\n        help.push('');\n        help.push(`${nls_1.localize('usage', \"Usage\")}: ${executableName} [${nls_1.localize('options', \"options\")}][${nls_1.localize('paths', 'paths')}...]`);\n        help.push('');\n        if (os.platform() === 'win32') {\n            help.push(nls_1.localize('stdinWindows', \"To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')\", executableName));\n        }\n        else {\n            help.push(nls_1.localize('stdinUnix', \"To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')\", executableName));\n        }\n        help.push('');\n        for (let key in categories) {\n            let categoryOptions = exports.options.filter(o => !!o.description && o.cat === key && isOptionSupported(o));\n            if (categoryOptions.length) {\n                help.push(categories[key]);\n                help.push(...formatOptions(categoryOptions, columns));\n                help.push('');\n            }\n        }\n        return help.join('\\n');\n    }\n    exports.buildHelpMessage = buildHelpMessage;\n    function buildVersionMessage(version, commit) {\n        return `${version || nls_1.localize('unknownVersion', \"Unknown version\")}\\n${commit || nls_1.localize('unknownCommit', \"Unknown commit\")}\\n${process.arch}`;\n    }\n    exports.buildVersionMessage = buildVersionMessage;\n    /**\n     * Converts an argument into an array\n     * @param arg a argument value. Can be undefined, an entry or an array\n     */\n    function asArray(arg) {\n        if (arg) {\n            if (Array.isArray(arg)) {\n                return arg;\n            }\n            return [arg];\n        }\n        return [];\n    }\n    exports.asArray = asArray;\n    /**\n     * Returns whether an argument is present.\n     */\n    function hasArgs(arg) {\n        if (arg) {\n            if (Array.isArray(arg)) {\n                return !!arg.length;\n            }\n            return true;\n        }\n        return false;\n    }\n    exports.hasArgs = hasArgs;\n    function addArg(argv, ...args) {\n        const endOfArgsMarkerIndex = argv.indexOf('--');\n        if (endOfArgsMarkerIndex === -1) {\n            argv.push(...args);\n        }\n        else {\n            // if the we have an argument \"--\" (end of argument marker)\n            // we cannot add arguments at the end. rather, we add\n            // arguments before the \"--\" marker.\n            argv.splice(endOfArgsMarkerIndex, 0, ...args);\n        }\n        return argv;\n    }\n    exports.addArg = addArg;\n    function createWaitMarkerFile(verbose) {\n        const randomWaitMarkerPath = path_1.join(os.tmpdir(), Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10));\n        try {\n            fs_1.writeFileSync(randomWaitMarkerPath, '');\n            if (verbose) {\n                console.log(`Marker file for --wait created: ${randomWaitMarkerPath}`);\n            }\n            return randomWaitMarkerPath;\n        }\n        catch (err) {\n            if (verbose) {\n                console.error(`Failed to create marker file for --wait: ${err}`);\n            }\n            return undefined;\n        }\n    }\n    exports.createWaitMarkerFile = createWaitMarkerFile;\n});\n",null]}