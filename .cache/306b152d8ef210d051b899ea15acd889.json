{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/strings\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/configuration/common/configuration\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/base/common/lifecycle\", \"vs/base/common/objects\", \"vs/platform/registry/common/platform\"], function (require, exports, nls_1, strings_1, instantiation_1, configuration_1, configurationRegistry_1, lifecycle_1, objects_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TelemetryService = class TelemetryService {\n        constructor(config, _configurationService) {\n            this._configurationService = _configurationService;\n            this._disposables = [];\n            this._cleanupPatterns = [];\n            this._appender = config.appender;\n            this._commonProperties = config.commonProperties || Promise.resolve({});\n            this._piiPaths = config.piiPaths || [];\n            this._userOptIn = true;\n            // static cleanup pattern for: `file:///DANGEROUS/PATH/resources/app/Useful/Information`\n            this._cleanupPatterns = [/file:\\/\\/\\/.*?\\/resources\\/app\\//gi];\n            for (let piiPath of this._piiPaths) {\n                this._cleanupPatterns.push(new RegExp(strings_1.escapeRegExpCharacters(piiPath), 'gi'));\n            }\n            if (this._configurationService) {\n                this._updateUserOptIn();\n                this._configurationService.onDidChangeConfiguration(this._updateUserOptIn, this, this._disposables);\n                /* __GDPR__\n                    \"optInStatus\" : {\n                        \"optIn\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n                    }\n                */\n                this.publicLog('optInStatus', { optIn: this._userOptIn });\n                this._commonProperties.then(values => {\n                    const isHashedId = /^[a-f0-9]+$/i.test(values['common.machineId']);\n                    /* __GDPR__\n                        \"machineIdFallback\" : {\n                            \"usingFallbackGuid\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n                        }\n                    */\n                    this.publicLog('machineIdFallback', { usingFallbackGuid: !isHashedId });\n                });\n            }\n        }\n        _updateUserOptIn() {\n            const config = this._configurationService.getValue(TELEMETRY_SECTION_ID);\n            this._userOptIn = config ? config.enableTelemetry : this._userOptIn;\n        }\n        get isOptedIn() {\n            return this._userOptIn;\n        }\n        getTelemetryInfo() {\n            return this._commonProperties.then(values => {\n                // well known properties\n                let sessionId = values['sessionID'];\n                let instanceId = values['common.instanceId'];\n                let machineId = values['common.machineId'];\n                return { sessionId, instanceId, machineId };\n            });\n        }\n        dispose() {\n            this._disposables = lifecycle_1.dispose(this._disposables);\n        }\n        publicLog(eventName, data, anonymizeFilePaths) {\n            // don't send events when the user is optout\n            if (!this._userOptIn) {\n                return Promise.resolve(undefined);\n            }\n            return this._commonProperties.then(values => {\n                // (first) add common properties\n                data = objects_1.mixin(data, values);\n                // (last) remove all PII from data\n                data = objects_1.cloneAndChange(data, value => {\n                    if (typeof value === 'string') {\n                        return this._cleanupInfo(value, anonymizeFilePaths);\n                    }\n                    return undefined;\n                });\n                this._appender.log(eventName, data);\n            }, err => {\n                // unsure what to do now...\n                console.error(err);\n            });\n        }\n        _cleanupInfo(stack, anonymizeFilePaths) {\n            let updatedStack = stack;\n            if (anonymizeFilePaths) {\n                const cleanUpIndexes = [];\n                for (let regexp of this._cleanupPatterns) {\n                    while (true) {\n                        const result = regexp.exec(stack);\n                        if (!result) {\n                            break;\n                        }\n                        cleanUpIndexes.push([result.index, regexp.lastIndex]);\n                    }\n                }\n                const nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n                const fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n                let lastIndex = 0;\n                updatedStack = '';\n                while (true) {\n                    const result = fileRegex.exec(stack);\n                    if (!result) {\n                        break;\n                    }\n                    // Anoynimize user file paths that do not need to be retained or cleaned up.\n                    if (!nodeModulesRegex.test(result[0]) && cleanUpIndexes.every(([x, y]) => result.index < x || result.index >= y)) {\n                        updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n                        lastIndex = fileRegex.lastIndex;\n                    }\n                }\n                if (lastIndex < stack.length) {\n                    updatedStack += stack.substr(lastIndex);\n                }\n            }\n            // sanitize with configured cleanup patterns\n            for (let regexp of this._cleanupPatterns) {\n                updatedStack = updatedStack.replace(regexp, '');\n            }\n            return updatedStack;\n        }\n    };\n    TelemetryService.IDLE_START_EVENT_NAME = 'UserIdleStart';\n    TelemetryService.IDLE_STOP_EVENT_NAME = 'UserIdleStop';\n    TelemetryService = __decorate([\n        __param(1, instantiation_1.optional(configuration_1.IConfigurationService))\n    ], TelemetryService);\n    exports.TelemetryService = TelemetryService;\n    const TELEMETRY_SECTION_ID = 'telemetry';\n    platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n        'id': TELEMETRY_SECTION_ID,\n        'order': 110,\n        'type': 'object',\n        'title': nls_1.localize('telemetryConfigurationTitle', \"Telemetry\"),\n        'properties': {\n            'telemetry.enableTelemetry': {\n                'type': 'boolean',\n                'description': nls_1.localize('telemetry.enableTelemetry', \"Enable usage data and errors to be sent to a Microsoft online service.\"),\n                'default': true,\n                'tags': ['usesOnlineServices']\n            }\n        }\n    });\n});\n",null]}