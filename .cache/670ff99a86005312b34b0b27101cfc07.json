{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/product/node/product\", \"vs/base/common/severity\", \"vs/base/common/platform\", \"vs/platform/windows/common/windows\", \"vs/base/common/labels\", \"vs/platform/dialogs/common/dialogs\", \"vs/platform/dialogs/browser/dialogService\", \"vs/platform/log/common/log\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/ipc/electron-browser/sharedProcessService\", \"vs/platform/dialogs/node/dialogIpc\", \"vs/platform/configuration/common/configuration\", \"vs/platform/layout/browser/layoutService\", \"vs/platform/theme/common/themeService\"], function (require, exports, nls, product_1, severity_1, platform_1, windows_1, labels_1, dialogs_1, dialogService_1, log_1, extensions_1, sharedProcessService_1, dialogIpc_1, configuration_1, layoutService_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let DialogService = class DialogService {\n        constructor(configurationService, logService, layoutService, themeService, windowService, sharedProcessService) {\n            // Use HTML based dialogs\n            if (configurationService.getValue('workbench.dialogs.customEnabled') === true) {\n                this.impl = new dialogService_1.DialogService(logService, layoutService, themeService);\n            }\n            // Electron dialog service\n            else {\n                this.impl = new NativeDialogService(windowService, logService, sharedProcessService);\n            }\n        }\n        confirm(confirmation) {\n            return this.impl.confirm(confirmation);\n        }\n        show(severity, message, buttons, options) {\n            return this.impl.show(severity, message, buttons, options);\n        }\n    };\n    DialogService = __decorate([\n        __param(0, configuration_1.IConfigurationService),\n        __param(1, log_1.ILogService),\n        __param(2, layoutService_1.ILayoutService),\n        __param(3, themeService_1.IThemeService),\n        __param(4, windows_1.IWindowService),\n        __param(5, sharedProcessService_1.ISharedProcessService)\n    ], DialogService);\n    exports.DialogService = DialogService;\n    let NativeDialogService = class NativeDialogService {\n        constructor(windowService, logService, sharedProcessService) {\n            this.windowService = windowService;\n            this.logService = logService;\n            sharedProcessService.registerChannel('dialog', new dialogIpc_1.DialogChannel(this));\n        }\n        confirm(confirmation) {\n            this.logService.trace('DialogService#confirm', confirmation.message);\n            const { options, buttonIndexMap } = this.massageMessageBoxOptions(this.getConfirmOptions(confirmation));\n            return this.windowService.showMessageBox(options).then(result => {\n                return {\n                    confirmed: buttonIndexMap[result.button] === 0 ? true : false,\n                    checkboxChecked: result.checkboxChecked\n                };\n            });\n        }\n        getConfirmOptions(confirmation) {\n            const buttons = [];\n            if (confirmation.primaryButton) {\n                buttons.push(confirmation.primaryButton);\n            }\n            else {\n                buttons.push(nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n            }\n            if (confirmation.secondaryButton) {\n                buttons.push(confirmation.secondaryButton);\n            }\n            else if (typeof confirmation.secondaryButton === 'undefined') {\n                buttons.push(nls.localize('cancelButton', \"Cancel\"));\n            }\n            const opts = {\n                title: confirmation.title,\n                message: confirmation.message,\n                buttons,\n                cancelId: 1\n            };\n            if (confirmation.detail) {\n                opts.detail = confirmation.detail;\n            }\n            if (confirmation.type) {\n                opts.type = confirmation.type;\n            }\n            if (confirmation.checkbox) {\n                opts.checkboxLabel = confirmation.checkbox.label;\n                opts.checkboxChecked = confirmation.checkbox.checked;\n            }\n            return opts;\n        }\n        show(severity, message, buttons, dialogOptions) {\n            this.logService.trace('DialogService#show', message);\n            const { options, buttonIndexMap } = this.massageMessageBoxOptions({\n                message,\n                buttons,\n                type: (severity === severity_1.default.Info) ? 'question' : (severity === severity_1.default.Error) ? 'error' : (severity === severity_1.default.Warning) ? 'warning' : 'none',\n                cancelId: dialogOptions ? dialogOptions.cancelId : undefined,\n                detail: dialogOptions ? dialogOptions.detail : undefined\n            });\n            return this.windowService.showMessageBox(options).then(result => buttonIndexMap[result.button]);\n        }\n        massageMessageBoxOptions(options) {\n            let buttonIndexMap = (options.buttons || []).map((button, index) => index);\n            let buttons = (options.buttons || []).map(button => labels_1.mnemonicButtonLabel(button));\n            let cancelId = options.cancelId;\n            // Linux: order of buttons is reverse\n            // macOS: also reverse, but the OS handles this for us!\n            if (platform_1.isLinux) {\n                buttons = buttons.reverse();\n                buttonIndexMap = buttonIndexMap.reverse();\n            }\n            // Default Button (always first one)\n            options.defaultId = buttonIndexMap[0];\n            // Cancel Button\n            if (typeof cancelId === 'number') {\n                // Ensure the cancelId is the correct one from our mapping\n                cancelId = buttonIndexMap[cancelId];\n                // macOS/Linux: the cancel button should always be to the left of the primary action\n                // if we see more than 2 buttons, move the cancel one to the left of the primary\n                if (!platform_1.isWindows && buttons.length > 2 && cancelId !== 1) {\n                    const cancelButton = buttons[cancelId];\n                    buttons.splice(cancelId, 1);\n                    buttons.splice(1, 0, cancelButton);\n                    const cancelButtonIndex = buttonIndexMap[cancelId];\n                    buttonIndexMap.splice(cancelId, 1);\n                    buttonIndexMap.splice(1, 0, cancelButtonIndex);\n                    cancelId = 1;\n                }\n            }\n            options.buttons = buttons;\n            options.cancelId = cancelId;\n            options.noLink = true;\n            options.title = options.title || product_1.default.nameLong;\n            return { options, buttonIndexMap };\n        }\n    };\n    NativeDialogService = __decorate([\n        __param(0, windows_1.IWindowService),\n        __param(1, log_1.ILogService),\n        __param(2, sharedProcessService_1.ISharedProcessService)\n    ], NativeDialogService);\n    extensions_1.registerSingleton(dialogs_1.IDialogService, DialogService, true);\n});\n",null]}