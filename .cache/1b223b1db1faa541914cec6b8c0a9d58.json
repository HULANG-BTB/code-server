{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar schema = {\n    definitions: {\n        showOutputType: {\n            type: 'string',\n            enum: ['always', 'silent', 'never']\n        },\n        options: {\n            type: 'object',\n            description: nls.localize('JsonSchema.options', 'Additional command options'),\n            properties: {\n                cwd: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.options.cwd', 'The current working directory of the executed program or script. If omitted Code\\'s current workspace root is used.')\n                },\n                env: {\n                    type: 'object',\n                    additionalProperties: {\n                        type: 'string'\n                    },\n                    description: nls.localize('JsonSchema.options.env', 'The environment of the executed program or shell. If omitted the parent process\\' environment is used.')\n                }\n            },\n            additionalProperties: {\n                type: ['string', 'array', 'object']\n            }\n        },\n        problemMatcherType: {\n            oneOf: [\n                {\n                    type: 'string',\n                },\n                problemMatcher_1.Schemas.LegacyProblemMatcher,\n                {\n                    type: 'array',\n                    items: {\n                        anyOf: [\n                            problemMatcher_1.Schemas.LegacyProblemMatcher,\n                            {\n                                type: 'string',\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        shellConfiguration: {\n            type: 'object',\n            additionalProperties: false,\n            description: nls.localize('JsonSchema.shellConfiguration', 'Configures the shell to be used.'),\n            properties: {\n                executable: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.shell.executable', 'The shell to be used.')\n                },\n                args: {\n                    type: 'array',\n                    description: nls.localize('JsonSchema.shell.args', 'The shell arguments.'),\n                    items: {\n                        type: 'string'\n                    }\n                }\n            }\n        },\n        commandConfiguration: {\n            type: 'object',\n            additionalProperties: false,\n            properties: {\n                command: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                },\n                args: {\n                    type: 'array',\n                    description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n                    items: {\n                        type: 'string'\n                    }\n                },\n                options: {\n                    $ref: '#/definitions/options'\n                }\n            }\n        },\n        taskDescription: {\n            type: 'object',\n            required: ['taskName'],\n            additionalProperties: false,\n            properties: {\n                taskName: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.tasks.taskName', \"The task's name\")\n                },\n                command: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                },\n                args: {\n                    type: 'array',\n                    description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n                    items: {\n                        type: 'string'\n                    }\n                },\n                options: {\n                    $ref: '#/definitions/options'\n                },\n                windows: {\n                    $ref: '#/definitions/commandConfiguration',\n                    description: nls.localize('JsonSchema.tasks.windows', 'Windows specific command configuration')\n                },\n                osx: {\n                    $ref: '#/definitions/commandConfiguration',\n                    description: nls.localize('JsonSchema.tasks.mac', 'Mac specific command configuration')\n                },\n                linux: {\n                    $ref: '#/definitions/commandConfiguration',\n                    description: nls.localize('JsonSchema.tasks.linux', 'Linux specific command configuration')\n                },\n                suppressTaskName: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.tasks.suppressTaskName', 'Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.'),\n                    default: true\n                },\n                showOutput: {\n                    $ref: '#/definitions/showOutputType',\n                    description: nls.localize('JsonSchema.tasks.showOutput', 'Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.')\n                },\n                echoCommand: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n                    default: true\n                },\n                isWatching: {\n                    type: 'boolean',\n                    deprecationMessage: nls.localize('JsonSchema.tasks.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n                    description: nls.localize('JsonSchema.tasks.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n                    default: true\n                },\n                isBackground: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n                    default: true\n                },\n                promptOnClose: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n                    default: false\n                },\n                isBuildCommand: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.tasks.build', 'Maps this task to Code\\'s default build command.'),\n                    default: true\n                },\n                isTestCommand: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.tasks.test', 'Maps this task to Code\\'s default test command.'),\n                    default: true\n                },\n                problemMatcher: {\n                    $ref: '#/definitions/problemMatcherType',\n                    description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n                }\n            }\n        },\n        taskRunnerConfiguration: {\n            type: 'object',\n            required: [],\n            properties: {\n                command: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                },\n                args: {\n                    type: 'array',\n                    description: nls.localize('JsonSchema.args', 'Additional arguments passed to the command.'),\n                    items: {\n                        type: 'string'\n                    }\n                },\n                options: {\n                    $ref: '#/definitions/options'\n                },\n                showOutput: {\n                    $ref: '#/definitions/showOutputType',\n                    description: nls.localize('JsonSchema.showOutput', 'Controls whether the output of the running task is shown or not. If omitted \\'always\\' is used.')\n                },\n                isWatching: {\n                    type: 'boolean',\n                    deprecationMessage: nls.localize('JsonSchema.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n                    description: nls.localize('JsonSchema.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n                    default: true\n                },\n                isBackground: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.background', 'Whether the executed task is kept alive and is running in the background.'),\n                    default: true\n                },\n                promptOnClose: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.promptOnClose', 'Whether the user is prompted when VS Code closes with a running background task.'),\n                    default: false\n                },\n                echoCommand: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n                    default: true\n                },\n                suppressTaskName: {\n                    type: 'boolean',\n                    description: nls.localize('JsonSchema.suppressTaskName', 'Controls whether the task name is added as an argument to the command. Default is false.'),\n                    default: true\n                },\n                taskSelector: {\n                    type: 'string',\n                    description: nls.localize('JsonSchema.taskSelector', 'Prefix to indicate that an argument is task.')\n                },\n                problemMatcher: {\n                    $ref: '#/definitions/problemMatcherType',\n                    description: nls.localize('JsonSchema.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n                },\n                tasks: {\n                    type: 'array',\n                    description: nls.localize('JsonSchema.tasks', 'The task configurations. Usually these are enrichments of task already defined in the external task runner.'),\n                    items: {\n                        type: 'object',\n                        $ref: '#/definitions/taskDescription'\n                    }\n                }\n            }\n        }\n    }\n};\nexports.default = schema;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\n\nimport { Schemas } from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nconst schema: IJSONSchema = {\n\tdefinitions: {\n\t\tshowOutputType: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'silent', 'never']\n\t\t},\n\t\toptions: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('JsonSchema.options', 'Additional command options'),\n\t\t\tproperties: {\n\t\t\t\tcwd: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.options.cwd', 'The current working directory of the executed program or script. If omitted Code\\'s current workspace root is used.')\n\t\t\t\t},\n\t\t\t\tenv: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdescription: nls.localize('JsonSchema.options.env', 'The environment of the executed program or shell. If omitted the parent process\\' environment is used.')\n\t\t\t\t}\n\t\t\t},\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: ['string', 'array', 'object']\n\t\t\t}\n\t\t},\n\t\tproblemMatcherType: {\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t},\n\t\t\t\tSchemas.LegacyProblemMatcher,\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\tSchemas.LegacyProblemMatcher,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\tshellConfiguration: {\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: false,\n\t\t\tdescription: nls.localize('JsonSchema.shellConfiguration', 'Configures the shell to be used.'),\n\t\t\tproperties: {\n\t\t\t\texecutable: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.shell.executable', 'The shell to be used.')\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.shell.args', 'The shell arguments.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcommandConfiguration: {\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: false,\n\t\t\tproperties: {\n\t\t\t\tcommand: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\t$ref: '#/definitions/options'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttaskDescription: {\n\t\t\ttype: 'object',\n\t\t\trequired: ['taskName'],\n\t\t\tadditionalProperties: false,\n\t\t\tproperties: {\n\t\t\t\ttaskName: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.taskName', \"The task's name\")\n\t\t\t\t},\n\t\t\t\tcommand: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\t$ref: '#/definitions/options'\n\t\t\t\t},\n\t\t\t\twindows: {\n\t\t\t\t\t$ref: '#/definitions/commandConfiguration',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.windows', 'Windows specific command configuration')\n\t\t\t\t},\n\t\t\t\tosx: {\n\t\t\t\t\t$ref: '#/definitions/commandConfiguration',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.mac', 'Mac specific command configuration')\n\t\t\t\t},\n\t\t\t\tlinux: {\n\t\t\t\t\t$ref: '#/definitions/commandConfiguration',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.linux', 'Linux specific command configuration')\n\t\t\t\t},\n\t\t\t\tsuppressTaskName: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.suppressTaskName', 'Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tshowOutput: {\n\t\t\t\t\t$ref: '#/definitions/showOutputType',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.showOutput', 'Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.')\n\t\t\t\t},\n\t\t\t\techoCommand: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tisWatching: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema.tasks.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tisBackground: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tpromptOnClose: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n\t\t\t\t\tdefault: false\n\t\t\t\t},\n\t\t\t\tisBuildCommand: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.build', 'Maps this task to Code\\'s default build command.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tisTestCommand: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.test', 'Maps this task to Code\\'s default test command.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tproblemMatcher: {\n\t\t\t\t\t$ref: '#/definitions/problemMatcherType',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttaskRunnerConfiguration: {\n\t\t\ttype: 'object',\n\t\t\trequired: [],\n\t\t\tproperties: {\n\t\t\t\tcommand: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.args', 'Additional arguments passed to the command.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\t$ref: '#/definitions/options'\n\t\t\t\t},\n\t\t\t\tshowOutput: {\n\t\t\t\t\t$ref: '#/definitions/showOutputType',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.showOutput', 'Controls whether the output of the running task is shown or not. If omitted \\'always\\' is used.')\n\t\t\t\t},\n\t\t\t\tisWatching: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n\t\t\t\t\tdescription: nls.localize('JsonSchema.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tisBackground: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.background', 'Whether the executed task is kept alive and is running in the background.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tpromptOnClose: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.promptOnClose', 'Whether the user is prompted when VS Code closes with a running background task.'),\n\t\t\t\t\tdefault: false\n\t\t\t\t},\n\t\t\t\techoCommand: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\tsuppressTaskName: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.suppressTaskName', 'Controls whether the task name is added as an argument to the command. Default is false.'),\n\t\t\t\t\tdefault: true\n\t\t\t\t},\n\t\t\t\ttaskSelector: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.taskSelector', 'Prefix to indicate that an argument is task.')\n\t\t\t\t},\n\t\t\t\tproblemMatcher: {\n\t\t\t\t\t$ref: '#/definitions/problemMatcherType',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n\t\t\t\t},\n\t\t\t\ttasks: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks', 'The task configurations. Usually these are enrichments of task already defined in the external task runner.'),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t$ref: '#/definitions/taskDescription'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default schema;"]}]}