{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar json = require(\"vs/base/common/json\");\nvar jsonEdit_1 = require(\"vs/base/common/jsonEdit\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar types_1 = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nexports.IKeybindingEditingService = instantiation_1.createDecorator('keybindingEditingService');\nvar KeybindingsEditingService = /** @class */ (function (_super) {\n    tslib_1.__extends(KeybindingsEditingService, _super);\n    function KeybindingsEditingService(textModelResolverService, textFileService, fileService, configurationService, environmentService) {\n        var _this = _super.call(this) || this;\n        _this.textModelResolverService = textModelResolverService;\n        _this.textFileService = textFileService;\n        _this.fileService = fileService;\n        _this.configurationService = configurationService;\n        _this.environmentService = environmentService;\n        _this.resource = uri_1.URI.file(_this.environmentService.appKeybindingsPath);\n        _this.queue = new async_1.Queue();\n        return _this;\n    }\n    KeybindingsEditingService.prototype.editKeybinding = function (keybindingItem, key, when) {\n        var _this = this;\n        return this.queue.queue(function () { return _this.doEditKeybinding(keybindingItem, key, when); }); // queue up writes to prevent race conditions\n    };\n    KeybindingsEditingService.prototype.resetKeybinding = function (keybindingItem) {\n        var _this = this;\n        return this.queue.queue(function () { return _this.doResetKeybinding(keybindingItem); }); // queue up writes to prevent race conditions\n    };\n    KeybindingsEditingService.prototype.removeKeybinding = function (keybindingItem) {\n        var _this = this;\n        return this.queue.queue(function () { return _this.doRemoveKeybinding(keybindingItem); }); // queue up writes to prevent race conditions\n    };\n    KeybindingsEditingService.prototype.doEditKeybinding = function (keybindingItem, key, when) {\n        var _this = this;\n        return this.resolveAndValidate()\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            var userKeybindingEntries = json.parse(model.getValue());\n            var userKeybindingEntryIndex = _this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n            _this.updateKeybinding(keybindingItem, key, when, model, userKeybindingEntryIndex);\n            if (keybindingItem.isDefault && keybindingItem.resolvedKeybinding) {\n                _this.removeDefaultKeybinding(keybindingItem, model);\n            }\n            return _this.save().then(function () { return reference.dispose(); });\n        });\n    };\n    KeybindingsEditingService.prototype.doRemoveKeybinding = function (keybindingItem) {\n        var _this = this;\n        return this.resolveAndValidate()\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            if (keybindingItem.isDefault) {\n                _this.removeDefaultKeybinding(keybindingItem, model);\n            }\n            else {\n                _this.removeUserKeybinding(keybindingItem, model);\n            }\n            return _this.save().then(function () { return reference.dispose(); });\n        });\n    };\n    KeybindingsEditingService.prototype.doResetKeybinding = function (keybindingItem) {\n        var _this = this;\n        return this.resolveAndValidate()\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            if (!keybindingItem.isDefault) {\n                _this.removeUserKeybinding(keybindingItem, model);\n                _this.removeUnassignedDefaultKeybinding(keybindingItem, model);\n            }\n            return _this.save().then(function () { return reference.dispose(); });\n        });\n    };\n    KeybindingsEditingService.prototype.save = function () {\n        return this.textFileService.save(this.resource);\n    };\n    KeybindingsEditingService.prototype.updateKeybinding = function (keybindingItem, newKey, when, model, userKeybindingEntryIndex) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        if (userKeybindingEntryIndex !== -1) {\n            // Update the keybinding with new key\n            this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex, 'key'], newKey, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol })[0], model);\n            var edits = jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex, 'when'], when, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol });\n            if (edits.length > 0) {\n                this.applyEditsToBuffer(edits[0], model);\n            }\n        }\n        else {\n            // Add the new keybinding with new key\n            this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [-1], this.asObject(newKey, keybindingItem.command, when, false), { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol })[0], model);\n        }\n    };\n    KeybindingsEditingService.prototype.removeUserKeybinding = function (keybindingItem, model) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        var userKeybindingEntries = json.parse(model.getValue());\n        var userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n        if (userKeybindingEntryIndex !== -1) {\n            this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [userKeybindingEntryIndex], undefined, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol })[0], model);\n        }\n    };\n    KeybindingsEditingService.prototype.removeDefaultKeybinding = function (keybindingItem, model) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        var key = keybindingItem.resolvedKeybinding ? keybindingItem.resolvedKeybinding.getUserSettingsLabel() : null;\n        if (key) {\n            this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [-1], this.asObject(key, keybindingItem.command, keybindingItem.when ? keybindingItem.when.serialize() : undefined, true), { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol })[0], model);\n        }\n    };\n    KeybindingsEditingService.prototype.removeUnassignedDefaultKeybinding = function (keybindingItem, model) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        var userKeybindingEntries = json.parse(model.getValue());\n        var indices = this.findUnassignedDefaultKeybindingEntryIndex(keybindingItem, userKeybindingEntries).reverse();\n        for (var _i = 0, indices_1 = indices; _i < indices_1.length; _i++) {\n            var index = indices_1[_i];\n            this.applyEditsToBuffer(jsonEdit_1.setProperty(model.getValue(), [index], undefined, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol })[0], model);\n        }\n    };\n    KeybindingsEditingService.prototype.findUserKeybindingEntryIndex = function (keybindingItem, userKeybindingEntries) {\n        for (var index = 0; index < userKeybindingEntries.length; index++) {\n            var keybinding = userKeybindingEntries[index];\n            if (keybinding.command === keybindingItem.command) {\n                if (!keybinding.when && !keybindingItem.when) {\n                    return index;\n                }\n                if (keybinding.when && keybindingItem.when) {\n                    var contextKeyExpr = contextkey_1.ContextKeyExpr.deserialize(keybinding.when);\n                    if (contextKeyExpr && contextKeyExpr.serialize() === keybindingItem.when.serialize()) {\n                        return index;\n                    }\n                }\n            }\n        }\n        return -1;\n    };\n    KeybindingsEditingService.prototype.findUnassignedDefaultKeybindingEntryIndex = function (keybindingItem, userKeybindingEntries) {\n        var indices = [];\n        for (var index = 0; index < userKeybindingEntries.length; index++) {\n            if (userKeybindingEntries[index].command === \"-\" + keybindingItem.command) {\n                indices.push(index);\n            }\n        }\n        return indices;\n    };\n    KeybindingsEditingService.prototype.asObject = function (key, command, when, negate) {\n        var object = { key: key };\n        if (command) {\n            object['command'] = negate ? \"-\" + command : command;\n        }\n        if (when) {\n            object['when'] = when;\n        }\n        return object;\n    };\n    KeybindingsEditingService.prototype.applyEditsToBuffer = function (edit, model) {\n        var startPosition = model.getPositionAt(edit.offset);\n        var endPosition = model.getPositionAt(edit.offset + edit.length);\n        var range = new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n        var currentText = model.getValueInRange(range);\n        var editOperation = currentText ? editOperation_1.EditOperation.replace(range, edit.content) : editOperation_1.EditOperation.insert(startPosition, edit.content);\n        model.pushEditOperations([new selection_1.Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], function () { return []; });\n    };\n    KeybindingsEditingService.prototype.resolveModelReference = function () {\n        var _this = this;\n        return this.fileService.existsFile(this.resource)\n            .then(function (exists) {\n            var EOL = _this.configurationService.getValue('files', { overrideIdentifier: 'json' })['eol'];\n            var result = exists ? Promise.resolve(null) : _this.fileService.updateContent(_this.resource, _this.getEmptyContent(EOL), { encoding: 'utf8' });\n            return result.then(function () { return _this.textModelResolverService.createModelReference(_this.resource); });\n        });\n    };\n    KeybindingsEditingService.prototype.resolveAndValidate = function () {\n        var _this = this;\n        // Target cannot be dirty if not writing into buffer\n        if (this.textFileService.isDirty(this.resource)) {\n            return Promise.reject(new Error(nls_1.localize('errorKeybindingsFileDirty', \"Unable to write because the keybindings configuration file is dirty. Please save it first and then try again.\")));\n        }\n        return this.resolveModelReference()\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            var EOL = model.getEOL();\n            if (model.getValue()) {\n                var parsed = _this.parse(model);\n                if (parsed.parseErrors.length) {\n                    return Promise.reject(new Error(nls_1.localize('parseErrors', \"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.\")));\n                }\n                if (parsed.result) {\n                    if (!types_1.isArray(parsed.result)) {\n                        return Promise.reject(new Error(nls_1.localize('errorInvalidConfiguration', \"Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.\")));\n                    }\n                }\n                else {\n                    var content = EOL + '[]';\n                    _this.applyEditsToBuffer({ content: content, length: content.length, offset: model.getValue().length }, model);\n                }\n            }\n            else {\n                var content = _this.getEmptyContent(EOL);\n                _this.applyEditsToBuffer({ content: content, length: content.length, offset: 0 }, model);\n            }\n            return reference;\n        });\n    };\n    KeybindingsEditingService.prototype.parse = function (model) {\n        var parseErrors = [];\n        var result = json.parse(model.getValue(), parseErrors);\n        return { result: result, parseErrors: parseErrors };\n    };\n    KeybindingsEditingService.prototype.getEmptyContent = function (EOL) {\n        return '// ' + nls_1.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + EOL + '[]';\n    };\n    KeybindingsEditingService = tslib_1.__decorate([\n        tslib_1.__param(0, resolverService_1.ITextModelService),\n        tslib_1.__param(1, textfiles_1.ITextFileService),\n        tslib_1.__param(2, files_1.IFileService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, environment_1.IEnvironmentService)\n    ], KeybindingsEditingService);\n    return KeybindingsEditingService;\n}(lifecycle_1.Disposable));\nexports.KeybindingsEditingService = KeybindingsEditingService;\nextensions_1.registerSingleton(exports.IKeybindingEditingService, KeybindingsEditingService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Queue } from 'vs/base/common/async';\nimport * as json from 'vs/base/common/json';\nimport { setProperty } from 'vs/base/common/jsonEdit';\nimport { Edit } from 'vs/base/common/jsonFormatter';\nimport { Disposable, IReference } from 'vs/base/common/lifecycle';\nimport { isArray } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ServiceIdentifier, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport const IKeybindingEditingService = createDecorator<IKeybindingEditingService>('keybindingEditingService');\n\nexport interface IKeybindingEditingService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\teditKeybinding(keybindingItem: ResolvedKeybindingItem, key: string, when: string | undefined): Promise<void>;\n\n\tremoveKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void>;\n\n\tresetKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void>;\n}\n\nexport class KeybindingsEditingService extends Disposable implements IKeybindingEditingService {\n\n\tpublic _serviceBrand: any;\n\tprivate queue: Queue<void>;\n\n\tprivate resource: URI = URI.file(this.environmentService.appKeybindingsPath);\n\n\tconstructor(\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\teditKeybinding(keybindingItem: ResolvedKeybindingItem, key: string, when: string | undefined): Promise<void> {\n\t\treturn this.queue.queue(() => this.doEditKeybinding(keybindingItem, key, when)); // queue up writes to prevent race conditions\n\t}\n\n\tresetKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.queue.queue(() => this.doResetKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n\t}\n\n\tremoveKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.queue.queue(() => this.doRemoveKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n\t}\n\n\tprivate doEditKeybinding(keybindingItem: ResolvedKeybindingItem, key: string, when: string | undefined): Promise<void> {\n\t\treturn this.resolveAndValidate()\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\t\t\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>json.parse(model.getValue());\n\t\t\t\tconst userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n\t\t\t\tthis.updateKeybinding(keybindingItem, key, when, model, userKeybindingEntryIndex);\n\t\t\t\tif (keybindingItem.isDefault && keybindingItem.resolvedKeybinding) {\n\t\t\t\t\tthis.removeDefaultKeybinding(keybindingItem, model);\n\t\t\t\t}\n\t\t\t\treturn this.save().then(() => reference.dispose());\n\t\t\t});\n\t}\n\n\tprivate doRemoveKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.resolveAndValidate()\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\t\t\t\tif (keybindingItem.isDefault) {\n\t\t\t\t\tthis.removeDefaultKeybinding(keybindingItem, model);\n\t\t\t\t} else {\n\t\t\t\t\tthis.removeUserKeybinding(keybindingItem, model);\n\t\t\t\t}\n\t\t\t\treturn this.save().then(() => reference.dispose());\n\t\t\t});\n\t}\n\n\tprivate doResetKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.resolveAndValidate()\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\t\t\t\tif (!keybindingItem.isDefault) {\n\t\t\t\t\tthis.removeUserKeybinding(keybindingItem, model);\n\t\t\t\t\tthis.removeUnassignedDefaultKeybinding(keybindingItem, model);\n\t\t\t\t}\n\t\t\t\treturn this.save().then(() => reference.dispose());\n\t\t\t});\n\t}\n\n\tprivate save(): Promise<any> {\n\t\treturn this.textFileService.save(this.resource);\n\t}\n\n\tprivate updateKeybinding(keybindingItem: ResolvedKeybindingItem, newKey: string, when: string | undefined, model: ITextModel, userKeybindingEntryIndex: number): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tif (userKeybindingEntryIndex !== -1) {\n\t\t\t// Update the keybinding with new key\n\t\t\tthis.applyEditsToBuffer(setProperty(model.getValue(), [userKeybindingEntryIndex, 'key'], newKey, { tabSize, insertSpaces, eol })[0], model);\n\t\t\tconst edits = setProperty(model.getValue(), [userKeybindingEntryIndex, 'when'], when, { tabSize, insertSpaces, eol });\n\t\t\tif (edits.length > 0) {\n\t\t\t\tthis.applyEditsToBuffer(edits[0], model);\n\t\t\t}\n\t\t} else {\n\t\t\t// Add the new keybinding with new key\n\t\t\tthis.applyEditsToBuffer(setProperty(model.getValue(), [-1], this.asObject(newKey, keybindingItem.command, when, false), { tabSize, insertSpaces, eol })[0], model);\n\t\t}\n\t}\n\n\tprivate removeUserKeybinding(keybindingItem: ResolvedKeybindingItem, model: ITextModel): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>json.parse(model.getValue());\n\t\tconst userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(keybindingItem, userKeybindingEntries);\n\t\tif (userKeybindingEntryIndex !== -1) {\n\t\t\tthis.applyEditsToBuffer(setProperty(model.getValue(), [userKeybindingEntryIndex], undefined, { tabSize, insertSpaces, eol })[0], model);\n\t\t}\n\t}\n\n\tprivate removeDefaultKeybinding(keybindingItem: ResolvedKeybindingItem, model: ITextModel): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst key = keybindingItem.resolvedKeybinding ? keybindingItem.resolvedKeybinding.getUserSettingsLabel() : null;\n\t\tif (key) {\n\t\t\tthis.applyEditsToBuffer(setProperty(model.getValue(), [-1], this.asObject(key, keybindingItem.command, keybindingItem.when ? keybindingItem.when.serialize() : undefined, true), { tabSize, insertSpaces, eol })[0], model);\n\t\t}\n\t}\n\n\tprivate removeUnassignedDefaultKeybinding(keybindingItem: ResolvedKeybindingItem, model: ITextModel): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>json.parse(model.getValue());\n\t\tconst indices = this.findUnassignedDefaultKeybindingEntryIndex(keybindingItem, userKeybindingEntries).reverse();\n\t\tfor (const index of indices) {\n\t\t\tthis.applyEditsToBuffer(setProperty(model.getValue(), [index], undefined, { tabSize, insertSpaces, eol })[0], model);\n\t\t}\n\t}\n\n\tprivate findUserKeybindingEntryIndex(keybindingItem: ResolvedKeybindingItem, userKeybindingEntries: IUserFriendlyKeybinding[]): number {\n\t\tfor (let index = 0; index < userKeybindingEntries.length; index++) {\n\t\t\tconst keybinding = userKeybindingEntries[index];\n\t\t\tif (keybinding.command === keybindingItem.command) {\n\t\t\t\tif (!keybinding.when && !keybindingItem.when) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tif (keybinding.when && keybindingItem.when) {\n\t\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(keybinding.when);\n\t\t\t\t\tif (contextKeyExpr && contextKeyExpr.serialize() === keybindingItem.when.serialize()) {\n\t\t\t\t\t\treturn index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate findUnassignedDefaultKeybindingEntryIndex(keybindingItem: ResolvedKeybindingItem, userKeybindingEntries: IUserFriendlyKeybinding[]): number[] {\n\t\tconst indices: number[] = [];\n\t\tfor (let index = 0; index < userKeybindingEntries.length; index++) {\n\t\t\tif (userKeybindingEntries[index].command === `-${keybindingItem.command}`) {\n\t\t\t\tindices.push(index);\n\t\t\t}\n\t\t}\n\t\treturn indices;\n\t}\n\n\tprivate asObject(key: string, command: string | null, when: string | undefined, negate: boolean): any {\n\t\tconst object = { key };\n\t\tif (command) {\n\t\t\tobject['command'] = negate ? `-${command}` : command;\n\t\t}\n\t\tif (when) {\n\t\t\tobject['when'] = when;\n\t\t}\n\t\treturn object;\n\t}\n\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): void {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tlet currentText = model.getValueInRange(range);\n\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t}\n\n\n\tprivate resolveModelReference(): Promise<IReference<IResolvedTextEditorModel>> {\n\t\treturn this.fileService.existsFile(this.resource)\n\t\t\t.then(exists => {\n\t\t\t\tconst EOL = this.configurationService.getValue('files', { overrideIdentifier: 'json' })['eol'];\n\t\t\t\tconst result: Promise<any> = exists ? Promise.resolve(null) : this.fileService.updateContent(this.resource, this.getEmptyContent(EOL), { encoding: 'utf8' });\n\t\t\t\treturn result.then(() => this.textModelResolverService.createModelReference(this.resource));\n\t\t\t});\n\t}\n\n\tprivate resolveAndValidate(): Promise<IReference<IResolvedTextEditorModel>> {\n\n\t\t// Target cannot be dirty if not writing into buffer\n\t\tif (this.textFileService.isDirty(this.resource)) {\n\t\t\treturn Promise.reject(new Error(localize('errorKeybindingsFileDirty', \"Unable to write because the keybindings configuration file is dirty. Please save it first and then try again.\")));\n\t\t}\n\n\t\treturn this.resolveModelReference()\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\t\t\t\tconst EOL = model.getEOL();\n\t\t\t\tif (model.getValue()) {\n\t\t\t\t\tconst parsed = this.parse(model);\n\t\t\t\t\tif (parsed.parseErrors.length) {\n\t\t\t\t\t\treturn Promise.reject<any>(new Error(localize('parseErrors', \"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.\")));\n\t\t\t\t\t}\n\t\t\t\t\tif (parsed.result) {\n\t\t\t\t\t\tif (!isArray(parsed.result)) {\n\t\t\t\t\t\t\treturn Promise.reject<any>(new Error(localize('errorInvalidConfiguration', \"Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst content = EOL + '[]';\n\t\t\t\t\t\tthis.applyEditsToBuffer({ content, length: content.length, offset: model.getValue().length }, model);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst content = this.getEmptyContent(EOL);\n\t\t\t\t\tthis.applyEditsToBuffer({ content, length: content.length, offset: 0 }, model);\n\t\t\t\t}\n\t\t\t\treturn reference;\n\t\t\t});\n\t}\n\n\tprivate parse(model: ITextModel): { result: IUserFriendlyKeybinding[], parseErrors: json.ParseError[] } {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tconst result = json.parse(model.getValue(), parseErrors);\n\t\treturn { result, parseErrors };\n\t}\n\n\tprivate getEmptyContent(EOL: string): string {\n\t\treturn '// ' + localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + EOL + '[]';\n\t}\n}\n\nregisterSingleton(IKeybindingEditingService, KeybindingsEditingService, true);"]}]}