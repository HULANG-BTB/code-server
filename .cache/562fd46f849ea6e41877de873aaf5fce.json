{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadLanguages.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadLanguages.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadLanguages = /** @class */ (function () {\n    function MainThreadLanguages(_extHostContext, _modeService, _modelService) {\n        this._modeService = _modeService;\n        this._modelService = _modelService;\n    }\n    MainThreadLanguages.prototype.dispose = function () {\n        // nothing\n    };\n    MainThreadLanguages.prototype.$getLanguages = function () {\n        return Promise.resolve(this._modeService.getRegisteredModes());\n    };\n    MainThreadLanguages.prototype.$changeLanguage = function (resource, languageId) {\n        var uri = uri_1.URI.revive(resource);\n        var model = this._modelService.getModel(uri);\n        if (!model) {\n            return Promise.reject(new Error('Invalid uri'));\n        }\n        var languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n        if (!languageIdentifier || languageIdentifier.language !== languageId) {\n            return Promise.reject(new Error(\"Unknown language id: \" + languageId));\n        }\n        this._modelService.setMode(model, this._modeService.create(languageId));\n        return Promise.resolve(undefined);\n    };\n    MainThreadLanguages = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadLanguages),\n        tslib_1.__param(1, modeService_1.IModeService),\n        tslib_1.__param(2, modelService_1.IModelService)\n    ], MainThreadLanguages);\n    return MainThreadLanguages;\n}());\nexports.MainThreadLanguages = MainThreadLanguages;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadLanguages.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadLanguages.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,0CAAwD;AACxD,qEAAqE;AACrE,uEAAuE;AACvE,+DAAoG;AACpG,6EAAgF;AAGhF;IAEC,6BACC,eAAgC,EACD,YAA0B,EACzB,aAA4B;QAD7B,iBAAY,GAAZ,YAAY,CAAc;QACzB,kBAAa,GAAb,aAAa,CAAe;IAE7D,CAAC;IAED,qCAAO,GAAP;QACC,UAAU;IACX,CAAC;IAED,2CAAa,GAAb;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,6CAAe,GAAf,UAAgB,QAAuB,EAAE,UAAkB;QAC1D,IAAM,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,EAAE;YACX,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;SAChD;QACD,IAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,QAAQ,KAAK,UAAU,EAAE;YACtE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,0BAAwB,UAAY,CAAC,CAAC,CAAC;SACvE;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QACxE,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IA7BW,mBAAmB;QAD/B,uCAAoB,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAKnD,mBAAA,0BAAY,CAAA;QACZ,mBAAA,4BAAa,CAAA;OALH,mBAAmB,CA8B/B;IAAD,0BAAC;CAAA,AA9BD,IA8BC;AA9BY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { MainThreadLanguagesShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadLanguages)\nexport class MainThreadLanguages implements MainThreadLanguagesShape {\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// nothing\n\t}\n\n\t$getLanguages(): Promise<string[]> {\n\t\treturn Promise.resolve(this._modeService.getRegisteredModes());\n\t}\n\n\t$changeLanguage(resource: UriComponents, languageId: string): Promise<void> {\n\t\tconst uri = URI.revive(resource);\n\t\tconst model = this._modelService.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn Promise.reject(new Error('Invalid uri'));\n\t\t}\n\t\tconst languageIdentifier = this._modeService.getLanguageIdentifier(languageId);\n\t\tif (!languageIdentifier || languageIdentifier.language !== languageId) {\n\t\t\treturn Promise.reject(new Error(`Unknown language id: ${languageId}`));\n\t\t}\n\t\tthis._modelService.setMode(model, this._modeService.create(languageId));\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}