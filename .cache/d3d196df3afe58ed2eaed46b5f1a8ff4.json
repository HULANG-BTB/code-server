{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/explorerService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/explorerService.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar explorerModel_1 = require(\"vs/workbench/contrib/files/common/explorerModel\");\nvar files_2 = require(\"vs/platform/files/common/files\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar resources_2 = require(\"vs/workbench/common/resources\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nfunction getFileEventsExcludes(configurationService, root) {\n    var scope = root ? { resource: root } : undefined;\n    var configuration = scope ? configurationService.getValue(scope) : configurationService.getValue();\n    return (configuration && configuration.files && configuration.files.exclude) || Object.create(null);\n}\nvar ExplorerService = /** @class */ (function () {\n    function ExplorerService(fileService, instantiationService, configurationService, contextService, clipboardService, editorService) {\n        this.fileService = fileService;\n        this.instantiationService = instantiationService;\n        this.configurationService = configurationService;\n        this.contextService = contextService;\n        this.clipboardService = clipboardService;\n        this.editorService = editorService;\n        this._onDidChangeRoots = new event_1.Emitter();\n        this._onDidChangeItem = new event_1.Emitter();\n        this._onDidChangeEditable = new event_1.Emitter();\n        this._onDidSelectResource = new event_1.Emitter();\n        this._onDidCopyItems = new event_1.Emitter();\n        this.disposables = [];\n        this._sortOrder = this.configurationService.getValue('explorer.sortOrder');\n    }\n    Object.defineProperty(ExplorerService.prototype, \"roots\", {\n        get: function () {\n            return this.model.roots;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"onDidChangeRoots\", {\n        get: function () {\n            return this._onDidChangeRoots.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"onDidChangeItem\", {\n        get: function () {\n            return this._onDidChangeItem.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"onDidChangeEditable\", {\n        get: function () {\n            return this._onDidChangeEditable.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"onDidSelectResource\", {\n        get: function () {\n            return this._onDidSelectResource.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"onDidCopyItems\", {\n        get: function () {\n            return this._onDidCopyItems.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"sortOrder\", {\n        get: function () {\n            return this._sortOrder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"fileEventsFilter\", {\n        // Memoized locals\n        get: function () {\n            var _this = this;\n            var fileEventsFilter = this.instantiationService.createInstance(resources_2.ResourceGlobMatcher, function (root) { return getFileEventsExcludes(_this.configurationService, root); }, function (event) { return event.affectsConfiguration(files_2.FILES_EXCLUDE_CONFIG); });\n            this.disposables.push(fileEventsFilter);\n            return fileEventsFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerService.prototype, \"model\", {\n        get: function () {\n            var _this = this;\n            var model = new explorerModel_1.ExplorerModel(this.contextService);\n            this.disposables.push(model);\n            this.disposables.push(this.fileService.onAfterOperation(function (e) { return _this.onFileOperation(e); }));\n            this.disposables.push(this.fileService.onFileChanges(function (e) { return _this.onFileChanges(e); }));\n            this.disposables.push(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(_this.configurationService.getValue()); }));\n            this.disposables.push(this.fileService.onDidChangeFileSystemProviderRegistrations(function () { return _this._onDidChangeItem.fire(undefined); }));\n            this.disposables.push(model.onDidChangeRoots(function () { return _this._onDidChangeRoots.fire(); }));\n            return model;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // IExplorerService methods\n    ExplorerService.prototype.findClosest = function (resource) {\n        return this.model.findClosest(resource);\n    };\n    ExplorerService.prototype.setEditable = function (stat, data) {\n        if (!data) {\n            this.editable = undefined;\n        }\n        else {\n            this.editable = { stat: stat, data: data };\n        }\n        this._onDidChangeEditable.fire(stat);\n    };\n    ExplorerService.prototype.setToCopy = function (items, cut) {\n        var previouslyCutItems = this.cutItems;\n        this.cutItems = cut ? items : undefined;\n        this.clipboardService.writeResources(items.map(function (s) { return s.resource; }));\n        this._onDidCopyItems.fire({ items: items, cut: cut, previouslyCutItems: previouslyCutItems });\n    };\n    ExplorerService.prototype.isCut = function (item) {\n        return !!this.cutItems && this.cutItems.indexOf(item) >= 0;\n    };\n    ExplorerService.prototype.getEditableData = function (stat) {\n        return this.editable && this.editable.stat === stat ? this.editable.data : undefined;\n    };\n    ExplorerService.prototype.isEditable = function (stat) {\n        return !!this.editable && (this.editable.stat === stat || !stat);\n    };\n    ExplorerService.prototype.select = function (resource, reveal) {\n        var _this = this;\n        var fileStat = this.findClosest(resource);\n        if (fileStat) {\n            this._onDidSelectResource.fire({ resource: fileStat.resource, reveal: reveal });\n            return Promise.resolve(undefined);\n        }\n        // Stat needs to be resolved first and then revealed\n        var options = { resolveTo: [resource], resolveMetadata: false };\n        var workspaceFolder = this.contextService.getWorkspaceFolder(resource);\n        var rootUri = workspaceFolder ? workspaceFolder.uri : this.roots[0].resource;\n        var root = this.roots.filter(function (r) { return r.resource.toString() === rootUri.toString(); }).pop();\n        return this.fileService.resolveFile(rootUri, options).then(function (stat) {\n            // Convert to model\n            var modelStat = explorerModel_1.ExplorerItem.create(stat, undefined, options.resolveTo);\n            // Update Input with disk Stat\n            explorerModel_1.ExplorerItem.mergeLocalWithDisk(modelStat, root);\n            var item = root.find(resource);\n            _this._onDidChangeItem.fire(item ? item.parent : undefined);\n            // Select and Reveal\n            _this._onDidSelectResource.fire({ resource: item ? item.resource : undefined, reveal: reveal });\n        }, function () {\n            root.isError = true;\n            _this._onDidChangeItem.fire(root);\n        });\n    };\n    ExplorerService.prototype.refresh = function () {\n        this.model.roots.forEach(function (r) { return r.forgetChildren(); });\n        this._onDidChangeItem.fire(undefined);\n        var resource = this.editorService.activeEditor ? this.editorService.activeEditor.getResource() : undefined;\n        if (resource) {\n            // We did a top level refresh, reveal the active file #67118\n            this.select(resource, true);\n        }\n    };\n    // File events\n    ExplorerService.prototype.onFileOperation = function (e) {\n        var _this = this;\n        // Add\n        if (e.operation === files_2.FileOperation.CREATE || e.operation === files_2.FileOperation.COPY) {\n            var addedElement_1 = e.target;\n            var parentResource = resources_1.dirname(addedElement_1.resource);\n            var parents = this.model.findAll(parentResource);\n            if (parents.length) {\n                // Add the new file to its parent (Model)\n                parents.forEach(function (p) {\n                    // We have to check if the parent is resolved #29177\n                    var resolveMetadata = _this.sortOrder === \"modified\";\n                    var thenable = p.isDirectoryResolved ? Promise.resolve(undefined) : _this.fileService.resolveFile(p.resource, { resolveMetadata: resolveMetadata });\n                    thenable.then(function (stat) {\n                        if (stat) {\n                            var modelStat = explorerModel_1.ExplorerItem.create(stat, p.parent);\n                            explorerModel_1.ExplorerItem.mergeLocalWithDisk(modelStat, p);\n                        }\n                        var childElement = explorerModel_1.ExplorerItem.create(addedElement_1, p.parent);\n                        // Make sure to remove any previous version of the file if any\n                        p.removeChild(childElement);\n                        p.addChild(childElement);\n                        // Refresh the Parent (View)\n                        _this._onDidChangeItem.fire(p);\n                    });\n                });\n            }\n        }\n        // Move (including Rename)\n        else if (e.operation === files_2.FileOperation.MOVE) {\n            var oldResource = e.resource;\n            var newElement_1 = e.target;\n            var oldParentResource = resources_1.dirname(oldResource);\n            var newParentResource = resources_1.dirname(newElement_1.resource);\n            // Handle Rename\n            if (oldParentResource.toString() === newParentResource.toString()) {\n                var modelElements = this.model.findAll(oldResource);\n                modelElements.forEach(function (modelElement) {\n                    // Rename File (Model)\n                    modelElement.rename(newElement_1);\n                    _this._onDidChangeItem.fire(modelElement.parent);\n                });\n            }\n            // Handle Move\n            else {\n                var newParents_1 = this.model.findAll(newParentResource);\n                var modelElements = this.model.findAll(oldResource);\n                if (newParents_1.length && modelElements.length) {\n                    // Move in Model\n                    modelElements.forEach(function (modelElement, index) {\n                        var oldParent = modelElement.parent;\n                        modelElement.move(newParents_1[index]);\n                        _this._onDidChangeItem.fire(oldParent);\n                        _this._onDidChangeItem.fire(newParents_1[index]);\n                    });\n                }\n            }\n        }\n        // Delete\n        else if (e.operation === files_2.FileOperation.DELETE) {\n            var modelElements = this.model.findAll(e.resource);\n            modelElements.forEach(function (element) {\n                if (element.parent) {\n                    var parent = element.parent;\n                    // Remove Element from Parent (Model)\n                    parent.removeChild(element);\n                    // Refresh Parent (View)\n                    _this._onDidChangeItem.fire(parent);\n                }\n            });\n        }\n    };\n    ExplorerService.prototype.onFileChanges = function (e) {\n        var _this = this;\n        // Check if an explorer refresh is necessary (delayed to give internal events a chance to react first)\n        // Note: there is no guarantee when the internal events are fired vs real ones. Code has to deal with the fact that one might\n        // be fired first over the other or not at all.\n        setTimeout(function () {\n            // Filter to the ones we care\n            var shouldRefresh = function () {\n                e = _this.filterToViewRelevantEvents(e);\n                // Handle added files/folders\n                var added = e.getAdded();\n                if (added.length) {\n                    // Check added: Refresh if added file/folder is not part of resolved root and parent is part of it\n                    var ignoredPaths = {};\n                    for (var i = 0; i < added.length; i++) {\n                        var change = added[i];\n                        // Find parent\n                        var parent = resources_1.dirname(change.resource);\n                        // Continue if parent was already determined as to be ignored\n                        if (ignoredPaths[parent.toString()]) {\n                            continue;\n                        }\n                        // Compute if parent is visible and added file not yet part of it\n                        var parentStat = _this.model.findClosest(parent);\n                        if (parentStat && parentStat.isDirectoryResolved && !_this.model.findClosest(change.resource)) {\n                            return true;\n                        }\n                        // Keep track of path that can be ignored for faster lookup\n                        if (!parentStat || !parentStat.isDirectoryResolved) {\n                            ignoredPaths[parent.toString()] = true;\n                        }\n                    }\n                }\n                // Handle deleted files/folders\n                var deleted = e.getDeleted();\n                if (deleted.length) {\n                    // Check deleted: Refresh if deleted file/folder part of resolved root\n                    for (var j = 0; j < deleted.length; j++) {\n                        var del = deleted[j];\n                        var item = _this.model.findClosest(del.resource);\n                        if (item && item.parent) {\n                            return true;\n                        }\n                    }\n                }\n                // Handle updated files/folders if we sort by modified\n                if (_this._sortOrder === files_1.SortOrderConfiguration.MODIFIED) {\n                    var updated = e.getUpdated();\n                    // Check updated: Refresh if updated file/folder part of resolved root\n                    for (var j = 0; j < updated.length; j++) {\n                        var upd = updated[j];\n                        var item = _this.model.findClosest(upd.resource);\n                        if (item && item.parent) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            if (true || shouldRefresh()) {\n                _this.roots.forEach(function (r) { return r.forgetChildren(); });\n                _this._onDidChangeItem.fire(undefined);\n            }\n        }, ExplorerService.EXPLORER_FILE_CHANGES_REACT_DELAY);\n    };\n    ExplorerService.prototype.filterToViewRelevantEvents = function (e) {\n        var _this = this;\n        return new files_2.FileChangesEvent(e.changes.filter(function (change) {\n            if (change.type === files_2.FileChangeType.UPDATED && _this._sortOrder !== files_1.SortOrderConfiguration.MODIFIED) {\n                return false; // we only are about updated if we sort by modified time\n            }\n            if (!_this.contextService.isInsideWorkspace(change.resource)) {\n                return false; // exclude changes for resources outside of workspace\n            }\n            if (_this.fileEventsFilter.matches(change.resource)) {\n                return false; // excluded via files.exclude setting\n            }\n            return true;\n        }));\n    };\n    ExplorerService.prototype.onConfigurationUpdated = function (configuration, event) {\n        var configSortOrder = configuration && configuration.explorer && configuration.explorer.sortOrder || 'default';\n        if (this._sortOrder !== configSortOrder) {\n            var shouldRefresh = this._sortOrder !== undefined;\n            this._sortOrder = configSortOrder;\n            if (shouldRefresh) {\n                this.refresh();\n            }\n        }\n    };\n    ExplorerService.prototype.dispose = function () {\n        lifecycle_1.dispose(this.disposables);\n    };\n    ExplorerService.EXPLORER_FILE_CHANGES_REACT_DELAY = 500; // delay in ms to react to file changes to give our internal events a chance to react first\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ExplorerService.prototype, \"fileEventsFilter\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ExplorerService.prototype, \"model\", null);\n    ExplorerService = tslib_1.__decorate([\n        tslib_1.__param(0, files_2.IFileService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, clipboardService_1.IClipboardService),\n        tslib_1.__param(5, editorService_1.IEditorService)\n    ], ExplorerService);\n    return ExplorerService;\n}());\nexports.ExplorerService = ExplorerService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/explorerService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/explorerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IExplorerService, IEditableData, IFilesConfiguration, SortOrder, SortOrderConfiguration } from 'vs/workbench/contrib/files/common/files';\nimport { ExplorerItem, ExplorerModel } from 'vs/workbench/contrib/files/common/explorerModel';\nimport { URI } from 'vs/base/common/uri';\nimport { FileOperationEvent, FileOperation, IFileStat, IFileService, FileChangesEvent, FILES_EXCLUDE_CONFIG, FileChangeType, IResolveFileOptions } from 'vs/platform/files/common/files';\nimport { dirname } from 'vs/base/common/resources';\nimport { memoize } from 'vs/base/common/decorators';\nimport { ResourceGlobMatcher } from 'vs/workbench/common/resources';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { IExpression } from 'vs/base/common/glob';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nfunction getFileEventsExcludes(configurationService: IConfigurationService, root?: URI): IExpression {\n\tconst scope = root ? { resource: root } : undefined;\n\tconst configuration = scope ? configurationService.getValue<IFilesConfiguration>(scope) : configurationService.getValue<IFilesConfiguration>();\n\n\treturn (configuration && configuration.files && configuration.files.exclude) || Object.create(null);\n}\n\nexport class ExplorerService implements IExplorerService {\n\t_serviceBrand: any;\n\n\tprivate static readonly EXPLORER_FILE_CHANGES_REACT_DELAY = 500; // delay in ms to react to file changes to give our internal events a chance to react first\n\n\tprivate _onDidChangeRoots = new Emitter<void>();\n\tprivate _onDidChangeItem = new Emitter<ExplorerItem | undefined>();\n\tprivate _onDidChangeEditable = new Emitter<ExplorerItem>();\n\tprivate _onDidSelectResource = new Emitter<{ resource?: URI, reveal?: boolean }>();\n\tprivate _onDidCopyItems = new Emitter<{ items: ExplorerItem[], cut: boolean, previouslyCutItems: ExplorerItem[] | undefined }>();\n\tprivate disposables: IDisposable[] = [];\n\tprivate editable: { stat: ExplorerItem, data: IEditableData } | undefined;\n\tprivate _sortOrder: SortOrder;\n\tprivate cutItems: ExplorerItem[] | undefined;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IClipboardService private clipboardService: IClipboardService,\n\t\t@IEditorService private editorService: IEditorService\n\t) {\n\t\tthis._sortOrder = this.configurationService.getValue('explorer.sortOrder');\n\t}\n\n\tget roots(): ExplorerItem[] {\n\t\treturn this.model.roots;\n\t}\n\n\tget onDidChangeRoots(): Event<void> {\n\t\treturn this._onDidChangeRoots.event;\n\t}\n\n\tget onDidChangeItem(): Event<ExplorerItem | undefined> {\n\t\treturn this._onDidChangeItem.event;\n\t}\n\n\tget onDidChangeEditable(): Event<ExplorerItem> {\n\t\treturn this._onDidChangeEditable.event;\n\t}\n\n\tget onDidSelectResource(): Event<{ resource?: URI, reveal?: boolean }> {\n\t\treturn this._onDidSelectResource.event;\n\t}\n\n\tget onDidCopyItems(): Event<{ items: ExplorerItem[], cut: boolean, previouslyCutItems: ExplorerItem[] | undefined }> {\n\t\treturn this._onDidCopyItems.event;\n\t}\n\n\tget sortOrder(): SortOrder {\n\t\treturn this._sortOrder;\n\t}\n\n\t// Memoized locals\n\t@memoize private get fileEventsFilter(): ResourceGlobMatcher {\n\t\tconst fileEventsFilter = this.instantiationService.createInstance(\n\t\t\tResourceGlobMatcher,\n\t\t\t(root?: URI) => getFileEventsExcludes(this.configurationService, root),\n\t\t\t(event: IConfigurationChangeEvent) => event.affectsConfiguration(FILES_EXCLUDE_CONFIG)\n\t\t);\n\t\tthis.disposables.push(fileEventsFilter);\n\n\t\treturn fileEventsFilter;\n\t}\n\n\t@memoize get model(): ExplorerModel {\n\t\tconst model = new ExplorerModel(this.contextService);\n\t\tthis.disposables.push(model);\n\t\tthis.disposables.push(this.fileService.onAfterOperation(e => this.onFileOperation(e)));\n\t\tthis.disposables.push(this.fileService.onFileChanges(e => this.onFileChanges(e)));\n\t\tthis.disposables.push(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(this.configurationService.getValue<IFilesConfiguration>())));\n\t\tthis.disposables.push(this.fileService.onDidChangeFileSystemProviderRegistrations(() => this._onDidChangeItem.fire(undefined)));\n\t\tthis.disposables.push(model.onDidChangeRoots(() => this._onDidChangeRoots.fire()));\n\n\t\treturn model;\n\t}\n\n\t// IExplorerService methods\n\n\tfindClosest(resource: URI): ExplorerItem | null {\n\t\treturn this.model.findClosest(resource);\n\t}\n\n\tsetEditable(stat: ExplorerItem, data: IEditableData | null): void {\n\t\tif (!data) {\n\t\t\tthis.editable = undefined;\n\t\t} else {\n\t\t\tthis.editable = { stat, data };\n\t\t}\n\t\tthis._onDidChangeEditable.fire(stat);\n\t}\n\n\tsetToCopy(items: ExplorerItem[], cut: boolean): void {\n\t\tconst previouslyCutItems = this.cutItems;\n\t\tthis.cutItems = cut ? items : undefined;\n\t\tthis.clipboardService.writeResources(items.map(s => s.resource));\n\n\t\tthis._onDidCopyItems.fire({ items, cut, previouslyCutItems });\n\t}\n\n\tisCut(item: ExplorerItem): boolean {\n\t\treturn !!this.cutItems && this.cutItems.indexOf(item) >= 0;\n\t}\n\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined {\n\t\treturn this.editable && this.editable.stat === stat ? this.editable.data : undefined;\n\t}\n\n\tisEditable(stat: ExplorerItem | undefined): boolean {\n\t\treturn !!this.editable && (this.editable.stat === stat || !stat);\n\t}\n\n\tselect(resource: URI, reveal?: boolean): Promise<void> {\n\t\tconst fileStat = this.findClosest(resource);\n\t\tif (fileStat) {\n\t\t\tthis._onDidSelectResource.fire({ resource: fileStat.resource, reveal });\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Stat needs to be resolved first and then revealed\n\t\tconst options: IResolveFileOptions = { resolveTo: [resource], resolveMetadata: false };\n\t\tconst workspaceFolder = this.contextService.getWorkspaceFolder(resource);\n\t\tconst rootUri = workspaceFolder ? workspaceFolder.uri : this.roots[0].resource;\n\t\tconst root = this.roots.filter(r => r.resource.toString() === rootUri.toString()).pop()!;\n\t\treturn this.fileService.resolveFile(rootUri, options).then(stat => {\n\n\t\t\t// Convert to model\n\t\t\tconst modelStat = ExplorerItem.create(stat, undefined, options.resolveTo);\n\t\t\t// Update Input with disk Stat\n\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, root);\n\t\t\tconst item = root.find(resource);\n\t\t\tthis._onDidChangeItem.fire(item ? item.parent : undefined);\n\n\t\t\t// Select and Reveal\n\t\t\tthis._onDidSelectResource.fire({ resource: item ? item.resource : undefined, reveal });\n\t\t}, () => {\n\t\t\troot.isError = true;\n\t\t\tthis._onDidChangeItem.fire(root);\n\t\t});\n\t}\n\n\trefresh(): void {\n\t\tthis.model.roots.forEach(r => r.forgetChildren());\n\t\tthis._onDidChangeItem.fire(undefined);\n\t\tconst resource = this.editorService.activeEditor ? this.editorService.activeEditor.getResource() : undefined;\n\t\tif (resource) {\n\t\t\t// We did a top level refresh, reveal the active file #67118\n\t\t\tthis.select(resource, true);\n\t\t}\n\t}\n\n\t// File events\n\n\tprivate onFileOperation(e: FileOperationEvent): void {\n\t\t// Add\n\t\tif (e.operation === FileOperation.CREATE || e.operation === FileOperation.COPY) {\n\t\t\tconst addedElement = e.target!;\n\t\t\tconst parentResource = dirname(addedElement.resource)!;\n\t\t\tconst parents = this.model.findAll(parentResource);\n\n\t\t\tif (parents.length) {\n\n\t\t\t\t// Add the new file to its parent (Model)\n\t\t\t\tparents.forEach(p => {\n\t\t\t\t\t// We have to check if the parent is resolved #29177\n\t\t\t\t\tconst resolveMetadata = this.sortOrder === `modified`;\n\t\t\t\t\tconst thenable: Promise<IFileStat | undefined> = p.isDirectoryResolved ? Promise.resolve(undefined) : this.fileService.resolveFile(p.resource, { resolveMetadata });\n\t\t\t\t\tthenable.then(stat => {\n\t\t\t\t\t\tif (stat) {\n\t\t\t\t\t\t\tconst modelStat = ExplorerItem.create(stat, p.parent);\n\t\t\t\t\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, p);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst childElement = ExplorerItem.create(addedElement, p.parent);\n\t\t\t\t\t\t// Make sure to remove any previous version of the file if any\n\t\t\t\t\t\tp.removeChild(childElement);\n\t\t\t\t\t\tp.addChild(childElement);\n\t\t\t\t\t\t// Refresh the Parent (View)\n\t\t\t\t\t\tthis._onDidChangeItem.fire(p);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Move (including Rename)\n\t\telse if (e.operation === FileOperation.MOVE) {\n\t\t\tconst oldResource = e.resource;\n\t\t\tconst newElement = e.target!;\n\t\t\tconst oldParentResource = dirname(oldResource);\n\t\t\tconst newParentResource = dirname(newElement.resource);\n\n\t\t\t// Handle Rename\n\t\t\tif (oldParentResource.toString() === newParentResource.toString()) {\n\t\t\t\tconst modelElements = this.model.findAll(oldResource);\n\t\t\t\tmodelElements.forEach(modelElement => {\n\t\t\t\t\t// Rename File (Model)\n\t\t\t\t\tmodelElement.rename(newElement);\n\t\t\t\t\tthis._onDidChangeItem.fire(modelElement.parent);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handle Move\n\t\t\telse {\n\t\t\t\tconst newParents = this.model.findAll(newParentResource);\n\t\t\t\tconst modelElements = this.model.findAll(oldResource);\n\n\t\t\t\tif (newParents.length && modelElements.length) {\n\t\t\t\t\t// Move in Model\n\t\t\t\t\tmodelElements.forEach((modelElement, index) => {\n\t\t\t\t\t\tconst oldParent = modelElement.parent;\n\t\t\t\t\t\tmodelElement.move(newParents[index]);\n\t\t\t\t\t\tthis._onDidChangeItem.fire(oldParent);\n\t\t\t\t\t\tthis._onDidChangeItem.fire(newParents[index]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete\n\t\telse if (e.operation === FileOperation.DELETE) {\n\t\t\tconst modelElements = this.model.findAll(e.resource);\n\t\t\tmodelElements.forEach(element => {\n\t\t\t\tif (element.parent) {\n\t\t\t\t\tconst parent = element.parent;\n\t\t\t\t\t// Remove Element from Parent (Model)\n\t\t\t\t\tparent.removeChild(element);\n\t\t\t\t\t// Refresh Parent (View)\n\t\t\t\t\tthis._onDidChangeItem.fire(parent);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onFileChanges(e: FileChangesEvent): void {\n\t\t// Check if an explorer refresh is necessary (delayed to give internal events a chance to react first)\n\t\t// Note: there is no guarantee when the internal events are fired vs real ones. Code has to deal with the fact that one might\n\t\t// be fired first over the other or not at all.\n\t\tsetTimeout(() => {\n\t\t\t// Filter to the ones we care\n\t\t\tconst shouldRefresh = () => {\n\t\t\t\te = this.filterToViewRelevantEvents(e);\n\t\t\t\t// Handle added files/folders\n\t\t\t\tconst added = e.getAdded();\n\t\t\t\tif (added.length) {\n\n\t\t\t\t\t// Check added: Refresh if added file/folder is not part of resolved root and parent is part of it\n\t\t\t\t\tconst ignoredPaths: { [resource: string]: boolean } = <{ [resource: string]: boolean }>{};\n\t\t\t\t\tfor (let i = 0; i < added.length; i++) {\n\t\t\t\t\t\tconst change = added[i];\n\n\t\t\t\t\t\t// Find parent\n\t\t\t\t\t\tconst parent = dirname(change.resource);\n\n\t\t\t\t\t\t// Continue if parent was already determined as to be ignored\n\t\t\t\t\t\tif (ignoredPaths[parent.toString()]) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Compute if parent is visible and added file not yet part of it\n\t\t\t\t\t\tconst parentStat = this.model.findClosest(parent);\n\t\t\t\t\t\tif (parentStat && parentStat.isDirectoryResolved && !this.model.findClosest(change.resource)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Keep track of path that can be ignored for faster lookup\n\t\t\t\t\t\tif (!parentStat || !parentStat.isDirectoryResolved) {\n\t\t\t\t\t\t\tignoredPaths[parent.toString()] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Handle deleted files/folders\n\t\t\t\tconst deleted = e.getDeleted();\n\t\t\t\tif (deleted.length) {\n\n\t\t\t\t\t// Check deleted: Refresh if deleted file/folder part of resolved root\n\t\t\t\t\tfor (let j = 0; j < deleted.length; j++) {\n\t\t\t\t\t\tconst del = deleted[j];\n\t\t\t\t\t\tconst item = this.model.findClosest(del.resource);\n\t\t\t\t\t\tif (item && item.parent) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Handle updated files/folders if we sort by modified\n\t\t\t\tif (this._sortOrder === SortOrderConfiguration.MODIFIED) {\n\t\t\t\t\tconst updated = e.getUpdated();\n\n\t\t\t\t\t// Check updated: Refresh if updated file/folder part of resolved root\n\t\t\t\t\tfor (let j = 0; j < updated.length; j++) {\n\t\t\t\t\t\tconst upd = updated[j];\n\t\t\t\t\t\tconst item = this.model.findClosest(upd.resource);\n\n\t\t\t\t\t\tif (item && item.parent) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\tif (true || shouldRefresh()) {\n\t\t\t\tthis.roots.forEach(r => r.forgetChildren());\n\t\t\t\tthis._onDidChangeItem.fire(undefined);\n\t\t\t}\n\t\t}, ExplorerService.EXPLORER_FILE_CHANGES_REACT_DELAY);\n\t}\n\n\tprivate filterToViewRelevantEvents(e: FileChangesEvent): FileChangesEvent {\n\t\treturn new FileChangesEvent(e.changes.filter(change => {\n\t\t\tif (change.type === FileChangeType.UPDATED && this._sortOrder !== SortOrderConfiguration.MODIFIED) {\n\t\t\t\treturn false; // we only are about updated if we sort by modified time\n\t\t\t}\n\n\t\t\tif (!this.contextService.isInsideWorkspace(change.resource)) {\n\t\t\t\treturn false; // exclude changes for resources outside of workspace\n\t\t\t}\n\n\t\t\tif (this.fileEventsFilter.matches(change.resource)) {\n\t\t\t\treturn false; // excluded via files.exclude setting\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}));\n\t}\n\n\tprivate onConfigurationUpdated(configuration: IFilesConfiguration, event?: IConfigurationChangeEvent): void {\n\t\tconst configSortOrder = configuration && configuration.explorer && configuration.explorer.sortOrder || 'default';\n\t\tif (this._sortOrder !== configSortOrder) {\n\t\t\tconst shouldRefresh = this._sortOrder !== undefined;\n\t\t\tthis._sortOrder = configSortOrder;\n\t\t\tif (shouldRefresh) {\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t}\n}\n"]}]}