{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentGlyphWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentGlyphWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar color_1 = require(\"vs/base/common/color\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar overviewRulerDefault = new color_1.Color(new color_1.RGBA(197, 197, 197, 1));\nexports.overviewRulerCommentingRangeForeground = colorRegistry_1.registerColor('editorGutter.commentRangeForeground', { dark: overviewRulerDefault, light: overviewRulerDefault, hc: overviewRulerDefault }, nls.localize('editorGutterCommentRangeForeground', 'Editor gutter decoration color for commenting ranges.'));\nvar CommentGlyphWidget = /** @class */ (function () {\n    function CommentGlyphWidget(editor, lineNumber) {\n        this.commentsDecorations = [];\n        this._commentsOptions = this.createDecorationOptions();\n        this._editor = editor;\n        this.setLineNumber(lineNumber);\n    }\n    CommentGlyphWidget.prototype.createDecorationOptions = function () {\n        var decorationOptions = {\n            isWholeLine: true,\n            overviewRuler: {\n                color: themeService_1.themeColorFromId(exports.overviewRulerCommentingRangeForeground),\n                position: model_1.OverviewRulerLane.Center\n            },\n            linesDecorationsClassName: \"comment-range-glyph comment-thread\"\n        };\n        return textModel_1.ModelDecorationOptions.createDynamic(decorationOptions);\n    };\n    CommentGlyphWidget.prototype.setLineNumber = function (lineNumber) {\n        this._lineNumber = lineNumber;\n        var commentsDecorations = [{\n                range: {\n                    startLineNumber: lineNumber, startColumn: 1,\n                    endLineNumber: lineNumber, endColumn: 1\n                },\n                options: this._commentsOptions\n            }];\n        this.commentsDecorations = this._editor.deltaDecorations(this.commentsDecorations, commentsDecorations);\n    };\n    CommentGlyphWidget.prototype.getPosition = function () {\n        var range = this._editor.hasModel() && this.commentsDecorations && this.commentsDecorations.length\n            ? this._editor.getModel().getDecorationRange(this.commentsDecorations[0])\n            : null;\n        return {\n            position: {\n                lineNumber: range ? range.startLineNumber : this._lineNumber,\n                column: 1\n            },\n            preference: [editorBrowser_1.ContentWidgetPositionPreference.EXACT]\n        };\n    };\n    CommentGlyphWidget.prototype.dispose = function () {\n        if (this.commentsDecorations) {\n            this._editor.deltaDecorations(this.commentsDecorations, []);\n        }\n    };\n    return CommentGlyphWidget;\n}());\nexports.CommentGlyphWidget = CommentGlyphWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentGlyphWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentGlyphWidget.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,8CAAmD;AACnD,iEAAuH;AACvH,gDAAoF;AACpF,8DAA0E;AAC1E,wEAAuE;AACvE,sEAAyE;AAEzE,IAAM,oBAAoB,GAAG,IAAI,aAAK,CAAC,IAAI,YAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAEtD,QAAA,sCAAsC,GAAG,6BAAa,CAAC,qCAAqC,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,oBAAoB,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,oCAAoC,EAAE,uDAAuD,CAAC,CAAC,CAAC;AAE/S;IAMC,4BAAY,MAAmB,EAAE,UAAkB;QAH3C,wBAAmB,GAAa,EAAE,CAAC;QAI1C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACvD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC;IAEO,oDAAuB,GAA/B;QACC,IAAM,iBAAiB,GAA4B;YAClD,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE;gBACd,KAAK,EAAE,+BAAgB,CAAC,8CAAsC,CAAC;gBAC/D,QAAQ,EAAE,yBAAiB,CAAC,MAAM;aAClC;YACD,yBAAyB,EAAE,oCAAoC;SAC/D,CAAC;QAEF,OAAO,kCAAsB,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;IAChE,CAAC;IAED,0CAAa,GAAb,UAAc,UAAkB;QAC/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,mBAAmB,GAAG,CAAC;gBAC1B,KAAK,EAAE;oBACN,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC;oBAC3C,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;iBACvC;gBACD,OAAO,EAAE,IAAI,CAAC,gBAAgB;aAC9B,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;IACzG,CAAC;IAED,wCAAW,GAAX;QACC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM;YACnG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YACzE,CAAC,CAAC,IAAI,CAAC;QAER,OAAO;YACN,QAAQ,EAAE;gBACT,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW;gBAC5D,MAAM,EAAE,CAAC;aACT;YACD,UAAU,EAAE,CAAC,+CAA+B,CAAC,KAAK,CAAC;SACnD,CAAC;IACH,CAAC;IAED,oCAAO,GAAP;QACC,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;SAC5D;IACF,CAAC;IACF,yBAAC;AAAD,CAAC,AAzDD,IAyDC;AAzDY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { ContentWidgetPositionPreference, ICodeEditor, IContentWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { IModelDecorationOptions, OverviewRulerLane } from 'vs/editor/common/model';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\n\nconst overviewRulerDefault = new Color(new RGBA(197, 197, 197, 1));\n\nexport const overviewRulerCommentingRangeForeground = registerColor('editorGutter.commentRangeForeground', { dark: overviewRulerDefault, light: overviewRulerDefault, hc: overviewRulerDefault }, nls.localize('editorGutterCommentRangeForeground', 'Editor gutter decoration color for commenting ranges.'));\n\nexport class CommentGlyphWidget {\n\tprivate _lineNumber: number;\n\tprivate _editor: ICodeEditor;\n\tprivate commentsDecorations: string[] = [];\n\tprivate _commentsOptions: ModelDecorationOptions;\n\n\tconstructor(editor: ICodeEditor, lineNumber: number) {\n\t\tthis._commentsOptions = this.createDecorationOptions();\n\t\tthis._editor = editor;\n\t\tthis.setLineNumber(lineNumber);\n\t}\n\n\tprivate createDecorationOptions(): ModelDecorationOptions {\n\t\tconst decorationOptions: IModelDecorationOptions = {\n\t\t\tisWholeLine: true,\n\t\t\toverviewRuler: {\n\t\t\t\tcolor: themeColorFromId(overviewRulerCommentingRangeForeground),\n\t\t\t\tposition: OverviewRulerLane.Center\n\t\t\t},\n\t\t\tlinesDecorationsClassName: `comment-range-glyph comment-thread`\n\t\t};\n\n\t\treturn ModelDecorationOptions.createDynamic(decorationOptions);\n\t}\n\n\tsetLineNumber(lineNumber: number): void {\n\t\tthis._lineNumber = lineNumber;\n\t\tlet commentsDecorations = [{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber, startColumn: 1,\n\t\t\t\tendLineNumber: lineNumber, endColumn: 1\n\t\t\t},\n\t\t\toptions: this._commentsOptions\n\t\t}];\n\n\t\tthis.commentsDecorations = this._editor.deltaDecorations(this.commentsDecorations, commentsDecorations);\n\t}\n\n\tgetPosition(): IContentWidgetPosition {\n\t\tconst range = this._editor.hasModel() && this.commentsDecorations && this.commentsDecorations.length\n\t\t\t? this._editor.getModel().getDecorationRange(this.commentsDecorations[0])\n\t\t\t: null;\n\n\t\treturn {\n\t\t\tposition: {\n\t\t\t\tlineNumber: range ? range.startLineNumber : this._lineNumber,\n\t\t\t\tcolumn: 1\n\t\t\t},\n\t\t\tpreference: [ContentWidgetPositionPreference.EXACT]\n\t\t};\n\t}\n\n\tdispose() {\n\t\tif (this.commentsDecorations) {\n\t\t\tthis._editor.deltaDecorations(this.commentsDecorations, []);\n\t\t}\n\t}\n}\n"]}]}