{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\"], function (require, exports, editor_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The base editor model for the diff editor. It is made up of two editor models, the original version\n     * and the modified version.\n     */\n    class DiffEditorModel extends editor_1.EditorModel {\n        constructor(originalModel, modifiedModel) {\n            super();\n            this._originalModel = originalModel;\n            this._modifiedModel = modifiedModel;\n        }\n        get originalModel() {\n            if (!this._originalModel) {\n                return null;\n            }\n            return this._originalModel;\n        }\n        get modifiedModel() {\n            if (!this._modifiedModel) {\n                return null;\n            }\n            return this._modifiedModel;\n        }\n        load() {\n            return Promise.all([\n                this._originalModel ? this._originalModel.load() : Promise.resolve(undefined),\n                this._modifiedModel ? this._modifiedModel.load() : Promise.resolve(undefined),\n            ]).then(() => this);\n        }\n        isResolved() {\n            return !!this.originalModel && this.originalModel.isResolved() && !!this.modifiedModel && this.modifiedModel.isResolved();\n        }\n        dispose() {\n            // Do not propagate the dispose() call to the two models inside. We never created the two models\n            // (original and modified) so we can not dispose them without sideeffects. Rather rely on the\n            // models getting disposed when their related inputs get disposed from the diffEditorInput.\n            super.dispose();\n        }\n    }\n    exports.DiffEditorModel = DiffEditorModel;\n});\n",null]}