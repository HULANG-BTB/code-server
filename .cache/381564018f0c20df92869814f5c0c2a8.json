{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorState_1 = require(\"vs/editor/browser/core/editorState\");\nvar codeInset_1 = require(\"../common/codeInset\");\nvar codeInsetWidget_1 = require(\"./codeInsetWidget\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\n// import { localize } from 'vs/nls';\nvar CodeInsetController = /** @class */ (function () {\n    function CodeInsetController(_editor, _configService) {\n        var _this = this;\n        this._editor = _editor;\n        this._configService = _configService;\n        this._pendingWebviews = new Map();\n        this._isEnabled = this._configService.getValue('editor.codeInsets');\n        this._globalToDispose = [];\n        this._localToDispose = [];\n        this._insetWidgets = [];\n        this._currentFindCodeInsetSymbolsPromise = null;\n        this._modelChangeCounter = 0;\n        this._globalToDispose.push(this._editor.onDidChangeModel(function () { return _this._onModelChange(); }));\n        this._globalToDispose.push(this._editor.onDidChangeModelLanguage(function () { return _this._onModelChange(); }));\n        this._globalToDispose.push(this._configService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('editor.codeInsets')) {\n                var prevIsEnabled = _this._isEnabled;\n                _this._isEnabled = _this._configService.getValue('editor.codeInsets');\n                if (prevIsEnabled !== _this._isEnabled) {\n                    _this._onModelChange();\n                }\n            }\n        }));\n        this._globalToDispose.push(codeInset_1.CodeInsetProviderRegistry.onDidChange(this._onModelChange, this));\n        this._onModelChange();\n    }\n    CodeInsetController.get = function (editor) {\n        return editor.getContribution(CodeInsetController.ID);\n    };\n    CodeInsetController.prototype.dispose = function () {\n        this._localDispose();\n        this._globalToDispose = lifecycle_1.dispose(this._globalToDispose);\n    };\n    CodeInsetController.prototype.acceptWebview = function (symbolId, webviewElement) {\n        var pendingWebview = this._pendingWebviews.get(symbolId);\n        if (pendingWebview) {\n            pendingWebview(webviewElement);\n            this._pendingWebviews.delete(symbolId);\n            return true;\n        }\n        return false;\n    };\n    CodeInsetController.prototype._localDispose = function () {\n        if (this._currentFindCodeInsetSymbolsPromise) {\n            this._currentFindCodeInsetSymbolsPromise.cancel();\n            this._currentFindCodeInsetSymbolsPromise = null;\n            this._modelChangeCounter++;\n        }\n        if (this._currentResolveCodeInsetSymbolsPromise) {\n            this._currentResolveCodeInsetSymbolsPromise.cancel();\n            this._currentResolveCodeInsetSymbolsPromise = null;\n        }\n        this._localToDispose = lifecycle_1.dispose(this._localToDispose);\n    };\n    CodeInsetController.prototype.getId = function () {\n        return CodeInsetController.ID;\n    };\n    CodeInsetController.prototype._onModelChange = function () {\n        var _this = this;\n        this._localDispose();\n        var model = this._editor.getModel();\n        if (!model || !this._isEnabled || !codeInset_1.CodeInsetProviderRegistry.has(model)) {\n            return;\n        }\n        for (var _i = 0, _a = codeInset_1.CodeInsetProviderRegistry.all(model); _i < _a.length; _i++) {\n            var provider = _a[_i];\n            if (typeof provider.onDidChange === 'function') {\n                var registration = provider.onDidChange(function () { return scheduler.schedule(); });\n                this._localToDispose.push(registration);\n            }\n        }\n        this._detectVisibleInsets = new async_1.RunOnceScheduler(function () {\n            _this._onViewportChanged();\n        }, 500);\n        var scheduler = new async_1.RunOnceScheduler(function () {\n            var counterValue = ++_this._modelChangeCounter;\n            if (_this._currentFindCodeInsetSymbolsPromise) {\n                _this._currentFindCodeInsetSymbolsPromise.cancel();\n            }\n            _this._currentFindCodeInsetSymbolsPromise = async_1.createCancelablePromise(function (token) { return codeInset_1.getCodeInsetData(model, token); });\n            _this._currentFindCodeInsetSymbolsPromise.then(function (codeInsetData) {\n                if (counterValue === _this._modelChangeCounter) { // only the last one wins\n                    _this._renderCodeInsetSymbols(codeInsetData);\n                    _this._detectVisibleInsets.schedule();\n                }\n            }, errors_1.onUnexpectedError);\n        }, 250);\n        this._localToDispose.push(scheduler);\n        this._localToDispose.push(this._detectVisibleInsets);\n        this._localToDispose.push(this._editor.onDidChangeModelContent(function () {\n            _this._editor.changeDecorations(function (changeAccessor) {\n                _this._editor.changeViewZones(function (viewAccessor) {\n                    var toDispose = [];\n                    var lastInsetLineNumber = -1;\n                    _this._insetWidgets.forEach(function (inset) {\n                        if (!inset.isValid() || lastInsetLineNumber === inset.getLineNumber()) {\n                            // invalid -> Inset collapsed, attach range doesn't exist anymore\n                            // line_number -> insets should never be on the same line\n                            toDispose.push(inset);\n                        }\n                        else {\n                            inset.reposition(viewAccessor);\n                            lastInsetLineNumber = inset.getLineNumber();\n                        }\n                    });\n                    var helper = new codeInsetWidget_1.CodeInsetHelper();\n                    toDispose.forEach(function (l) {\n                        l.dispose(helper, viewAccessor);\n                        _this._insetWidgets.splice(_this._insetWidgets.indexOf(l), 1);\n                    });\n                    helper.commit(changeAccessor);\n                });\n            });\n            // Compute new `visible` code insets\n            _this._detectVisibleInsets.schedule();\n            // Ask for all references again\n            scheduler.schedule();\n        }));\n        this._localToDispose.push(this._editor.onDidScrollChange(function (e) {\n            if (e.scrollTopChanged && _this._insetWidgets.length > 0) {\n                _this._detectVisibleInsets.schedule();\n            }\n        }));\n        this._localToDispose.push(this._editor.onDidLayoutChange(function () {\n            _this._detectVisibleInsets.schedule();\n        }));\n        this._localToDispose.push(lifecycle_1.toDisposable(function () {\n            if (_this._editor.getModel()) {\n                var scrollState = editorState_1.StableEditorScrollState.capture(_this._editor);\n                _this._editor.changeDecorations(function (changeAccessor) {\n                    _this._editor.changeViewZones(function (accessor) {\n                        _this._disposeAllInsets(changeAccessor, accessor);\n                    });\n                });\n                scrollState.restore(_this._editor);\n            }\n            else {\n                // No accessors available\n                _this._disposeAllInsets(null, null);\n            }\n        }));\n        scheduler.schedule();\n    };\n    CodeInsetController.prototype._disposeAllInsets = function (decChangeAccessor, viewZoneChangeAccessor) {\n        var helper = new codeInsetWidget_1.CodeInsetHelper();\n        this._insetWidgets.forEach(function (Inset) { return Inset.dispose(helper, viewZoneChangeAccessor); });\n        if (decChangeAccessor) {\n            helper.commit(decChangeAccessor);\n        }\n        this._insetWidgets = [];\n    };\n    CodeInsetController.prototype._renderCodeInsetSymbols = function (symbols) {\n        var _this = this;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        var maxLineNumber = this._editor.getModel().getLineCount();\n        var groups = [];\n        var lastGroup;\n        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n            var symbol = symbols_1[_i];\n            var line = symbol.symbol.range.startLineNumber;\n            if (line < 1 || line > maxLineNumber) {\n                // invalid code Inset\n                continue;\n            }\n            else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) {\n                // on same line as previous\n                lastGroup.push(symbol);\n            }\n            else {\n                // on later line as previous\n                lastGroup = [symbol];\n                groups.push(lastGroup);\n            }\n        }\n        var scrollState = editorState_1.StableEditorScrollState.capture(this._editor);\n        this._editor.changeDecorations(function (changeAccessor) {\n            _this._editor.changeViewZones(function (accessor) {\n                var codeInsetIndex = 0, groupsIndex = 0, helper = new codeInsetWidget_1.CodeInsetHelper();\n                while (groupsIndex < groups.length && codeInsetIndex < _this._insetWidgets.length) {\n                    var symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;\n                    var codeInsetLineNumber = _this._insetWidgets[codeInsetIndex].getLineNumber();\n                    if (codeInsetLineNumber < symbolsLineNumber) {\n                        _this._insetWidgets[codeInsetIndex].dispose(helper, accessor);\n                        _this._insetWidgets.splice(codeInsetIndex, 1);\n                    }\n                    else if (codeInsetLineNumber === symbolsLineNumber) {\n                        _this._insetWidgets[codeInsetIndex].updateCodeInsetSymbols(groups[groupsIndex], helper);\n                        groupsIndex++;\n                        codeInsetIndex++;\n                    }\n                    else {\n                        _this._insetWidgets.splice(codeInsetIndex, 0, new codeInsetWidget_1.CodeInsetWidget(groups[groupsIndex], _this._editor, helper));\n                        codeInsetIndex++;\n                        groupsIndex++;\n                    }\n                }\n                // Delete extra code insets\n                while (codeInsetIndex < _this._insetWidgets.length) {\n                    _this._insetWidgets[codeInsetIndex].dispose(helper, accessor);\n                    _this._insetWidgets.splice(codeInsetIndex, 1);\n                }\n                // Create extra symbols\n                while (groupsIndex < groups.length) {\n                    _this._insetWidgets.push(new codeInsetWidget_1.CodeInsetWidget(groups[groupsIndex], _this._editor, helper));\n                    groupsIndex++;\n                }\n                helper.commit(changeAccessor);\n            });\n        });\n        scrollState.restore(this._editor);\n    };\n    CodeInsetController.prototype._onViewportChanged = function () {\n        var _this = this;\n        if (this._currentResolveCodeInsetSymbolsPromise) {\n            this._currentResolveCodeInsetSymbolsPromise.cancel();\n            this._currentResolveCodeInsetSymbolsPromise = null;\n        }\n        var model = this._editor.getModel();\n        if (!model) {\n            return;\n        }\n        var allWidgetRequests = [];\n        var insetWidgets = [];\n        this._insetWidgets.forEach(function (inset) {\n            var widgetRequests = inset.computeIfNecessary(model);\n            if (widgetRequests) {\n                allWidgetRequests.push(widgetRequests);\n                insetWidgets.push(inset);\n            }\n        });\n        if (allWidgetRequests.length === 0) {\n            return;\n        }\n        this._currentResolveCodeInsetSymbolsPromise = async_1.createCancelablePromise(function (token) {\n            var allPromises = allWidgetRequests.map(function (widgetRequests, r) {\n                var widgetPromises = widgetRequests.map(function (request) {\n                    if (request.resolved) {\n                        return Promise.resolve(undefined);\n                    }\n                    var a = new Promise(function (resolve) {\n                        _this._pendingWebviews.set(request.symbol.id, function (element) {\n                            request.resolved = true;\n                            insetWidgets[r].adoptWebview(element);\n                            resolve();\n                        });\n                    });\n                    var b = request.provider.resolveCodeInset(model, request.symbol, token);\n                    return Promise.all([a, b]);\n                });\n                return Promise.all(widgetPromises);\n            });\n            return Promise.all(allPromises);\n        });\n        this._currentResolveCodeInsetSymbolsPromise.then(function () {\n            _this._currentResolveCodeInsetSymbolsPromise = null;\n        }).catch(function (err) {\n            _this._currentResolveCodeInsetSymbolsPromise = null;\n            errors_1.onUnexpectedError(err);\n        });\n    };\n    CodeInsetController.ID = 'css.editor.codeInset';\n    CodeInsetController = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], CodeInsetController);\n    return CodeInsetController;\n}());\nexports.CodeInsetController = CodeInsetController;\neditorExtensions_1.registerEditorContribution(CodeInsetController);\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    id: 'editor',\n    properties: {\n    // ['editor.codeInsets']: {\n    // \tdescription: localize('editor.codeInsets', \"Enable/disable editor code insets\"),\n    // \ttype: 'boolean',\n    // \tdefault: false\n    // }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, RunOnceScheduler } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { StableEditorScrollState } from 'vs/editor/browser/core/editorState';\nimport * as editorBrowser from 'vs/editor/browser/editorBrowser';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { IModelDecorationsChangeAccessor } from 'vs/editor/common/model';\nimport { CodeInsetProviderRegistry, getCodeInsetData, ICodeInsetData } from '../common/codeInset';\nimport { CodeInsetWidget, CodeInsetHelper } from './codeInsetWidget';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { WebviewElement } from 'vs/workbench/contrib/webview/electron-browser/webviewElement';\n// import { localize } from 'vs/nls';\n\nexport class CodeInsetController implements editorCommon.IEditorContribution {\n\n\tstatic get(editor: editorBrowser.ICodeEditor): CodeInsetController {\n\t\treturn editor.getContribution(CodeInsetController.ID);\n\t}\n\n\tprivate static readonly ID: string = 'css.editor.codeInset';\n\n\tprivate _isEnabled: boolean;\n\n\tprivate _globalToDispose: IDisposable[];\n\tprivate _localToDispose: IDisposable[];\n\tprivate _insetWidgets: CodeInsetWidget[];\n\tprivate _pendingWebviews = new Map<string, (element: WebviewElement) => any>();\n\tprivate _currentFindCodeInsetSymbolsPromise: CancelablePromise<ICodeInsetData[]> | null;\n\tprivate _modelChangeCounter: number;\n\tprivate _currentResolveCodeInsetSymbolsPromise: CancelablePromise<any> | null;\n\tprivate _detectVisibleInsets: RunOnceScheduler;\n\n\tconstructor(\n\t\tprivate _editor: editorBrowser.ICodeEditor,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t) {\n\t\tthis._isEnabled = this._configService.getValue<boolean>('editor.codeInsets');\n\n\t\tthis._globalToDispose = [];\n\t\tthis._localToDispose = [];\n\t\tthis._insetWidgets = [];\n\t\tthis._currentFindCodeInsetSymbolsPromise = null;\n\t\tthis._modelChangeCounter = 0;\n\n\t\tthis._globalToDispose.push(this._editor.onDidChangeModel(() => this._onModelChange()));\n\t\tthis._globalToDispose.push(this._editor.onDidChangeModelLanguage(() => this._onModelChange()));\n\t\tthis._globalToDispose.push(this._configService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.codeInsets')) {\n\t\t\t\tlet prevIsEnabled = this._isEnabled;\n\t\t\t\tthis._isEnabled = this._configService.getValue<boolean>('editor.codeInsets');\n\t\t\t\tif (prevIsEnabled !== this._isEnabled) {\n\t\t\t\t\tthis._onModelChange();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._globalToDispose.push(CodeInsetProviderRegistry.onDidChange(this._onModelChange, this));\n\t\tthis._onModelChange();\n\t}\n\n\tdispose(): void {\n\t\tthis._localDispose();\n\t\tthis._globalToDispose = dispose(this._globalToDispose);\n\t}\n\n\tacceptWebview(symbolId: string, webviewElement: WebviewElement): boolean {\n\t\tconst pendingWebview = this._pendingWebviews.get(symbolId);\n\t\tif (pendingWebview) {\n\t\t\tpendingWebview(webviewElement);\n\t\t\tthis._pendingWebviews.delete(symbolId);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _localDispose(): void {\n\t\tif (this._currentFindCodeInsetSymbolsPromise) {\n\t\t\tthis._currentFindCodeInsetSymbolsPromise.cancel();\n\t\t\tthis._currentFindCodeInsetSymbolsPromise = null;\n\t\t\tthis._modelChangeCounter++;\n\t\t}\n\t\tif (this._currentResolveCodeInsetSymbolsPromise) {\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise.cancel();\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise = null;\n\t\t}\n\t\tthis._localToDispose = dispose(this._localToDispose);\n\t}\n\n\tgetId(): string {\n\t\treturn CodeInsetController.ID;\n\t}\n\n\tprivate _onModelChange(): void {\n\t\tthis._localDispose();\n\n\t\tconst model = this._editor.getModel();\n\t\tif (!model || !this._isEnabled || !CodeInsetProviderRegistry.has(model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const provider of CodeInsetProviderRegistry.all(model)) {\n\t\t\tif (typeof provider.onDidChange === 'function') {\n\t\t\t\tlet registration = provider.onDidChange(() => scheduler.schedule());\n\t\t\t\tthis._localToDispose.push(registration);\n\t\t\t}\n\t\t}\n\n\t\tthis._detectVisibleInsets = new RunOnceScheduler(() => {\n\t\t\tthis._onViewportChanged();\n\t\t}, 500);\n\n\t\tconst scheduler = new RunOnceScheduler(() => {\n\t\t\tconst counterValue = ++this._modelChangeCounter;\n\t\t\tif (this._currentFindCodeInsetSymbolsPromise) {\n\t\t\t\tthis._currentFindCodeInsetSymbolsPromise.cancel();\n\t\t\t}\n\n\t\t\tthis._currentFindCodeInsetSymbolsPromise = createCancelablePromise(token => getCodeInsetData(model, token));\n\n\t\t\tthis._currentFindCodeInsetSymbolsPromise.then(codeInsetData => {\n\t\t\t\tif (counterValue === this._modelChangeCounter) { // only the last one wins\n\t\t\t\t\tthis._renderCodeInsetSymbols(codeInsetData);\n\t\t\t\t\tthis._detectVisibleInsets.schedule();\n\t\t\t\t}\n\t\t\t}, onUnexpectedError);\n\t\t}, 250);\n\n\t\tthis._localToDispose.push(scheduler);\n\n\t\tthis._localToDispose.push(this._detectVisibleInsets);\n\n\t\tthis._localToDispose.push(this._editor.onDidChangeModelContent(() => {\n\t\t\tthis._editor.changeDecorations(changeAccessor => {\n\t\t\t\tthis._editor.changeViewZones(viewAccessor => {\n\t\t\t\t\tlet toDispose: CodeInsetWidget[] = [];\n\t\t\t\t\tlet lastInsetLineNumber: number = -1;\n\t\t\t\t\tthis._insetWidgets.forEach(inset => {\n\t\t\t\t\t\tif (!inset.isValid() || lastInsetLineNumber === inset.getLineNumber()) {\n\t\t\t\t\t\t\t// invalid -> Inset collapsed, attach range doesn't exist anymore\n\t\t\t\t\t\t\t// line_number -> insets should never be on the same line\n\t\t\t\t\t\t\ttoDispose.push(inset);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tinset.reposition(viewAccessor);\n\t\t\t\t\t\t\tlastInsetLineNumber = inset.getLineNumber();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tlet helper = new CodeInsetHelper();\n\t\t\t\t\ttoDispose.forEach((l) => {\n\t\t\t\t\t\tl.dispose(helper, viewAccessor);\n\t\t\t\t\t\tthis._insetWidgets.splice(this._insetWidgets.indexOf(l), 1);\n\t\t\t\t\t});\n\t\t\t\t\thelper.commit(changeAccessor);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Compute new `visible` code insets\n\t\t\tthis._detectVisibleInsets.schedule();\n\t\t\t// Ask for all references again\n\t\t\tscheduler.schedule();\n\t\t}));\n\n\t\tthis._localToDispose.push(this._editor.onDidScrollChange(e => {\n\t\t\tif (e.scrollTopChanged && this._insetWidgets.length > 0) {\n\t\t\t\tthis._detectVisibleInsets.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._localToDispose.push(this._editor.onDidLayoutChange(() => {\n\t\t\tthis._detectVisibleInsets.schedule();\n\t\t}));\n\n\t\tthis._localToDispose.push(toDisposable(() => {\n\t\t\tif (this._editor.getModel()) {\n\t\t\t\tconst scrollState = StableEditorScrollState.capture(this._editor);\n\t\t\t\tthis._editor.changeDecorations((changeAccessor) => {\n\t\t\t\t\tthis._editor.changeViewZones((accessor) => {\n\t\t\t\t\t\tthis._disposeAllInsets(changeAccessor, accessor);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tscrollState.restore(this._editor);\n\t\t\t} else {\n\t\t\t\t// No accessors available\n\t\t\t\tthis._disposeAllInsets(null, null);\n\t\t\t}\n\t\t}));\n\n\t\tscheduler.schedule();\n\t}\n\n\tprivate _disposeAllInsets(decChangeAccessor: IModelDecorationsChangeAccessor | null, viewZoneChangeAccessor: editorBrowser.IViewZoneChangeAccessor | null): void {\n\t\tlet helper = new CodeInsetHelper();\n\t\tthis._insetWidgets.forEach((Inset) => Inset.dispose(helper, viewZoneChangeAccessor));\n\t\tif (decChangeAccessor) {\n\t\t\thelper.commit(decChangeAccessor);\n\t\t}\n\t\tthis._insetWidgets = [];\n\t}\n\n\tprivate _renderCodeInsetSymbols(symbols: ICodeInsetData[]): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet maxLineNumber = this._editor.getModel().getLineCount();\n\t\tlet groups: ICodeInsetData[][] = [];\n\t\tlet lastGroup: ICodeInsetData[] | undefined;\n\n\t\tfor (let symbol of symbols) {\n\t\t\tlet line = symbol.symbol.range.startLineNumber;\n\t\t\tif (line < 1 || line > maxLineNumber) {\n\t\t\t\t// invalid code Inset\n\t\t\t\tcontinue;\n\t\t\t} else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) {\n\t\t\t\t// on same line as previous\n\t\t\t\tlastGroup.push(symbol);\n\t\t\t} else {\n\t\t\t\t// on later line as previous\n\t\t\t\tlastGroup = [symbol];\n\t\t\t\tgroups.push(lastGroup);\n\t\t\t}\n\t\t}\n\n\t\tconst scrollState = StableEditorScrollState.capture(this._editor);\n\n\t\tthis._editor.changeDecorations(changeAccessor => {\n\t\t\tthis._editor.changeViewZones(accessor => {\n\n\t\t\t\tlet codeInsetIndex = 0, groupsIndex = 0, helper = new CodeInsetHelper();\n\n\t\t\t\twhile (groupsIndex < groups.length && codeInsetIndex < this._insetWidgets.length) {\n\n\t\t\t\t\tlet symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;\n\t\t\t\t\tlet codeInsetLineNumber = this._insetWidgets[codeInsetIndex].getLineNumber();\n\n\t\t\t\t\tif (codeInsetLineNumber < symbolsLineNumber) {\n\t\t\t\t\t\tthis._insetWidgets[codeInsetIndex].dispose(helper, accessor);\n\t\t\t\t\t\tthis._insetWidgets.splice(codeInsetIndex, 1);\n\t\t\t\t\t} else if (codeInsetLineNumber === symbolsLineNumber) {\n\t\t\t\t\t\tthis._insetWidgets[codeInsetIndex].updateCodeInsetSymbols(groups[groupsIndex], helper);\n\t\t\t\t\t\tgroupsIndex++;\n\t\t\t\t\t\tcodeInsetIndex++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._insetWidgets.splice(\n\t\t\t\t\t\t\tcodeInsetIndex,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tnew CodeInsetWidget(groups[groupsIndex], this._editor, helper)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcodeInsetIndex++;\n\t\t\t\t\t\tgroupsIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Delete extra code insets\n\t\t\t\twhile (codeInsetIndex < this._insetWidgets.length) {\n\t\t\t\t\tthis._insetWidgets[codeInsetIndex].dispose(helper, accessor);\n\t\t\t\t\tthis._insetWidgets.splice(codeInsetIndex, 1);\n\t\t\t\t}\n\n\t\t\t\t// Create extra symbols\n\t\t\t\twhile (groupsIndex < groups.length) {\n\t\t\t\t\tthis._insetWidgets.push(new CodeInsetWidget(\n\t\t\t\t\t\tgroups[groupsIndex],\n\t\t\t\t\t\tthis._editor, helper\n\t\t\t\t\t));\n\t\t\t\t\tgroupsIndex++;\n\t\t\t\t}\n\n\t\t\t\thelper.commit(changeAccessor);\n\t\t\t});\n\t\t});\n\n\t\tscrollState.restore(this._editor);\n\t}\n\n\tprivate _onViewportChanged(): void {\n\t\tif (this._currentResolveCodeInsetSymbolsPromise) {\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise.cancel();\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise = null;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst allWidgetRequests: ICodeInsetData[][] = [];\n\t\tconst insetWidgets: CodeInsetWidget[] = [];\n\t\tthis._insetWidgets.forEach(inset => {\n\t\t\tconst widgetRequests = inset.computeIfNecessary(model);\n\t\t\tif (widgetRequests) {\n\t\t\t\tallWidgetRequests.push(widgetRequests);\n\t\t\t\tinsetWidgets.push(inset);\n\t\t\t}\n\t\t});\n\n\t\tif (allWidgetRequests.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentResolveCodeInsetSymbolsPromise = createCancelablePromise(token => {\n\n\t\t\tconst allPromises = allWidgetRequests.map((widgetRequests, r) => {\n\n\t\t\t\tconst widgetPromises = widgetRequests.map(request => {\n\t\t\t\t\tif (request.resolved) {\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tlet a = new Promise(resolve => {\n\t\t\t\t\t\tthis._pendingWebviews.set(request.symbol.id, element => {\n\t\t\t\t\t\t\trequest.resolved = true;\n\t\t\t\t\t\t\tinsetWidgets[r].adoptWebview(element);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tlet b = request.provider.resolveCodeInset(model, request.symbol, token);\n\t\t\t\t\treturn Promise.all([a, b]);\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(widgetPromises);\n\t\t\t});\n\n\t\t\treturn Promise.all(allPromises);\n\t\t});\n\n\t\tthis._currentResolveCodeInsetSymbolsPromise.then(() => {\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise = null;\n\t\t}).catch(err => {\n\t\t\tthis._currentResolveCodeInsetSymbolsPromise = null;\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n}\n\nregisterEditorContribution(CodeInsetController);\n\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\tid: 'editor',\n\tproperties: {\n\t\t// ['editor.codeInsets']: {\n\t\t// \tdescription: localize('editor.codeInsets', \"Enable/disable editor code insets\"),\n\t\t// \ttype: 'boolean',\n\t\t// \tdefault: false\n\t\t// }\n\t}\n});\n"]}]}