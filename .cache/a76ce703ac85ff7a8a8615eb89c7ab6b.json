{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/modesGlyphHover.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/modesGlyphHover.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar htmlContent_1 = require(\"vs/base/common/htmlContent\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar hoverOperation_1 = require(\"vs/editor/contrib/hover/hoverOperation\");\nvar hoverWidgets_1 = require(\"vs/editor/contrib/hover/hoverWidgets\");\nvar markdownRenderer_1 = require(\"vs/editor/contrib/markdown/markdownRenderer\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar MarginComputer = /** @class */ (function () {\n    function MarginComputer(editor) {\n        this._editor = editor;\n        this._lineNumber = -1;\n    }\n    MarginComputer.prototype.setLineNumber = function (lineNumber) {\n        this._lineNumber = lineNumber;\n        this._result = [];\n    };\n    MarginComputer.prototype.clearResult = function () {\n        this._result = [];\n    };\n    MarginComputer.prototype.computeSync = function () {\n        var toHoverMessage = function (contents) {\n            return {\n                value: contents\n            };\n        };\n        var lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n        var result = [];\n        if (!lineDecorations) {\n            return result;\n        }\n        for (var _i = 0, lineDecorations_1 = lineDecorations; _i < lineDecorations_1.length; _i++) {\n            var d = lineDecorations_1[_i];\n            if (!d.options.glyphMarginClassName) {\n                continue;\n            }\n            var hoverMessage = d.options.glyphMarginHoverMessage;\n            if (!hoverMessage || htmlContent_1.isEmptyMarkdownString(hoverMessage)) {\n                continue;\n            }\n            result.push.apply(result, arrays_1.asArray(hoverMessage).map(toHoverMessage));\n        }\n        return result;\n    };\n    MarginComputer.prototype.onResult = function (result, isFromSynchronousComputation) {\n        this._result = this._result.concat(result);\n    };\n    MarginComputer.prototype.getResult = function () {\n        return this._result;\n    };\n    MarginComputer.prototype.getResultWithLoadingMessage = function () {\n        return this.getResult();\n    };\n    return MarginComputer;\n}());\nvar ModesGlyphHoverWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(ModesGlyphHoverWidget, _super);\n    function ModesGlyphHoverWidget(editor, modeService, openerService) {\n        if (openerService === void 0) { openerService = opener_1.NullOpenerService; }\n        var _this = _super.call(this, ModesGlyphHoverWidget.ID, editor) || this;\n        _this._lastLineNumber = -1;\n        _this._markdownRenderer = new markdownRenderer_1.MarkdownRenderer(_this._editor, modeService, openerService);\n        _this._computer = new MarginComputer(_this._editor);\n        _this._hoverOperation = new hoverOperation_1.HoverOperation(_this._computer, function (result) { return _this._withResult(result); }, undefined, function (result) { return _this._withResult(result); }, 300);\n        return _this;\n    }\n    ModesGlyphHoverWidget.prototype.dispose = function () {\n        this._renderDisposeables = lifecycle_1.dispose(this._renderDisposeables);\n        this._hoverOperation.cancel();\n        _super.prototype.dispose.call(this);\n    };\n    ModesGlyphHoverWidget.prototype.onModelDecorationsChanged = function () {\n        if (this.isVisible) {\n            // The decorations have changed and the hover is visible,\n            // we need to recompute the displayed text\n            this._hoverOperation.cancel();\n            this._computer.clearResult();\n            this._hoverOperation.start(hoverOperation_1.HoverStartMode.Delayed);\n        }\n    };\n    ModesGlyphHoverWidget.prototype.startShowingAt = function (lineNumber) {\n        if (this._lastLineNumber === lineNumber) {\n            // We have to show the widget at the exact same line number as before, so no work is needed\n            return;\n        }\n        this._hoverOperation.cancel();\n        this.hide();\n        this._lastLineNumber = lineNumber;\n        this._computer.setLineNumber(lineNumber);\n        this._hoverOperation.start(hoverOperation_1.HoverStartMode.Delayed);\n    };\n    ModesGlyphHoverWidget.prototype.hide = function () {\n        this._lastLineNumber = -1;\n        this._hoverOperation.cancel();\n        _super.prototype.hide.call(this);\n    };\n    ModesGlyphHoverWidget.prototype._withResult = function (result) {\n        this._messages = result;\n        if (this._messages.length > 0) {\n            this._renderMessages(this._lastLineNumber, this._messages);\n        }\n        else {\n            this.hide();\n        }\n    };\n    ModesGlyphHoverWidget.prototype._renderMessages = function (lineNumber, messages) {\n        var _this = this;\n        lifecycle_1.dispose(this._renderDisposeables);\n        this._renderDisposeables = [];\n        var fragment = document.createDocumentFragment();\n        messages.forEach(function (msg) {\n            var renderedContents = _this._markdownRenderer.render(msg.value);\n            _this._renderDisposeables.push(renderedContents);\n            fragment.appendChild(dom_1.$('div.hover-row', undefined, renderedContents.element));\n        });\n        this.updateContents(fragment);\n        this.showAt(lineNumber);\n    };\n    ModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\n    return ModesGlyphHoverWidget;\n}(hoverWidgets_1.GlyphHoverWidget));\nexports.ModesGlyphHoverWidget = ModesGlyphHoverWidget;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/modesGlyphHover.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/modesGlyphHover.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,2CAAwC;AACxC,0DAAoF;AACpF,sDAAgE;AAEhE,yEAAwG;AACxG,qEAAwE;AACxE,gFAA+E;AAE/E,2DAAqF;AACrF,gDAAgD;AAMhD;IAMC,wBAAY,MAAmB;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IACvB,CAAC;IAEM,sCAAa,GAApB,UAAqB,UAAkB;QACtC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,oCAAW,GAAlB;QACC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,oCAAW,GAAlB;QAEC,IAAM,cAAc,GAAG,UAAC,QAAyB;YAChD,OAAO;gBACN,KAAK,EAAE,QAAQ;aACf,CAAC;QACH,CAAC,CAAC;QAEF,IAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1E,IAAM,MAAM,GAAoB,EAAE,CAAC;QACnC,IAAI,CAAC,eAAe,EAAE;YACrB,OAAO,MAAM,CAAC;SACd;QAED,KAAgB,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe,EAAE;YAA5B,IAAM,CAAC,wBAAA;YACX,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE;gBACpC,SAAS;aACT;YAED,IAAM,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC;YACvD,IAAI,CAAC,YAAY,IAAI,mCAAqB,CAAC,YAAY,CAAC,EAAE;gBACzD,SAAS;aACT;YAED,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,gBAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;SAC1D;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,iCAAQ,GAAf,UAAgB,MAAuB,EAAE,4BAAqC;QAC7E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAEM,kCAAS,GAAhB;QACC,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAEM,oDAA2B,GAAlC;QACC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,CAAC;IACF,qBAAC;AAAD,CAAC,AA9DD,IA8DC;AAED;IAA2C,iDAAgB;IAW1D,+BACC,MAAmB,EACnB,WAAyB,EACzB,aAAwD;QAAxD,8BAAA,EAAA,gBAAuC,0BAAiB;QAHzD,YAKC,kBAAM,qBAAqB,CAAC,EAAE,EAAE,MAAM,CAAC,SAevC;QAbA,KAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;QAE1B,KAAI,CAAC,iBAAiB,GAAG,IAAI,mCAAgB,CAAC,KAAI,CAAC,OAAO,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QACxF,KAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;QAElD,KAAI,CAAC,eAAe,GAAG,IAAI,+BAAc,CACxC,KAAI,CAAC,SAAS,EACd,UAAC,MAAuB,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAxB,CAAwB,EACrD,SAAS,EACT,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAxB,CAAwB,EACzC,GAAG,CACH,CAAC;;IAEH,CAAC;IAEM,uCAAO,GAAd;QACC,IAAI,CAAC,mBAAmB,GAAG,mBAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAC9B,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAEM,yDAAyB,GAAhC;QACC,IAAI,IAAI,CAAC,SAAS,EAAE;YACnB,yDAAyD;YACzD,0CAA0C;YAC1C,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,+BAAc,CAAC,OAAO,CAAC,CAAC;SACnD;IACF,CAAC;IAEM,8CAAc,GAArB,UAAsB,UAAkB;QACvC,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE;YACxC,2FAA2F;YAC3F,OAAO;SACP;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAE9B,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACzC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,+BAAc,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAEM,oCAAI,GAAX;QACC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAC9B,iBAAM,IAAI,WAAE,CAAC;IACd,CAAC;IAEM,2CAAW,GAAlB,UAAmB,MAAuB;QACzC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QAExB,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAC3D;aAAM;YACN,IAAI,CAAC,IAAI,EAAE,CAAC;SACZ;IACF,CAAC;IAEO,+CAAe,GAAvB,UAAwB,UAAkB,EAAE,QAAyB;QAArE,iBAcC;QAbA,mBAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAClC,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAE9B,IAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;QAEnD,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG;YACpB,IAAM,gBAAgB,GAAG,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAClE,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAChD,QAAQ,CAAC,WAAW,CAAC,OAAC,CAAC,eAAe,EAAE,SAAS,EAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACzB,CAAC;IA5FsB,wBAAE,GAAG,sCAAsC,CAAC;IA6FpE,4BAAC;CAAA,AA/FD,CAA2C,+BAAgB,GA+F1D;AA/FY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from 'vs/base/browser/dom';\nimport { IMarkdownString, isEmptyMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { HoverOperation, HoverStartMode, IHoverComputer } from 'vs/editor/contrib/hover/hoverOperation';\nimport { GlyphHoverWidget } from 'vs/editor/contrib/hover/hoverWidgets';\nimport { MarkdownRenderer } from 'vs/editor/contrib/markdown/markdownRenderer';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IOpenerService, NullOpenerService } from 'vs/platform/opener/common/opener';\nimport { asArray } from 'vs/base/common/arrays';\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nclass MarginComputer implements IHoverComputer<IHoverMessage[]> {\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _lineNumber: number;\n\tprivate _result: IHoverMessage[];\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis._editor = editor;\n\t\tthis._lineNumber = -1;\n\t}\n\n\tpublic setLineNumber(lineNumber: number): void {\n\t\tthis._lineNumber = lineNumber;\n\t\tthis._result = [];\n\t}\n\n\tpublic clearResult(): void {\n\t\tthis._result = [];\n\t}\n\n\tpublic computeSync(): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tif (!d.options.glyphMarginClassName) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic onResult(result: IHoverMessage[], isFromSynchronousComputation: boolean): void {\n\t\tthis._result = this._result.concat(result);\n\t}\n\n\tpublic getResult(): IHoverMessage[] {\n\t\treturn this._result;\n\t}\n\n\tpublic getResultWithLoadingMessage(): IHoverMessage[] {\n\t\treturn this.getResult();\n\t}\n}\n\nexport class ModesGlyphHoverWidget extends GlyphHoverWidget {\n\n\tpublic static readonly ID = 'editor.contrib.modesGlyphHoverWidget';\n\tprivate _messages: IHoverMessage[];\n\tprivate _lastLineNumber: number;\n\n\tprivate readonly _markdownRenderer: MarkdownRenderer;\n\tprivate readonly _computer: MarginComputer;\n\tprivate readonly _hoverOperation: HoverOperation<IHoverMessage[]>;\n\tprivate _renderDisposeables: IDisposable[];\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tmodeService: IModeService,\n\t\topenerService: IOpenerService | null = NullOpenerService,\n\t) {\n\t\tsuper(ModesGlyphHoverWidget.ID, editor);\n\n\t\tthis._lastLineNumber = -1;\n\n\t\tthis._markdownRenderer = new MarkdownRenderer(this._editor, modeService, openerService);\n\t\tthis._computer = new MarginComputer(this._editor);\n\n\t\tthis._hoverOperation = new HoverOperation(\n\t\t\tthis._computer,\n\t\t\t(result: IHoverMessage[]) => this._withResult(result),\n\t\t\tundefined,\n\t\t\t(result: any) => this._withResult(result),\n\t\t\t300\n\t\t);\n\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._renderDisposeables = dispose(this._renderDisposeables);\n\t\tthis._hoverOperation.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tpublic onModelDecorationsChanged(): void {\n\t\tif (this.isVisible) {\n\t\t\t// The decorations have changed and the hover is visible,\n\t\t\t// we need to recompute the displayed text\n\t\t\tthis._hoverOperation.cancel();\n\t\t\tthis._computer.clearResult();\n\t\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t\t}\n\t}\n\n\tpublic startShowingAt(lineNumber: number): void {\n\t\tif (this._lastLineNumber === lineNumber) {\n\t\t\t// We have to show the widget at the exact same line number as before, so no work is needed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hoverOperation.cancel();\n\n\t\tthis.hide();\n\n\t\tthis._lastLineNumber = lineNumber;\n\t\tthis._computer.setLineNumber(lineNumber);\n\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t}\n\n\tpublic hide(): void {\n\t\tthis._lastLineNumber = -1;\n\t\tthis._hoverOperation.cancel();\n\t\tsuper.hide();\n\t}\n\n\tpublic _withResult(result: IHoverMessage[]): void {\n\t\tthis._messages = result;\n\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._renderMessages(this._lastLineNumber, this._messages);\n\t\t} else {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tprivate _renderMessages(lineNumber: number, messages: IHoverMessage[]): void {\n\t\tdispose(this._renderDisposeables);\n\t\tthis._renderDisposeables = [];\n\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tmessages.forEach((msg) => {\n\t\t\tconst renderedContents = this._markdownRenderer.render(msg.value);\n\t\t\tthis._renderDisposeables.push(renderedContents);\n\t\t\tfragment.appendChild($('div.hover-row', undefined, renderedContents.element));\n\t\t});\n\n\t\tthis.updateContents(fragment);\n\t\tthis.showAt(lineNumber);\n\t}\n}\n"]}]}