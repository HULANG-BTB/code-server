{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar binaryEditor_1 = require(\"vs/workbench/browser/parts/editor/binaryEditor\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar fileEditorInput_1 = require(\"vs/workbench/contrib/files/common/editors/fileEditorInput\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar files_2 = require(\"vs/platform/files/common/files\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\n/**\n * An implementation of editor for binary files like images.\n */\nvar BinaryFileEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(BinaryFileEditor, _super);\n    function BinaryFileEditor(telemetryService, themeService, fileService, windowsService, editorService, storageService) {\n        var _this = _super.call(this, BinaryFileEditor.ID, {\n            openInternal: function (input, options) { return _this.openInternal(input, options); },\n            openExternal: function (resource) { return _this.openExternal(resource); }\n        }, telemetryService, themeService, fileService, storageService) || this;\n        _this.windowsService = windowsService;\n        _this.editorService = editorService;\n        return _this;\n    }\n    BinaryFileEditor.prototype.openInternal = function (input, options) {\n        if (input instanceof fileEditorInput_1.FileEditorInput) {\n            input.setForceOpenAsText();\n            return this.editorService.openEditor(input, options, this.group).then(function () { return undefined; });\n        }\n        return Promise.resolve();\n    };\n    BinaryFileEditor.prototype.openExternal = function (resource) {\n        var _this = this;\n        this.windowsService.openExternal(resource.toString()).then(function (didOpen) {\n            if (!didOpen) {\n                return _this.windowsService.showItemInFolder(resource);\n            }\n            return undefined;\n        });\n    };\n    BinaryFileEditor.prototype.getTitle = function () {\n        return this.input ? this.input.getName() : nls.localize('binaryFileEditor', \"Binary File Viewer\");\n    };\n    BinaryFileEditor.ID = files_1.BINARY_FILE_EDITOR_ID;\n    BinaryFileEditor = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, themeService_1.IThemeService),\n        tslib_1.__param(2, files_2.IFileService),\n        tslib_1.__param(3, windows_1.IWindowsService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, storage_1.IStorageService)\n    ], BinaryFileEditor);\n    return BinaryFileEditor;\n}(binaryEditor_1.BaseBinaryResourceEditor));\nexports.BinaryFileEditor = BinaryFileEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,+EAA0F;AAC1F,oEAA2E;AAC3E,sEAAsE;AACtE,8DAAqE;AAErE,6FAA4F;AAE5F,iEAAgF;AAChF,wDAA8D;AAC9D,mFAAmF;AACnF,8DAAqE;AAErE;;GAEG;AACH;IAAsC,4CAAwB;IAI7D,0BACoB,gBAAmC,EACvC,YAA2B,EAC5B,WAAyB,EACL,cAA+B,EAChC,aAA6B,EAC7C,cAA+B;QANjD,YAQC,kBACC,gBAAgB,CAAC,EAAE,EACnB;YACC,YAAY,EAAE,UAAC,KAAK,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,EAAjC,CAAiC;YACnE,YAAY,EAAE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAA3B,CAA2B;SACrD,EACD,gBAAgB,EAChB,YAAY,EACZ,WAAW,EACX,cAAc,CACd,SACD;QAfkC,oBAAc,GAAd,cAAc,CAAiB;QAChC,mBAAa,GAAb,aAAa,CAAgB;;IAc/D,CAAC;IAEO,uCAAY,GAApB,UAAqB,KAAkB,EAAE,OAAsB;QAC9D,IAAI,KAAK,YAAY,iCAAe,EAAE;YACrC,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAE3B,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;SACvF;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAEO,uCAAY,GAApB,UAAqB,QAAa;QAAlC,iBAQC;QAPA,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YACjE,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,KAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACtD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,mCAAQ,GAAR;QACC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;IACnG,CAAC;IA7Ce,mBAAE,GAAG,6BAAqB,CAAC;IAF/B,gBAAgB;QAK1B,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,4BAAa,CAAA;QACb,mBAAA,oBAAY,CAAA;QACZ,mBAAA,yBAAe,CAAA;QACf,mBAAA,8BAAc,CAAA;QACd,mBAAA,yBAAe,CAAA;OAVL,gBAAgB,CAgD5B;IAAD,uBAAC;CAAA,AAhDD,CAAsC,uCAAwB,GAgD7D;AAhDY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { BaseBinaryResourceEditor } from 'vs/workbench/browser/parts/editor/binaryEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { EditorInput, EditorOptions } from 'vs/workbench/common/editor';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { BINARY_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\n\n/**\n * An implementation of editor for binary files like images.\n */\nexport class BinaryFileEditor extends BaseBinaryResourceEditor {\n\n\tstatic readonly ID = BINARY_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(\n\t\t\tBinaryFileEditor.ID,\n\t\t\t{\n\t\t\t\topenInternal: (input, options) => this.openInternal(input, options),\n\t\t\t\topenExternal: resource => this.openExternal(resource)\n\t\t\t},\n\t\t\ttelemetryService,\n\t\t\tthemeService,\n\t\t\tfileService,\n\t\t\tstorageService\n\t\t);\n\t}\n\n\tprivate openInternal(input: EditorInput, options: EditorOptions): Promise<void> {\n\t\tif (input instanceof FileEditorInput) {\n\t\t\tinput.setForceOpenAsText();\n\n\t\t\treturn this.editorService.openEditor(input, options, this.group).then(() => undefined);\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate openExternal(resource: URI): void {\n\t\tthis.windowsService.openExternal(resource.toString()).then(didOpen => {\n\t\t\tif (!didOpen) {\n\t\t\t\treturn this.windowsService.showItemInFolder(resource);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tgetTitle(): string | null {\n\t\treturn this.input ? this.input.getName() : nls.localize('binaryFileEditor', \"Binary File Viewer\");\n\t}\n}\n"]}]}