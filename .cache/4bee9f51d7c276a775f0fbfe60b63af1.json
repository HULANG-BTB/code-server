{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/surroundSelectionCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/surroundSelectionCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\"], function (require, exports, range_1, selection_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class SurroundSelectionCommand {\n        constructor(range, charBeforeSelection, charAfterSelection) {\n            this._range = range;\n            this._charBeforeSelection = charBeforeSelection;\n            this._charAfterSelection = charAfterSelection;\n        }\n        getEditOperations(model, builder) {\n            builder.addTrackedEditOperation(new range_1.Range(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection);\n            builder.addTrackedEditOperation(new range_1.Range(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);\n        }\n        computeCursorState(model, helper) {\n            let inverseEditOperations = helper.getInverseEditOperations();\n            let firstOperationRange = inverseEditOperations[0].range;\n            let secondOperationRange = inverseEditOperations[1].range;\n            return new selection_1.Selection(firstOperationRange.endLineNumber, firstOperationRange.endColumn, secondOperationRange.endLineNumber, secondOperationRange.endColumn - this._charAfterSelection.length);\n        }\n    }\n    exports.SurroundSelectionCommand = SurroundSelectionCommand;\n});\n",null]}