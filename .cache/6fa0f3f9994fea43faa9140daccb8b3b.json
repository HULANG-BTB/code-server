{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/viewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/viewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar composite_1 = require(\"vs/workbench/browser/composite\");\nvar layoutActions_1 = require(\"vs/workbench/browser/actions/layoutActions\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar Viewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(Viewlet, _super);\n    function Viewlet(id, configurationService, layoutService, telemetryService, themeService, storageService) {\n        var _this = _super.call(this, id, telemetryService, themeService, storageService) || this;\n        _this.configurationService = configurationService;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    Viewlet.prototype.getOptimalWidth = function () {\n        return null;\n    };\n    Viewlet.prototype.getContextMenuActions = function () {\n        var _this = this;\n        var toggleSidebarPositionAction = new layoutActions_1.ToggleSidebarPositionAction(layoutActions_1.ToggleSidebarPositionAction.ID, layoutActions_1.ToggleSidebarPositionAction.getLabel(this.layoutService), this.layoutService, this.configurationService);\n        return [toggleSidebarPositionAction,\n            {\n                id: layoutActions_1.ToggleSidebarVisibilityAction.ID,\n                label: nls.localize('compositePart.hideSideBarLabel', \"Hide Side Bar\"),\n                enabled: true,\n                run: function () { return _this.layoutService.setSideBarHidden(true); }\n            }];\n    };\n    return Viewlet;\n}(composite_1.Composite));\nexports.Viewlet = Viewlet;\n/**\n * A viewlet descriptor is a leightweight descriptor of a viewlet in the workbench.\n */\nvar ViewletDescriptor = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewletDescriptor, _super);\n    function ViewletDescriptor(ctor, id, name, cssClass, order, _iconUrl) {\n        var _this = _super.call(this, ctor, id, name, cssClass, order, id) || this;\n        _this._iconUrl = _iconUrl;\n        return _this;\n    }\n    Object.defineProperty(ViewletDescriptor.prototype, \"iconUrl\", {\n        get: function () {\n            return this._iconUrl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ViewletDescriptor;\n}(composite_1.CompositeDescriptor));\nexports.ViewletDescriptor = ViewletDescriptor;\nexports.Extensions = {\n    Viewlets: 'workbench.contributions.viewlets'\n};\nvar ViewletRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewletRegistry, _super);\n    function ViewletRegistry() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Registers a viewlet to the platform.\n     */\n    ViewletRegistry.prototype.registerViewlet = function (descriptor) {\n        _super.prototype.registerComposite.call(this, descriptor);\n    };\n    /**\n     * Deregisters a viewlet to the platform.\n     */\n    ViewletRegistry.prototype.deregisterViewlet = function (id) {\n        if (id === this.defaultViewletId) {\n            throw new Error('Cannot deregister default viewlet');\n        }\n        _super.prototype.deregisterComposite.call(this, id);\n    };\n    /**\n     * Returns the viewlet descriptor for the given id or null if none.\n     */\n    ViewletRegistry.prototype.getViewlet = function (id) {\n        return this.getComposite(id);\n    };\n    /**\n     * Returns an array of registered viewlets known to the platform.\n     */\n    ViewletRegistry.prototype.getViewlets = function () {\n        return this.getComposites();\n    };\n    /**\n     * Sets the id of the viewlet that should open on startup by default.\n     */\n    ViewletRegistry.prototype.setDefaultViewletId = function (id) {\n        this.defaultViewletId = id;\n    };\n    /**\n     * Gets the id of the viewlet that should open on startup by default.\n     */\n    ViewletRegistry.prototype.getDefaultViewletId = function () {\n        return this.defaultViewletId;\n    };\n    return ViewletRegistry;\n}(composite_1.CompositeRegistry));\nexports.ViewletRegistry = ViewletRegistry;\nplatform_1.Registry.add(exports.Extensions.Viewlets, new ViewletRegistry());\n/**\n * A reusable action to show a viewlet with a specific id.\n */\nvar ShowViewletAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowViewletAction, _super);\n    function ShowViewletAction(id, name, viewletId, viewletService, editorGroupService, layoutService) {\n        var _this = _super.call(this, id, name) || this;\n        _this.viewletId = viewletId;\n        _this.viewletService = viewletService;\n        _this.editorGroupService = editorGroupService;\n        _this.layoutService = layoutService;\n        _this.enabled = !!_this.viewletService && !!_this.editorGroupService;\n        return _this;\n    }\n    ShowViewletAction.prototype.run = function () {\n        // Pass focus to viewlet if not open or focused\n        if (this.otherViewletShowing() || !this.sidebarHasFocus()) {\n            return this.viewletService.openViewlet(this.viewletId, true);\n        }\n        // Otherwise pass focus to editor group\n        this.editorGroupService.activeGroup.focus();\n        return Promise.resolve(true);\n    };\n    ShowViewletAction.prototype.otherViewletShowing = function () {\n        var activeViewlet = this.viewletService.getActiveViewlet();\n        return !activeViewlet || activeViewlet.getId() !== this.viewletId;\n    };\n    ShowViewletAction.prototype.sidebarHasFocus = function () {\n        var activeViewlet = this.viewletService.getActiveViewlet();\n        var activeElement = document.activeElement;\n        return !!(activeViewlet && activeElement && DOM.isAncestor(activeElement, this.layoutService.getContainer(layoutService_1.Parts.SIDEBAR_PART)));\n    };\n    ShowViewletAction = tslib_1.__decorate([\n        tslib_1.__param(3, viewlet_1.IViewletService),\n        tslib_1.__param(4, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(5, layoutService_1.IWorkbenchLayoutService)\n    ], ShowViewletAction);\n    return ShowViewletAction;\n}(actions_1.Action));\nexports.ShowViewletAction = ShowViewletAction;\nvar CollapseAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CollapseAction, _super);\n    function CollapseAction(tree, enabled, clazz) {\n        return _super.call(this, 'workbench.action.collapse', nls.localize('collapse', \"Collapse All\"), clazz, enabled, function () {\n            tree.collapseAll();\n            return Promise.resolve(undefined);\n        }) || this;\n    }\n    return CollapseAction;\n}(actions_1.Action));\nexports.CollapseAction = CollapseAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/viewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/viewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as DOM from 'vs/base/browser/dom';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { Composite, CompositeDescriptor, CompositeRegistry } from 'vs/workbench/browser/composite';\nimport { IConstructorSignature0 } from 'vs/platform/instantiation/common/instantiation';\nimport { ToggleSidebarVisibilityAction, ToggleSidebarPositionAction } from 'vs/workbench/browser/actions/layoutActions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { AsyncDataTree } from 'vs/base/browser/ui/tree/asyncDataTree';\nimport { AbstractTree } from 'vs/base/browser/ui/tree/abstractTree';\n\nexport abstract class Viewlet extends Composite implements IViewlet {\n\n\tconstructor(id: string,\n\t\tprotected configurationService: IConfigurationService,\n\t\tprivate layoutService: IWorkbenchLayoutService,\n\t\ttelemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\t}\n\n\tgetOptimalWidth(): number | null {\n\t\treturn null;\n\t}\n\n\tgetContextMenuActions(): IAction[] {\n\t\tconst toggleSidebarPositionAction = new ToggleSidebarPositionAction(ToggleSidebarPositionAction.ID, ToggleSidebarPositionAction.getLabel(this.layoutService), this.layoutService, this.configurationService);\n\t\treturn [toggleSidebarPositionAction,\n\t\t\t<IAction>{\n\t\t\t\tid: ToggleSidebarVisibilityAction.ID,\n\t\t\t\tlabel: nls.localize('compositePart.hideSideBarLabel', \"Hide Side Bar\"),\n\t\t\t\tenabled: true,\n\t\t\t\trun: () => this.layoutService.setSideBarHidden(true)\n\t\t\t}];\n\t}\n}\n\n/**\n * A viewlet descriptor is a leightweight descriptor of a viewlet in the workbench.\n */\nexport class ViewletDescriptor extends CompositeDescriptor<Viewlet> {\n\n\tconstructor(\n\t\tctor: IConstructorSignature0<Viewlet>,\n\t\tid: string,\n\t\tname: string,\n\t\tcssClass?: string,\n\t\torder?: number,\n\t\tprivate _iconUrl?: URI\n\t) {\n\t\tsuper(ctor, id, name, cssClass, order, id);\n\t}\n\n\tget iconUrl(): URI | undefined {\n\t\treturn this._iconUrl;\n\t}\n}\n\nexport const Extensions = {\n\tViewlets: 'workbench.contributions.viewlets'\n};\n\nexport class ViewletRegistry extends CompositeRegistry<Viewlet> {\n\tprivate defaultViewletId: string;\n\n\t/**\n\t * Registers a viewlet to the platform.\n\t */\n\tregisterViewlet(descriptor: ViewletDescriptor): void {\n\t\tsuper.registerComposite(descriptor);\n\t}\n\n\t/**\n\t * Deregisters a viewlet to the platform.\n\t */\n\tderegisterViewlet(id: string): void {\n\t\tif (id === this.defaultViewletId) {\n\t\t\tthrow new Error('Cannot deregister default viewlet');\n\t\t}\n\t\tsuper.deregisterComposite(id);\n\t}\n\n\t/**\n\t * Returns the viewlet descriptor for the given id or null if none.\n\t */\n\tgetViewlet(id: string): ViewletDescriptor {\n\t\treturn this.getComposite(id) as ViewletDescriptor;\n\t}\n\n\t/**\n\t * Returns an array of registered viewlets known to the platform.\n\t */\n\tgetViewlets(): ViewletDescriptor[] {\n\t\treturn this.getComposites() as ViewletDescriptor[];\n\t}\n\n\t/**\n\t * Sets the id of the viewlet that should open on startup by default.\n\t */\n\tsetDefaultViewletId(id: string): void {\n\t\tthis.defaultViewletId = id;\n\t}\n\n\t/**\n\t * Gets the id of the viewlet that should open on startup by default.\n\t */\n\tgetDefaultViewletId(): string {\n\t\treturn this.defaultViewletId;\n\t}\n}\n\nRegistry.add(Extensions.Viewlets, new ViewletRegistry());\n\n/**\n * A reusable action to show a viewlet with a specific id.\n */\nexport class ShowViewletAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tname: string,\n\t\tprivate readonly viewletId: string,\n\t\t@IViewletService protected viewletService: IViewletService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, name);\n\n\t\tthis.enabled = !!this.viewletService && !!this.editorGroupService;\n\t}\n\n\trun(): Promise<any> {\n\n\t\t// Pass focus to viewlet if not open or focused\n\t\tif (this.otherViewletShowing() || !this.sidebarHasFocus()) {\n\t\t\treturn this.viewletService.openViewlet(this.viewletId, true);\n\t\t}\n\n\t\t// Otherwise pass focus to editor group\n\t\tthis.editorGroupService.activeGroup.focus();\n\n\t\treturn Promise.resolve(true);\n\t}\n\n\tprivate otherViewletShowing(): boolean {\n\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\n\t\treturn !activeViewlet || activeViewlet.getId() !== this.viewletId;\n\t}\n\n\tprivate sidebarHasFocus(): boolean {\n\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\t\tconst activeElement = document.activeElement;\n\n\t\treturn !!(activeViewlet && activeElement && DOM.isAncestor(activeElement, this.layoutService.getContainer(Parts.SIDEBAR_PART)));\n\t}\n}\n\nexport class CollapseAction extends Action {\n\tconstructor(tree: AsyncDataTree<any, any, any> | AbstractTree<any, any, any>, enabled: boolean, clazz?: string) {\n\t\tsuper('workbench.action.collapse', nls.localize('collapse', \"Collapse All\"), clazz, enabled, () => {\n\t\t\ttree.collapseAll();\n\n\t\t\treturn Promise.resolve(undefined);\n\t\t});\n\t}\n}\n"]}]}