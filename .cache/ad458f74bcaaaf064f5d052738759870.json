{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/extensions\");\nvar nls_1 = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar extensionTipsService_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionTipsService\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar extensions_2 = require(\"../common/extensions\");\nvar extensionsWorkbenchService_1 = require(\"vs/workbench/contrib/extensions/node/extensionsWorkbenchService\");\nvar extensionsActions_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsActions\");\nvar extensionsInput_1 = require(\"vs/workbench/contrib/extensions/common/extensionsInput\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar extensionEditor_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionEditor\");\nvar extensionsViewlet_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsViewlet\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar jsonContributionRegistry = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar extensionsFileTemplate_1 = require(\"vs/workbench/contrib/extensions/common/extensionsFileTemplate\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensionsUtils_1 = require(\"vs/workbench/contrib/extensions/common/extensionsUtils\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar extensionsQuickOpen_1 = require(\"vs/workbench/contrib/extensions/browser/extensionsQuickOpen\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar runtimeExtensionsEditor_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor\");\nvar editor_2 = require(\"vs/workbench/common/editor\");\nvar extensionProfileService_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionProfileService\");\nvar runtimeExtensionsInput_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar extensionsActivationProgress_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress\");\nvar extensionsAutoProfiler_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar extensionsDependencyChecker_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\n// Singletons\nextensions_1.registerSingleton(extensions_2.IExtensionsWorkbenchService, extensionsWorkbenchService_1.ExtensionsWorkbenchService);\nextensions_1.registerSingleton(extensionManagement_1.IExtensionTipsService, extensionTipsService_1.ExtensionTipsService);\nextensions_1.registerSingleton(runtimeExtensionsEditor_1.IExtensionHostProfileService, extensionProfileService_1.ExtensionHostProfileService, true);\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.StatusUpdater, lifecycle_1.LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.MaliciousExtensionChecker, lifecycle_1.LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(extensionsActions_1.ConfigureRecommendedExtensionsCommandsContributor, lifecycle_1.LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(extensionsUtils_1.KeymapExtensions, lifecycle_1.LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.ExtensionsViewletViewsContribution, lifecycle_1.LifecyclePhase.Starting);\nworkbenchRegistry.registerWorkbenchContribution(extensionsActivationProgress_1.ExtensionActivationProgress, lifecycle_1.LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(extensionsAutoProfiler_1.ExtensionsAutoProfiler, lifecycle_1.LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(extensionsDependencyChecker_1.ExtensionDependencyChecker, lifecycle_1.LifecyclePhase.Eventually);\nplatform_1.Registry.as(output_1.Extensions.OutputChannels)\n    .registerChannel({ id: extensionManagement_1.ExtensionsChannelId, label: extensionManagement_1.ExtensionsLabel, log: false });\n// Quickopen\nplatform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(extensionsQuickOpen_1.ExtensionsHandler, extensionsQuickOpen_1.ExtensionsHandler.ID, 'ext ', undefined, nls_1.localize('extensionsCommands', \"Manage Extensions\"), true));\nplatform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(extensionsQuickOpen_1.GalleryExtensionsHandler, extensionsQuickOpen_1.GalleryExtensionsHandler.ID, 'ext install ', undefined, nls_1.localize('galleryExtensionsCommands', \"Install Gallery Extensions\"), true));\n// Editor\nvar editorDescriptor = new editor_1.EditorDescriptor(extensionEditor_1.ExtensionEditor, extensionEditor_1.ExtensionEditor.ID, nls_1.localize('extension', \"Extension\"));\nplatform_1.Registry.as(editor_1.Extensions.Editors)\n    .registerEditor(editorDescriptor, [new descriptors_1.SyncDescriptor(extensionsInput_1.ExtensionsInput)]);\n// Running Extensions Editor\nvar runtimeExtensionsEditorDescriptor = new editor_1.EditorDescriptor(runtimeExtensionsEditor_1.RuntimeExtensionsEditor, runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID, nls_1.localize('runtimeExtension', \"Running Extensions\"));\nplatform_1.Registry.as(editor_1.Extensions.Editors)\n    .registerEditor(runtimeExtensionsEditorDescriptor, [new descriptors_1.SyncDescriptor(runtimeExtensionsInput_1.RuntimeExtensionsInput)]);\nvar RuntimeExtensionsInputFactory = /** @class */ (function () {\n    function RuntimeExtensionsInputFactory() {\n    }\n    RuntimeExtensionsInputFactory.prototype.serialize = function (editorInput) {\n        return '';\n    };\n    RuntimeExtensionsInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        return new runtimeExtensionsInput_1.RuntimeExtensionsInput();\n    };\n    return RuntimeExtensionsInputFactory;\n}());\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(runtimeExtensionsInput_1.RuntimeExtensionsInput.ID, RuntimeExtensionsInputFactory);\n// Viewlet\nvar viewletDescriptor = new viewlet_1.ViewletDescriptor(extensionsViewlet_1.ExtensionsViewlet, extensions_2.VIEWLET_ID, nls_1.localize('extensions', \"Extensions\"), 'extensions', 4);\nplatform_1.Registry.as(viewlet_1.Extensions.Viewlets)\n    .registerViewlet(viewletDescriptor);\n// Global actions\nvar actionRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nvar openViewletActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.OpenExtensionsViewletAction, extensionsActions_1.OpenExtensionsViewletAction.ID, extensionsActions_1.OpenExtensionsViewletAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_X });\nactionRegistry.registerWorkbenchAction(openViewletActionDescriptor, 'View: Show Extensions', nls_1.localize('view', \"View\"));\nvar installActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.InstallExtensionsAction, extensionsActions_1.InstallExtensionsAction.ID, extensionsActions_1.InstallExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(installActionDescriptor, 'Extensions: Install Extensions', extensionManagement_1.ExtensionsLabel);\nvar listOutdatedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(listOutdatedActionDescriptor, 'Extensions: Show Outdated Extensions', extensionManagement_1.ExtensionsLabel);\nvar recommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(recommendationsActionDescriptor, 'Extensions: Show Recommended Extensions', extensionManagement_1.ExtensionsLabel);\nvar keymapRecommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedKeymapExtensionsAction, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.SHORT_LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_M) });\nactionRegistry.registerWorkbenchAction(keymapRecommendationsActionDescriptor, 'Preferences: Keymaps', extensionManagement_1.PreferencesLabel);\nvar languageExtensionsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowLanguageExtensionsAction, extensionsActions_1.ShowLanguageExtensionsAction.ID, extensionsActions_1.ShowLanguageExtensionsAction.SHORT_LABEL);\nactionRegistry.registerWorkbenchAction(languageExtensionsActionDescriptor, 'Preferences: Language Extensions', extensionManagement_1.PreferencesLabel);\nvar azureExtensionsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowAzureExtensionsAction, extensionsActions_1.ShowAzureExtensionsAction.ID, extensionsActions_1.ShowAzureExtensionsAction.SHORT_LABEL);\nactionRegistry.registerWorkbenchAction(azureExtensionsActionDescriptor, 'Preferences: Azure Extensions', extensionManagement_1.PreferencesLabel);\nvar popularActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(popularActionDescriptor, 'Extensions: Show Popular Extensions', extensionManagement_1.ExtensionsLabel);\nvar enabledActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowEnabledExtensionsAction, extensionsActions_1.ShowEnabledExtensionsAction.ID, extensionsActions_1.ShowEnabledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(enabledActionDescriptor, 'Extensions: Show Enabled Extensions', extensionManagement_1.ExtensionsLabel);\nvar installedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(installedActionDescriptor, 'Extensions: Show Installed Extensions', extensionManagement_1.ExtensionsLabel);\nvar disabledActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowDisabledExtensionsAction, extensionsActions_1.ShowDisabledExtensionsAction.ID, extensionsActions_1.ShowDisabledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(disabledActionDescriptor, 'Extensions: Show Disabled Extensions', extensionManagement_1.ExtensionsLabel);\nvar builtinActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowBuiltInExtensionsAction, extensionsActions_1.ShowBuiltInExtensionsAction.ID, extensionsActions_1.ShowBuiltInExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(builtinActionDescriptor, 'Extensions: Show Built-in Extensions', extensionManagement_1.ExtensionsLabel);\nvar updateAllActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(updateAllActionDescriptor, 'Extensions: Update All Extensions', extensionManagement_1.ExtensionsLabel);\nvar openExtensionsFolderActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.OpenExtensionsFolderAction, extensionsActions_1.OpenExtensionsFolderAction.ID, extensionsActions_1.OpenExtensionsFolderAction.LABEL);\nactionRegistry.registerWorkbenchAction(openExtensionsFolderActionDescriptor, 'Extensions: Open Extensions Folder', extensionManagement_1.ExtensionsLabel);\nvar installVSIXActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.InstallVSIXAction, extensionsActions_1.InstallVSIXAction.ID, extensionsActions_1.InstallVSIXAction.LABEL);\nactionRegistry.registerWorkbenchAction(installVSIXActionDescriptor, 'Extensions: Install from VSIX...', extensionManagement_1.ExtensionsLabel);\nvar disableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllAction, extensionsActions_1.DisableAllAction.ID, extensionsActions_1.DisableAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(disableAllAction, 'Extensions: Disable All Installed Extensions', extensionManagement_1.ExtensionsLabel);\nvar disableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllWorkpsaceAction, extensionsActions_1.DisableAllWorkpsaceAction.ID, extensionsActions_1.DisableAllWorkpsaceAction.LABEL);\nactionRegistry.registerWorkbenchAction(disableAllWorkspaceAction, 'Extensions: Disable All Installed Extensions for this Workspace', extensionManagement_1.ExtensionsLabel);\nvar enableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllAction, extensionsActions_1.EnableAllAction.ID, extensionsActions_1.EnableAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(enableAllAction, 'Extensions: Enable All Installed Extensions', extensionManagement_1.ExtensionsLabel);\nvar enableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllWorkpsaceAction, extensionsActions_1.EnableAllWorkpsaceAction.ID, extensionsActions_1.EnableAllWorkpsaceAction.LABEL);\nactionRegistry.registerWorkbenchAction(enableAllWorkspaceAction, 'Extensions: Enable All Installed Extensions for this Workspace', extensionManagement_1.ExtensionsLabel);\nvar checkForUpdatesAction = new actions_1.SyncActionDescriptor(extensionsActions_1.CheckForUpdatesAction, extensionsActions_1.CheckForUpdatesAction.ID, extensionsActions_1.CheckForUpdatesAction.LABEL);\nactionRegistry.registerWorkbenchAction(checkForUpdatesAction, \"Extensions: Check for Updates\", extensionManagement_1.ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAutoUpdateAction, extensionsActions_1.EnableAutoUpdateAction.ID, extensionsActions_1.EnableAutoUpdateAction.LABEL), \"Extensions: Enable Auto Updating Extensions\", extensionManagement_1.ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAutoUpdateAction, extensionsActions_1.DisableAutoUpdateAction.ID, extensionsActions_1.DisableAutoUpdateAction.LABEL), \"Extensions: Disable Auto Updating Extensions\", extensionManagement_1.ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.InstallSpecificVersionOfExtensionAction, extensionsActions_1.InstallSpecificVersionOfExtensionAction.ID, extensionsActions_1.InstallSpecificVersionOfExtensionAction.LABEL), 'Install Specific Version of Extension...', extensionManagement_1.ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction, runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction.ID, runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction.LABEL), 'Show Running Extensions', nls_1.localize('developer', \"Developer\"));\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.ReinstallAction, extensionsActions_1.ReinstallAction.ID, extensionsActions_1.ReinstallAction.LABEL), 'Reinstall Extension...', nls_1.localize('developer', \"Developer\"));\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration)\n    .registerConfiguration({\n    id: 'extensions',\n    order: 30,\n    title: nls_1.localize('extensionsConfigurationTitle', \"Extensions\"),\n    type: 'object',\n    properties: {\n        'extensions.autoUpdate': {\n            type: 'boolean',\n            description: nls_1.localize('extensionsAutoUpdate', \"When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.\"),\n            default: true,\n            scope: configurationRegistry_1.ConfigurationScope.APPLICATION,\n            tags: ['usesOnlineServices']\n        },\n        'extensions.autoCheckUpdates': {\n            type: 'boolean',\n            description: nls_1.localize('extensionsCheckUpdates', \"When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.\"),\n            default: true,\n            scope: configurationRegistry_1.ConfigurationScope.APPLICATION,\n            tags: ['usesOnlineServices']\n        },\n        'extensions.ignoreRecommendations': {\n            type: 'boolean',\n            description: nls_1.localize('extensionsIgnoreRecommendations', \"When enabled, the notifications for extension recommendations will not be shown.\"),\n            default: false\n        },\n        'extensions.showRecommendationsOnlyOnDemand': {\n            type: 'boolean',\n            description: nls_1.localize('extensionsShowRecommendationsOnlyOnDemand', \"When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.\"),\n            default: false,\n            tags: ['usesOnlineServices']\n        },\n        'extensions.closeExtensionDetailsOnViewChange': {\n            type: 'boolean',\n            description: nls_1.localize('extensionsCloseExtensionDetailsOnViewChange', \"When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.\"),\n            default: false\n        }\n    }\n});\nvar jsonRegistry = platform_1.Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(extensionsFileTemplate_1.ExtensionsConfigurationSchemaId, extensionsFileTemplate_1.ExtensionsConfigurationSchema);\n// Register Commands\ncommands_1.CommandsRegistry.registerCommand('_extensions.manage', function (accessor, extensionId) {\n    var extensionService = accessor.get(extensions_2.IExtensionsWorkbenchService);\n    var extension = extensionService.local.filter(function (e) { return extensionManagementUtil_1.areSameExtensions(e.identifier, { id: extensionId }); });\n    if (extension.length === 1) {\n        extensionService.open(extension[0]);\n    }\n});\ncommands_1.CommandsRegistry.registerCommand('extension.open', function (accessor, extensionId) {\n    var extensionService = accessor.get(extensions_2.IExtensionsWorkbenchService);\n    return extensionService.queryGallery({ names: [extensionId], pageSize: 1 }, cancellation_1.CancellationToken.None).then(function (pager) {\n        if (pager.total !== 1) {\n            return;\n        }\n        extensionService.open(pager.firstPage[0]);\n    });\n});\ncommands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.DebugExtensionHostAction.ID, function (accessor) {\n    var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n    instantiationService.createInstance(runtimeExtensionsEditor_1.DebugExtensionHostAction).run();\n});\ncommands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID, function (accessor) {\n    var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n    instantiationService.createInstance(runtimeExtensionsEditor_1.StartExtensionHostProfileAction, runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.StartExtensionHostProfileAction.LABEL).run();\n});\ncommands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID, function (accessor) {\n    var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n    instantiationService.createInstance(runtimeExtensionsEditor_1.StopExtensionHostProfileAction, runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.StopExtensionHostProfileAction.LABEL).run();\n});\ncommands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID, function (accessor) {\n    var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n    instantiationService.createInstance(runtimeExtensionsEditor_1.SaveExtensionHostProfileAction, runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.LABEL).run();\n});\n// File menu registration\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n    group: '2_keybindings',\n    command: {\n        id: extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID,\n        title: nls_1.localize({ key: 'miOpenKeymapExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Keymaps\")\n    },\n    order: 2\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n    group: '1_settings',\n    command: {\n        id: extensions_2.VIEWLET_ID,\n        title: nls_1.localize({ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Extensions\")\n    },\n    order: 2\n});\n// View menu\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n    group: '3_views',\n    command: {\n        id: extensions_2.VIEWLET_ID,\n        title: nls_1.localize({ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, \"E&&xtensions\")\n    },\n    order: 5\n});\n// Running extensions\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: runtimeExtensionsEditor_1.DebugExtensionHostAction.ID,\n        title: runtimeExtensionsEditor_1.DebugExtensionHostAction.LABEL,\n        iconLocation: {\n            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/start-inverse.svg\")),\n            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/start.svg\")),\n        }\n    },\n    group: 'navigation',\n    when: editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID)\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID,\n        title: runtimeExtensionsEditor_1.StartExtensionHostProfileAction.LABEL,\n        iconLocation: {\n            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/profile-start-inverse.svg\")),\n            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/profile-start.svg\")),\n        }\n    },\n    group: 'navigation',\n    when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID), runtimeExtensionsEditor_1.CONTEXT_PROFILE_SESSION_STATE.notEqualsTo('running'))\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID,\n        title: runtimeExtensionsEditor_1.StopExtensionHostProfileAction.LABEL,\n        iconLocation: {\n            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/profile-stop-inverse.svg\")),\n            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/profile-stop.svg\")),\n        }\n    },\n    group: 'navigation',\n    when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID), runtimeExtensionsEditor_1.CONTEXT_PROFILE_SESSION_STATE.isEqualTo('running'))\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID,\n        title: runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.LABEL,\n        iconLocation: {\n            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/save-inverse.svg\")),\n            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/extensions/electron-browser/media/save.svg\")),\n        },\n        precondition: runtimeExtensionsEditor_1.CONTEXT_EXTENSION_HOST_PROFILE_RECORDED\n    },\n    group: 'navigation',\n    when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID))\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: 'workbench.extensions.installExtension',\n    description: {\n        description: nls_1.localize('workbench.extensions.installExtension.description', \"Install the given extension\"),\n        args: [\n            {\n                name: nls_1.localize('workbench.extensions.installExtension.arg.name', \"Extension id or VSIX resource uri\"),\n                schema: {\n                    'type': ['object', 'string']\n                }\n            }\n        ]\n    },\n    handler: function (accessor, arg) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var extensionManagementService, extensionGalleryService, extension, vsix, e_1;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    extensionManagementService = accessor.get(extensionManagement_1.IExtensionManagementService);\n                    extensionGalleryService = accessor.get(extensionManagement_1.IExtensionGalleryService);\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 9, , 10]);\n                    if (!(typeof arg === 'string')) return [3 /*break*/, 6];\n                    return [4 /*yield*/, extensionGalleryService.getCompatibleExtension({ id: arg })];\n                case 2:\n                    extension = _a.sent();\n                    if (!extension) return [3 /*break*/, 4];\n                    return [4 /*yield*/, extensionManagementService.installFromGallery(extension)];\n                case 3:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                case 4: throw new Error(nls_1.localize('notFound', \"Extension '{0}' not found.\", arg));\n                case 5: return [3 /*break*/, 8];\n                case 6:\n                    vsix = uri_1.URI.revive(arg);\n                    return [4 /*yield*/, extensionManagementService.install(vsix)];\n                case 7:\n                    _a.sent();\n                    _a.label = 8;\n                case 8: return [3 /*break*/, 10];\n                case 9:\n                    e_1 = _a.sent();\n                    errors_1.onUnexpectedError(e_1);\n                    return [3 /*break*/, 10];\n                case 10: return [2 /*return*/];\n            }\n        });\n    }); }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/extensions';\nimport { localize } from 'vs/nls';\nimport { KeyMod, KeyChord, KeyCode } from 'vs/base/common/keyCodes';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { SyncActionDescriptor, MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IExtensionTipsService, ExtensionsLabel, ExtensionsChannelId, PreferencesLabel, IExtensionManagementService, IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\n\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchActionExtensions } from 'vs/workbench/common/actions';\nimport { ExtensionTipsService } from 'vs/workbench/contrib/extensions/electron-browser/extensionTipsService';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IOutputChannelRegistry, Extensions as OutputExtensions } from 'vs/workbench/contrib/output/common/output';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { VIEWLET_ID, IExtensionsWorkbenchService } from '../common/extensions';\nimport { ExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/node/extensionsWorkbenchService';\nimport {\n\tOpenExtensionsViewletAction, InstallExtensionsAction, ShowOutdatedExtensionsAction, ShowRecommendedExtensionsAction, ShowRecommendedKeymapExtensionsAction, ShowPopularExtensionsAction,\n\tShowEnabledExtensionsAction, ShowInstalledExtensionsAction, ShowDisabledExtensionsAction, ShowBuiltInExtensionsAction, UpdateAllAction,\n\tEnableAllAction, EnableAllWorkpsaceAction, DisableAllAction, DisableAllWorkpsaceAction, CheckForUpdatesAction, ShowLanguageExtensionsAction, ShowAzureExtensionsAction, EnableAutoUpdateAction, DisableAutoUpdateAction, ConfigureRecommendedExtensionsCommandsContributor, OpenExtensionsFolderAction, InstallVSIXAction, ReinstallAction, InstallSpecificVersionOfExtensionAction\n} from 'vs/workbench/contrib/extensions/electron-browser/extensionsActions';\nimport { ExtensionsInput } from 'vs/workbench/contrib/extensions/common/extensionsInput';\nimport { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { ExtensionEditor } from 'vs/workbench/contrib/extensions/electron-browser/extensionEditor';\nimport { StatusUpdater, ExtensionsViewlet, MaliciousExtensionChecker, ExtensionsViewletViewsContribution } from 'vs/workbench/contrib/extensions/electron-browser/extensionsViewlet';\nimport { IQuickOpenRegistry, Extensions, QuickOpenHandlerDescriptor } from 'vs/workbench/browser/quickopen';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport * as jsonContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { ExtensionsConfigurationSchema, ExtensionsConfigurationSchemaId } from 'vs/workbench/contrib/extensions/common/extensionsFileTemplate';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { KeymapExtensions } from 'vs/workbench/contrib/extensions/common/extensionsUtils';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { GalleryExtensionsHandler, ExtensionsHandler } from 'vs/workbench/contrib/extensions/browser/extensionsQuickOpen';\nimport { EditorDescriptor, IEditorRegistry, Extensions as EditorExtensions } from 'vs/workbench/browser/editor';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { RuntimeExtensionsEditor, ShowRuntimeExtensionsAction, IExtensionHostProfileService, DebugExtensionHostAction, StartExtensionHostProfileAction, StopExtensionHostProfileAction, CONTEXT_PROFILE_SESSION_STATE, SaveExtensionHostProfileAction, CONTEXT_EXTENSION_HOST_PROFILE_RECORDED } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor';\nimport { EditorInput, IEditorInputFactory, IEditorInputFactoryRegistry, Extensions as EditorInputExtensions, ActiveEditorContext } from 'vs/workbench/common/editor';\nimport { ExtensionHostProfileService } from 'vs/workbench/contrib/extensions/electron-browser/extensionProfileService';\nimport { RuntimeExtensionsInput } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ExtensionActivationProgress } from 'vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress';\nimport { ExtensionsAutoProfiler } from 'vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ExtensionDependencyChecker } from 'vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\n// Singletons\nregisterSingleton(IExtensionsWorkbenchService, ExtensionsWorkbenchService);\nregisterSingleton(IExtensionTipsService, ExtensionTipsService);\nregisterSingleton(IExtensionHostProfileService, ExtensionHostProfileService, true);\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(StatusUpdater, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(MaliciousExtensionChecker, LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(ConfigureRecommendedExtensionsCommandsContributor, LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(KeymapExtensions, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionsViewletViewsContribution, LifecyclePhase.Starting);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionActivationProgress, LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionsAutoProfiler, LifecyclePhase.Eventually);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionDependencyChecker, LifecyclePhase.Eventually);\n\nRegistry.as<IOutputChannelRegistry>(OutputExtensions.OutputChannels)\n\t.registerChannel({ id: ExtensionsChannelId, label: ExtensionsLabel, log: false });\n\n// Quickopen\nRegistry.as<IQuickOpenRegistry>(Extensions.Quickopen).registerQuickOpenHandler(\n\tnew QuickOpenHandlerDescriptor(\n\t\tExtensionsHandler,\n\t\tExtensionsHandler.ID,\n\t\t'ext ',\n\t\tundefined,\n\t\tlocalize('extensionsCommands', \"Manage Extensions\"),\n\t\ttrue\n\t)\n);\n\nRegistry.as<IQuickOpenRegistry>(Extensions.Quickopen).registerQuickOpenHandler(\n\tnew QuickOpenHandlerDescriptor(\n\t\tGalleryExtensionsHandler,\n\t\tGalleryExtensionsHandler.ID,\n\t\t'ext install ',\n\t\tundefined,\n\t\tlocalize('galleryExtensionsCommands', \"Install Gallery Extensions\"),\n\t\ttrue\n\t)\n);\n\n// Editor\nconst editorDescriptor = new EditorDescriptor(\n\tExtensionEditor,\n\tExtensionEditor.ID,\n\tlocalize('extension', \"Extension\")\n);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors)\n\t.registerEditor(editorDescriptor, [new SyncDescriptor(ExtensionsInput)]);\n\n// Running Extensions Editor\n\nconst runtimeExtensionsEditorDescriptor = new EditorDescriptor(\n\tRuntimeExtensionsEditor,\n\tRuntimeExtensionsEditor.ID,\n\tlocalize('runtimeExtension', \"Running Extensions\")\n);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors)\n\t.registerEditor(runtimeExtensionsEditorDescriptor, [new SyncDescriptor(RuntimeExtensionsInput)]);\n\nclass RuntimeExtensionsInputFactory implements IEditorInputFactory {\n\tserialize(editorInput: EditorInput): string {\n\t\treturn '';\n\t}\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput {\n\t\treturn new RuntimeExtensionsInput();\n\t}\n}\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(RuntimeExtensionsInput.ID, RuntimeExtensionsInputFactory);\n\n\n// Viewlet\nconst viewletDescriptor = new ViewletDescriptor(\n\tExtensionsViewlet,\n\tVIEWLET_ID,\n\tlocalize('extensions', \"Extensions\"),\n\t'extensions',\n\t4\n);\n\nRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets)\n\t.registerViewlet(viewletDescriptor);\n\n// Global actions\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchActionExtensions.WorkbenchActions);\n\nconst openViewletActionDescriptor = new SyncActionDescriptor(OpenExtensionsViewletAction, OpenExtensionsViewletAction.ID, OpenExtensionsViewletAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_X });\nactionRegistry.registerWorkbenchAction(openViewletActionDescriptor, 'View: Show Extensions', localize('view', \"View\"));\n\nconst installActionDescriptor = new SyncActionDescriptor(InstallExtensionsAction, InstallExtensionsAction.ID, InstallExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(installActionDescriptor, 'Extensions: Install Extensions', ExtensionsLabel);\n\nconst listOutdatedActionDescriptor = new SyncActionDescriptor(ShowOutdatedExtensionsAction, ShowOutdatedExtensionsAction.ID, ShowOutdatedExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(listOutdatedActionDescriptor, 'Extensions: Show Outdated Extensions', ExtensionsLabel);\n\nconst recommendationsActionDescriptor = new SyncActionDescriptor(ShowRecommendedExtensionsAction, ShowRecommendedExtensionsAction.ID, ShowRecommendedExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(recommendationsActionDescriptor, 'Extensions: Show Recommended Extensions', ExtensionsLabel);\n\nconst keymapRecommendationsActionDescriptor = new SyncActionDescriptor(ShowRecommendedKeymapExtensionsAction, ShowRecommendedKeymapExtensionsAction.ID, ShowRecommendedKeymapExtensionsAction.SHORT_LABEL, { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_M) });\nactionRegistry.registerWorkbenchAction(keymapRecommendationsActionDescriptor, 'Preferences: Keymaps', PreferencesLabel);\n\nconst languageExtensionsActionDescriptor = new SyncActionDescriptor(ShowLanguageExtensionsAction, ShowLanguageExtensionsAction.ID, ShowLanguageExtensionsAction.SHORT_LABEL);\nactionRegistry.registerWorkbenchAction(languageExtensionsActionDescriptor, 'Preferences: Language Extensions', PreferencesLabel);\n\nconst azureExtensionsActionDescriptor = new SyncActionDescriptor(ShowAzureExtensionsAction, ShowAzureExtensionsAction.ID, ShowAzureExtensionsAction.SHORT_LABEL);\nactionRegistry.registerWorkbenchAction(azureExtensionsActionDescriptor, 'Preferences: Azure Extensions', PreferencesLabel);\n\nconst popularActionDescriptor = new SyncActionDescriptor(ShowPopularExtensionsAction, ShowPopularExtensionsAction.ID, ShowPopularExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(popularActionDescriptor, 'Extensions: Show Popular Extensions', ExtensionsLabel);\n\nconst enabledActionDescriptor = new SyncActionDescriptor(ShowEnabledExtensionsAction, ShowEnabledExtensionsAction.ID, ShowEnabledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(enabledActionDescriptor, 'Extensions: Show Enabled Extensions', ExtensionsLabel);\n\nconst installedActionDescriptor = new SyncActionDescriptor(ShowInstalledExtensionsAction, ShowInstalledExtensionsAction.ID, ShowInstalledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(installedActionDescriptor, 'Extensions: Show Installed Extensions', ExtensionsLabel);\n\nconst disabledActionDescriptor = new SyncActionDescriptor(ShowDisabledExtensionsAction, ShowDisabledExtensionsAction.ID, ShowDisabledExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(disabledActionDescriptor, 'Extensions: Show Disabled Extensions', ExtensionsLabel);\n\nconst builtinActionDescriptor = new SyncActionDescriptor(ShowBuiltInExtensionsAction, ShowBuiltInExtensionsAction.ID, ShowBuiltInExtensionsAction.LABEL);\nactionRegistry.registerWorkbenchAction(builtinActionDescriptor, 'Extensions: Show Built-in Extensions', ExtensionsLabel);\n\nconst updateAllActionDescriptor = new SyncActionDescriptor(UpdateAllAction, UpdateAllAction.ID, UpdateAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(updateAllActionDescriptor, 'Extensions: Update All Extensions', ExtensionsLabel);\n\nconst openExtensionsFolderActionDescriptor = new SyncActionDescriptor(OpenExtensionsFolderAction, OpenExtensionsFolderAction.ID, OpenExtensionsFolderAction.LABEL);\nactionRegistry.registerWorkbenchAction(openExtensionsFolderActionDescriptor, 'Extensions: Open Extensions Folder', ExtensionsLabel);\n\nconst installVSIXActionDescriptor = new SyncActionDescriptor(InstallVSIXAction, InstallVSIXAction.ID, InstallVSIXAction.LABEL);\nactionRegistry.registerWorkbenchAction(installVSIXActionDescriptor, 'Extensions: Install from VSIX...', ExtensionsLabel);\n\nconst disableAllAction = new SyncActionDescriptor(DisableAllAction, DisableAllAction.ID, DisableAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(disableAllAction, 'Extensions: Disable All Installed Extensions', ExtensionsLabel);\n\nconst disableAllWorkspaceAction = new SyncActionDescriptor(DisableAllWorkpsaceAction, DisableAllWorkpsaceAction.ID, DisableAllWorkpsaceAction.LABEL);\nactionRegistry.registerWorkbenchAction(disableAllWorkspaceAction, 'Extensions: Disable All Installed Extensions for this Workspace', ExtensionsLabel);\n\nconst enableAllAction = new SyncActionDescriptor(EnableAllAction, EnableAllAction.ID, EnableAllAction.LABEL);\nactionRegistry.registerWorkbenchAction(enableAllAction, 'Extensions: Enable All Installed Extensions', ExtensionsLabel);\n\nconst enableAllWorkspaceAction = new SyncActionDescriptor(EnableAllWorkpsaceAction, EnableAllWorkpsaceAction.ID, EnableAllWorkpsaceAction.LABEL);\nactionRegistry.registerWorkbenchAction(enableAllWorkspaceAction, 'Extensions: Enable All Installed Extensions for this Workspace', ExtensionsLabel);\n\nconst checkForUpdatesAction = new SyncActionDescriptor(CheckForUpdatesAction, CheckForUpdatesAction.ID, CheckForUpdatesAction.LABEL);\nactionRegistry.registerWorkbenchAction(checkForUpdatesAction, `Extensions: Check for Updates`, ExtensionsLabel);\n\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(EnableAutoUpdateAction, EnableAutoUpdateAction.ID, EnableAutoUpdateAction.LABEL), `Extensions: Enable Auto Updating Extensions`, ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(DisableAutoUpdateAction, DisableAutoUpdateAction.ID, DisableAutoUpdateAction.LABEL), `Extensions: Disable Auto Updating Extensions`, ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(InstallSpecificVersionOfExtensionAction, InstallSpecificVersionOfExtensionAction.ID, InstallSpecificVersionOfExtensionAction.LABEL), 'Install Specific Version of Extension...', ExtensionsLabel);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ShowRuntimeExtensionsAction, ShowRuntimeExtensionsAction.ID, ShowRuntimeExtensionsAction.LABEL), 'Show Running Extensions', localize('developer', \"Developer\"));\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ReinstallAction, ReinstallAction.ID, ReinstallAction.LABEL), 'Reinstall Extension...', localize('developer', \"Developer\"));\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t.registerConfiguration({\n\t\tid: 'extensions',\n\t\torder: 30,\n\t\ttitle: localize('extensionsConfigurationTitle', \"Extensions\"),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'extensions.autoUpdate': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: localize('extensionsAutoUpdate', \"When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.\"),\n\t\t\t\tdefault: true,\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\ttags: ['usesOnlineServices']\n\t\t\t},\n\t\t\t'extensions.autoCheckUpdates': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: localize('extensionsCheckUpdates', \"When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.\"),\n\t\t\t\tdefault: true,\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\ttags: ['usesOnlineServices']\n\t\t\t},\n\t\t\t'extensions.ignoreRecommendations': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: localize('extensionsIgnoreRecommendations', \"When enabled, the notifications for extension recommendations will not be shown.\"),\n\t\t\t\tdefault: false\n\t\t\t},\n\t\t\t'extensions.showRecommendationsOnlyOnDemand': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: localize('extensionsShowRecommendationsOnlyOnDemand', \"When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.\"),\n\t\t\t\tdefault: false,\n\t\t\t\ttags: ['usesOnlineServices']\n\t\t\t},\n\t\t\t'extensions.closeExtensionDetailsOnViewChange': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: localize('extensionsCloseExtensionDetailsOnViewChange', \"When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.\"),\n\t\t\t\tdefault: false\n\t\t\t}\n\t\t}\n\t});\n\nconst jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(ExtensionsConfigurationSchemaId, ExtensionsConfigurationSchema);\n\n// Register Commands\nCommandsRegistry.registerCommand('_extensions.manage', (accessor: ServicesAccessor, extensionId: string) => {\n\tconst extensionService = accessor.get(IExtensionsWorkbenchService);\n\tconst extension = extensionService.local.filter(e => areSameExtensions(e.identifier, { id: extensionId }));\n\tif (extension.length === 1) {\n\t\textensionService.open(extension[0]);\n\t}\n});\n\nCommandsRegistry.registerCommand('extension.open', (accessor: ServicesAccessor, extensionId: string) => {\n\tconst extensionService = accessor.get(IExtensionsWorkbenchService);\n\n\treturn extensionService.queryGallery({ names: [extensionId], pageSize: 1 }, CancellationToken.None).then(pager => {\n\t\tif (pager.total !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\textensionService.open(pager.firstPage[0]);\n\t});\n});\n\nCommandsRegistry.registerCommand(DebugExtensionHostAction.ID, (accessor: ServicesAccessor) => {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tinstantiationService.createInstance(DebugExtensionHostAction).run();\n});\n\nCommandsRegistry.registerCommand(StartExtensionHostProfileAction.ID, (accessor: ServicesAccessor) => {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tinstantiationService.createInstance(StartExtensionHostProfileAction, StartExtensionHostProfileAction.ID, StartExtensionHostProfileAction.LABEL).run();\n});\n\nCommandsRegistry.registerCommand(StopExtensionHostProfileAction.ID, (accessor: ServicesAccessor) => {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tinstantiationService.createInstance(StopExtensionHostProfileAction, StopExtensionHostProfileAction.ID, StopExtensionHostProfileAction.LABEL).run();\n});\n\nCommandsRegistry.registerCommand(SaveExtensionHostProfileAction.ID, (accessor: ServicesAccessor) => {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tinstantiationService.createInstance(SaveExtensionHostProfileAction, SaveExtensionHostProfileAction.ID, SaveExtensionHostProfileAction.LABEL).run();\n});\n\n// File menu registration\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '2_keybindings',\n\tcommand: {\n\t\tid: ShowRecommendedKeymapExtensionsAction.ID,\n\t\ttitle: localize({ key: 'miOpenKeymapExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Keymaps\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '1_settings',\n\tcommand: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: localize({ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Extensions\")\n\t},\n\torder: 2\n});\n\n// View menu\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '3_views',\n\tcommand: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: localize({ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, \"E&&xtensions\")\n\t},\n\torder: 5\n});\n\n// Running extensions\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: DebugExtensionHostAction.ID,\n\t\ttitle: DebugExtensionHostAction.LABEL,\n\t\ticonLocation: {\n\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/start-inverse.svg`)),\n\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/start.svg`)),\n\t\t}\n\t},\n\tgroup: 'navigation',\n\twhen: ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID)\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: StartExtensionHostProfileAction.ID,\n\t\ttitle: StartExtensionHostProfileAction.LABEL,\n\t\ticonLocation: {\n\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-start-inverse.svg`)),\n\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-start.svg`)),\n\t\t}\n\t},\n\tgroup: 'navigation',\n\twhen: ContextKeyExpr.and(ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID), CONTEXT_PROFILE_SESSION_STATE.notEqualsTo('running'))\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: StopExtensionHostProfileAction.ID,\n\t\ttitle: StopExtensionHostProfileAction.LABEL,\n\t\ticonLocation: {\n\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-stop-inverse.svg`)),\n\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-stop.svg`)),\n\t\t}\n\t},\n\tgroup: 'navigation',\n\twhen: ContextKeyExpr.and(ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID), CONTEXT_PROFILE_SESSION_STATE.isEqualTo('running'))\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: SaveExtensionHostProfileAction.ID,\n\t\ttitle: SaveExtensionHostProfileAction.LABEL,\n\t\ticonLocation: {\n\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/save-inverse.svg`)),\n\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/save.svg`)),\n\t\t},\n\t\tprecondition: CONTEXT_EXTENSION_HOST_PROFILE_RECORDED\n\t},\n\tgroup: 'navigation',\n\twhen: ContextKeyExpr.and(ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID))\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.extensions.installExtension',\n\tdescription: {\n\t\tdescription: localize('workbench.extensions.installExtension.description', \"Install the given extension\"),\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: localize('workbench.extensions.installExtension.arg.name', \"Extension id or VSIX resource uri\"),\n\t\t\t\tschema: {\n\t\t\t\t\t'type': ['object', 'string']\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\thandler: async (accessor, arg: string | UriComponents) => {\n\t\tconst extensionManagementService = accessor.get(IExtensionManagementService);\n\t\tconst extensionGalleryService = accessor.get(IExtensionGalleryService);\n\t\ttry {\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tconst extension = await extensionGalleryService.getCompatibleExtension({ id: arg });\n\t\t\t\tif (extension) {\n\t\t\t\t\tawait extensionManagementService.installFromGallery(extension);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(localize('notFound', \"Extension '{0}' not found.\", arg));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vsix = URI.revive(arg);\n\t\t\t\tawait extensionManagementService.install(vsix);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t}\n});"]}]}