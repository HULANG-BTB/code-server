{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/elementSizeObserver.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/elementSizeObserver.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar ElementSizeObserver = /** @class */ (function (_super) {\n    tslib_1.__extends(ElementSizeObserver, _super);\n    function ElementSizeObserver(referenceDomElement, changeCallback) {\n        var _this = _super.call(this) || this;\n        _this.referenceDomElement = referenceDomElement;\n        _this.changeCallback = changeCallback;\n        _this.measureReferenceDomElementToken = -1;\n        _this.width = -1;\n        _this.height = -1;\n        _this.measureReferenceDomElement(false);\n        return _this;\n    }\n    ElementSizeObserver.prototype.dispose = function () {\n        this.stopObserving();\n        _super.prototype.dispose.call(this);\n    };\n    ElementSizeObserver.prototype.getWidth = function () {\n        return this.width;\n    };\n    ElementSizeObserver.prototype.getHeight = function () {\n        return this.height;\n    };\n    ElementSizeObserver.prototype.startObserving = function () {\n        var _this = this;\n        if (this.measureReferenceDomElementToken === -1) {\n            this.measureReferenceDomElementToken = setInterval(function () { return _this.measureReferenceDomElement(true); }, 100);\n        }\n    };\n    ElementSizeObserver.prototype.stopObserving = function () {\n        if (this.measureReferenceDomElementToken !== -1) {\n            clearInterval(this.measureReferenceDomElementToken);\n            this.measureReferenceDomElementToken = -1;\n        }\n    };\n    ElementSizeObserver.prototype.observe = function (dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    };\n    ElementSizeObserver.prototype.measureReferenceDomElement = function (callChangeCallback, dimension) {\n        var observedWidth = 0;\n        var observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this.referenceDomElement) {\n            observedWidth = this.referenceDomElement.clientWidth;\n            observedHeight = this.referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this.width !== observedWidth || this.height !== observedHeight) {\n            this.width = observedWidth;\n            this.height = observedHeight;\n            if (callChangeCallback) {\n                this.changeCallback();\n            }\n        }\n    };\n    return ElementSizeObserver;\n}(lifecycle_1.Disposable));\nexports.ElementSizeObserver = ElementSizeObserver;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/elementSizeObserver.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/elementSizeObserver.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,sDAAsD;AAGtD;IAAyC,+CAAU;IAQlD,6BAAY,mBAAuC,EAAE,cAA0B;QAA/E,YACC,iBAAO,SAOP;QANA,KAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,KAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,KAAI,CAAC,+BAA+B,GAAG,CAAC,CAAC,CAAC;QAC1C,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAChB,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjB,KAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;;IACxC,CAAC;IAEM,qCAAO,GAAd;QACC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAEM,sCAAQ,GAAf;QACC,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEM,uCAAS,GAAhB;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAEM,4CAAc,GAArB;QAAA,iBAIC;QAHA,IAAI,IAAI,CAAC,+BAA+B,KAAK,CAAC,CAAC,EAAE;YAChD,IAAI,CAAC,+BAA+B,GAAG,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAArC,CAAqC,EAAE,GAAG,CAAC,CAAC;SACrG;IACF,CAAC;IAEM,2CAAa,GAApB;QACC,IAAI,IAAI,CAAC,+BAA+B,KAAK,CAAC,CAAC,EAAE;YAChD,aAAa,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YACpD,IAAI,CAAC,+BAA+B,GAAG,CAAC,CAAC,CAAC;SAC1C;IACF,CAAC;IAEM,qCAAO,GAAd,UAAe,SAAsB;QACpC,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC;IAEO,wDAA0B,GAAlC,UAAmC,kBAA2B,EAAE,SAAsB;QACrF,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,SAAS,EAAE;YACd,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC;YAChC,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC;SAClC;aAAM,IAAI,IAAI,CAAC,mBAAmB,EAAE;YACpC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;YACrD,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC;SACvD;QACD,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAC3C,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,KAAK,KAAK,aAAa,IAAI,IAAI,CAAC,MAAM,KAAK,cAAc,EAAE;YACnE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;YAC7B,IAAI,kBAAkB,EAAE;gBACvB,IAAI,CAAC,cAAc,EAAE,CAAC;aACtB;SACD;IACF,CAAC;IAEF,0BAAC;AAAD,CAAC,AArED,CAAyC,sBAAU,GAqElD;AArEY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IDimension } from 'vs/editor/common/editorCommon';\n\nexport class ElementSizeObserver extends Disposable {\n\n\tprivate readonly referenceDomElement: HTMLElement | null;\n\tprivate measureReferenceDomElementToken: any;\n\tprivate readonly changeCallback: () => void;\n\tprivate width: number;\n\tprivate height: number;\n\n\tconstructor(referenceDomElement: HTMLElement | null, changeCallback: () => void) {\n\t\tsuper();\n\t\tthis.referenceDomElement = referenceDomElement;\n\t\tthis.changeCallback = changeCallback;\n\t\tthis.measureReferenceDomElementToken = -1;\n\t\tthis.width = -1;\n\t\tthis.height = -1;\n\t\tthis.measureReferenceDomElement(false);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.stopObserving();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tpublic getHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tpublic startObserving(): void {\n\t\tif (this.measureReferenceDomElementToken === -1) {\n\t\t\tthis.measureReferenceDomElementToken = setInterval(() => this.measureReferenceDomElement(true), 100);\n\t\t}\n\t}\n\n\tpublic stopObserving(): void {\n\t\tif (this.measureReferenceDomElementToken !== -1) {\n\t\t\tclearInterval(this.measureReferenceDomElementToken);\n\t\t\tthis.measureReferenceDomElementToken = -1;\n\t\t}\n\t}\n\n\tpublic observe(dimension?: IDimension): void {\n\t\tthis.measureReferenceDomElement(true, dimension);\n\t}\n\n\tprivate measureReferenceDomElement(callChangeCallback: boolean, dimension?: IDimension): void {\n\t\tlet observedWidth = 0;\n\t\tlet observedHeight = 0;\n\t\tif (dimension) {\n\t\t\tobservedWidth = dimension.width;\n\t\t\tobservedHeight = dimension.height;\n\t\t} else if (this.referenceDomElement) {\n\t\t\tobservedWidth = this.referenceDomElement.clientWidth;\n\t\t\tobservedHeight = this.referenceDomElement.clientHeight;\n\t\t}\n\t\tobservedWidth = Math.max(5, observedWidth);\n\t\tobservedHeight = Math.max(5, observedHeight);\n\t\tif (this.width !== observedWidth || this.height !== observedHeight) {\n\t\t\tthis.width = observedWidth;\n\t\t\tthis.height = observedHeight;\n\t\t\tif (callChangeCallback) {\n\t\t\t\tthis.changeCallback();\n\t\t\t}\n\t\t}\n\t}\n\n}"]}]}