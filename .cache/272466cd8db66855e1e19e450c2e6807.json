{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/editor/browser/editorExtensions\", \"vs/editor/contrib/suggest/suggest\", \"vs/nls\", \"vs/platform/actions/common/actions\", \"vs/platform/commands/common/commands\", \"vs/platform/contextkey/common/contextkey\", \"vs/workbench/common/contextkeys\", \"vs/platform/environment/common/environment\", \"vs/platform/instantiation/common/descriptors\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/registry/common/platform\", \"vs/platform/workspace/common/workspace\", \"vs/workbench/browser/editor\", \"vs/workbench/common/actions\", \"vs/workbench/common/contributions\", \"vs/workbench/common/editor\", \"vs/workbench/common/resources\", \"vs/workbench/contrib/preferences/browser/keybindingsEditor\", \"vs/workbench/contrib/preferences/browser/preferencesActions\", \"vs/workbench/contrib/preferences/browser/preferencesEditor\", \"vs/workbench/contrib/preferences/common/preferences\", \"vs/workbench/contrib/preferences/common/preferencesContribution\", \"vs/workbench/contrib/preferences/electron-browser/preferencesSearch\", \"vs/workbench/contrib/preferences/electron-browser/settingsEditor2\", \"vs/workbench/services/editor/common/editorService\", \"vs/workbench/services/preferences/common/preferences\", \"vs/workbench/services/preferences/common/preferencesEditorInput\", \"vs/workbench/contrib/files/common/files\", \"vs/platform/label/common/label\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/windows/common/windows\", \"vs/platform/remote/common/remoteHosts\", \"vs/css!../browser/media/preferences\"], function (require, exports, keyCodes_1, lifecycle_1, uri_1, editorExtensions_1, suggest_1, nls, actions_1, commands_1, contextkey_1, contextkeys_1, environment_1, descriptors_1, extensions_1, instantiation_1, keybindingsRegistry_1, lifecycle_2, platform_1, workspace_1, editor_1, actions_2, contributions_1, editor_2, resources_1, keybindingsEditor_1, preferencesActions_1, preferencesEditor_1, preferences_1, preferencesContribution_1, preferencesSearch_1, settingsEditor2_1, editorService_1, preferences_2, preferencesEditorInput_1, files_1, label_1, extensions_2, windows_1, remoteHosts_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    extensions_1.registerSingleton(preferences_1.IPreferencesSearchService, preferencesSearch_1.PreferencesSearchService, true);\n    platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(preferencesEditor_1.PreferencesEditor, preferencesEditor_1.PreferencesEditor.ID, nls.localize('defaultPreferencesEditor', \"Default Preferences Editor\")), [\n        new descriptors_1.SyncDescriptor(preferencesEditorInput_1.PreferencesEditorInput)\n    ]);\n    platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(settingsEditor2_1.SettingsEditor2, settingsEditor2_1.SettingsEditor2.ID, nls.localize('settingsEditor2', \"Settings Editor 2\")), [\n        new descriptors_1.SyncDescriptor(preferencesEditorInput_1.SettingsEditor2Input)\n    ]);\n    platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(keybindingsEditor_1.KeybindingsEditor, keybindingsEditor_1.KeybindingsEditor.ID, nls.localize('keybindingsEditor', \"Keybindings Editor\")), [\n        new descriptors_1.SyncDescriptor(preferencesEditorInput_1.KeybindingsEditorInput)\n    ]);\n    // Register Preferences Editor Input Factory\n    class PreferencesEditorInputFactory {\n        serialize(editorInput) {\n            const input = editorInput;\n            if (input.details && input.master) {\n                const registry = platform_1.Registry.as(editor_2.Extensions.EditorInputFactories);\n                const detailsInputFactory = registry.getEditorInputFactory(input.details.getTypeId());\n                const masterInputFactory = registry.getEditorInputFactory(input.master.getTypeId());\n                if (detailsInputFactory && masterInputFactory) {\n                    const detailsSerialized = detailsInputFactory.serialize(input.details);\n                    const masterSerialized = masterInputFactory.serialize(input.master);\n                    if (detailsSerialized && masterSerialized) {\n                        return JSON.stringify({\n                            name: input.getName(),\n                            description: input.getDescription(),\n                            detailsSerialized,\n                            masterSerialized,\n                            detailsTypeId: input.details.getTypeId(),\n                            masterTypeId: input.master.getTypeId()\n                        });\n                    }\n                }\n            }\n            return undefined;\n        }\n        deserialize(instantiationService, serializedEditorInput) {\n            const deserialized = JSON.parse(serializedEditorInput);\n            const registry = platform_1.Registry.as(editor_2.Extensions.EditorInputFactories);\n            const detailsInputFactory = registry.getEditorInputFactory(deserialized.detailsTypeId);\n            const masterInputFactory = registry.getEditorInputFactory(deserialized.masterTypeId);\n            if (detailsInputFactory && masterInputFactory) {\n                const detailsInput = detailsInputFactory.deserialize(instantiationService, deserialized.detailsSerialized);\n                const masterInput = masterInputFactory.deserialize(instantiationService, deserialized.masterSerialized);\n                if (detailsInput && masterInput) {\n                    return new preferencesEditorInput_1.PreferencesEditorInput(deserialized.name, deserialized.description, detailsInput, masterInput);\n                }\n            }\n            return undefined;\n        }\n    }\n    class KeybindingsEditorInputFactory {\n        serialize(editorInput) {\n            const input = editorInput;\n            return JSON.stringify({\n                name: input.getName(),\n                typeId: input.getTypeId()\n            });\n        }\n        deserialize(instantiationService, serializedEditorInput) {\n            return instantiationService.createInstance(preferencesEditorInput_1.KeybindingsEditorInput);\n        }\n    }\n    class SettingsEditor2InputFactory {\n        serialize(input) {\n            const serialized = {};\n            return JSON.stringify(serialized);\n        }\n        deserialize(instantiationService, serializedEditorInput) {\n            return instantiationService.createInstance(preferencesEditorInput_1.SettingsEditor2Input);\n        }\n    }\n    // Register Default Preferences Editor Input Factory\n    class DefaultPreferencesEditorInputFactory {\n        serialize(editorInput) {\n            const input = editorInput;\n            const serialized = { resource: input.getResource().toString() };\n            return JSON.stringify(serialized);\n        }\n        deserialize(instantiationService, serializedEditorInput) {\n            const deserialized = JSON.parse(serializedEditorInput);\n            return instantiationService.createInstance(preferencesEditorInput_1.DefaultPreferencesEditorInput, uri_1.URI.parse(deserialized.resource));\n        }\n    }\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.PreferencesEditorInput.ID, PreferencesEditorInputFactory);\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputFactory);\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.KeybindingsEditorInput.ID, KeybindingsEditorInputFactory);\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.SettingsEditor2Input.ID, SettingsEditor2InputFactory);\n    // Contribute Global Actions\n    const category = nls.localize('preferences', \"Preferences\");\n    const registry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenRawDefaultSettingsAction, preferencesActions_1.OpenRawDefaultSettingsAction.ID, preferencesActions_1.OpenRawDefaultSettingsAction.LABEL), 'Preferences: Open Raw Default Settings', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenSettingsJsonAction, preferencesActions_1.OpenSettingsJsonAction.ID, preferencesActions_1.OpenSettingsJsonAction.LABEL), 'Preferences: Open Settings (JSON)', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenSettings2Action, preferencesActions_1.OpenSettings2Action.ID, preferencesActions_1.OpenSettings2Action.LABEL), 'Preferences: Open Settings (UI)', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL), 'Preferences: Open User Settings', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsAction, preferencesActions_1.OpenGlobalKeybindingsAction.ID, preferencesActions_1.OpenGlobalKeybindingsAction.LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_S) }), 'Preferences: Open Keyboard Shortcuts', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenDefaultKeybindingsFileAction, preferencesActions_1.OpenDefaultKeybindingsFileAction.ID, preferencesActions_1.OpenDefaultKeybindingsFileAction.LABEL), 'Preferences: Open Default Keyboard Shortcuts File', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsFileAction, preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL, { primary: 0 }), 'Preferences: Open Keyboard Shortcuts File', category);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.ConfigureLanguageBasedSettingsAction, preferencesActions_1.ConfigureLanguageBasedSettingsAction.ID, preferencesActions_1.ConfigureLanguageBasedSettingsAction.LABEL), 'Preferences: Configure Language Specific Settings...', category);\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.SETTINGS_COMMAND_OPEN_SETTINGS,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: null,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_COMMA,\n        handler: (accessor, args) => {\n            accessor.get(preferences_2.IPreferencesService).openSettings();\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_DEFINE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K),\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.defineKeybinding(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_E),\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor && control.activeKeybindingEntry.keybindingItem.keybinding) {\n                control.defineWhenExpression(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_REMOVE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: keyCodes_1.KeyCode.Delete,\n        mac: {\n            primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace)\n        },\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.removeKeybinding(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_RESET,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: 0,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.resetKeybinding(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SEARCH,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.focusSearch();\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n        primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_K,\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_K },\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.recordSearchKeys();\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n        primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_P,\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_P },\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n                control.toggleSortByPrecedence();\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: 0,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control) {\n                control.showSimilarKeybindings(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_COPY,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control) {\n                control.copyKeybinding(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n        primary: 0,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control) {\n                control.copyKeybindingCommand(control.activeKeybindingEntry);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n        primary: keyCodes_1.KeyCode.DownArrow,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control) {\n                control.focusKeybindings();\n            }\n        }\n    });\n    let PreferencesActionsContribution = class PreferencesActionsContribution extends lifecycle_1.Disposable {\n        constructor(environmentService, preferencesService, workpsaceContextService, labelService, extensionService, windowService) {\n            super();\n            this.preferencesService = preferencesService;\n            this.workpsaceContextService = workpsaceContextService;\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                command: {\n                    id: preferencesActions_1.OpenGlobalKeybindingsAction.ID,\n                    title: preferencesActions_1.OpenGlobalKeybindingsAction.LABEL,\n                    iconLocation: {\n                        light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n                        dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n                    }\n                },\n                when: resources_1.ResourceContextKey.Resource.isEqualTo(uri_1.URI.file(environmentService.appKeybindingsPath).toString()),\n                group: 'navigation',\n                order: 1\n            });\n            const commandId = '_workbench.openUserSettingsEditor';\n            commands_1.CommandsRegistry.registerCommand(commandId, () => this.preferencesService.openGlobalSettings(false));\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                command: {\n                    id: commandId,\n                    title: preferencesActions_1.OpenSettings2Action.LABEL,\n                    iconLocation: {\n                        light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n                        dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n                    }\n                },\n                when: resources_1.ResourceContextKey.Resource.isEqualTo(uri_1.URI.file(environmentService.appSettingsPath).toString()),\n                group: 'navigation',\n                order: 1\n            });\n            this.updatePreferencesEditorMenuItem();\n            this._register(workpsaceContextService.onDidChangeWorkbenchState(() => this.updatePreferencesEditorMenuItem()));\n            this._register(workpsaceContextService.onDidChangeWorkspaceFolders(() => this.updatePreferencesEditorMenuItemForWorkspaceFolders()));\n            extensionService.whenInstalledExtensionsRegistered()\n                .then(() => {\n                const remoteAuthority = windowService.getConfiguration().remoteAuthority;\n                const hostLabel = labelService.getHostLabel(remoteHosts_1.REMOTE_HOST_SCHEME, remoteAuthority) || remoteAuthority;\n                const label = nls.localize('openRemoteSettings', \"Open User Settings ({0})\", hostLabel);\n                commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenRemoteSettingsAction.ID, serviceAccessor => {\n                    serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenRemoteSettingsAction, preferencesActions_1.OpenRemoteSettingsAction.ID, label).run();\n                });\n                actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n                    command: {\n                        id: preferencesActions_1.OpenRemoteSettingsAction.ID,\n                        title: { value: label, original: `Preferences: Open User Settings (${hostLabel})` },\n                        category: nls.localize('preferencesCategory', \"Preferences\")\n                    },\n                    when: contextkeys_1.IsRemoteContext\n                });\n            });\n        }\n        updatePreferencesEditorMenuItem() {\n            const commandId = '_workbench.openWorkspaceSettingsEditor';\n            if (this.workpsaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE && !commands_1.CommandsRegistry.getCommand(commandId)) {\n                commands_1.CommandsRegistry.registerCommand(commandId, () => this.preferencesService.openWorkspaceSettings(false));\n                actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                    command: {\n                        id: commandId,\n                        title: preferencesActions_1.OpenSettings2Action.LABEL,\n                        iconLocation: {\n                            light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n                            dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n                        }\n                    },\n                    when: contextkey_1.ContextKeyExpr.and(resources_1.ResourceContextKey.Resource.isEqualTo(this.preferencesService.workspaceSettingsResource.toString()), contextkeys_1.WorkbenchStateContext.isEqualTo('workspace')),\n                    group: 'navigation',\n                    order: 1\n                });\n            }\n            this.updatePreferencesEditorMenuItemForWorkspaceFolders();\n        }\n        updatePreferencesEditorMenuItemForWorkspaceFolders() {\n            for (const folder of this.workpsaceContextService.getWorkspace().folders) {\n                const commandId = `_workbench.openFolderSettings.${folder.uri.toString()}`;\n                if (!commands_1.CommandsRegistry.getCommand(commandId)) {\n                    commands_1.CommandsRegistry.registerCommand(commandId, () => {\n                        if (this.workpsaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                            return this.preferencesService.openWorkspaceSettings(false);\n                        }\n                        else {\n                            return this.preferencesService.openFolderSettings(folder.uri, false);\n                        }\n                    });\n                    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                        command: {\n                            id: commandId,\n                            title: preferencesActions_1.OpenSettings2Action.LABEL,\n                            iconLocation: {\n                                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n                                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n                            }\n                        },\n                        when: contextkey_1.ContextKeyExpr.and(resources_1.ResourceContextKey.Resource.isEqualTo(this.preferencesService.getFolderSettingsResource(folder.uri).toString())),\n                        group: 'navigation',\n                        order: 1\n                    });\n                }\n            }\n        }\n    };\n    PreferencesActionsContribution = __decorate([\n        __param(0, environment_1.IEnvironmentService),\n        __param(1, preferences_2.IPreferencesService),\n        __param(2, workspace_1.IWorkspaceContextService),\n        __param(3, label_1.ILabelService),\n        __param(4, extensions_2.IExtensionService),\n        __param(5, windows_1.IWindowService)\n    ], PreferencesActionsContribution);\n    const workbenchContributionsRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchContributionsRegistry.registerWorkbenchContribution(PreferencesActionsContribution, lifecycle_2.LifecyclePhase.Starting);\n    workbenchContributionsRegistry.registerWorkbenchContribution(preferencesContribution_1.PreferencesContribution, lifecycle_2.LifecyclePhase.Starting);\n    commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OPEN_FOLDER_SETTINGS_COMMAND, function (accessor, resource) {\n        const preferencesService = accessor.get(preferences_2.IPreferencesService);\n        return preferencesService.openFolderSettings(resource);\n    });\n    commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenFolderSettingsAction.ID, serviceAccessor => {\n        serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenFolderSettingsAction, preferencesActions_1.OpenFolderSettingsAction.ID, preferencesActions_1.OpenFolderSettingsAction.LABEL).run();\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n        command: {\n            id: preferencesActions_1.OpenFolderSettingsAction.ID,\n            title: { value: preferencesActions_1.OpenFolderSettingsAction.LABEL, original: 'Preferences: Open Folder Settings' },\n            category: nls.localize('preferencesCategory', \"Preferences\")\n        },\n        when: contextkeys_1.WorkbenchStateContext.isEqualTo('workspace')\n    });\n    commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenWorkspaceSettingsAction.ID, serviceAccessor => {\n        serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenWorkspaceSettingsAction, preferencesActions_1.OpenWorkspaceSettingsAction.ID, preferencesActions_1.OpenWorkspaceSettingsAction.LABEL).run();\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n        command: {\n            id: preferencesActions_1.OpenWorkspaceSettingsAction.ID,\n            title: { value: preferencesActions_1.OpenWorkspaceSettingsAction.LABEL, original: 'Preferences: Open Workspace Settings' },\n            category: nls.localize('preferencesCategory', \"Preferences\")\n        },\n        when: contextkeys_1.WorkbenchStateContext.notEqualsTo('empty')\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n        primary: keyCodes_1.KeyCode.Escape,\n        handler: (accessor, args) => {\n            const control = accessor.get(editorService_1.IEditorService).activeControl;\n            if (control) {\n                control.clearSearchResults();\n            }\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, serviceAccessor => {\n        serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenGlobalKeybindingsFileAction, preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL).run();\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferencesActions_1.OpenGlobalKeybindingsFileAction.ID,\n            title: preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL,\n            iconLocation: {\n                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg`)),\n                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg`))\n            }\n        },\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n        group: 'navigation',\n    });\n    commands_1.CommandsRegistry.registerCommand(preferences_1.KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, serviceAccessor => {\n        const control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.search('@source:default');\n        }\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferences_1.KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS,\n            title: nls.localize('showDefaultKeybindings', \"Show Default Keybindings\")\n        },\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n        group: '1_keyboard_preferences_actions'\n    });\n    commands_1.CommandsRegistry.registerCommand(preferences_1.KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, serviceAccessor => {\n        const control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.search('@source:user');\n        }\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferences_1.KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS,\n            title: nls.localize('showUserKeybindings', \"Show User Keybindings\")\n        },\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n        group: '1_keyboard_preferences_actions'\n    });\n    class SettingsCommand extends editorExtensions_1.Command {\n        getPreferencesEditor(accessor) {\n            const activeControl = accessor.get(editorService_1.IEditorService).activeControl;\n            if (activeControl instanceof preferencesEditor_1.PreferencesEditor || activeControl instanceof settingsEditor2_1.SettingsEditor2) {\n                return activeControl;\n            }\n            return null;\n        }\n    }\n    class StartSearchDefaultSettingsCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor) {\n                preferencesEditor.focusSearch();\n            }\n        }\n    }\n    const startSearchCommand = new StartSearchDefaultSettingsCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_SEARCH,\n        precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR),\n        kbOpts: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    startSearchCommand.register();\n    class ClearSearchResultsCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor) {\n                preferencesEditor.clearSearchResults();\n            }\n        }\n    }\n    const clearSearchResultsCommand = new ClearSearchResultsCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n        precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n        kbOpts: { primary: keyCodes_1.KeyCode.Escape, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    clearSearchResultsCommand.register();\n    class FocusSettingsFileEditorCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n                preferencesEditor.focusSettingsFileEditor();\n            }\n            else if (preferencesEditor) {\n                preferencesEditor.focusSettings();\n            }\n        }\n    }\n    const focusSettingsFileEditorCommand = new FocusSettingsFileEditorCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_FILE,\n        precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS, suggest_1.Context.Visible.toNegated()),\n        kbOpts: { primary: keyCodes_1.KeyCode.DownArrow, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    focusSettingsFileEditorCommand.register();\n    const focusSettingsFromSearchCommand = new FocusSettingsFileEditorCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH,\n        precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS, suggest_1.Context.Visible.toNegated()),\n        kbOpts: { primary: keyCodes_1.KeyCode.DownArrow, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n    });\n    focusSettingsFromSearchCommand.register();\n    class FocusNextSearchResultCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n                preferencesEditor.focusNextResult();\n            }\n        }\n    }\n    const focusNextSearchResultCommand = new FocusNextSearchResultCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING,\n        precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n        kbOpts: { primary: keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    focusNextSearchResultCommand.register();\n    class FocusPreviousSearchResultCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n                preferencesEditor.focusPreviousResult();\n            }\n        }\n    }\n    const focusPreviousSearchResultCommand = new FocusPreviousSearchResultCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING,\n        precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n        kbOpts: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    focusPreviousSearchResultCommand.register();\n    class EditFocusedSettingCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n                preferencesEditor.editFocusedPreference();\n            }\n        }\n    }\n    const editFocusedSettingCommand = new EditFocusedSettingCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING,\n        precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n        kbOpts: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_DOT, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n    });\n    editFocusedSettingCommand.register();\n    class FocusSettingsListCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof settingsEditor2_1.SettingsEditor2) {\n                preferencesEditor.focusSettings();\n            }\n        }\n    }\n    const focusSettingsListCommand = new FocusSettingsListCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST,\n        precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_TOC_ROW_FOCUS),\n        kbOpts: { primary: keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n    });\n    focusSettingsListCommand.register();\n    class ShowContextMenuCommand extends SettingsCommand {\n        runCommand(accessor, args) {\n            const preferencesEditor = this.getPreferencesEditor(accessor);\n            if (preferencesEditor instanceof settingsEditor2_1.SettingsEditor2) {\n                preferencesEditor.showContextMenu();\n            }\n        }\n    }\n    const showContextMenuCommand = new ShowContextMenuCommand({\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU,\n        precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR),\n        kbOpts: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F9, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n    });\n    showContextMenuCommand.register();\n    commands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON, serviceAccessor => {\n        const control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n        if (control instanceof settingsEditor2_1.SettingsEditor2) {\n            return control.switchToSettingsFile();\n        }\n        return Promise.resolve(null);\n    });\n    commands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED, serviceAccessor => {\n        const control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n        if (control instanceof settingsEditor2_1.SettingsEditor2) {\n            control.focusSearch(`@${preferences_1.MODIFIED_SETTING_TAG}`);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_ONLINE, serviceAccessor => {\n        const control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n        if (control instanceof settingsEditor2_1.SettingsEditor2) {\n            control.focusSearch(`@tag:usesOnlineServices`);\n        }\n    });\n    // Preferences menu\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n        group: '1_settings',\n        command: {\n            id: preferences_1.SETTINGS_COMMAND_OPEN_SETTINGS,\n            title: nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, \"&&Settings\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n        group: '2_keybindings',\n        command: {\n            id: preferencesActions_1.OpenGlobalKeybindingsAction.ID,\n            title: nls.localize({ key: 'miOpenKeymap', comment: ['&& denotes a mnemonic'] }, \"&&Keyboard Shortcuts\")\n        },\n        order: 1\n    });\n    // Editor tool items\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferences_1.SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON,\n            title: nls.localize('openSettingsJson', \"Open Settings (JSON)\"),\n            iconLocation: {\n                dark: uri_1.URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg')),\n                light: uri_1.URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg'))\n            }\n        },\n        group: 'navigation',\n        order: 1,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED,\n            title: nls.localize('filterModifiedLabel', \"Show modified settings\")\n        },\n        group: '1_filter',\n        order: 1,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_ONLINE,\n            title: nls.localize('filterOnlineServicesLabel', \"Show settings for online services\"),\n        },\n        group: '1_filter',\n        order: 2,\n        when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.ExplorerContext, {\n        group: '2_workspace',\n        order: 20,\n        command: {\n            id: preferencesActions_1.OPEN_FOLDER_SETTINGS_COMMAND,\n            title: preferencesActions_1.OPEN_FOLDER_SETTINGS_LABEL\n        },\n        when: contextkey_1.ContextKeyExpr.and(files_1.ExplorerRootContext, files_1.ExplorerFolderContext)\n    });\n});\n",null]}