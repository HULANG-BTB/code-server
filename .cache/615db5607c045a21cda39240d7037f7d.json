{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/clickLinkGesture.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/clickLinkGesture.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/browser/browser\", \"vs/base/common/lifecycle\", \"vs/base/common/event\", \"vs/css!./goToDefinitionMouse\"], function (require, exports, keyCodes_1, browser, lifecycle_1, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function hasModifier(e, modifier) {\n        return !!e[modifier];\n    }\n    /**\n     * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n     */\n    class ClickLinkMouseEvent {\n        constructor(source, opts) {\n            this.target = source.target;\n            this.hasTriggerModifier = hasModifier(source.event, opts.triggerModifier);\n            this.hasSideBySideModifier = hasModifier(source.event, opts.triggerSideBySideModifier);\n            this.isNoneOrSingleMouseDown = (browser.isIE || source.event.detail <= 1); // IE does not support event.detail properly\n        }\n    }\n    exports.ClickLinkMouseEvent = ClickLinkMouseEvent;\n    /**\n     * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n     */\n    class ClickLinkKeyboardEvent {\n        constructor(source, opts) {\n            this.keyCodeIsTriggerKey = (source.keyCode === opts.triggerKey);\n            this.keyCodeIsSideBySideKey = (source.keyCode === opts.triggerSideBySideKey);\n            this.hasTriggerModifier = hasModifier(source, opts.triggerModifier);\n        }\n    }\n    exports.ClickLinkKeyboardEvent = ClickLinkKeyboardEvent;\n    class ClickLinkOptions {\n        constructor(triggerKey, triggerModifier, triggerSideBySideKey, triggerSideBySideModifier) {\n            this.triggerKey = triggerKey;\n            this.triggerModifier = triggerModifier;\n            this.triggerSideBySideKey = triggerSideBySideKey;\n            this.triggerSideBySideModifier = triggerSideBySideModifier;\n        }\n        equals(other) {\n            return (this.triggerKey === other.triggerKey\n                && this.triggerModifier === other.triggerModifier\n                && this.triggerSideBySideKey === other.triggerSideBySideKey\n                && this.triggerSideBySideModifier === other.triggerSideBySideModifier);\n        }\n    }\n    exports.ClickLinkOptions = ClickLinkOptions;\n    function createOptions(multiCursorModifier) {\n        if (multiCursorModifier === 'altKey') {\n            if (browser.isMacintosh) {\n                return new ClickLinkOptions(keyCodes_1.KeyCode.Meta, 'metaKey', keyCodes_1.KeyCode.Alt, 'altKey');\n            }\n            return new ClickLinkOptions(keyCodes_1.KeyCode.Ctrl, 'ctrlKey', keyCodes_1.KeyCode.Alt, 'altKey');\n        }\n        if (browser.isMacintosh) {\n            return new ClickLinkOptions(keyCodes_1.KeyCode.Alt, 'altKey', keyCodes_1.KeyCode.Meta, 'metaKey');\n        }\n        return new ClickLinkOptions(keyCodes_1.KeyCode.Alt, 'altKey', keyCodes_1.KeyCode.Ctrl, 'ctrlKey');\n    }\n    class ClickLinkGesture extends lifecycle_1.Disposable {\n        constructor(editor) {\n            super();\n            this._onMouseMoveOrRelevantKeyDown = this._register(new event_1.Emitter());\n            this.onMouseMoveOrRelevantKeyDown = this._onMouseMoveOrRelevantKeyDown.event;\n            this._onExecute = this._register(new event_1.Emitter());\n            this.onExecute = this._onExecute.event;\n            this._onCancel = this._register(new event_1.Emitter());\n            this.onCancel = this._onCancel.event;\n            this._editor = editor;\n            this._opts = createOptions(this._editor.getConfiguration().multiCursorModifier);\n            this.lastMouseMoveEvent = null;\n            this.hasTriggerKeyOnMouseDown = false;\n            this._register(this._editor.onDidChangeConfiguration((e) => {\n                if (e.multiCursorModifier) {\n                    const newOpts = createOptions(this._editor.getConfiguration().multiCursorModifier);\n                    if (this._opts.equals(newOpts)) {\n                        return;\n                    }\n                    this._opts = newOpts;\n                    this.lastMouseMoveEvent = null;\n                    this.hasTriggerKeyOnMouseDown = false;\n                    this._onCancel.fire();\n                }\n            }));\n            this._register(this._editor.onMouseMove((e) => this.onEditorMouseMove(new ClickLinkMouseEvent(e, this._opts))));\n            this._register(this._editor.onMouseDown((e) => this.onEditorMouseDown(new ClickLinkMouseEvent(e, this._opts))));\n            this._register(this._editor.onMouseUp((e) => this.onEditorMouseUp(new ClickLinkMouseEvent(e, this._opts))));\n            this._register(this._editor.onKeyDown((e) => this.onEditorKeyDown(new ClickLinkKeyboardEvent(e, this._opts))));\n            this._register(this._editor.onKeyUp((e) => this.onEditorKeyUp(new ClickLinkKeyboardEvent(e, this._opts))));\n            this._register(this._editor.onMouseDrag(() => this.resetHandler()));\n            this._register(this._editor.onDidChangeCursorSelection((e) => this.onDidChangeCursorSelection(e)));\n            this._register(this._editor.onDidChangeModel((e) => this.resetHandler()));\n            this._register(this._editor.onDidChangeModelContent(() => this.resetHandler()));\n            this._register(this._editor.onDidScrollChange((e) => {\n                if (e.scrollTopChanged || e.scrollLeftChanged) {\n                    this.resetHandler();\n                }\n            }));\n        }\n        onDidChangeCursorSelection(e) {\n            if (e.selection && e.selection.startColumn !== e.selection.endColumn) {\n                this.resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/Microsoft/vscode/issues/7827)\n            }\n        }\n        onEditorMouseMove(mouseEvent) {\n            this.lastMouseMoveEvent = mouseEvent;\n            this._onMouseMoveOrRelevantKeyDown.fire([mouseEvent, null]);\n        }\n        onEditorMouseDown(mouseEvent) {\n            // We need to record if we had the trigger key on mouse down because someone might select something in the editor\n            // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then\n            // release the mouse button without wanting to do the navigation.\n            // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.\n            this.hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;\n        }\n        onEditorMouseUp(mouseEvent) {\n            if (this.hasTriggerKeyOnMouseDown) {\n                this._onExecute.fire(mouseEvent);\n            }\n        }\n        onEditorKeyDown(e) {\n            if (this.lastMouseMoveEvent\n                && (e.keyCodeIsTriggerKey // User just pressed Ctrl/Cmd (normal goto definition)\n                    || (e.keyCodeIsSideBySideKey && e.hasTriggerModifier) // User pressed Ctrl/Cmd+Alt (goto definition to the side)\n                )) {\n                this._onMouseMoveOrRelevantKeyDown.fire([this.lastMouseMoveEvent, e]);\n            }\n            else if (e.hasTriggerModifier) {\n                this._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration\n            }\n        }\n        onEditorKeyUp(e) {\n            if (e.keyCodeIsTriggerKey) {\n                this._onCancel.fire();\n            }\n        }\n        resetHandler() {\n            this.lastMouseMoveEvent = null;\n            this.hasTriggerKeyOnMouseDown = false;\n            this._onCancel.fire();\n        }\n    }\n    exports.ClickLinkGesture = ClickLinkGesture;\n});\n",null]}