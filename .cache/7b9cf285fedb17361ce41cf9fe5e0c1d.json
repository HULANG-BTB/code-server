{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = require(\"fs\");\nvar fs_extra_1 = require(\"fs-extra\");\nvar path = require(\"path\");\nvar util_1 = require(\"util\");\nvar logger_1 = require(\"@coder/logger\");\nvar event_1 = require(\"vs/base/common/event\");\nvar workspaceStorage = require(\"vs/base/node/storage\");\nvar globalStorage = require(\"vs/platform/storage/node/storageIpc\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar paths = require(\"./paths\");\nvar workbench_1 = require(\"../workbench\");\n// tslint:disable completed-docs\nvar StorageDatabase = /** @class */ (function () {\n    function StorageDatabase(path) {\n        var _this = this;\n        this.onDidChangeItemsExternal = event_1.Event.None;\n        this.items = new Map();\n        this.fetched = false;\n        this.path = path.replace(/\\.vscdb$/, \".json\");\n        logger_1.logger.debug(\"Setting up storage\", logger_1.field(\"path\", this.path));\n        window.addEventListener(\"unload\", function () {\n            if (!navigator.sendBeacon) {\n                throw new Error(\"cannot save state\");\n            }\n            _this.triggerFlush(storage_1.WillSaveStateReason.SHUTDOWN);\n            var resourceBaseUrl = location.pathname.replace(/\\/$/, \"\") + \"/resource\";\n            navigator.sendBeacon(resourceBaseUrl + \"/\" + _this.path, _this.content);\n        });\n    }\n    StorageDatabase.prototype.getItems = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var contents, json_1, error_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.fetched) {\n                            return [2 /*return*/, this.items];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, util_1.promisify(fs_1.readFile)(this.path, \"utf8\")];\n                    case 2:\n                        contents = _a.sent();\n                        json_1 = JSON.parse(contents);\n                        Object.keys(json_1).forEach(function (key) {\n                            _this.items.set(key, json_1[key]);\n                        });\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        if (error_1.code !== \"ENOENT\") {\n                            throw error_1;\n                        }\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.fetched = true;\n                        return [2 /*return*/, this.items];\n                }\n            });\n        });\n    };\n    StorageDatabase.prototype.updateItems = function (request) {\n        var _this = this;\n        if (request.insert) {\n            request.insert.forEach(function (value, key) {\n                if (key === \"colorThemeData\") {\n                    localStorage.setItem(\"colorThemeData\", value);\n                }\n                _this.items.set(key, value);\n            });\n        }\n        if (request.delete) {\n            request.delete.forEach(function (key) { return _this.items.delete(key); });\n        }\n        return this.save();\n    };\n    StorageDatabase.prototype.close = function () {\n        return Promise.resolve();\n    };\n    StorageDatabase.prototype.checkIntegrity = function () {\n        return Promise.resolve(\"ok\");\n    };\n    StorageDatabase.prototype.save = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, fs_extra_1.mkdirp(path.dirname(this.path))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, util_1.promisify(fs_1.writeFile)(this.path, this.content)];\n                }\n            });\n        });\n    };\n    StorageDatabase.prototype.triggerFlush = function (reason) {\n        if (reason === void 0) { reason = storage_1.WillSaveStateReason.NONE; }\n        // tslint:disable-next-line:no-any\n        var storageService = workbench_1.workbench.serviceCollection.get(storage_1.IStorageService);\n        if (reason === storage_1.WillSaveStateReason.SHUTDOWN && storageService.close) {\n            storageService.close();\n            return true;\n        }\n        if (storageService._onWillSaveState) {\n            storageService._onWillSaveState.fire({ reason: reason });\n            return true;\n        }\n        return false;\n    };\n    Object.defineProperty(StorageDatabase.prototype, \"content\", {\n        get: function () {\n            var json = {};\n            this.items.forEach(function (value, key) {\n                json[key] = value;\n            });\n            return JSON.stringify(json);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return StorageDatabase;\n}());\nvar GlobalStorageDatabase = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalStorageDatabase, _super);\n    function GlobalStorageDatabase() {\n        return _super.call(this, path.join(paths.getAppDataPath(), \"globalStorage\", \"state.vscdb\")) || this;\n    }\n    GlobalStorageDatabase.prototype.dispose = function () {\n        // Nothing to do.\n    };\n    return GlobalStorageDatabase;\n}(StorageDatabase));\nvar workspaceTarget = workspaceStorage;\n// @ts-ignore TODO: don't ignore it.\nworkspaceTarget.SQLiteStorageDatabase = StorageDatabase;\nvar globalTarget = globalStorage;\n// @ts-ignore TODO: don't ignore it.\nglobalTarget.GlobalStorageDatabaseChannelClient = GlobalStorageDatabase;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/storageDatabase.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile, writeFile } from \"fs\";\nimport { mkdirp } from \"fs-extra\";\nimport * as path from \"path\";\nimport { promisify } from \"util\";\nimport { IDisposable } from \"@coder/disposable\";\nimport { logger, field } from \"@coder/logger\";\nimport { Event } from \"vs/base/common/event\";\nimport * as workspaceStorage from \"vs/base/node/storage\";\nimport * as globalStorage from \"vs/platform/storage/node/storageIpc\";\nimport { IStorageService, WillSaveStateReason } from \"vs/platform/storage/common/storage\";\nimport * as paths from \"./paths\";\nimport { workbench } from \"../workbench\";\n\n// tslint:disable completed-docs\n\nclass StorageDatabase implements workspaceStorage.IStorageDatabase {\n\tpublic readonly onDidChangeItemsExternal = Event.None;\n\tprivate readonly items = new Map<string, string>();\n\tprivate fetched: boolean = false;\n\tprivate readonly path: string;\n\n\tpublic constructor(path: string) {\n\t\tthis.path = path.replace(/\\.vscdb$/, \".json\");\n\t\tlogger.debug(\"Setting up storage\", field(\"path\", this.path));\n\t\twindow.addEventListener(\"unload\", () => {\n\t\t\tif (!navigator.sendBeacon) {\n\t\t\t\tthrow new Error(\"cannot save state\");\n\t\t\t}\n\n\t\t\tthis.triggerFlush(WillSaveStateReason.SHUTDOWN);\n\t\t\tconst resourceBaseUrl = location.pathname.replace(/\\/$/, \"\") + \"/resource\";\n\t\t\tnavigator.sendBeacon(`${resourceBaseUrl}/${this.path}`, this.content);\n\t\t});\n\t}\n\n\tpublic async getItems(): Promise<Map<string, string>> {\n\t\tif (this.fetched) {\n\t\t\treturn this.items;\n\t\t}\n\t\ttry {\n\t\t\tconst contents = await promisify(readFile)(this.path, \"utf8\");\n\t\t\tconst json = JSON.parse(contents);\n\t\t\tObject.keys(json).forEach((key) => {\n\t\t\t\tthis.items.set(key, json[key]);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error.code !== \"ENOENT\") {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tthis.fetched = true;\n\n\t\treturn this.items;\n\t}\n\n\tpublic updateItems(request: workspaceStorage.IUpdateRequest): Promise<void> {\n\t\tif (request.insert) {\n\t\t\trequest.insert.forEach((value, key) => {\n\t\t\t\tif (key === \"colorThemeData\") {\n\t\t\t\t\tlocalStorage.setItem(\"colorThemeData\", value);\n\t\t\t\t}\n\n\t\t\t\tthis.items.set(key, value);\n\t\t\t});\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\trequest.delete.forEach(key => this.items.delete(key));\n\t\t}\n\n\t\treturn this.save();\n\t}\n\n\tpublic close(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic checkIntegrity(): Promise<string> {\n\t\treturn Promise.resolve(\"ok\");\n\t}\n\n\tprivate async save(): Promise<void> {\n\t\tawait mkdirp(path.dirname(this.path));\n\n\t\treturn promisify(writeFile)(this.path, this.content);\n\t}\n\n\tprivate triggerFlush(reason: WillSaveStateReason = WillSaveStateReason.NONE): boolean {\n\t\t// tslint:disable-next-line:no-any\n\t\tconst storageService = workbench.serviceCollection.get<IStorageService>(IStorageService) as any;\n\t\tif (reason === WillSaveStateReason.SHUTDOWN && storageService.close) {\n\t\t\tstorageService.close();\n\n\t\t\treturn true;\n\t\t}\n\t\tif (storageService._onWillSaveState) {\n\t\t\tstorageService._onWillSaveState.fire({ reason });\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate get content(): string {\n\t\tconst json: { [key: string]: string } = {};\n\t\tthis.items.forEach((value, key) => {\n\t\t\tjson[key] = value;\n\t\t});\n\n\t\treturn JSON.stringify(json);\n\t}\n}\n\nclass GlobalStorageDatabase extends StorageDatabase implements IDisposable {\n\tpublic constructor() {\n\t\tsuper(path.join(paths.getAppDataPath(), \"globalStorage\", \"state.vscdb\"));\n\t}\n\n\tpublic dispose(): void {\n\t\t// Nothing to do.\n\t}\n}\n\nconst workspaceTarget = workspaceStorage as typeof workspaceStorage;\n// @ts-ignore TODO: don't ignore it.\nworkspaceTarget.SQLiteStorageDatabase = StorageDatabase;\n\nconst globalTarget = globalStorage as typeof globalStorage;\n// @ts-ignore TODO: don't ignore it.\nglobalTarget.GlobalStorageDatabaseChannelClient = GlobalStorageDatabase;\n"]}]}