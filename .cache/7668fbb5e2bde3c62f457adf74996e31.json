{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar lifecycle = require(\"vs/base/common/lifecycle\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar AbstractDebugAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractDebugAction, _super);\n    function AbstractDebugAction(id, label, cssClass, debugService, keybindingService, weight) {\n        var _this = _super.call(this, id, label, cssClass, false) || this;\n        _this.debugService = debugService;\n        _this.keybindingService = keybindingService;\n        _this.weight = weight;\n        _this.toDispose = [];\n        _this.toDispose.push(_this.debugService.onDidChangeState(function (state) { return _this.updateEnablement(state); }));\n        _this.updateLabel(label);\n        _this.updateEnablement();\n        return _this;\n    }\n    AbstractDebugAction.prototype.run = function (e) {\n        throw new Error('implement me');\n    };\n    Object.defineProperty(AbstractDebugAction.prototype, \"tooltip\", {\n        get: function () {\n            var keybinding = this.keybindingService.lookupKeybinding(this.id);\n            var keybindingLabel = keybinding && keybinding.getLabel();\n            return keybindingLabel ? this.label + \" (\" + keybindingLabel + \")\" : this.label;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractDebugAction.prototype.updateLabel = function (newLabel) {\n        this.label = newLabel;\n    };\n    AbstractDebugAction.prototype.updateEnablement = function (state) {\n        if (state === void 0) { state = this.debugService.state; }\n        this.enabled = this.isEnabled(state);\n    };\n    AbstractDebugAction.prototype.isEnabled = function (state) {\n        return true;\n    };\n    AbstractDebugAction.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.toDispose = lifecycle.dispose(this.toDispose);\n    };\n    AbstractDebugAction = tslib_1.__decorate([\n        tslib_1.__param(3, debug_1.IDebugService),\n        tslib_1.__param(4, keybinding_1.IKeybindingService)\n    ], AbstractDebugAction);\n    return AbstractDebugAction;\n}(actions_1.Action));\nexports.AbstractDebugAction = AbstractDebugAction;\nvar ConfigureAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigureAction, _super);\n    function ConfigureAction(id, label, debugService, keybindingService, notificationService, contextService) {\n        var _this = _super.call(this, id, label, 'debug-action configure', debugService, keybindingService) || this;\n        _this.notificationService = notificationService;\n        _this.contextService = contextService;\n        _this.toDispose.push(debugService.getConfigurationManager().onDidSelectConfiguration(function () { return _this.updateClass(); }));\n        _this.updateClass();\n        return _this;\n    }\n    Object.defineProperty(ConfigureAction.prototype, \"tooltip\", {\n        get: function () {\n            if (this.debugService.getConfigurationManager().selectedConfiguration.name) {\n                return ConfigureAction.LABEL;\n            }\n            return nls.localize('launchJsonNeedsConfigurtion', \"Configure or Fix 'launch.json'\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigureAction.prototype.updateClass = function () {\n        var configurationManager = this.debugService.getConfigurationManager();\n        var configurationCount = configurationManager.getLaunches().map(function (l) { return l.getConfigurationNames().length; }).reduce(function (sum, current) { return sum + current; });\n        this.class = configurationCount > 0 ? 'debug-action configure' : 'debug-action configure notification';\n    };\n    ConfigureAction.prototype.run = function (event) {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            this.notificationService.info(nls.localize('noFolderDebugConfig', \"Please first open a folder in order to do advanced debug configuration.\"));\n            return Promise.resolve();\n        }\n        var sideBySide = !!(event && (event.ctrlKey || event.metaKey));\n        var configurationManager = this.debugService.getConfigurationManager();\n        if (!configurationManager.selectedConfiguration.launch) {\n            configurationManager.selectConfiguration(configurationManager.getLaunches()[0]);\n        }\n        return configurationManager.selectedConfiguration.launch.openConfigFile(sideBySide, false);\n    };\n    ConfigureAction.ID = 'workbench.action.debug.configure';\n    ConfigureAction.LABEL = nls.localize('openLaunchJson', \"Open {0}\", 'launch.json');\n    ConfigureAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, notification_1.INotificationService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService)\n    ], ConfigureAction);\n    return ConfigureAction;\n}(AbstractDebugAction));\nexports.ConfigureAction = ConfigureAction;\nvar StartAction = /** @class */ (function (_super) {\n    tslib_1.__extends(StartAction, _super);\n    function StartAction(id, label, debugService, keybindingService, contextService, historyService) {\n        var _this = _super.call(this, id, label, 'debug-action start', debugService, keybindingService) || this;\n        _this.contextService = contextService;\n        _this.historyService = historyService;\n        _this.toDispose.push(_this.debugService.getConfigurationManager().onDidSelectConfiguration(function () { return _this.updateEnablement(); }));\n        _this.toDispose.push(_this.debugService.onDidNewSession(function () { return _this.updateEnablement(); }));\n        _this.toDispose.push(_this.debugService.onDidEndSession(function () { return _this.updateEnablement(); }));\n        _this.toDispose.push(_this.contextService.onDidChangeWorkbenchState(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    StartAction.prototype.run = function () {\n        return debugUtils_1.startDebugging(this.debugService, this.historyService, this.isNoDebug());\n    };\n    StartAction.prototype.isNoDebug = function () {\n        return false;\n    };\n    StartAction.isEnabled = function (debugService) {\n        var sessions = debugService.getModel().getSessions();\n        if (debugService.state === debug_1.State.Initializing) {\n            return false;\n        }\n        if ((sessions.length > 0) && debugService.getConfigurationManager().getLaunches().every(function (l) { return l.getConfigurationNames().length === 0; })) {\n            // There is already a debug session running and we do not have any launch configuration selected\n            return false;\n        }\n        return true;\n    };\n    // Disabled if the launch drop down shows the launch config that is already running.\n    StartAction.prototype.isEnabled = function () {\n        return StartAction.isEnabled(this.debugService);\n    };\n    StartAction.ID = 'workbench.action.debug.start';\n    StartAction.LABEL = nls.localize('startDebug', \"Start Debugging\");\n    StartAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(5, history_1.IHistoryService)\n    ], StartAction);\n    return StartAction;\n}(AbstractDebugAction));\nexports.StartAction = StartAction;\nvar RunAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RunAction, _super);\n    function RunAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RunAction.prototype.isNoDebug = function () {\n        return true;\n    };\n    RunAction.ID = 'workbench.action.debug.run';\n    RunAction.LABEL = nls.localize('startWithoutDebugging', \"Start Without Debugging\");\n    return RunAction;\n}(StartAction));\nexports.RunAction = RunAction;\nvar SelectAndStartAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectAndStartAction, _super);\n    function SelectAndStartAction(id, label, debugService, keybindingService, quickOpenService) {\n        var _this = _super.call(this, id, label, '', debugService, keybindingService) || this;\n        _this.quickOpenService = quickOpenService;\n        return _this;\n    }\n    SelectAndStartAction.prototype.run = function () {\n        return this.quickOpenService.show('debug ');\n    };\n    SelectAndStartAction.ID = 'workbench.action.debug.selectandstart';\n    SelectAndStartAction.LABEL = nls.localize('selectAndStartDebugging', \"Select and Start Debugging\");\n    SelectAndStartAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, quickOpen_1.IQuickOpenService)\n    ], SelectAndStartAction);\n    return SelectAndStartAction;\n}(AbstractDebugAction));\nexports.SelectAndStartAction = SelectAndStartAction;\nvar RemoveBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoveBreakpointAction, _super);\n    function RemoveBreakpointAction(id, label, debugService, keybindingService) {\n        return _super.call(this, id, label, 'debug-action remove', debugService, keybindingService) || this;\n    }\n    RemoveBreakpointAction.prototype.run = function (breakpoint) {\n        return breakpoint instanceof debugModel_1.Breakpoint ? this.debugService.removeBreakpoints(breakpoint.getId())\n            : this.debugService.removeFunctionBreakpoints(breakpoint.getId());\n    };\n    RemoveBreakpointAction.ID = 'workbench.debug.viewlet.action.removeBreakpoint';\n    RemoveBreakpointAction.LABEL = nls.localize('removeBreakpoint', \"Remove Breakpoint\");\n    RemoveBreakpointAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], RemoveBreakpointAction);\n    return RemoveBreakpointAction;\n}(AbstractDebugAction));\nexports.RemoveBreakpointAction = RemoveBreakpointAction;\nvar RemoveAllBreakpointsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoveAllBreakpointsAction, _super);\n    function RemoveAllBreakpointsAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    RemoveAllBreakpointsAction.prototype.run = function () {\n        return Promise.all([this.debugService.removeBreakpoints(), this.debugService.removeFunctionBreakpoints()]);\n    };\n    RemoveAllBreakpointsAction.prototype.isEnabled = function (state) {\n        var model = this.debugService.getModel();\n        return _super.prototype.isEnabled.call(this, state) && (model.getBreakpoints().length > 0 || model.getFunctionBreakpoints().length > 0);\n    };\n    RemoveAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.removeAllBreakpoints';\n    RemoveAllBreakpointsAction.LABEL = nls.localize('removeAllBreakpoints', \"Remove All Breakpoints\");\n    RemoveAllBreakpointsAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], RemoveAllBreakpointsAction);\n    return RemoveAllBreakpointsAction;\n}(AbstractDebugAction));\nexports.RemoveAllBreakpointsAction = RemoveAllBreakpointsAction;\nvar EnableAllBreakpointsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(EnableAllBreakpointsAction, _super);\n    function EnableAllBreakpointsAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action enable-all-breakpoints', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    EnableAllBreakpointsAction.prototype.run = function () {\n        return this.debugService.enableOrDisableBreakpoints(true);\n    };\n    EnableAllBreakpointsAction.prototype.isEnabled = function (state) {\n        var model = this.debugService.getModel();\n        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return !bp.enabled; });\n    };\n    EnableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.enableAllBreakpoints';\n    EnableAllBreakpointsAction.LABEL = nls.localize('enableAllBreakpoints', \"Enable All Breakpoints\");\n    EnableAllBreakpointsAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], EnableAllBreakpointsAction);\n    return EnableAllBreakpointsAction;\n}(AbstractDebugAction));\nexports.EnableAllBreakpointsAction = EnableAllBreakpointsAction;\nvar DisableAllBreakpointsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DisableAllBreakpointsAction, _super);\n    function DisableAllBreakpointsAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action disable-all-breakpoints', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    DisableAllBreakpointsAction.prototype.run = function () {\n        return this.debugService.enableOrDisableBreakpoints(false);\n    };\n    DisableAllBreakpointsAction.prototype.isEnabled = function (state) {\n        var model = this.debugService.getModel();\n        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return bp.enabled; });\n    };\n    DisableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.disableAllBreakpoints';\n    DisableAllBreakpointsAction.LABEL = nls.localize('disableAllBreakpoints', \"Disable All Breakpoints\");\n    DisableAllBreakpointsAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], DisableAllBreakpointsAction);\n    return DisableAllBreakpointsAction;\n}(AbstractDebugAction));\nexports.DisableAllBreakpointsAction = DisableAllBreakpointsAction;\nvar ToggleBreakpointsActivatedAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleBreakpointsActivatedAction, _super);\n    function ToggleBreakpointsActivatedAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action breakpoints-activate', debugService, keybindingService) || this;\n        _this.updateLabel(_this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () {\n            _this.updateLabel(_this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);\n            _this.updateEnablement();\n        }));\n        return _this;\n    }\n    ToggleBreakpointsActivatedAction.prototype.run = function () {\n        return this.debugService.setBreakpointsActivated(!this.debugService.getModel().areBreakpointsActivated());\n    };\n    ToggleBreakpointsActivatedAction.prototype.isEnabled = function (state) {\n        return (this.debugService.getModel().getFunctionBreakpoints().length + this.debugService.getModel().getBreakpoints().length) > 0;\n    };\n    ToggleBreakpointsActivatedAction.ID = 'workbench.debug.viewlet.action.toggleBreakpointsActivatedAction';\n    ToggleBreakpointsActivatedAction.ACTIVATE_LABEL = nls.localize('activateBreakpoints', \"Activate Breakpoints\");\n    ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL = nls.localize('deactivateBreakpoints', \"Deactivate Breakpoints\");\n    ToggleBreakpointsActivatedAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], ToggleBreakpointsActivatedAction);\n    return ToggleBreakpointsActivatedAction;\n}(AbstractDebugAction));\nexports.ToggleBreakpointsActivatedAction = ToggleBreakpointsActivatedAction;\nvar ReapplyBreakpointsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReapplyBreakpointsAction, _super);\n    function ReapplyBreakpointsAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, '', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    ReapplyBreakpointsAction.prototype.run = function () {\n        return this.debugService.setBreakpointsActivated(true);\n    };\n    ReapplyBreakpointsAction.prototype.isEnabled = function (state) {\n        var model = this.debugService.getModel();\n        return _super.prototype.isEnabled.call(this, state) && (state === debug_1.State.Running || state === debug_1.State.Stopped) &&\n            (model.getFunctionBreakpoints().length + model.getBreakpoints().length + model.getExceptionBreakpoints().length > 0);\n    };\n    ReapplyBreakpointsAction.ID = 'workbench.debug.viewlet.action.reapplyBreakpointsAction';\n    ReapplyBreakpointsAction.LABEL = nls.localize('reapplyAllBreakpoints', \"Reapply All Breakpoints\");\n    ReapplyBreakpointsAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], ReapplyBreakpointsAction);\n    return ReapplyBreakpointsAction;\n}(AbstractDebugAction));\nexports.ReapplyBreakpointsAction = ReapplyBreakpointsAction;\nvar AddFunctionBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AddFunctionBreakpointAction, _super);\n    function AddFunctionBreakpointAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action add-function-breakpoint', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    AddFunctionBreakpointAction.prototype.run = function () {\n        this.debugService.addFunctionBreakpoint();\n        return Promise.resolve();\n    };\n    AddFunctionBreakpointAction.prototype.isEnabled = function (state) {\n        return !this.debugService.getViewModel().getSelectedFunctionBreakpoint()\n            && this.debugService.getModel().getFunctionBreakpoints().every(function (fbp) { return !!fbp.name; });\n    };\n    AddFunctionBreakpointAction.ID = 'workbench.debug.viewlet.action.addFunctionBreakpointAction';\n    AddFunctionBreakpointAction.LABEL = nls.localize('addFunctionBreakpoint', \"Add Function Breakpoint\");\n    AddFunctionBreakpointAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], AddFunctionBreakpointAction);\n    return AddFunctionBreakpointAction;\n}(AbstractDebugAction));\nexports.AddFunctionBreakpointAction = AddFunctionBreakpointAction;\nvar AddWatchExpressionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AddWatchExpressionAction, _super);\n    function AddWatchExpressionAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action add-watch-expression', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    AddWatchExpressionAction.prototype.run = function () {\n        this.debugService.addWatchExpression();\n        return Promise.resolve(undefined);\n    };\n    AddWatchExpressionAction.prototype.isEnabled = function (state) {\n        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().every(function (we) { return !!we.name; });\n    };\n    AddWatchExpressionAction.ID = 'workbench.debug.viewlet.action.addWatchExpression';\n    AddWatchExpressionAction.LABEL = nls.localize('addWatchExpression', \"Add Expression\");\n    AddWatchExpressionAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], AddWatchExpressionAction);\n    return AddWatchExpressionAction;\n}(AbstractDebugAction));\nexports.AddWatchExpressionAction = AddWatchExpressionAction;\nvar RemoveAllWatchExpressionsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoveAllWatchExpressionsAction, _super);\n    function RemoveAllWatchExpressionsAction(id, label, debugService, keybindingService) {\n        var _this = _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService) || this;\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(); }));\n        return _this;\n    }\n    RemoveAllWatchExpressionsAction.prototype.run = function () {\n        this.debugService.removeWatchExpressions();\n        return Promise.resolve();\n    };\n    RemoveAllWatchExpressionsAction.prototype.isEnabled = function (state) {\n        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().length > 0;\n    };\n    RemoveAllWatchExpressionsAction.ID = 'workbench.debug.viewlet.action.removeAllWatchExpressions';\n    RemoveAllWatchExpressionsAction.LABEL = nls.localize('removeAllWatchExpressions', \"Remove All Expressions\");\n    RemoveAllWatchExpressionsAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService), tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], RemoveAllWatchExpressionsAction);\n    return RemoveAllWatchExpressionsAction;\n}(AbstractDebugAction));\nexports.RemoveAllWatchExpressionsAction = RemoveAllWatchExpressionsAction;\nvar FocusSessionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusSessionAction, _super);\n    function FocusSessionAction(id, label, debugService, keybindingService, editorService) {\n        var _this = _super.call(this, id, label, '', debugService, keybindingService, 100) || this;\n        _this.editorService = editorService;\n        return _this;\n    }\n    FocusSessionAction.prototype.run = function (session) {\n        this.debugService.focusStackFrame(undefined, undefined, session, true);\n        var stackFrame = this.debugService.getViewModel().focusedStackFrame;\n        if (stackFrame) {\n            return stackFrame.openInEditor(this.editorService, true);\n        }\n        return Promise.resolve(undefined);\n    };\n    FocusSessionAction.ID = 'workbench.action.debug.focusProcess';\n    FocusSessionAction.LABEL = nls.localize('focusSession', \"Focus Session\");\n    FocusSessionAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService),\n        tslib_1.__param(4, editorService_1.IEditorService)\n    ], FocusSessionAction);\n    return FocusSessionAction;\n}(AbstractDebugAction));\nexports.FocusSessionAction = FocusSessionAction;\nvar CopyValueAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyValueAction, _super);\n    function CopyValueAction(id, label, value, context, debugService, clipboardService) {\n        var _this = _super.call(this, id, label, 'debug-action copy-value') || this;\n        _this.value = value;\n        _this.context = context;\n        _this.debugService = debugService;\n        _this.clipboardService = clipboardService;\n        _this._enabled = typeof _this.value === 'string' || (_this.value instanceof debugModel_1.Variable && !!_this.value.evaluateName);\n        return _this;\n    }\n    CopyValueAction.prototype.run = function () {\n        var _this = this;\n        var stackFrame = this.debugService.getViewModel().focusedStackFrame;\n        var session = this.debugService.getViewModel().focusedSession;\n        if (this.value instanceof debugModel_1.Variable && stackFrame && session && this.value.evaluateName) {\n            return session.evaluate(this.value.evaluateName, stackFrame.frameId, this.context).then(function (result) {\n                _this.clipboardService.writeText(result.body.result);\n            }, function (err) { return _this.clipboardService.writeText(_this.value.value); });\n        }\n        this.clipboardService.writeText(this.value);\n        return Promise.resolve(undefined);\n    };\n    CopyValueAction.ID = 'workbench.debug.viewlet.action.copyValue';\n    CopyValueAction.LABEL = nls.localize('copyValue', \"Copy Value\");\n    CopyValueAction = tslib_1.__decorate([\n        tslib_1.__param(4, debug_1.IDebugService),\n        tslib_1.__param(5, clipboardService_1.IClipboardService)\n    ], CopyValueAction);\n    return CopyValueAction;\n}(actions_1.Action));\nexports.CopyValueAction = CopyValueAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugActions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,kDAAgD;AAChD,oDAAsD;AACtD,uEAA8E;AAC9E,oEAAkG;AAClG,iEAAwH;AACxH,2EAAoF;AACpF,mFAAmF;AACnF,oEAA2E;AAC3E,6EAAoF;AACpF,wEAA+E;AAC/E,kFAAkF;AAClF,2EAA8E;AAE9E;IAAkD,+CAAM;IAIvD,6BACC,EAAU,EAAE,KAAa,EAAE,QAAgB,EAClB,YAA2B,EACtB,iBAAqC,EAC5D,MAAe;QAJvB,YAMC,kBAAM,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,SAMjC;QAVyB,kBAAY,GAAZ,YAAY,CAAe;QACtB,uBAAiB,GAAjB,iBAAiB,CAAoB;QAC5D,YAAM,GAAN,MAAM,CAAS;QAGtB,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC,CAAC;QAE/F,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxB,KAAI,CAAC,gBAAgB,EAAE,CAAC;;IACzB,CAAC;IAEM,iCAAG,GAAV,UAAW,CAAO;QACjB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IACjC,CAAC;IAED,sBAAW,wCAAO;aAAlB;YACC,IAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACpE,IAAM,eAAe,GAAG,UAAU,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC;YAE5D,OAAO,eAAe,CAAC,CAAC,CAAI,IAAI,CAAC,KAAK,UAAK,eAAe,MAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;QAC5E,CAAC;;;OAAA;IAES,yCAAW,GAArB,UAAsB,QAAgB;QACrC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACvB,CAAC;IAES,8CAAgB,GAA1B,UAA2B,KAA+B;QAA/B,sBAAA,EAAA,QAAQ,IAAI,CAAC,YAAY,CAAC,KAAK;QACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAES,uCAAS,GAAnB,UAAoB,KAAY;QAC/B,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,qCAAO,GAAd;QACC,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IA5CoB,mBAAmB;QAMtC,mBAAA,qBAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;OAPC,mBAAmB,CA6CxC;IAAD,0BAAC;CAAA,AA7CD,CAAkD,gBAAM,GA6CvD;AA7CqB,kDAAmB;AA+CzC;IAAqC,2CAAmB;IAIvD,yBAAY,EAAU,EAAE,KAAa,EACrB,YAA2B,EACtB,iBAAqC,EAClB,mBAAyC,EACrC,cAAwC;QAJpF,YAMC,kBAAM,EAAE,EAAE,KAAK,EAAE,wBAAwB,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAG3E;QANuC,yBAAmB,GAAnB,mBAAmB,CAAsB;QACrC,oBAAc,GAAd,cAAc,CAA0B;QAGnF,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,wBAAwB,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC,CAAC,CAAC;QAC/G,KAAI,CAAC,WAAW,EAAE,CAAC;;IACpB,CAAC;IAED,sBAAW,oCAAO;aAAlB;YACC,IAAI,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,qBAAqB,CAAC,IAAI,EAAE;gBAC3E,OAAO,eAAe,CAAC,KAAK,CAAC;aAC7B;YAED,OAAO,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,gCAAgC,CAAC,CAAC;QACtF,CAAC;;;OAAA;IAEO,qCAAW,GAAnB;QACC,IAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC;QACzE,IAAM,kBAAkB,GAAG,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,qBAAqB,EAAE,CAAC,MAAM,EAAhC,CAAgC,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,OAAA,GAAG,GAAG,OAAO,EAAb,CAAa,CAAC,CAAC;QACjJ,IAAI,CAAC,KAAK,GAAG,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,qCAAqC,CAAC;IACxG,CAAC;IAEM,6BAAG,GAAV,UAAW,KAAW;QACrB,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,KAAK,0BAAc,CAAC,KAAK,EAAE;YACrE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,yEAAyE,CAAC,CAAC,CAAC;YAC9I,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SACzB;QAED,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,IAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC;QACzE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,MAAM,EAAE;YACvD,oBAAoB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAChF;QAED,OAAO,oBAAoB,CAAC,qBAAqB,CAAC,MAAO,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC7F,CAAC;IAzCe,kBAAE,GAAG,kCAAkC,CAAC;IACjD,qBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAF7D,eAAe;QAKzB,mBAAA,qBAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,oCAAwB,CAAA;OARd,eAAe,CA2C3B;IAAD,sBAAC;CAAA,AA3CD,CAAqC,mBAAmB,GA2CvD;AA3CY,0CAAe;AA6C5B;IAAiC,uCAAmB;IAInD,qBAAY,EAAU,EAAE,KAAa,EACrB,YAA2B,EACtB,iBAAqC,EACd,cAAwC,EACjD,cAA+B;QAJlE,YAMC,kBAAM,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAMvE;QAT2C,oBAAc,GAAd,cAAc,CAA0B;QACjD,oBAAc,GAAd,cAAc,CAAiB;QAIjE,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,wBAAwB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;QACzH,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;QACtF,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;QACtF,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACnG,CAAC;IAEM,yBAAG,GAAV;QACC,OAAO,2BAAc,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACjF,CAAC;IAES,+BAAS,GAAnB;QACC,OAAO,KAAK,CAAC;IACd,CAAC;IAEa,qBAAS,GAAvB,UAAwB,YAA2B;QAClD,IAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;QAEvD,IAAI,YAAY,CAAC,KAAK,KAAK,aAAK,CAAC,YAAY,EAAE;YAC9C,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC,uBAAuB,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,qBAAqB,EAAE,CAAC,MAAM,KAAK,CAAC,EAAtC,CAAsC,CAAC,EAAE;YACrI,gGAAgG;YAChG,OAAO,KAAK,CAAC;SACb;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,oFAAoF;IAC1E,+BAAS,GAAnB;QACC,OAAO,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;IA1CM,cAAE,GAAG,8BAA8B,CAAC;IACpC,iBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;IAFjD,WAAW;QAKrB,mBAAA,qBAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,oCAAwB,CAAA;QACxB,mBAAA,yBAAe,CAAA;OARL,WAAW,CA4CvB;IAAD,kBAAC;CAAA,AA5CD,CAAiC,mBAAmB,GA4CnD;AA5CY,kCAAW;AA8CxB;IAA+B,qCAAW;IAA1C;;IAOA,CAAC;IAHU,6BAAS,GAAnB;QACC,OAAO,IAAI,CAAC;IACb,CAAC;IALe,YAAE,GAAG,4BAA4B,CAAC;IAC3C,eAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;IAKjF,gBAAC;CAAA,AAPD,CAA+B,WAAW,GAOzC;AAPY,8BAAS;AAStB;IAA0C,gDAAmB;IAI5D,8BAAY,EAAU,EAAE,KAAa,EACrB,YAA2B,EACtB,iBAAqC,EACrB,gBAAmC;QAHxE,YAKC,kBAAM,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,iBAAiB,CAAC,SACrD;QAHoC,sBAAgB,GAAhB,gBAAgB,CAAmB;;IAGxE,CAAC;IAEM,kCAAG,GAAV;QACC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAbe,uBAAE,GAAG,uCAAuC,CAAC;IACtD,0BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,4BAA4B,CAAC,CAAC;IAFzE,oBAAoB;QAK9B,mBAAA,qBAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,6BAAiB,CAAA;OAPP,oBAAoB,CAehC;IAAD,2BAAC;CAAA,AAfD,CAA0C,mBAAmB,GAe5D;AAfY,oDAAoB;AAiBjC;IAA4C,kDAAmB;IAI9D,gCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;eAC3I,kBAAM,EAAE,EAAE,KAAK,EAAE,qBAAqB,EAAE,YAAY,EAAE,iBAAiB,CAAC;IACzE,CAAC;IAEM,oCAAG,GAAV,UAAW,UAAuB;QACjC,OAAO,UAAU,YAAY,uBAAU,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YAChG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;IACpE,CAAC;IAVe,yBAAE,GAAG,iDAAiD,CAAC;IAChE,4BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;IAFzD,sBAAsB;QAIM,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,sBAAsB,CAYlC;IAAD,6BAAC;CAAA,AAZD,CAA4C,mBAAmB,GAY9D;AAZY,wDAAsB;AAcnC;IAAgD,sDAAmB;IAIlE,oCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,yBAAyB,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAE5E;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACzG,CAAC;IAEM,wCAAG,GAAV;QACC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAC5G,CAAC;IAES,8CAAS,GAAnB,UAAoB,KAAY;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3C,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,sBAAsB,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACnH,CAAC;IAfe,6BAAE,GAAG,qDAAqD,CAAC;IACpE,gCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;IAFlE,0BAA0B;QAIE,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,0BAA0B,CAiBtC;IAAD,iCAAC;CAAA,AAjBD,CAAgD,mBAAmB,GAiBlE;AAjBY,gEAA0B;AAmBvC;IAAgD,sDAAmB;IAIlE,oCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,qCAAqC,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAExF;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACzG,CAAC;IAEM,wCAAG,GAAV;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAES,8CAAS,GAAnB,UAAoB,KAAY;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3C,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAiC,KAAK,CAAC,cAAc,EAAG,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,EAAE,CAAC,OAAO,EAAX,CAAW,CAAC,CAAC;IAC9L,CAAC;IAfe,6BAAE,GAAG,qDAAqD,CAAC;IACpE,gCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;IAFlE,0BAA0B;QAIE,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,0BAA0B,CAiBtC;IAAD,iCAAC;CAAA,AAjBD,CAAgD,mBAAmB,GAiBlE;AAjBY,gEAA0B;AAmBvC;IAAiD,uDAAmB;IAInE,qCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,sCAAsC,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAEzF;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACzG,CAAC;IAEM,yCAAG,GAAV;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAES,+CAAS,GAAnB,UAAoB,KAAY;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3C,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAiC,KAAK,CAAC,cAAc,EAAG,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,OAAO,EAAV,CAAU,CAAC,CAAC;IAC7L,CAAC;IAfe,8BAAE,GAAG,sDAAsD,CAAC;IACrE,iCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;IAFpE,2BAA2B;QAIC,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,2BAA2B,CAiBvC;IAAD,kCAAC;CAAA,AAjBD,CAAiD,mBAAmB,GAiBnE;AAjBY,kEAA2B;AAmBxC;IAAsD,4DAAmB;IAKxE,0CAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,mCAAmC,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAOtF;QANA,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,gCAAgC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gCAAgC,CAAC,cAAc,CAAC,CAAC;QAE/K,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC;YACvE,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,gCAAgC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gCAAgC,CAAC,cAAc,CAAC,CAAC;YAC/K,KAAI,CAAC,gBAAgB,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAEM,8CAAG,GAAV;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC,CAAC;IAC3G,CAAC;IAES,oDAAS,GAAnB,UAAoB,KAAY;QAC/B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAClI,CAAC;IApBe,mCAAE,GAAG,iEAAiE,CAAC;IAChF,+CAAc,GAAG,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,sBAAsB,CAAC,CAAC;IAC7E,iDAAgB,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,wBAAwB,CAAC,CAAC;IAH9E,gCAAgC;QAKJ,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAL1F,gCAAgC,CAsB5C;IAAD,uCAAC;CAAA,AAtBD,CAAsD,mBAAmB,GAsBxE;AAtBY,4EAAgC;AAwB7C;IAA8C,oDAAmB;IAIhE,kCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAErD;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACzG,CAAC;IAEM,sCAAG,GAAV;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAES,4CAAS,GAAnB,UAAoB,KAAY;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3C,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,aAAK,CAAC,OAAO,IAAI,KAAK,KAAK,aAAK,CAAC,OAAO,CAAC;YACpF,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvH,CAAC;IAhBe,2BAAE,GAAG,yDAAyD,CAAC;IACxE,8BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;IAFpE,wBAAwB;QAII,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,wBAAwB,CAkBpC;IAAD,+BAAC;CAAA,AAlBD,CAA8C,mBAAmB,GAkBhE;AAlBY,4DAAwB;AAoBrC;IAAiD,uDAAmB;IAInE,qCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,sCAAsC,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAEzF;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IACzG,CAAC;IAEM,yCAAG,GAAV;QACC,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC;QAC1C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAES,+CAAS,GAAnB,UAAoB,KAAY;QAC/B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,6BAA6B,EAAE;eACpE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,sBAAsB,EAAE,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,IAAI,EAAV,CAAU,CAAC,CAAC;IACpF,CAAC;IAhBe,8BAAE,GAAG,4DAA4D,CAAC;IAC3E,iCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;IAFpE,2BAA2B;QAIC,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,2BAA2B,CAkBvC;IAAD,kCAAC;CAAA,AAlBD,CAAiD,mBAAmB,GAkBnE;AAlBY,kEAA2B;AAoBxC;IAA8C,oDAAmB;IAIhE,kCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,mCAAmC,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAEtF;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IAC9G,CAAC;IAEM,sCAAG,GAAV;QACC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;QACvC,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAES,4CAAS,GAAnB,UAAoB,KAAY;QAC/B,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,CAAC,KAAK,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,IAAI,EAAT,CAAS,CAAC,CAAC;IAC5G,CAAC;IAfe,2BAAE,GAAG,mDAAmD,CAAC;IAClE,8BAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;IAFxD,wBAAwB;QAII,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,wBAAwB,CAiBpC;IAAD,+BAAC;CAAA,AAjBD,CAA8C,mBAAmB,GAiBhE;AAjBY,4DAAwB;AAmBrC;IAAqD,2DAAmB;IAIvE,yCAAY,EAAU,EAAE,KAAa,EAAiB,YAA2B,EAAsB,iBAAqC;QAA5I,YACC,kBAAM,EAAE,EAAE,KAAK,EAAE,yBAAyB,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAE5E;QADA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC;;IAC9G,CAAC;IAEM,6CAAG,GAAV;QACC,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,CAAC;QAC3C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAES,mDAAS,GAAnB,UAAoB,KAAY;QAC/B,OAAO,iBAAM,SAAS,YAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;IAChG,CAAC;IAfe,kCAAE,GAAG,0DAA0D,CAAC;IACzE,qCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,2BAA2B,EAAE,wBAAwB,CAAC,CAAC;IAFvE,+BAA+B;QAIH,mBAAA,qBAAa,CAAA,EAA+B,mBAAA,+BAAkB,CAAA;OAJ1F,+BAA+B,CAiB3C;IAAD,sCAAC;CAAA,AAjBD,CAAqD,mBAAmB,GAiBvE;AAjBY,0EAA+B;AAmB5C;IAAwC,8CAAmB;IAI1D,4BAAY,EAAU,EAAE,KAAa,EACrB,YAA2B,EACtB,iBAAqC,EACxB,aAA6B;QAH/D,YAKC,kBAAM,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,iBAAiB,EAAE,GAAG,CAAC,SAC1D;QAHiC,mBAAa,GAAb,aAAa,CAAgB;;IAG/D,CAAC;IAEM,gCAAG,GAAV,UAAW,OAAsB;QAChC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACvE,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,iBAAiB,CAAC;QACtE,IAAI,UAAU,EAAE;YACf,OAAO,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACzD;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAnBe,qBAAE,GAAG,qCAAqC,CAAC;IACpD,wBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;IAFjD,kBAAkB;QAK5B,mBAAA,qBAAa,CAAA;QACb,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,8BAAc,CAAA;OAPJ,kBAAkB,CAqB9B;IAAD,yBAAC;CAAA,AArBD,CAAwC,mBAAmB,GAqB1D;AArBY,gDAAkB;AAuB/B;IAAqC,2CAAM;IAI1C,yBACC,EAAU,EAAE,KAAa,EAAU,KAAU,EAAU,OAAe,EACtC,YAA2B,EACvB,gBAAmC;QAHxE,YAKC,kBAAM,EAAE,EAAE,KAAK,EAAE,yBAAyB,CAAC,SAE3C;QANmC,WAAK,GAAL,KAAK,CAAK;QAAU,aAAO,GAAP,OAAO,CAAQ;QACtC,kBAAY,GAAZ,YAAY,CAAe;QACvB,sBAAgB,GAAhB,gBAAgB,CAAmB;QAGvE,KAAI,CAAC,QAAQ,GAAG,OAAO,KAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAI,CAAC,KAAK,YAAY,qBAAQ,IAAI,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;;IACjH,CAAC;IAEM,6BAAG,GAAV;QAAA,iBAYC;QAXA,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,iBAAiB,CAAC;QACtE,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,cAAc,CAAC;QAEhE,IAAI,IAAI,CAAC,KAAK,YAAY,qBAAQ,IAAI,UAAU,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YACvF,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC7F,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrD,CAAC,EAAE,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAjD,CAAiD,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAxBe,kBAAE,GAAG,0CAA0C,CAAC;IACzD,qBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IAF3C,eAAe;QAMzB,mBAAA,qBAAa,CAAA;QACb,mBAAA,oCAAiB,CAAA;OAPP,eAAe,CA0B3B;IAAD,sBAAC;CAAA,AA1BD,CAAqC,gBAAM,GA0B1C;AA1BY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport * as lifecycle from 'vs/base/common/lifecycle';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IDebugService, State, IEnablement, IBreakpoint, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { Variable, Breakpoint } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { startDebugging } from 'vs/workbench/contrib/debug/common/debugUtils';\n\nexport abstract class AbstractDebugAction extends Action {\n\n\tprotected toDispose: lifecycle.IDisposable[];\n\n\tconstructor(\n\t\tid: string, label: string, cssClass: string,\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IKeybindingService protected keybindingService: IKeybindingService,\n\t\tpublic weight?: number\n\t) {\n\t\tsuper(id, label, cssClass, false);\n\t\tthis.toDispose = [];\n\t\tthis.toDispose.push(this.debugService.onDidChangeState(state => this.updateEnablement(state)));\n\n\t\tthis.updateLabel(label);\n\t\tthis.updateEnablement();\n\t}\n\n\tpublic run(e?: any): Promise<any> {\n\t\tthrow new Error('implement me');\n\t}\n\n\tpublic get tooltip(): string {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(this.id);\n\t\tconst keybindingLabel = keybinding && keybinding.getLabel();\n\n\t\treturn keybindingLabel ? `${this.label} (${keybindingLabel})` : this.label;\n\t}\n\n\tprotected updateLabel(newLabel: string): void {\n\t\tthis.label = newLabel;\n\t}\n\n\tprotected updateEnablement(state = this.debugService.state): void {\n\t\tthis.enabled = this.isEnabled(state);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\treturn true;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.toDispose = lifecycle.dispose(this.toDispose);\n\t}\n}\n\nexport class ConfigureAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.action.debug.configure';\n\tstatic LABEL = nls.localize('openLaunchJson', \"Open {0}\", 'launch.json');\n\n\tconstructor(id: string, label: string,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(id, label, 'debug-action configure', debugService, keybindingService);\n\t\tthis.toDispose.push(debugService.getConfigurationManager().onDidSelectConfiguration(() => this.updateClass()));\n\t\tthis.updateClass();\n\t}\n\n\tpublic get tooltip(): string {\n\t\tif (this.debugService.getConfigurationManager().selectedConfiguration.name) {\n\t\t\treturn ConfigureAction.LABEL;\n\t\t}\n\n\t\treturn nls.localize('launchJsonNeedsConfigurtion', \"Configure or Fix 'launch.json'\");\n\t}\n\n\tprivate updateClass(): void {\n\t\tconst configurationManager = this.debugService.getConfigurationManager();\n\t\tconst configurationCount = configurationManager.getLaunches().map(l => l.getConfigurationNames().length).reduce((sum, current) => sum + current);\n\t\tthis.class = configurationCount > 0 ? 'debug-action configure' : 'debug-action configure notification';\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\tthis.notificationService.info(nls.localize('noFolderDebugConfig', \"Please first open a folder in order to do advanced debug configuration.\"));\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst sideBySide = !!(event && (event.ctrlKey || event.metaKey));\n\t\tconst configurationManager = this.debugService.getConfigurationManager();\n\t\tif (!configurationManager.selectedConfiguration.launch) {\n\t\t\tconfigurationManager.selectConfiguration(configurationManager.getLaunches()[0]);\n\t\t}\n\n\t\treturn configurationManager.selectedConfiguration.launch!.openConfigFile(sideBySide, false);\n\t}\n}\n\nexport class StartAction extends AbstractDebugAction {\n\tstatic ID = 'workbench.action.debug.start';\n\tstatic LABEL = nls.localize('startDebug', \"Start Debugging\");\n\n\tconstructor(id: string, label: string,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IHistoryService private readonly historyService: IHistoryService\n\t) {\n\t\tsuper(id, label, 'debug-action start', debugService, keybindingService);\n\n\t\tthis.toDispose.push(this.debugService.getConfigurationManager().onDidSelectConfiguration(() => this.updateEnablement()));\n\t\tthis.toDispose.push(this.debugService.onDidNewSession(() => this.updateEnablement()));\n\t\tthis.toDispose.push(this.debugService.onDidEndSession(() => this.updateEnablement()));\n\t\tthis.toDispose.push(this.contextService.onDidChangeWorkbenchState(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<boolean> {\n\t\treturn startDebugging(this.debugService, this.historyService, this.isNoDebug());\n\t}\n\n\tprotected isNoDebug(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic static isEnabled(debugService: IDebugService) {\n\t\tconst sessions = debugService.getModel().getSessions();\n\n\t\tif (debugService.state === State.Initializing) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((sessions.length > 0) && debugService.getConfigurationManager().getLaunches().every(l => l.getConfigurationNames().length === 0)) {\n\t\t\t// There is already a debug session running and we do not have any launch configuration selected\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Disabled if the launch drop down shows the launch config that is already running.\n\tprotected isEnabled(): boolean {\n\t\treturn StartAction.isEnabled(this.debugService);\n\t}\n}\n\nexport class RunAction extends StartAction {\n\tstatic readonly ID = 'workbench.action.debug.run';\n\tstatic LABEL = nls.localize('startWithoutDebugging', \"Start Without Debugging\");\n\n\tprotected isNoDebug(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport class SelectAndStartAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.action.debug.selectandstart';\n\tstatic LABEL = nls.localize('selectAndStartDebugging', \"Select and Start Debugging\");\n\n\tconstructor(id: string, label: string,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService\n\t) {\n\t\tsuper(id, label, '', debugService, keybindingService);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.quickOpenService.show('debug ');\n\t}\n}\n\nexport class RemoveBreakpointAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.removeBreakpoint';\n\tstatic LABEL = nls.localize('removeBreakpoint', \"Remove Breakpoint\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action remove', debugService, keybindingService);\n\t}\n\n\tpublic run(breakpoint: IBreakpoint): Promise<any> {\n\t\treturn breakpoint instanceof Breakpoint ? this.debugService.removeBreakpoints(breakpoint.getId())\n\t\t\t: this.debugService.removeFunctionBreakpoints(breakpoint.getId());\n\t}\n}\n\nexport class RemoveAllBreakpointsAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.removeAllBreakpoints';\n\tstatic LABEL = nls.localize('removeAllBreakpoints', \"Remove All Breakpoints\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action remove-all', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn Promise.all([this.debugService.removeBreakpoints(), this.debugService.removeFunctionBreakpoints()]);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\tconst model = this.debugService.getModel();\n\t\treturn super.isEnabled(state) && (model.getBreakpoints().length > 0 || model.getFunctionBreakpoints().length > 0);\n\t}\n}\n\nexport class EnableAllBreakpointsAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.enableAllBreakpoints';\n\tstatic LABEL = nls.localize('enableAllBreakpoints', \"Enable All Breakpoints\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action enable-all-breakpoints', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.debugService.enableOrDisableBreakpoints(true);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\tconst model = this.debugService.getModel();\n\t\treturn super.isEnabled(state) && (<ReadonlyArray<IEnablement>>model.getBreakpoints()).concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(bp => !bp.enabled);\n\t}\n}\n\nexport class DisableAllBreakpointsAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.disableAllBreakpoints';\n\tstatic LABEL = nls.localize('disableAllBreakpoints', \"Disable All Breakpoints\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action disable-all-breakpoints', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.debugService.enableOrDisableBreakpoints(false);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\tconst model = this.debugService.getModel();\n\t\treturn super.isEnabled(state) && (<ReadonlyArray<IEnablement>>model.getBreakpoints()).concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(bp => bp.enabled);\n\t}\n}\n\nexport class ToggleBreakpointsActivatedAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.toggleBreakpointsActivatedAction';\n\tstatic ACTIVATE_LABEL = nls.localize('activateBreakpoints', \"Activate Breakpoints\");\n\tstatic DEACTIVATE_LABEL = nls.localize('deactivateBreakpoints', \"Deactivate Breakpoints\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action breakpoints-activate', debugService, keybindingService);\n\t\tthis.updateLabel(this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);\n\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => {\n\t\t\tthis.updateLabel(this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);\n\t\t\tthis.updateEnablement();\n\t\t}));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.debugService.setBreakpointsActivated(!this.debugService.getModel().areBreakpointsActivated());\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\treturn (this.debugService.getModel().getFunctionBreakpoints().length + this.debugService.getModel().getBreakpoints().length) > 0;\n\t}\n}\n\nexport class ReapplyBreakpointsAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.reapplyBreakpointsAction';\n\tstatic LABEL = nls.localize('reapplyAllBreakpoints', \"Reapply All Breakpoints\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, '', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.debugService.setBreakpointsActivated(true);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\tconst model = this.debugService.getModel();\n\t\treturn super.isEnabled(state) && (state === State.Running || state === State.Stopped) &&\n\t\t\t(model.getFunctionBreakpoints().length + model.getBreakpoints().length + model.getExceptionBreakpoints().length > 0);\n\t}\n}\n\nexport class AddFunctionBreakpointAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.addFunctionBreakpointAction';\n\tstatic LABEL = nls.localize('addFunctionBreakpoint', \"Add Function Breakpoint\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action add-function-breakpoint', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tthis.debugService.addFunctionBreakpoint();\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\treturn !this.debugService.getViewModel().getSelectedFunctionBreakpoint()\n\t\t\t&& this.debugService.getModel().getFunctionBreakpoints().every(fbp => !!fbp.name);\n\t}\n}\n\nexport class AddWatchExpressionAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.addWatchExpression';\n\tstatic LABEL = nls.localize('addWatchExpression', \"Add Expression\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action add-watch-expression', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeWatchExpressions(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tthis.debugService.addWatchExpression();\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\treturn super.isEnabled(state) && this.debugService.getModel().getWatchExpressions().every(we => !!we.name);\n\t}\n}\n\nexport class RemoveAllWatchExpressionsAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.removeAllWatchExpressions';\n\tstatic LABEL = nls.localize('removeAllWatchExpressions', \"Remove All Expressions\");\n\n\tconstructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {\n\t\tsuper(id, label, 'debug-action remove-all', debugService, keybindingService);\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeWatchExpressions(() => this.updateEnablement()));\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tthis.debugService.removeWatchExpressions();\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected isEnabled(state: State): boolean {\n\t\treturn super.isEnabled(state) && this.debugService.getModel().getWatchExpressions().length > 0;\n\t}\n}\n\nexport class FocusSessionAction extends AbstractDebugAction {\n\tstatic readonly ID = 'workbench.action.debug.focusProcess';\n\tstatic LABEL = nls.localize('focusSession', \"Focus Session\");\n\n\tconstructor(id: string, label: string,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(id, label, '', debugService, keybindingService, 100);\n\t}\n\n\tpublic run(session: IDebugSession): Promise<any> {\n\t\tthis.debugService.focusStackFrame(undefined, undefined, session, true);\n\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tif (stackFrame) {\n\t\t\treturn stackFrame.openInEditor(this.editorService, true);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class CopyValueAction extends Action {\n\tstatic readonly ID = 'workbench.debug.viewlet.action.copyValue';\n\tstatic LABEL = nls.localize('copyValue', \"Copy Value\");\n\n\tconstructor(\n\t\tid: string, label: string, private value: any, private context: string,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper(id, label, 'debug-action copy-value');\n\t\tthis._enabled = typeof this.value === 'string' || (this.value instanceof Variable && !!this.value.evaluateName);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\n\t\tif (this.value instanceof Variable && stackFrame && session && this.value.evaluateName) {\n\t\t\treturn session.evaluate(this.value.evaluateName, stackFrame.frameId, this.context).then(result => {\n\t\t\t\tthis.clipboardService.writeText(result.body.result);\n\t\t\t}, err => this.clipboardService.writeText(this.value.value));\n\t\t}\n\n\t\tthis.clipboardService.writeText(this.value);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}