{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar telemetryUtils_1 = require(\"vs/platform/telemetry/common/telemetryUtils\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar product_1 = require(\"vs/platform/product/common/product\");\nvar sharedProcessService_1 = require(\"vs/platform/ipc/electron-browser/sharedProcessService\");\nvar telemetryIpc_1 = require(\"vs/platform/telemetry/node/telemetryIpc\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar workbenchCommonProperties_1 = require(\"vs/platform/telemetry/node/workbenchCommonProperties\");\nvar telemetryService_1 = require(\"vs/platform/telemetry/common/telemetryService\");\nvar TelemetryService = /** @class */ (function (_super) {\n    tslib_1.__extends(TelemetryService, _super);\n    function TelemetryService(environmentService, productService, sharedProcessService, logService, storageService, configurationService, windowService) {\n        var _this = _super.call(this) || this;\n        if (!environmentService.isExtensionDevelopment && !environmentService.args['disable-telemetry'] && !!productService.enableTelemetry) {\n            var channel = sharedProcessService.getChannel('telemetryAppender');\n            var config = {\n                appender: telemetryUtils_1.combinedAppender(new telemetryIpc_1.TelemetryAppenderClient(channel), new telemetryUtils_1.LogAppender(logService)),\n                commonProperties: workbenchCommonProperties_1.resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, windowService.getConfiguration().machineId, environmentService.installSourcePath),\n                piiPaths: [environmentService.appRoot, environmentService.extensionsPath]\n            };\n            _this.impl = _this._register(new telemetryService_1.TelemetryService(config, configurationService));\n        }\n        else {\n            _this.impl = telemetryUtils_1.NullTelemetryService;\n        }\n        return _this;\n    }\n    Object.defineProperty(TelemetryService.prototype, \"isOptedIn\", {\n        get: function () {\n            return this.impl.isOptedIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TelemetryService.prototype.publicLog = function (eventName, data, anonymizeFilePaths) {\n        return this.impl.publicLog(eventName, data, anonymizeFilePaths);\n    };\n    TelemetryService.prototype.getTelemetryInfo = function () {\n        return this.impl.getTelemetryInfo();\n    };\n    TelemetryService = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, product_1.IProductService),\n        tslib_1.__param(2, sharedProcessService_1.ISharedProcessService),\n        tslib_1.__param(3, log_1.ILogService),\n        tslib_1.__param(4, storage_1.IStorageService),\n        tslib_1.__param(5, configuration_1.IConfigurationService),\n        tslib_1.__param(6, windows_1.IWindowService)\n    ], TelemetryService);\n    return TelemetryService;\n}(lifecycle_1.Disposable));\nexports.TelemetryService = TelemetryService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/electron-browser/telemetryService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,8EAAkH;AAClH,gFAAuF;AACvF,sDAAsD;AACtD,0EAAiF;AACjF,8DAAqE;AACrE,8FAA8F;AAC9F,wEAAkF;AAClF,kDAAyD;AACzD,8DAAqE;AACrE,8DAAoE;AACpE,kGAAwG;AACxG,kFAAkI;AAElI;IAAsC,4CAAU;IAM/C,0BACsB,kBAAuC,EAC3C,cAA+B,EACzB,oBAA2C,EACrD,UAAuB,EACnB,cAA+B,EACzB,oBAA2C,EAClD,aAA6B;QAP9C,YASC,iBAAO,SAcP;QAZA,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,eAAe,EAAE;YACpI,IAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;YACrE,IAAM,MAAM,GAA4B;gBACvC,QAAQ,EAAE,iCAAgB,CAAC,IAAI,sCAAuB,CAAC,OAAO,CAAC,EAAE,IAAI,4BAAW,CAAC,UAAU,CAAC,CAAC;gBAC7F,gBAAgB,EAAE,4DAAgC,CAAC,cAAc,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,kBAAkB,CAAC,iBAAiB,CAAC;gBACnM,QAAQ,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,kBAAkB,CAAC,cAAc,CAAC;aACzE,CAAC;YAEF,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,mCAAoB,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC,CAAC;SACnF;aAAM;YACN,KAAI,CAAC,IAAI,GAAG,qCAAoB,CAAC;SACjC;;IACF,CAAC;IAED,sBAAI,uCAAS;aAAb;YACC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QAC5B,CAAC;;;OAAA;IAED,oCAAS,GAAT,UAAU,SAAiB,EAAE,IAAqB,EAAE,kBAA4B;QAC/E,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;IACjE,CAAC;IAED,2CAAgB,GAAhB;QACC,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACrC,CAAC;IAzCW,gBAAgB;QAO1B,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,yBAAe,CAAA;QACf,mBAAA,4CAAqB,CAAA;QACrB,mBAAA,iBAAW,CAAA;QACX,mBAAA,yBAAe,CAAA;QACf,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,wBAAc,CAAA;OAbJ,gBAAgB,CA0C5B;IAAD,uBAAC;CAAA,AA1CD,CAAsC,sBAAU,GA0C/C;AA1CY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService, ITelemetryInfo, ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService, combinedAppender, LogAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IProductService } from 'vs/platform/product/common/product';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-browser/sharedProcessService';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/node/telemetryIpc';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { resolveWorkbenchCommonProperties } from 'vs/platform/telemetry/node/workbenchCommonProperties';\nimport { TelemetryService as BaseTelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\t_serviceBrand: any;\n\n\tprivate impl: ITelemetryService;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@ILogService logService: ILogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper();\n\n\t\tif (!environmentService.isExtensionDevelopment && !environmentService.args['disable-telemetry'] && !!productService.enableTelemetry) {\n\t\t\tconst channel = sharedProcessService.getChannel('telemetryAppender');\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappender: combinedAppender(new TelemetryAppenderClient(channel), new LogAppender(logService)),\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, windowService.getConfiguration().machineId, environmentService.installSourcePath),\n\t\t\t\tpiiPaths: [environmentService.appRoot, environmentService.extensionsPath]\n\t\t\t};\n\n\t\t\tthis.impl = this._register(new BaseTelemetryService(config, configurationService));\n\t\t} else {\n\t\t\tthis.impl = NullTelemetryService;\n\t\t}\n\t}\n\n\tget isOptedIn(): boolean {\n\t\treturn this.impl.isOptedIn;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<void> {\n\t\treturn this.impl.publicLog(eventName, data, anonymizeFilePaths);\n\t}\n\n\tgetTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\treturn this.impl.getTelemetryInfo();\n\t}\n}"]}]}