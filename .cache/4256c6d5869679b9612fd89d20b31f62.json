{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCenter.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCenter.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/notificationsCenter\");\nrequire(\"vs/css!./media/notificationsActions\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar event_1 = require(\"vs/base/common/event\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar notificationsCommands_1 = require(\"vs/workbench/browser/parts/notifications/notificationsCommands\");\nvar notificationsList_1 = require(\"vs/workbench/browser/parts/notifications/notificationsList\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar nls_1 = require(\"vs/nls\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar notificationsActions_1 = require(\"vs/workbench/browser/parts/notifications/notificationsActions\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar NotificationsCenter = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsCenter, _super);\n    function NotificationsCenter(container, model, themeService, instantiationService, layoutService, contextKeyService, editorGroupService, keybindingService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.container = container;\n        _this.model = model;\n        _this.instantiationService = instantiationService;\n        _this.layoutService = layoutService;\n        _this.editorGroupService = editorGroupService;\n        _this.keybindingService = keybindingService;\n        _this._onDidChangeVisibility = _this._register(new event_1.Emitter());\n        _this.notificationsCenterVisibleContextKey = notificationsCommands_1.NotificationsCenterVisibleContext.bindTo(contextKeyService);\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(NotificationsCenter.prototype, \"onDidChangeVisibility\", {\n        get: function () { return this._onDidChangeVisibility.event; },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationsCenter.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.model.onDidNotificationChange(function (e) { return _this.onDidNotificationChange(e); }));\n        this._register(this.layoutService.onLayout(function (dimension) { return _this.layout(dimension); }));\n    };\n    Object.defineProperty(NotificationsCenter.prototype, \"isVisible\", {\n        get: function () {\n            return this._isVisible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationsCenter.prototype.show = function () {\n        if (this._isVisible) {\n            this.notificationsList.show(true /* focus */);\n            return; // already visible\n        }\n        // Lazily create if showing for the first time\n        if (!this.notificationsCenterContainer) {\n            this.create();\n        }\n        // Title\n        this.updateTitle();\n        // Make visible\n        this._isVisible = true;\n        dom_1.addClass(this.notificationsCenterContainer, 'visible');\n        this.notificationsList.show();\n        // Layout\n        this.layout(this.workbenchDimensions);\n        // Show all notifications that are present now\n        this.notificationsList.updateNotificationsList(0, 0, this.model.notifications);\n        // Focus first\n        this.notificationsList.focusFirst();\n        // Theming\n        this.updateStyles();\n        // Context Key\n        this.notificationsCenterVisibleContextKey.set(true);\n        // Event\n        this._onDidChangeVisibility.fire();\n    };\n    NotificationsCenter.prototype.updateTitle = function () {\n        if (this.model.notifications.length === 0) {\n            this.notificationsCenterTitle.textContent = nls_1.localize('notificationsEmpty', \"No new notifications\");\n        }\n        else {\n            this.notificationsCenterTitle.textContent = nls_1.localize('notifications', \"Notifications\");\n        }\n    };\n    NotificationsCenter.prototype.create = function () {\n        // Container\n        this.notificationsCenterContainer = document.createElement('div');\n        dom_1.addClass(this.notificationsCenterContainer, 'notifications-center');\n        // Header\n        this.notificationsCenterHeader = document.createElement('div');\n        dom_1.addClass(this.notificationsCenterHeader, 'notifications-center-header');\n        this.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n        // Header Title\n        this.notificationsCenterTitle = document.createElement('span');\n        dom_1.addClass(this.notificationsCenterTitle, 'notifications-center-header-title');\n        this.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n        // Header Toolbar\n        var toolbarContainer = document.createElement('div');\n        dom_1.addClass(toolbarContainer, 'notifications-center-header-toolbar');\n        this.notificationsCenterHeader.appendChild(toolbarContainer);\n        var actionRunner = this._register(this.instantiationService.createInstance(notificationsActions_1.NotificationActionRunner));\n        var notificationsToolBar = this._register(new actionbar_1.ActionBar(toolbarContainer, {\n            ariaLabel: nls_1.localize('notificationsToolbar', \"Notification Center Actions\"),\n            actionRunner: actionRunner\n        }));\n        var hideAllAction = this._register(this.instantiationService.createInstance(notificationsActions_1.HideNotificationsCenterAction, notificationsActions_1.HideNotificationsCenterAction.ID, notificationsActions_1.HideNotificationsCenterAction.LABEL));\n        notificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n        var clearAllAction = this._register(this.instantiationService.createInstance(notificationsActions_1.ClearAllNotificationsAction, notificationsActions_1.ClearAllNotificationsAction.ID, notificationsActions_1.ClearAllNotificationsAction.LABEL));\n        notificationsToolBar.push(clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(clearAllAction) });\n        // Notifications List\n        this.notificationsList = this.instantiationService.createInstance(notificationsList_1.NotificationsList, this.notificationsCenterContainer, {\n            ariaLabel: nls_1.localize('notificationsList', \"Notifications List\")\n        });\n        this.container.appendChild(this.notificationsCenterContainer);\n    };\n    NotificationsCenter.prototype.getKeybindingLabel = function (action) {\n        var keybinding = this.keybindingService.lookupKeybinding(action.id);\n        return keybinding ? keybinding.getLabel() : null;\n    };\n    NotificationsCenter.prototype.onDidNotificationChange = function (e) {\n        if (!this._isVisible) {\n            return; // only if visible\n        }\n        var focusGroup = false;\n        // Update notifications list based on event\n        switch (e.kind) {\n            case notifications_1.NotificationChangeType.ADD:\n                this.notificationsList.updateNotificationsList(e.index, 0, [e.item]);\n                break;\n            case notifications_1.NotificationChangeType.CHANGE:\n                this.notificationsList.updateNotificationsList(e.index, 1, [e.item]);\n                break;\n            case notifications_1.NotificationChangeType.REMOVE:\n                focusGroup = dom_1.isAncestor(document.activeElement, this.notificationsCenterContainer);\n                this.notificationsList.updateNotificationsList(e.index, 1);\n                break;\n        }\n        // Update title\n        this.updateTitle();\n        // Hide if no more notifications to show\n        if (this.model.notifications.length === 0) {\n            this.hide();\n            // Restore focus to editor group if we had focus\n            if (focusGroup) {\n                this.editorGroupService.activeGroup.focus();\n            }\n        }\n    };\n    NotificationsCenter.prototype.hide = function () {\n        if (!this._isVisible || !this.notificationsCenterContainer) {\n            return; // already hidden\n        }\n        var focusGroup = dom_1.isAncestor(document.activeElement, this.notificationsCenterContainer);\n        // Hide\n        this._isVisible = false;\n        dom_1.removeClass(this.notificationsCenterContainer, 'visible');\n        this.notificationsList.hide();\n        // Context Key\n        this.notificationsCenterVisibleContextKey.set(false);\n        // Event\n        this._onDidChangeVisibility.fire();\n        // Restore focus to editor group if we had focus\n        if (focusGroup) {\n            this.editorGroupService.activeGroup.focus();\n        }\n    };\n    NotificationsCenter.prototype.updateStyles = function () {\n        if (this.notificationsCenterContainer) {\n            var widgetShadowColor = this.getColor(colorRegistry_1.widgetShadow);\n            this.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? \"0 0px 8px \" + widgetShadowColor : null;\n            var borderColor = this.getColor(theme_1.NOTIFICATIONS_CENTER_BORDER);\n            this.notificationsCenterContainer.style.border = borderColor ? \"1px solid \" + borderColor : null;\n            var headerForeground = this.getColor(theme_1.NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n            this.notificationsCenterHeader.style.color = headerForeground ? headerForeground.toString() : null;\n            var headerBackground = this.getColor(theme_1.NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n            this.notificationsCenterHeader.style.background = headerBackground ? headerBackground.toString() : null;\n        }\n    };\n    NotificationsCenter.prototype.layout = function (dimension) {\n        this.workbenchDimensions = dimension;\n        if (this._isVisible && this.notificationsCenterContainer) {\n            var maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n            var maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n            var availableWidth = maxWidth;\n            var availableHeight = maxHeight;\n            if (this.workbenchDimensions) {\n                // Make sure notifications are not exceding available width\n                availableWidth = this.workbenchDimensions.width;\n                availableWidth -= (2 * 8); // adjust for paddings left and right\n                // Make sure notifications are not exceeding available height\n                availableHeight = this.workbenchDimensions.height - 35 /* header */;\n                if (this.layoutService.isVisible(layoutService_1.Parts.STATUSBAR_PART)) {\n                    availableHeight -= 22; // adjust for status bar\n                }\n                if (this.layoutService.isVisible(layoutService_1.Parts.TITLEBAR_PART)) {\n                    availableHeight -= 22; // adjust for title bar\n                }\n                availableHeight -= (2 * 12); // adjust for paddings top and bottom\n            }\n            // Apply to list\n            this.notificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n        }\n    };\n    NotificationsCenter.prototype.clearAll = function () {\n        // Hide notifications center first\n        this.hide();\n        // Close all\n        while (this.model.notifications.length) {\n            this.model.notifications[0].close();\n        }\n    };\n    NotificationsCenter.MAX_DIMENSIONS = new dom_1.Dimension(450, 400);\n    NotificationsCenter = tslib_1.__decorate([\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(5, contextkey_1.IContextKeyService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, keybinding_1.IKeybindingService)\n    ], NotificationsCenter);\n    return NotificationsCenter;\n}(theme_1.Themable));\nexports.NotificationsCenter = NotificationsCenter;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var notificationBorderColor = theme.getColor(theme_1.NOTIFICATIONS_BORDER);\n    if (notificationBorderColor) {\n        collector.addRule(\".monaco-workbench > .notifications-center .notifications-list-container .monaco-list-row[data-last-element=\\\"false\\\"] > .notification-list-item { border-bottom: 1px solid \" + notificationBorderColor + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCenter.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsCenter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsCenter';\nimport 'vs/css!./media/notificationsActions';\nimport { Themable, NOTIFICATIONS_BORDER, NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_CENTER_HEADER_BACKGROUND, NOTIFICATIONS_CENTER_BORDER } from 'vs/workbench/common/theme';\nimport { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType } from 'vs/workbench/common/notifications';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { NotificationsCenterVisibleContext } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { NotificationsList } from 'vs/workbench/browser/parts/notifications/notificationsList';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { addClass, removeClass, isAncestor, Dimension } from 'vs/base/browser/dom';\nimport { widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { localize } from 'vs/nls';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ClearAllNotificationsAction, HideNotificationsCenterAction, NotificationActionRunner } from 'vs/workbench/browser/parts/notifications/notificationsActions';\nimport { IAction } from 'vs/base/common/actions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\n\nexport class NotificationsCenter extends Themable {\n\n\tprivate static MAX_DIMENSIONS = new Dimension(450, 400);\n\n\tprivate readonly _onDidChangeVisibility: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeVisibility(): Event<void> { return this._onDidChangeVisibility.event; }\n\n\tprivate notificationsCenterContainer: HTMLElement;\n\tprivate notificationsCenterHeader: HTMLElement;\n\tprivate notificationsCenterTitle: HTMLSpanElement;\n\tprivate notificationsList: NotificationsList;\n\tprivate _isVisible: boolean;\n\tprivate workbenchDimensions: Dimension;\n\tprivate notificationsCenterVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate container: HTMLElement,\n\t\tprivate model: INotificationsModel,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidNotificationChange(e => this.onDidNotificationChange(e)));\n\t\tthis._register(this.layoutService.onLayout(dimension => this.layout(dimension)));\n\t}\n\n\tget isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tshow(): void {\n\t\tif (this._isVisible) {\n\t\t\tthis.notificationsList.show(true /* focus */);\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.notificationsCenterContainer) {\n\t\t\tthis.create();\n\t\t}\n\n\t\t// Title\n\t\tthis.updateTitle();\n\n\t\t// Make visible\n\t\tthis._isVisible = true;\n\t\taddClass(this.notificationsCenterContainer, 'visible');\n\t\tthis.notificationsList.show();\n\n\t\t// Layout\n\t\tthis.layout(this.workbenchDimensions);\n\n\t\t// Show all notifications that are present now\n\t\tthis.notificationsList.updateNotificationsList(0, 0, this.model.notifications);\n\n\t\t// Focus first\n\t\tthis.notificationsList.focusFirst();\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(true);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\t}\n\n\tprivate updateTitle(): void {\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.notificationsCenterTitle.textContent = localize('notificationsEmpty', \"No new notifications\");\n\t\t} else {\n\t\t\tthis.notificationsCenterTitle.textContent = localize('notifications', \"Notifications\");\n\t\t}\n\t}\n\n\tprivate create(): void {\n\n\t\t// Container\n\t\tthis.notificationsCenterContainer = document.createElement('div');\n\t\taddClass(this.notificationsCenterContainer, 'notifications-center');\n\n\t\t// Header\n\t\tthis.notificationsCenterHeader = document.createElement('div');\n\t\taddClass(this.notificationsCenterHeader, 'notifications-center-header');\n\t\tthis.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n\n\t\t// Header Title\n\t\tthis.notificationsCenterTitle = document.createElement('span');\n\t\taddClass(this.notificationsCenterTitle, 'notifications-center-header-title');\n\t\tthis.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n\n\t\t// Header Toolbar\n\t\tconst toolbarContainer = document.createElement('div');\n\t\taddClass(toolbarContainer, 'notifications-center-header-toolbar');\n\t\tthis.notificationsCenterHeader.appendChild(toolbarContainer);\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\tconst notificationsToolBar = this._register(new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('notificationsToolbar', \"Notification Center Actions\"),\n\t\t\tactionRunner\n\t\t}));\n\n\t\tconst hideAllAction = this._register(this.instantiationService.createInstance(HideNotificationsCenterAction, HideNotificationsCenterAction.ID, HideNotificationsCenterAction.LABEL));\n\t\tnotificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n\n\t\tconst clearAllAction = this._register(this.instantiationService.createInstance(ClearAllNotificationsAction, ClearAllNotificationsAction.ID, ClearAllNotificationsAction.LABEL));\n\t\tnotificationsToolBar.push(clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(clearAllAction) });\n\n\t\t// Notifications List\n\t\tthis.notificationsList = this.instantiationService.createInstance(NotificationsList, this.notificationsCenterContainer, {\n\t\t\tariaLabel: localize('notificationsList', \"Notifications List\")\n\t\t});\n\n\t\tthis.container.appendChild(this.notificationsCenterContainer);\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n\n\tprivate onDidNotificationChange(e: INotificationChangeEvent): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn; // only if visible\n\t\t}\n\n\t\tlet focusGroup = false;\n\n\t\t// Update notifications list based on event\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tthis.notificationsList.updateNotificationsList(e.index, 0, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.CHANGE:\n\t\t\t\tthis.notificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\tfocusGroup = isAncestor(document.activeElement, this.notificationsCenterContainer);\n\t\t\t\tthis.notificationsList.updateNotificationsList(e.index, 1);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update title\n\t\tthis.updateTitle();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.hide();\n\n\t\t\t// Restore focus to editor group if we had focus\n\t\t\tif (focusGroup) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (!this._isVisible || !this.notificationsCenterContainer) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\tconst focusGroup = isAncestor(document.activeElement, this.notificationsCenterContainer);\n\n\t\t// Hide\n\t\tthis._isVisible = false;\n\t\tremoveClass(this.notificationsCenterContainer, 'visible');\n\t\tthis.notificationsList.hide();\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(false);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\n\t\t// Restore focus to editor group if we had focus\n\t\tif (focusGroup) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\tprotected updateStyles(): void {\n\t\tif (this.notificationsCenterContainer) {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tthis.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? `0 0px 8px ${widgetShadowColor}` : null;\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n\t\t\tthis.notificationsCenterContainer.style.border = borderColor ? `1px solid ${borderColor}` : null;\n\n\t\t\tconst headerForeground = this.getColor(NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n\t\t\tthis.notificationsCenterHeader.style.color = headerForeground ? headerForeground.toString() : null;\n\n\t\t\tconst headerBackground = this.getColor(NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n\t\t\tthis.notificationsCenterHeader.style.background = headerBackground ? headerBackground.toString() : null;\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tif (this._isVisible && this.notificationsCenterContainer) {\n\t\t\tlet maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n\t\t\tlet maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n\n\t\t\tlet availableWidth = maxWidth;\n\t\t\tlet availableHeight = maxHeight;\n\n\t\t\tif (this.workbenchDimensions) {\n\n\t\t\t\t// Make sure notifications are not exceding available width\n\t\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t\t// Make sure notifications are not exceeding available height\n\t\t\t\tavailableHeight = this.workbenchDimensions.height - 35 /* header */;\n\t\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t\t}\n\n\t\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t\t}\n\n\t\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t\t}\n\n\t\t\t// Apply to list\n\t\t\tthis.notificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n\t\t}\n\t}\n\n\tclearAll(): void {\n\n\t\t// Hide notifications center first\n\t\tthis.hide();\n\n\t\t// Close all\n\t\twhile (this.model.notifications.length) {\n\t\t\tthis.model.notifications[0].close();\n\t\t}\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\tconst notificationBorderColor = theme.getColor(NOTIFICATIONS_BORDER);\n\tif (notificationBorderColor) {\n\t\tcollector.addRule(`.monaco-workbench > .notifications-center .notifications-list-container .monaco-list-row[data-last-element=\"false\"] > .notification-list-item { border-bottom: 1px solid ${notificationBorderColor}; }`);\n\t}\n});"]}]}