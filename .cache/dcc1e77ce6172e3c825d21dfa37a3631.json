{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/openerService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/openerService.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom = require(\"vs/base/browser/dom\");\nvar marshalling_1 = require(\"vs/base/common/marshalling\");\nvar network_1 = require(\"vs/base/common/network\");\nvar resources = require(\"vs/base/common/resources\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar linkedList_1 = require(\"vs/base/common/linkedList\");\nvar OpenerService = /** @class */ (function () {\n    function OpenerService(_editorService, _commandService) {\n        this._editorService = _editorService;\n        this._commandService = _commandService;\n        this._opener = new linkedList_1.LinkedList();\n        //\n    }\n    OpenerService.prototype.registerOpener = function (opener) {\n        var remove = this._opener.push(opener);\n        return { dispose: remove };\n    };\n    OpenerService.prototype.open = function (resource, options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _i, _a, opener, handled;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // no scheme ?!?\n                        if (!resource.scheme) {\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        _i = 0, _a = this._opener.toArray();\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        opener = _a[_i];\n                        return [4 /*yield*/, opener.open(resource, options)];\n                    case 2:\n                        handled = _b.sent();\n                        if (handled) {\n                            return [2 /*return*/, true];\n                        }\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: \n                    // use default openers\n                    return [2 /*return*/, this._doOpen(resource, options)];\n                }\n            });\n        });\n    };\n    OpenerService.prototype._doOpen = function (resource, options) {\n        var _a;\n        var scheme = resource.scheme, path = resource.path, query = resource.query, fragment = resource.fragment;\n        if (strings_1.equalsIgnoreCase(scheme, network_1.Schemas.http) || strings_1.equalsIgnoreCase(scheme, network_1.Schemas.https) || strings_1.equalsIgnoreCase(scheme, network_1.Schemas.mailto)) {\n            // open http or default mail application\n            dom.windowOpenNoOpener(resource.toString(true));\n            return Promise.resolve(true);\n        }\n        else if (strings_1.equalsIgnoreCase(scheme, network_1.Schemas.command)) {\n            // run command or bail out if command isn't known\n            if (!commands_1.CommandsRegistry.getCommand(path)) {\n                return Promise.reject(\"command '\" + path + \"' NOT known\");\n            }\n            // execute as command\n            var args = [];\n            try {\n                args = marshalling_1.parse(query);\n                if (!Array.isArray(args)) {\n                    args = [args];\n                }\n            }\n            catch (e) {\n                //\n            }\n            return (_a = this._commandService).executeCommand.apply(_a, [path].concat(args)).then(function () { return true; });\n        }\n        else {\n            var selection = undefined;\n            var match = /^L?(\\d+)(?:,(\\d+))?/.exec(fragment);\n            if (match) {\n                // support file:///some/file.js#73,84\n                // support file:///some/file.js#L73\n                selection = {\n                    startLineNumber: parseInt(match[1]),\n                    startColumn: match[2] ? parseInt(match[2]) : 1\n                };\n                // remove fragment\n                resource = resource.with({ fragment: '' });\n            }\n            if (resource.scheme === network_1.Schemas.file) {\n                resource = resources.normalizePath(resource); // workaround for non-normalized paths (https://github.com/Microsoft/vscode/issues/12954)\n            }\n            return this._editorService.openCodeEditor({ resource: resource, options: { selection: selection, } }, this._editorService.getFocusedCodeEditor(), options && options.openToSide).then(function () { return true; });\n        }\n    };\n    OpenerService = tslib_1.__decorate([\n        tslib_1.__param(0, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(1, commands_1.ICommandService)\n    ], OpenerService);\n    return OpenerService;\n}());\nexports.OpenerService = OpenerService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/openerService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/openerService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { parse } from 'vs/base/common/marshalling';\nimport { Schemas } from 'vs/base/common/network';\nimport * as resources from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IOpenerService, IOpener } from 'vs/platform/opener/common/opener';\nimport { equalsIgnoreCase } from 'vs/base/common/strings';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedList } from 'vs/base/common/linkedList';\n\nexport class OpenerService implements IOpenerService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _opener = new LinkedList<IOpener>();\n\n\tconstructor(\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t) {\n\t\t//\n\t}\n\n\tregisterOpener(opener: IOpener): IDisposable {\n\t\tconst remove = this._opener.push(opener);\n\t\treturn { dispose: remove };\n\t}\n\n\tasync open(resource: URI, options?: { openToSide?: boolean }): Promise<boolean> {\n\t\t// no scheme ?!?\n\t\tif (!resource.scheme) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\t// check with contributed openers\n\t\tfor (const opener of this._opener.toArray()) {\n\t\t\tconst handled = await opener.open(resource, options);\n\t\t\tif (handled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t// use default openers\n\t\treturn this._doOpen(resource, options);\n\t}\n\n\tprivate _doOpen(resource: URI, options?: { openToSide?: boolean }): Promise<boolean> {\n\n\t\tconst { scheme, path, query, fragment } = resource;\n\n\t\tif (equalsIgnoreCase(scheme, Schemas.http) || equalsIgnoreCase(scheme, Schemas.https) || equalsIgnoreCase(scheme, Schemas.mailto)) {\n\t\t\t// open http or default mail application\n\t\t\tdom.windowOpenNoOpener(resource.toString(true));\n\t\t\treturn Promise.resolve(true);\n\n\t\t} else if (equalsIgnoreCase(scheme, Schemas.command)) {\n\t\t\t// run command or bail out if command isn't known\n\t\t\tif (!CommandsRegistry.getCommand(path)) {\n\t\t\t\treturn Promise.reject(`command '${path}' NOT known`);\n\t\t\t}\n\t\t\t// execute as command\n\t\t\tlet args: any = [];\n\t\t\ttry {\n\t\t\t\targs = parse(query);\n\t\t\t\tif (!Array.isArray(args)) {\n\t\t\t\t\targs = [args];\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t//\n\t\t\t}\n\t\t\treturn this._commandService.executeCommand(path, ...args).then(() => true);\n\n\t\t} else {\n\t\t\tlet selection: { startLineNumber: number; startColumn: number; } | undefined = undefined;\n\t\t\tconst match = /^L?(\\d+)(?:,(\\d+))?/.exec(fragment);\n\t\t\tif (match) {\n\t\t\t\t// support file:///some/file.js#73,84\n\t\t\t\t// support file:///some/file.js#L73\n\t\t\t\tselection = {\n\t\t\t\t\tstartLineNumber: parseInt(match[1]),\n\t\t\t\t\tstartColumn: match[2] ? parseInt(match[2]) : 1\n\t\t\t\t};\n\t\t\t\t// remove fragment\n\t\t\t\tresource = resource.with({ fragment: '' });\n\t\t\t}\n\n\t\t\tif (resource.scheme === Schemas.file) {\n\t\t\t\tresource = resources.normalizePath(resource); // workaround for non-normalized paths (https://github.com/Microsoft/vscode/issues/12954)\n\t\t\t}\n\n\t\t\treturn this._editorService.openCodeEditor(\n\t\t\t\t{ resource, options: { selection, } },\n\t\t\t\tthis._editorService.getFocusedCodeEditor(),\n\t\t\t\toptions && options.openToSide\n\t\t\t).then(() => true);\n\t\t}\n\t}\n}\n"]}]}