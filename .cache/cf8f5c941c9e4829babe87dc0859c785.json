{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputServices.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputServices.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar outputLinkProvider_1 = require(\"vs/workbench/contrib/output/common/outputLinkProvider\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar outputChannelModel_1 = require(\"vs/workbench/services/output/common/outputChannelModel\");\nvar OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';\nvar OutputChannel = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputChannel, _super);\n    function OutputChannel(outputChannelDescriptor, outputChannelModelService) {\n        var _this = _super.call(this) || this;\n        _this.outputChannelDescriptor = outputChannelDescriptor;\n        _this.scrollLock = false;\n        _this.id = outputChannelDescriptor.id;\n        _this.label = outputChannelDescriptor.label;\n        _this.model = _this._register(outputChannelModelService.createOutputChannelModel(_this.id, uri_1.URI.from({ scheme: output_1.OUTPUT_SCHEME, path: _this.id }), outputChannelDescriptor.log ? output_1.LOG_MIME : output_1.OUTPUT_MIME, outputChannelDescriptor.file));\n        return _this;\n    }\n    OutputChannel.prototype.append = function (output) {\n        this.model.append(output);\n    };\n    OutputChannel.prototype.update = function () {\n        this.model.update();\n    };\n    OutputChannel.prototype.clear = function (till) {\n        this.model.clear(till);\n    };\n    OutputChannel = tslib_1.__decorate([\n        tslib_1.__param(1, outputChannelModel_1.IOutputChannelModelService)\n    ], OutputChannel);\n    return OutputChannel;\n}(lifecycle_1.Disposable));\nvar OutputService = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputService, _super);\n    function OutputService(storageService, instantiationService, panelService, contextService, textModelResolverService, environmentService, windowService, logService, lifecycleService, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.storageService = storageService;\n        _this.instantiationService = instantiationService;\n        _this.panelService = panelService;\n        _this.logService = logService;\n        _this.lifecycleService = lifecycleService;\n        _this.contextKeyService = contextKeyService;\n        _this.channels = new Map();\n        _this._onActiveOutputChannel = new event_1.Emitter();\n        _this.onActiveOutputChannel = _this._onActiveOutputChannel.event;\n        _this.activeChannelIdInStorage = _this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, storage_1.StorageScope.WORKSPACE, '');\n        // Register as text model content provider for output\n        textModelResolverService.registerTextModelContentProvider(output_1.OUTPUT_SCHEME, _this);\n        instantiationService.createInstance(outputLinkProvider_1.OutputLinkProvider);\n        // Create output channels for already registered channels\n        var registry = platform_1.Registry.as(output_1.Extensions.OutputChannels);\n        for (var _i = 0, _a = registry.getChannels(); _i < _a.length; _i++) {\n            var channelIdentifier = _a[_i];\n            _this.onDidRegisterChannel(channelIdentifier.id);\n        }\n        _this._register(registry.onDidRegisterChannel(_this.onDidRegisterChannel, _this));\n        _this._register(panelService.onDidPanelOpen(function (_a) {\n            var panel = _a.panel, focus = _a.focus;\n            return _this.onDidPanelOpen(panel, !focus);\n        }, _this));\n        _this._register(panelService.onDidPanelClose(_this.onDidPanelClose, _this));\n        // Set active channel to first channel if not set\n        if (!_this.activeChannel) {\n            var channels = _this.getChannelDescriptors();\n            _this.activeChannel = channels && channels.length > 0 ? _this.getChannel(channels[0].id) : undefined;\n        }\n        _this._register(_this.lifecycleService.onShutdown(function () { return _this.dispose(); }));\n        _this._register(_this.storageService.onWillSaveState(function () { return _this.saveState(); }));\n        return _this;\n    }\n    OutputService.prototype.provideTextContent = function (resource) {\n        var channel = this.getChannel(resource.path);\n        if (channel) {\n            return channel.model.loadModel();\n        }\n        return null;\n    };\n    OutputService.prototype.showChannel = function (id, preserveFocus) {\n        var _this = this;\n        var channel = this.getChannel(id);\n        if (!channel || this.isChannelShown(channel)) {\n            if (this._outputPanel && !preserveFocus) {\n                this._outputPanel.focus();\n            }\n            return Promise.resolve(undefined);\n        }\n        this.activeChannel = channel;\n        var promise;\n        if (this.isPanelShown()) {\n            promise = this.doShowChannel(channel, !!preserveFocus);\n        }\n        else {\n            this.panelService.openPanel(output_1.OUTPUT_PANEL_ID);\n            promise = this.doShowChannel(this.activeChannel, !!preserveFocus);\n        }\n        return promise.then(function () { return _this._onActiveOutputChannel.fire(id); });\n    };\n    OutputService.prototype.getChannel = function (id) {\n        return this.channels.get(id);\n    };\n    OutputService.prototype.getChannelDescriptors = function () {\n        return platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannels();\n    };\n    OutputService.prototype.getActiveChannel = function () {\n        return this.activeChannel;\n    };\n    OutputService.prototype.onDidRegisterChannel = function (channelId) {\n        var _this = this;\n        var channel = this.createChannel(channelId);\n        this.channels.set(channelId, channel);\n        if (!this.activeChannel || this.activeChannelIdInStorage === channelId) {\n            this.activeChannel = channel;\n            this.onDidPanelOpen(this.panelService.getActivePanel(), true)\n                .then(function () { return _this._onActiveOutputChannel.fire(channelId); });\n        }\n    };\n    OutputService.prototype.onDidPanelOpen = function (panel, preserveFocus) {\n        if (panel && panel.getId() === output_1.OUTPUT_PANEL_ID) {\n            this._outputPanel = this.panelService.getActivePanel();\n            if (this.activeChannel) {\n                return this.doShowChannel(this.activeChannel, preserveFocus);\n            }\n        }\n        return Promise.resolve(undefined);\n    };\n    OutputService.prototype.onDidPanelClose = function (panel) {\n        if (this._outputPanel && panel.getId() === output_1.OUTPUT_PANEL_ID) {\n            output_1.CONTEXT_ACTIVE_LOG_OUTPUT.bindTo(this.contextKeyService).set(false);\n            this._outputPanel.clearInput();\n        }\n    };\n    OutputService.prototype.createChannel = function (id) {\n        var _this = this;\n        var channelDisposables = [];\n        var channel = this.instantiateChannel(id);\n        channel.model.onDidAppendedContent(function () {\n            if (!channel.scrollLock) {\n                var panel = _this.panelService.getActivePanel();\n                if (panel && panel.getId() === output_1.OUTPUT_PANEL_ID && _this.isChannelShown(channel)) {\n                    var outputPanel = panel;\n                    outputPanel.revealLastLine();\n                }\n            }\n        }, channelDisposables);\n        channel.model.onDispose(function () {\n            if (_this.activeChannel === channel) {\n                var channels = _this.getChannelDescriptors();\n                var channel_1 = channels.length ? _this.getChannel(channels[0].id) : undefined;\n                if (channel_1 && _this.isPanelShown()) {\n                    _this.showChannel(channel_1.id, true);\n                }\n                else {\n                    _this.activeChannel = channel_1;\n                    if (_this.activeChannel) {\n                        _this._onActiveOutputChannel.fire(_this.activeChannel.id);\n                    }\n                }\n            }\n            platform_1.Registry.as(output_1.Extensions.OutputChannels).removeChannel(id);\n            lifecycle_1.dispose(channelDisposables);\n        }, channelDisposables);\n        return channel;\n    };\n    OutputService.prototype.instantiateChannel = function (id) {\n        var channelData = platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannel(id);\n        if (!channelData) {\n            this.logService.error(\"Channel '\" + id + \"' is not registered yet\");\n            throw new Error(\"Channel '\" + id + \"' is not registered yet\");\n        }\n        return this.instantiationService.createInstance(OutputChannel, channelData);\n    };\n    OutputService.prototype.doShowChannel = function (channel, preserveFocus) {\n        var _this = this;\n        if (this._outputPanel) {\n            output_1.CONTEXT_ACTIVE_LOG_OUTPUT.bindTo(this.contextKeyService).set(!!channel.outputChannelDescriptor.file && channel.outputChannelDescriptor.log);\n            return this._outputPanel.setInput(this.createInput(channel), editor_1.EditorOptions.create({ preserveFocus: preserveFocus }), cancellation_1.CancellationToken.None)\n                .then(function () {\n                if (!preserveFocus) {\n                    _this._outputPanel.focus();\n                }\n            });\n        }\n        return Promise.resolve(undefined);\n    };\n    OutputService.prototype.isChannelShown = function (channel) {\n        return this.isPanelShown() && this.activeChannel === channel;\n    };\n    OutputService.prototype.isPanelShown = function () {\n        var panel = this.panelService.getActivePanel();\n        return !!panel && panel.getId() === output_1.OUTPUT_PANEL_ID;\n    };\n    OutputService.prototype.createInput = function (channel) {\n        var resource = uri_1.URI.from({ scheme: output_1.OUTPUT_SCHEME, path: channel.id });\n        return this.instantiationService.createInstance(resourceEditorInput_1.ResourceEditorInput, nls.localize('output', \"{0} - Output\", channel.label), nls.localize('channel', \"Output channel for '{0}'\", channel.label), resource);\n    };\n    OutputService.prototype.saveState = function () {\n        if (this.activeChannel) {\n            this.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannel.id, storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    OutputService = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, panelService_1.IPanelService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, resolverService_1.ITextModelService),\n        tslib_1.__param(5, environment_1.IEnvironmentService),\n        tslib_1.__param(6, windows_1.IWindowService),\n        tslib_1.__param(7, log_1.ILogService),\n        tslib_1.__param(8, lifecycle_2.ILifecycleService),\n        tslib_1.__param(9, contextkey_1.IContextKeyService)\n    ], OutputService);\n    return OutputService;\n}(lifecycle_1.Disposable));\nexports.OutputService = OutputService;\nvar LogContentProvider = /** @class */ (function () {\n    function LogContentProvider(outputService, outputChannelModelService) {\n        this.outputService = outputService;\n        this.outputChannelModelService = outputChannelModelService;\n        this.channelModels = new Map();\n    }\n    LogContentProvider.prototype.provideTextContent = function (resource) {\n        if (resource.scheme === output_1.LOG_SCHEME) {\n            var channelModel = this.getChannelModel(resource);\n            if (channelModel) {\n                return channelModel.loadModel();\n            }\n        }\n        return null;\n    };\n    LogContentProvider.prototype.getChannelModel = function (resource) {\n        var channelId = resource.path;\n        var channelModel = this.channelModels.get(channelId);\n        if (!channelModel) {\n            var channelDisposables_1 = [];\n            var outputChannelDescriptor = this.outputService.getChannelDescriptors().filter(function (_a) {\n                var id = _a.id;\n                return id === channelId;\n            })[0];\n            if (outputChannelDescriptor && outputChannelDescriptor.file) {\n                channelModel = this.outputChannelModelService.createOutputChannelModel(channelId, resource, outputChannelDescriptor.log ? output_1.LOG_MIME : output_1.OUTPUT_MIME, outputChannelDescriptor.file);\n                channelModel.onDispose(function () { return lifecycle_1.dispose(channelDisposables_1); }, channelDisposables_1);\n                this.channelModels.set(channelId, channelModel);\n            }\n        }\n        return channelModel;\n    };\n    LogContentProvider = tslib_1.__decorate([\n        tslib_1.__param(0, output_1.IOutputService),\n        tslib_1.__param(1, outputChannelModel_1.IOutputChannelModelService)\n    ], LogContentProvider);\n    return LogContentProvider;\n}());\nexports.LogContentProvider = LogContentProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputServices.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputServices.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorOptions } from 'vs/workbench/common/editor';\nimport { IOutputChannelDescriptor, IOutputChannel, IOutputService, Extensions, OUTPUT_PANEL_ID, IOutputChannelRegistry, OUTPUT_SCHEME, LOG_SCHEME, CONTEXT_ACTIVE_LOG_OUTPUT, LOG_MIME, OUTPUT_MIME } from 'vs/workbench/contrib/output/common/output';\nimport { OutputPanel } from 'vs/workbench/contrib/output/browser/outputPanel';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { OutputLinkProvider } from 'vs/workbench/contrib/output/common/outputLinkProvider';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IPanel } from 'vs/workbench/common/panel';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IOutputChannelModel, IOutputChannelModelService } from 'vs/workbench/services/output/common/outputChannelModel';\n\nconst OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';\n\nclass OutputChannel extends Disposable implements IOutputChannel {\n\n\tscrollLock: boolean = false;\n\treadonly model: IOutputChannelModel;\n\treadonly id: string;\n\treadonly label: string;\n\n\tconstructor(\n\t\treadonly outputChannelDescriptor: IOutputChannelDescriptor,\n\t\t@IOutputChannelModelService outputChannelModelService: IOutputChannelModelService\n\t) {\n\t\tsuper();\n\t\tthis.id = outputChannelDescriptor.id;\n\t\tthis.label = outputChannelDescriptor.label;\n\t\tthis.model = this._register(outputChannelModelService.createOutputChannelModel(this.id, URI.from({ scheme: OUTPUT_SCHEME, path: this.id }), outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME, outputChannelDescriptor.file));\n\t}\n\n\tappend(output: string): void {\n\t\tthis.model.append(output);\n\t}\n\n\tupdate(): void {\n\t\tthis.model.update();\n\t}\n\n\tclear(till?: number): void {\n\t\tthis.model.clear(till);\n\t}\n}\n\nexport class OutputService extends Disposable implements IOutputService, ITextModelContentProvider {\n\n\tpublic _serviceBrand: any;\n\n\tprivate channels: Map<string, OutputChannel> = new Map<string, OutputChannel>();\n\tprivate activeChannelIdInStorage: string;\n\tprivate activeChannel?: OutputChannel;\n\n\tprivate readonly _onActiveOutputChannel = new Emitter<string>();\n\treadonly onActiveOutputChannel: Event<string> = this._onActiveOutputChannel.event;\n\n\tprivate _outputPanel: OutputPanel;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.activeChannelIdInStorage = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE, '');\n\n\t\t// Register as text model content provider for output\n\t\ttextModelResolverService.registerTextModelContentProvider(OUTPUT_SCHEME, this);\n\t\tinstantiationService.createInstance(OutputLinkProvider);\n\n\t\t// Create output channels for already registered channels\n\t\tconst registry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\t\tfor (const channelIdentifier of registry.getChannels()) {\n\t\t\tthis.onDidRegisterChannel(channelIdentifier.id);\n\t\t}\n\t\tthis._register(registry.onDidRegisterChannel(this.onDidRegisterChannel, this));\n\n\t\tthis._register(panelService.onDidPanelOpen(({ panel, focus }) => this.onDidPanelOpen(panel, !focus), this));\n\t\tthis._register(panelService.onDidPanelClose(this.onDidPanelClose, this));\n\n\t\t// Set active channel to first channel if not set\n\t\tif (!this.activeChannel) {\n\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\tthis.activeChannel = channels && channels.length > 0 ? this.getChannel(channels[0].id) : undefined;\n\t\t}\n\n\t\tthis._register(this.lifecycleService.onShutdown(() => this.dispose()));\n\t\tthis._register(this.storageService.onWillSaveState(() => this.saveState()));\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tconst channel = <OutputChannel>this.getChannel(resource.path);\n\t\tif (channel) {\n\t\t\treturn channel.model.loadModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tshowChannel(id: string, preserveFocus?: boolean): Promise<void> {\n\t\tconst channel = this.getChannel(id);\n\t\tif (!channel || this.isChannelShown(channel)) {\n\t\t\tif (this._outputPanel && !preserveFocus) {\n\t\t\t\tthis._outputPanel.focus();\n\t\t\t}\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.activeChannel = channel;\n\t\tlet promise: Promise<void>;\n\t\tif (this.isPanelShown()) {\n\t\t\tpromise = this.doShowChannel(channel, !!preserveFocus);\n\t\t} else {\n\t\t\tthis.panelService.openPanel(OUTPUT_PANEL_ID);\n\t\t\tpromise = this.doShowChannel(this.activeChannel, !!preserveFocus);\n\t\t}\n\t\treturn promise.then(() => this._onActiveOutputChannel.fire(id));\n\t}\n\n\tgetChannel(id: string): OutputChannel | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tgetChannelDescriptors(): IOutputChannelDescriptor[] {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels();\n\t}\n\n\tgetActiveChannel(): IOutputChannel | undefined {\n\t\treturn this.activeChannel;\n\t}\n\n\tprivate onDidRegisterChannel(channelId: string): void {\n\t\tconst channel = this.createChannel(channelId);\n\t\tthis.channels.set(channelId, channel);\n\t\tif (!this.activeChannel || this.activeChannelIdInStorage === channelId) {\n\t\t\tthis.activeChannel = channel;\n\t\t\tthis.onDidPanelOpen(this.panelService.getActivePanel(), true)\n\t\t\t\t.then(() => this._onActiveOutputChannel.fire(channelId));\n\t\t}\n\t}\n\n\tprivate onDidPanelOpen(panel: IPanel | null, preserveFocus: boolean): Promise<void> {\n\t\tif (panel && panel.getId() === OUTPUT_PANEL_ID) {\n\t\t\tthis._outputPanel = <OutputPanel>this.panelService.getActivePanel();\n\t\t\tif (this.activeChannel) {\n\t\t\t\treturn this.doShowChannel(this.activeChannel, preserveFocus);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate onDidPanelClose(panel: IPanel): void {\n\t\tif (this._outputPanel && panel.getId() === OUTPUT_PANEL_ID) {\n\t\t\tCONTEXT_ACTIVE_LOG_OUTPUT.bindTo(this.contextKeyService).set(false);\n\t\t\tthis._outputPanel.clearInput();\n\t\t}\n\t}\n\n\tprivate createChannel(id: string): OutputChannel {\n\t\tconst channelDisposables: IDisposable[] = [];\n\t\tconst channel = this.instantiateChannel(id);\n\t\tchannel.model.onDidAppendedContent(() => {\n\t\t\tif (!channel.scrollLock) {\n\t\t\t\tconst panel = this.panelService.getActivePanel();\n\t\t\t\tif (panel && panel.getId() === OUTPUT_PANEL_ID && this.isChannelShown(channel)) {\n\t\t\t\t\tlet outputPanel = <OutputPanel>panel;\n\t\t\t\t\toutputPanel.revealLastLine();\n\t\t\t\t}\n\t\t\t}\n\t\t}, channelDisposables);\n\t\tchannel.model.onDispose(() => {\n\t\t\tif (this.activeChannel === channel) {\n\t\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\t\tconst channel = channels.length ? this.getChannel(channels[0].id) : undefined;\n\t\t\t\tif (channel && this.isPanelShown()) {\n\t\t\t\t\tthis.showChannel(channel.id, true);\n\t\t\t\t} else {\n\t\t\t\t\tthis.activeChannel = channel;\n\t\t\t\t\tif (this.activeChannel) {\n\t\t\t\t\t\tthis._onActiveOutputChannel.fire(this.activeChannel.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).removeChannel(id);\n\t\t\tdispose(channelDisposables);\n\t\t}, channelDisposables);\n\n\t\treturn channel;\n\t}\n\n\tprivate instantiateChannel(id: string): OutputChannel {\n\t\tconst channelData = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t\tif (!channelData) {\n\t\t\tthis.logService.error(`Channel '${id}' is not registered yet`);\n\t\t\tthrow new Error(`Channel '${id}' is not registered yet`);\n\t\t}\n\t\treturn this.instantiationService.createInstance(OutputChannel, channelData);\n\t}\n\n\tprivate doShowChannel(channel: OutputChannel, preserveFocus: boolean): Promise<void> {\n\t\tif (this._outputPanel) {\n\t\t\tCONTEXT_ACTIVE_LOG_OUTPUT.bindTo(this.contextKeyService).set(!!channel.outputChannelDescriptor.file && channel.outputChannelDescriptor.log);\n\t\t\treturn this._outputPanel.setInput(this.createInput(channel), EditorOptions.create({ preserveFocus }), CancellationToken.None)\n\t\t\t\t.then(() => {\n\t\t\t\t\tif (!preserveFocus) {\n\t\t\t\t\t\tthis._outputPanel.focus();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate isChannelShown(channel: IOutputChannel): boolean {\n\t\treturn this.isPanelShown() && this.activeChannel === channel;\n\t}\n\n\tprivate isPanelShown(): boolean {\n\t\tconst panel = this.panelService.getActivePanel();\n\t\treturn !!panel && panel.getId() === OUTPUT_PANEL_ID;\n\t}\n\n\tprivate createInput(channel: IOutputChannel): ResourceEditorInput {\n\t\tconst resource = URI.from({ scheme: OUTPUT_SCHEME, path: channel.id });\n\t\treturn this.instantiationService.createInstance(ResourceEditorInput, nls.localize('output', \"{0} - Output\", channel.label), nls.localize('channel', \"Output channel for '{0}'\", channel.label), resource);\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.activeChannel) {\n\t\t\tthis.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannel.id, StorageScope.WORKSPACE);\n\t\t}\n\t}\n}\n\nexport class LogContentProvider {\n\n\tprivate channelModels: Map<string, IOutputChannelModel> = new Map<string, IOutputChannelModel>();\n\n\tconstructor(\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IOutputChannelModelService private readonly outputChannelModelService: IOutputChannelModelService\n\t) {\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tif (resource.scheme === LOG_SCHEME) {\n\t\t\tlet channelModel = this.getChannelModel(resource);\n\t\t\tif (channelModel) {\n\t\t\t\treturn channelModel.loadModel();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getChannelModel(resource: URI): IOutputChannelModel | undefined {\n\t\tconst channelId = resource.path;\n\t\tlet channelModel = this.channelModels.get(channelId);\n\t\tif (!channelModel) {\n\t\t\tconst channelDisposables: IDisposable[] = [];\n\t\t\tconst outputChannelDescriptor = this.outputService.getChannelDescriptors().filter(({ id }) => id === channelId)[0];\n\t\t\tif (outputChannelDescriptor && outputChannelDescriptor.file) {\n\t\t\t\tchannelModel = this.outputChannelModelService.createOutputChannelModel(channelId, resource, outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME, outputChannelDescriptor.file);\n\t\t\t\tchannelModel.onDispose(() => dispose(channelDisposables), channelDisposables);\n\t\t\t\tthis.channelModels.set(channelId, channelModel);\n\t\t\t}\n\t\t}\n\t\treturn channelModel;\n\t}\n}"]}]}