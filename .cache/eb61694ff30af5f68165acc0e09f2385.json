{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar webviewEditorInput_1 = require(\"./webviewEditorInput\");\nvar webviewEditorService_1 = require(\"./webviewEditorService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar WebviewEditorInputFactory = /** @class */ (function () {\n    function WebviewEditorInputFactory(_webviewService) {\n        this._webviewService = _webviewService;\n    }\n    WebviewEditorInputFactory.prototype.serialize = function (input) {\n        if (!this._webviewService.shouldPersist(input)) {\n            return undefined;\n        }\n        var data = {\n            viewType: input.viewType,\n            id: input.getId(),\n            title: input.getName(),\n            options: input.options,\n            extensionLocation: input.extension ? input.extension.location : undefined,\n            extensionId: input.extension ? input.extension.id.value : undefined,\n            state: input.state,\n            iconPath: input.iconPath ? { light: input.iconPath.light, dark: input.iconPath.dark, } : undefined,\n            group: input.group\n        };\n        try {\n            return JSON.stringify(data);\n        }\n        catch (_a) {\n            return undefined;\n        }\n    };\n    WebviewEditorInputFactory.prototype.deserialize = function (_instantiationService, serializedEditorInput) {\n        var data = JSON.parse(serializedEditorInput);\n        var extensionLocation = reviveUri(data.extensionLocation);\n        var extensionId = data.extensionId ? new extensions_1.ExtensionIdentifier(data.extensionId) : undefined;\n        var iconPath = reviveIconPath(data.iconPath);\n        return this._webviewService.reviveWebview(data.viewType, data.id, data.title, iconPath, data.state, data.options, extensionLocation ? {\n            location: extensionLocation,\n            id: extensionId\n        } : undefined, data.group);\n    };\n    WebviewEditorInputFactory.ID = webviewEditorInput_1.WebviewEditorInput.typeId;\n    WebviewEditorInputFactory = tslib_1.__decorate([\n        tslib_1.__param(0, webviewEditorService_1.IWebviewEditorService)\n    ], WebviewEditorInputFactory);\n    return WebviewEditorInputFactory;\n}());\nexports.WebviewEditorInputFactory = WebviewEditorInputFactory;\nfunction reviveIconPath(data) {\n    if (!data) {\n        return undefined;\n    }\n    var light = reviveUri(data.light);\n    var dark = reviveUri(data.dark);\n    return light && dark ? { light: light, dark: dark } : undefined;\n}\nfunction reviveUri(data) {\n    if (!data) {\n        return undefined;\n    }\n    try {\n        if (typeof data === 'string') {\n            return uri_1.URI.parse(data);\n        }\n        return uri_1.URI.from(data);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorInputFactory } from 'vs/workbench/common/editor';\nimport { WebviewEditorInput } from './webviewEditorInput';\nimport { IWebviewEditorService, WebviewInputOptions } from './webviewEditorService';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\ninterface SerializedIconPath {\n\tlight: string | UriComponents;\n\tdark: string | UriComponents;\n}\n\ninterface SerializedWebview {\n\treadonly viewType: string;\n\treadonly id: number;\n\treadonly title: string;\n\treadonly options: WebviewInputOptions;\n\treadonly extensionLocation: string | UriComponents | undefined;\n\treadonly extensionId: string | undefined;\n\treadonly state: any;\n\treadonly iconPath: SerializedIconPath | undefined;\n\treadonly group?: number;\n}\n\nexport class WebviewEditorInputFactory implements IEditorInputFactory {\n\n\tpublic static readonly ID = WebviewEditorInput.typeId;\n\n\tpublic constructor(\n\t\t@IWebviewEditorService private readonly _webviewService: IWebviewEditorService\n\t) { }\n\n\tpublic serialize(\n\t\tinput: WebviewEditorInput\n\t): string | undefined {\n\t\tif (!this._webviewService.shouldPersist(input)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst data: SerializedWebview = {\n\t\t\tviewType: input.viewType,\n\t\t\tid: input.getId(),\n\t\t\ttitle: input.getName(),\n\t\t\toptions: input.options,\n\t\t\textensionLocation: input.extension ? input.extension.location : undefined,\n\t\t\textensionId: input.extension ? input.extension.id.value : undefined,\n\t\t\tstate: input.state,\n\t\t\ticonPath: input.iconPath ? { light: input.iconPath.light, dark: input.iconPath.dark, } : undefined,\n\t\t\tgroup: input.group\n\t\t};\n\n\t\ttry {\n\t\t\treturn JSON.stringify(data);\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic deserialize(\n\t\t_instantiationService: IInstantiationService,\n\t\tserializedEditorInput: string\n\t): WebviewEditorInput {\n\t\tconst data: SerializedWebview = JSON.parse(serializedEditorInput);\n\t\tconst extensionLocation = reviveUri(data.extensionLocation);\n\t\tconst extensionId = data.extensionId ? new ExtensionIdentifier(data.extensionId) : undefined;\n\t\tconst iconPath = reviveIconPath(data.iconPath);\n\t\treturn this._webviewService.reviveWebview(data.viewType, data.id, data.title, iconPath, data.state, data.options, extensionLocation ? {\n\t\t\tlocation: extensionLocation,\n\t\t\tid: extensionId\n\t\t} : undefined, data.group);\n\t}\n}\nfunction reviveIconPath(data: SerializedIconPath | undefined) {\n\tif (!data) {\n\t\treturn undefined;\n\t}\n\n\tconst light = reviveUri(data.light);\n\tconst dark = reviveUri(data.dark);\n\treturn light && dark ? { light, dark } : undefined;\n}\n\nfunction reviveUri(data: string | UriComponents | undefined): URI | undefined {\n\tif (!data) {\n\t\treturn undefined;\n\t}\n\n\ttry {\n\t\tif (typeof data === 'string') {\n\t\t\treturn URI.parse(data);\n\t\t}\n\t\treturn URI.from(data);\n\t} catch {\n\t\treturn undefined;\n\t}\n}\n"]}]}