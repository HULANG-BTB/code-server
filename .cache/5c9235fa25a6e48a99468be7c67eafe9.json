{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/ide/src/fill/os.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/fill/os.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"@coder/protocol\", \"./client\"], function (require, exports, protocol_1, client_1) {\n    \"use strict\";\n    class OS {\n        constructor() {\n            client_1.client.initData.then((d) => this.initialize(d));\n        }\n        homedir() {\n            if (typeof this._homedir === \"undefined\") {\n                throw new Error(\"trying to access homedir before it has been set\");\n            }\n            return this._homedir;\n        }\n        tmpdir() {\n            if (typeof this._tmpdir === \"undefined\") {\n                throw new Error(\"trying to access tmpdir before it has been set\");\n            }\n            return this._tmpdir;\n        }\n        initialize(data) {\n            this._homedir = data.homeDirectory;\n            this._tmpdir = data.tmpDirectory;\n            switch (data.os) {\n                case protocol_1.OperatingSystem.Windows:\n                    this._platform = \"win32\";\n                    break;\n                case protocol_1.OperatingSystem.Mac:\n                    this._platform = \"darwin\";\n                    break;\n                default:\n                    this._platform = \"linux\";\n                    break;\n            }\n            process.platform = this._platform;\n        }\n        release() {\n            return \"Unknown\";\n        }\n        platform() {\n            if (typeof this._platform === \"undefined\") {\n                throw new Error(\"trying to access platform before it has been set\");\n            }\n            return this._platform;\n        }\n    }\n    return new OS();\n});\n",null]}