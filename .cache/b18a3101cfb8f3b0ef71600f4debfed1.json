{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/actions\", \"vs/base/common/async\", \"vs/base/browser/dom\", \"vs/base/common/event\", \"vs/base/common/json\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/platform/contextview/browser/contextView\", \"vs/base/common/lifecycle\", \"vs/workbench/contrib/extensions/common/extensions\", \"vs/workbench/contrib/extensions/common/extensionsFileTemplate\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/platform/extensions/common/extensions\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/browser/viewlet\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/workbench/contrib/extensions/common/extensionQuery\", \"vs/platform/files/common/files\", \"vs/platform/workspace/common/workspace\", \"vs/platform/windows/common/windows\", \"vs/workbench/services/extensions/common/extensions\", \"vs/base/common/uri\", \"vs/platform/commands/common/commands\", \"vs/platform/configuration/common/configuration\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/colorRegistry\", \"vs/base/common/color\", \"vs/workbench/services/configuration/common/jsonEditing\", \"vs/editor/common/services/resolverService\", \"vs/base/common/paging\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/actions/common/actions\", \"vs/workbench/browser/actions/workspaceCommands\", \"vs/platform/notification/common/notification\", \"vs/platform/opener/common/opener\", \"vs/base/common/labels\", \"vs/platform/environment/common/environment\", \"vs/workbench/services/editor/common/editorService\", \"vs/workbench/services/editor/common/editorGroupsService\", \"vs/workbench/contrib/extensions/common/extensionsInput\", \"vs/platform/product/node/product\", \"vs/platform/quickinput/common/quickInput\", \"vs/base/common/cancellation\", \"electron\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/base/browser/ui/aria/aria\", \"vs/base/common/arrays\", \"vs/workbench/services/themes/common/workbenchThemeService\", \"vs/css!./media/extensionActions\"], function (require, exports, nls_1, actions_1, async_1, DOM, event_1, json, actionbar_1, contextView_1, lifecycle_1, extensions_1, extensionsFileTemplate_1, extensionManagement_1, extensionManagementUtil_1, extensions_2, instantiation_1, viewlet_1, viewlet_2, extensionQuery_1, files_1, workspace_1, windows_1, extensions_3, uri_1, commands_1, configuration_1, themeService_1, colorRegistry_1, color_1, jsonEditing_1, resolverService_1, paging_1, contextkey_1, actions_2, workspaceCommands_1, notification_1, opener_1, labels_1, environment_1, editorService_1, editorGroupsService_1, extensionsInput_1, product_1, quickInput_1, cancellation_1, electron_1, layoutService_1, aria_1, arrays_1, workbenchThemeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function toExtensionDescription(local) {\n        return Object.assign({ identifier: new extensions_2.ExtensionIdentifier(local.identifier.id), isBuiltin: local.type === extensions_2.ExtensionType.System, isUnderDevelopment: false, extensionLocation: local.location }, local.manifest);\n    }\n    const promptDownloadManually = (extension, message, error, instantiationService, notificationService, openerService) => {\n        if (!extension || error.name === extensionManagement_1.INSTALL_ERROR_INCOMPATIBLE || error.name === extensionManagement_1.INSTALL_ERROR_MALICIOUS) {\n            return Promise.reject(error);\n        }\n        else {\n            const downloadUrl = `${product_1.default.extensionsGallery.serviceUrl}/publishers/${extension.publisher}/vsextensions/${extension.name}/${extension.version}/vspackage`;\n            notificationService.prompt(notification_1.Severity.Error, message, [{\n                    label: nls_1.localize('download', \"Download Manually\"),\n                    run: () => openerService.open(uri_1.URI.parse(downloadUrl)).then(() => {\n                        notificationService.prompt(notification_1.Severity.Info, nls_1.localize('install vsix', 'Once downloaded, please manually install the downloaded VSIX of \\'{0}\\'.', extension.identifier.id), [{\n                                label: InstallVSIXAction.LABEL,\n                                run: () => {\n                                    const action = instantiationService.createInstance(InstallVSIXAction, InstallVSIXAction.ID, InstallVSIXAction.LABEL);\n                                    action.run();\n                                    action.dispose();\n                                }\n                            }]);\n                    })\n                }]);\n            return Promise.resolve();\n        }\n    };\n    function getRelativeDateLabel(date) {\n        const delta = new Date().getTime() - date.getTime();\n        const year = 365 * 24 * 60 * 60 * 1000;\n        if (delta > year) {\n            const noOfYears = Math.floor(delta / year);\n            return noOfYears > 1 ? nls_1.localize('noOfYearsAgo', \"{0} years ago\", noOfYears) : nls_1.localize('one year ago', \"1 year ago\");\n        }\n        const month = 30 * 24 * 60 * 60 * 1000;\n        if (delta > month) {\n            const noOfMonths = Math.floor(delta / month);\n            return noOfMonths > 1 ? nls_1.localize('noOfMonthsAgo', \"{0} months ago\", noOfMonths) : nls_1.localize('one month ago', \"1 month ago\");\n        }\n        const day = 24 * 60 * 60 * 1000;\n        if (delta > day) {\n            const noOfDays = Math.floor(delta / day);\n            return noOfDays > 1 ? nls_1.localize('noOfDaysAgo', \"{0} days ago\", noOfDays) : nls_1.localize('one day ago', \"1 day ago\");\n        }\n        const hour = 60 * 60 * 1000;\n        if (delta > hour) {\n            const noOfHours = Math.floor(delta / day);\n            return noOfHours > 1 ? nls_1.localize('noOfHoursAgo', \"{0} hours ago\", noOfHours) : nls_1.localize('one hour ago', \"1 hour ago\");\n        }\n        if (delta > 0) {\n            return nls_1.localize('just now', \"Just now\");\n        }\n        return '';\n    }\n    class ExtensionAction extends actions_1.Action {\n        get extension() { return this._extension; }\n        set extension(extension) { this._extension = extension; this.update(); }\n    }\n    exports.ExtensionAction = ExtensionAction;\n    let InstallAction = class InstallAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, instantiationService, notificationService, openerService, runtimeExtensionService, workbenchThemeService) {\n            super(`extensions.install`, InstallAction.INSTALL_LABEL, InstallAction.Class, false);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.instantiationService = instantiationService;\n            this.notificationService = notificationService;\n            this.openerService = openerService;\n            this.runtimeExtensionService = runtimeExtensionService;\n            this.workbenchThemeService = workbenchThemeService;\n            this.update();\n        }\n        update() {\n            if (!this.extension || this.extension.type === extensions_2.ExtensionType.System) {\n                this.enabled = false;\n                this.class = InstallAction.Class;\n                this.label = InstallAction.INSTALL_LABEL;\n                return;\n            }\n            this.enabled = this.extensionsWorkbenchService.canInstall(this.extension) && this.extension.state === extensions_1.ExtensionState.Uninstalled;\n            if (this.extension.state === extensions_1.ExtensionState.Installing) {\n                this.label = InstallAction.INSTALLING_LABEL;\n                this.class = InstallAction.InstallingClass;\n                this.tooltip = InstallAction.INSTALLING_LABEL;\n            }\n            else {\n                this.label = InstallAction.INSTALL_LABEL;\n                this.class = InstallAction.Class;\n                this.tooltip = InstallAction.INSTALL_LABEL;\n            }\n        }\n        run() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.extensionsWorkbenchService.open(this.extension);\n                aria_1.alert(nls_1.localize('installExtensionStart', \"Installing extension {0} started. An editor is now open with more details on this extension\", this.extension.displayName));\n                const extension = yield this.install(this.extension);\n                if (extension.local) {\n                    const runningExtension = yield this.getRunningExtension(extension.local);\n                    if (runningExtension) {\n                        const colorThemes = yield this.workbenchThemeService.getColorThemes();\n                        const fileIconThemes = yield this.workbenchThemeService.getFileIconThemes();\n                        if (SetColorThemeAction.getColorThemes(colorThemes, this.extension).length) {\n                            const action = this.instantiationService.createInstance(SetColorThemeAction, colorThemes);\n                            action.extension = extension;\n                            return action.run({ showCurrentTheme: true, ignoreFocusLost: true });\n                        }\n                        if (SetFileIconThemeAction.getFileIconThemes(fileIconThemes, this.extension).length) {\n                            const action = this.instantiationService.createInstance(SetFileIconThemeAction, fileIconThemes);\n                            action.extension = extension;\n                            return action.run({ showCurrentTheme: true, ignoreFocusLost: true });\n                        }\n                    }\n                }\n            });\n        }\n        install(extension) {\n            return this.extensionsWorkbenchService.install(extension)\n                .then(null, err => {\n                if (!extension.gallery) {\n                    return this.notificationService.error(err);\n                }\n                console.error(err);\n                return promptDownloadManually(extension.gallery, nls_1.localize('failedToInstall', \"Failed to install \\'{0}\\'.\", extension.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n            });\n        }\n        getRunningExtension(extension) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const runningExtension = yield this.runtimeExtensionService.getExtension(extension.identifier.id);\n                if (runningExtension) {\n                    return runningExtension;\n                }\n                if (this.runtimeExtensionService.canAddExtension(toExtensionDescription(extension))) {\n                    return new Promise((c, e) => {\n                        const disposable = this.runtimeExtensionService.onDidChangeExtensions(() => __awaiter(this, void 0, void 0, function* () {\n                            const runningExtension = yield this.runtimeExtensionService.getExtension(extension.identifier.id);\n                            if (runningExtension) {\n                                disposable.dispose();\n                                c(runningExtension);\n                            }\n                        }));\n                    });\n                }\n                return null;\n            });\n        }\n    };\n    InstallAction.INSTALL_LABEL = nls_1.localize('install', \"Install\");\n    InstallAction.INSTALLING_LABEL = nls_1.localize('installing', \"Installing\");\n    InstallAction.Class = 'extension-action prominent install';\n    InstallAction.InstallingClass = 'extension-action install installing';\n    InstallAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, notification_1.INotificationService),\n        __param(3, opener_1.IOpenerService),\n        __param(4, extensions_3.IExtensionService),\n        __param(5, workbenchThemeService_1.IWorkbenchThemeService)\n    ], InstallAction);\n    exports.InstallAction = InstallAction;\n    let UninstallAction = class UninstallAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService) {\n            super('extensions.uninstall', UninstallAction.UninstallLabel, UninstallAction.UninstallClass, false);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.update();\n        }\n        update() {\n            if (!this.extension) {\n                this.enabled = false;\n                return;\n            }\n            const state = this.extension.state;\n            if (state === extensions_1.ExtensionState.Uninstalling) {\n                this.label = UninstallAction.UninstallingLabel;\n                this.class = UninstallAction.UnInstallingClass;\n                this.enabled = false;\n                return;\n            }\n            this.label = UninstallAction.UninstallLabel;\n            this.class = UninstallAction.UninstallClass;\n            const installedExtensions = this.extensionsWorkbenchService.local.filter(e => extensionManagementUtil_1.areSameExtensions(e.identifier, this.extension.identifier));\n            if (!installedExtensions.length) {\n                this.enabled = false;\n                return;\n            }\n            if (state !== extensions_1.ExtensionState.Installed) {\n                this.enabled = false;\n                return;\n            }\n            if (installedExtensions[0].type !== extensions_2.ExtensionType.User) {\n                this.enabled = false;\n                return;\n            }\n            this.enabled = true;\n        }\n        run() {\n            aria_1.alert(nls_1.localize('uninstallExtensionStart', \"Uninstalling extension {0} started.\", this.extension.displayName));\n            return this.extensionsWorkbenchService.uninstall(this.extension).then(() => {\n                aria_1.alert(nls_1.localize('uninstallExtensionComplete', \"Please reload Visual Studio Code to complete the uninstallation of the extension {0}.\", this.extension.displayName));\n            });\n        }\n    };\n    UninstallAction.UninstallLabel = nls_1.localize('uninstallAction', \"Uninstall\");\n    UninstallAction.UninstallingLabel = nls_1.localize('Uninstalling', \"Uninstalling\");\n    UninstallAction.UninstallClass = 'extension-action uninstall';\n    UninstallAction.UnInstallingClass = 'extension-action uninstall uninstalling';\n    UninstallAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService)\n    ], UninstallAction);\n    exports.UninstallAction = UninstallAction;\n    let CombinedInstallAction = class CombinedInstallAction extends ExtensionAction {\n        constructor(instantiationService) {\n            super('extensions.combinedInstall', '', '', false);\n            this.disposables = [];\n            this.installAction = instantiationService.createInstance(InstallAction);\n            this.uninstallAction = instantiationService.createInstance(UninstallAction);\n            this.disposables.push(this.installAction, this.uninstallAction);\n            this.update();\n        }\n        update() {\n            this.installAction.extension = this.extension;\n            this.uninstallAction.extension = this.extension;\n            this.installAction.update();\n            this.uninstallAction.update();\n            if (!this.extension || this.extension.type === extensions_2.ExtensionType.System) {\n                this.enabled = false;\n                this.class = CombinedInstallAction.NoExtensionClass;\n            }\n            else if (this.extension.state === extensions_1.ExtensionState.Installing) {\n                this.enabled = false;\n                this.label = this.installAction.label;\n                this.class = this.installAction.class;\n                this.tooltip = this.installAction.tooltip;\n            }\n            else if (this.extension.state === extensions_1.ExtensionState.Uninstalling) {\n                this.enabled = false;\n                this.label = this.uninstallAction.label;\n                this.class = this.uninstallAction.class;\n                this.tooltip = this.uninstallAction.tooltip;\n            }\n            else if (this.installAction.enabled) {\n                this.enabled = true;\n                this.label = this.installAction.label;\n                this.class = this.installAction.class;\n                this.tooltip = this.installAction.tooltip;\n            }\n            else if (this.uninstallAction.enabled) {\n                this.enabled = true;\n                this.label = this.uninstallAction.label;\n                this.class = this.uninstallAction.class;\n                this.tooltip = this.uninstallAction.tooltip;\n            }\n            else {\n                this.enabled = false;\n                this.label = this.installAction.label;\n                this.class = this.installAction.class;\n                this.tooltip = this.installAction.tooltip;\n            }\n        }\n        run() {\n            if (this.installAction.enabled) {\n                return this.installAction.run();\n            }\n            else if (this.uninstallAction.enabled) {\n                return this.uninstallAction.run();\n            }\n            return Promise.resolve();\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    CombinedInstallAction.NoExtensionClass = 'extension-action prominent install no-extension';\n    CombinedInstallAction = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], CombinedInstallAction);\n    exports.CombinedInstallAction = CombinedInstallAction;\n    let UpdateAction = class UpdateAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, instantiationService, notificationService, openerService) {\n            super(`extensions.update`, '', UpdateAction.DisabledClass, false);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.instantiationService = instantiationService;\n            this.notificationService = notificationService;\n            this.openerService = openerService;\n            this.update();\n        }\n        update() {\n            if (!this.extension) {\n                this.enabled = false;\n                this.class = UpdateAction.DisabledClass;\n                this.label = this.getUpdateLabel();\n                return;\n            }\n            if (this.extension.type !== extensions_2.ExtensionType.User) {\n                this.enabled = false;\n                this.class = UpdateAction.DisabledClass;\n                this.label = this.getUpdateLabel();\n                return;\n            }\n            const canInstall = this.extensionsWorkbenchService.canInstall(this.extension);\n            const isInstalled = this.extension.state === extensions_1.ExtensionState.Installed;\n            this.enabled = canInstall && isInstalled && this.extension.outdated;\n            this.class = this.enabled ? UpdateAction.EnabledClass : UpdateAction.DisabledClass;\n            this.label = this.extension.outdated ? this.getUpdateLabel(this.extension.latestVersion) : this.getUpdateLabel();\n        }\n        run() {\n            aria_1.alert(nls_1.localize('updateExtensionStart', \"Updating extension {0} to version {1} started.\", this.extension.displayName, this.extension.latestVersion));\n            return this.install(this.extension);\n        }\n        install(extension) {\n            return this.extensionsWorkbenchService.install(extension).then(() => {\n                aria_1.alert(nls_1.localize('updateExtensionComplete', \"Updating extension {0} to version {1} completed.\", this.extension.displayName, this.extension.latestVersion));\n            }, err => {\n                if (!extension.gallery) {\n                    return this.notificationService.error(err);\n                }\n                console.error(err);\n                return promptDownloadManually(extension.gallery, nls_1.localize('failedToUpdate', \"Failed to update \\'{0}\\'.\", extension.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n            });\n        }\n        getUpdateLabel(version) {\n            return version ? nls_1.localize('updateTo', \"Update to {0}\", version) : nls_1.localize('updateAction', \"Update\");\n        }\n    };\n    UpdateAction.EnabledClass = 'extension-action prominent update';\n    UpdateAction.DisabledClass = `${UpdateAction.EnabledClass} disabled`;\n    UpdateAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, notification_1.INotificationService),\n        __param(3, opener_1.IOpenerService)\n    ], UpdateAction);\n    exports.UpdateAction = UpdateAction;\n    class ExtensionActionItem extends actionbar_1.ActionItem {\n        constructor(context, action, options = {}) {\n            super(context, action, options);\n        }\n        updateEnabled() {\n            super.updateEnabled();\n            if (this.options.tabOnlyOnFocus && this.getAction().enabled && !this._hasFocus) {\n                DOM.removeTabIndexAndUpdateFocus(this.label);\n            }\n        }\n        setFocus(value) {\n            if (!this.options.tabOnlyOnFocus || this._hasFocus === value) {\n                return;\n            }\n            this._hasFocus = value;\n            if (this.getAction().enabled) {\n                if (this._hasFocus) {\n                    this.label.tabIndex = 0;\n                }\n                else {\n                    DOM.removeTabIndexAndUpdateFocus(this.label);\n                }\n            }\n        }\n    }\n    exports.ExtensionActionItem = ExtensionActionItem;\n    let ExtensionDropDownAction = class ExtensionDropDownAction extends ExtensionAction {\n        constructor(id, label, cssClass, enabled, tabOnlyOnFocus, instantiationService) {\n            super(id, label, cssClass, enabled);\n            this.tabOnlyOnFocus = tabOnlyOnFocus;\n            this.instantiationService = instantiationService;\n            this.disposables = [];\n        }\n        createActionItem() {\n            this._actionItem = this.instantiationService.createInstance(DropDownMenuActionItem, this, this.tabOnlyOnFocus);\n            return this._actionItem;\n        }\n        run({ actionGroups, disposeActionsOnHide }) {\n            if (this._actionItem) {\n                this._actionItem.showMenu(actionGroups, disposeActionsOnHide);\n            }\n            return Promise.resolve();\n        }\n        dispose() {\n            lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ExtensionDropDownAction = __decorate([\n        __param(5, instantiation_1.IInstantiationService)\n    ], ExtensionDropDownAction);\n    exports.ExtensionDropDownAction = ExtensionDropDownAction;\n    let DropDownMenuActionItem = class DropDownMenuActionItem extends ExtensionActionItem {\n        constructor(action, tabOnlyOnFocus, contextMenuService) {\n            super(null, action, { icon: true, label: true, tabOnlyOnFocus });\n            this.contextMenuService = contextMenuService;\n            this.disposables = [];\n        }\n        showMenu(menuActionGroups, disposeActionsOnHide) {\n            if (this.element) {\n                const actions = this.getActions(menuActionGroups);\n                let elementPosition = DOM.getDomNodePagePosition(this.element);\n                const anchor = { x: elementPosition.left, y: elementPosition.top + elementPosition.height + 10 };\n                this.contextMenuService.showContextMenu({\n                    getAnchor: () => anchor,\n                    getActions: () => actions,\n                    actionRunner: this.actionRunner,\n                    onHide: () => { if (disposeActionsOnHide) {\n                        lifecycle_1.dispose(actions);\n                    } }\n                });\n            }\n        }\n        getActions(menuActionGroups) {\n            let actions = [];\n            for (const menuActions of menuActionGroups) {\n                actions = [...actions, ...menuActions, new actionbar_1.Separator()];\n            }\n            return actions.length ? actions.slice(0, actions.length - 1) : actions;\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    DropDownMenuActionItem = __decorate([\n        __param(2, contextView_1.IContextMenuService)\n    ], DropDownMenuActionItem);\n    exports.DropDownMenuActionItem = DropDownMenuActionItem;\n    let ManageExtensionAction = class ManageExtensionAction extends ExtensionDropDownAction {\n        constructor(instantiationService, extensionService, workbenchThemeService) {\n            super(ManageExtensionAction.ID, '', '', true, true, instantiationService);\n            this.extensionService = extensionService;\n            this.workbenchThemeService = workbenchThemeService;\n            this.tooltip = nls_1.localize('manage', \"Manage\");\n            this.update();\n        }\n        getActionGroups(runningExtensions, colorThemes, fileIconThemes) {\n            const groups = [];\n            if (this.extension) {\n                const extensionColorThemes = SetColorThemeAction.getColorThemes(colorThemes, this.extension);\n                const extensionFileIconThemes = SetFileIconThemeAction.getFileIconThemes(fileIconThemes, this.extension);\n                if (extensionColorThemes.length || extensionFileIconThemes.length) {\n                    const themesGroup = [];\n                    if (extensionColorThemes.length) {\n                        themesGroup.push(this.instantiationService.createInstance(SetColorThemeAction, colorThemes));\n                    }\n                    if (extensionFileIconThemes.length) {\n                        themesGroup.push(this.instantiationService.createInstance(SetFileIconThemeAction, fileIconThemes));\n                    }\n                    groups.push(themesGroup);\n                }\n            }\n            groups.push([\n                this.instantiationService.createInstance(EnableGloballyAction),\n                this.instantiationService.createInstance(EnableForWorkspaceAction)\n            ]);\n            groups.push([\n                this.instantiationService.createInstance(DisableGloballyAction, runningExtensions),\n                this.instantiationService.createInstance(DisableForWorkspaceAction, runningExtensions)\n            ]);\n            groups.push([this.instantiationService.createInstance(UninstallAction)]);\n            groups.push([this.instantiationService.createInstance(InstallAnotherVersionAction)]);\n            groups.push([this.instantiationService.createInstance(ExtensionInfoAction)]);\n            groups.forEach(group => group.forEach(extensionAction => extensionAction.extension = this.extension));\n            return groups;\n        }\n        run() {\n            const _super = Object.create(null, {\n                run: { get: () => super.run }\n            });\n            return __awaiter(this, void 0, void 0, function* () {\n                const runtimeExtensions = yield this.extensionService.getExtensions();\n                const colorThemes = yield this.workbenchThemeService.getColorThemes();\n                const fileIconThemes = yield this.workbenchThemeService.getFileIconThemes();\n                return _super.run.call(this, { actionGroups: this.getActionGroups(runtimeExtensions, colorThemes, fileIconThemes), disposeActionsOnHide: true });\n            });\n        }\n        update() {\n            this.class = ManageExtensionAction.HideManageExtensionClass;\n            this.enabled = false;\n            if (this.extension) {\n                const state = this.extension.state;\n                this.enabled = state === extensions_1.ExtensionState.Installed;\n                this.class = this.enabled || state === extensions_1.ExtensionState.Uninstalling ? ManageExtensionAction.Class : ManageExtensionAction.HideManageExtensionClass;\n                this.tooltip = state === extensions_1.ExtensionState.Uninstalling ? nls_1.localize('ManageExtensionAction.uninstallingTooltip', \"Uninstalling\") : '';\n            }\n        }\n    };\n    ManageExtensionAction.ID = 'extensions.manage';\n    ManageExtensionAction.Class = 'extension-action manage';\n    ManageExtensionAction.HideManageExtensionClass = `${ManageExtensionAction.Class} hide`;\n    ManageExtensionAction = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, extensions_3.IExtensionService),\n        __param(2, workbenchThemeService_1.IWorkbenchThemeService)\n    ], ManageExtensionAction);\n    exports.ManageExtensionAction = ManageExtensionAction;\n    let InstallAnotherVersionAction = class InstallAnotherVersionAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, extensionGalleryService, quickInputService, instantiationService, notificationService, openerService) {\n            super(InstallAnotherVersionAction.ID, InstallAnotherVersionAction.LABEL);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionGalleryService = extensionGalleryService;\n            this.quickInputService = quickInputService;\n            this.instantiationService = instantiationService;\n            this.notificationService = notificationService;\n            this.openerService = openerService;\n            this.update();\n        }\n        update() {\n            this.enabled = this.extension && !!this.extension.gallery;\n        }\n        run() {\n            if (!this.enabled) {\n                return Promise.resolve();\n            }\n            return this.quickInputService.pick(this.getVersionEntries(), { placeHolder: nls_1.localize('selectVersion', \"Select Version to Install\"), matchOnDetail: true })\n                .then(pick => {\n                if (pick) {\n                    if (this.extension.version === pick.id) {\n                        return Promise.resolve();\n                    }\n                    const promise = pick.latest ? this.extensionsWorkbenchService.install(this.extension) : this.extensionsWorkbenchService.installVersion(this.extension, pick.id);\n                    return promise\n                        .then(null, err => {\n                        if (!this.extension.gallery) {\n                            return this.notificationService.error(err);\n                        }\n                        console.error(err);\n                        return promptDownloadManually(this.extension.gallery, nls_1.localize('failedToInstall', \"Failed to install \\'{0}\\'.\", this.extension.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n                    });\n                }\n                return null;\n            });\n        }\n        getVersionEntries() {\n            return this.extensionGalleryService.getAllVersions(this.extension.gallery, true)\n                .then(allVersions => allVersions.map((v, i) => ({ id: v.version, label: v.version, description: `${getRelativeDateLabel(new Date(Date.parse(v.date)))}${v.version === this.extension.version ? ` (${nls_1.localize('current', \"Current\")})` : ''}`, latest: i === 0 })));\n        }\n    };\n    InstallAnotherVersionAction.ID = 'workbench.extensions.action.install.anotherVersion';\n    InstallAnotherVersionAction.LABEL = nls_1.localize('install another version', \"Install Another Version...\");\n    InstallAnotherVersionAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, extensionManagement_1.IExtensionGalleryService),\n        __param(2, quickInput_1.IQuickInputService),\n        __param(3, instantiation_1.IInstantiationService),\n        __param(4, notification_1.INotificationService),\n        __param(5, opener_1.IOpenerService)\n    ], InstallAnotherVersionAction);\n    exports.InstallAnotherVersionAction = InstallAnotherVersionAction;\n    class ExtensionInfoAction extends ExtensionAction {\n        constructor() {\n            super(ExtensionInfoAction.ID, ExtensionInfoAction.LABEL);\n            this.update();\n        }\n        update() {\n            this.enabled = !!this.extension;\n        }\n        run() {\n            const name = nls_1.localize('extensionInfoName', 'Name: {0}', this.extension.displayName);\n            const id = nls_1.localize('extensionInfoId', 'Id: {0}', this.extension.identifier.id);\n            const description = nls_1.localize('extensionInfoDescription', 'Description: {0}', this.extension.description);\n            const verision = nls_1.localize('extensionInfoVersion', 'Version: {0}', this.extension.version);\n            const publisher = nls_1.localize('extensionInfoPublisher', 'Publisher: {0}', this.extension.publisherDisplayName);\n            const link = this.extension.url ? nls_1.localize('extensionInfoVSMarketplaceLink', 'VS Marketplace Link: {0}', this.extension.url.toString()) : null;\n            const clipboardStr = `${name}\\n${id}\\n${description}\\n${verision}\\n${publisher}${link ? '\\n' + link : ''}`;\n            electron_1.clipboard.writeText(clipboardStr);\n            return Promise.resolve();\n        }\n    }\n    ExtensionInfoAction.ID = 'extensions.extensionInfo';\n    ExtensionInfoAction.LABEL = nls_1.localize('extensionInfoAction', \"Copy Extension Information\");\n    exports.ExtensionInfoAction = ExtensionInfoAction;\n    let EnableForWorkspaceAction = class EnableForWorkspaceAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, extensionEnablementService) {\n            super(EnableForWorkspaceAction.ID, EnableForWorkspaceAction.LABEL);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.update();\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension) {\n                this.enabled = this.extension.state === extensions_1.ExtensionState.Installed && (this.extension.enablementState === extensionManagement_1.EnablementState.Disabled || this.extension.enablementState === extensionManagement_1.EnablementState.WorkspaceDisabled) && !!this.extension.local && this.extensionEnablementService.canChangeEnablement(this.extension.local);\n            }\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extension, extensionManagement_1.EnablementState.WorkspaceEnabled);\n        }\n    };\n    EnableForWorkspaceAction.ID = 'extensions.enableForWorkspace';\n    EnableForWorkspaceAction.LABEL = nls_1.localize('enableForWorkspaceAction', \"Enable (Workspace)\");\n    EnableForWorkspaceAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, extensionManagement_1.IExtensionEnablementService)\n    ], EnableForWorkspaceAction);\n    exports.EnableForWorkspaceAction = EnableForWorkspaceAction;\n    let EnableGloballyAction = class EnableGloballyAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, extensionEnablementService) {\n            super(EnableGloballyAction.ID, EnableGloballyAction.LABEL);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.update();\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension && this.extension.local) {\n                this.enabled = this.extension.state === extensions_1.ExtensionState.Installed && this.extension.enablementState === extensionManagement_1.EnablementState.Disabled && this.extensionEnablementService.canChangeEnablement(this.extension.local);\n            }\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extension, extensionManagement_1.EnablementState.Enabled);\n        }\n    };\n    EnableGloballyAction.ID = 'extensions.enableGlobally';\n    EnableGloballyAction.LABEL = nls_1.localize('enableGloballyAction', \"Enable\");\n    EnableGloballyAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, extensionManagement_1.IExtensionEnablementService)\n    ], EnableGloballyAction);\n    exports.EnableGloballyAction = EnableGloballyAction;\n    let DisableForWorkspaceAction = class DisableForWorkspaceAction extends ExtensionAction {\n        constructor(runningExtensions, workspaceContextService, extensionsWorkbenchService, extensionEnablementService) {\n            super(DisableForWorkspaceAction.ID, DisableForWorkspaceAction.LABEL);\n            this.runningExtensions = runningExtensions;\n            this.workspaceContextService = workspaceContextService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.update();\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension && this.runningExtensions.some(e => extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, this.extension.identifier) && this.workspaceContextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY)) {\n                this.enabled = this.extension.state === extensions_1.ExtensionState.Installed && (this.extension.enablementState === extensionManagement_1.EnablementState.Enabled || this.extension.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled) && !!this.extension.local && this.extensionEnablementService.canChangeEnablement(this.extension.local);\n            }\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extension, extensionManagement_1.EnablementState.WorkspaceDisabled);\n        }\n    };\n    DisableForWorkspaceAction.ID = 'extensions.disableForWorkspace';\n    DisableForWorkspaceAction.LABEL = nls_1.localize('disableForWorkspaceAction', \"Disable (Workspace)\");\n    DisableForWorkspaceAction = __decorate([\n        __param(1, workspace_1.IWorkspaceContextService),\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, extensionManagement_1.IExtensionEnablementService)\n    ], DisableForWorkspaceAction);\n    exports.DisableForWorkspaceAction = DisableForWorkspaceAction;\n    let DisableGloballyAction = class DisableGloballyAction extends ExtensionAction {\n        constructor(runningExtensions, extensionsWorkbenchService, extensionEnablementService) {\n            super(DisableGloballyAction.ID, DisableGloballyAction.LABEL);\n            this.runningExtensions = runningExtensions;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.update();\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension && this.runningExtensions.some(e => extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, this.extension.identifier))) {\n                this.enabled = this.extension.state === extensions_1.ExtensionState.Installed && (this.extension.enablementState === extensionManagement_1.EnablementState.Enabled || this.extension.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled) && !!this.extension.local && this.extensionEnablementService.canChangeEnablement(this.extension.local);\n            }\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extension, extensionManagement_1.EnablementState.Disabled);\n        }\n    };\n    DisableGloballyAction.ID = 'extensions.disableGlobally';\n    DisableGloballyAction.LABEL = nls_1.localize('disableGloballyAction', \"Disable\");\n    DisableGloballyAction = __decorate([\n        __param(1, extensions_1.IExtensionsWorkbenchService),\n        __param(2, extensionManagement_1.IExtensionEnablementService)\n    ], DisableGloballyAction);\n    exports.DisableGloballyAction = DisableGloballyAction;\n    let ExtensionEditorDropDownAction = class ExtensionEditorDropDownAction extends ExtensionDropDownAction {\n        constructor(id, initialLabel, actions, instantiationService) {\n            super(id, initialLabel, ExtensionEditorDropDownAction.DisabledClass, false, false, instantiationService);\n            this.initialLabel = initialLabel;\n            this.actions = actions;\n            this.update();\n        }\n        update() {\n            this.actions.forEach(a => a.extension = this.extension);\n            this.actions.forEach(a => a.update());\n            const enabledActions = this.actions.filter(a => a.enabled);\n            this.enabled = enabledActions.length > 0;\n            if (this.enabled) {\n                if (enabledActions.length === 1) {\n                    this.label = enabledActions[0].label;\n                    this.class = ExtensionEditorDropDownAction.EnabledClass;\n                }\n                else {\n                    this.label = this.initialLabel;\n                    this.class = ExtensionEditorDropDownAction.EnabledDropDownClass;\n                }\n            }\n            else {\n                this.class = ExtensionEditorDropDownAction.DisabledClass;\n            }\n        }\n        run() {\n            const enabledActions = this.actions.filter(a => a.enabled);\n            if (enabledActions.length === 1) {\n                enabledActions[0].run();\n            }\n            else {\n                return super.run({ actionGroups: [this.actions], disposeActionsOnHide: false });\n            }\n            return Promise.resolve();\n        }\n    };\n    ExtensionEditorDropDownAction.EnabledClass = 'extension-action extension-editor-dropdown-action';\n    ExtensionEditorDropDownAction.EnabledDropDownClass = 'extension-action extension-editor-dropdown-action dropdown enable';\n    ExtensionEditorDropDownAction.DisabledClass = `${ExtensionEditorDropDownAction.EnabledClass} disabled`;\n    ExtensionEditorDropDownAction = __decorate([\n        __param(3, instantiation_1.IInstantiationService)\n    ], ExtensionEditorDropDownAction);\n    exports.ExtensionEditorDropDownAction = ExtensionEditorDropDownAction;\n    let EnableDropDownAction = class EnableDropDownAction extends ExtensionEditorDropDownAction {\n        constructor(instantiationService) {\n            super('extensions.enable', nls_1.localize('enableAction', \"Enable\"), [\n                instantiationService.createInstance(EnableGloballyAction),\n                instantiationService.createInstance(EnableForWorkspaceAction)\n            ], instantiationService);\n        }\n    };\n    EnableDropDownAction = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], EnableDropDownAction);\n    exports.EnableDropDownAction = EnableDropDownAction;\n    let DisableDropDownAction = class DisableDropDownAction extends ExtensionEditorDropDownAction {\n        constructor(runningExtensions, instantiationService) {\n            super('extensions.disable', nls_1.localize('disableAction', \"Disable\"), [\n                instantiationService.createInstance(DisableGloballyAction, runningExtensions),\n                instantiationService.createInstance(DisableForWorkspaceAction, runningExtensions)\n            ], instantiationService);\n        }\n    };\n    DisableDropDownAction = __decorate([\n        __param(1, instantiation_1.IInstantiationService)\n    ], DisableDropDownAction);\n    exports.DisableDropDownAction = DisableDropDownAction;\n    let CheckForUpdatesAction = class CheckForUpdatesAction extends actions_1.Action {\n        constructor(id = CheckForUpdatesAction.ID, label = CheckForUpdatesAction.LABEL, extensionsWorkbenchService, viewletService, notificationService) {\n            super(id, label, '', true);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.viewletService = viewletService;\n            this.notificationService = notificationService;\n        }\n        checkUpdatesAndNotify() {\n            this.extensionsWorkbenchService.queryLocal().then(extensions => {\n                const outdatedExtensions = extensions.filter(ext => ext.outdated === true);\n                if (!outdatedExtensions.length) {\n                    this.notificationService.info(nls_1.localize('noUpdatesAvailable', \"All Extensions are up to date.\"));\n                    return;\n                }\n                let msgAvailableExtensions = outdatedExtensions.length === 1 ? nls_1.localize('singleUpdateAvailable', \"An extension update is available.\") : nls_1.localize('updatesAvailable', \"{0} extension updates are available.\", outdatedExtensions.length);\n                const disabledExtensionsCount = outdatedExtensions.filter(ext => ext.enablementState === extensionManagement_1.EnablementState.Disabled || ext.enablementState === extensionManagement_1.EnablementState.WorkspaceDisabled).length;\n                if (disabledExtensionsCount) {\n                    if (outdatedExtensions.length === 1) {\n                        msgAvailableExtensions = nls_1.localize('singleDisabledUpdateAvailable', \"An update to an extension which is disabled is available.\");\n                    }\n                    else if (disabledExtensionsCount === 1) {\n                        msgAvailableExtensions = nls_1.localize('updatesAvailableOneDisabled', \"{0} extension updates are available. One of them is for a disabled extension.\", outdatedExtensions.length);\n                    }\n                    else if (disabledExtensionsCount === outdatedExtensions.length) {\n                        msgAvailableExtensions = nls_1.localize('updatesAvailableAllDisabled', \"{0} extension updates are available. All of them are for disabled extensions.\", outdatedExtensions.length);\n                    }\n                    else {\n                        msgAvailableExtensions = nls_1.localize('updatesAvailableIncludingDisabled', \"{0} extension updates are available. {1} of them are for disabled extensions.\", outdatedExtensions.length, disabledExtensionsCount);\n                    }\n                }\n                this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                    .then(viewlet => viewlet)\n                    .then(viewlet => viewlet.search(''));\n                this.notificationService.info(msgAvailableExtensions);\n            });\n        }\n        run() {\n            return this.extensionsWorkbenchService.checkForUpdates().then(() => this.checkUpdatesAndNotify());\n        }\n    };\n    CheckForUpdatesAction.ID = 'workbench.extensions.action.checkForUpdates';\n    CheckForUpdatesAction.LABEL = nls_1.localize('checkForUpdates', \"Check for Extension Updates\");\n    CheckForUpdatesAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, viewlet_2.IViewletService),\n        __param(4, notification_1.INotificationService)\n    ], CheckForUpdatesAction);\n    exports.CheckForUpdatesAction = CheckForUpdatesAction;\n    let ToggleAutoUpdateAction = class ToggleAutoUpdateAction extends actions_1.Action {\n        constructor(id, label, autoUpdateValue, configurationService) {\n            super(id, label, '', true);\n            this.autoUpdateValue = autoUpdateValue;\n            this.configurationService = configurationService;\n            this.updateEnablement();\n            configurationService.onDidChangeConfiguration(() => this.updateEnablement());\n        }\n        updateEnablement() {\n            this.enabled = this.configurationService.getValue(extensions_1.AutoUpdateConfigurationKey) !== this.autoUpdateValue;\n        }\n        run() {\n            return this.configurationService.updateValue(extensions_1.AutoUpdateConfigurationKey, this.autoUpdateValue);\n        }\n    };\n    ToggleAutoUpdateAction = __decorate([\n        __param(3, configuration_1.IConfigurationService)\n    ], ToggleAutoUpdateAction);\n    exports.ToggleAutoUpdateAction = ToggleAutoUpdateAction;\n    let EnableAutoUpdateAction = class EnableAutoUpdateAction extends ToggleAutoUpdateAction {\n        constructor(id = EnableAutoUpdateAction.ID, label = EnableAutoUpdateAction.LABEL, configurationService) {\n            super(id, label, true, configurationService);\n        }\n    };\n    EnableAutoUpdateAction.ID = 'workbench.extensions.action.enableAutoUpdate';\n    EnableAutoUpdateAction.LABEL = nls_1.localize('enableAutoUpdate', \"Enable Auto Updating Extensions\");\n    EnableAutoUpdateAction = __decorate([\n        __param(2, configuration_1.IConfigurationService)\n    ], EnableAutoUpdateAction);\n    exports.EnableAutoUpdateAction = EnableAutoUpdateAction;\n    let DisableAutoUpdateAction = class DisableAutoUpdateAction extends ToggleAutoUpdateAction {\n        constructor(id = EnableAutoUpdateAction.ID, label = EnableAutoUpdateAction.LABEL, configurationService) {\n            super(id, label, false, configurationService);\n        }\n    };\n    DisableAutoUpdateAction.ID = 'workbench.extensions.action.disableAutoUpdate';\n    DisableAutoUpdateAction.LABEL = nls_1.localize('disableAutoUpdate', \"Disable Auto Updating Extensions\");\n    DisableAutoUpdateAction = __decorate([\n        __param(2, configuration_1.IConfigurationService)\n    ], DisableAutoUpdateAction);\n    exports.DisableAutoUpdateAction = DisableAutoUpdateAction;\n    let UpdateAllAction = class UpdateAllAction extends actions_1.Action {\n        constructor(id = UpdateAllAction.ID, label = UpdateAllAction.LABEL, extensionsWorkbenchService, notificationService, instantiationService, openerService) {\n            super(id, label, '', false);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.notificationService = notificationService;\n            this.instantiationService = instantiationService;\n            this.openerService = openerService;\n            this.disposables = [];\n            this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));\n            this.update();\n        }\n        get outdated() {\n            return this.extensionsWorkbenchService.local.filter(e => e.outdated && e.state !== extensions_1.ExtensionState.Installing);\n        }\n        update() {\n            this.enabled = this.outdated.length > 0;\n        }\n        run() {\n            return Promise.all(this.outdated.map(e => this.install(e)));\n        }\n        install(extension) {\n            return this.extensionsWorkbenchService.install(extension).then(undefined, err => {\n                if (!extension.gallery) {\n                    return this.notificationService.error(err);\n                }\n                console.error(err);\n                return promptDownloadManually(extension.gallery, nls_1.localize('failedToUpdate', \"Failed to update \\'{0}\\'.\", extension.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n            });\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    UpdateAllAction.ID = 'workbench.extensions.action.updateAllExtensions';\n    UpdateAllAction.LABEL = nls_1.localize('updateAll', \"Update All Extensions\");\n    UpdateAllAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, notification_1.INotificationService),\n        __param(4, instantiation_1.IInstantiationService),\n        __param(5, opener_1.IOpenerService)\n    ], UpdateAllAction);\n    exports.UpdateAllAction = UpdateAllAction;\n    let ReloadAction = class ReloadAction extends ExtensionAction {\n        constructor(extensionsWorkbenchService, windowService, extensionService, extensionEnablementService) {\n            super('extensions.reload', nls_1.localize('reloadAction', \"Reload\"), ReloadAction.DisabledClass, false);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.windowService = windowService;\n            this.extensionService = extensionService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.disposables = [];\n            this.throttler = new async_1.Throttler();\n            this.extensionService.onDidChangeExtensions(this.update, this, this.disposables);\n            this.update();\n        }\n        update() {\n            return this.throttler.queue(() => {\n                this.enabled = false;\n                this.tooltip = '';\n                if (!this.extension) {\n                    return Promise.resolve(undefined);\n                }\n                const state = this.extension.state;\n                if (state === extensions_1.ExtensionState.Installing || state === extensions_1.ExtensionState.Uninstalling) {\n                    return Promise.resolve(undefined);\n                }\n                const installed = this.extensionsWorkbenchService.local.filter(e => extensionManagementUtil_1.areSameExtensions(e.identifier, this.extension.identifier))[0];\n                const local = this.extension.local || (installed && installed.local);\n                if (local && local.manifest && local.manifest.contributes && local.manifest.contributes.localizations && local.manifest.contributes.localizations.length > 0) {\n                    return Promise.resolve(undefined);\n                }\n                return this.extensionService.getExtensions()\n                    .then(runningExtensions => this.computeReloadState(runningExtensions, installed));\n            }).then(() => {\n                this.class = this.enabled ? ReloadAction.EnabledClass : ReloadAction.DisabledClass;\n            });\n        }\n        computeReloadState(runningExtensions, installed) {\n            const isUninstalled = this.extension.state === extensions_1.ExtensionState.Uninstalled;\n            const isDisabled = this.extension.local ? !this.extensionEnablementService.isEnabled(this.extension.local) : false;\n            const isEnabled = this.extension.local ? this.extensionEnablementService.isEnabled(this.extension.local) : false;\n            const runningExtension = runningExtensions.filter(e => extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, this.extension.identifier))[0];\n            if (installed && installed.local) {\n                if (runningExtension) {\n                    const isDifferentVersionRunning = this.extension.version !== runningExtension.version;\n                    if (isDifferentVersionRunning && !isDisabled) {\n                        if (!(this.extension.local && this.extensionService.canAddExtension(toExtensionDescription(this.extension.local)))) {\n                            // Requires reload to run the updated extension\n                            this.enabled = true;\n                            this.label = nls_1.localize('reloadRequired', \"Reload Required\");\n                            this.tooltip = nls_1.localize('postUpdateTooltip', \"Please reload Visual Studio Code to complete the updating of this extension.\");\n                        }\n                        return;\n                    }\n                    if (isDisabled) {\n                        // Requires reload to disable the extension\n                        this.enabled = true;\n                        this.label = nls_1.localize('reloadRequired', \"Reload Required\");\n                        this.tooltip = nls_1.localize('postDisableTooltip', \"Please reload Visual Studio Code to complete the disabling of this extension.\");\n                        return;\n                    }\n                }\n                else {\n                    if (!isDisabled && !(this.extension.local && this.extensionService.canAddExtension(toExtensionDescription(this.extension.local)))) {\n                        this.enabled = true;\n                        if (isEnabled) {\n                            this.label = nls_1.localize('reloadRequired', \"Reload Required\");\n                            this.tooltip = nls_1.localize('postEnableTooltip', \"Please reload Visual Studio Code to complete the enabling of this extension.\");\n                        }\n                        else {\n                            this.label = nls_1.localize('reloadRequired', \"Reload Required\");\n                            this.tooltip = nls_1.localize('postInstallTooltip', \"Please reload Visual Studio Code to complete the installation of this extension.\");\n                            aria_1.alert(nls_1.localize('installExtensionComplete', \"Installing extension {0} is completed. Please reload Visual Studio Code to enable it.\", this.extension.displayName));\n                        }\n                    }\n                }\n                return;\n            }\n            if (isUninstalled && runningExtension) {\n                // Requires reload to deactivate the extension\n                this.enabled = true;\n                this.label = nls_1.localize('reloadRequired', \"Reload Required\");\n                this.tooltip = nls_1.localize('postUninstallTooltip', \"Please reload Visual Studio Code to complete the uninstallation of this extension.\");\n                aria_1.alert(nls_1.localize('uninstallExtensionComplete', \"Please reload Visual Studio Code to complete the uninstallation of the extension {0}.\", this.extension.displayName));\n                return;\n            }\n        }\n        run() {\n            return Promise.resolve(this.windowService.reloadWindow());\n        }\n        dispose() {\n            lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ReloadAction.EnabledClass = 'extension-action reload';\n    ReloadAction.DisabledClass = `${ReloadAction.EnabledClass} disabled`;\n    ReloadAction = __decorate([\n        __param(0, extensions_1.IExtensionsWorkbenchService),\n        __param(1, windows_1.IWindowService),\n        __param(2, extensions_3.IExtensionService),\n        __param(3, extensionManagement_1.IExtensionEnablementService)\n    ], ReloadAction);\n    exports.ReloadAction = ReloadAction;\n    let SetColorThemeAction = class SetColorThemeAction extends ExtensionAction {\n        constructor(colorThemes, extensionService, workbenchThemeService, quickInputService, configurationService) {\n            super(`extensions.colorTheme`, nls_1.localize('color theme', \"Set Color Theme\"), SetColorThemeAction.DisabledClass, false);\n            this.colorThemes = colorThemes;\n            this.workbenchThemeService = workbenchThemeService;\n            this.quickInputService = quickInputService;\n            this.configurationService = configurationService;\n            this.disposables = [];\n            event_1.Event.any(extensionService.onDidChangeExtensions, workbenchThemeService.onDidColorThemeChange)(() => this.update(), this, this.disposables);\n            this.update();\n        }\n        static getColorThemes(colorThemes, extension) {\n            return colorThemes.filter(c => c.extensionData && extensions_2.ExtensionIdentifier.equals(c.extensionData.extensionId, extension.identifier.id));\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension) {\n                const isInstalled = this.extension.state === extensions_1.ExtensionState.Installed;\n                if (isInstalled) {\n                    const extensionThemes = SetColorThemeAction.getColorThemes(this.colorThemes, this.extension);\n                    this.enabled = extensionThemes.length > 0;\n                }\n            }\n            this.class = this.enabled ? SetColorThemeAction.EnabledClass : SetColorThemeAction.DisabledClass;\n        }\n        run({ showCurrentTheme, ignoreFocusLost } = { showCurrentTheme: false, ignoreFocusLost: false }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.update();\n                if (!this.enabled) {\n                    return;\n                }\n                let extensionThemes = SetColorThemeAction.getColorThemes(this.colorThemes, this.extension);\n                const currentTheme = this.colorThemes.filter(t => t.settingsId === this.configurationService.getValue(workbenchThemeService_1.COLOR_THEME_SETTING))[0];\n                showCurrentTheme = showCurrentTheme || extensionThemes.some(t => t.id === currentTheme.id);\n                if (showCurrentTheme) {\n                    extensionThemes = extensionThemes.filter(t => t.id !== currentTheme.id);\n                }\n                const delayer = new async_1.Delayer(100);\n                const picks = [];\n                picks.push(...extensionThemes.map(theme => ({ label: theme.label, id: theme.id })));\n                if (showCurrentTheme) {\n                    picks.push({ type: 'separator', label: nls_1.localize('current', \"Current\") });\n                    picks.push({ label: currentTheme.label, id: currentTheme.id });\n                }\n                const pickedTheme = yield this.quickInputService.pick(picks, {\n                    placeHolder: nls_1.localize('select color theme', \"Select Color Theme\"),\n                    onDidFocus: item => delayer.trigger(() => this.workbenchThemeService.setColorTheme(item.id, undefined)),\n                    ignoreFocusLost\n                });\n                let confValue = this.configurationService.inspect(workbenchThemeService_1.COLOR_THEME_SETTING);\n                const target = typeof confValue.workspace !== 'undefined' ? configuration_1.ConfigurationTarget.WORKSPACE : configuration_1.ConfigurationTarget.USER;\n                return this.workbenchThemeService.setColorTheme(pickedTheme ? pickedTheme.id : currentTheme.id, target);\n            });\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    SetColorThemeAction.EnabledClass = 'extension-action theme';\n    SetColorThemeAction.DisabledClass = `${SetColorThemeAction.EnabledClass} disabled`;\n    SetColorThemeAction = __decorate([\n        __param(1, extensions_3.IExtensionService),\n        __param(2, workbenchThemeService_1.IWorkbenchThemeService),\n        __param(3, quickInput_1.IQuickInputService),\n        __param(4, configuration_1.IConfigurationService)\n    ], SetColorThemeAction);\n    exports.SetColorThemeAction = SetColorThemeAction;\n    let SetFileIconThemeAction = class SetFileIconThemeAction extends ExtensionAction {\n        constructor(fileIconThemes, extensionService, workbenchThemeService, quickInputService, configurationService) {\n            super(`extensions.fileIconTheme`, nls_1.localize('file icon theme', \"Set File Icon Theme\"), SetFileIconThemeAction.DisabledClass, false);\n            this.fileIconThemes = fileIconThemes;\n            this.workbenchThemeService = workbenchThemeService;\n            this.quickInputService = quickInputService;\n            this.configurationService = configurationService;\n            this.disposables = [];\n            event_1.Event.any(extensionService.onDidChangeExtensions, workbenchThemeService.onDidFileIconThemeChange)(() => this.update(), this, this.disposables);\n            this.update();\n        }\n        static getFileIconThemes(fileIconThemes, extension) {\n            return fileIconThemes.filter(c => c.extensionData && extensions_2.ExtensionIdentifier.equals(c.extensionData.extensionId, extension.identifier.id));\n        }\n        update() {\n            this.enabled = false;\n            if (this.extension) {\n                const isInstalled = this.extension.state === extensions_1.ExtensionState.Installed;\n                if (isInstalled) {\n                    const extensionThemes = SetFileIconThemeAction.getFileIconThemes(this.fileIconThemes, this.extension);\n                    this.enabled = extensionThemes.length > 0;\n                }\n            }\n            this.class = this.enabled ? SetFileIconThemeAction.EnabledClass : SetFileIconThemeAction.DisabledClass;\n        }\n        run({ showCurrentTheme, ignoreFocusLost } = { showCurrentTheme: false, ignoreFocusLost: false }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this.update();\n                if (!this.enabled) {\n                    return;\n                }\n                let extensionThemes = SetFileIconThemeAction.getFileIconThemes(this.fileIconThemes, this.extension);\n                const currentTheme = this.fileIconThemes.filter(t => t.settingsId === this.configurationService.getValue(workbenchThemeService_1.ICON_THEME_SETTING))[0] || this.workbenchThemeService.getFileIconTheme();\n                showCurrentTheme = showCurrentTheme || extensionThemes.some(t => t.id === currentTheme.id);\n                if (showCurrentTheme) {\n                    extensionThemes = extensionThemes.filter(t => t.id !== currentTheme.id);\n                }\n                const delayer = new async_1.Delayer(100);\n                const picks = [];\n                picks.push(...extensionThemes.map(theme => ({ label: theme.label, id: theme.id })));\n                if (showCurrentTheme && currentTheme.label) {\n                    picks.push({ type: 'separator', label: nls_1.localize('current', \"Current\") });\n                    picks.push({ label: currentTheme.label, id: currentTheme.id });\n                }\n                const pickedTheme = yield this.quickInputService.pick(picks, {\n                    placeHolder: nls_1.localize('select file icon theme', \"Select File Icon Theme\"),\n                    onDidFocus: item => delayer.trigger(() => this.workbenchThemeService.setFileIconTheme(item.id, undefined)),\n                    ignoreFocusLost\n                });\n                let confValue = this.configurationService.inspect(workbenchThemeService_1.ICON_THEME_SETTING);\n                const target = typeof confValue.workspace !== 'undefined' ? configuration_1.ConfigurationTarget.WORKSPACE : configuration_1.ConfigurationTarget.USER;\n                return this.workbenchThemeService.setFileIconTheme(pickedTheme ? pickedTheme.id : currentTheme.id, target);\n            });\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    SetFileIconThemeAction.EnabledClass = 'extension-action theme';\n    SetFileIconThemeAction.DisabledClass = `${SetFileIconThemeAction.EnabledClass} disabled`;\n    SetFileIconThemeAction = __decorate([\n        __param(1, extensions_3.IExtensionService),\n        __param(2, workbenchThemeService_1.IWorkbenchThemeService),\n        __param(3, quickInput_1.IQuickInputService),\n        __param(4, configuration_1.IConfigurationService)\n    ], SetFileIconThemeAction);\n    exports.SetFileIconThemeAction = SetFileIconThemeAction;\n    let OpenExtensionsViewletAction = class OpenExtensionsViewletAction extends viewlet_1.ShowViewletAction {\n        constructor(id, label, viewletService, editorGroupService, layoutService) {\n            super(id, label, extensions_1.VIEWLET_ID, viewletService, editorGroupService, layoutService);\n        }\n    };\n    OpenExtensionsViewletAction.ID = extensions_1.VIEWLET_ID;\n    OpenExtensionsViewletAction.LABEL = nls_1.localize('toggleExtensionsViewlet', \"Show Extensions\");\n    OpenExtensionsViewletAction = __decorate([\n        __param(2, viewlet_2.IViewletService),\n        __param(3, editorGroupsService_1.IEditorGroupsService),\n        __param(4, layoutService_1.IWorkbenchLayoutService)\n    ], OpenExtensionsViewletAction);\n    exports.OpenExtensionsViewletAction = OpenExtensionsViewletAction;\n    class InstallExtensionsAction extends OpenExtensionsViewletAction {\n    }\n    InstallExtensionsAction.ID = 'workbench.extensions.action.installExtensions';\n    InstallExtensionsAction.LABEL = nls_1.localize('installExtensions', \"Install Extensions\");\n    exports.InstallExtensionsAction = InstallExtensionsAction;\n    let ShowEnabledExtensionsAction = class ShowEnabledExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@enabled ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowEnabledExtensionsAction.ID = 'workbench.extensions.action.showEnabledExtensions';\n    ShowEnabledExtensionsAction.LABEL = nls_1.localize('showEnabledExtensions', 'Show Enabled Extensions');\n    ShowEnabledExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowEnabledExtensionsAction);\n    exports.ShowEnabledExtensionsAction = ShowEnabledExtensionsAction;\n    let ShowInstalledExtensionsAction = class ShowInstalledExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@installed ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowInstalledExtensionsAction.ID = 'workbench.extensions.action.showInstalledExtensions';\n    ShowInstalledExtensionsAction.LABEL = nls_1.localize('showInstalledExtensions', \"Show Installed Extensions\");\n    ShowInstalledExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowInstalledExtensionsAction);\n    exports.ShowInstalledExtensionsAction = ShowInstalledExtensionsAction;\n    let ShowDisabledExtensionsAction = class ShowDisabledExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, 'null', true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@disabled ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowDisabledExtensionsAction.ID = 'workbench.extensions.action.showDisabledExtensions';\n    ShowDisabledExtensionsAction.LABEL = nls_1.localize('showDisabledExtensions', \"Show Disabled Extensions\");\n    ShowDisabledExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowDisabledExtensionsAction);\n    exports.ShowDisabledExtensionsAction = ShowDisabledExtensionsAction;\n    let ClearExtensionsInputAction = class ClearExtensionsInputAction extends actions_1.Action {\n        constructor(id, label, onSearchChange, viewletService) {\n            super(id, label, 'clear-extensions', true);\n            this.viewletService = viewletService;\n            this.disposables = [];\n            this.enabled = false;\n            onSearchChange(this.onSearchChange, this, this.disposables);\n        }\n        onSearchChange(value) {\n            this.enabled = !!value;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('');\n                viewlet.focus();\n            });\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    ClearExtensionsInputAction.ID = 'workbench.extensions.action.clearExtensionsInput';\n    ClearExtensionsInputAction.LABEL = nls_1.localize('clearExtensionsInput', \"Clear Extensions Input\");\n    ClearExtensionsInputAction = __decorate([\n        __param(3, viewlet_2.IViewletService)\n    ], ClearExtensionsInputAction);\n    exports.ClearExtensionsInputAction = ClearExtensionsInputAction;\n    let ShowBuiltInExtensionsAction = class ShowBuiltInExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@builtin ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowBuiltInExtensionsAction.ID = 'workbench.extensions.action.listBuiltInExtensions';\n    ShowBuiltInExtensionsAction.LABEL = nls_1.localize('showBuiltInExtensions', \"Show Built-in Extensions\");\n    ShowBuiltInExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowBuiltInExtensionsAction);\n    exports.ShowBuiltInExtensionsAction = ShowBuiltInExtensionsAction;\n    let ShowOutdatedExtensionsAction = class ShowOutdatedExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@outdated ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowOutdatedExtensionsAction.ID = 'workbench.extensions.action.listOutdatedExtensions';\n    ShowOutdatedExtensionsAction.LABEL = nls_1.localize('showOutdatedExtensions', \"Show Outdated Extensions\");\n    ShowOutdatedExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowOutdatedExtensionsAction);\n    exports.ShowOutdatedExtensionsAction = ShowOutdatedExtensionsAction;\n    let ShowPopularExtensionsAction = class ShowPopularExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@sort:installs ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowPopularExtensionsAction.ID = 'workbench.extensions.action.showPopularExtensions';\n    ShowPopularExtensionsAction.LABEL = nls_1.localize('showPopularExtensions', \"Show Popular Extensions\");\n    ShowPopularExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowPopularExtensionsAction);\n    exports.ShowPopularExtensionsAction = ShowPopularExtensionsAction;\n    let ShowRecommendedExtensionsAction = class ShowRecommendedExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@recommended ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowRecommendedExtensionsAction.ID = 'workbench.extensions.action.showRecommendedExtensions';\n    ShowRecommendedExtensionsAction.LABEL = nls_1.localize('showRecommendedExtensions', \"Show Recommended Extensions\");\n    ShowRecommendedExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowRecommendedExtensionsAction);\n    exports.ShowRecommendedExtensionsAction = ShowRecommendedExtensionsAction;\n    let InstallWorkspaceRecommendedExtensionsAction = class InstallWorkspaceRecommendedExtensionsAction extends actions_1.Action {\n        constructor(id = InstallWorkspaceRecommendedExtensionsAction.ID, label = InstallWorkspaceRecommendedExtensionsAction.LABEL, recommendations, viewletService, notificationService, instantiationService, openerService, extensionWorkbenchService) {\n            super(id, label, 'extension-action');\n            this.viewletService = viewletService;\n            this.notificationService = notificationService;\n            this.instantiationService = instantiationService;\n            this.openerService = openerService;\n            this.extensionWorkbenchService = extensionWorkbenchService;\n            this._recommendations = [];\n            this.recommendations = recommendations;\n        }\n        get recommendations() { return this._recommendations; }\n        set recommendations(recommendations) { this._recommendations = recommendations; this.enabled = this._recommendations.length > 0; }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@recommended ');\n                viewlet.focus();\n                const names = this.recommendations.map(({ extensionId }) => extensionId);\n                return this.extensionWorkbenchService.queryGallery({ names, source: 'install-all-workspace-recommendations' }, cancellation_1.CancellationToken.None).then(pager => {\n                    let installPromises = [];\n                    let model = new paging_1.PagedModel(pager);\n                    for (let i = 0; i < pager.total; i++) {\n                        installPromises.push(model.resolve(i, cancellation_1.CancellationToken.None).then(e => {\n                            return this.extensionWorkbenchService.install(e).then(undefined, err => {\n                                console.error(err);\n                                return promptDownloadManually(e.gallery, nls_1.localize('failedToInstall', \"Failed to install \\'{0}\\'.\", e.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n                            });\n                        }));\n                    }\n                    return Promise.all(installPromises);\n                });\n            });\n        }\n    };\n    InstallWorkspaceRecommendedExtensionsAction.ID = 'workbench.extensions.action.installWorkspaceRecommendedExtensions';\n    InstallWorkspaceRecommendedExtensionsAction.LABEL = nls_1.localize('installWorkspaceRecommendedExtensions', \"Install All Workspace Recommended Extensions\");\n    InstallWorkspaceRecommendedExtensionsAction = __decorate([\n        __param(3, viewlet_2.IViewletService),\n        __param(4, notification_1.INotificationService),\n        __param(5, instantiation_1.IInstantiationService),\n        __param(6, opener_1.IOpenerService),\n        __param(7, extensions_1.IExtensionsWorkbenchService)\n    ], InstallWorkspaceRecommendedExtensionsAction);\n    exports.InstallWorkspaceRecommendedExtensionsAction = InstallWorkspaceRecommendedExtensionsAction;\n    let InstallRecommendedExtensionAction = class InstallRecommendedExtensionAction extends actions_1.Action {\n        constructor(extensionId, viewletService, notificationService, instantiationService, openerService, extensionWorkbenchService) {\n            super(InstallRecommendedExtensionAction.ID, InstallRecommendedExtensionAction.LABEL, undefined, false);\n            this.viewletService = viewletService;\n            this.notificationService = notificationService;\n            this.instantiationService = instantiationService;\n            this.openerService = openerService;\n            this.extensionWorkbenchService = extensionWorkbenchService;\n            this.extensionId = extensionId;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@recommended ');\n                viewlet.focus();\n                return this.extensionWorkbenchService.queryGallery({ names: [this.extensionId], source: 'install-recommendation', pageSize: 1 }, cancellation_1.CancellationToken.None)\n                    .then(pager => {\n                    if (pager && pager.firstPage && pager.firstPage.length) {\n                        const extension = pager.firstPage[0];\n                        return this.extensionWorkbenchService.install(extension)\n                            .then(() => null, err => {\n                            console.error(err);\n                            return promptDownloadManually(extension.gallery, nls_1.localize('failedToInstall', \"Failed to install \\'{0}\\'.\", extension.identifier.id), err, this.instantiationService, this.notificationService, this.openerService);\n                        });\n                    }\n                    return null;\n                });\n            });\n        }\n    };\n    InstallRecommendedExtensionAction.ID = 'workbench.extensions.action.installRecommendedExtension';\n    InstallRecommendedExtensionAction.LABEL = nls_1.localize('installRecommendedExtension', \"Install Recommended Extension\");\n    InstallRecommendedExtensionAction = __decorate([\n        __param(1, viewlet_2.IViewletService),\n        __param(2, notification_1.INotificationService),\n        __param(3, instantiation_1.IInstantiationService),\n        __param(4, opener_1.IOpenerService),\n        __param(5, extensions_1.IExtensionsWorkbenchService)\n    ], InstallRecommendedExtensionAction);\n    exports.InstallRecommendedExtensionAction = InstallRecommendedExtensionAction;\n    let IgnoreExtensionRecommendationAction = class IgnoreExtensionRecommendationAction extends actions_1.Action {\n        constructor(extensionsTipsService) {\n            super(IgnoreExtensionRecommendationAction.ID, 'Ignore Recommendation');\n            this.extensionsTipsService = extensionsTipsService;\n            this.disposables = [];\n            this.class = IgnoreExtensionRecommendationAction.Class;\n            this.tooltip = nls_1.localize('ignoreExtensionRecommendation', \"Do not recommend this extension again\");\n            this.enabled = true;\n        }\n        run() {\n            this.extensionsTipsService.toggleIgnoredRecommendation(this.extension.identifier.id, true);\n            return Promise.resolve();\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    IgnoreExtensionRecommendationAction.ID = 'extensions.ignore';\n    IgnoreExtensionRecommendationAction.Class = 'extension-action ignore';\n    IgnoreExtensionRecommendationAction = __decorate([\n        __param(0, extensionManagement_1.IExtensionTipsService)\n    ], IgnoreExtensionRecommendationAction);\n    exports.IgnoreExtensionRecommendationAction = IgnoreExtensionRecommendationAction;\n    let UndoIgnoreExtensionRecommendationAction = class UndoIgnoreExtensionRecommendationAction extends actions_1.Action {\n        constructor(extensionsTipsService) {\n            super(UndoIgnoreExtensionRecommendationAction.ID, 'Undo');\n            this.extensionsTipsService = extensionsTipsService;\n            this.disposables = [];\n            this.class = UndoIgnoreExtensionRecommendationAction.Class;\n            this.tooltip = nls_1.localize('undo', \"Undo\");\n            this.enabled = true;\n        }\n        run() {\n            this.extensionsTipsService.toggleIgnoredRecommendation(this.extension.identifier.id, false);\n            return Promise.resolve();\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    UndoIgnoreExtensionRecommendationAction.ID = 'extensions.ignore';\n    UndoIgnoreExtensionRecommendationAction.Class = 'extension-action undo-ignore';\n    UndoIgnoreExtensionRecommendationAction = __decorate([\n        __param(0, extensionManagement_1.IExtensionTipsService)\n    ], UndoIgnoreExtensionRecommendationAction);\n    exports.UndoIgnoreExtensionRecommendationAction = UndoIgnoreExtensionRecommendationAction;\n    let ShowRecommendedKeymapExtensionsAction = class ShowRecommendedKeymapExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@recommended:keymaps ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowRecommendedKeymapExtensionsAction.ID = 'workbench.extensions.action.showRecommendedKeymapExtensions';\n    ShowRecommendedKeymapExtensionsAction.SHORT_LABEL = nls_1.localize('showRecommendedKeymapExtensionsShort', \"Keymaps\");\n    ShowRecommendedKeymapExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowRecommendedKeymapExtensionsAction);\n    exports.ShowRecommendedKeymapExtensionsAction = ShowRecommendedKeymapExtensionsAction;\n    let ShowLanguageExtensionsAction = class ShowLanguageExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@category:\"programming languages\" @sort:installs ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowLanguageExtensionsAction.ID = 'workbench.extensions.action.showLanguageExtensions';\n    ShowLanguageExtensionsAction.SHORT_LABEL = nls_1.localize('showLanguageExtensionsShort', \"Language Extensions\");\n    ShowLanguageExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowLanguageExtensionsAction);\n    exports.ShowLanguageExtensionsAction = ShowLanguageExtensionsAction;\n    let ShowAzureExtensionsAction = class ShowAzureExtensionsAction extends actions_1.Action {\n        constructor(id, label, viewletService) {\n            super(id, label, undefined, true);\n            this.viewletService = viewletService;\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search('@sort:installs azure ');\n                viewlet.focus();\n            });\n        }\n    };\n    ShowAzureExtensionsAction.ID = 'workbench.extensions.action.showAzureExtensions';\n    ShowAzureExtensionsAction.SHORT_LABEL = nls_1.localize('showAzureExtensionsShort', \"Azure Extensions\");\n    ShowAzureExtensionsAction = __decorate([\n        __param(2, viewlet_2.IViewletService)\n    ], ShowAzureExtensionsAction);\n    exports.ShowAzureExtensionsAction = ShowAzureExtensionsAction;\n    let ChangeSortAction = class ChangeSortAction extends actions_1.Action {\n        constructor(id, label, onSearchChange, sortBy, viewletService) {\n            super(id, label, undefined, true);\n            this.sortBy = sortBy;\n            this.viewletService = viewletService;\n            this.disposables = [];\n            if (sortBy === undefined) {\n                throw new Error('bad arguments');\n            }\n            this.query = extensionQuery_1.Query.parse('');\n            this.enabled = false;\n            onSearchChange(this.onSearchChange, this, this.disposables);\n        }\n        onSearchChange(value) {\n            const query = extensionQuery_1.Query.parse(value);\n            this.query = new extensionQuery_1.Query(query.value, this.sortBy || query.sortBy, query.groupBy);\n            this.enabled = !!value && this.query.isValid() && !this.query.equals(query);\n        }\n        run() {\n            return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(viewlet => viewlet)\n                .then(viewlet => {\n                viewlet.search(this.query.toString());\n                viewlet.focus();\n            });\n        }\n    };\n    ChangeSortAction = __decorate([\n        __param(4, viewlet_2.IViewletService)\n    ], ChangeSortAction);\n    exports.ChangeSortAction = ChangeSortAction;\n    let ConfigureRecommendedExtensionsCommandsContributor = class ConfigureRecommendedExtensionsCommandsContributor extends lifecycle_1.Disposable {\n        constructor(contextKeyService, workspaceContextService, editorService) {\n            super();\n            this.workspaceContextKey = new contextkey_1.RawContextKey('workspaceRecommendations', true);\n            this.workspaceFolderContextKey = new contextkey_1.RawContextKey('workspaceFolderRecommendations', true);\n            this.addToWorkspaceRecommendationsContextKey = new contextkey_1.RawContextKey('addToWorkspaceRecommendations', false);\n            this.addToWorkspaceFolderRecommendationsContextKey = new contextkey_1.RawContextKey('addToWorkspaceFolderRecommendations', false);\n            const boundWorkspaceContextKey = this.workspaceContextKey.bindTo(contextKeyService);\n            boundWorkspaceContextKey.set(workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE);\n            this._register(workspaceContextService.onDidChangeWorkbenchState(() => boundWorkspaceContextKey.set(workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE)));\n            const boundWorkspaceFolderContextKey = this.workspaceFolderContextKey.bindTo(contextKeyService);\n            boundWorkspaceFolderContextKey.set(workspaceContextService.getWorkspace().folders.length > 0);\n            this._register(workspaceContextService.onDidChangeWorkspaceFolders(() => boundWorkspaceFolderContextKey.set(workspaceContextService.getWorkspace().folders.length > 0)));\n            const boundAddToWorkspaceRecommendationsContextKey = this.addToWorkspaceRecommendationsContextKey.bindTo(contextKeyService);\n            boundAddToWorkspaceRecommendationsContextKey.set(editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput && workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE);\n            this._register(editorService.onDidActiveEditorChange(() => boundAddToWorkspaceRecommendationsContextKey.set(editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput && workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE)));\n            this._register(workspaceContextService.onDidChangeWorkbenchState(() => boundAddToWorkspaceRecommendationsContextKey.set(editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput && workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE)));\n            const boundAddToWorkspaceFolderRecommendationsContextKey = this.addToWorkspaceFolderRecommendationsContextKey.bindTo(contextKeyService);\n            boundAddToWorkspaceFolderRecommendationsContextKey.set(editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput);\n            this._register(editorService.onDidActiveEditorChange(() => boundAddToWorkspaceFolderRecommendationsContextKey.set(editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput)));\n            this.registerCommands();\n        }\n        registerCommands() {\n            commands_1.CommandsRegistry.registerCommand(ConfigureWorkspaceRecommendedExtensionsAction.ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(ConfigureWorkspaceRecommendedExtensionsAction, ConfigureWorkspaceRecommendedExtensionsAction.ID, ConfigureWorkspaceRecommendedExtensionsAction.LABEL).run();\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: ConfigureWorkspaceRecommendedExtensionsAction.ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${ConfigureWorkspaceRecommendedExtensionsAction.LABEL}`, original: 'Extensions: Configure Recommended Extensions (Workspace)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.workspaceContextKey\n            });\n            commands_1.CommandsRegistry.registerCommand(ConfigureWorkspaceFolderRecommendedExtensionsAction.ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(ConfigureWorkspaceFolderRecommendedExtensionsAction, ConfigureWorkspaceFolderRecommendedExtensionsAction.ID, ConfigureWorkspaceFolderRecommendedExtensionsAction.LABEL).run();\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: ConfigureWorkspaceFolderRecommendedExtensionsAction.ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${ConfigureWorkspaceFolderRecommendedExtensionsAction.LABEL}`, original: 'Extensions: Configure Recommended Extensions (Workspace Folder)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.workspaceFolderContextKey\n            });\n            commands_1.CommandsRegistry.registerCommand(AddToWorkspaceRecommendationsAction.ADD_ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService)\n                    .createInstance(AddToWorkspaceRecommendationsAction, AddToWorkspaceRecommendationsAction.ADD_ID, AddToWorkspaceRecommendationsAction.ADD_LABEL)\n                    .run(AddToWorkspaceRecommendationsAction.ADD);\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: AddToWorkspaceRecommendationsAction.ADD_ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${AddToWorkspaceRecommendationsAction.ADD_LABEL}`, original: 'Extensions: Add to Recommended Extensions (Workspace)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.addToWorkspaceRecommendationsContextKey\n            });\n            commands_1.CommandsRegistry.registerCommand(AddToWorkspaceFolderRecommendationsAction.ADD_ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService)\n                    .createInstance(AddToWorkspaceFolderRecommendationsAction, AddToWorkspaceFolderRecommendationsAction.ADD_ID, AddToWorkspaceFolderRecommendationsAction.ADD_LABEL)\n                    .run(AddToWorkspaceRecommendationsAction.ADD);\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: AddToWorkspaceFolderRecommendationsAction.ADD_ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${AddToWorkspaceFolderRecommendationsAction.ADD_LABEL}`, original: 'Extensions: Add to Recommended Extensions (Workspace Folder)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.addToWorkspaceFolderRecommendationsContextKey\n            });\n            commands_1.CommandsRegistry.registerCommand(AddToWorkspaceRecommendationsAction.IGNORE_ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService)\n                    .createInstance(AddToWorkspaceRecommendationsAction, AddToWorkspaceRecommendationsAction.IGNORE_ID, AddToWorkspaceRecommendationsAction.IGNORE_LABEL)\n                    .run(AddToWorkspaceRecommendationsAction.IGNORE);\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: AddToWorkspaceRecommendationsAction.IGNORE_ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${AddToWorkspaceRecommendationsAction.IGNORE_LABEL}`, original: 'Extensions: Ignore Recommended Extension (Workspace)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.addToWorkspaceRecommendationsContextKey\n            });\n            commands_1.CommandsRegistry.registerCommand(AddToWorkspaceFolderRecommendationsAction.IGNORE_ID, serviceAccessor => {\n                serviceAccessor.get(instantiation_1.IInstantiationService)\n                    .createInstance(AddToWorkspaceFolderRecommendationsAction, AddToWorkspaceFolderRecommendationsAction.IGNORE_ID, AddToWorkspaceFolderRecommendationsAction.IGNORE_LABEL)\n                    .run(AddToWorkspaceRecommendationsAction.IGNORE);\n            });\n            actions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.CommandPalette, {\n                command: {\n                    id: AddToWorkspaceFolderRecommendationsAction.IGNORE_ID,\n                    title: { value: `${extensionManagement_1.ExtensionsLabel}: ${AddToWorkspaceFolderRecommendationsAction.IGNORE_LABEL}`, original: 'Extensions: Ignore Recommended Extension (Workspace Folder)' },\n                    category: nls_1.localize('extensions', \"Extensions\")\n                },\n                when: this.addToWorkspaceFolderRecommendationsContextKey\n            });\n        }\n    };\n    ConfigureRecommendedExtensionsCommandsContributor = __decorate([\n        __param(0, contextkey_1.IContextKeyService),\n        __param(1, workspace_1.IWorkspaceContextService),\n        __param(2, editorService_1.IEditorService)\n    ], ConfigureRecommendedExtensionsCommandsContributor);\n    exports.ConfigureRecommendedExtensionsCommandsContributor = ConfigureRecommendedExtensionsCommandsContributor;\n    let AbstractConfigureRecommendedExtensionsAction = class AbstractConfigureRecommendedExtensionsAction extends actions_1.Action {\n        constructor(id, label, contextService, fileService, editorService, jsonEditingService, textModelResolverService) {\n            super(id, label);\n            this.contextService = contextService;\n            this.fileService = fileService;\n            this.editorService = editorService;\n            this.jsonEditingService = jsonEditingService;\n            this.textModelResolverService = textModelResolverService;\n        }\n        openExtensionsFile(extensionsFileResource) {\n            return this.getOrCreateExtensionsFile(extensionsFileResource)\n                .then(({ created, content }) => this.getSelectionPosition(content, extensionsFileResource, ['recommendations'])\n                .then(selection => this.editorService.openEditor({\n                resource: extensionsFileResource,\n                options: {\n                    pinned: created,\n                    selection\n                }\n            })), error => Promise.reject(new Error(nls_1.localize('OpenExtensionsFile.failed', \"Unable to create 'extensions.json' file inside the '.vscode' folder ({0}).\", error))));\n        }\n        openWorkspaceConfigurationFile(workspaceConfigurationFile) {\n            return this.getOrUpdateWorkspaceConfigurationFile(workspaceConfigurationFile)\n                .then(content => this.getSelectionPosition(content.value, content.resource, ['extensions', 'recommendations']))\n                .then(selection => this.editorService.openEditor({\n                resource: workspaceConfigurationFile,\n                options: {\n                    selection,\n                    forceReload: true // because content has changed\n                }\n            }));\n        }\n        addExtensionToWorkspaceConfig(workspaceConfigurationFile, extensionId, shouldRecommend) {\n            return this.getOrUpdateWorkspaceConfigurationFile(workspaceConfigurationFile)\n                .then(content => {\n                const extensionIdLowerCase = extensionId.toLowerCase();\n                const workspaceExtensionsConfigContent = (json.parse(content.value) || {})['extensions'] || {};\n                let insertInto = shouldRecommend ? workspaceExtensionsConfigContent.recommendations || [] : workspaceExtensionsConfigContent.unwantedRecommendations || [];\n                let removeFrom = shouldRecommend ? workspaceExtensionsConfigContent.unwantedRecommendations || [] : workspaceExtensionsConfigContent.recommendations || [];\n                if (insertInto.some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                    return Promise.resolve(null);\n                }\n                insertInto.push(extensionId);\n                removeFrom = removeFrom.filter(x => x.toLowerCase() !== extensionIdLowerCase);\n                return this.jsonEditingService.write(workspaceConfigurationFile, {\n                    key: 'extensions',\n                    value: {\n                        recommendations: shouldRecommend ? insertInto : removeFrom,\n                        unwantedRecommendations: shouldRecommend ? removeFrom : insertInto\n                    }\n                }, true);\n            });\n        }\n        addExtensionToWorkspaceFolderConfig(extensionsFileResource, extensionId, shouldRecommend) {\n            return this.getOrCreateExtensionsFile(extensionsFileResource)\n                .then(({ content }) => {\n                const extensionIdLowerCase = extensionId.toLowerCase();\n                const extensionsConfigContent = json.parse(content) || {};\n                let insertInto = shouldRecommend ? extensionsConfigContent.recommendations || [] : extensionsConfigContent.unwantedRecommendations || [];\n                let removeFrom = shouldRecommend ? extensionsConfigContent.unwantedRecommendations || [] : extensionsConfigContent.recommendations || [];\n                if (insertInto.some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                    return Promise.resolve(null);\n                }\n                insertInto.push(extensionId);\n                let removeFromPromise = Promise.resolve();\n                if (removeFrom.some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                    removeFrom = removeFrom.filter(x => x.toLowerCase() !== extensionIdLowerCase);\n                    removeFromPromise = this.jsonEditingService.write(extensionsFileResource, {\n                        key: shouldRecommend ? 'unwantedRecommendations' : 'recommendations',\n                        value: removeFrom\n                    }, true);\n                }\n                return removeFromPromise.then(() => this.jsonEditingService.write(extensionsFileResource, {\n                    key: shouldRecommend ? 'recommendations' : 'unwantedRecommendations',\n                    value: insertInto\n                }, true));\n            });\n        }\n        getWorkspaceExtensionsConfigContent(extensionsFileResource) {\n            return Promise.resolve(this.fileService.resolveContent(extensionsFileResource))\n                .then(content => {\n                return (json.parse(content.value) || {})['extensions'] || {};\n            }, err => ({ recommendations: [], unwantedRecommendations: [] }));\n        }\n        getWorkspaceFolderExtensionsConfigContent(extensionsFileResource) {\n            return Promise.resolve(this.fileService.resolveContent(extensionsFileResource))\n                .then(content => {\n                return json.parse(content.value);\n            }, err => ({ recommendations: [], unwantedRecommendations: [] }));\n        }\n        getOrUpdateWorkspaceConfigurationFile(workspaceConfigurationFile) {\n            return Promise.resolve(this.fileService.resolveContent(workspaceConfigurationFile))\n                .then(content => {\n                const workspaceRecommendations = json.parse(content.value)['extensions'];\n                if (!workspaceRecommendations || !workspaceRecommendations.recommendations) {\n                    return this.jsonEditingService.write(workspaceConfigurationFile, { key: 'extensions', value: { recommendations: [] } }, true)\n                        .then(() => this.fileService.resolveContent(workspaceConfigurationFile));\n                }\n                return content;\n            });\n        }\n        getSelectionPosition(content, resource, path) {\n            const tree = json.parseTree(content);\n            const node = json.findNodeAtLocation(tree, path);\n            if (node && node.parent && node.parent.children) {\n                const recommendationsValueNode = node.parent.children[1];\n                const lastExtensionNode = recommendationsValueNode.children && recommendationsValueNode.children.length ? recommendationsValueNode.children[recommendationsValueNode.children.length - 1] : null;\n                const offset = lastExtensionNode ? lastExtensionNode.offset + lastExtensionNode.length : recommendationsValueNode.offset + 1;\n                return Promise.resolve(this.textModelResolverService.createModelReference(resource))\n                    .then(reference => {\n                    const position = reference.object.textEditorModel.getPositionAt(offset);\n                    reference.dispose();\n                    return {\n                        startLineNumber: position.lineNumber,\n                        startColumn: position.column,\n                        endLineNumber: position.lineNumber,\n                        endColumn: position.column,\n                    };\n                });\n            }\n            return Promise.resolve(undefined);\n        }\n        getOrCreateExtensionsFile(extensionsFileResource) {\n            return Promise.resolve(this.fileService.resolveContent(extensionsFileResource)).then(content => {\n                return { created: false, extensionsFileResource, content: content.value };\n            }, err => {\n                return this.fileService.updateContent(extensionsFileResource, extensionsFileTemplate_1.ExtensionsConfigurationInitialContent).then(() => {\n                    return { created: true, extensionsFileResource, content: extensionsFileTemplate_1.ExtensionsConfigurationInitialContent };\n                });\n            });\n        }\n    };\n    AbstractConfigureRecommendedExtensionsAction = __decorate([\n        __param(2, workspace_1.IWorkspaceContextService),\n        __param(3, files_1.IFileService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, jsonEditing_1.IJSONEditingService),\n        __param(6, resolverService_1.ITextModelService)\n    ], AbstractConfigureRecommendedExtensionsAction);\n    exports.AbstractConfigureRecommendedExtensionsAction = AbstractConfigureRecommendedExtensionsAction;\n    let ConfigureWorkspaceRecommendedExtensionsAction = class ConfigureWorkspaceRecommendedExtensionsAction extends AbstractConfigureRecommendedExtensionsAction {\n        constructor(id, label, fileService, contextService, editorService, jsonEditingService, textModelResolverService) {\n            super(id, label, contextService, fileService, editorService, jsonEditingService, textModelResolverService);\n            this.disposables = [];\n            this.contextService.onDidChangeWorkbenchState(() => this.update(), this, this.disposables);\n            this.update();\n        }\n        update() {\n            this.enabled = this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY;\n        }\n        run() {\n            switch (this.contextService.getWorkbenchState()) {\n                case workspace_1.WorkbenchState.FOLDER:\n                    return this.openExtensionsFile(this.contextService.getWorkspace().folders[0].toResource(extensions_1.EXTENSIONS_CONFIG));\n                case workspace_1.WorkbenchState.WORKSPACE:\n                    return this.openWorkspaceConfigurationFile(this.contextService.getWorkspace().configuration);\n            }\n            return Promise.resolve();\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ConfigureWorkspaceRecommendedExtensionsAction.ID = 'workbench.extensions.action.configureWorkspaceRecommendedExtensions';\n    ConfigureWorkspaceRecommendedExtensionsAction.LABEL = nls_1.localize('configureWorkspaceRecommendedExtensions', \"Configure Recommended Extensions (Workspace)\");\n    ConfigureWorkspaceRecommendedExtensionsAction = __decorate([\n        __param(2, files_1.IFileService),\n        __param(3, workspace_1.IWorkspaceContextService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, jsonEditing_1.IJSONEditingService),\n        __param(6, resolverService_1.ITextModelService)\n    ], ConfigureWorkspaceRecommendedExtensionsAction);\n    exports.ConfigureWorkspaceRecommendedExtensionsAction = ConfigureWorkspaceRecommendedExtensionsAction;\n    let ConfigureWorkspaceFolderRecommendedExtensionsAction = class ConfigureWorkspaceFolderRecommendedExtensionsAction extends AbstractConfigureRecommendedExtensionsAction {\n        constructor(id, label, fileService, contextService, editorService, jsonEditingService, textModelResolverService, commandService) {\n            super(id, label, contextService, fileService, editorService, jsonEditingService, textModelResolverService);\n            this.commandService = commandService;\n            this.disposables = [];\n            this.contextService.onDidChangeWorkspaceFolders(() => this.update(), this, this.disposables);\n            this.update();\n        }\n        update() {\n            this.enabled = this.contextService.getWorkspace().folders.length > 0;\n        }\n        run() {\n            const folderCount = this.contextService.getWorkspace().folders.length;\n            const pickFolderPromise = folderCount === 1 ? Promise.resolve(this.contextService.getWorkspace().folders[0]) : this.commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID);\n            return Promise.resolve(pickFolderPromise)\n                .then(workspaceFolder => {\n                if (workspaceFolder) {\n                    return this.openExtensionsFile(workspaceFolder.toResource(extensions_1.EXTENSIONS_CONFIG));\n                }\n                return null;\n            });\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ConfigureWorkspaceFolderRecommendedExtensionsAction.ID = 'workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions';\n    ConfigureWorkspaceFolderRecommendedExtensionsAction.LABEL = nls_1.localize('configureWorkspaceFolderRecommendedExtensions', \"Configure Recommended Extensions (Workspace Folder)\");\n    ConfigureWorkspaceFolderRecommendedExtensionsAction = __decorate([\n        __param(2, files_1.IFileService),\n        __param(3, workspace_1.IWorkspaceContextService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, jsonEditing_1.IJSONEditingService),\n        __param(6, resolverService_1.ITextModelService),\n        __param(7, commands_1.ICommandService)\n    ], ConfigureWorkspaceFolderRecommendedExtensionsAction);\n    exports.ConfigureWorkspaceFolderRecommendedExtensionsAction = ConfigureWorkspaceFolderRecommendedExtensionsAction;\n    let AddToWorkspaceFolderRecommendationsAction = class AddToWorkspaceFolderRecommendationsAction extends AbstractConfigureRecommendedExtensionsAction {\n        constructor(id, label, fileService, contextService, editorService, jsonEditingService, textModelResolverService, commandService, notificationService) {\n            super(id, label, contextService, fileService, editorService, jsonEditingService, textModelResolverService);\n            this.commandService = commandService;\n            this.notificationService = notificationService;\n        }\n        run(shouldRecommend) {\n            if (!(this.editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput) || !this.editorService.activeEditor.extension) {\n                return Promise.resolve();\n            }\n            const folders = this.contextService.getWorkspace().folders;\n            if (!folders || !folders.length) {\n                this.notificationService.info(nls_1.localize('AddToWorkspaceFolderRecommendations.noWorkspace', 'There are no workspace folders open to add recommendations.'));\n                return Promise.resolve();\n            }\n            const extensionId = this.editorService.activeEditor.extension.identifier;\n            const pickFolderPromise = folders.length === 1\n                ? Promise.resolve(folders[0])\n                : this.commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID);\n            return Promise.resolve(pickFolderPromise)\n                .then(workspaceFolder => {\n                if (!workspaceFolder) {\n                    return Promise.resolve();\n                }\n                const configurationFile = workspaceFolder.toResource(extensions_1.EXTENSIONS_CONFIG);\n                return this.getWorkspaceFolderExtensionsConfigContent(configurationFile).then(content => {\n                    const extensionIdLowerCase = extensionId.id.toLowerCase();\n                    if (shouldRecommend) {\n                        if ((content.recommendations || []).some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                            this.notificationService.info(nls_1.localize('AddToWorkspaceFolderRecommendations.alreadyExists', 'This extension is already present in this workspace folder\\'s recommendations.'));\n                            return Promise.resolve();\n                        }\n                        return this.addExtensionToWorkspaceFolderConfig(configurationFile, extensionId.id, shouldRecommend).then(() => {\n                            this.notificationService.prompt(notification_1.Severity.Info, nls_1.localize('AddToWorkspaceFolderRecommendations.success', 'The extension was successfully added to this workspace folder\\'s recommendations.'), [{\n                                    label: nls_1.localize('viewChanges', \"View Changes\"),\n                                    run: () => this.openExtensionsFile(configurationFile)\n                                }]);\n                        }, err => {\n                            this.notificationService.error(nls_1.localize('AddToWorkspaceFolderRecommendations.failure', 'Failed to write to extensions.json. {0}', err));\n                        });\n                    }\n                    else {\n                        if ((content.unwantedRecommendations || []).some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                            this.notificationService.info(nls_1.localize('AddToWorkspaceFolderIgnoredRecommendations.alreadyExists', 'This extension is already present in this workspace folder\\'s unwanted recommendations.'));\n                            return Promise.resolve();\n                        }\n                        return this.addExtensionToWorkspaceFolderConfig(configurationFile, extensionId.id, shouldRecommend).then(() => {\n                            this.notificationService.prompt(notification_1.Severity.Info, nls_1.localize('AddToWorkspaceFolderIgnoredRecommendations.success', 'The extension was successfully added to this workspace folder\\'s unwanted recommendations.'), [{\n                                    label: nls_1.localize('viewChanges', \"View Changes\"),\n                                    run: () => this.openExtensionsFile(configurationFile)\n                                }]);\n                        }, err => {\n                            this.notificationService.error(nls_1.localize('AddToWorkspaceFolderRecommendations.failure', 'Failed to write to extensions.json. {0}', err));\n                        });\n                    }\n                });\n            });\n        }\n    };\n    AddToWorkspaceFolderRecommendationsAction.ADD = true;\n    AddToWorkspaceFolderRecommendationsAction.IGNORE = false;\n    AddToWorkspaceFolderRecommendationsAction.ADD_ID = 'workbench.extensions.action.addToWorkspaceFolderRecommendations';\n    AddToWorkspaceFolderRecommendationsAction.ADD_LABEL = nls_1.localize('addToWorkspaceFolderRecommendations', \"Add to Recommended Extensions (Workspace Folder)\");\n    AddToWorkspaceFolderRecommendationsAction.IGNORE_ID = 'workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations';\n    AddToWorkspaceFolderRecommendationsAction.IGNORE_LABEL = nls_1.localize('addToWorkspaceFolderIgnoredRecommendations', \"Ignore Recommended Extension (Workspace Folder)\");\n    AddToWorkspaceFolderRecommendationsAction = __decorate([\n        __param(2, files_1.IFileService),\n        __param(3, workspace_1.IWorkspaceContextService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, jsonEditing_1.IJSONEditingService),\n        __param(6, resolverService_1.ITextModelService),\n        __param(7, commands_1.ICommandService),\n        __param(8, notification_1.INotificationService)\n    ], AddToWorkspaceFolderRecommendationsAction);\n    exports.AddToWorkspaceFolderRecommendationsAction = AddToWorkspaceFolderRecommendationsAction;\n    let AddToWorkspaceRecommendationsAction = class AddToWorkspaceRecommendationsAction extends AbstractConfigureRecommendedExtensionsAction {\n        constructor(id, label, fileService, contextService, editorService, jsonEditingService, textModelResolverService, notificationService) {\n            super(id, label, contextService, fileService, editorService, jsonEditingService, textModelResolverService);\n            this.notificationService = notificationService;\n        }\n        run(shouldRecommend) {\n            const workspaceConfig = this.contextService.getWorkspace().configuration;\n            if (!(this.editorService.activeEditor instanceof extensionsInput_1.ExtensionsInput) || !this.editorService.activeEditor.extension || !workspaceConfig) {\n                return Promise.resolve();\n            }\n            const extensionId = this.editorService.activeEditor.extension.identifier;\n            return this.getWorkspaceExtensionsConfigContent(workspaceConfig).then(content => {\n                const extensionIdLowerCase = extensionId.id.toLowerCase();\n                if (shouldRecommend) {\n                    if ((content.recommendations || []).some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                        this.notificationService.info(nls_1.localize('AddToWorkspaceRecommendations.alreadyExists', 'This extension is already present in workspace recommendations.'));\n                        return Promise.resolve();\n                    }\n                    return this.addExtensionToWorkspaceConfig(workspaceConfig, extensionId.id, shouldRecommend).then(() => {\n                        this.notificationService.prompt(notification_1.Severity.Info, nls_1.localize('AddToWorkspaceRecommendations.success', 'The extension was successfully added to this workspace\\'s recommendations.'), [{\n                                label: nls_1.localize('viewChanges', \"View Changes\"),\n                                run: () => this.openWorkspaceConfigurationFile(workspaceConfig)\n                            }]);\n                    }, err => {\n                        this.notificationService.error(nls_1.localize('AddToWorkspaceRecommendations.failure', 'Failed to write. {0}', err));\n                    });\n                }\n                else {\n                    if ((content.unwantedRecommendations || []).some(e => e.toLowerCase() === extensionIdLowerCase)) {\n                        this.notificationService.info(nls_1.localize('AddToWorkspaceUnwantedRecommendations.alreadyExists', 'This extension is already present in workspace unwanted recommendations.'));\n                        return Promise.resolve();\n                    }\n                    return this.addExtensionToWorkspaceConfig(workspaceConfig, extensionId.id, shouldRecommend).then(() => {\n                        this.notificationService.prompt(notification_1.Severity.Info, nls_1.localize('AddToWorkspaceUnwantedRecommendations.success', 'The extension was successfully added to this workspace\\'s unwanted recommendations.'), [{\n                                label: nls_1.localize('viewChanges', \"View Changes\"),\n                                run: () => this.openWorkspaceConfigurationFile(workspaceConfig)\n                            }]);\n                    }, err => {\n                        this.notificationService.error(nls_1.localize('AddToWorkspaceRecommendations.failure', 'Failed to write. {0}', err));\n                    });\n                }\n            });\n        }\n    };\n    AddToWorkspaceRecommendationsAction.ADD = true;\n    AddToWorkspaceRecommendationsAction.IGNORE = false;\n    AddToWorkspaceRecommendationsAction.ADD_ID = 'workbench.extensions.action.addToWorkspaceRecommendations';\n    AddToWorkspaceRecommendationsAction.ADD_LABEL = nls_1.localize('addToWorkspaceRecommendations', \"Add to Recommended Extensions (Workspace)\");\n    AddToWorkspaceRecommendationsAction.IGNORE_ID = 'workbench.extensions.action.addToWorkspaceIgnoredRecommendations';\n    AddToWorkspaceRecommendationsAction.IGNORE_LABEL = nls_1.localize('addToWorkspaceIgnoredRecommendations', \"Ignore Recommended Extension (Workspace)\");\n    AddToWorkspaceRecommendationsAction = __decorate([\n        __param(2, files_1.IFileService),\n        __param(3, workspace_1.IWorkspaceContextService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, jsonEditing_1.IJSONEditingService),\n        __param(6, resolverService_1.ITextModelService),\n        __param(7, notification_1.INotificationService)\n    ], AddToWorkspaceRecommendationsAction);\n    exports.AddToWorkspaceRecommendationsAction = AddToWorkspaceRecommendationsAction;\n    let StatusLabelAction = class StatusLabelAction extends actions_1.Action {\n        constructor(extensionService) {\n            super('extensions.action.statusLabel', '', StatusLabelAction.DISABLED_CLASS, false);\n            this.extensionService = extensionService;\n            this.initialStatus = null;\n            this.status = null;\n            this.enablementState = null;\n        }\n        get extension() { return this._extension; }\n        set extension(extension) {\n            if (!(this._extension && extension && extensionManagementUtil_1.areSameExtensions(this._extension.identifier, extension.identifier))) {\n                // Different extension. Reset\n                this.initialStatus = null;\n                this.status = null;\n                this.enablementState = null;\n            }\n            this._extension = extension;\n            this.update();\n        }\n        update() {\n            this.computeLabel()\n                .then(label => {\n                this.label = label || '';\n                this.class = label ? StatusLabelAction.ENABLED_CLASS : StatusLabelAction.DISABLED_CLASS;\n            });\n        }\n        computeLabel() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!this.extension) {\n                    return null;\n                }\n                const currentStatus = this.status;\n                const currentEnablementState = this.enablementState;\n                this.status = this.extension.state;\n                if (this.initialStatus === null) {\n                    this.initialStatus = this.status;\n                }\n                this.enablementState = this.extension.enablementState;\n                const runningExtensions = yield this.extensionService.getExtensions();\n                const canAddExtension = () => {\n                    const runningExtension = runningExtensions.filter(e => extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, this.extension.identifier))[0];\n                    if (this.extension.local) {\n                        if (runningExtension && this.extension.version === runningExtension.version) {\n                            return true;\n                        }\n                        return this.extensionService.canAddExtension(toExtensionDescription(this.extension.local));\n                    }\n                    return false;\n                };\n                const canRemoveExtension = () => {\n                    if (this.extension.local) {\n                        if (runningExtensions.every(e => !extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, this.extension.identifier))) {\n                            return true;\n                        }\n                        return this.extensionService.canRemoveExtension(toExtensionDescription(this.extension.local));\n                    }\n                    return false;\n                };\n                if (currentStatus !== null) {\n                    if (currentStatus === extensions_1.ExtensionState.Installing && this.status === extensions_1.ExtensionState.Installed) {\n                        return canAddExtension() ? this.initialStatus === extensions_1.ExtensionState.Installed ? nls_1.localize('updated', \"Updated\") : nls_1.localize('installed', \"Installed\") : null;\n                    }\n                    if (currentStatus === extensions_1.ExtensionState.Uninstalling && this.status === extensions_1.ExtensionState.Uninstalled) {\n                        return canRemoveExtension() ? nls_1.localize('uninstalled', \"Uninstalled\") : null;\n                    }\n                }\n                if (currentEnablementState !== null) {\n                    const currentlyEnabled = currentEnablementState === extensionManagement_1.EnablementState.Enabled || currentEnablementState === extensionManagement_1.EnablementState.WorkspaceEnabled;\n                    const enabled = this.enablementState === extensionManagement_1.EnablementState.Enabled || this.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled;\n                    if (!currentlyEnabled && enabled) {\n                        return canAddExtension() ? nls_1.localize('enabled', \"Enabled\") : null;\n                    }\n                    if (currentlyEnabled && !enabled) {\n                        return canRemoveExtension() ? nls_1.localize('disabled', \"Disabled\") : null;\n                    }\n                }\n                return null;\n            });\n        }\n        run() {\n            return Promise.resolve();\n        }\n    };\n    StatusLabelAction.ENABLED_CLASS = 'extension-status-label';\n    StatusLabelAction.DISABLED_CLASS = `${StatusLabelAction.ENABLED_CLASS} hide`;\n    StatusLabelAction = __decorate([\n        __param(0, extensions_3.IExtensionService)\n    ], StatusLabelAction);\n    exports.StatusLabelAction = StatusLabelAction;\n    class MaliciousStatusLabelAction extends ExtensionAction {\n        constructor(long) {\n            const tooltip = nls_1.localize('malicious tooltip', \"This extension was reported to be problematic.\");\n            const label = long ? tooltip : nls_1.localize('malicious', \"Malicious\");\n            super('extensions.install', label, '', false);\n            this.tooltip = nls_1.localize('malicious tooltip', \"This extension was reported to be problematic.\");\n        }\n        update() {\n            if (this.extension && this.extension.isMalicious) {\n                this.class = `${MaliciousStatusLabelAction.Class} malicious`;\n            }\n            else {\n                this.class = `${MaliciousStatusLabelAction.Class} not-malicious`;\n            }\n        }\n        run() {\n            return Promise.resolve();\n        }\n    }\n    MaliciousStatusLabelAction.Class = 'malicious-status';\n    exports.MaliciousStatusLabelAction = MaliciousStatusLabelAction;\n    let DisableAllAction = class DisableAllAction extends actions_1.Action {\n        constructor(id = DisableAllAction.ID, label = DisableAllAction.LABEL, extensionsWorkbenchService, extensionEnablementService) {\n            super(id, label);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.disposables = [];\n            this.update();\n            this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));\n        }\n        update() {\n            this.enabled = this.extensionsWorkbenchService.local.some(e => e.type === extensions_2.ExtensionType.User && (e.enablementState === extensionManagement_1.EnablementState.Enabled || e.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled) && !!e.local && this.extensionEnablementService.canChangeEnablement(e.local));\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extensionsWorkbenchService.local.filter(e => e.type === extensions_2.ExtensionType.User), extensionManagement_1.EnablementState.Disabled);\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    DisableAllAction.ID = 'workbench.extensions.action.disableAll';\n    DisableAllAction.LABEL = nls_1.localize('disableAll', \"Disable All Installed Extensions\");\n    DisableAllAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, extensionManagement_1.IExtensionEnablementService)\n    ], DisableAllAction);\n    exports.DisableAllAction = DisableAllAction;\n    let DisableAllWorkpsaceAction = class DisableAllWorkpsaceAction extends actions_1.Action {\n        constructor(id = DisableAllWorkpsaceAction.ID, label = DisableAllWorkpsaceAction.LABEL, workspaceContextService, extensionsWorkbenchService) {\n            super(id, label);\n            this.workspaceContextService = workspaceContextService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.disposables = [];\n            this.update();\n            this.workspaceContextService.onDidChangeWorkbenchState(() => this.update(), this, this.disposables);\n            this.extensionsWorkbenchService.onChange(() => this.update(), this, this.disposables);\n        }\n        update() {\n            this.enabled = this.workspaceContextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY && this.extensionsWorkbenchService.local.some(e => e.type === extensions_2.ExtensionType.User && (e.enablementState === extensionManagement_1.EnablementState.Enabled || e.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled));\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extensionsWorkbenchService.local.filter(e => e.type === extensions_2.ExtensionType.User), extensionManagement_1.EnablementState.WorkspaceDisabled);\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    DisableAllWorkpsaceAction.ID = 'workbench.extensions.action.disableAllWorkspace';\n    DisableAllWorkpsaceAction.LABEL = nls_1.localize('disableAllWorkspace', \"Disable All Installed Extensions for this Workspace\");\n    DisableAllWorkpsaceAction = __decorate([\n        __param(2, workspace_1.IWorkspaceContextService),\n        __param(3, extensions_1.IExtensionsWorkbenchService)\n    ], DisableAllWorkpsaceAction);\n    exports.DisableAllWorkpsaceAction = DisableAllWorkpsaceAction;\n    let EnableAllAction = class EnableAllAction extends actions_1.Action {\n        constructor(id = EnableAllAction.ID, label = EnableAllAction.LABEL, extensionsWorkbenchService, extensionEnablementService) {\n            super(id, label);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.disposables = [];\n            this.update();\n            this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));\n        }\n        update() {\n            this.enabled = this.extensionsWorkbenchService.local.some(e => !!e.local && this.extensionEnablementService.canChangeEnablement(e.local) && (e.enablementState === extensionManagement_1.EnablementState.Disabled || e.enablementState === extensionManagement_1.EnablementState.WorkspaceDisabled));\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extensionsWorkbenchService.local, extensionManagement_1.EnablementState.Enabled);\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    EnableAllAction.ID = 'workbench.extensions.action.enableAll';\n    EnableAllAction.LABEL = nls_1.localize('enableAll', \"Enable All Extensions\");\n    EnableAllAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, extensionManagement_1.IExtensionEnablementService)\n    ], EnableAllAction);\n    exports.EnableAllAction = EnableAllAction;\n    let EnableAllWorkpsaceAction = class EnableAllWorkpsaceAction extends actions_1.Action {\n        constructor(id = EnableAllWorkpsaceAction.ID, label = EnableAllWorkpsaceAction.LABEL, workspaceContextService, extensionsWorkbenchService, extensionEnablementService) {\n            super(id, label);\n            this.workspaceContextService = workspaceContextService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.disposables = [];\n            this.update();\n            this.extensionsWorkbenchService.onChange(() => this.update(), this, this.disposables);\n            this.workspaceContextService.onDidChangeWorkbenchState(() => this.update(), this, this.disposables);\n        }\n        update() {\n            this.enabled = this.workspaceContextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY && this.extensionsWorkbenchService.local.some(e => !!e.local && this.extensionEnablementService.canChangeEnablement(e.local) && (e.enablementState === extensionManagement_1.EnablementState.Disabled || e.enablementState === extensionManagement_1.EnablementState.WorkspaceDisabled));\n        }\n        run() {\n            return this.extensionsWorkbenchService.setEnablement(this.extensionsWorkbenchService.local, extensionManagement_1.EnablementState.WorkspaceEnabled);\n        }\n        dispose() {\n            super.dispose();\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    EnableAllWorkpsaceAction.ID = 'workbench.extensions.action.enableAllWorkspace';\n    EnableAllWorkpsaceAction.LABEL = nls_1.localize('enableAllWorkspace', \"Enable All Extensions for this Workspace\");\n    EnableAllWorkpsaceAction = __decorate([\n        __param(2, workspace_1.IWorkspaceContextService),\n        __param(3, extensions_1.IExtensionsWorkbenchService),\n        __param(4, extensionManagement_1.IExtensionEnablementService)\n    ], EnableAllWorkpsaceAction);\n    exports.EnableAllWorkpsaceAction = EnableAllWorkpsaceAction;\n    let OpenExtensionsFolderAction = class OpenExtensionsFolderAction extends actions_1.Action {\n        constructor(id, label, windowsService, fileService, environmentService) {\n            super(id, label, undefined, true);\n            this.windowsService = windowsService;\n            this.fileService = fileService;\n            this.environmentService = environmentService;\n        }\n        run() {\n            const extensionsHome = uri_1.URI.file(this.environmentService.extensionsPath);\n            return Promise.resolve(this.fileService.resolveFile(extensionsHome)).then(file => {\n                let itemToShow;\n                if (file.children && file.children.length > 0) {\n                    itemToShow = file.children[0].resource;\n                }\n                else {\n                    itemToShow = extensionsHome;\n                }\n                return this.windowsService.showItemInFolder(itemToShow);\n            });\n        }\n    };\n    OpenExtensionsFolderAction.ID = 'workbench.extensions.action.openExtensionsFolder';\n    OpenExtensionsFolderAction.LABEL = nls_1.localize('openExtensionsFolder', \"Open Extensions Folder\");\n    OpenExtensionsFolderAction = __decorate([\n        __param(2, windows_1.IWindowsService),\n        __param(3, files_1.IFileService),\n        __param(4, environment_1.IEnvironmentService)\n    ], OpenExtensionsFolderAction);\n    exports.OpenExtensionsFolderAction = OpenExtensionsFolderAction;\n    let InstallVSIXAction = class InstallVSIXAction extends actions_1.Action {\n        constructor(id = InstallVSIXAction.ID, label = InstallVSIXAction.LABEL, extensionsWorkbenchService, notificationService, windowService, extensionService, instantiationService) {\n            super(id, label, 'extension-action install-vsix', true);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.notificationService = notificationService;\n            this.windowService = windowService;\n            this.extensionService = extensionService;\n            this.instantiationService = instantiationService;\n        }\n        run() {\n            return Promise.resolve(this.windowService.showOpenDialog({\n                title: nls_1.localize('installFromVSIX', \"Install from VSIX\"),\n                filters: [{ name: 'VSIX Extensions', extensions: ['vsix'] }],\n                properties: ['openFile'],\n                buttonLabel: labels_1.mnemonicButtonLabel(nls_1.localize({ key: 'installButton', comment: ['&& denotes a mnemonic'] }, \"&&Install\"))\n            })).then(result => {\n                if (!result) {\n                    return Promise.resolve();\n                }\n                return Promise.all(result.map(vsix => this.extensionsWorkbenchService.install(vsix)))\n                    .then(extensions => {\n                    for (const extension of extensions) {\n                        const requireReload = !(extension.local && this.extensionService.canAddExtension(toExtensionDescription(extension.local)));\n                        const message = requireReload ? nls_1.localize('InstallVSIXAction.successReload', \"Please reload Visual Studio Code to complete installing the extension {0}.\", extension.identifier.id)\n                            : nls_1.localize('InstallVSIXAction.success', \"Installing the extension {0} is completed.\", extension.identifier.id);\n                        const actions = requireReload ? [{\n                                label: nls_1.localize('InstallVSIXAction.reloadNow', \"Reload Now\"),\n                                run: () => this.windowService.reloadWindow()\n                            }] : [];\n                        this.notificationService.prompt(notification_1.Severity.Info, message, actions, { sticky: true });\n                    }\n                    return this.instantiationService.createInstance(ShowInstalledExtensionsAction, ShowInstalledExtensionsAction.ID, ShowInstalledExtensionsAction.LABEL).run();\n                });\n            });\n        }\n    };\n    InstallVSIXAction.ID = 'workbench.extensions.action.installVSIX';\n    InstallVSIXAction.LABEL = nls_1.localize('installVSIX', \"Install from VSIX...\");\n    InstallVSIXAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, notification_1.INotificationService),\n        __param(4, windows_1.IWindowService),\n        __param(5, extensions_3.IExtensionService),\n        __param(6, instantiation_1.IInstantiationService)\n    ], InstallVSIXAction);\n    exports.InstallVSIXAction = InstallVSIXAction;\n    let ReinstallAction = class ReinstallAction extends actions_1.Action {\n        constructor(id = ReinstallAction.ID, label = ReinstallAction.LABEL, extensionsWorkbenchService, quickInputService, notificationService, windowService, instantiationService, extensionService) {\n            super(id, label);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.quickInputService = quickInputService;\n            this.notificationService = notificationService;\n            this.windowService = windowService;\n            this.instantiationService = instantiationService;\n            this.extensionService = extensionService;\n        }\n        get enabled() {\n            return this.extensionsWorkbenchService.local.filter(l => l.type === extensions_2.ExtensionType.User && l.local).length > 0;\n        }\n        run() {\n            return this.quickInputService.pick(this.getEntries(), { placeHolder: nls_1.localize('selectExtensionToReinstall', \"Select Extension to Reinstall\") })\n                .then(pick => pick && this.reinstallExtension(pick.extension));\n        }\n        getEntries() {\n            return this.extensionsWorkbenchService.queryLocal()\n                .then(local => {\n                const entries = local\n                    .filter(extension => extension.type === extensions_2.ExtensionType.User)\n                    .map(extension => {\n                    return {\n                        id: extension.identifier.id,\n                        label: extension.displayName,\n                        description: extension.identifier.id,\n                        extension,\n                    };\n                });\n                return entries;\n            });\n        }\n        reinstallExtension(extension) {\n            return this.instantiationService.createInstance(ShowInstalledExtensionsAction, ShowInstalledExtensionsAction.ID, ShowInstalledExtensionsAction.LABEL).run()\n                .then(() => {\n                return this.extensionsWorkbenchService.reinstall(extension)\n                    .then(extension => {\n                    const requireReload = !(extension.local && this.extensionService.canAddExtension(toExtensionDescription(extension.local)));\n                    const message = requireReload ? nls_1.localize('ReinstallAction.successReload', \"Please reload Visual Studio Code to complete reinstalling the extension {0}.\", extension.identifier.id)\n                        : nls_1.localize('ReinstallAction.success', \"Reinstalling the extension {0} is completed.\", extension.identifier.id);\n                    const actions = requireReload ? [{\n                            label: nls_1.localize('InstallVSIXAction.reloadNow', \"Reload Now\"),\n                            run: () => this.windowService.reloadWindow()\n                        }] : [];\n                    this.notificationService.prompt(notification_1.Severity.Info, message, actions, { sticky: true });\n                }, error => this.notificationService.error(error));\n            });\n        }\n    };\n    ReinstallAction.ID = 'workbench.extensions.action.reinstall';\n    ReinstallAction.LABEL = nls_1.localize('reinstall', \"Reinstall Extension...\");\n    ReinstallAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, quickInput_1.IQuickInputService),\n        __param(4, notification_1.INotificationService),\n        __param(5, windows_1.IWindowService),\n        __param(6, instantiation_1.IInstantiationService),\n        __param(7, extensions_3.IExtensionService)\n    ], ReinstallAction);\n    exports.ReinstallAction = ReinstallAction;\n    let InstallSpecificVersionOfExtensionAction = class InstallSpecificVersionOfExtensionAction extends actions_1.Action {\n        constructor(id = InstallSpecificVersionOfExtensionAction.ID, label = InstallSpecificVersionOfExtensionAction.LABEL, extensionsWorkbenchService, extensionGalleryService, quickInputService, notificationService, windowService, instantiationService, extensionService) {\n            super(id, label);\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionGalleryService = extensionGalleryService;\n            this.quickInputService = quickInputService;\n            this.notificationService = notificationService;\n            this.windowService = windowService;\n            this.instantiationService = instantiationService;\n            this.extensionService = extensionService;\n        }\n        get enabled() {\n            return this.extensionsWorkbenchService.local.some(l => this.isEnabled(l));\n        }\n        run() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const extensionPick = yield this.quickInputService.pick(this.getExtensionEntries(), { placeHolder: nls_1.localize('selectExtension', \"Select Extension\"), matchOnDetail: true });\n                if (extensionPick && extensionPick.extension) {\n                    const versionPick = yield this.quickInputService.pick(extensionPick.versions.map(v => ({ id: v.version, label: v.version, description: `${getRelativeDateLabel(new Date(Date.parse(v.date)))}${v.version === extensionPick.extension.version ? ` (${nls_1.localize('current', \"Current\")})` : ''}` })), { placeHolder: nls_1.localize('selectVersion', \"Select Version to Install\"), matchOnDetail: true });\n                    if (versionPick) {\n                        if (extensionPick.extension.version !== versionPick.id) {\n                            yield this.install(extensionPick.extension, versionPick.id);\n                        }\n                    }\n                }\n            });\n        }\n        isEnabled(extension) {\n            return !!extension.gallery && (extension.enablementState === extensionManagement_1.EnablementState.Enabled || extension.enablementState === extensionManagement_1.EnablementState.WorkspaceEnabled);\n        }\n        getExtensionEntries() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const installed = yield this.extensionsWorkbenchService.queryLocal();\n                const versionsPromises = [];\n                for (const extension of installed) {\n                    if (this.isEnabled(extension)) {\n                        versionsPromises.push(this.extensionGalleryService.getAllVersions(extension.gallery, true)\n                            .then(versions => (versions.length ? { extension, versions } : null)));\n                    }\n                }\n                const extensions = yield Promise.all(versionsPromises);\n                return arrays_1.coalesce(extensions)\n                    .sort((e1, e2) => e1.extension.displayName.localeCompare(e2.extension.displayName))\n                    .map(({ extension, versions }) => {\n                    return {\n                        id: extension.identifier.id,\n                        label: extension.displayName || extension.identifier.id,\n                        description: extension.identifier.id,\n                        extension,\n                        versions\n                    };\n                });\n            });\n        }\n        install(extension, version) {\n            return this.instantiationService.createInstance(ShowInstalledExtensionsAction, ShowInstalledExtensionsAction.ID, ShowInstalledExtensionsAction.LABEL).run()\n                .then(() => {\n                return this.extensionsWorkbenchService.installVersion(extension, version)\n                    .then(extension => {\n                    const requireReload = !(extension.local && this.extensionService.canAddExtension(toExtensionDescription(extension.local)));\n                    const message = requireReload ? nls_1.localize('InstallAnotherVersionExtensionAction.successReload', \"Please reload Visual Studio Code to complete installing the extension {0}.\", extension.identifier.id)\n                        : nls_1.localize('InstallAnotherVersionExtensionAction.success', \"Installing the extension {0} is completed.\", extension.identifier.id);\n                    const actions = requireReload ? [{\n                            label: nls_1.localize('InstallAnotherVersionExtensionAction.reloadNow', \"Reload Now\"),\n                            run: () => this.windowService.reloadWindow()\n                        }] : [];\n                    this.notificationService.prompt(notification_1.Severity.Info, message, actions, { sticky: true });\n                }, error => this.notificationService.error(error));\n            });\n        }\n    };\n    InstallSpecificVersionOfExtensionAction.ID = 'workbench.extensions.action.install.specificVersion';\n    InstallSpecificVersionOfExtensionAction.LABEL = nls_1.localize('install previous version', \"Install Specific Version of Extension...\");\n    InstallSpecificVersionOfExtensionAction = __decorate([\n        __param(2, extensions_1.IExtensionsWorkbenchService),\n        __param(3, extensionManagement_1.IExtensionGalleryService),\n        __param(4, quickInput_1.IQuickInputService),\n        __param(5, notification_1.INotificationService),\n        __param(6, windows_1.IWindowService),\n        __param(7, instantiation_1.IInstantiationService),\n        __param(8, extensions_3.IExtensionService)\n    ], InstallSpecificVersionOfExtensionAction);\n    exports.InstallSpecificVersionOfExtensionAction = InstallSpecificVersionOfExtensionAction;\n    commands_1.CommandsRegistry.registerCommand('workbench.extensions.action.showExtensionsForLanguage', function (accessor, fileExtension) {\n        const viewletService = accessor.get(viewlet_2.IViewletService);\n        return viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n            .then(viewlet => viewlet)\n            .then(viewlet => {\n            viewlet.search(`ext:${fileExtension.replace(/^\\./, '')}`);\n            viewlet.focus();\n        });\n    });\n    commands_1.CommandsRegistry.registerCommand('workbench.extensions.action.showExtensionsWithIds', function (accessor, extensionIds) {\n        const viewletService = accessor.get(viewlet_2.IViewletService);\n        return viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n            .then(viewlet => viewlet)\n            .then(viewlet => {\n            const query = extensionIds\n                .map(id => `@id:${id}`)\n                .join(' ');\n            viewlet.search(query);\n            viewlet.focus();\n        });\n    });\n    exports.extensionButtonProminentBackground = colorRegistry_1.registerColor('extensionButton.prominentBackground', {\n        dark: '#327e36',\n        light: '#327e36',\n        hc: null\n    }, nls_1.localize('extensionButtonProminentBackground', \"Button background color for actions extension that stand out (e.g. install button).\"));\n    exports.extensionButtonProminentForeground = colorRegistry_1.registerColor('extensionButton.prominentForeground', {\n        dark: color_1.Color.white,\n        light: color_1.Color.white,\n        hc: null\n    }, nls_1.localize('extensionButtonProminentForeground', \"Button foreground color for actions extension that stand out (e.g. install button).\"));\n    exports.extensionButtonProminentHoverBackground = colorRegistry_1.registerColor('extensionButton.prominentHoverBackground', {\n        dark: '#28632b',\n        light: '#28632b',\n        hc: null\n    }, nls_1.localize('extensionButtonProminentHoverBackground', \"Button background hover color for actions extension that stand out (e.g. install button).\"));\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const foregroundColor = theme.getColor(colorRegistry_1.foreground);\n        if (foregroundColor) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action.built-in-status { border-color: ${foregroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action.built-in-status { border-color: ${foregroundColor}; }`);\n        }\n        const buttonBackgroundColor = theme.getColor(colorRegistry_1.buttonBackground);\n        if (buttonBackgroundColor) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action { background-color: ${buttonBackgroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action { background-color: ${buttonBackgroundColor}; }`);\n        }\n        const buttonForegroundColor = theme.getColor(colorRegistry_1.buttonForeground);\n        if (buttonForegroundColor) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action { color: ${buttonForegroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action { color: ${buttonForegroundColor}; }`);\n        }\n        const buttonHoverBackgroundColor = theme.getColor(colorRegistry_1.buttonHoverBackground);\n        if (buttonHoverBackgroundColor) {\n            collector.addRule(`.extension .monaco-action-bar .action-item:hover .action-label.extension-action { background-color: ${buttonHoverBackgroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item:hover .action-label.extension-action { background-color: ${buttonHoverBackgroundColor}; }`);\n        }\n        const contrastBorderColor = theme.getColor(colorRegistry_1.contrastBorder);\n        if (contrastBorderColor) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action { border: 1px solid ${contrastBorderColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action { border: 1px solid ${contrastBorderColor}; }`);\n        }\n        const extensionButtonProminentBackgroundColor = theme.getColor(exports.extensionButtonProminentBackground);\n        if (exports.extensionButtonProminentBackground) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action.prominent { background-color: ${extensionButtonProminentBackgroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action.prominent { background-color: ${extensionButtonProminentBackgroundColor}; }`);\n        }\n        const extensionButtonProminentForegroundColor = theme.getColor(exports.extensionButtonProminentForeground);\n        if (exports.extensionButtonProminentForeground) {\n            collector.addRule(`.extension .monaco-action-bar .action-item .action-label.extension-action.prominent { color: ${extensionButtonProminentForegroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item .action-label.extension-action.prominent { color: ${extensionButtonProminentForegroundColor}; }`);\n        }\n        const extensionButtonProminentHoverBackgroundColor = theme.getColor(exports.extensionButtonProminentHoverBackground);\n        if (exports.extensionButtonProminentHoverBackground) {\n            collector.addRule(`.extension .monaco-action-bar .action-item:hover .action-label.extension-action.prominent { background-color: ${extensionButtonProminentHoverBackgroundColor}; }`);\n            collector.addRule(`.extension-editor .monaco-action-bar .action-item:hover .action-label.extension-action.prominent { background-color: ${extensionButtonProminentHoverBackgroundColor}; }`);\n        }\n    });\n});\n",null]}