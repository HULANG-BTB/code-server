{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar contextkeys_1 = require(\"vs/platform/contextkey/common/contextkeys\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar network_1 = require(\"vs/base/common/network\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\n/**\n * Explorer viewlet id.\n */\nexports.VIEWLET_ID = 'workbench.view.explorer';\n/**\n * Explorer viewlet container.\n */\nexports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\nexports.IExplorerService = instantiation_1.createDecorator('explorerService');\n/**\n * Context Keys to use with keybindings for the Explorer and Open Editors view\n */\nvar explorerViewletVisibleId = 'explorerViewletVisible';\nvar filesExplorerFocusId = 'filesExplorerFocus';\nvar openEditorsVisibleId = 'openEditorsVisible';\nvar openEditorsFocusId = 'openEditorsFocus';\nvar explorerViewletFocusId = 'explorerViewletFocus';\nvar explorerResourceIsFolderId = 'explorerResourceIsFolder';\nvar explorerResourceReadonly = 'explorerResourceReadonly';\nvar explorerResourceIsRootId = 'explorerResourceIsRoot';\nvar explorerResourceCutId = 'explorerResourceCut';\nexports.ExplorerViewletVisibleContext = new contextkey_1.RawContextKey(explorerViewletVisibleId, true);\nexports.ExplorerFolderContext = new contextkey_1.RawContextKey(explorerResourceIsFolderId, false);\nexports.ExplorerResourceReadonlyContext = new contextkey_1.RawContextKey(explorerResourceReadonly, false);\nexports.ExplorerResourceNotReadonlyContext = exports.ExplorerResourceReadonlyContext.toNegated();\nexports.ExplorerRootContext = new contextkey_1.RawContextKey(explorerResourceIsRootId, false);\nexports.ExplorerResourceCut = new contextkey_1.RawContextKey(explorerResourceCutId, false);\nexports.FilesExplorerFocusedContext = new contextkey_1.RawContextKey(filesExplorerFocusId, true);\nexports.OpenEditorsVisibleContext = new contextkey_1.RawContextKey(openEditorsVisibleId, false);\nexports.OpenEditorsFocusedContext = new contextkey_1.RawContextKey(openEditorsFocusId, true);\nexports.ExplorerFocusedContext = new contextkey_1.RawContextKey(explorerViewletFocusId, true);\nexports.OpenEditorsVisibleCondition = contextkey_1.ContextKeyExpr.has(openEditorsVisibleId);\nexports.FilesExplorerFocusCondition = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has(explorerViewletVisibleId), contextkey_1.ContextKeyExpr.has(filesExplorerFocusId), contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey));\nexports.ExplorerFocusCondition = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has(explorerViewletVisibleId), contextkey_1.ContextKeyExpr.has(explorerViewletFocusId), contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey));\n/**\n * Text file editor id.\n */\nexports.TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n/**\n * File editor input id.\n */\nexports.FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n/**\n * Binary file editor id.\n */\nexports.BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\nexports.SortOrderConfiguration = {\n    DEFAULT: 'default',\n    MIXED: 'mixed',\n    FILES_FIRST: 'filesFirst',\n    TYPE: 'type',\n    MODIFIED: 'modified'\n};\nvar FileOnDiskContentProvider = /** @class */ (function () {\n    function FileOnDiskContentProvider(textFileService, fileService, modeService, modelService) {\n        this.textFileService = textFileService;\n        this.fileService = fileService;\n        this.modeService = modeService;\n        this.modelService = modelService;\n    }\n    FileOnDiskContentProvider.prototype.provideTextContent = function (resource) {\n        var _this = this;\n        var fileOnDiskResource = resource.with({ scheme: network_1.Schemas.file });\n        // Make sure our file from disk is resolved up to date\n        return this.resolveEditorModel(resource).then(function (codeEditorModel) {\n            // Make sure to keep contents on disk up to date when it changes\n            if (!_this.fileWatcher) {\n                _this.fileWatcher = _this.fileService.onFileChanges(function (changes) {\n                    if (changes.contains(fileOnDiskResource, files_1.FileChangeType.UPDATED)) {\n                        _this.resolveEditorModel(resource, false /* do not create if missing */); // update model when resource changes\n                    }\n                });\n                if (codeEditorModel) {\n                    var disposeListener_1 = codeEditorModel.onWillDispose(function () {\n                        disposeListener_1.dispose();\n                        _this.fileWatcher = lifecycle_1.dispose(_this.fileWatcher);\n                    });\n                }\n            }\n            return codeEditorModel;\n        });\n    };\n    FileOnDiskContentProvider.prototype.resolveEditorModel = function (resource, createAsNeeded) {\n        var _this = this;\n        if (createAsNeeded === void 0) { createAsNeeded = true; }\n        var fileOnDiskResource = resource.with({ scheme: network_1.Schemas.file });\n        return this.textFileService.resolveTextContent(fileOnDiskResource).then(function (content) {\n            var codeEditorModel = _this.modelService.getModel(resource);\n            if (codeEditorModel) {\n                _this.modelService.updateModel(codeEditorModel, content.value);\n            }\n            else if (createAsNeeded) {\n                var fileOnDiskModel = _this.modelService.getModel(fileOnDiskResource);\n                var languageSelector = void 0;\n                if (fileOnDiskModel) {\n                    languageSelector = _this.modeService.create(fileOnDiskModel.getModeId());\n                }\n                else {\n                    languageSelector = _this.modeService.createByFilepathOrFirstLine(fileOnDiskResource.fsPath);\n                }\n                codeEditorModel = _this.modelService.createModel(content.value, languageSelector, resource);\n            }\n            return codeEditorModel;\n        });\n    };\n    FileOnDiskContentProvider.prototype.dispose = function () {\n        this.fileWatcher = lifecycle_1.dispose(this.fileWatcher);\n    };\n    FileOnDiskContentProvider = tslib_1.__decorate([\n        tslib_1.__param(0, textfiles_1.ITextFileService),\n        tslib_1.__param(1, files_1.IFileService),\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, modelService_1.IModelService)\n    ], FileOnDiskContentProvider);\n    return FileOnDiskContentProvider;\n}());\nexports.FileOnDiskContentProvider = FileOnDiskContentProvider;\nvar OpenEditor = /** @class */ (function () {\n    function OpenEditor(_editor, _group) {\n        this._editor = _editor;\n        this._group = _group;\n        // noop\n    }\n    Object.defineProperty(OpenEditor.prototype, \"editor\", {\n        get: function () {\n            return this._editor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OpenEditor.prototype, \"editorIndex\", {\n        get: function () {\n            return this._group.getIndexOfEditor(this.editor);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OpenEditor.prototype, \"group\", {\n        get: function () {\n            return this._group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OpenEditor.prototype, \"groupId\", {\n        get: function () {\n            return this._group.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OpenEditor.prototype.getId = function () {\n        return \"openeditor:\" + this.groupId + \":\" + this.editorIndex + \":\" + this.editor.getName() + \":\" + this.editor.getDescription();\n    };\n    OpenEditor.prototype.isPreview = function () {\n        return this._group.previewEditor === this.editor;\n    };\n    OpenEditor.prototype.isUntitled = function () {\n        return !!editor_1.toResource(this.editor, { supportSideBySide: true, filter: network_1.Schemas.untitled });\n    };\n    OpenEditor.prototype.isDirty = function () {\n        return this.editor.isDirty();\n    };\n    OpenEditor.prototype.getResource = function () {\n        return editor_1.toResource(this.editor, { supportSideBySide: true });\n    };\n    return OpenEditor;\n}());\nexports.OpenEditor = OpenEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAIhG,qDAAwH;AACxH,wDAAmG;AACnG,uEAAyF;AAEzF,sDAAgE;AAGhE,uEAAuE;AACvE,qEAAyF;AACzF,6EAAmF;AACnF,yEAAmF;AACnF,iEAAgE;AAChE,mDAA0H;AAC1H,kDAAiD;AACjD,gFAAiF;AAIjF;;GAEG;AACU,QAAA,UAAU,GAAG,yBAAyB,CAAC;AACpD;;GAEG;AACU,QAAA,cAAc,GAAkB,mBAAQ,CAAC,EAAE,CAA0B,kBAAuB,CAAC,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,kBAAU,CAAC,CAAC;AAgCvJ,QAAA,gBAAgB,GAAG,+BAAe,CAAmB,iBAAiB,CAAC,CAAC;AAErF;;GAEG;AACH,IAAM,wBAAwB,GAAG,wBAAwB,CAAC;AAC1D,IAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,IAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,IAAM,kBAAkB,GAAG,kBAAkB,CAAC;AAC9C,IAAM,sBAAsB,GAAG,sBAAsB,CAAC;AACtD,IAAM,0BAA0B,GAAG,0BAA0B,CAAC;AAC9D,IAAM,wBAAwB,GAAG,0BAA0B,CAAC;AAC5D,IAAM,wBAAwB,GAAG,wBAAwB,CAAC;AAC1D,IAAM,qBAAqB,GAAG,qBAAqB,CAAC;AAEvC,QAAA,6BAA6B,GAAG,IAAI,0BAAa,CAAU,wBAAwB,EAAE,IAAI,CAAC,CAAC;AAC3F,QAAA,qBAAqB,GAAG,IAAI,0BAAa,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC;AACtF,QAAA,+BAA+B,GAAG,IAAI,0BAAa,CAAU,wBAAwB,EAAE,KAAK,CAAC,CAAC;AAC9F,QAAA,kCAAkC,GAAG,uCAA+B,CAAC,SAAS,EAAE,CAAC;AACjF,QAAA,mBAAmB,GAAG,IAAI,0BAAa,CAAU,wBAAwB,EAAE,KAAK,CAAC,CAAC;AAClF,QAAA,mBAAmB,GAAG,IAAI,0BAAa,CAAU,qBAAqB,EAAE,KAAK,CAAC,CAAC;AAC/E,QAAA,2BAA2B,GAAG,IAAI,0BAAa,CAAU,oBAAoB,EAAE,IAAI,CAAC,CAAC;AACrF,QAAA,yBAAyB,GAAG,IAAI,0BAAa,CAAU,oBAAoB,EAAE,KAAK,CAAC,CAAC;AACpF,QAAA,yBAAyB,GAAG,IAAI,0BAAa,CAAU,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACjF,QAAA,sBAAsB,GAAG,IAAI,0BAAa,CAAU,sBAAsB,EAAE,IAAI,CAAC,CAAC;AAElF,QAAA,2BAA2B,GAAG,2BAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACvE,QAAA,2BAA2B,GAAG,2BAAc,CAAC,GAAG,CAAC,2BAAc,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE,2BAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,2BAAc,CAAC,GAAG,CAAC,oCAAsB,CAAC,CAAC,CAAC;AACrL,QAAA,sBAAsB,GAAG,2BAAc,CAAC,GAAG,CAAC,2BAAc,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE,2BAAc,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE,2BAAc,CAAC,GAAG,CAAC,oCAAsB,CAAC,CAAC,CAAC;AAE/L;;GAEG;AACU,QAAA,mBAAmB,GAAG,wCAAwC,CAAC;AAE5E;;GAEG;AACU,QAAA,oBAAoB,GAAG,yCAAyC,CAAC;AAE9E;;GAEG;AACU,QAAA,qBAAqB,GAAG,0CAA0C,CAAC;AAyBnE,QAAA,sBAAsB,GAAG;IACrC,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,OAAO;IACd,WAAW,EAAE,YAAY;IACzB,IAAI,EAAE,MAAM;IACZ,QAAQ,EAAE,UAAU;CACpB,CAAC;AAIF;IAGC,mCACoC,eAAiC,EACrC,WAAyB,EACzB,WAAyB,EACxB,YAA2B;QAHxB,oBAAe,GAAf,eAAe,CAAkB;QACrC,gBAAW,GAAX,WAAW,CAAc;QACzB,gBAAW,GAAX,WAAW,CAAc;QACxB,iBAAY,GAAZ,YAAY,CAAe;IAE5D,CAAC;IAED,sDAAkB,GAAlB,UAAmB,QAAa;QAAhC,iBAwBC;QAvBA,IAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAEnE,sDAAsD;QACtD,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,eAAe;YAE5D,gEAAgE;YAChE,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE;gBACtB,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,UAAA,OAAO;oBACxD,IAAI,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,sBAAc,CAAC,OAAO,CAAC,EAAE;wBACjE,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC,qCAAqC;qBAC9G;gBACF,CAAC,CAAC,CAAC;gBAEH,IAAI,eAAe,EAAE;oBACpB,IAAM,iBAAe,GAAG,eAAe,CAAC,aAAa,CAAC;wBACrD,iBAAe,CAAC,OAAO,EAAE,CAAC;wBAC1B,KAAI,CAAC,WAAW,GAAG,mBAAO,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC;iBACH;aACD;YAED,OAAO,eAAe,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAIO,sDAAkB,GAA1B,UAA2B,QAAa,EAAE,cAA8B;QAAxE,iBAsBC;QAtByC,+BAAA,EAAA,qBAA8B;QACvE,IAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAEnE,OAAO,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YAC9E,IAAI,eAAe,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,eAAe,EAAE;gBACpB,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;aAC9D;iBAAM,IAAI,cAAc,EAAE;gBAC1B,IAAM,eAAe,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;gBAEvE,IAAI,gBAAgB,SAAoB,CAAC;gBACzC,IAAI,eAAe,EAAE;oBACpB,gBAAgB,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC;iBACxE;qBAAM;oBACN,gBAAgB,GAAG,KAAI,CAAC,WAAW,CAAC,2BAA2B,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;iBAC3F;gBAED,eAAe,GAAG,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;aAC3F;YAED,OAAO,eAAe,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,2CAAO,GAAP;QACC,IAAI,CAAC,WAAW,GAAG,mBAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAjEW,yBAAyB;QAInC,mBAAA,4BAAgB,CAAA;QAChB,mBAAA,oBAAY,CAAA;QACZ,mBAAA,0BAAY,CAAA;QACZ,mBAAA,4BAAa,CAAA;OAPH,yBAAyB,CAkErC;IAAD,gCAAC;CAAA,AAlED,IAkEC;AAlEY,8DAAyB;AAoEtC;IAEC,oBAAoB,OAAqB,EAAU,MAAoB;QAAnD,YAAO,GAAP,OAAO,CAAc;QAAU,WAAM,GAAN,MAAM,CAAc;QACtE,OAAO;IACR,CAAC;IAED,sBAAW,8BAAM;aAAjB;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAW,mCAAW;aAAtB;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;;;OAAA;IAED,sBAAW,6BAAK;aAAhB;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAED,sBAAW,+BAAO;aAAlB;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;QACvB,CAAC;;;OAAA;IAEM,0BAAK,GAAZ;QACC,OAAO,gBAAc,IAAI,CAAC,OAAO,SAAI,IAAI,CAAC,WAAW,SAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,SAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAI,CAAC;IAClH,CAAC;IAEM,8BAAS,GAAhB;QACC,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM,CAAC;IAClD,CAAC;IAEM,+BAAU,GAAjB;QACC,OAAO,CAAC,CAAC,mBAAU,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,iBAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzF,CAAC;IAEM,4BAAO,GAAd;QACC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEM,gCAAW,GAAlB;QACC,OAAO,mBAAU,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,CAAC;IACF,iBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,gCAAU","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IWorkbenchEditorConfiguration, IEditorIdentifier, IEditorInput, toResource } from 'vs/workbench/common/editor';\nimport { IFilesConfiguration, FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Event } from 'vs/base/common/event';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService, ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { InputFocusedContextKey } from 'vs/platform/contextkey/common/contextkeys';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainer } from 'vs/workbench/common/views';\nimport { Schemas } from 'vs/base/common/network';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ExplorerItem } from 'vs/workbench/contrib/files/common/explorerModel';\n\n/**\n * Explorer viewlet id.\n */\nexport const VIEWLET_ID = 'workbench.view.explorer';\n/**\n * Explorer viewlet container.\n */\nexport const VIEW_CONTAINER: ViewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer(VIEWLET_ID);\n\nexport interface IEditableData {\n\tvalidationMessage: (value: string) => string | null;\n\tonFinish: (value: string, success: boolean) => void;\n}\n\nexport interface IExplorerService {\n\t_serviceBrand: any;\n\treadonly roots: ExplorerItem[];\n\treadonly sortOrder: SortOrder;\n\treadonly onDidChangeRoots: Event<void>;\n\treadonly onDidChangeItem: Event<ExplorerItem | undefined>;\n\treadonly onDidChangeEditable: Event<ExplorerItem>;\n\treadonly onDidSelectResource: Event<{ resource?: URI, reveal?: boolean }>;\n\treadonly onDidCopyItems: Event<{ items: ExplorerItem[], cut: boolean, previouslyCutItems: ExplorerItem[] | undefined }>;\n\n\tsetEditable(stat: ExplorerItem, data: IEditableData | null): void;\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined;\n\t// If undefined is passed checks if any element is currently being edited.\n\tisEditable(stat: ExplorerItem | undefined): boolean;\n\tfindClosest(resource: URI): ExplorerItem | null;\n\trefresh(): void;\n\tsetToCopy(stats: ExplorerItem[], cut: boolean): void;\n\tisCut(stat: ExplorerItem): boolean;\n\n\t/**\n\t * Selects and reveal the file element provided by the given resource if its found in the explorer. Will try to\n\t * resolve the path from the disk in case the explorer is not yet expanded to the file yet.\n\t */\n\tselect(resource: URI, reveal?: boolean): Promise<void>;\n}\nexport const IExplorerService = createDecorator<IExplorerService>('explorerService');\n\n/**\n * Context Keys to use with keybindings for the Explorer and Open Editors view\n */\nconst explorerViewletVisibleId = 'explorerViewletVisible';\nconst filesExplorerFocusId = 'filesExplorerFocus';\nconst openEditorsVisibleId = 'openEditorsVisible';\nconst openEditorsFocusId = 'openEditorsFocus';\nconst explorerViewletFocusId = 'explorerViewletFocus';\nconst explorerResourceIsFolderId = 'explorerResourceIsFolder';\nconst explorerResourceReadonly = 'explorerResourceReadonly';\nconst explorerResourceIsRootId = 'explorerResourceIsRoot';\nconst explorerResourceCutId = 'explorerResourceCut';\n\nexport const ExplorerViewletVisibleContext = new RawContextKey<boolean>(explorerViewletVisibleId, true);\nexport const ExplorerFolderContext = new RawContextKey<boolean>(explorerResourceIsFolderId, false);\nexport const ExplorerResourceReadonlyContext = new RawContextKey<boolean>(explorerResourceReadonly, false);\nexport const ExplorerResourceNotReadonlyContext = ExplorerResourceReadonlyContext.toNegated();\nexport const ExplorerRootContext = new RawContextKey<boolean>(explorerResourceIsRootId, false);\nexport const ExplorerResourceCut = new RawContextKey<boolean>(explorerResourceCutId, false);\nexport const FilesExplorerFocusedContext = new RawContextKey<boolean>(filesExplorerFocusId, true);\nexport const OpenEditorsVisibleContext = new RawContextKey<boolean>(openEditorsVisibleId, false);\nexport const OpenEditorsFocusedContext = new RawContextKey<boolean>(openEditorsFocusId, true);\nexport const ExplorerFocusedContext = new RawContextKey<boolean>(explorerViewletFocusId, true);\n\nexport const OpenEditorsVisibleCondition = ContextKeyExpr.has(openEditorsVisibleId);\nexport const FilesExplorerFocusCondition = ContextKeyExpr.and(ContextKeyExpr.has(explorerViewletVisibleId), ContextKeyExpr.has(filesExplorerFocusId), ContextKeyExpr.not(InputFocusedContextKey));\nexport const ExplorerFocusCondition = ContextKeyExpr.and(ContextKeyExpr.has(explorerViewletVisibleId), ContextKeyExpr.has(explorerViewletFocusId), ContextKeyExpr.not(InputFocusedContextKey));\n\n/**\n * Text file editor id.\n */\nexport const TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n\n/**\n * File editor input id.\n */\nexport const FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n\n/**\n * Binary file editor id.\n */\nexport const BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\n\n\nexport interface IFilesConfiguration extends IFilesConfiguration, IWorkbenchEditorConfiguration {\n\texplorer: {\n\t\topenEditors: {\n\t\t\tvisible: number;\n\t\t};\n\t\tautoReveal: boolean;\n\t\tenableDragAndDrop: boolean;\n\t\tconfirmDelete: boolean;\n\t\tsortOrder: SortOrder;\n\t\tdecorations: {\n\t\t\tcolors: boolean;\n\t\t\tbadges: boolean;\n\t\t};\n\t};\n\teditor: IEditorOptions;\n}\n\nexport interface IFileResource {\n\tresource: URI;\n\tisDirectory?: boolean;\n}\n\nexport const SortOrderConfiguration = {\n\tDEFAULT: 'default',\n\tMIXED: 'mixed',\n\tFILES_FIRST: 'filesFirst',\n\tTYPE: 'type',\n\tMODIFIED: 'modified'\n};\n\nexport type SortOrder = 'default' | 'mixed' | 'filesFirst' | 'type' | 'modified';\n\nexport class FileOnDiskContentProvider implements ITextModelContentProvider {\n\tprivate fileWatcher: IDisposable;\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> {\n\t\tconst fileOnDiskResource = resource.with({ scheme: Schemas.file });\n\n\t\t// Make sure our file from disk is resolved up to date\n\t\treturn this.resolveEditorModel(resource).then(codeEditorModel => {\n\n\t\t\t// Make sure to keep contents on disk up to date when it changes\n\t\t\tif (!this.fileWatcher) {\n\t\t\t\tthis.fileWatcher = this.fileService.onFileChanges(changes => {\n\t\t\t\t\tif (changes.contains(fileOnDiskResource, FileChangeType.UPDATED)) {\n\t\t\t\t\t\tthis.resolveEditorModel(resource, false /* do not create if missing */); // update model when resource changes\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (codeEditorModel) {\n\t\t\t\t\tconst disposeListener = codeEditorModel.onWillDispose(() => {\n\t\t\t\t\t\tdisposeListener.dispose();\n\t\t\t\t\t\tthis.fileWatcher = dispose(this.fileWatcher);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn codeEditorModel;\n\t\t});\n\t}\n\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: true): Promise<ITextModel>;\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: boolean): Promise<ITextModel | null>;\n\tprivate resolveEditorModel(resource: URI, createAsNeeded: boolean = true): Promise<ITextModel | null> {\n\t\tconst fileOnDiskResource = resource.with({ scheme: Schemas.file });\n\n\t\treturn this.textFileService.resolveTextContent(fileOnDiskResource).then(content => {\n\t\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\t\tif (codeEditorModel) {\n\t\t\t\tthis.modelService.updateModel(codeEditorModel, content.value);\n\t\t\t} else if (createAsNeeded) {\n\t\t\t\tconst fileOnDiskModel = this.modelService.getModel(fileOnDiskResource);\n\n\t\t\t\tlet languageSelector: ILanguageSelection;\n\t\t\t\tif (fileOnDiskModel) {\n\t\t\t\t\tlanguageSelector = this.modeService.create(fileOnDiskModel.getModeId());\n\t\t\t\t} else {\n\t\t\t\t\tlanguageSelector = this.modeService.createByFilepathOrFirstLine(fileOnDiskResource.fsPath);\n\t\t\t\t}\n\n\t\t\t\tcodeEditorModel = this.modelService.createModel(content.value, languageSelector, resource);\n\t\t\t}\n\n\t\t\treturn codeEditorModel;\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.fileWatcher = dispose(this.fileWatcher);\n\t}\n}\n\nexport class OpenEditor implements IEditorIdentifier {\n\n\tconstructor(private _editor: IEditorInput, private _group: IEditorGroup) {\n\t\t// noop\n\t}\n\n\tpublic get editor() {\n\t\treturn this._editor;\n\t}\n\n\tpublic get editorIndex() {\n\t\treturn this._group.getIndexOfEditor(this.editor);\n\t}\n\n\tpublic get group() {\n\t\treturn this._group;\n\t}\n\n\tpublic get groupId() {\n\t\treturn this._group.id;\n\t}\n\n\tpublic getId(): string {\n\t\treturn `openeditor:${this.groupId}:${this.editorIndex}:${this.editor.getName()}:${this.editor.getDescription()}`;\n\t}\n\n\tpublic isPreview(): boolean {\n\t\treturn this._group.previewEditor === this.editor;\n\t}\n\n\tpublic isUntitled(): boolean {\n\t\treturn !!toResource(this.editor, { supportSideBySide: true, filter: Schemas.untitled });\n\t}\n\n\tpublic isDirty(): boolean {\n\t\treturn this.editor.isDirty();\n\t}\n\n\tpublic getResource(): URI | null {\n\t\treturn toResource(this.editor, { supportSideBySide: true });\n\t}\n}\n"]}]}