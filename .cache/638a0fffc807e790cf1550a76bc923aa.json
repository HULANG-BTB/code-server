{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"vs/css!./dnd\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorCommon = require(\"vs/editor/common/editorCommon\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar dragAndDropCommand_1 = require(\"vs/editor/contrib/dnd/dragAndDropCommand\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nfunction hasTriggerModifier(e) {\n    if (browser_1.isMacintosh) {\n        return e.altKey;\n    }\n    else {\n        return e.ctrlKey;\n    }\n}\nvar DragAndDropController = /** @class */ (function () {\n    function DragAndDropController(editor) {\n        var _this = this;\n        this._editor = editor;\n        this._toUnhook = [];\n        this._toUnhook.push(this._editor.onMouseDown(function (e) { return _this._onEditorMouseDown(e); }));\n        this._toUnhook.push(this._editor.onMouseUp(function (e) { return _this._onEditorMouseUp(e); }));\n        this._toUnhook.push(this._editor.onMouseDrag(function (e) { return _this._onEditorMouseDrag(e); }));\n        this._toUnhook.push(this._editor.onMouseDrop(function (e) { return _this._onEditorMouseDrop(e); }));\n        this._toUnhook.push(this._editor.onKeyDown(function (e) { return _this.onEditorKeyDown(e); }));\n        this._toUnhook.push(this._editor.onKeyUp(function (e) { return _this.onEditorKeyUp(e); }));\n        this._toUnhook.push(this._editor.onDidBlurEditorWidget(function () { return _this.onEditorBlur(); }));\n        this._dndDecorationIds = [];\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        this._dragSelection = null;\n    }\n    DragAndDropController.get = function (editor) {\n        return editor.getContribution(DragAndDropController.ID);\n    };\n    DragAndDropController.prototype.onEditorBlur = function () {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n    };\n    DragAndDropController.prototype.onEditorKeyDown = function (e) {\n        if (!this._editor.getConfiguration().dragAndDrop) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = true;\n        }\n        if (this._mouseDown && hasTriggerModifier(e)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n    };\n    DragAndDropController.prototype.onEditorKeyUp = function (e) {\n        if (!this._editor.getConfiguration().dragAndDrop) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = false;\n        }\n        if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n    };\n    DragAndDropController.prototype._onEditorMouseDown = function (mouseEvent) {\n        this._mouseDown = true;\n    };\n    DragAndDropController.prototype._onEditorMouseUp = function (mouseEvent) {\n        this._mouseDown = false;\n        // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n    };\n    DragAndDropController.prototype._onEditorMouseDrag = function (mouseEvent) {\n        var target = mouseEvent.target;\n        if (this._dragSelection === null) {\n            var selections = this._editor.getSelections() || [];\n            var possibleSelections = selections.filter(function (selection) { return target.position && selection.containsPosition(target.position); });\n            if (possibleSelections.length === 1) {\n                this._dragSelection = possibleSelections[0];\n            }\n            else {\n                return;\n            }\n        }\n        if (hasTriggerModifier(mouseEvent.event)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n        else {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n        if (target.position) {\n            if (this._dragSelection.containsPosition(target.position)) {\n                this._removeDecoration();\n            }\n            else {\n                this.showAt(target.position);\n            }\n        }\n    };\n    DragAndDropController.prototype._onEditorMouseDrop = function (mouseEvent) {\n        if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n            var newCursorPosition_1 = new position_1.Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n            if (this._dragSelection === null) {\n                var newSelections = null;\n                if (mouseEvent.event.shiftKey) {\n                    var primarySelection = this._editor.getSelection();\n                    if (primarySelection) {\n                        var selectionStartLineNumber = primarySelection.selectionStartLineNumber, selectionStartColumn = primarySelection.selectionStartColumn;\n                        newSelections = [new selection_1.Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition_1.lineNumber, newCursorPosition_1.column)];\n                    }\n                }\n                else {\n                    newSelections = (this._editor.getSelections() || []).map(function (selection) {\n                        if (selection.containsPosition(newCursorPosition_1)) {\n                            return new selection_1.Selection(newCursorPosition_1.lineNumber, newCursorPosition_1.column, newCursorPosition_1.lineNumber, newCursorPosition_1.column);\n                        }\n                        else {\n                            return selection;\n                        }\n                    });\n                }\n                // Use `mouse` as the source instead of `api`.\n                this._editor.setSelections(newSelections || [], 'mouse');\n            }\n            else if (!this._dragSelection.containsPosition(newCursorPosition_1) ||\n                ((hasTriggerModifier(mouseEvent.event) ||\n                    this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition_1) || this._dragSelection.getStartPosition().equals(newCursorPosition_1)) // we allow users to paste content beside the selection\n                )) {\n                this._editor.pushUndoStop();\n                this._editor.executeCommand(DragAndDropController.ID, new dragAndDropCommand_1.DragAndDropCommand(this._dragSelection, newCursorPosition_1, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n                this._editor.pushUndoStop();\n            }\n        }\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n    };\n    DragAndDropController.prototype.showAt = function (position) {\n        var newDecorations = [{\n                range: new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column),\n                options: DragAndDropController._DECORATION_OPTIONS\n            }];\n        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n        this._editor.revealPosition(position, editorCommon.ScrollType.Immediate);\n    };\n    DragAndDropController.prototype._removeDecoration = function () {\n        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n    };\n    DragAndDropController.prototype._hitContent = function (target) {\n        return target.type === editorBrowser_1.MouseTargetType.CONTENT_TEXT ||\n            target.type === editorBrowser_1.MouseTargetType.CONTENT_EMPTY;\n    };\n    DragAndDropController.prototype._hitMargin = function (target) {\n        return target.type === editorBrowser_1.MouseTargetType.GUTTER_GLYPH_MARGIN ||\n            target.type === editorBrowser_1.MouseTargetType.GUTTER_LINE_NUMBERS ||\n            target.type === editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS;\n    };\n    DragAndDropController.prototype.getId = function () {\n        return DragAndDropController.ID;\n    };\n    DragAndDropController.prototype.dispose = function () {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        this._toUnhook = lifecycle_1.dispose(this._toUnhook);\n    };\n    DragAndDropController.ID = 'editor.contrib.dragAndDrop';\n    DragAndDropController.TRIGGER_KEY_VALUE = browser_1.isMacintosh ? keyCodes_1.KeyCode.Alt : keyCodes_1.KeyCode.Ctrl;\n    DragAndDropController._DECORATION_OPTIONS = textModel_1.ModelDecorationOptions.register({\n        className: 'dnd-target'\n    });\n    return DragAndDropController;\n}());\nexports.DragAndDropController = DragAndDropController;\neditorExtensions_1.registerEditorContribution(DragAndDropController);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./dnd';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { isMacintosh } from 'vs/base/browser/browser';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { ICodeEditor, IEditorMouseEvent, IMouseTarget, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { DragAndDropCommand } from 'vs/editor/contrib/dnd/dragAndDropCommand';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { IModelDeltaDecoration } from 'vs/editor/common/model';\nimport { IMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\n\nfunction hasTriggerModifier(e: IKeyboardEvent | IMouseEvent): boolean {\n\tif (isMacintosh) {\n\t\treturn e.altKey;\n\t} else {\n\t\treturn e.ctrlKey;\n\t}\n}\n\nexport class DragAndDropController implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.dragAndDrop';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _toUnhook: IDisposable[];\n\tprivate _dragSelection: Selection | null;\n\tprivate _dndDecorationIds: string[];\n\tprivate _mouseDown: boolean;\n\tprivate _modifierPressed: boolean;\n\tstatic TRIGGER_KEY_VALUE = isMacintosh ? KeyCode.Alt : KeyCode.Ctrl;\n\n\tstatic get(editor: ICodeEditor): DragAndDropController {\n\t\treturn editor.getContribution<DragAndDropController>(DragAndDropController.ID);\n\t}\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis._editor = editor;\n\t\tthis._toUnhook = [];\n\t\tthis._toUnhook.push(this._editor.onMouseDown((e: IEditorMouseEvent) => this._onEditorMouseDown(e)));\n\t\tthis._toUnhook.push(this._editor.onMouseUp((e: IEditorMouseEvent) => this._onEditorMouseUp(e)));\n\t\tthis._toUnhook.push(this._editor.onMouseDrag((e: IEditorMouseEvent) => this._onEditorMouseDrag(e)));\n\t\tthis._toUnhook.push(this._editor.onMouseDrop((e: IEditorMouseEvent) => this._onEditorMouseDrop(e)));\n\t\tthis._toUnhook.push(this._editor.onKeyDown((e: IKeyboardEvent) => this.onEditorKeyDown(e)));\n\t\tthis._toUnhook.push(this._editor.onKeyUp((e: IKeyboardEvent) => this.onEditorKeyUp(e)));\n\t\tthis._toUnhook.push(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n\t\tthis._dndDecorationIds = [];\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t\tthis._dragSelection = null;\n\t}\n\n\tprivate onEditorBlur() {\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t}\n\n\tprivate onEditorKeyDown(e: IKeyboardEvent): void {\n\t\tif (!this._editor.getConfiguration().dragAndDrop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (hasTriggerModifier(e)) {\n\t\t\tthis._modifierPressed = true;\n\t\t}\n\n\t\tif (this._mouseDown && hasTriggerModifier(e)) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: 'copy'\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onEditorKeyUp(e: IKeyboardEvent): void {\n\t\tif (!this._editor.getConfiguration().dragAndDrop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (hasTriggerModifier(e)) {\n\t\t\tthis._modifierPressed = false;\n\t\t}\n\n\t\tif (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: 'default'\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onEditorMouseDown(mouseEvent: IEditorMouseEvent): void {\n\t\tthis._mouseDown = true;\n\t}\n\n\tprivate _onEditorMouseUp(mouseEvent: IEditorMouseEvent): void {\n\t\tthis._mouseDown = false;\n\t\t// Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n\t\tthis._editor.updateOptions({\n\t\t\tmouseStyle: 'text'\n\t\t});\n\t}\n\n\tprivate _onEditorMouseDrag(mouseEvent: IEditorMouseEvent): void {\n\t\tlet target = mouseEvent.target;\n\n\t\tif (this._dragSelection === null) {\n\t\t\tconst selections = this._editor.getSelections() || [];\n\t\t\tlet possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n\t\t\tif (possibleSelections.length === 1) {\n\t\t\t\tthis._dragSelection = possibleSelections[0];\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (hasTriggerModifier(mouseEvent.event)) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: 'copy'\n\t\t\t});\n\t\t} else {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: 'default'\n\t\t\t});\n\t\t}\n\n\t\tif (target.position) {\n\t\t\tif (this._dragSelection.containsPosition(target.position)) {\n\t\t\t\tthis._removeDecoration();\n\t\t\t} else {\n\t\t\t\tthis.showAt(target.position);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onEditorMouseDrop(mouseEvent: IEditorMouseEvent): void {\n\t\tif (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n\t\t\tlet newCursorPosition = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n\n\t\t\tif (this._dragSelection === null) {\n\t\t\t\tlet newSelections: Selection[] | null = null;\n\t\t\t\tif (mouseEvent.event.shiftKey) {\n\t\t\t\t\tlet primarySelection = this._editor.getSelection();\n\t\t\t\t\tif (primarySelection) {\n\t\t\t\t\t\tconst { selectionStartLineNumber, selectionStartColumn } = primarySelection;\n\t\t\t\t\t\tnewSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewSelections = (this._editor.getSelections() || []).map(selection => {\n\t\t\t\t\t\tif (selection.containsPosition(newCursorPosition)) {\n\t\t\t\t\t\t\treturn new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn selection;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Use `mouse` as the source instead of `api`.\n\t\t\t\t(<CodeEditorWidget>this._editor).setSelections(newSelections || [], 'mouse');\n\t\t\t} else if (!this._dragSelection.containsPosition(newCursorPosition) ||\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\thasTriggerModifier(mouseEvent.event) ||\n\t\t\t\t\t\tthis._modifierPressed\n\t\t\t\t\t) && (\n\t\t\t\t\t\tthis._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)\n\t\t\t\t\t) // we allow users to paste content beside the selection\n\t\t\t\t)) {\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t\tthis._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t}\n\t\t}\n\n\t\tthis._editor.updateOptions({\n\t\t\tmouseStyle: 'text'\n\t\t});\n\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t}\n\n\tprivate static readonly _DECORATION_OPTIONS = ModelDecorationOptions.register({\n\t\tclassName: 'dnd-target'\n\t});\n\n\tpublic showAt(position: Position): void {\n\t\tlet newDecorations: IModelDeltaDecoration[] = [{\n\t\t\trange: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n\t\t\toptions: DragAndDropController._DECORATION_OPTIONS\n\t\t}];\n\n\t\tthis._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n\t\tthis._editor.revealPosition(position, editorCommon.ScrollType.Immediate);\n\t}\n\n\tprivate _removeDecoration(): void {\n\t\tthis._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n\t}\n\n\tprivate _hitContent(target: IMouseTarget): boolean {\n\t\treturn target.type === MouseTargetType.CONTENT_TEXT ||\n\t\t\ttarget.type === MouseTargetType.CONTENT_EMPTY;\n\t}\n\n\tprivate _hitMargin(target: IMouseTarget): boolean {\n\t\treturn target.type === MouseTargetType.GUTTER_GLYPH_MARGIN ||\n\t\t\ttarget.type === MouseTargetType.GUTTER_LINE_NUMBERS ||\n\t\t\ttarget.type === MouseTargetType.GUTTER_LINE_DECORATIONS;\n\t}\n\n\tpublic getId(): string {\n\t\treturn DragAndDropController.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t\tthis._toUnhook = dispose(this._toUnhook);\n\t}\n}\n\nregisterEditorContribution(DragAndDropController);\n"]}]}