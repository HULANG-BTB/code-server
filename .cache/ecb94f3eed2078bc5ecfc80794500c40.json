{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * @internal\n     */\n    var RawContentChangedType;\n    (function (RawContentChangedType) {\n        RawContentChangedType[RawContentChangedType[\"Flush\"] = 1] = \"Flush\";\n        RawContentChangedType[RawContentChangedType[\"LineChanged\"] = 2] = \"LineChanged\";\n        RawContentChangedType[RawContentChangedType[\"LinesDeleted\"] = 3] = \"LinesDeleted\";\n        RawContentChangedType[RawContentChangedType[\"LinesInserted\"] = 4] = \"LinesInserted\";\n        RawContentChangedType[RawContentChangedType[\"EOLChanged\"] = 5] = \"EOLChanged\";\n    })(RawContentChangedType = exports.RawContentChangedType || (exports.RawContentChangedType = {}));\n    /**\n     * An event describing that a model has been reset to a new value.\n     * @internal\n     */\n    class ModelRawFlush {\n        constructor() {\n            this.changeType = RawContentChangedType.Flush;\n        }\n    }\n    exports.ModelRawFlush = ModelRawFlush;\n    /**\n     * An event describing that a line has changed in a model.\n     * @internal\n     */\n    class ModelRawLineChanged {\n        constructor(lineNumber, detail) {\n            this.changeType = RawContentChangedType.LineChanged;\n            this.lineNumber = lineNumber;\n            this.detail = detail;\n        }\n    }\n    exports.ModelRawLineChanged = ModelRawLineChanged;\n    /**\n     * An event describing that line(s) have been deleted in a model.\n     * @internal\n     */\n    class ModelRawLinesDeleted {\n        constructor(fromLineNumber, toLineNumber) {\n            this.changeType = RawContentChangedType.LinesDeleted;\n            this.fromLineNumber = fromLineNumber;\n            this.toLineNumber = toLineNumber;\n        }\n    }\n    exports.ModelRawLinesDeleted = ModelRawLinesDeleted;\n    /**\n     * An event describing that line(s) have been inserted in a model.\n     * @internal\n     */\n    class ModelRawLinesInserted {\n        constructor(fromLineNumber, toLineNumber, detail) {\n            this.changeType = RawContentChangedType.LinesInserted;\n            this.fromLineNumber = fromLineNumber;\n            this.toLineNumber = toLineNumber;\n            this.detail = detail;\n        }\n    }\n    exports.ModelRawLinesInserted = ModelRawLinesInserted;\n    /**\n     * An event describing that a model has had its EOL changed.\n     * @internal\n     */\n    class ModelRawEOLChanged {\n        constructor() {\n            this.changeType = RawContentChangedType.EOLChanged;\n        }\n    }\n    exports.ModelRawEOLChanged = ModelRawEOLChanged;\n    /**\n     * An event describing a change in the text of a model.\n     * @internal\n     */\n    class ModelRawContentChangedEvent {\n        constructor(changes, versionId, isUndoing, isRedoing) {\n            this.changes = changes;\n            this.versionId = versionId;\n            this.isUndoing = isUndoing;\n            this.isRedoing = isRedoing;\n        }\n        containsEvent(type) {\n            for (let i = 0, len = this.changes.length; i < len; i++) {\n                const change = this.changes[i];\n                if (change.changeType === type) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        static merge(a, b) {\n            const changes = [].concat(a.changes).concat(b.changes);\n            const versionId = b.versionId;\n            const isUndoing = (a.isUndoing || b.isUndoing);\n            const isRedoing = (a.isRedoing || b.isRedoing);\n            return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n        }\n    }\n    exports.ModelRawContentChangedEvent = ModelRawContentChangedEvent;\n    /**\n     * @internal\n     */\n    class InternalModelContentChangeEvent {\n        constructor(rawContentChangedEvent, contentChangedEvent) {\n            this.rawContentChangedEvent = rawContentChangedEvent;\n            this.contentChangedEvent = contentChangedEvent;\n        }\n        merge(other) {\n            const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n            const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n            return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n        }\n        static _mergeChangeEvents(a, b) {\n            const changes = [].concat(a.changes).concat(b.changes);\n            const eol = b.eol;\n            const versionId = b.versionId;\n            const isUndoing = (a.isUndoing || b.isUndoing);\n            const isRedoing = (a.isRedoing || b.isRedoing);\n            const isFlush = (a.isFlush || b.isFlush);\n            return {\n                changes: changes,\n                eol: eol,\n                versionId: versionId,\n                isUndoing: isUndoing,\n                isRedoing: isRedoing,\n                isFlush: isFlush\n            };\n        }\n    }\n    exports.InternalModelContentChangeEvent = InternalModelContentChangeEvent;\n});\n",null]}