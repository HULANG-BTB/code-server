{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar EditorContextKeys;\n(function (EditorContextKeys) {\n    /**\n     * A context key that is set when the editor's text has focus (cursor is blinking).\n     */\n    EditorContextKeys.editorTextFocus = new contextkey_1.RawContextKey('editorTextFocus', false);\n    /**\n     * A context key that is set when the editor's text or an editor's widget has focus.\n     */\n    EditorContextKeys.focus = new contextkey_1.RawContextKey('editorFocus', false);\n    /**\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\n     */\n    EditorContextKeys.textInputFocus = new contextkey_1.RawContextKey('textInputFocus', false);\n    EditorContextKeys.readOnly = new contextkey_1.RawContextKey('editorReadonly', false);\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n    EditorContextKeys.hasNonEmptySelection = new contextkey_1.RawContextKey('editorHasSelection', false);\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n    EditorContextKeys.hasMultipleSelections = new contextkey_1.RawContextKey('editorHasMultipleSelections', false);\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n    EditorContextKeys.tabMovesFocus = new contextkey_1.RawContextKey('editorTabMovesFocus', false);\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n    EditorContextKeys.isInEmbeddedEditor = new contextkey_1.RawContextKey('isInEmbeddedEditor', false);\n    EditorContextKeys.canUndo = new contextkey_1.RawContextKey('canUndo', false);\n    EditorContextKeys.canRedo = new contextkey_1.RawContextKey('canRedo', false);\n    // -- mode context keys\n    EditorContextKeys.languageId = new contextkey_1.RawContextKey('editorLangId', '');\n    EditorContextKeys.hasCompletionItemProvider = new contextkey_1.RawContextKey('editorHasCompletionItemProvider', false);\n    EditorContextKeys.hasCodeActionsProvider = new contextkey_1.RawContextKey('editorHasCodeActionsProvider', false);\n    EditorContextKeys.hasCodeLensProvider = new contextkey_1.RawContextKey('editorHasCodeLensProvider', false);\n    EditorContextKeys.hasDefinitionProvider = new contextkey_1.RawContextKey('editorHasDefinitionProvider', false);\n    EditorContextKeys.hasDeclarationProvider = new contextkey_1.RawContextKey('editorHasDeclarationProvider', false);\n    EditorContextKeys.hasImplementationProvider = new contextkey_1.RawContextKey('editorHasImplementationProvider', false);\n    EditorContextKeys.hasTypeDefinitionProvider = new contextkey_1.RawContextKey('editorHasTypeDefinitionProvider', false);\n    EditorContextKeys.hasHoverProvider = new contextkey_1.RawContextKey('editorHasHoverProvider', false);\n    EditorContextKeys.hasDocumentHighlightProvider = new contextkey_1.RawContextKey('editorHasDocumentHighlightProvider', false);\n    EditorContextKeys.hasDocumentSymbolProvider = new contextkey_1.RawContextKey('editorHasDocumentSymbolProvider', false);\n    EditorContextKeys.hasReferenceProvider = new contextkey_1.RawContextKey('editorHasReferenceProvider', false);\n    EditorContextKeys.hasRenameProvider = new contextkey_1.RawContextKey('editorHasRenameProvider', false);\n    EditorContextKeys.hasSignatureHelpProvider = new contextkey_1.RawContextKey('editorHasSignatureHelpProvider', false);\n    // -- mode context keys: formatting\n    EditorContextKeys.hasDocumentFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentFormattingProvider', false);\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentSelectionFormattingProvider', false);\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new contextkey_1.RawContextKey('editorHasMultipleDocumentFormattingProvider', false);\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new contextkey_1.RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false);\n})(EditorContextKeys = exports.EditorContextKeys || (exports.EditorContextKeys = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/editorContextKeys.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,uEAAyF;AAEzF,IAAiB,iBAAiB,CAiDjC;AAjDD,WAAiB,iBAAiB;IACjC;;OAEG;IACU,iCAAe,GAAG,IAAI,0BAAa,CAAU,iBAAiB,EAAE,KAAK,CAAC,CAAC;IACpF;;OAEG;IACU,uBAAK,GAAG,IAAI,0BAAa,CAAU,aAAa,EAAE,KAAK,CAAC,CAAC;IAEtE;;OAEG;IACU,gCAAc,GAAG,IAAI,0BAAa,CAAU,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAErE,0BAAQ,GAAG,IAAI,0BAAa,CAAU,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAC/D,0BAAQ,GAAmB,kBAAA,QAAQ,CAAC,SAAS,EAAE,CAAC;IAChD,sCAAoB,GAAG,IAAI,0BAAa,CAAU,oBAAoB,EAAE,KAAK,CAAC,CAAC;IAC/E,uCAAqB,GAAmB,kBAAA,oBAAoB,CAAC,SAAS,EAAE,CAAC;IACzE,uCAAqB,GAAG,IAAI,0BAAa,CAAU,6BAA6B,EAAE,KAAK,CAAC,CAAC;IACzF,oCAAkB,GAAmB,kBAAA,qBAAqB,CAAC,SAAS,EAAE,CAAC;IACvE,+BAAa,GAAG,IAAI,0BAAa,CAAU,qBAAqB,EAAE,KAAK,CAAC,CAAC;IACzE,qCAAmB,GAAmB,kBAAA,aAAa,CAAC,SAAS,EAAE,CAAC;IAChE,oCAAkB,GAAG,IAAI,0BAAa,CAAU,oBAAoB,EAAE,KAAK,CAAC,CAAC;IAC7E,yBAAO,GAAG,IAAI,0BAAa,CAAU,SAAS,EAAE,KAAK,CAAC,CAAC;IACvD,yBAAO,GAAG,IAAI,0BAAa,CAAU,SAAS,EAAE,KAAK,CAAC,CAAC;IAEpE,uBAAuB;IACV,4BAAU,GAAG,IAAI,0BAAa,CAAS,cAAc,EAAE,EAAE,CAAC,CAAC;IAC3D,2CAAyB,GAAG,IAAI,0BAAa,CAAU,iCAAiC,EAAE,KAAK,CAAC,CAAC;IACjG,wCAAsB,GAAG,IAAI,0BAAa,CAAU,8BAA8B,EAAE,KAAK,CAAC,CAAC;IAC3F,qCAAmB,GAAG,IAAI,0BAAa,CAAU,2BAA2B,EAAE,KAAK,CAAC,CAAC;IACrF,uCAAqB,GAAG,IAAI,0BAAa,CAAU,6BAA6B,EAAE,KAAK,CAAC,CAAC;IACzF,wCAAsB,GAAG,IAAI,0BAAa,CAAU,8BAA8B,EAAE,KAAK,CAAC,CAAC;IAC3F,2CAAyB,GAAG,IAAI,0BAAa,CAAU,iCAAiC,EAAE,KAAK,CAAC,CAAC;IACjG,2CAAyB,GAAG,IAAI,0BAAa,CAAU,iCAAiC,EAAE,KAAK,CAAC,CAAC;IACjG,kCAAgB,GAAG,IAAI,0BAAa,CAAU,wBAAwB,EAAE,KAAK,CAAC,CAAC;IAC/E,8CAA4B,GAAG,IAAI,0BAAa,CAAU,oCAAoC,EAAE,KAAK,CAAC,CAAC;IACvG,2CAAyB,GAAG,IAAI,0BAAa,CAAU,iCAAiC,EAAE,KAAK,CAAC,CAAC;IACjG,sCAAoB,GAAG,IAAI,0BAAa,CAAU,4BAA4B,EAAE,KAAK,CAAC,CAAC;IACvF,mCAAiB,GAAG,IAAI,0BAAa,CAAU,yBAAyB,EAAE,KAAK,CAAC,CAAC;IACjF,0CAAwB,GAAG,IAAI,0BAAa,CAAU,gCAAgC,EAAE,KAAK,CAAC,CAAC;IAE5G,mCAAmC;IACtB,+CAA6B,GAAG,IAAI,0BAAa,CAAU,qCAAqC,EAAE,KAAK,CAAC,CAAC;IACzG,wDAAsC,GAAG,IAAI,0BAAa,CAAU,8CAA8C,EAAE,KAAK,CAAC,CAAC;IAC3H,uDAAqC,GAAG,IAAI,0BAAa,CAAU,6CAA6C,EAAE,KAAK,CAAC,CAAC;IACzH,gEAA8C,GAAG,IAAI,0BAAa,CAAU,sDAAsD,EAAE,KAAK,CAAC,CAAC;AAEzJ,CAAC,EAjDgB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAiDjC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport namespace EditorContextKeys {\n\t/**\n\t * A context key that is set when the editor's text has focus (cursor is blinking).\n\t */\n\texport const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false);\n\t/**\n\t * A context key that is set when the editor's text or an editor's widget has focus.\n\t */\n\texport const focus = new RawContextKey<boolean>('editorFocus', false);\n\n\t/**\n\t * A context key that is set when any editor input has focus (regular editor, repl input...).\n\t */\n\texport const textInputFocus = new RawContextKey<boolean>('textInputFocus', false);\n\n\texport const readOnly = new RawContextKey<boolean>('editorReadonly', false);\n\texport const writable: ContextKeyExpr = readOnly.toNegated();\n\texport const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false);\n\texport const hasOnlyEmptySelection: ContextKeyExpr = hasNonEmptySelection.toNegated();\n\texport const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false);\n\texport const hasSingleSelection: ContextKeyExpr = hasMultipleSelections.toNegated();\n\texport const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false);\n\texport const tabDoesNotMoveFocus: ContextKeyExpr = tabMovesFocus.toNegated();\n\texport const isInEmbeddedEditor = new RawContextKey<boolean>('isInEmbeddedEditor', false);\n\texport const canUndo = new RawContextKey<boolean>('canUndo', false);\n\texport const canRedo = new RawContextKey<boolean>('canRedo', false);\n\n\t// -- mode context keys\n\texport const languageId = new RawContextKey<string>('editorLangId', '');\n\texport const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false);\n\texport const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false);\n\texport const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false);\n\texport const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false);\n\texport const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false);\n\texport const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false);\n\texport const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false);\n\texport const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false);\n\texport const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false);\n\texport const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false);\n\texport const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false);\n\texport const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false);\n\texport const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false);\n\n\t// -- mode context keys: formatting\n\texport const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false);\n\texport const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false);\n\texport const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false);\n\texport const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false);\n\n}\n"]}]}