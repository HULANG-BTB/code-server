{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/platform/windows/common/windows\", \"vs/base/common/lifecycle\", \"vs/platform/workspaces/common/workspaces\", \"vs/platform/label/common/label\"], function (require, exports, event_1, windows_1, lifecycle_1, workspaces_1, label_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WindowService = class WindowService extends lifecycle_1.Disposable {\n        constructor(configuration, windowsService, labelService) {\n            super();\n            this.configuration = configuration;\n            this.windowsService = windowsService;\n            this.labelService = labelService;\n            this.windowId = configuration.windowId;\n            const onThisWindowFocus = event_1.Event.map(event_1.Event.filter(windowsService.onWindowFocus, id => id === this.windowId), _ => true);\n            const onThisWindowBlur = event_1.Event.map(event_1.Event.filter(windowsService.onWindowBlur, id => id === this.windowId), _ => false);\n            const onThisWindowMaximize = event_1.Event.map(event_1.Event.filter(windowsService.onWindowMaximize, id => id === this.windowId), _ => true);\n            const onThisWindowUnmaximize = event_1.Event.map(event_1.Event.filter(windowsService.onWindowUnmaximize, id => id === this.windowId), _ => false);\n            this.onDidChangeFocus = event_1.Event.any(onThisWindowFocus, onThisWindowBlur);\n            this.onDidChangeMaximize = event_1.Event.any(onThisWindowMaximize, onThisWindowUnmaximize);\n            this._hasFocus = document.hasFocus();\n            this.isFocused().then(focused => this._hasFocus = focused);\n            this._register(this.onDidChangeFocus(focus => this._hasFocus = focus));\n        }\n        get hasFocus() { return this._hasFocus; }\n        getCurrentWindowId() {\n            return this.windowId;\n        }\n        getConfiguration() {\n            return this.configuration;\n        }\n        pickFileFolderAndOpen(options) {\n            options.windowId = this.windowId;\n            return this.windowsService.pickFileFolderAndOpen(options);\n        }\n        pickFileAndOpen(options) {\n            options.windowId = this.windowId;\n            return this.windowsService.pickFileAndOpen(options);\n        }\n        pickFolderAndOpen(options) {\n            options.windowId = this.windowId;\n            return this.windowsService.pickFolderAndOpen(options);\n        }\n        pickWorkspaceAndOpen(options) {\n            options.windowId = this.windowId;\n            return this.windowsService.pickWorkspaceAndOpen(options);\n        }\n        reloadWindow(args) {\n            return this.windowsService.reloadWindow(this.windowId, args);\n        }\n        openDevTools(options) {\n            return this.windowsService.openDevTools(this.windowId, options);\n        }\n        toggleDevTools() {\n            return this.windowsService.toggleDevTools(this.windowId);\n        }\n        closeWorkspace() {\n            return this.windowsService.closeWorkspace(this.windowId);\n        }\n        enterWorkspace(path) {\n            return this.windowsService.enterWorkspace(this.windowId, path);\n        }\n        openWindow(uris, options = {}) {\n            if (!!this.configuration.remoteAuthority) {\n                uris.forEach(u => u.label = u.label || this.getRecentLabel(u, !!(options && options.forceOpenWorkspaceAsFile)));\n            }\n            return this.windowsService.openWindow(this.windowId, uris, options);\n        }\n        closeWindow() {\n            return this.windowsService.closeWindow(this.windowId);\n        }\n        toggleFullScreen() {\n            return this.windowsService.toggleFullScreen(this.windowId);\n        }\n        setRepresentedFilename(fileName) {\n            return this.windowsService.setRepresentedFilename(this.windowId, fileName);\n        }\n        getRecentlyOpened() {\n            return this.windowsService.getRecentlyOpened(this.windowId);\n        }\n        focusWindow() {\n            return this.windowsService.focusWindow(this.windowId);\n        }\n        isFocused() {\n            return this.windowsService.isFocused(this.windowId);\n        }\n        isMaximized() {\n            return this.windowsService.isMaximized(this.windowId);\n        }\n        maximizeWindow() {\n            return this.windowsService.maximizeWindow(this.windowId);\n        }\n        unmaximizeWindow() {\n            return this.windowsService.unmaximizeWindow(this.windowId);\n        }\n        minimizeWindow() {\n            return this.windowsService.minimizeWindow(this.windowId);\n        }\n        onWindowTitleDoubleClick() {\n            return this.windowsService.onWindowTitleDoubleClick(this.windowId);\n        }\n        setDocumentEdited(flag) {\n            return this.windowsService.setDocumentEdited(this.windowId, flag);\n        }\n        showMessageBox(options) {\n            return this.windowsService.showMessageBox(this.windowId, options);\n        }\n        showSaveDialog(options) {\n            return this.windowsService.showSaveDialog(this.windowId, options);\n        }\n        showOpenDialog(options) {\n            return this.windowsService.showOpenDialog(this.windowId, options);\n        }\n        updateTouchBar(items) {\n            return this.windowsService.updateTouchBar(this.windowId, items);\n        }\n        resolveProxy(url) {\n            return this.windowsService.resolveProxy(this.windowId, url);\n        }\n        getRecentLabel(u, forceOpenWorkspaceAsFile) {\n            if (u.typeHint === 'folder') {\n                return this.labelService.getWorkspaceLabel(u.uri, { verbose: true });\n            }\n            else if (!forceOpenWorkspaceAsFile && workspaces_1.hasWorkspaceFileExtension(u.uri.path)) {\n                return this.labelService.getWorkspaceLabel({ id: '', configPath: u.uri }, { verbose: true });\n            }\n            else {\n                return this.labelService.getUriLabel(u.uri);\n            }\n        }\n    };\n    WindowService = __decorate([\n        __param(1, windows_1.IWindowsService),\n        __param(2, label_1.ILabelService)\n    ], WindowService);\n    exports.WindowService = WindowService;\n});\n",null]}