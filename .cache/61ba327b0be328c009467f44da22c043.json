{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocuments.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocuments.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostDocumentData\", \"vs/workbench/api/node/extHostTypeConverters\"], function (require, exports, event_1, lifecycle_1, uri_1, extHost_protocol_1, extHostDocumentData_1, TypeConverters) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostDocuments {\n        constructor(mainContext, documentsAndEditors) {\n            this._onDidAddDocument = new event_1.Emitter();\n            this._onDidRemoveDocument = new event_1.Emitter();\n            this._onDidChangeDocument = new event_1.Emitter();\n            this._onDidSaveDocument = new event_1.Emitter();\n            this.onDidAddDocument = this._onDidAddDocument.event;\n            this.onDidRemoveDocument = this._onDidRemoveDocument.event;\n            this.onDidChangeDocument = this._onDidChangeDocument.event;\n            this.onDidSaveDocument = this._onDidSaveDocument.event;\n            this._documentLoader = new Map();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadDocuments);\n            this._documentsAndEditors = documentsAndEditors;\n            this._toDispose = [\n                this._documentsAndEditors.onDidRemoveDocuments(documents => {\n                    for (const data of documents) {\n                        this._onDidRemoveDocument.fire(data.document);\n                    }\n                }),\n                this._documentsAndEditors.onDidAddDocuments(documents => {\n                    for (const data of documents) {\n                        this._onDidAddDocument.fire(data.document);\n                    }\n                })\n            ];\n        }\n        dispose() {\n            lifecycle_1.dispose(this._toDispose);\n        }\n        getAllDocumentData() {\n            return this._documentsAndEditors.allDocuments();\n        }\n        getDocumentData(resource) {\n            if (!resource) {\n                return undefined;\n            }\n            const data = this._documentsAndEditors.getDocument(resource);\n            if (data) {\n                return data;\n            }\n            return undefined;\n        }\n        getDocument(resource) {\n            const data = this.getDocumentData(resource);\n            if (!data || !data.document) {\n                throw new Error('Unable to retrieve document from URI');\n            }\n            return data.document;\n        }\n        ensureDocumentData(uri) {\n            const cached = this._documentsAndEditors.getDocument(uri);\n            if (cached) {\n                return Promise.resolve(cached);\n            }\n            let promise = this._documentLoader.get(uri.toString());\n            if (!promise) {\n                promise = this._proxy.$tryOpenDocument(uri).then(() => {\n                    this._documentLoader.delete(uri.toString());\n                    return this._documentsAndEditors.getDocument(uri);\n                }, err => {\n                    this._documentLoader.delete(uri.toString());\n                    return Promise.reject(err);\n                });\n                this._documentLoader.set(uri.toString(), promise);\n            }\n            return promise;\n        }\n        createDocumentData(options) {\n            return this._proxy.$tryCreateDocument(options).then(data => uri_1.URI.revive(data));\n        }\n        $acceptModelModeChanged(uriComponents, oldModeId, newModeId) {\n            const uri = uri_1.URI.revive(uriComponents);\n            const data = this._documentsAndEditors.getDocument(uri);\n            if (!data) {\n                throw new Error('unknown document');\n            }\n            // Treat a mode change as a remove + add\n            this._onDidRemoveDocument.fire(data.document);\n            data._acceptLanguageId(newModeId);\n            this._onDidAddDocument.fire(data.document);\n        }\n        $acceptModelSaved(uriComponents) {\n            const uri = uri_1.URI.revive(uriComponents);\n            const data = this._documentsAndEditors.getDocument(uri);\n            if (!data) {\n                throw new Error('unknown document');\n            }\n            this.$acceptDirtyStateChanged(uriComponents, false);\n            this._onDidSaveDocument.fire(data.document);\n        }\n        $acceptDirtyStateChanged(uriComponents, isDirty) {\n            const uri = uri_1.URI.revive(uriComponents);\n            const data = this._documentsAndEditors.getDocument(uri);\n            if (!data) {\n                throw new Error('unknown document');\n            }\n            data._acceptIsDirty(isDirty);\n            this._onDidChangeDocument.fire({\n                document: data.document,\n                contentChanges: []\n            });\n        }\n        $acceptModelChanged(uriComponents, events, isDirty) {\n            const uri = uri_1.URI.revive(uriComponents);\n            const data = this._documentsAndEditors.getDocument(uri);\n            if (!data) {\n                throw new Error('unknown document');\n            }\n            data._acceptIsDirty(isDirty);\n            data.onEvents(events);\n            this._onDidChangeDocument.fire({\n                document: data.document,\n                contentChanges: events.changes.map((change) => {\n                    return {\n                        range: TypeConverters.Range.to(change.range),\n                        rangeOffset: change.rangeOffset,\n                        rangeLength: change.rangeLength,\n                        text: change.text\n                    };\n                })\n            });\n        }\n        setWordDefinitionFor(modeId, wordDefinition) {\n            extHostDocumentData_1.setWordDefinitionFor(modeId, wordDefinition);\n        }\n    }\n    exports.ExtHostDocuments = ExtHostDocuments;\n});\n",null]}