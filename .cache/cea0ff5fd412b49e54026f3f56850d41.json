{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewController.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar coreCommands_1 = require(\"vs/editor/browser/controller/coreCommands\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar ViewController = /** @class */ (function () {\n    function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.outgoingEvents = outgoingEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    ViewController.prototype._execMouseCommand = function (editorCommand, args) {\n        args.source = 'mouse';\n        this.commandDelegate.executeEditorCommand(editorCommand, args);\n    };\n    ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText) {\n        this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText);\n    };\n    ViewController.prototype.type = function (source, text) {\n        this.commandDelegate.type(source, text);\n    };\n    ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\n        this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\n    };\n    ViewController.prototype.compositionStart = function (source) {\n        this.commandDelegate.compositionStart(source);\n    };\n    ViewController.prototype.compositionEnd = function (source) {\n        this.commandDelegate.compositionEnd(source);\n    };\n    ViewController.prototype.cut = function (source) {\n        this.commandDelegate.cut(source);\n    };\n    ViewController.prototype.setSelection = function (source, modelSelection) {\n        this.commandDelegate.executeEditorCommand(coreCommands_1.CoreNavigationCommands.SetSelection, {\n            source: source,\n            selection: modelSelection\n        });\n    };\n    ViewController.prototype._validateViewColumn = function (viewPosition) {\n        var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new position_1.Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    };\n    ViewController.prototype._hasMulticursorModifier = function (data) {\n        switch (this.configuration.editor.multiCursorModifier) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n        }\n        return false;\n    };\n    ViewController.prototype._hasNonMulticursorModifier = function (data) {\n        switch (this.configuration.editor.multiCursorModifier) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n        }\n        return false;\n    };\n    ViewController.prototype.dispatchMouse = function (data) {\n        if (data.middleButton) {\n            if (data.inSelectionMode) {\n                this._columnSelect(data.position, data.mouseColumn);\n            }\n            else {\n                this.moveTo(data.position);\n            }\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (this._hasMulticursorModifier(data)) {\n                this._lastCursorWordSelect(data.position);\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._wordSelectDrag(data.position);\n                }\n                else {\n                    this._wordSelect(data.position);\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn);\n                    }\n                    else {\n                        this._moveToSelect(data.position);\n                    }\n                }\n                else {\n                    this.moveTo(data.position);\n                }\n            }\n        }\n    };\n    ViewController.prototype._usualArgs = function (viewPosition) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition\n        };\n    };\n    ViewController.prototype.moveTo = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._moveToSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._columnSelect = function (viewPosition, mouseColumn) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.ColumnSelect, {\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn\n        });\n    };\n    ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.CreateCursor, {\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    };\n    ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._wordSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._wordSelectDrag = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._lineSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._lineSelectDrag = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\n    };\n    ViewController.prototype._selectAll = function () {\n        this._execMouseCommand(coreCommands_1.CoreNavigationCommands.SelectAll, {});\n    };\n    // ----------------------\n    ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    };\n    ViewController.prototype.emitKeyDown = function (e) {\n        this.outgoingEvents.emitKeyDown(e);\n    };\n    ViewController.prototype.emitKeyUp = function (e) {\n        this.outgoingEvents.emitKeyUp(e);\n    };\n    ViewController.prototype.emitContextMenu = function (e) {\n        this.outgoingEvents.emitContextMenu(e);\n    };\n    ViewController.prototype.emitMouseMove = function (e) {\n        this.outgoingEvents.emitMouseMove(e);\n    };\n    ViewController.prototype.emitMouseLeave = function (e) {\n        this.outgoingEvents.emitMouseLeave(e);\n    };\n    ViewController.prototype.emitMouseUp = function (e) {\n        this.outgoingEvents.emitMouseUp(e);\n    };\n    ViewController.prototype.emitMouseDown = function (e) {\n        this.outgoingEvents.emitMouseDown(e);\n    };\n    ViewController.prototype.emitMouseDrag = function (e) {\n        this.outgoingEvents.emitMouseDrag(e);\n    };\n    ViewController.prototype.emitMouseDrop = function (e) {\n        this.outgoingEvents.emitMouseDrop(e);\n    };\n    return ViewController;\n}());\nexports.ViewController = ViewController;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewController.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewController.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { CoreEditorCommand, CoreNavigationCommands } from 'vs/editor/browser/controller/coreCommands';\nimport { IEditorMouseEvent, IPartialEditorMouseEvent } from 'vs/editor/browser/editorBrowser';\nimport { ViewOutgoingEvents } from 'vs/editor/browser/view/viewOutgoingEvents';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IConfiguration } from 'vs/editor/common/editorCommon';\nimport { IViewModel } from 'vs/editor/common/viewModel/viewModel';\n\nexport interface IMouseDispatchData {\n\tposition: Position;\n\t/**\n\t * Desired mouse column (e.g. when position.column gets clamped to text length -- clicking after text on a line).\n\t */\n\tmouseColumn: number;\n\tstartedOnLineNumbers: boolean;\n\n\tinSelectionMode: boolean;\n\tmouseDownCount: number;\n\taltKey: boolean;\n\tctrlKey: boolean;\n\tmetaKey: boolean;\n\tshiftKey: boolean;\n\n\tleftButton: boolean;\n\tmiddleButton: boolean;\n}\n\nexport interface ICommandDelegate {\n\texecuteEditorCommand(editorCommand: CoreEditorCommand, args: any): void;\n\n\tpaste(source: string, text: string, pasteOnNewLine: boolean, multicursorText: string[] | null): void;\n\ttype(source: string, text: string): void;\n\treplacePreviousChar(source: string, text: string, replaceCharCnt: number): void;\n\tcompositionStart(source: string): void;\n\tcompositionEnd(source: string): void;\n\tcut(source: string): void;\n}\n\nexport class ViewController {\n\n\tprivate readonly configuration: IConfiguration;\n\tprivate readonly viewModel: IViewModel;\n\tprivate readonly outgoingEvents: ViewOutgoingEvents;\n\tprivate readonly commandDelegate: ICommandDelegate;\n\n\tconstructor(\n\t\tconfiguration: IConfiguration,\n\t\tviewModel: IViewModel,\n\t\toutgoingEvents: ViewOutgoingEvents,\n\t\tcommandDelegate: ICommandDelegate\n\t) {\n\t\tthis.configuration = configuration;\n\t\tthis.viewModel = viewModel;\n\t\tthis.outgoingEvents = outgoingEvents;\n\t\tthis.commandDelegate = commandDelegate;\n\t}\n\n\tprivate _execMouseCommand(editorCommand: CoreEditorCommand, args: any): void {\n\t\targs.source = 'mouse';\n\t\tthis.commandDelegate.executeEditorCommand(editorCommand, args);\n\t}\n\n\tpublic paste(source: string, text: string, pasteOnNewLine: boolean, multicursorText: string[] | null): void {\n\t\tthis.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText);\n\t}\n\n\tpublic type(source: string, text: string): void {\n\t\tthis.commandDelegate.type(source, text);\n\t}\n\n\tpublic replacePreviousChar(source: string, text: string, replaceCharCnt: number): void {\n\t\tthis.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\n\t}\n\n\tpublic compositionStart(source: string): void {\n\t\tthis.commandDelegate.compositionStart(source);\n\t}\n\n\tpublic compositionEnd(source: string): void {\n\t\tthis.commandDelegate.compositionEnd(source);\n\t}\n\n\tpublic cut(source: string): void {\n\t\tthis.commandDelegate.cut(source);\n\t}\n\n\tpublic setSelection(source: string, modelSelection: Selection): void {\n\t\tthis.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\n\t\t\tsource: source,\n\t\t\tselection: modelSelection\n\t\t});\n\t}\n\n\tprivate _validateViewColumn(viewPosition: Position): Position {\n\t\tconst minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n\t\tif (viewPosition.column < minColumn) {\n\t\t\treturn new Position(viewPosition.lineNumber, minColumn);\n\t\t}\n\t\treturn viewPosition;\n\t}\n\n\tprivate _hasMulticursorModifier(data: IMouseDispatchData): boolean {\n\t\tswitch (this.configuration.editor.multiCursorModifier) {\n\t\t\tcase 'altKey':\n\t\t\t\treturn data.altKey;\n\t\t\tcase 'ctrlKey':\n\t\t\t\treturn data.ctrlKey;\n\t\t\tcase 'metaKey':\n\t\t\t\treturn data.metaKey;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _hasNonMulticursorModifier(data: IMouseDispatchData): boolean {\n\t\tswitch (this.configuration.editor.multiCursorModifier) {\n\t\t\tcase 'altKey':\n\t\t\t\treturn data.ctrlKey || data.metaKey;\n\t\t\tcase 'ctrlKey':\n\t\t\t\treturn data.altKey || data.metaKey;\n\t\t\tcase 'metaKey':\n\t\t\t\treturn data.ctrlKey || data.altKey;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic dispatchMouse(data: IMouseDispatchData): void {\n\t\tif (data.middleButton) {\n\t\t\tif (data.inSelectionMode) {\n\t\t\t\tthis._columnSelect(data.position, data.mouseColumn);\n\t\t\t} else {\n\t\t\t\tthis.moveTo(data.position);\n\t\t\t}\n\t\t} else if (data.startedOnLineNumbers) {\n\t\t\t// If the dragging started on the gutter, then have operations work on the entire line\n\t\t\tif (this._hasMulticursorModifier(data)) {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tthis._lastCursorLineSelect(data.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._createCursor(data.position, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tthis._lineSelectDrag(data.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lineSelect(data.position);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (data.mouseDownCount >= 4) {\n\t\t\tthis._selectAll();\n\t\t} else if (data.mouseDownCount === 3) {\n\t\t\tif (this._hasMulticursorModifier(data)) {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tthis._lastCursorLineSelectDrag(data.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lastCursorLineSelect(data.position);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tthis._lineSelectDrag(data.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lineSelect(data.position);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (data.mouseDownCount === 2) {\n\t\t\tif (this._hasMulticursorModifier(data)) {\n\t\t\t\tthis._lastCursorWordSelect(data.position);\n\t\t\t} else {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tthis._wordSelectDrag(data.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._wordSelect(data.position);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._hasMulticursorModifier(data)) {\n\t\t\t\tif (!this._hasNonMulticursorModifier(data)) {\n\t\t\t\t\tif (data.shiftKey) {\n\t\t\t\t\t\tthis._columnSelect(data.position, data.mouseColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Do multi-cursor operations only when purely alt is pressed\n\t\t\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\t\t\tthis._lastCursorMoveToSelect(data.position);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._createCursor(data.position, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (data.inSelectionMode) {\n\t\t\t\t\tif (data.altKey) {\n\t\t\t\t\t\tthis._columnSelect(data.position, data.mouseColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._moveToSelect(data.position);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.moveTo(data.position);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _usualArgs(viewPosition: Position) {\n\t\tviewPosition = this._validateViewColumn(viewPosition);\n\t\treturn {\n\t\t\tposition: this._convertViewToModelPosition(viewPosition),\n\t\t\tviewPosition: viewPosition\n\t\t};\n\t}\n\n\tpublic moveTo(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _moveToSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _columnSelect(viewPosition: Position, mouseColumn: number): void {\n\t\tviewPosition = this._validateViewColumn(viewPosition);\n\t\tthis._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\n\t\t\tposition: this._convertViewToModelPosition(viewPosition),\n\t\t\tviewPosition: viewPosition,\n\t\t\tmouseColumn: mouseColumn\n\t\t});\n\t}\n\n\tprivate _createCursor(viewPosition: Position, wholeLine: boolean): void {\n\t\tviewPosition = this._validateViewColumn(viewPosition);\n\t\tthis._execMouseCommand(CoreNavigationCommands.CreateCursor, {\n\t\t\tposition: this._convertViewToModelPosition(viewPosition),\n\t\t\tviewPosition: viewPosition,\n\t\t\twholeLine: wholeLine\n\t\t});\n\t}\n\n\tprivate _lastCursorMoveToSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _wordSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _wordSelectDrag(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _lastCursorWordSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _lineSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _lineSelectDrag(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _lastCursorLineSelect(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _lastCursorLineSelectDrag(viewPosition: Position): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\n\t}\n\n\tprivate _selectAll(): void {\n\t\tthis._execMouseCommand(CoreNavigationCommands.SelectAll, {});\n\t}\n\n\t// ----------------------\n\n\tprivate _convertViewToModelPosition(viewPosition: Position): Position {\n\t\treturn this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n\t}\n\n\tpublic emitKeyDown(e: IKeyboardEvent): void {\n\t\tthis.outgoingEvents.emitKeyDown(e);\n\t}\n\n\tpublic emitKeyUp(e: IKeyboardEvent): void {\n\t\tthis.outgoingEvents.emitKeyUp(e);\n\t}\n\n\tpublic emitContextMenu(e: IEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitContextMenu(e);\n\t}\n\n\tpublic emitMouseMove(e: IEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseMove(e);\n\t}\n\n\tpublic emitMouseLeave(e: IPartialEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseLeave(e);\n\t}\n\n\tpublic emitMouseUp(e: IEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseUp(e);\n\t}\n\n\tpublic emitMouseDown(e: IEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseDown(e);\n\t}\n\n\tpublic emitMouseDrag(e: IEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseDrag(e);\n\t}\n\n\tpublic emitMouseDrop(e: IPartialEditorMouseEvent): void {\n\t\tthis.outgoingEvents.emitMouseDrop(e);\n\t}\n}\n"]}]}