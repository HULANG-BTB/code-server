{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/uri\", \"vs/base/common/uriIpc\", \"vs/base/common/objects\"], function (require, exports, event_1, uri_1, uriIpc_1, objects_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function transformIncomingURI(uri, transformer) {\n        return uri_1.URI.revive(transformer ? transformer.transformIncoming(uri) : uri);\n    }\n    function transformOutgoingURI(uri, transformer) {\n        return transformer ? transformer.transformOutgoingURI(uri) : uri;\n    }\n    function transformIncomingExtension(extension, transformer) {\n        transformer = transformer ? transformer : uriIpc_1.DefaultURITransformer;\n        const manifest = extension.manifest;\n        const transformed = uriIpc_1.transformAndReviveIncomingURIs(Object.assign({}, extension, { manifest: undefined }), transformer);\n        return Object.assign({}, transformed, { manifest });\n    }\n    function transformOutgoingExtension(extension, transformer) {\n        return transformer ? objects_1.cloneAndChange(extension, value => value instanceof uri_1.URI ? transformer.transformOutgoingURI(value) : undefined) : extension;\n    }\n    class ExtensionManagementChannel {\n        constructor(service, getUriTransformer) {\n            this.service = service;\n            this.getUriTransformer = getUriTransformer;\n            this.onInstallExtension = event_1.Event.buffer(service.onInstallExtension, true);\n            this.onDidInstallExtension = event_1.Event.buffer(service.onDidInstallExtension, true);\n            this.onUninstallExtension = event_1.Event.buffer(service.onUninstallExtension, true);\n            this.onDidUninstallExtension = event_1.Event.buffer(service.onDidUninstallExtension, true);\n        }\n        listen(context, event) {\n            const uriTransformer = this.getUriTransformer(context);\n            switch (event) {\n                case 'onInstallExtension': return this.onInstallExtension;\n                case 'onDidInstallExtension': return event_1.Event.map(this.onDidInstallExtension, i => (Object.assign({}, i, { local: i.local ? transformOutgoingExtension(i.local, uriTransformer) : i.local })));\n                case 'onUninstallExtension': return this.onUninstallExtension;\n                case 'onDidUninstallExtension': return this.onDidUninstallExtension;\n            }\n            throw new Error('Invalid listen');\n        }\n        call(context, command, args) {\n            const uriTransformer = this.getUriTransformer(context);\n            switch (command) {\n                case 'zip': return this.service.zip(transformIncomingExtension(args[0], uriTransformer)).then(uri => transformOutgoingURI(uri, uriTransformer));\n                case 'unzip': return this.service.unzip(transformIncomingURI(args[0], uriTransformer), args[1]);\n                case 'install': return this.service.install(transformIncomingURI(args[0], uriTransformer));\n                case 'installFromGallery': return this.service.installFromGallery(args[0]);\n                case 'uninstall': return this.service.uninstall(transformIncomingExtension(args[0], uriTransformer), args[1]);\n                case 'reinstallFromGallery': return this.service.reinstallFromGallery(transformIncomingExtension(args[0], uriTransformer));\n                case 'getInstalled': return this.service.getInstalled(args[0]).then(extensions => extensions.map(e => transformOutgoingExtension(e, uriTransformer)));\n                case 'updateMetadata': return this.service.updateMetadata(transformIncomingExtension(args[0], uriTransformer), args[1]).then(e => transformOutgoingExtension(e, uriTransformer));\n                case 'getExtensionsReport': return this.service.getExtensionsReport();\n            }\n            throw new Error('Invalid call');\n        }\n    }\n    exports.ExtensionManagementChannel = ExtensionManagementChannel;\n    class ExtensionManagementChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        get onInstallExtension() { return this.channel.listen('onInstallExtension'); }\n        get onDidInstallExtension() { return event_1.Event.map(this.channel.listen('onDidInstallExtension'), i => (Object.assign({}, i, { local: i.local ? transformIncomingExtension(i.local, null) : i.local }))); }\n        get onUninstallExtension() { return this.channel.listen('onUninstallExtension'); }\n        get onDidUninstallExtension() { return this.channel.listen('onDidUninstallExtension'); }\n        zip(extension) {\n            return Promise.resolve(this.channel.call('zip', [extension]).then(result => uri_1.URI.revive(result)));\n        }\n        unzip(zipLocation, type) {\n            return Promise.resolve(this.channel.call('unzip', [zipLocation, type]));\n        }\n        install(vsix) {\n            return Promise.resolve(this.channel.call('install', [vsix]));\n        }\n        installFromGallery(extension) {\n            return Promise.resolve(this.channel.call('installFromGallery', [extension]));\n        }\n        uninstall(extension, force = false) {\n            return Promise.resolve(this.channel.call('uninstall', [extension, force]));\n        }\n        reinstallFromGallery(extension) {\n            return Promise.resolve(this.channel.call('reinstallFromGallery', [extension]));\n        }\n        getInstalled(type = null) {\n            return Promise.resolve(this.channel.call('getInstalled', [type]))\n                .then(extensions => extensions.map(extension => transformIncomingExtension(extension, null)));\n        }\n        updateMetadata(local, metadata) {\n            return Promise.resolve(this.channel.call('updateMetadata', [local, metadata]))\n                .then(extension => transformIncomingExtension(extension, null));\n        }\n        getExtensionsReport() {\n            return Promise.resolve(this.channel.call('getExtensionsReport'));\n        }\n    }\n    exports.ExtensionManagementChannelClient = ExtensionManagementChannelClient;\n});\n",null]}