{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar ToggleRenderControlCharacterAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleRenderControlCharacterAction, _super);\n    function ToggleRenderControlCharacterAction(id, label, _configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._configurationService = _configurationService;\n        return _this;\n    }\n    ToggleRenderControlCharacterAction.prototype.run = function () {\n        var newRenderControlCharacters = !this._configurationService.getValue('editor.renderControlCharacters');\n        return this._configurationService.updateValue('editor.renderControlCharacters', newRenderControlCharacters, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleRenderControlCharacterAction.ID = 'editor.action.toggleRenderControlCharacter';\n    ToggleRenderControlCharacterAction.LABEL = nls.localize('toggleRenderControlCharacters', \"View: Toggle Control Characters\");\n    ToggleRenderControlCharacterAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ToggleRenderControlCharacterAction);\n    return ToggleRenderControlCharacterAction;\n}(actions_1.Action));\nexports.ToggleRenderControlCharacterAction = ToggleRenderControlCharacterAction;\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleRenderControlCharacterAction, ToggleRenderControlCharacterAction.ID, ToggleRenderControlCharacterAction.LABEL), 'View: Toggle Control Characters');\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarViewMenu, {\n    group: '5_editor',\n    command: {\n        id: ToggleRenderControlCharacterAction.ID,\n        title: nls.localize({ key: 'miToggleRenderControlCharacters', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Control Characters\"),\n        toggled: contextkey_1.ContextKeyExpr.equals('config.editor.renderControlCharacters', true)\n    },\n    order: 4\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,kDAAgD;AAChD,8DAAgG;AAChG,gFAA4G;AAC5G,uEAA0E;AAC1E,iEAAgE;AAChE,uDAAuG;AAEvG;IAAwD,8DAAM;IAK7D,4CACC,EAAU,EACV,KAAa,EAC2B,qBAA4C;QAHrF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHwC,2BAAqB,GAArB,qBAAqB,CAAuB;;IAGrF,CAAC;IAEM,gDAAG,GAAV;QACC,IAAI,0BAA0B,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAU,gCAAgC,CAAC,CAAC;QACjH,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,gCAAgC,EAAE,0BAA0B,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;IACvI,CAAC;IAdsB,qCAAE,GAAG,4CAA4C,CAAC;IAClD,wCAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,iCAAiC,CAAC,CAAC;IAHpG,kCAAkC;QAQ5C,mBAAA,qCAAqB,CAAA;OARX,kCAAkC,CAiB9C;IAAD,yCAAC;CAAA,AAjBD,CAAwD,gBAAM,GAiB7D;AAjBY,gFAAkC;AAmB/C,IAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC1F,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,kCAAkC,EAAE,kCAAkC,CAAC,EAAE,EAAE,kCAAkC,CAAC,KAAK,CAAC,EAAE,iCAAiC,CAAC,CAAC;AAEnN,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;IACnD,KAAK,EAAE,UAAU;IACjB,OAAO,EAAE;QACR,EAAE,EAAE,kCAAkC,CAAC,EAAE;QACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iCAAiC,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,6BAA6B,CAAC;QAClI,OAAO,EAAE,2BAAc,CAAC,MAAM,CAAC,uCAAuC,EAAE,IAAI,CAAC;KAC7E;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\n\nexport class ToggleRenderControlCharacterAction extends Action {\n\n\tpublic static readonly ID = 'editor.action.toggleRenderControlCharacter';\n\tpublic static readonly LABEL = nls.localize('toggleRenderControlCharacters', \"View: Toggle Control Characters\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tlet newRenderControlCharacters = !this._configurationService.getValue<boolean>('editor.renderControlCharacters');\n\t\treturn this._configurationService.updateValue('editor.renderControlCharacters', newRenderControlCharacters, ConfigurationTarget.USER);\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleRenderControlCharacterAction, ToggleRenderControlCharacterAction.ID, ToggleRenderControlCharacterAction.LABEL), 'View: Toggle Control Characters');\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '5_editor',\n\tcommand: {\n\t\tid: ToggleRenderControlCharacterAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleRenderControlCharacters', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Control Characters\"),\n\t\ttoggled: ContextKeyExpr.equals('config.editor.renderControlCharacters', true)\n\t},\n\torder: 4\n});\n"]}]}