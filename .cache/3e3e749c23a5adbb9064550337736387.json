{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycle.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycle.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/async\"], function (require, exports, event_1, instantiation_1, async_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ILifecycleService = instantiation_1.createDecorator('lifecycleService');\n    var ShutdownReason;\n    (function (ShutdownReason) {\n        /** Window is closed */\n        ShutdownReason[ShutdownReason[\"CLOSE\"] = 1] = \"CLOSE\";\n        /** Application is quit */\n        ShutdownReason[ShutdownReason[\"QUIT\"] = 2] = \"QUIT\";\n        /** Window is reloaded */\n        ShutdownReason[ShutdownReason[\"RELOAD\"] = 3] = \"RELOAD\";\n        /** Other configuration loaded into window */\n        ShutdownReason[ShutdownReason[\"LOAD\"] = 4] = \"LOAD\";\n    })(ShutdownReason = exports.ShutdownReason || (exports.ShutdownReason = {}));\n    var StartupKind;\n    (function (StartupKind) {\n        StartupKind[StartupKind[\"NewWindow\"] = 1] = \"NewWindow\";\n        StartupKind[StartupKind[\"ReloadedWindow\"] = 3] = \"ReloadedWindow\";\n        StartupKind[StartupKind[\"ReopenedWindow\"] = 4] = \"ReopenedWindow\";\n    })(StartupKind = exports.StartupKind || (exports.StartupKind = {}));\n    function StartupKindToString(startupKind) {\n        switch (startupKind) {\n            case StartupKind.NewWindow: return 'NewWindow';\n            case StartupKind.ReloadedWindow: return 'ReloadedWindow';\n            case StartupKind.ReopenedWindow: return 'ReopenedWindow';\n        }\n    }\n    exports.StartupKindToString = StartupKindToString;\n    var LifecyclePhase;\n    (function (LifecyclePhase) {\n        /**\n         * The first phase signals that we are about to startup getting ready.\n         */\n        LifecyclePhase[LifecyclePhase[\"Starting\"] = 1] = \"Starting\";\n        /**\n         * Services are ready and the view is about to restore its state.\n         */\n        LifecyclePhase[LifecyclePhase[\"Ready\"] = 2] = \"Ready\";\n        /**\n         * Views, panels and editors have restored. For editors this means, that\n         * they show their contents fully.\n         */\n        LifecyclePhase[LifecyclePhase[\"Restored\"] = 3] = \"Restored\";\n        /**\n         * The last phase after views, panels and editors have restored and\n         * some time has passed (few seconds).\n         */\n        LifecyclePhase[LifecyclePhase[\"Eventually\"] = 4] = \"Eventually\";\n    })(LifecyclePhase = exports.LifecyclePhase || (exports.LifecyclePhase = {}));\n    function LifecyclePhaseToString(phase) {\n        switch (phase) {\n            case LifecyclePhase.Starting: return 'Starting';\n            case LifecyclePhase.Ready: return 'Ready';\n            case LifecyclePhase.Restored: return 'Restored';\n            case LifecyclePhase.Eventually: return 'Eventually';\n        }\n    }\n    exports.LifecyclePhaseToString = LifecyclePhaseToString;\n    exports.NullLifecycleService = {\n        _serviceBrand: null,\n        onBeforeShutdown: event_1.Event.None,\n        onWillShutdown: event_1.Event.None,\n        onShutdown: event_1.Event.None,\n        phase: LifecyclePhase.Restored,\n        startupKind: StartupKind.NewWindow,\n        when() { return Promise.resolve(); }\n    };\n    // Shared veto handling across main and renderer\n    function handleVetos(vetos, onError) {\n        if (vetos.length === 0) {\n            return Promise.resolve(false);\n        }\n        const promises = [];\n        let lazyValue = false;\n        for (let valueOrPromise of vetos) {\n            // veto, done\n            if (valueOrPromise === true) {\n                return Promise.resolve(true);\n            }\n            if (async_1.isThenable(valueOrPromise)) {\n                promises.push(valueOrPromise.then(value => {\n                    if (value) {\n                        lazyValue = true; // veto, done\n                    }\n                }, err => {\n                    onError(err); // error, treated like a veto, done\n                    lazyValue = true;\n                }));\n            }\n        }\n        return Promise.all(promises).then(() => lazyValue);\n    }\n    exports.handleVetos = handleVetos;\n});\n",null]}