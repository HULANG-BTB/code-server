{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/openAnythingHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/openAnythingHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar nls = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar types = require(\"vs/base/common/types\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar openFileHandler_1 = require(\"vs/workbench/contrib/search/browser/openFileHandler\");\nvar openSymbolHandler = require(\"vs/workbench/contrib/search/browser/openSymbolHandler\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar quickOpenScorer_1 = require(\"vs/base/parts/quickopen/common/quickOpenScorer\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar errors_1 = require(\"vs/base/common/errors\");\nexports.OpenSymbolHandler = openSymbolHandler.OpenSymbolHandler; // OpenSymbolHandler is used from an extension and must be in the main bundle file so it can load\nvar OpenAnythingHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenAnythingHandler, _super);\n    function OpenAnythingHandler(notificationService, instantiationService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.notificationService = notificationService;\n        _this.configurationService = configurationService;\n        _this.scorerCache = Object.create(null);\n        _this.searchDelayer = new async_1.ThrottledDelayer(OpenAnythingHandler.TYPING_SEARCH_DELAY);\n        _this.openSymbolHandler = instantiationService.createInstance(exports.OpenSymbolHandler);\n        _this.openFileHandler = instantiationService.createInstance(openFileHandler_1.OpenFileHandler);\n        _this.updateHandlers(_this.configurationService.getValue());\n        _this.registerListeners();\n        return _this;\n    }\n    OpenAnythingHandler.prototype.registerListeners = function () {\n        var _this = this;\n        this.configurationService.onDidChangeConfiguration(function (e) { return _this.updateHandlers(_this.configurationService.getValue()); });\n    };\n    OpenAnythingHandler.prototype.updateHandlers = function (configuration) {\n        this.includeSymbols = configuration && configuration.search && configuration.search.quickOpen && configuration.search.quickOpen.includeSymbols;\n        // Files\n        this.openFileHandler.setOptions({\n            forceUseIcons: this.includeSymbols // only need icons for file results if we mix with symbol results\n        });\n        // Symbols\n        this.openSymbolHandler.setOptions({\n            skipDelay: true,\n            skipLocalSymbols: true,\n            skipSorting: true // we sort combined with file results\n        });\n    };\n    OpenAnythingHandler.prototype.getResults = function (searchValue, token) {\n        var _this = this;\n        this.isClosed = false; // Treat this call as the handler being in use\n        // Find a suitable range from the pattern looking for \":\" and \"#\"\n        var searchWithRange = this.extractRange(searchValue);\n        if (searchWithRange) {\n            searchValue = searchWithRange.search; // ignore range portion in query\n        }\n        // Prepare search for scoring\n        var query = quickOpenScorer_1.prepareQuery(searchValue);\n        if (!query.value) {\n            return Promise.resolve(new quickOpenModel_1.QuickOpenModel()); // Respond directly to empty search\n        }\n        // The throttler needs a factory for its promises\n        var resultsPromise = function () {\n            var resultPromises = [];\n            // File Results\n            var filePromise = _this.openFileHandler.getResults(query.original, token, OpenAnythingHandler.MAX_DISPLAYED_RESULTS);\n            resultPromises.push(filePromise);\n            // Symbol Results (unless disabled or a range or absolute path is specified)\n            if (_this.includeSymbols && !searchWithRange) {\n                resultPromises.push(_this.openSymbolHandler.getResults(query.original, token));\n            }\n            // Join and sort unified\n            return Promise.all(resultPromises).then(function (results) {\n                var _a;\n                // If the quick open widget has been closed meanwhile, ignore the result\n                if (_this.isClosed || token.isCancellationRequested) {\n                    return Promise.resolve(new quickOpenModel_1.QuickOpenModel());\n                }\n                // Combine results.\n                var mergedResults = (_a = []).concat.apply(_a, results.map(function (r) { return r.entries; }));\n                // Sort\n                var compare = function (elementA, elementB) { return quickOpenScorer_1.compareItemsByScore(elementA, elementB, query, true, quickOpenModel_1.QuickOpenItemAccessor, _this.scorerCache); };\n                var viewResults = arrays.top(mergedResults, compare, OpenAnythingHandler.MAX_DISPLAYED_RESULTS);\n                // Apply range and highlights to file entries\n                viewResults.forEach(function (entry) {\n                    if (entry instanceof openFileHandler_1.FileEntry) {\n                        entry.setRange(searchWithRange ? searchWithRange.range : null);\n                        var itemScore = quickOpenScorer_1.scoreItem(entry, query, true, quickOpenModel_1.QuickOpenItemAccessor, _this.scorerCache);\n                        entry.setHighlights(itemScore.labelMatch || [], itemScore.descriptionMatch);\n                    }\n                });\n                return Promise.resolve(new quickOpenModel_1.QuickOpenModel(viewResults));\n            }, function (error) {\n                if (!errors_1.isPromiseCanceledError(error)) {\n                    var message = void 0;\n                    if (error.message) {\n                        message = error.message.replace(/[\\*_\\[\\]]/g, '\\\\$&');\n                    }\n                    else {\n                        message = error;\n                    }\n                    _this.notificationService.error(message);\n                }\n                return null;\n            });\n        };\n        // Trigger through delayer to prevent accumulation while the user is typing (except when expecting results to come from cache)\n        return this.hasShortResponseTime() ? resultsPromise() : this.searchDelayer.trigger(resultsPromise, OpenAnythingHandler.TYPING_SEARCH_DELAY);\n    };\n    OpenAnythingHandler.prototype.hasShortResponseTime = function () {\n        if (!this.includeSymbols) {\n            return this.openFileHandler.hasShortResponseTime();\n        }\n        return this.openFileHandler.hasShortResponseTime() && this.openSymbolHandler.hasShortResponseTime();\n    };\n    OpenAnythingHandler.prototype.extractRange = function (value) {\n        if (!value) {\n            return null;\n        }\n        var range = null;\n        // Find Line/Column number from search value using RegExp\n        var patternMatch = OpenAnythingHandler.LINE_COLON_PATTERN.exec(value);\n        if (patternMatch && patternMatch.length > 1) {\n            var startLineNumber = parseInt(patternMatch[1], 10);\n            // Line Number\n            if (types.isNumber(startLineNumber)) {\n                range = {\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                };\n                // Column Number\n                if (patternMatch.length > 3) {\n                    var startColumn = parseInt(patternMatch[3], 10);\n                    if (types.isNumber(startColumn)) {\n                        range = {\n                            startLineNumber: range.startLineNumber,\n                            startColumn: startColumn,\n                            endLineNumber: range.endLineNumber,\n                            endColumn: startColumn\n                        };\n                    }\n                }\n            }\n            // User has typed \"something:\" or \"something#\" without a line number, in this case treat as start of file\n            else if (patternMatch[1] === '') {\n                range = {\n                    startLineNumber: 1,\n                    startColumn: 1,\n                    endLineNumber: 1,\n                    endColumn: 1\n                };\n            }\n        }\n        if (patternMatch && range) {\n            return {\n                search: value.substr(0, patternMatch.index),\n                range: range\n            };\n        }\n        return null;\n    };\n    OpenAnythingHandler.prototype.getGroupLabel = function () {\n        return this.includeSymbols ? nls.localize('fileAndTypeResults', \"file and symbol results\") : nls.localize('fileResults', \"file results\");\n    };\n    OpenAnythingHandler.prototype.getAutoFocus = function (searchValue) {\n        return {\n            autoFocusFirstEntry: true\n        };\n    };\n    OpenAnythingHandler.prototype.onOpen = function () {\n        this.openSymbolHandler.onOpen();\n        this.openFileHandler.onOpen();\n    };\n    OpenAnythingHandler.prototype.onClose = function (canceled) {\n        this.isClosed = true;\n        // Clear Cache\n        this.scorerCache = Object.create(null);\n        // Propagate\n        this.openSymbolHandler.onClose(canceled);\n        this.openFileHandler.onClose(canceled);\n    };\n    OpenAnythingHandler.ID = 'workbench.picker.anything';\n    OpenAnythingHandler.LINE_COLON_PATTERN = /[#:\\(](\\d*)([#:,](\\d*))?\\)?$/;\n    OpenAnythingHandler.TYPING_SEARCH_DELAY = 200; // This delay accommodates for the user typing a word and then stops typing to start searching\n    OpenAnythingHandler.MAX_DISPLAYED_RESULTS = 512;\n    OpenAnythingHandler = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], OpenAnythingHandler);\n    return OpenAnythingHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.OpenAnythingHandler = OpenAnythingHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/openAnythingHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/openAnythingHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport * as nls from 'vs/nls';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport * as types from 'vs/base/common/types';\nimport { IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenEntry, QuickOpenModel, QuickOpenItemAccessor } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { QuickOpenHandler } from 'vs/workbench/browser/quickopen';\nimport { FileEntry, OpenFileHandler, FileQuickOpenModel } from 'vs/workbench/contrib/search/browser/openFileHandler';\nimport * as openSymbolHandler from 'vs/workbench/contrib/search/browser/openSymbolHandler';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchSearchConfiguration } from 'vs/workbench/contrib/search/common/search';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { compareItemsByScore, scoreItem, ScorerCache, prepareQuery } from 'vs/base/parts/quickopen/common/quickOpenScorer';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport import OpenSymbolHandler = openSymbolHandler.OpenSymbolHandler; // OpenSymbolHandler is used from an extension and must be in the main bundle file so it can load\n\ninterface ISearchWithRange {\n\tsearch: string;\n\trange: IRange;\n}\n\nexport class OpenAnythingHandler extends QuickOpenHandler {\n\n\tstatic readonly ID = 'workbench.picker.anything';\n\n\tprivate static readonly LINE_COLON_PATTERN = /[#:\\(](\\d*)([#:,](\\d*))?\\)?$/;\n\n\tprivate static readonly TYPING_SEARCH_DELAY = 200; // This delay accommodates for the user typing a word and then stops typing to start searching\n\n\tprivate static readonly MAX_DISPLAYED_RESULTS = 512;\n\n\tprivate openSymbolHandler: OpenSymbolHandler;\n\tprivate openFileHandler: OpenFileHandler;\n\tprivate searchDelayer: ThrottledDelayer<QuickOpenModel>;\n\tprivate isClosed: boolean;\n\tprivate scorerCache: ScorerCache;\n\tprivate includeSymbols: boolean;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.scorerCache = Object.create(null);\n\t\tthis.searchDelayer = new ThrottledDelayer<QuickOpenModel>(OpenAnythingHandler.TYPING_SEARCH_DELAY);\n\n\t\tthis.openSymbolHandler = instantiationService.createInstance(OpenSymbolHandler);\n\t\tthis.openFileHandler = instantiationService.createInstance(OpenFileHandler);\n\n\t\tthis.updateHandlers(this.configurationService.getValue<IWorkbenchSearchConfiguration>());\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.configurationService.onDidChangeConfiguration(e => this.updateHandlers(this.configurationService.getValue<IWorkbenchSearchConfiguration>()));\n\t}\n\n\tprivate updateHandlers(configuration: IWorkbenchSearchConfiguration): void {\n\t\tthis.includeSymbols = configuration && configuration.search && configuration.search.quickOpen && configuration.search.quickOpen.includeSymbols;\n\n\t\t// Files\n\t\tthis.openFileHandler.setOptions({\n\t\t\tforceUseIcons: this.includeSymbols // only need icons for file results if we mix with symbol results\n\t\t});\n\n\t\t// Symbols\n\t\tthis.openSymbolHandler.setOptions({\n\t\t\tskipDelay: true,\t\t// we have our own delay\n\t\t\tskipLocalSymbols: true,\t// we only want global symbols\n\t\t\tskipSorting: true \t\t// we sort combined with file results\n\t\t});\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tthis.isClosed = false; // Treat this call as the handler being in use\n\n\t\t// Find a suitable range from the pattern looking for \":\" and \"#\"\n\t\tconst searchWithRange = this.extractRange(searchValue);\n\t\tif (searchWithRange) {\n\t\t\tsearchValue = searchWithRange.search; // ignore range portion in query\n\t\t}\n\n\t\t// Prepare search for scoring\n\t\tconst query = prepareQuery(searchValue);\n\t\tif (!query.value) {\n\t\t\treturn Promise.resolve(new QuickOpenModel()); // Respond directly to empty search\n\t\t}\n\n\t\t// The throttler needs a factory for its promises\n\t\tconst resultsPromise = () => {\n\t\t\tconst resultPromises: Promise<QuickOpenModel | FileQuickOpenModel>[] = [];\n\n\t\t\t// File Results\n\t\t\tconst filePromise = this.openFileHandler.getResults(query.original, token, OpenAnythingHandler.MAX_DISPLAYED_RESULTS);\n\t\t\tresultPromises.push(filePromise);\n\n\t\t\t// Symbol Results (unless disabled or a range or absolute path is specified)\n\t\t\tif (this.includeSymbols && !searchWithRange) {\n\t\t\t\tresultPromises.push(this.openSymbolHandler.getResults(query.original, token));\n\t\t\t}\n\n\t\t\t// Join and sort unified\n\t\t\treturn Promise.all(resultPromises).then(results => {\n\n\t\t\t\t// If the quick open widget has been closed meanwhile, ignore the result\n\t\t\t\tif (this.isClosed || token.isCancellationRequested) {\n\t\t\t\t\treturn Promise.resolve<QuickOpenModel>(new QuickOpenModel());\n\t\t\t\t}\n\n\t\t\t\t// Combine results.\n\t\t\t\tconst mergedResults: QuickOpenEntry[] = ([] as QuickOpenEntry[]).concat(...results.map(r => r.entries));\n\n\t\t\t\t// Sort\n\t\t\t\tconst compare = (elementA: QuickOpenEntry, elementB: QuickOpenEntry) => compareItemsByScore(elementA, elementB, query, true, QuickOpenItemAccessor, this.scorerCache);\n\t\t\t\tconst viewResults = arrays.top(mergedResults, compare, OpenAnythingHandler.MAX_DISPLAYED_RESULTS);\n\n\t\t\t\t// Apply range and highlights to file entries\n\t\t\t\tviewResults.forEach(entry => {\n\t\t\t\t\tif (entry instanceof FileEntry) {\n\t\t\t\t\t\tentry.setRange(searchWithRange ? searchWithRange.range : null);\n\n\t\t\t\t\t\tconst itemScore = scoreItem(entry, query, true, QuickOpenItemAccessor, this.scorerCache);\n\t\t\t\t\t\tentry.setHighlights(itemScore.labelMatch || [], itemScore.descriptionMatch);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn Promise.resolve<QuickOpenModel>(new QuickOpenModel(viewResults));\n\t\t\t}, error => {\n\t\t\t\tif (!isPromiseCanceledError(error)) {\n\t\t\t\t\tlet message: Error | string;\n\t\t\t\t\tif (error.message) {\n\t\t\t\t\t\tmessage = error.message.replace(/[\\*_\\[\\]]/g, '\\\\$&');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = error;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.notificationService.error(message);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t});\n\t\t};\n\n\t\t// Trigger through delayer to prevent accumulation while the user is typing (except when expecting results to come from cache)\n\t\treturn this.hasShortResponseTime() ? resultsPromise() : this.searchDelayer.trigger(resultsPromise, OpenAnythingHandler.TYPING_SEARCH_DELAY);\n\t}\n\n\thasShortResponseTime(): boolean {\n\t\tif (!this.includeSymbols) {\n\t\t\treturn this.openFileHandler.hasShortResponseTime();\n\t\t}\n\n\t\treturn this.openFileHandler.hasShortResponseTime() && this.openSymbolHandler.hasShortResponseTime();\n\t}\n\n\tprivate extractRange(value: string): ISearchWithRange | null {\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet range: IRange | null = null;\n\n\t\t// Find Line/Column number from search value using RegExp\n\t\tconst patternMatch = OpenAnythingHandler.LINE_COLON_PATTERN.exec(value);\n\t\tif (patternMatch && patternMatch.length > 1) {\n\t\t\tconst startLineNumber = parseInt(patternMatch[1], 10);\n\n\t\t\t// Line Number\n\t\t\tif (types.isNumber(startLineNumber)) {\n\t\t\t\trange = {\n\t\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: startLineNumber,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t};\n\n\t\t\t\t// Column Number\n\t\t\t\tif (patternMatch.length > 3) {\n\t\t\t\t\tconst startColumn = parseInt(patternMatch[3], 10);\n\t\t\t\t\tif (types.isNumber(startColumn)) {\n\t\t\t\t\t\trange = {\n\t\t\t\t\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\t\t\t\t\tstartColumn: startColumn,\n\t\t\t\t\t\t\tendLineNumber: range.endLineNumber,\n\t\t\t\t\t\t\tendColumn: startColumn\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// User has typed \"something:\" or \"something#\" without a line number, in this case treat as start of file\n\t\t\telse if (patternMatch[1] === '') {\n\t\t\t\trange = {\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (patternMatch && range) {\n\t\t\treturn {\n\t\t\t\tsearch: value.substr(0, patternMatch.index), // clear range suffix from search value\n\t\t\t\trange: range\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetGroupLabel(): string {\n\t\treturn this.includeSymbols ? nls.localize('fileAndTypeResults', \"file and symbol results\") : nls.localize('fileResults', \"file results\");\n\t}\n\n\tgetAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: true\n\t\t};\n\t}\n\n\tonOpen(): void {\n\t\tthis.openSymbolHandler.onOpen();\n\t\tthis.openFileHandler.onOpen();\n\t}\n\n\tonClose(canceled: boolean): void {\n\t\tthis.isClosed = true;\n\n\t\t// Clear Cache\n\t\tthis.scorerCache = Object.create(null);\n\n\t\t// Propagate\n\t\tthis.openSymbolHandler.onClose(canceled);\n\t\tthis.openFileHandler.onClose(canceled);\n\t}\n}\n"]}]}