{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar async_1 = require(\"vs/base/common/async\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar resourceEditorModel_1 = require(\"vs/workbench/common/editor/resourceEditorModel\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar network = require(\"vs/base/common/network\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar textFileEditorModel_1 = require(\"vs/workbench/services/textfile/common/textFileEditorModel\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar ResourceModelCollection = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceModelCollection, _super);\n    function ResourceModelCollection(instantiationService, textFileService, fileService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.textFileService = textFileService;\n        _this.fileService = fileService;\n        _this.providers = Object.create(null);\n        _this.modelsToDispose = new Set();\n        return _this;\n    }\n    ResourceModelCollection.prototype.createReferencedObject = function (key, skipActivateProvider) {\n        var _this = this;\n        this.modelsToDispose.delete(key);\n        var resource = uri_1.URI.parse(key);\n        // File or remote file provider already known\n        if (this.fileService.canHandleResource(resource)) {\n            return this.textFileService.models.loadOrCreate(resource, { reason: textfiles_1.LoadReason.REFERENCE });\n        }\n        // Virtual documents\n        if (this.providers[resource.scheme]) {\n            return this.resolveTextModelContent(key).then(function () { return _this.instantiationService.createInstance(resourceEditorModel_1.ResourceEditorModel, resource); });\n        }\n        // Either unknown schema, or not yet registered, try to activate\n        if (!skipActivateProvider) {\n            return this.fileService.activateProvider(resource.scheme).then(function () { return _this.createReferencedObject(key, true); });\n        }\n        return Promise.reject(new Error('resource is not available'));\n    };\n    ResourceModelCollection.prototype.destroyReferencedObject = function (key, modelPromise) {\n        var _this = this;\n        this.modelsToDispose.add(key);\n        modelPromise.then(function (model) {\n            if (_this.modelsToDispose.has(key)) {\n                if (model instanceof textFileEditorModel_1.TextFileEditorModel) {\n                    _this.textFileService.models.disposeModel(model);\n                }\n                else {\n                    model.dispose();\n                }\n            }\n        }, function (err) {\n            // ignore\n        });\n    };\n    ResourceModelCollection.prototype.registerTextModelContentProvider = function (scheme, provider) {\n        var registry = this.providers;\n        var providers = registry[scheme] || (registry[scheme] = []);\n        providers.unshift(provider);\n        return lifecycle_1.toDisposable(function () {\n            var array = registry[scheme];\n            if (!array) {\n                return;\n            }\n            var index = array.indexOf(provider);\n            if (index === -1) {\n                return;\n            }\n            array.splice(index, 1);\n            if (array.length === 0) {\n                delete registry[scheme];\n            }\n        });\n    };\n    ResourceModelCollection.prototype.hasTextModelContentProvider = function (scheme) {\n        return this.providers[scheme] !== undefined;\n    };\n    ResourceModelCollection.prototype.resolveTextModelContent = function (key) {\n        var resource = uri_1.URI.parse(key);\n        var providers = this.providers[resource.scheme] || [];\n        var factories = providers.map(function (p) { return function () { return Promise.resolve(p.provideTextContent(resource)); }; });\n        return async_1.first(factories).then(function (model) {\n            if (!model) {\n                return Promise.reject(new Error('resource is not available'));\n            }\n            return model;\n        });\n    };\n    ResourceModelCollection = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, textfiles_1.ITextFileService),\n        tslib_1.__param(2, files_1.IFileService)\n    ], ResourceModelCollection);\n    return ResourceModelCollection;\n}(lifecycle_1.ReferenceCollection));\nvar TextModelResolverService = /** @class */ (function () {\n    function TextModelResolverService(untitledEditorService, instantiationService, modelService) {\n        this.untitledEditorService = untitledEditorService;\n        this.instantiationService = instantiationService;\n        this.modelService = modelService;\n        this.resourceModelCollection = instantiationService.createInstance(ResourceModelCollection);\n    }\n    TextModelResolverService.prototype.createModelReference = function (resource) {\n        return this._createModelReference(resource);\n    };\n    TextModelResolverService.prototype._createModelReference = function (resource) {\n        // Untitled Schema: go through cached input\n        if (resource.scheme === network.Schemas.untitled) {\n            return this.untitledEditorService.loadOrCreate({ resource: resource }).then(function (model) { return new lifecycle_1.ImmortalReference(model); });\n        }\n        // InMemory Schema: go through model service cache\n        if (resource.scheme === network.Schemas.inMemory) {\n            var cachedModel = this.modelService.getModel(resource);\n            if (!cachedModel) {\n                return Promise.reject(new Error('Cant resolve inmemory resource'));\n            }\n            return Promise.resolve(new lifecycle_1.ImmortalReference(this.instantiationService.createInstance(resourceEditorModel_1.ResourceEditorModel, resource)));\n        }\n        var ref = this.resourceModelCollection.acquire(resource.toString());\n        return ref.object.then(function (model) { return ({ object: model, dispose: function () { return ref.dispose(); } }); }, function (err) {\n            ref.dispose();\n            return Promise.reject(err);\n        });\n    };\n    TextModelResolverService.prototype.registerTextModelContentProvider = function (scheme, provider) {\n        return this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n    };\n    TextModelResolverService.prototype.hasTextModelContentProvider = function (scheme) {\n        return this.resourceModelCollection.hasTextModelContentProvider(scheme);\n    };\n    TextModelResolverService = tslib_1.__decorate([\n        tslib_1.__param(0, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, modelService_1.IModelService)\n    ], TextModelResolverService);\n    return TextModelResolverService;\n}());\nexports.TextModelResolverService = TextModelResolverService;\nextensions_1.registerSingleton(resolverService_1.ITextModelService, TextModelResolverService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { first } from 'vs/base/common/async';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IDisposable, toDisposable, IReference, ReferenceCollection, ImmortalReference } from 'vs/base/common/lifecycle';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ResourceEditorModel } from 'vs/workbench/common/editor/resourceEditorModel';\nimport { ITextFileService, LoadReason } from 'vs/workbench/services/textfile/common/textfiles';\nimport * as network from 'vs/base/common/network';\nimport { ITextModelService, ITextModelContentProvider, ITextEditorModel, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nclass ResourceModelCollection extends ReferenceCollection<Promise<ITextEditorModel>> {\n\n\tprivate providers: { [scheme: string]: ITextModelContentProvider[] } = Object.create(null);\n\tprivate modelsToDispose = new Set<string>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t}\n\n\tcreateReferencedObject(key: string, skipActivateProvider?: boolean): Promise<ITextEditorModel> {\n\t\tthis.modelsToDispose.delete(key);\n\n\t\tconst resource = URI.parse(key);\n\n\t\t// File or remote file provider already known\n\t\tif (this.fileService.canHandleResource(resource)) {\n\t\t\treturn this.textFileService.models.loadOrCreate(resource, { reason: LoadReason.REFERENCE });\n\t\t}\n\n\t\t// Virtual documents\n\t\tif (this.providers[resource.scheme]) {\n\t\t\treturn this.resolveTextModelContent(key).then(() => this.instantiationService.createInstance(ResourceEditorModel, resource));\n\t\t}\n\n\t\t// Either unknown schema, or not yet registered, try to activate\n\t\tif (!skipActivateProvider) {\n\t\t\treturn this.fileService.activateProvider(resource.scheme).then(() => this.createReferencedObject(key, true));\n\t\t}\n\n\t\treturn Promise.reject(new Error('resource is not available'));\n\t}\n\n\tdestroyReferencedObject(key: string, modelPromise: Promise<ITextEditorModel>): void {\n\t\tthis.modelsToDispose.add(key);\n\n\t\tmodelPromise.then(model => {\n\t\t\tif (this.modelsToDispose.has(key)) {\n\t\t\t\tif (model instanceof TextFileEditorModel) {\n\t\t\t\t\tthis.textFileService.models.disposeModel(model);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}, err => {\n\t\t\t// ignore\n\t\t});\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\tconst registry = this.providers;\n\t\tconst providers = registry[scheme] || (registry[scheme] = []);\n\n\t\tproviders.unshift(provider);\n\n\t\treturn toDisposable(() => {\n\t\t\tconst array = registry[scheme];\n\n\t\t\tif (!array) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = array.indexOf(provider);\n\n\t\t\tif (index === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tarray.splice(index, 1);\n\n\t\t\tif (array.length === 0) {\n\t\t\t\tdelete registry[scheme];\n\t\t\t}\n\t\t});\n\t}\n\n\thasTextModelContentProvider(scheme: string): boolean {\n\t\treturn this.providers[scheme] !== undefined;\n\t}\n\n\tprivate resolveTextModelContent(key: string): Promise<ITextModel> {\n\t\tconst resource = URI.parse(key);\n\t\tconst providers = this.providers[resource.scheme] || [];\n\t\tconst factories = providers.map(p => () => Promise.resolve(p.provideTextContent(resource)));\n\n\t\treturn first(factories).then(model => {\n\t\t\tif (!model) {\n\t\t\t\treturn Promise.reject(new Error('resource is not available'));\n\t\t\t}\n\n\t\t\treturn model;\n\t\t});\n\t}\n}\n\nexport class TextModelResolverService implements ITextModelService {\n\n\t_serviceBrand: any;\n\n\tprivate resourceModelCollection: ResourceModelCollection;\n\n\tconstructor(\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tthis.resourceModelCollection = instantiationService.createInstance(ResourceModelCollection);\n\t}\n\n\tcreateModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\treturn this._createModelReference(resource);\n\t}\n\n\tprivate _createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\n\t\t// Untitled Schema: go through cached input\n\t\tif (resource.scheme === network.Schemas.untitled) {\n\t\t\treturn this.untitledEditorService.loadOrCreate({ resource }).then(model => new ImmortalReference(model as IResolvedTextEditorModel));\n\t\t}\n\n\t\t// InMemory Schema: go through model service cache\n\t\tif (resource.scheme === network.Schemas.inMemory) {\n\t\t\tconst cachedModel = this.modelService.getModel(resource);\n\n\t\t\tif (!cachedModel) {\n\t\t\t\treturn Promise.reject(new Error('Cant resolve inmemory resource'));\n\t\t\t}\n\n\t\t\treturn Promise.resolve(new ImmortalReference(this.instantiationService.createInstance(ResourceEditorModel, resource) as IResolvedTextEditorModel));\n\t\t}\n\n\t\tconst ref = this.resourceModelCollection.acquire(resource.toString());\n\n\t\treturn ref.object.then(\n\t\t\tmodel => ({ object: model, dispose: () => ref.dispose() }),\n\t\t\terr => {\n\t\t\t\tref.dispose();\n\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t);\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\treturn this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n\t}\n\n\thasTextModelContentProvider(scheme: string): boolean {\n\t\treturn this.resourceModelCollection.hasTextModelContentProvider(scheme);\n\t}\n}\n\nregisterSingleton(ITextModelService, TextModelResolverService, true);"]}]}