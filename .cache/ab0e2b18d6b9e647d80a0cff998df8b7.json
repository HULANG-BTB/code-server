{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar splitview_1 = require(\"vs/base/browser/ui/splitview/splitview\");\nvar widget_1 = require(\"vs/base/browser/ui/widget\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar async_1 = require(\"vs/base/common/async\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar event_1 = require(\"vs/base/common/event\");\nvar iterator_1 = require(\"vs/base/common/iterator\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar findController_1 = require(\"vs/editor/contrib/find/findController\");\nvar folding_1 = require(\"vs/editor/contrib/folding/folding\");\nvar messageController_1 = require(\"vs/editor/contrib/message/messageController\");\nvar multicursor_1 = require(\"vs/editor/contrib/multicursor/multicursor\");\nvar nls = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar baseEditor_1 = require(\"vs/workbench/browser/parts/editor/baseEditor\");\nvar textEditor_1 = require(\"vs/workbench/browser/parts/editor/textEditor\");\nvar preferencesRenderers_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesRenderers\");\nvar preferencesWidgets_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesWidgets\");\nvar preferences_1 = require(\"vs/workbench/contrib/preferences/common/preferences\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar preferences_2 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar preferencesModels_1 = require(\"vs/workbench/services/preferences/common/preferencesModels\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar types_1 = require(\"vs/base/common/types\");\nvar PreferencesEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesEditor, _super);\n    function PreferencesEditor(preferencesService, telemetryService, editorService, contextKeyService, instantiationService, themeService, progressService, storageService) {\n        var _this = _super.call(this, PreferencesEditor.ID, telemetryService, themeService, storageService) || this;\n        _this.preferencesService = preferencesService;\n        _this.editorService = editorService;\n        _this.contextKeyService = contextKeyService;\n        _this.instantiationService = instantiationService;\n        _this.progressService = progressService;\n        _this.lastFocusedWidget = undefined;\n        _this.minimumHeight = 260;\n        _this._onDidCreateWidget = new event_1.Emitter();\n        _this.onDidSizeConstraintsChange = _this._onDidCreateWidget.event;\n        _this.defaultSettingsEditorContextKey = preferences_1.CONTEXT_SETTINGS_EDITOR.bindTo(_this.contextKeyService);\n        _this.defaultSettingsJSONEditorContextKey = preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.bindTo(_this.contextKeyService);\n        _this.searchFocusContextKey = preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(_this.contextKeyService);\n        _this.delayedFilterLogging = new async_1.Delayer(1000);\n        _this.localSearchDelayer = new async_1.Delayer(100);\n        _this.remoteSearchThrottle = new async_1.ThrottledDelayer(200);\n        return _this;\n    }\n    Object.defineProperty(PreferencesEditor.prototype, \"minimumWidth\", {\n        get: function () { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.minimumWidth : 0; },\n        // these setters need to exist because this extends from BaseEditor\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesEditor.prototype, \"maximumWidth\", {\n        get: function () { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.maximumWidth : Number.POSITIVE_INFINITY; },\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    PreferencesEditor.prototype.createEditor = function (parent) {\n        var _this = this;\n        DOM.addClass(parent, 'preferences-editor');\n        this.headerContainer = DOM.append(parent, DOM.$('.preferences-header'));\n        this.searchWidget = this._register(this.instantiationService.createInstance(preferencesWidgets_1.SearchWidget, this.headerContainer, {\n            ariaLabel: nls.localize('SearchSettingsWidget.AriaLabel', \"Search settings\"),\n            placeholder: nls.localize('SearchSettingsWidget.Placeholder', \"Search Settings\"),\n            focusKey: this.searchFocusContextKey,\n            showResultCount: true,\n            ariaLive: 'assertive'\n        }));\n        this._register(this.searchWidget.onDidChange(function (value) { return _this.onInputChanged(); }));\n        this._register(this.searchWidget.onFocus(function () { return _this.lastFocusedWidget = _this.searchWidget; }));\n        this.lastFocusedWidget = this.searchWidget;\n        var editorsContainer = DOM.append(parent, DOM.$('.preferences-editors-container'));\n        this.sideBySidePreferencesWidget = this._register(this.instantiationService.createInstance(SideBySidePreferencesWidget, editorsContainer));\n        this._onDidCreateWidget.fire(undefined);\n        this._register(this.sideBySidePreferencesWidget.onFocus(function () { return _this.lastFocusedWidget = _this.sideBySidePreferencesWidget; }));\n        this._register(this.sideBySidePreferencesWidget.onDidSettingsTargetChange(function (target) { return _this.switchSettings(target); }));\n        this.preferencesRenderers = this._register(this.instantiationService.createInstance(PreferencesRenderersController));\n        this._register(this.preferencesRenderers.onDidFilterResultsCountChange(function (count) { return _this.showSearchResultsMessage(count); }));\n    };\n    PreferencesEditor.prototype.clearSearchResults = function () {\n        if (this.searchWidget) {\n            this.searchWidget.clear();\n        }\n    };\n    PreferencesEditor.prototype.focusNextResult = function () {\n        if (this.preferencesRenderers) {\n            this.preferencesRenderers.focusNextPreference(true);\n        }\n    };\n    PreferencesEditor.prototype.focusPreviousResult = function () {\n        if (this.preferencesRenderers) {\n            this.preferencesRenderers.focusNextPreference(false);\n        }\n    };\n    PreferencesEditor.prototype.editFocusedPreference = function () {\n        this.preferencesRenderers.editFocusedPreference();\n    };\n    PreferencesEditor.prototype.setInput = function (newInput, options, token) {\n        var _this = this;\n        this.defaultSettingsEditorContextKey.set(true);\n        this.defaultSettingsJSONEditorContextKey.set(true);\n        if (options && options.query) {\n            this.focusSearch(options.query);\n        }\n        return _super.prototype.setInput.call(this, newInput, options, token).then(function () { return _this.updateInput(newInput, options, token); });\n    };\n    PreferencesEditor.prototype.layout = function (dimension) {\n        this.searchWidget.layout(dimension);\n        var headerHeight = DOM.getTotalHeight(this.headerContainer);\n        this.sideBySidePreferencesWidget.layout(new DOM.Dimension(dimension.width, dimension.height - headerHeight));\n    };\n    PreferencesEditor.prototype.getControl = function () {\n        return this.sideBySidePreferencesWidget.getControl();\n    };\n    PreferencesEditor.prototype.focus = function () {\n        if (this.lastFocusedWidget) {\n            this.lastFocusedWidget.focus();\n        }\n    };\n    PreferencesEditor.prototype.focusSearch = function (filter) {\n        if (filter) {\n            this.searchWidget.setValue(filter);\n        }\n        this.searchWidget.focus();\n    };\n    PreferencesEditor.prototype.focusSettingsFileEditor = function () {\n        if (this.sideBySidePreferencesWidget) {\n            this.sideBySidePreferencesWidget.focus();\n        }\n    };\n    PreferencesEditor.prototype.clearInput = function () {\n        this.defaultSettingsEditorContextKey.set(false);\n        this.defaultSettingsJSONEditorContextKey.set(false);\n        this.sideBySidePreferencesWidget.clearInput();\n        this.preferencesRenderers.onHidden();\n        _super.prototype.clearInput.call(this);\n    };\n    PreferencesEditor.prototype.setEditorVisible = function (visible, group) {\n        this.sideBySidePreferencesWidget.setEditorVisible(visible, group);\n        _super.prototype.setEditorVisible.call(this, visible, group);\n    };\n    PreferencesEditor.prototype.updateInput = function (newInput, options, token) {\n        var _this = this;\n        return this.sideBySidePreferencesWidget.setInput(newInput.details, newInput.master, options, token).then(function (_a) {\n            var defaultPreferencesRenderer = _a.defaultPreferencesRenderer, editablePreferencesRenderer = _a.editablePreferencesRenderer;\n            if (token.isCancellationRequested) {\n                return;\n            }\n            _this.preferencesRenderers.defaultPreferencesRenderer = defaultPreferencesRenderer;\n            _this.preferencesRenderers.editablePreferencesRenderer = editablePreferencesRenderer;\n            _this.onInputChanged();\n        });\n    };\n    PreferencesEditor.prototype.onInputChanged = function () {\n        var _this = this;\n        var query = this.searchWidget.getValue().trim();\n        this.delayedFilterLogging.cancel();\n        this.triggerSearch(query)\n            .then(function () {\n            var result = _this.preferencesRenderers.lastFilterResult;\n            if (result) {\n                _this.delayedFilterLogging.trigger(function () { return _this.reportFilteringUsed(query, _this.preferencesRenderers.lastFilterResult); });\n            }\n        });\n    };\n    PreferencesEditor.prototype.triggerSearch = function (query) {\n        var _this = this;\n        if (query) {\n            return Promise.all([\n                this.localSearchDelayer.trigger(function () { return _this.preferencesRenderers.localFilterPreferences(query).then(function () { }); }),\n                this.remoteSearchThrottle.trigger(function () { return Promise.resolve(_this.progressService.showWhile(_this.preferencesRenderers.remoteSearchPreferences(query), 500)); })\n            ]).then(function () { });\n        }\n        else {\n            // When clearing the input, update immediately to clear it\n            this.localSearchDelayer.cancel();\n            this.preferencesRenderers.localFilterPreferences(query);\n            this.remoteSearchThrottle.cancel();\n            return this.preferencesRenderers.remoteSearchPreferences(query);\n        }\n    };\n    PreferencesEditor.prototype.switchSettings = function (target) {\n        var _this = this;\n        // Focus the editor if this editor is not active editor\n        if (this.editorService.activeControl !== this) {\n            this.focus();\n        }\n        var promise = this.input && this.input.isDirty() ? this.input.save() : Promise.resolve(true);\n        promise.then(function () {\n            if (target === configuration_1.ConfigurationTarget.USER) {\n                _this.preferencesService.switchSettings(configuration_1.ConfigurationTarget.USER, _this.preferencesService.userSettingsResource, true);\n            }\n            else if (target === configuration_1.ConfigurationTarget.WORKSPACE) {\n                _this.preferencesService.switchSettings(configuration_1.ConfigurationTarget.WORKSPACE, _this.preferencesService.workspaceSettingsResource, true);\n            }\n            else if (target instanceof uri_1.URI) {\n                _this.preferencesService.switchSettings(configuration_1.ConfigurationTarget.WORKSPACE_FOLDER, target, true);\n            }\n        });\n    };\n    PreferencesEditor.prototype.showSearchResultsMessage = function (count) {\n        var countValue = count.count;\n        if (count.target) {\n            this.sideBySidePreferencesWidget.setResultCount(count.target, count.count);\n        }\n        else if (this.searchWidget.getValue()) {\n            if (countValue === 0) {\n                this.searchWidget.showMessage(nls.localize('noSettingsFound', \"No Settings Found\"));\n            }\n            else if (countValue === 1) {\n                this.searchWidget.showMessage(nls.localize('oneSettingFound', \"1 Setting Found\"));\n            }\n            else {\n                this.searchWidget.showMessage(nls.localize('settingsFound', \"{0} Settings Found\", countValue));\n            }\n        }\n        else {\n            this.searchWidget.showMessage(nls.localize('totalSettingsMessage', \"Total {0} Settings\", countValue));\n        }\n    };\n    PreferencesEditor.prototype._countById = function (settingsGroups) {\n        var result = {};\n        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {\n            var group = settingsGroups_1[_i];\n            var i = 0;\n            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {\n                var section = _b[_a];\n                i += section.settings.length;\n            }\n            result[group.id] = i;\n        }\n        return result;\n    };\n    PreferencesEditor.prototype.reportFilteringUsed = function (filter, filterResult) {\n        if (filter && filter !== this._lastReportedFilter) {\n            var metadata_1 = filterResult && filterResult.metadata;\n            var counts = filterResult && this._countById(filterResult.filteredGroups);\n            var durations_1;\n            if (metadata_1) {\n                durations_1 = Object.create(null);\n                Object.keys(metadata_1).forEach(function (key) { return durations_1[key] = metadata_1[key].duration; });\n            }\n            var data = {\n                filter: filter,\n                durations: durations_1,\n                counts: counts,\n                requestCount: metadata_1 && metadata_1['nlpResult'] && metadata_1['nlpResult'].requestCount\n            };\n            /* __GDPR__\n                \"defaultSettings.filter\" : {\n                    \"filter\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n                    \"durations.nlpresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"counts.nlpresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"durations.filterresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"counts.filterresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"requestCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            this.telemetryService.publicLog('defaultSettings.filter', data);\n            this._lastReportedFilter = filter;\n        }\n    };\n    PreferencesEditor.prototype.dispose = function () {\n        this._onDidCreateWidget.dispose();\n        _super.prototype.dispose.call(this);\n    };\n    PreferencesEditor.ID = 'workbench.editor.preferencesEditor';\n    PreferencesEditor = tslib_1.__decorate([\n        tslib_1.__param(0, preferences_2.IPreferencesService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, contextkey_1.IContextKeyService),\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, progress_1.IProgressService),\n        tslib_1.__param(7, storage_1.IStorageService)\n    ], PreferencesEditor);\n    return PreferencesEditor;\n}(baseEditor_1.BaseEditor));\nexports.PreferencesEditor = PreferencesEditor;\nvar SettingsNavigator = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsNavigator, _super);\n    function SettingsNavigator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SettingsNavigator.prototype.next = function () {\n        return _super.prototype.next.call(this) || _super.prototype.first.call(this);\n    };\n    SettingsNavigator.prototype.previous = function () {\n        return _super.prototype.previous.call(this) || _super.prototype.last.call(this);\n    };\n    SettingsNavigator.prototype.reset = function () {\n        this.index = this.start - 1;\n    };\n    return SettingsNavigator;\n}(iterator_1.ArrayNavigator));\nvar PreferencesRenderersController = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesRenderersController, _super);\n    function PreferencesRenderersController(preferencesSearchService, telemetryService, preferencesService, workspaceContextService, logService) {\n        var _this = _super.call(this) || this;\n        _this.preferencesSearchService = preferencesSearchService;\n        _this.telemetryService = telemetryService;\n        _this.preferencesService = preferencesService;\n        _this.workspaceContextService = workspaceContextService;\n        _this.logService = logService;\n        _this._defaultPreferencesRendererDisposables = [];\n        _this._editablePreferencesRendererDisposables = [];\n        _this._prefsModelsForSearch = new Map();\n        _this._onDidFilterResultsCountChange = _this._register(new event_1.Emitter());\n        _this.onDidFilterResultsCountChange = _this._onDidFilterResultsCountChange.event;\n        return _this;\n    }\n    Object.defineProperty(PreferencesRenderersController.prototype, \"lastFilterResult\", {\n        get: function () {\n            return this._lastFilterResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesRenderersController.prototype, \"defaultPreferencesRenderer\", {\n        get: function () {\n            return this._defaultPreferencesRenderer;\n        },\n        set: function (defaultPreferencesRenderer) {\n            var _this = this;\n            if (this._defaultPreferencesRenderer !== defaultPreferencesRenderer) {\n                this._defaultPreferencesRenderer = defaultPreferencesRenderer;\n                this._defaultPreferencesRendererDisposables = lifecycle_1.dispose(this._defaultPreferencesRendererDisposables);\n                if (this._defaultPreferencesRenderer) {\n                    this._defaultPreferencesRenderer.onUpdatePreference(function (_a) {\n                        var key = _a.key, value = _a.value, source = _a.source;\n                        _this._editablePreferencesRenderer.updatePreference(key, value, source);\n                        _this._updatePreference(key, value, source);\n                    }, this, this._defaultPreferencesRendererDisposables);\n                    this._defaultPreferencesRenderer.onFocusPreference(function (preference) { return _this._focusPreference(preference, _this._editablePreferencesRenderer); }, this, this._defaultPreferencesRendererDisposables);\n                    this._defaultPreferencesRenderer.onClearFocusPreference(function (preference) { return _this._clearFocus(preference, _this._editablePreferencesRenderer); }, this, this._defaultPreferencesRendererDisposables);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesRenderersController.prototype, \"editablePreferencesRenderer\", {\n        get: function () {\n            return this._editablePreferencesRenderer;\n        },\n        set: function (editableSettingsRenderer) {\n            var _this = this;\n            if (this._editablePreferencesRenderer !== editableSettingsRenderer) {\n                this._editablePreferencesRenderer = editableSettingsRenderer;\n                this._editablePreferencesRendererDisposables = lifecycle_1.dispose(this._editablePreferencesRendererDisposables);\n                if (this._editablePreferencesRenderer) {\n                    this._editablePreferencesRenderer.preferencesModel\n                        .onDidChangeGroups(this._onEditableContentDidChange, this, this._editablePreferencesRendererDisposables);\n                    this._editablePreferencesRenderer.onUpdatePreference(function (_a) {\n                        var key = _a.key, value = _a.value, source = _a.source;\n                        return _this._updatePreference(key, value, source, true);\n                    }, this, this._defaultPreferencesRendererDisposables);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PreferencesRenderersController.prototype._onEditableContentDidChange = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var foundExactMatch;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.localFilterPreferences(this._lastQuery, true)];\n                    case 1:\n                        foundExactMatch = _a.sent();\n                        if (!!foundExactMatch) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.remoteSearchPreferences(this._lastQuery, true)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PreferencesRenderersController.prototype.onHidden = function () {\n        this._prefsModelsForSearch.forEach(function (model) { return model.dispose(); });\n        this._prefsModelsForSearch = new Map();\n    };\n    PreferencesRenderersController.prototype.remoteSearchPreferences = function (query, updateCurrentResults) {\n        var _this = this;\n        if (this.lastFilterResult && this.lastFilterResult.exactMatch) {\n            // Skip and clear remote search\n            query = '';\n        }\n        if (this._remoteFilterCancelToken) {\n            this._remoteFilterCancelToken.cancel();\n            this._remoteFilterCancelToken.dispose();\n            this._remoteFilterCancelToken = undefined;\n        }\n        this._currentRemoteSearchProvider = (updateCurrentResults && this._currentRemoteSearchProvider) || this.preferencesSearchService.getRemoteSearchProvider(query);\n        this._remoteFilterCancelToken = new cancellation_1.CancellationTokenSource();\n        return this.filterOrSearchPreferences(query, this._currentRemoteSearchProvider, 'nlpResult', nls.localize('nlpResult', \"Natural Language Results\"), 1, this._remoteFilterCancelToken.token, updateCurrentResults).then(function () {\n            if (_this._remoteFilterCancelToken) {\n                _this._remoteFilterCancelToken.dispose();\n                _this._remoteFilterCancelToken = undefined;\n            }\n        }, function (err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                return;\n            }\n            else {\n                errors_1.onUnexpectedError(err);\n            }\n        });\n    };\n    PreferencesRenderersController.prototype.localFilterPreferences = function (query, updateCurrentResults) {\n        if (this._settingsNavigator) {\n            this._settingsNavigator.reset();\n        }\n        this._currentLocalSearchProvider = (updateCurrentResults && this._currentLocalSearchProvider) || this.preferencesSearchService.getLocalSearchProvider(query);\n        return this.filterOrSearchPreferences(query, this._currentLocalSearchProvider, 'filterResult', nls.localize('filterResult', \"Filtered Results\"), 0, undefined, updateCurrentResults);\n    };\n    PreferencesRenderersController.prototype.filterOrSearchPreferences = function (query, searchProvider, groupId, groupLabel, groupOrder, token, editableContentOnly) {\n        var _this = this;\n        this._lastQuery = query;\n        var filterPs = [this._filterOrSearchPreferences(query, this.editablePreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token)];\n        if (!editableContentOnly) {\n            filterPs.push(this._filterOrSearchPreferences(query, this.defaultPreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token));\n            filterPs.push(this.searchAllSettingsTargets(query, searchProvider, groupId, groupLabel, groupOrder, token).then(function () { return undefined; }));\n        }\n        return Promise.all(filterPs).then(function (results) {\n            var editableFilterResult = results[0], defaultFilterResult = results[1];\n            if (!defaultFilterResult && editableContentOnly) {\n                defaultFilterResult = _this.lastFilterResult;\n            }\n            _this.consolidateAndUpdate(defaultFilterResult, editableFilterResult);\n            _this._lastFilterResult = defaultFilterResult;\n            return !!(defaultFilterResult && defaultFilterResult.exactMatch);\n        });\n    };\n    PreferencesRenderersController.prototype.searchAllSettingsTargets = function (query, searchProvider, groupId, groupLabel, groupOrder, token) {\n        var searchPs = [\n            this.searchSettingsTarget(query, searchProvider, configuration_1.ConfigurationTarget.WORKSPACE, groupId, groupLabel, groupOrder, token),\n            this.searchSettingsTarget(query, searchProvider, configuration_1.ConfigurationTarget.USER, groupId, groupLabel, groupOrder, token)\n        ];\n        for (var _i = 0, _a = this.workspaceContextService.getWorkspace().folders; _i < _a.length; _i++) {\n            var folder = _a[_i];\n            var folderSettingsResource = this.preferencesService.getFolderSettingsResource(folder.uri);\n            searchPs.push(this.searchSettingsTarget(query, searchProvider, types_1.withNullAsUndefined(folderSettingsResource), groupId, groupLabel, groupOrder, token));\n        }\n        return Promise.all(searchPs).then(function () { });\n    };\n    PreferencesRenderersController.prototype.searchSettingsTarget = function (query, provider, target, groupId, groupLabel, groupOrder, token) {\n        var _this = this;\n        if (!query) {\n            // Don't open the other settings targets when query is empty\n            this._onDidFilterResultsCountChange.fire({ target: target, count: 0 });\n            return Promise.resolve();\n        }\n        return this.getPreferencesEditorModel(target).then(function (model) {\n            return model && _this._filterOrSearchPreferencesModel('', model, provider, groupId, groupLabel, groupOrder, token);\n        }).then(function (result) {\n            var count = result ? _this._flatten(result.filteredGroups).length : 0;\n            _this._onDidFilterResultsCountChange.fire({ target: target, count: count });\n        }, function (err) {\n            if (!errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            return undefined;\n        });\n    };\n    PreferencesRenderersController.prototype.getPreferencesEditorModel = function (target) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var resource, targetKey, model, _a, e_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resource = target === configuration_1.ConfigurationTarget.USER ? this.preferencesService.userSettingsResource :\n                            target === configuration_1.ConfigurationTarget.WORKSPACE ? this.preferencesService.workspaceSettingsResource :\n                                target;\n                        if (!resource) {\n                            return [2 /*return*/, undefined];\n                        }\n                        targetKey = resource.toString();\n                        if (!!this._prefsModelsForSearch.has(targetKey)) return [3 /*break*/, 4];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        _a = this._register;\n                        return [4 /*yield*/, this.preferencesService.createPreferencesEditorModel(resource)];\n                    case 2:\n                        model = _a.apply(this, [_b.sent()]);\n                        this._prefsModelsForSearch.set(targetKey, model);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        // Will throw when the settings file doesn't exist.\n                        return [2 /*return*/, undefined];\n                    case 4: return [2 /*return*/, this._prefsModelsForSearch.get(targetKey)];\n                }\n            });\n        });\n    };\n    PreferencesRenderersController.prototype.focusNextPreference = function (forward) {\n        if (forward === void 0) { forward = true; }\n        if (!this._settingsNavigator) {\n            return;\n        }\n        var setting = forward ? this._settingsNavigator.next() : this._settingsNavigator.previous();\n        this._focusPreference(setting, this._defaultPreferencesRenderer);\n        this._focusPreference(setting, this._editablePreferencesRenderer);\n    };\n    PreferencesRenderersController.prototype.editFocusedPreference = function () {\n        if (!this._settingsNavigator || !this._settingsNavigator.current()) {\n            return;\n        }\n        var setting = this._settingsNavigator.current();\n        var shownInEditableRenderer = this._editablePreferencesRenderer.editPreference(setting);\n        if (!shownInEditableRenderer) {\n            this.defaultPreferencesRenderer.editPreference(setting);\n        }\n    };\n    PreferencesRenderersController.prototype._filterOrSearchPreferences = function (filter, preferencesRenderer, provider, groupId, groupLabel, groupOrder, token) {\n        if (!preferencesRenderer) {\n            return Promise.resolve(undefined);\n        }\n        var model = preferencesRenderer.preferencesModel;\n        return this._filterOrSearchPreferencesModel(filter, model, provider, groupId, groupLabel, groupOrder, token).then(function (filterResult) {\n            preferencesRenderer.filterPreferences(filterResult);\n            return filterResult;\n        });\n    };\n    PreferencesRenderersController.prototype._filterOrSearchPreferencesModel = function (filter, model, provider, groupId, groupLabel, groupOrder, token) {\n        var _this = this;\n        var searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n        return searchP\n            .then(null, function (err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            else {\n                /* __GDPR__\n                    \"defaultSettings.searchError\" : {\n                        \"message\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" },\n                        \"filter\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                var message = errors_1.getErrorMessage(err).trim();\n                if (message && message !== 'Error') {\n                    // \"Error\" = any generic network error\n                    _this.telemetryService.publicLog('defaultSettings.searchError', { message: message, filter: filter });\n                    _this.logService.info('Setting search error: ' + message);\n                }\n                return undefined;\n            }\n        })\n            .then(function (searchResult) {\n            if (token && token.isCancellationRequested) {\n                searchResult = null;\n            }\n            var filterResult = searchResult ?\n                model.updateResultGroup(groupId, {\n                    id: groupId,\n                    label: groupLabel,\n                    result: searchResult,\n                    order: groupOrder\n                }) :\n                model.updateResultGroup(groupId, undefined);\n            if (filterResult) {\n                filterResult.query = filter;\n                filterResult.exactMatch = searchResult && searchResult.exactMatch;\n            }\n            return filterResult;\n        });\n    };\n    PreferencesRenderersController.prototype.consolidateAndUpdate = function (defaultFilterResult, editableFilterResult) {\n        var defaultPreferencesFilteredGroups = defaultFilterResult ? defaultFilterResult.filteredGroups : this._getAllPreferences(this._defaultPreferencesRenderer);\n        var editablePreferencesFilteredGroups = editableFilterResult ? editableFilterResult.filteredGroups : this._getAllPreferences(this._editablePreferencesRenderer);\n        var consolidatedSettings = this._consolidateSettings(editablePreferencesFilteredGroups, defaultPreferencesFilteredGroups);\n        // Maintain the current navigation position when updating SettingsNavigator\n        var current = this._settingsNavigator && this._settingsNavigator.current();\n        var navigatorSettings = this._lastQuery ? consolidatedSettings : [];\n        var currentIndex = current ?\n            arrays.firstIndex(navigatorSettings, function (s) { return s.key === current.key; }) :\n            -1;\n        this._settingsNavigator = new SettingsNavigator(navigatorSettings, Math.max(currentIndex, 0));\n        if (currentIndex >= 0) {\n            this._settingsNavigator.next();\n            var newCurrent = this._settingsNavigator.current();\n            this._focusPreference(newCurrent, this._defaultPreferencesRenderer);\n            this._focusPreference(newCurrent, this._editablePreferencesRenderer);\n        }\n        var totalCount = consolidatedSettings.length;\n        this._onDidFilterResultsCountChange.fire({ count: totalCount });\n    };\n    PreferencesRenderersController.prototype._getAllPreferences = function (preferencesRenderer) {\n        return preferencesRenderer ? preferencesRenderer.preferencesModel.settingsGroups : [];\n    };\n    PreferencesRenderersController.prototype._focusPreference = function (preference, preferencesRenderer) {\n        if (preference && preferencesRenderer) {\n            preferencesRenderer.focusPreference(preference);\n        }\n    };\n    PreferencesRenderersController.prototype._clearFocus = function (preference, preferencesRenderer) {\n        if (preference && preferencesRenderer) {\n            preferencesRenderer.clearFocus(preference);\n        }\n    };\n    PreferencesRenderersController.prototype._updatePreference = function (key, value, source, fromEditableSettings) {\n        var data = {\n            userConfigurationKeys: [key]\n        };\n        if (this.lastFilterResult) {\n            data['query'] = this.lastFilterResult.query;\n            data['editableSide'] = !!fromEditableSettings;\n            var nlpMetadata_1 = this.lastFilterResult.metadata && this.lastFilterResult.metadata['nlpResult'];\n            if (nlpMetadata_1) {\n                var sortedKeys = Object.keys(nlpMetadata_1.scoredResults).sort(function (a, b) { return nlpMetadata_1.scoredResults[b].score - nlpMetadata_1.scoredResults[a].score; });\n                var suffix_1 = '##' + key;\n                data['nlpIndex'] = arrays.firstIndex(sortedKeys, function (key) { return strings.endsWith(key, suffix_1); });\n            }\n            var settingLocation = this._findSetting(this.lastFilterResult, key);\n            if (settingLocation) {\n                data['groupId'] = this.lastFilterResult.filteredGroups[settingLocation.groupIdx].id;\n                data['displayIdx'] = settingLocation.overallSettingIdx;\n            }\n        }\n        /* __GDPR__\n            \"defaultSettingsActions.copySetting\" : {\n                \"userConfigurationKeys\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"query\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n                \"nlpIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"groupId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"displayIdx\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"editableSide\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        this.telemetryService.publicLog('defaultSettingsActions.copySetting', data);\n    };\n    PreferencesRenderersController.prototype._findSetting = function (filterResult, key) {\n        var overallSettingIdx = 0;\n        for (var groupIdx = 0; groupIdx < filterResult.filteredGroups.length; groupIdx++) {\n            var group = filterResult.filteredGroups[groupIdx];\n            for (var settingIdx = 0; settingIdx < group.sections[0].settings.length; settingIdx++) {\n                var setting = group.sections[0].settings[settingIdx];\n                if (key === setting.key) {\n                    return { groupIdx: groupIdx, settingIdx: settingIdx, overallSettingIdx: overallSettingIdx };\n                }\n                overallSettingIdx++;\n            }\n        }\n        return undefined;\n    };\n    PreferencesRenderersController.prototype._consolidateSettings = function (editableSettingsGroups, defaultSettingsGroups) {\n        var defaultSettings = this._flatten(defaultSettingsGroups);\n        var editableSettings = this._flatten(editableSettingsGroups).filter(function (secondarySetting) { return defaultSettings.every(function (primarySetting) { return primarySetting.key !== secondarySetting.key; }); });\n        return defaultSettings.concat(editableSettings);\n    };\n    PreferencesRenderersController.prototype._flatten = function (settingsGroups) {\n        var settings = [];\n        for (var _i = 0, settingsGroups_2 = settingsGroups; _i < settingsGroups_2.length; _i++) {\n            var group = settingsGroups_2[_i];\n            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {\n                var section = _b[_a];\n                settings.push.apply(settings, section.settings);\n            }\n        }\n        return settings;\n    };\n    PreferencesRenderersController.prototype.dispose = function () {\n        lifecycle_1.dispose(this._defaultPreferencesRendererDisposables);\n        lifecycle_1.dispose(this._editablePreferencesRendererDisposables);\n        _super.prototype.dispose.call(this);\n    };\n    PreferencesRenderersController = tslib_1.__decorate([\n        tslib_1.__param(0, preferences_1.IPreferencesSearchService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, preferences_2.IPreferencesService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, log_1.ILogService)\n    ], PreferencesRenderersController);\n    return PreferencesRenderersController;\n}(lifecycle_1.Disposable));\nvar SideBySidePreferencesWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(SideBySidePreferencesWidget, _super);\n    function SideBySidePreferencesWidget(parentElement, instantiationService, themeService, workspaceContextService, preferencesService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.themeService = themeService;\n        _this.workspaceContextService = workspaceContextService;\n        _this.preferencesService = preferencesService;\n        _this.dimension = new DOM.Dimension(0, 0);\n        _this._onFocus = new event_1.Emitter();\n        _this.onFocus = _this._onFocus.event;\n        _this._onDidSettingsTargetChange = new event_1.Emitter();\n        _this.onDidSettingsTargetChange = _this._onDidSettingsTargetChange.event;\n        DOM.addClass(parentElement, 'side-by-side-preferences-editor');\n        _this.splitview = new splitview_1.SplitView(parentElement, { orientation: splitview_1.Orientation.HORIZONTAL });\n        _this._register(_this.splitview);\n        _this._register(_this.splitview.onDidSashReset(function () { return _this.splitview.distributeViewSizes(); }));\n        _this.defaultPreferencesEditorContainer = DOM.$('.default-preferences-editor-container');\n        var defaultPreferencesHeaderContainer = DOM.append(_this.defaultPreferencesEditorContainer, DOM.$('.preferences-header-container'));\n        _this.defaultPreferencesHeader = DOM.append(defaultPreferencesHeaderContainer, DOM.$('div.default-preferences-header'));\n        _this.defaultPreferencesHeader.textContent = nls.localize('defaultSettings', \"Default Settings\");\n        _this.defaultPreferencesEditor = _this._register(_this.instantiationService.createInstance(DefaultPreferencesEditor));\n        _this.defaultPreferencesEditor.create(_this.defaultPreferencesEditorContainer);\n        _this.splitview.addView({\n            element: _this.defaultPreferencesEditorContainer,\n            layout: function (size) { return _this.defaultPreferencesEditor.layout(new DOM.Dimension(size, _this.dimension.height - 34 /* height of header container */)); },\n            minimumSize: 220,\n            maximumSize: Number.POSITIVE_INFINITY,\n            onDidChange: event_1.Event.None\n        }, splitview_1.Sizing.Distribute);\n        _this.editablePreferencesEditorContainer = DOM.$('.editable-preferences-editor-container');\n        var editablePreferencesHeaderContainer = DOM.append(_this.editablePreferencesEditorContainer, DOM.$('.preferences-header-container'));\n        _this.settingsTargetsWidget = _this._register(_this.instantiationService.createInstance(preferencesWidgets_1.SettingsTargetsWidget, editablePreferencesHeaderContainer));\n        _this._register(_this.settingsTargetsWidget.onDidTargetChange(function (target) { return _this._onDidSettingsTargetChange.fire(target); }));\n        _this._register(styler_1.attachStylerCallback(_this.themeService, { scrollbarShadow: colorRegistry_1.scrollbarShadow }, function (colors) {\n            var shadow = colors.scrollbarShadow ? colors.scrollbarShadow.toString() : null;\n            if (shadow) {\n                _this.editablePreferencesEditorContainer.style.boxShadow = \"-6px 0 5px -5px \" + shadow;\n            }\n            else {\n                _this.editablePreferencesEditorContainer.style.boxShadow = null;\n            }\n        }));\n        _this.splitview.addView({\n            element: _this.editablePreferencesEditorContainer,\n            layout: function (size) { return _this.editablePreferencesEditor && _this.editablePreferencesEditor.layout(new DOM.Dimension(size, _this.dimension.height - 34 /* height of header container */)); },\n            minimumSize: 220,\n            maximumSize: Number.POSITIVE_INFINITY,\n            onDidChange: event_1.Event.None\n        }, splitview_1.Sizing.Distribute);\n        var focusTracker = _this._register(DOM.trackFocus(parentElement));\n        _this._register(focusTracker.onDidFocus(function () { return _this._onFocus.fire(); }));\n        return _this;\n    }\n    Object.defineProperty(SideBySidePreferencesWidget.prototype, \"minimumWidth\", {\n        get: function () { return this.splitview.minimumSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SideBySidePreferencesWidget.prototype, \"maximumWidth\", {\n        get: function () { return this.splitview.maximumSize; },\n        enumerable: true,\n        configurable: true\n    });\n    SideBySidePreferencesWidget.prototype.setInput = function (defaultPreferencesEditorInput, editablePreferencesEditorInput, options, token) {\n        var _this = this;\n        this.getOrCreateEditablePreferencesEditor(editablePreferencesEditorInput);\n        this.settingsTargetsWidget.settingsTarget = this.getSettingsTarget(editablePreferencesEditorInput.getResource());\n        return Promise.all([\n            this.updateInput(this.defaultPreferencesEditor, defaultPreferencesEditorInput, DefaultSettingsEditorContribution.ID, editablePreferencesEditorInput.getResource(), options, token),\n            this.updateInput(this.editablePreferencesEditor, editablePreferencesEditorInput, SettingsEditorContribution.ID, defaultPreferencesEditorInput.getResource(), options, token)\n        ])\n            .then(function (_a) {\n            var defaultPreferencesRenderer = _a[0], editablePreferencesRenderer = _a[1];\n            if (token.isCancellationRequested) {\n                return {};\n            }\n            _this.defaultPreferencesHeader.textContent = types_1.withUndefinedAsNull(defaultPreferencesRenderer && _this.getDefaultPreferencesHeaderText(defaultPreferencesRenderer.preferencesModel.target));\n            return { defaultPreferencesRenderer: defaultPreferencesRenderer, editablePreferencesRenderer: editablePreferencesRenderer };\n        });\n    };\n    SideBySidePreferencesWidget.prototype.getDefaultPreferencesHeaderText = function (target) {\n        switch (target) {\n            case configuration_1.ConfigurationTarget.USER:\n                return nls.localize('defaultUserSettings', \"Default User Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                return nls.localize('defaultWorkspaceSettings', \"Default Workspace Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                return nls.localize('defaultFolderSettings', \"Default Folder Settings\");\n        }\n        return '';\n    };\n    SideBySidePreferencesWidget.prototype.setResultCount = function (settingsTarget, count) {\n        this.settingsTargetsWidget.setResultCount(settingsTarget, count);\n    };\n    SideBySidePreferencesWidget.prototype.layout = function (dimension) {\n        if (dimension === void 0) { dimension = this.dimension; }\n        this.dimension = dimension;\n        this.splitview.layout(dimension.width);\n    };\n    SideBySidePreferencesWidget.prototype.focus = function () {\n        if (this.editablePreferencesEditor) {\n            this.editablePreferencesEditor.focus();\n        }\n    };\n    SideBySidePreferencesWidget.prototype.getControl = function () {\n        return this.editablePreferencesEditor ? this.editablePreferencesEditor.getControl() : null;\n    };\n    SideBySidePreferencesWidget.prototype.clearInput = function () {\n        if (this.defaultPreferencesEditor) {\n            this.defaultPreferencesEditor.clearInput();\n        }\n        if (this.editablePreferencesEditor) {\n            this.editablePreferencesEditor.clearInput();\n        }\n    };\n    SideBySidePreferencesWidget.prototype.setEditorVisible = function (visible, group) {\n        this.isVisible = visible;\n        this.group = group;\n        if (this.defaultPreferencesEditor) {\n            this.defaultPreferencesEditor.setVisible(this.isVisible, this.group);\n        }\n        if (this.editablePreferencesEditor) {\n            this.editablePreferencesEditor.setVisible(this.isVisible, this.group);\n        }\n    };\n    SideBySidePreferencesWidget.prototype.getOrCreateEditablePreferencesEditor = function (editorInput) {\n        if (this.editablePreferencesEditor) {\n            return this.editablePreferencesEditor;\n        }\n        var descriptor = platform_1.Registry.as(editor_1.Extensions.Editors).getEditor(editorInput);\n        var editor = descriptor.instantiate(this.instantiationService);\n        this.editablePreferencesEditor = editor;\n        this.editablePreferencesEditor.create(this.editablePreferencesEditorContainer);\n        this.editablePreferencesEditor.setVisible(this.isVisible, this.group);\n        this.layout();\n        return editor;\n    };\n    SideBySidePreferencesWidget.prototype.updateInput = function (editor, input, editorContributionId, associatedPreferencesModelUri, options, token) {\n        return editor.setInput(input, options, token)\n            .then(function () {\n            if (token.isCancellationRequested) {\n                return undefined;\n            }\n            return types_1.withNullAsUndefined(editor.getControl().getContribution(editorContributionId).updatePreferencesRenderer(associatedPreferencesModelUri));\n        });\n    };\n    SideBySidePreferencesWidget.prototype.getSettingsTarget = function (resource) {\n        if (this.preferencesService.userSettingsResource.toString() === resource.toString()) {\n            return configuration_1.ConfigurationTarget.USER;\n        }\n        var workspaceSettingsResource = this.preferencesService.workspaceSettingsResource;\n        if (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {\n            return configuration_1.ConfigurationTarget.WORKSPACE;\n        }\n        var folder = this.workspaceContextService.getWorkspaceFolder(resource);\n        if (folder) {\n            return folder.uri;\n        }\n        return configuration_1.ConfigurationTarget.USER;\n    };\n    SideBySidePreferencesWidget.prototype.disposeEditors = function () {\n        if (this.defaultPreferencesEditor) {\n            this.defaultPreferencesEditor.dispose();\n        }\n        if (this.editablePreferencesEditor) {\n            this.editablePreferencesEditor.dispose();\n        }\n    };\n    SideBySidePreferencesWidget.prototype.dispose = function () {\n        this.disposeEditors();\n        _super.prototype.dispose.call(this);\n    };\n    SideBySidePreferencesWidget = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, preferences_2.IPreferencesService)\n    ], SideBySidePreferencesWidget);\n    return SideBySidePreferencesWidget;\n}(widget_1.Widget));\nvar DefaultPreferencesEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultPreferencesEditor, _super);\n    function DefaultPreferencesEditor(telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorGroupService, editorService, windowService) {\n        return _super.call(this, DefaultPreferencesEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService) || this;\n    }\n    DefaultPreferencesEditor._getContributions = function () {\n        var skipContributions = [folding_1.FoldingController.prototype, multicursor_1.SelectionHighlighter.prototype, findController_1.FindController.prototype];\n        var contributions = editorExtensions_1.EditorExtensionsRegistry.getEditorContributions().filter(function (c) { return skipContributions.indexOf(c.prototype) === -1; });\n        contributions.push(DefaultSettingsEditorContribution);\n        return contributions;\n    };\n    DefaultPreferencesEditor.prototype.createEditorControl = function (parent, configuration) {\n        var _this = this;\n        var editor = this.instantiationService.createInstance(codeEditorWidget_1.CodeEditorWidget, parent, configuration, { contributions: DefaultPreferencesEditor._getContributions() });\n        // Inform user about editor being readonly if user starts type\n        this._register(editor.onDidType(function () { return _this.showReadonlyHint(editor); }));\n        this._register(editor.onDidPaste(function () { return _this.showReadonlyHint(editor); }));\n        return editor;\n    };\n    DefaultPreferencesEditor.prototype.showReadonlyHint = function (editor) {\n        var messageController = messageController_1.MessageController.get(editor);\n        if (!messageController.isVisible()) {\n            messageController.showMessage(nls.localize('defaultEditorReadonly', \"Edit in the right hand side editor to override defaults.\"), editor.getSelection().getPosition());\n        }\n    };\n    DefaultPreferencesEditor.prototype.getConfigurationOverrides = function () {\n        var options = _super.prototype.getConfigurationOverrides.call(this);\n        options.readOnly = true;\n        if (this.input) {\n            options.lineNumbers = 'off';\n            options.renderLineHighlight = 'none';\n            options.scrollBeyondLastLine = false;\n            options.folding = false;\n            options.renderWhitespace = 'none';\n            options.wordWrap = 'on';\n            options.renderIndentGuides = false;\n            options.rulers = [];\n            options.glyphMargin = true;\n            options.minimap = {\n                enabled: false\n            };\n        }\n        return options;\n    };\n    DefaultPreferencesEditor.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        return _super.prototype.setInput.call(this, input, options, token)\n            .then(function () { return _this.input.resolve()\n            .then(function (editorModel) {\n            if (token.isCancellationRequested) {\n                return undefined;\n            }\n            return editorModel.load();\n        })\n            .then(function (editorModel) {\n            if (token.isCancellationRequested) {\n                return;\n            }\n            _this.getControl().setModel(editorModel.textEditorModel);\n        }); });\n    };\n    DefaultPreferencesEditor.prototype.clearInput = function () {\n        // Clear Model\n        this.getControl().setModel(null);\n        // Pass to super\n        _super.prototype.clearInput.call(this);\n    };\n    DefaultPreferencesEditor.prototype.layout = function (dimension) {\n        this.getControl().layout(dimension);\n    };\n    DefaultPreferencesEditor.prototype.getAriaLabel = function () {\n        return nls.localize('preferencesAriaLabel', \"Default preferences. Readonly text editor.\");\n    };\n    DefaultPreferencesEditor.ID = 'workbench.editor.defaultPreferences';\n    DefaultPreferencesEditor = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, editorService_1.IEditorService),\n        tslib_1.__param(8, windows_1.IWindowService)\n    ], DefaultPreferencesEditor);\n    return DefaultPreferencesEditor;\n}(textEditor_1.BaseTextEditor));\nexports.DefaultPreferencesEditor = DefaultPreferencesEditor;\nvar AbstractSettingsEditorContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractSettingsEditorContribution, _super);\n    function AbstractSettingsEditorContribution(editor, instantiationService, preferencesService, workspaceContextService) {\n        var _this = _super.call(this) || this;\n        _this.editor = editor;\n        _this.instantiationService = instantiationService;\n        _this.preferencesService = preferencesService;\n        _this.workspaceContextService = workspaceContextService;\n        _this._register(_this.editor.onDidChangeModel(function () { return _this._onModelChanged(); }));\n        return _this;\n    }\n    AbstractSettingsEditorContribution.prototype.updatePreferencesRenderer = function (associatedPreferencesModelUri) {\n        var _this = this;\n        if (!this.preferencesRendererCreationPromise) {\n            this.preferencesRendererCreationPromise = this._createPreferencesRenderer();\n        }\n        if (this.preferencesRendererCreationPromise) {\n            return this._hasAssociatedPreferencesModelChanged(associatedPreferencesModelUri)\n                .then(function (changed) { return changed ? _this._updatePreferencesRenderer(associatedPreferencesModelUri) : _this.preferencesRendererCreationPromise; });\n        }\n        return Promise.resolve(null);\n    };\n    AbstractSettingsEditorContribution.prototype._onModelChanged = function () {\n        var model = this.editor.getModel();\n        this.disposePreferencesRenderer();\n        if (model) {\n            this.preferencesRendererCreationPromise = this._createPreferencesRenderer();\n        }\n    };\n    AbstractSettingsEditorContribution.prototype._hasAssociatedPreferencesModelChanged = function (associatedPreferencesModelUri) {\n        return this.preferencesRendererCreationPromise.then(function (preferencesRenderer) {\n            return !(preferencesRenderer && preferencesRenderer.getAssociatedPreferencesModel() && preferencesRenderer.getAssociatedPreferencesModel().uri.toString() === associatedPreferencesModelUri.toString());\n        });\n    };\n    AbstractSettingsEditorContribution.prototype._updatePreferencesRenderer = function (associatedPreferencesModelUri) {\n        var _this = this;\n        return this.preferencesService.createPreferencesEditorModel(associatedPreferencesModelUri)\n            .then(function (associatedPreferencesEditorModel) {\n            return _this.preferencesRendererCreationPromise.then(function (preferencesRenderer) {\n                if (preferencesRenderer) {\n                    var associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();\n                    if (associatedPreferencesModel) {\n                        associatedPreferencesModel.dispose();\n                    }\n                    preferencesRenderer.setAssociatedPreferencesModel(associatedPreferencesEditorModel);\n                }\n                return preferencesRenderer;\n            });\n        });\n    };\n    AbstractSettingsEditorContribution.prototype.disposePreferencesRenderer = function () {\n        if (this.preferencesRendererCreationPromise) {\n            this.preferencesRendererCreationPromise.then(function (preferencesRenderer) {\n                if (preferencesRenderer) {\n                    var associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();\n                    if (associatedPreferencesModel) {\n                        associatedPreferencesModel.dispose();\n                    }\n                    preferencesRenderer.preferencesModel.dispose();\n                    preferencesRenderer.dispose();\n                }\n            });\n            this.preferencesRendererCreationPromise = Promise.resolve(null);\n        }\n    };\n    AbstractSettingsEditorContribution.prototype.dispose = function () {\n        this.disposePreferencesRenderer();\n        _super.prototype.dispose.call(this);\n    };\n    AbstractSettingsEditorContribution = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, preferences_2.IPreferencesService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService)\n    ], AbstractSettingsEditorContribution);\n    return AbstractSettingsEditorContribution;\n}(lifecycle_1.Disposable));\nvar DefaultSettingsEditorContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultSettingsEditorContribution, _super);\n    function DefaultSettingsEditorContribution() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DefaultSettingsEditorContribution.prototype.getId = function () {\n        return DefaultSettingsEditorContribution.ID;\n    };\n    DefaultSettingsEditorContribution.prototype._createPreferencesRenderer = function () {\n        var _this = this;\n        return this.preferencesService.createPreferencesEditorModel(this.editor.getModel().uri)\n            .then(function (editorModel) {\n            if (editorModel instanceof preferencesModels_1.DefaultSettingsEditorModel && _this.editor.getModel()) {\n                var preferencesRenderer = _this.instantiationService.createInstance(preferencesRenderers_1.DefaultSettingsRenderer, _this.editor, editorModel);\n                preferencesRenderer.render();\n                return preferencesRenderer;\n            }\n            return null;\n        });\n    };\n    DefaultSettingsEditorContribution.ID = 'editor.contrib.defaultsettings';\n    return DefaultSettingsEditorContribution;\n}(AbstractSettingsEditorContribution));\nvar SettingsEditorContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsEditorContribution, _super);\n    function SettingsEditorContribution(editor, instantiationService, preferencesService, workspaceContextService) {\n        var _this = _super.call(this, editor, instantiationService, preferencesService, workspaceContextService) || this;\n        _this._register(_this.workspaceContextService.onDidChangeWorkbenchState(function () { return _this._onModelChanged(); }));\n        return _this;\n    }\n    SettingsEditorContribution.prototype.getId = function () {\n        return SettingsEditorContribution.ID;\n    };\n    SettingsEditorContribution.prototype._createPreferencesRenderer = function () {\n        var _this = this;\n        if (this.isSettingsModel()) {\n            return this.preferencesService.createPreferencesEditorModel(this.editor.getModel().uri)\n                .then(function (settingsModel) {\n                if (settingsModel instanceof preferencesModels_1.SettingsEditorModel && _this.editor.getModel()) {\n                    switch (settingsModel.configurationTarget) {\n                        case configuration_1.ConfigurationTarget.USER:\n                            return _this.instantiationService.createInstance(preferencesRenderers_1.UserSettingsRenderer, _this.editor, settingsModel);\n                        case configuration_1.ConfigurationTarget.WORKSPACE:\n                            return _this.instantiationService.createInstance(preferencesRenderers_1.WorkspaceSettingsRenderer, _this.editor, settingsModel);\n                        case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                            return _this.instantiationService.createInstance(preferencesRenderers_1.FolderSettingsRenderer, _this.editor, settingsModel);\n                    }\n                }\n                return null;\n            })\n                .then(function (preferencesRenderer) {\n                if (preferencesRenderer) {\n                    preferencesRenderer.render();\n                }\n                return preferencesRenderer;\n            });\n        }\n        return null;\n    };\n    SettingsEditorContribution.prototype.isSettingsModel = function () {\n        var model = this.editor.getModel();\n        if (!model) {\n            return false;\n        }\n        if (this.preferencesService.userSettingsResource && this.preferencesService.userSettingsResource.toString() === model.uri.toString()) {\n            return true;\n        }\n        if (this.preferencesService.workspaceSettingsResource && this.preferencesService.workspaceSettingsResource.toString() === model.uri.toString()) {\n            return true;\n        }\n        for (var _i = 0, _a = this.workspaceContextService.getWorkspace().folders; _i < _a.length; _i++) {\n            var folder = _a[_i];\n            var folderSettingsResource = this.preferencesService.getFolderSettingsResource(folder.uri);\n            if (folderSettingsResource && folderSettingsResource.toString() === model.uri.toString()) {\n                return true;\n            }\n        }\n        return false;\n    };\n    SettingsEditorContribution.ID = 'editor.contrib.settings';\n    SettingsEditorContribution = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, preferences_2.IPreferencesService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService)\n    ], SettingsEditorContribution);\n    return SettingsEditorContribution;\n}(AbstractSettingsEditorContribution));\neditorExtensions_1.registerEditorContribution(SettingsEditorContribution);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { Orientation, Sizing, SplitView } from 'vs/base/browser/ui/splitview/splitview';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport * as arrays from 'vs/base/common/arrays';\nimport { Delayer, ThrottledDelayer } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { getErrorMessage, isPromiseCanceledError, onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ArrayNavigator } from 'vs/base/common/iterator';\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorExtensionsRegistry, IEditorContributionCtor, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { FindController } from 'vs/editor/contrib/find/findController';\nimport { FoldingController } from 'vs/editor/contrib/folding/folding';\nimport { MessageController } from 'vs/editor/contrib/message/messageController';\nimport { SelectionHighlighter } from 'vs/editor/contrib/multicursor/multicursor';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { scrollbarShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { attachStylerCallback } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { Extensions as EditorExtensions, IEditorRegistry } from 'vs/workbench/browser/editor';\nimport { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { EditorInput, EditorOptions, IEditorControl } from 'vs/workbench/common/editor';\nimport { ResourceEditorModel } from 'vs/workbench/common/editor/resourceEditorModel';\nimport { DefaultSettingsRenderer, FolderSettingsRenderer, IPreferencesRenderer, UserSettingsRenderer, WorkspaceSettingsRenderer } from 'vs/workbench/contrib/preferences/browser/preferencesRenderers';\nimport { SearchWidget, SettingsTarget, SettingsTargetsWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';\nimport { CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_SEARCH_FOCUS, IPreferencesSearchService, ISearchProvider, CONTEXT_SETTINGS_JSON_EDITOR } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IFilterResult, IPreferencesService, ISetting, ISettingsEditorModel, ISettingsGroup, SettingsEditorOptions } from 'vs/workbench/services/preferences/common/preferences';\nimport { DefaultPreferencesEditorInput, PreferencesEditorInput } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\nimport { DefaultSettingsEditorModel, SettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { withNullAsUndefined, withUndefinedAsNull } from 'vs/base/common/types';\n\nexport class PreferencesEditor extends BaseEditor {\n\n\tstatic readonly ID: string = 'workbench.editor.preferencesEditor';\n\n\tprivate defaultSettingsEditorContextKey: IContextKey<boolean>;\n\tprivate defaultSettingsJSONEditorContextKey: IContextKey<boolean>;\n\tprivate searchFocusContextKey: IContextKey<boolean>;\n\tprivate headerContainer: HTMLElement;\n\tprivate searchWidget: SearchWidget;\n\tprivate sideBySidePreferencesWidget: SideBySidePreferencesWidget;\n\tprivate preferencesRenderers: PreferencesRenderersController;\n\n\tprivate delayedFilterLogging: Delayer<void>;\n\tprivate localSearchDelayer: Delayer<void>;\n\tprivate remoteSearchThrottle: ThrottledDelayer<void>;\n\tprivate _lastReportedFilter: string;\n\n\tprivate lastFocusedWidget: SearchWidget | SideBySidePreferencesWidget | undefined = undefined;\n\n\tget minimumWidth(): number { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.minimumWidth : 0; }\n\tget maximumWidth(): number { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.maximumWidth : Number.POSITIVE_INFINITY; }\n\n\t// these setters need to exist because this extends from BaseEditor\n\tset minimumWidth(value: number) { /*noop*/ }\n\tset maximumWidth(value: number) { /*noop*/ }\n\n\treadonly minimumHeight = 260;\n\n\tprivate _onDidCreateWidget = new Emitter<{ width: number; height: number; } | undefined>();\n\treadonly onDidSizeConstraintsChange: Event<{ width: number; height: number; } | undefined> = this._onDidCreateWidget.event;\n\n\tconstructor(\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(PreferencesEditor.ID, telemetryService, themeService, storageService);\n\t\tthis.defaultSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(this.contextKeyService);\n\t\tthis.defaultSettingsJSONEditorContextKey = CONTEXT_SETTINGS_JSON_EDITOR.bindTo(this.contextKeyService);\n\t\tthis.searchFocusContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(this.contextKeyService);\n\t\tthis.delayedFilterLogging = new Delayer<void>(1000);\n\t\tthis.localSearchDelayer = new Delayer(100);\n\t\tthis.remoteSearchThrottle = new ThrottledDelayer(200);\n\t}\n\n\tcreateEditor(parent: HTMLElement): void {\n\t\tDOM.addClass(parent, 'preferences-editor');\n\n\t\tthis.headerContainer = DOM.append(parent, DOM.$('.preferences-header'));\n\t\tthis.searchWidget = this._register(this.instantiationService.createInstance(SearchWidget, this.headerContainer, {\n\t\t\tariaLabel: nls.localize('SearchSettingsWidget.AriaLabel', \"Search settings\"),\n\t\t\tplaceholder: nls.localize('SearchSettingsWidget.Placeholder', \"Search Settings\"),\n\t\t\tfocusKey: this.searchFocusContextKey,\n\t\t\tshowResultCount: true,\n\t\t\tariaLive: 'assertive'\n\t\t}));\n\t\tthis._register(this.searchWidget.onDidChange(value => this.onInputChanged()));\n\t\tthis._register(this.searchWidget.onFocus(() => this.lastFocusedWidget = this.searchWidget));\n\t\tthis.lastFocusedWidget = this.searchWidget;\n\n\t\tconst editorsContainer = DOM.append(parent, DOM.$('.preferences-editors-container'));\n\t\tthis.sideBySidePreferencesWidget = this._register(this.instantiationService.createInstance(SideBySidePreferencesWidget, editorsContainer));\n\t\tthis._onDidCreateWidget.fire(undefined);\n\t\tthis._register(this.sideBySidePreferencesWidget.onFocus(() => this.lastFocusedWidget = this.sideBySidePreferencesWidget));\n\t\tthis._register(this.sideBySidePreferencesWidget.onDidSettingsTargetChange(target => this.switchSettings(target)));\n\n\t\tthis.preferencesRenderers = this._register(this.instantiationService.createInstance(PreferencesRenderersController));\n\n\t\tthis._register(this.preferencesRenderers.onDidFilterResultsCountChange(count => this.showSearchResultsMessage(count)));\n\t}\n\n\tclearSearchResults(): void {\n\t\tif (this.searchWidget) {\n\t\t\tthis.searchWidget.clear();\n\t\t}\n\t}\n\n\tfocusNextResult(): void {\n\t\tif (this.preferencesRenderers) {\n\t\t\tthis.preferencesRenderers.focusNextPreference(true);\n\t\t}\n\t}\n\n\tfocusPreviousResult(): void {\n\t\tif (this.preferencesRenderers) {\n\t\t\tthis.preferencesRenderers.focusNextPreference(false);\n\t\t}\n\t}\n\n\teditFocusedPreference(): void {\n\t\tthis.preferencesRenderers.editFocusedPreference();\n\t}\n\n\tsetInput(newInput: PreferencesEditorInput, options: SettingsEditorOptions, token: CancellationToken): Promise<void> {\n\t\tthis.defaultSettingsEditorContextKey.set(true);\n\t\tthis.defaultSettingsJSONEditorContextKey.set(true);\n\t\tif (options && options.query) {\n\t\t\tthis.focusSearch(options.query);\n\t\t}\n\n\t\treturn super.setInput(newInput, options, token).then(() => this.updateInput(newInput, options, token));\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\t\tthis.searchWidget.layout(dimension);\n\t\tconst headerHeight = DOM.getTotalHeight(this.headerContainer);\n\t\tthis.sideBySidePreferencesWidget.layout(new DOM.Dimension(dimension.width, dimension.height - headerHeight));\n\t}\n\n\tgetControl(): IEditorControl | null {\n\t\treturn this.sideBySidePreferencesWidget.getControl();\n\t}\n\n\tfocus(): void {\n\t\tif (this.lastFocusedWidget) {\n\t\t\tthis.lastFocusedWidget.focus();\n\t\t}\n\t}\n\n\tfocusSearch(filter?: string): void {\n\t\tif (filter) {\n\t\t\tthis.searchWidget.setValue(filter);\n\t\t}\n\n\t\tthis.searchWidget.focus();\n\t}\n\n\tfocusSettingsFileEditor(): void {\n\t\tif (this.sideBySidePreferencesWidget) {\n\t\t\tthis.sideBySidePreferencesWidget.focus();\n\t\t}\n\t}\n\n\tclearInput(): void {\n\t\tthis.defaultSettingsEditorContextKey.set(false);\n\t\tthis.defaultSettingsJSONEditorContextKey.set(false);\n\t\tthis.sideBySidePreferencesWidget.clearInput();\n\t\tthis.preferencesRenderers.onHidden();\n\t\tsuper.clearInput();\n\t}\n\n\tprotected setEditorVisible(visible: boolean, group: IEditorGroup): void {\n\t\tthis.sideBySidePreferencesWidget.setEditorVisible(visible, group);\n\t\tsuper.setEditorVisible(visible, group);\n\t}\n\n\tprivate updateInput(newInput: PreferencesEditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\t\treturn this.sideBySidePreferencesWidget.setInput(<DefaultPreferencesEditorInput>newInput.details, <EditorInput>newInput.master, options, token).then(({ defaultPreferencesRenderer, editablePreferencesRenderer }) => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.preferencesRenderers.defaultPreferencesRenderer = defaultPreferencesRenderer!;\n\t\t\tthis.preferencesRenderers.editablePreferencesRenderer = editablePreferencesRenderer!;\n\t\t\tthis.onInputChanged();\n\t\t});\n\t}\n\n\tprivate onInputChanged(): void {\n\t\tconst query = this.searchWidget.getValue().trim();\n\t\tthis.delayedFilterLogging.cancel();\n\t\tthis.triggerSearch(query)\n\t\t\t.then(() => {\n\t\t\t\tconst result = this.preferencesRenderers.lastFilterResult;\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.delayedFilterLogging.trigger(() => this.reportFilteringUsed(\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tthis.preferencesRenderers.lastFilterResult));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate triggerSearch(query: string): Promise<void> {\n\t\tif (query) {\n\t\t\treturn Promise.all([\n\t\t\t\tthis.localSearchDelayer.trigger(() => this.preferencesRenderers.localFilterPreferences(query).then(() => { })),\n\t\t\t\tthis.remoteSearchThrottle.trigger(() => Promise.resolve(this.progressService.showWhile(this.preferencesRenderers.remoteSearchPreferences(query), 500)))\n\t\t\t]).then(() => { });\n\t\t} else {\n\t\t\t// When clearing the input, update immediately to clear it\n\t\t\tthis.localSearchDelayer.cancel();\n\t\t\tthis.preferencesRenderers.localFilterPreferences(query);\n\n\t\t\tthis.remoteSearchThrottle.cancel();\n\t\t\treturn this.preferencesRenderers.remoteSearchPreferences(query);\n\t\t}\n\t}\n\n\tprivate switchSettings(target: SettingsTarget): void {\n\t\t// Focus the editor if this editor is not active editor\n\t\tif (this.editorService.activeControl !== this) {\n\t\t\tthis.focus();\n\t\t}\n\t\tconst promise: Promise<boolean> = this.input && this.input.isDirty() ? this.input.save() : Promise.resolve(true);\n\t\tpromise.then(() => {\n\t\t\tif (target === ConfigurationTarget.USER) {\n\t\t\t\tthis.preferencesService.switchSettings(ConfigurationTarget.USER, this.preferencesService.userSettingsResource, true);\n\t\t\t} else if (target === ConfigurationTarget.WORKSPACE) {\n\t\t\t\tthis.preferencesService.switchSettings(ConfigurationTarget.WORKSPACE, this.preferencesService.workspaceSettingsResource!, true);\n\t\t\t} else if (target instanceof URI) {\n\t\t\t\tthis.preferencesService.switchSettings(ConfigurationTarget.WORKSPACE_FOLDER, target, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate showSearchResultsMessage(count: IPreferencesCount): void {\n\t\tconst countValue = count.count;\n\t\tif (count.target) {\n\t\t\tthis.sideBySidePreferencesWidget.setResultCount(count.target, count.count);\n\t\t} else if (this.searchWidget.getValue()) {\n\t\t\tif (countValue === 0) {\n\t\t\t\tthis.searchWidget.showMessage(nls.localize('noSettingsFound', \"No Settings Found\"));\n\t\t\t} else if (countValue === 1) {\n\t\t\t\tthis.searchWidget.showMessage(nls.localize('oneSettingFound', \"1 Setting Found\"));\n\t\t\t} else {\n\t\t\t\tthis.searchWidget.showMessage(nls.localize('settingsFound', \"{0} Settings Found\", countValue));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.searchWidget.showMessage(nls.localize('totalSettingsMessage', \"Total {0} Settings\", countValue));\n\t\t}\n\t}\n\n\tprivate _countById(settingsGroups: ISettingsGroup[]): IStringDictionary<number> {\n\t\tconst result = {};\n\n\t\tfor (const group of settingsGroups) {\n\t\t\tlet i = 0;\n\t\t\tfor (const section of group.sections) {\n\t\t\t\ti += section.settings.length;\n\t\t\t}\n\n\t\t\tresult[group.id] = i;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate reportFilteringUsed(filter: string, filterResult: IFilterResult | undefined): void {\n\t\tif (filter && filter !== this._lastReportedFilter) {\n\t\t\tconst metadata = filterResult && filterResult.metadata;\n\t\t\tconst counts = filterResult && this._countById(filterResult.filteredGroups);\n\n\t\t\tlet durations: any;\n\t\t\tif (metadata) {\n\t\t\t\tdurations = Object.create(null);\n\t\t\t\tObject.keys(metadata).forEach(key => durations[key] = metadata[key].duration);\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tfilter,\n\t\t\t\tdurations,\n\t\t\t\tcounts,\n\t\t\t\trequestCount: metadata && metadata['nlpResult'] && metadata['nlpResult'].requestCount\n\t\t\t};\n\n\t\t\t/* __GDPR__\n\t\t\t\t\"defaultSettings.filter\" : {\n\t\t\t\t\t\"filter\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"durations.nlpresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\"counts.nlpresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\"durations.filterresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\"counts.filterresult\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\"requestCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('defaultSettings.filter', data);\n\t\t\tthis._lastReportedFilter = filter;\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidCreateWidget.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nclass SettingsNavigator extends ArrayNavigator<ISetting> {\n\n\tnext(): ISetting | null {\n\t\treturn super.next() || super.first();\n\t}\n\n\tprevious(): ISetting | null {\n\t\treturn super.previous() || super.last();\n\t}\n\n\treset(): void {\n\t\tthis.index = this.start - 1;\n\t}\n}\n\ninterface IPreferencesCount {\n\ttarget?: SettingsTarget;\n\tcount: number;\n}\n\nclass PreferencesRenderersController extends Disposable {\n\n\tprivate _defaultPreferencesRenderer: IPreferencesRenderer<ISetting>;\n\tprivate _defaultPreferencesRendererDisposables: IDisposable[] = [];\n\n\tprivate _editablePreferencesRenderer: IPreferencesRenderer<ISetting>;\n\tprivate _editablePreferencesRendererDisposables: IDisposable[] = [];\n\n\tprivate _settingsNavigator: SettingsNavigator;\n\tprivate _remoteFilterCancelToken: CancellationTokenSource | undefined;\n\tprivate _prefsModelsForSearch = new Map<string, ISettingsEditorModel>();\n\n\tprivate _currentLocalSearchProvider: ISearchProvider;\n\tprivate _currentRemoteSearchProvider: ISearchProvider | undefined;\n\tprivate _lastQuery: string;\n\tprivate _lastFilterResult: IFilterResult | undefined;\n\n\tprivate readonly _onDidFilterResultsCountChange: Emitter<IPreferencesCount> = this._register(new Emitter<IPreferencesCount>());\n\treadonly onDidFilterResultsCountChange: Event<IPreferencesCount> = this._onDidFilterResultsCountChange.event;\n\n\tconstructor(\n\t\t@IPreferencesSearchService private readonly preferencesSearchService: IPreferencesSearchService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tget lastFilterResult(): IFilterResult | undefined {\n\t\treturn this._lastFilterResult;\n\t}\n\n\tget defaultPreferencesRenderer(): IPreferencesRenderer<ISetting> {\n\t\treturn this._defaultPreferencesRenderer;\n\t}\n\n\tget editablePreferencesRenderer(): IPreferencesRenderer<ISetting> {\n\t\treturn this._editablePreferencesRenderer;\n\t}\n\n\tset defaultPreferencesRenderer(defaultPreferencesRenderer: IPreferencesRenderer<ISetting>) {\n\t\tif (this._defaultPreferencesRenderer !== defaultPreferencesRenderer) {\n\t\t\tthis._defaultPreferencesRenderer = defaultPreferencesRenderer;\n\n\t\t\tthis._defaultPreferencesRendererDisposables = dispose(this._defaultPreferencesRendererDisposables);\n\n\t\t\tif (this._defaultPreferencesRenderer) {\n\t\t\t\tthis._defaultPreferencesRenderer.onUpdatePreference(({ key, value, source }) => {\n\t\t\t\t\tthis._editablePreferencesRenderer.updatePreference(key, value, source);\n\t\t\t\t\tthis._updatePreference(key, value, source);\n\t\t\t\t}, this, this._defaultPreferencesRendererDisposables);\n\t\t\t\tthis._defaultPreferencesRenderer.onFocusPreference(preference => this._focusPreference(preference, this._editablePreferencesRenderer), this, this._defaultPreferencesRendererDisposables);\n\t\t\t\tthis._defaultPreferencesRenderer.onClearFocusPreference(preference => this._clearFocus(preference, this._editablePreferencesRenderer), this, this._defaultPreferencesRendererDisposables);\n\t\t\t}\n\t\t}\n\t}\n\n\tset editablePreferencesRenderer(editableSettingsRenderer: IPreferencesRenderer<ISetting>) {\n\t\tif (this._editablePreferencesRenderer !== editableSettingsRenderer) {\n\t\t\tthis._editablePreferencesRenderer = editableSettingsRenderer;\n\t\t\tthis._editablePreferencesRendererDisposables = dispose(this._editablePreferencesRendererDisposables);\n\t\t\tif (this._editablePreferencesRenderer) {\n\t\t\t\t(<ISettingsEditorModel>this._editablePreferencesRenderer.preferencesModel)\n\t\t\t\t\t.onDidChangeGroups(this._onEditableContentDidChange, this, this._editablePreferencesRendererDisposables);\n\n\t\t\t\tthis._editablePreferencesRenderer.onUpdatePreference(({ key, value, source }) => this._updatePreference(key, value, source, true), this, this._defaultPreferencesRendererDisposables);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _onEditableContentDidChange(): Promise<void> {\n\t\tconst foundExactMatch = await this.localFilterPreferences(this._lastQuery, true);\n\t\tif (!foundExactMatch) {\n\t\t\tawait this.remoteSearchPreferences(this._lastQuery, true);\n\t\t}\n\t}\n\n\tonHidden(): void {\n\t\tthis._prefsModelsForSearch.forEach(model => model.dispose());\n\t\tthis._prefsModelsForSearch = new Map<string, ISettingsEditorModel>();\n\t}\n\n\tremoteSearchPreferences(query: string, updateCurrentResults?: boolean): Promise<void> {\n\t\tif (this.lastFilterResult && this.lastFilterResult.exactMatch) {\n\t\t\t// Skip and clear remote search\n\t\t\tquery = '';\n\t\t}\n\n\t\tif (this._remoteFilterCancelToken) {\n\t\t\tthis._remoteFilterCancelToken.cancel();\n\t\t\tthis._remoteFilterCancelToken.dispose();\n\t\t\tthis._remoteFilterCancelToken = undefined;\n\t\t}\n\n\t\tthis._currentRemoteSearchProvider = (updateCurrentResults && this._currentRemoteSearchProvider) || this.preferencesSearchService.getRemoteSearchProvider(query);\n\n\t\tthis._remoteFilterCancelToken = new CancellationTokenSource();\n\t\treturn this.filterOrSearchPreferences(query, this._currentRemoteSearchProvider!, 'nlpResult', nls.localize('nlpResult', \"Natural Language Results\"), 1, this._remoteFilterCancelToken.token, updateCurrentResults).then(() => {\n\t\t\tif (this._remoteFilterCancelToken) {\n\t\t\t\tthis._remoteFilterCancelToken.dispose();\n\t\t\t\tthis._remoteFilterCancelToken = undefined;\n\t\t\t}\n\t\t}, err => {\n\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tlocalFilterPreferences(query: string, updateCurrentResults?: boolean): Promise<boolean> {\n\t\tif (this._settingsNavigator) {\n\t\t\tthis._settingsNavigator.reset();\n\t\t}\n\n\t\tthis._currentLocalSearchProvider = (updateCurrentResults && this._currentLocalSearchProvider) || this.preferencesSearchService.getLocalSearchProvider(query);\n\t\treturn this.filterOrSearchPreferences(query, this._currentLocalSearchProvider, 'filterResult', nls.localize('filterResult', \"Filtered Results\"), 0, undefined, updateCurrentResults);\n\t}\n\n\tprivate filterOrSearchPreferences(query: string, searchProvider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken, editableContentOnly?: boolean): Promise<boolean> {\n\t\tthis._lastQuery = query;\n\n\t\tconst filterPs: Promise<IFilterResult | undefined>[] = [this._filterOrSearchPreferences(query, this.editablePreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token)];\n\t\tif (!editableContentOnly) {\n\t\t\tfilterPs.push(\n\t\t\t\tthis._filterOrSearchPreferences(query, this.defaultPreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token));\n\t\t\tfilterPs.push(\n\t\t\t\tthis.searchAllSettingsTargets(query, searchProvider, groupId, groupLabel, groupOrder, token).then(() => undefined));\n\t\t}\n\n\t\treturn Promise.all(filterPs).then(results => {\n\t\t\tlet [editableFilterResult, defaultFilterResult] = results;\n\n\t\t\tif (!defaultFilterResult && editableContentOnly) {\n\t\t\t\tdefaultFilterResult = this.lastFilterResult;\n\t\t\t}\n\n\t\t\tthis.consolidateAndUpdate(defaultFilterResult, editableFilterResult);\n\t\t\tthis._lastFilterResult = defaultFilterResult;\n\n\t\t\treturn !!(defaultFilterResult && defaultFilterResult.exactMatch);\n\t\t});\n\t}\n\n\tprivate searchAllSettingsTargets(query: string, searchProvider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<void> {\n\t\tconst searchPs = [\n\t\t\tthis.searchSettingsTarget(query, searchProvider, ConfigurationTarget.WORKSPACE, groupId, groupLabel, groupOrder, token),\n\t\t\tthis.searchSettingsTarget(query, searchProvider, ConfigurationTarget.USER, groupId, groupLabel, groupOrder, token)\n\t\t];\n\n\t\tfor (const folder of this.workspaceContextService.getWorkspace().folders) {\n\t\t\tconst folderSettingsResource = this.preferencesService.getFolderSettingsResource(folder.uri);\n\t\t\tsearchPs.push(this.searchSettingsTarget(query, searchProvider, withNullAsUndefined(folderSettingsResource), groupId, groupLabel, groupOrder, token));\n\t\t}\n\n\n\t\treturn Promise.all(searchPs).then(() => { });\n\t}\n\n\tprivate searchSettingsTarget(query: string, provider: ISearchProvider, target: SettingsTarget | undefined, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<void> {\n\t\tif (!query) {\n\t\t\t// Don't open the other settings targets when query is empty\n\t\t\tthis._onDidFilterResultsCountChange.fire({ target, count: 0 });\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.getPreferencesEditorModel(target).then<IFilterResult | undefined>(model => {\n\t\t\treturn model && this._filterOrSearchPreferencesModel('', <ISettingsEditorModel>model, provider, groupId, groupLabel, groupOrder, token);\n\t\t}).then(result => {\n\t\t\tconst count = result ? this._flatten(result.filteredGroups).length : 0;\n\t\t\tthis._onDidFilterResultsCountChange.fire({ target, count });\n\t\t}, err => {\n\t\t\tif (!isPromiseCanceledError(err)) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate async getPreferencesEditorModel(target: SettingsTarget | undefined): Promise<ISettingsEditorModel | undefined> {\n\t\tconst resource = target === ConfigurationTarget.USER ? this.preferencesService.userSettingsResource :\n\t\t\ttarget === ConfigurationTarget.WORKSPACE ? this.preferencesService.workspaceSettingsResource :\n\t\t\t\ttarget;\n\n\t\tif (!resource) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst targetKey = resource.toString();\n\t\tif (!this._prefsModelsForSearch.has(targetKey)) {\n\t\t\ttry {\n\t\t\t\tconst model = this._register(await this.preferencesService.createPreferencesEditorModel(resource));\n\t\t\t\tthis._prefsModelsForSearch.set(targetKey, <ISettingsEditorModel>model);\n\t\t\t} catch (e) {\n\t\t\t\t// Will throw when the settings file doesn't exist.\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn this._prefsModelsForSearch.get(targetKey);\n\t}\n\n\tfocusNextPreference(forward: boolean = true) {\n\t\tif (!this._settingsNavigator) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst setting = forward ? this._settingsNavigator.next() : this._settingsNavigator.previous();\n\t\tthis._focusPreference(setting, this._defaultPreferencesRenderer);\n\t\tthis._focusPreference(setting, this._editablePreferencesRenderer);\n\t}\n\n\teditFocusedPreference(): void {\n\t\tif (!this._settingsNavigator || !this._settingsNavigator.current()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst setting = this._settingsNavigator.current();\n\t\tconst shownInEditableRenderer = this._editablePreferencesRenderer.editPreference(setting!);\n\t\tif (!shownInEditableRenderer) {\n\t\t\tthis.defaultPreferencesRenderer.editPreference(setting!);\n\t\t}\n\t}\n\n\tprivate _filterOrSearchPreferences(filter: string, preferencesRenderer: IPreferencesRenderer<ISetting>, provider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<IFilterResult | undefined> {\n\t\tif (!preferencesRenderer) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst model = <ISettingsEditorModel>preferencesRenderer.preferencesModel;\n\t\treturn this._filterOrSearchPreferencesModel(filter, model, provider, groupId, groupLabel, groupOrder, token).then(filterResult => {\n\t\t\tpreferencesRenderer.filterPreferences(filterResult);\n\t\t\treturn filterResult;\n\t\t});\n\t}\n\n\tprivate _filterOrSearchPreferencesModel(filter: string, model: ISettingsEditorModel, provider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<IFilterResult | undefined> {\n\t\tconst searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n\t\treturn searchP\n\t\t\t.then(null, err => {\n\t\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t} else {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"defaultSettings.searchError\" : {\n\t\t\t\t\t\t\t\"message\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\"filter\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tconst message = getErrorMessage(err).trim();\n\t\t\t\t\tif (message && message !== 'Error') {\n\t\t\t\t\t\t// \"Error\" = any generic network error\n\t\t\t\t\t\tthis.telemetryService.publicLog('defaultSettings.searchError', { message, filter });\n\t\t\t\t\t\tthis.logService.info('Setting search error: ' + message);\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(searchResult => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\tsearchResult = null;\n\t\t\t\t}\n\n\t\t\t\tconst filterResult = searchResult ?\n\t\t\t\t\tmodel.updateResultGroup(groupId, {\n\t\t\t\t\t\tid: groupId,\n\t\t\t\t\t\tlabel: groupLabel,\n\t\t\t\t\t\tresult: searchResult,\n\t\t\t\t\t\torder: groupOrder\n\t\t\t\t\t}) :\n\t\t\t\t\tmodel.updateResultGroup(groupId, undefined);\n\n\t\t\t\tif (filterResult) {\n\t\t\t\t\tfilterResult.query = filter;\n\t\t\t\t\tfilterResult.exactMatch = searchResult && searchResult.exactMatch;\n\t\t\t\t}\n\n\t\t\t\treturn filterResult;\n\t\t\t});\n\t}\n\n\tprivate consolidateAndUpdate(defaultFilterResult: IFilterResult | undefined, editableFilterResult: IFilterResult | undefined): void {\n\t\tconst defaultPreferencesFilteredGroups = defaultFilterResult ? defaultFilterResult.filteredGroups : this._getAllPreferences(this._defaultPreferencesRenderer);\n\t\tconst editablePreferencesFilteredGroups = editableFilterResult ? editableFilterResult.filteredGroups : this._getAllPreferences(this._editablePreferencesRenderer);\n\t\tconst consolidatedSettings = this._consolidateSettings(editablePreferencesFilteredGroups, defaultPreferencesFilteredGroups);\n\n\t\t// Maintain the current navigation position when updating SettingsNavigator\n\t\tconst current = this._settingsNavigator && this._settingsNavigator.current();\n\t\tconst navigatorSettings = this._lastQuery ? consolidatedSettings : [];\n\t\tconst currentIndex = current ?\n\t\t\tarrays.firstIndex(navigatorSettings, s => s.key === current.key) :\n\t\t\t-1;\n\n\t\tthis._settingsNavigator = new SettingsNavigator(navigatorSettings, Math.max(currentIndex, 0));\n\n\t\tif (currentIndex >= 0) {\n\t\t\tthis._settingsNavigator.next();\n\t\t\tconst newCurrent = this._settingsNavigator.current();\n\t\t\tthis._focusPreference(newCurrent, this._defaultPreferencesRenderer);\n\t\t\tthis._focusPreference(newCurrent, this._editablePreferencesRenderer);\n\t\t}\n\n\t\tconst totalCount = consolidatedSettings.length;\n\t\tthis._onDidFilterResultsCountChange.fire({ count: totalCount });\n\t}\n\n\tprivate _getAllPreferences(preferencesRenderer: IPreferencesRenderer<ISetting>): ISettingsGroup[] {\n\t\treturn preferencesRenderer ? (<ISettingsEditorModel>preferencesRenderer.preferencesModel).settingsGroups : [];\n\t}\n\n\tprivate _focusPreference(preference: ISetting | null, preferencesRenderer: IPreferencesRenderer<ISetting>): void {\n\t\tif (preference && preferencesRenderer) {\n\t\t\tpreferencesRenderer.focusPreference(preference);\n\t\t}\n\t}\n\n\tprivate _clearFocus(preference: ISetting, preferencesRenderer: IPreferencesRenderer<ISetting>): void {\n\t\tif (preference && preferencesRenderer) {\n\t\t\tpreferencesRenderer.clearFocus(preference);\n\t\t}\n\t}\n\n\tprivate _updatePreference(key: string, value: any, source: ISetting, fromEditableSettings?: boolean): void {\n\t\tconst data = {\n\t\t\tuserConfigurationKeys: [key]\n\t\t};\n\n\t\tif (this.lastFilterResult) {\n\t\t\tdata['query'] = this.lastFilterResult.query;\n\t\t\tdata['editableSide'] = !!fromEditableSettings;\n\n\t\t\tconst nlpMetadata = this.lastFilterResult.metadata && this.lastFilterResult.metadata['nlpResult'];\n\t\t\tif (nlpMetadata) {\n\t\t\t\tconst sortedKeys = Object.keys(nlpMetadata.scoredResults).sort((a, b) => nlpMetadata.scoredResults[b].score - nlpMetadata.scoredResults[a].score);\n\t\t\t\tconst suffix = '##' + key;\n\t\t\t\tdata['nlpIndex'] = arrays.firstIndex(sortedKeys, key => strings.endsWith(key, suffix));\n\t\t\t}\n\n\t\t\tconst settingLocation = this._findSetting(this.lastFilterResult, key);\n\t\t\tif (settingLocation) {\n\t\t\t\tdata['groupId'] = this.lastFilterResult.filteredGroups[settingLocation.groupIdx].id;\n\t\t\t\tdata['displayIdx'] = settingLocation.overallSettingIdx;\n\t\t\t}\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"defaultSettingsActions.copySetting\" : {\n\t\t\t\t\"userConfigurationKeys\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"query\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"nlpIndex\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"groupId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"displayIdx\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"editableSide\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('defaultSettingsActions.copySetting', data);\n\t}\n\n\tprivate _findSetting(filterResult: IFilterResult, key: string): { groupIdx: number, settingIdx: number, overallSettingIdx: number } | undefined {\n\t\tlet overallSettingIdx = 0;\n\n\t\tfor (let groupIdx = 0; groupIdx < filterResult.filteredGroups.length; groupIdx++) {\n\t\t\tconst group = filterResult.filteredGroups[groupIdx];\n\t\t\tfor (let settingIdx = 0; settingIdx < group.sections[0].settings.length; settingIdx++) {\n\t\t\t\tconst setting = group.sections[0].settings[settingIdx];\n\t\t\t\tif (key === setting.key) {\n\t\t\t\t\treturn { groupIdx, settingIdx, overallSettingIdx };\n\t\t\t\t}\n\n\t\t\t\toverallSettingIdx++;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate _consolidateSettings(editableSettingsGroups: ISettingsGroup[], defaultSettingsGroups: ISettingsGroup[]): ISetting[] {\n\t\tconst defaultSettings = this._flatten(defaultSettingsGroups);\n\t\tconst editableSettings = this._flatten(editableSettingsGroups).filter(secondarySetting => defaultSettings.every(primarySetting => primarySetting.key !== secondarySetting.key));\n\t\treturn [...defaultSettings, ...editableSettings];\n\t}\n\n\tprivate _flatten(settingsGroups: ISettingsGroup[]): ISetting[] {\n\t\tconst settings: ISetting[] = [];\n\t\tfor (const group of settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tsettings.push(...section.settings);\n\t\t\t}\n\t\t}\n\n\t\treturn settings;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._defaultPreferencesRendererDisposables);\n\t\tdispose(this._editablePreferencesRendererDisposables);\n\t\tsuper.dispose();\n\t}\n}\n\nclass SideBySidePreferencesWidget extends Widget {\n\n\tprivate dimension: DOM.Dimension = new DOM.Dimension(0, 0);\n\n\tprivate defaultPreferencesHeader: HTMLElement;\n\tprivate defaultPreferencesEditor: DefaultPreferencesEditor;\n\tprivate editablePreferencesEditor: BaseEditor;\n\tprivate defaultPreferencesEditorContainer: HTMLElement;\n\tprivate editablePreferencesEditorContainer: HTMLElement;\n\n\tprivate settingsTargetsWidget: SettingsTargetsWidget;\n\n\tprivate readonly _onFocus = new Emitter<void>();\n\treadonly onFocus: Event<void> = this._onFocus.event;\n\n\tprivate readonly _onDidSettingsTargetChange = new Emitter<SettingsTarget>();\n\treadonly onDidSettingsTargetChange: Event<SettingsTarget> = this._onDidSettingsTargetChange.event;\n\n\tprivate splitview: SplitView;\n\n\tprivate isVisible: boolean;\n\tprivate group: IEditorGroup;\n\n\tget minimumWidth(): number { return this.splitview.minimumSize; }\n\tget maximumWidth(): number { return this.splitview.maximumSize; }\n\n\tconstructor(\n\t\tparentElement: HTMLElement,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\n\t\tDOM.addClass(parentElement, 'side-by-side-preferences-editor');\n\n\t\tthis.splitview = new SplitView(parentElement, { orientation: Orientation.HORIZONTAL });\n\t\tthis._register(this.splitview);\n\t\tthis._register(this.splitview.onDidSashReset(() => this.splitview.distributeViewSizes()));\n\n\t\tthis.defaultPreferencesEditorContainer = DOM.$('.default-preferences-editor-container');\n\n\t\tconst defaultPreferencesHeaderContainer = DOM.append(this.defaultPreferencesEditorContainer, DOM.$('.preferences-header-container'));\n\t\tthis.defaultPreferencesHeader = DOM.append(defaultPreferencesHeaderContainer, DOM.$('div.default-preferences-header'));\n\t\tthis.defaultPreferencesHeader.textContent = nls.localize('defaultSettings', \"Default Settings\");\n\n\t\tthis.defaultPreferencesEditor = this._register(this.instantiationService.createInstance(DefaultPreferencesEditor));\n\t\tthis.defaultPreferencesEditor.create(this.defaultPreferencesEditorContainer);\n\n\t\tthis.splitview.addView({\n\t\t\telement: this.defaultPreferencesEditorContainer,\n\t\t\tlayout: size => this.defaultPreferencesEditor.layout(new DOM.Dimension(size, this.dimension.height - 34 /* height of header container */)),\n\t\t\tminimumSize: 220,\n\t\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\t\tonDidChange: Event.None\n\t\t}, Sizing.Distribute);\n\n\t\tthis.editablePreferencesEditorContainer = DOM.$('.editable-preferences-editor-container');\n\t\tconst editablePreferencesHeaderContainer = DOM.append(this.editablePreferencesEditorContainer, DOM.$('.preferences-header-container'));\n\t\tthis.settingsTargetsWidget = this._register(this.instantiationService.createInstance(SettingsTargetsWidget, editablePreferencesHeaderContainer));\n\t\tthis._register(this.settingsTargetsWidget.onDidTargetChange(target => this._onDidSettingsTargetChange.fire(target)));\n\n\t\tthis._register(attachStylerCallback(this.themeService, { scrollbarShadow }, colors => {\n\t\t\tconst shadow = colors.scrollbarShadow ? colors.scrollbarShadow.toString() : null;\n\n\t\t\tif (shadow) {\n\t\t\t\tthis.editablePreferencesEditorContainer.style.boxShadow = `-6px 0 5px -5px ${shadow}`;\n\t\t\t} else {\n\t\t\t\tthis.editablePreferencesEditorContainer.style.boxShadow = null;\n\t\t\t}\n\t\t}));\n\n\t\tthis.splitview.addView({\n\t\t\telement: this.editablePreferencesEditorContainer,\n\t\t\tlayout: size => this.editablePreferencesEditor && this.editablePreferencesEditor.layout(new DOM.Dimension(size, this.dimension.height - 34 /* height of header container */)),\n\t\t\tminimumSize: 220,\n\t\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\t\tonDidChange: Event.None\n\t\t}, Sizing.Distribute);\n\n\t\tconst focusTracker = this._register(DOM.trackFocus(parentElement));\n\t\tthis._register(focusTracker.onDidFocus(() => this._onFocus.fire()));\n\t}\n\n\tsetInput(defaultPreferencesEditorInput: DefaultPreferencesEditorInput, editablePreferencesEditorInput: EditorInput, options: EditorOptions, token: CancellationToken): Promise<{ defaultPreferencesRenderer?: IPreferencesRenderer<ISetting>, editablePreferencesRenderer?: IPreferencesRenderer<ISetting> }> {\n\t\tthis.getOrCreateEditablePreferencesEditor(editablePreferencesEditorInput);\n\t\tthis.settingsTargetsWidget.settingsTarget = this.getSettingsTarget(editablePreferencesEditorInput.getResource()!);\n\t\treturn Promise.all([\n\t\t\tthis.updateInput(this.defaultPreferencesEditor, defaultPreferencesEditorInput, DefaultSettingsEditorContribution.ID, editablePreferencesEditorInput.getResource()!, options, token),\n\t\t\tthis.updateInput(this.editablePreferencesEditor, editablePreferencesEditorInput, SettingsEditorContribution.ID, defaultPreferencesEditorInput.getResource()!, options, token)\n\t\t])\n\t\t\t.then(([defaultPreferencesRenderer, editablePreferencesRenderer]) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\tthis.defaultPreferencesHeader.textContent = withUndefinedAsNull(defaultPreferencesRenderer && this.getDefaultPreferencesHeaderText((<DefaultSettingsEditorModel>defaultPreferencesRenderer.preferencesModel).target));\n\t\t\t\treturn { defaultPreferencesRenderer, editablePreferencesRenderer };\n\t\t\t});\n\t}\n\n\tprivate getDefaultPreferencesHeaderText(target: ConfigurationTarget): string {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\treturn nls.localize('defaultUserSettings', \"Default User Settings\");\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn nls.localize('defaultWorkspaceSettings', \"Default Workspace Settings\");\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn nls.localize('defaultFolderSettings', \"Default Folder Settings\");\n\t\t}\n\t\treturn '';\n\t}\n\n\tsetResultCount(settingsTarget: SettingsTarget, count: number): void {\n\t\tthis.settingsTargetsWidget.setResultCount(settingsTarget, count);\n\t}\n\n\tlayout(dimension: DOM.Dimension = this.dimension): void {\n\t\tthis.dimension = dimension;\n\t\tthis.splitview.layout(dimension.width);\n\t}\n\n\tfocus(): void {\n\t\tif (this.editablePreferencesEditor) {\n\t\t\tthis.editablePreferencesEditor.focus();\n\t\t}\n\t}\n\n\tgetControl(): IEditorControl | null {\n\t\treturn this.editablePreferencesEditor ? this.editablePreferencesEditor.getControl() : null;\n\t}\n\n\tclearInput(): void {\n\t\tif (this.defaultPreferencesEditor) {\n\t\t\tthis.defaultPreferencesEditor.clearInput();\n\t\t}\n\t\tif (this.editablePreferencesEditor) {\n\t\t\tthis.editablePreferencesEditor.clearInput();\n\t\t}\n\t}\n\n\tsetEditorVisible(visible: boolean, group: IEditorGroup): void {\n\t\tthis.isVisible = visible;\n\t\tthis.group = group;\n\n\t\tif (this.defaultPreferencesEditor) {\n\t\t\tthis.defaultPreferencesEditor.setVisible(this.isVisible, this.group);\n\t\t}\n\t\tif (this.editablePreferencesEditor) {\n\t\t\tthis.editablePreferencesEditor.setVisible(this.isVisible, this.group);\n\t\t}\n\t}\n\n\tprivate getOrCreateEditablePreferencesEditor(editorInput: EditorInput): BaseEditor {\n\t\tif (this.editablePreferencesEditor) {\n\t\t\treturn this.editablePreferencesEditor;\n\t\t}\n\t\tconst descriptor = Registry.as<IEditorRegistry>(EditorExtensions.Editors).getEditor(editorInput);\n\t\tconst editor = descriptor!.instantiate(this.instantiationService);\n\t\tthis.editablePreferencesEditor = editor;\n\t\tthis.editablePreferencesEditor.create(this.editablePreferencesEditorContainer);\n\t\tthis.editablePreferencesEditor.setVisible(this.isVisible, this.group);\n\t\tthis.layout();\n\n\t\treturn editor;\n\t}\n\n\tprivate updateInput(editor: BaseEditor, input: EditorInput, editorContributionId: string, associatedPreferencesModelUri: URI, options: EditorOptions, token: CancellationToken): Promise<IPreferencesRenderer<ISetting> | undefined> {\n\t\treturn editor.setInput(input, options, token)\n\t\t\t.then<any>(() => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn withNullAsUndefined((<CodeEditorWidget>editor.getControl()).getContribution<ISettingsEditorContribution>(editorContributionId).updatePreferencesRenderer(associatedPreferencesModelUri));\n\t\t\t});\n\t}\n\n\tprivate getSettingsTarget(resource: URI): SettingsTarget {\n\t\tif (this.preferencesService.userSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.USER;\n\t\t}\n\n\t\tconst workspaceSettingsResource = this.preferencesService.workspaceSettingsResource;\n\t\tif (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t}\n\n\t\tconst folder = this.workspaceContextService.getWorkspaceFolder(resource);\n\t\tif (folder) {\n\t\t\treturn folder.uri;\n\t\t}\n\n\t\treturn ConfigurationTarget.USER;\n\t}\n\n\tprivate disposeEditors(): void {\n\t\tif (this.defaultPreferencesEditor) {\n\t\t\tthis.defaultPreferencesEditor.dispose();\n\t\t}\n\t\tif (this.editablePreferencesEditor) {\n\t\t\tthis.editablePreferencesEditor.dispose();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposeEditors();\n\t\tsuper.dispose();\n\t}\n}\n\nexport class DefaultPreferencesEditor extends BaseTextEditor {\n\n\tstatic readonly ID: string = 'workbench.editor.defaultPreferences';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(DefaultPreferencesEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService);\n\t}\n\n\tprivate static _getContributions(): IEditorContributionCtor[] {\n\t\tconst skipContributions = [FoldingController.prototype, SelectionHighlighter.prototype, FindController.prototype];\n\t\tconst contributions = EditorExtensionsRegistry.getEditorContributions().filter(c => skipContributions.indexOf(c.prototype) === -1);\n\t\tcontributions.push(DefaultSettingsEditorContribution);\n\t\treturn contributions;\n\t}\n\n\tcreateEditorControl(parent: HTMLElement, configuration: IEditorOptions): editorCommon.IEditor {\n\t\tconst editor = this.instantiationService.createInstance(CodeEditorWidget, parent, configuration, { contributions: DefaultPreferencesEditor._getContributions() });\n\n\t\t// Inform user about editor being readonly if user starts type\n\t\tthis._register(editor.onDidType(() => this.showReadonlyHint(editor)));\n\t\tthis._register(editor.onDidPaste(() => this.showReadonlyHint(editor)));\n\n\t\treturn editor;\n\t}\n\n\tprivate showReadonlyHint(editor: ICodeEditor): void {\n\t\tconst messageController = MessageController.get(editor);\n\t\tif (!messageController.isVisible()) {\n\t\t\tmessageController.showMessage(nls.localize('defaultEditorReadonly', \"Edit in the right hand side editor to override defaults.\"), editor.getSelection()!.getPosition());\n\t\t}\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\tconst options = super.getConfigurationOverrides();\n\t\toptions.readOnly = true;\n\t\tif (this.input) {\n\t\t\toptions.lineNumbers = 'off';\n\t\t\toptions.renderLineHighlight = 'none';\n\t\t\toptions.scrollBeyondLastLine = false;\n\t\t\toptions.folding = false;\n\t\t\toptions.renderWhitespace = 'none';\n\t\t\toptions.wordWrap = 'on';\n\t\t\toptions.renderIndentGuides = false;\n\t\t\toptions.rulers = [];\n\t\t\toptions.glyphMargin = true;\n\t\t\toptions.minimap = {\n\t\t\t\tenabled: false\n\t\t\t};\n\t\t}\n\t\treturn options;\n\t}\n\n\tsetInput(input: DefaultPreferencesEditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\t\treturn super.setInput(input, options, token)\n\t\t\t.then(() => this.input!.resolve()\n\t\t\t\t.then<any>(editorModel => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn editorModel!.load();\n\t\t\t\t})\n\t\t\t\t.then(editorModel => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getControl().setModel((<ResourceEditorModel>editorModel).textEditorModel);\n\t\t\t\t}));\n\t}\n\n\tclearInput(): void {\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tlayout(dimension: DOM.Dimension) {\n\t\tthis.getControl().layout(dimension);\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\treturn nls.localize('preferencesAriaLabel', \"Default preferences. Readonly text editor.\");\n\t}\n}\n\ninterface ISettingsEditorContribution extends editorCommon.IEditorContribution {\n\n\tupdatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null>;\n\n}\n\nabstract class AbstractSettingsEditorContribution extends Disposable implements ISettingsEditorContribution {\n\n\tprivate preferencesRendererCreationPromise: Promise<IPreferencesRenderer<ISetting> | null> | null;\n\n\tconstructor(protected editor: ICodeEditor,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService,\n\t\t@IPreferencesService protected preferencesService: IPreferencesService,\n\t\t@IWorkspaceContextService protected workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\t\tthis._register(this.editor.onDidChangeModel(() => this._onModelChanged()));\n\t}\n\n\tupdatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null> {\n\t\tif (!this.preferencesRendererCreationPromise) {\n\t\t\tthis.preferencesRendererCreationPromise = this._createPreferencesRenderer();\n\t\t}\n\n\t\tif (this.preferencesRendererCreationPromise) {\n\t\t\treturn this._hasAssociatedPreferencesModelChanged(associatedPreferencesModelUri)\n\t\t\t\t.then(changed => changed ? this._updatePreferencesRenderer(associatedPreferencesModelUri) : this.preferencesRendererCreationPromise);\n\t\t}\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprotected _onModelChanged(): void {\n\t\tconst model = this.editor.getModel();\n\t\tthis.disposePreferencesRenderer();\n\t\tif (model) {\n\t\t\tthis.preferencesRendererCreationPromise = this._createPreferencesRenderer();\n\t\t}\n\t}\n\n\tprivate _hasAssociatedPreferencesModelChanged(associatedPreferencesModelUri: URI): Promise<boolean> {\n\t\treturn this.preferencesRendererCreationPromise!.then(preferencesRenderer => {\n\t\t\treturn !(preferencesRenderer && preferencesRenderer.getAssociatedPreferencesModel() && preferencesRenderer.getAssociatedPreferencesModel().uri!.toString() === associatedPreferencesModelUri.toString());\n\t\t});\n\t}\n\n\tprivate _updatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null> {\n\t\treturn this.preferencesService.createPreferencesEditorModel<ISetting>(associatedPreferencesModelUri)\n\t\t\t.then(associatedPreferencesEditorModel => {\n\t\t\t\treturn this.preferencesRendererCreationPromise!.then(preferencesRenderer => {\n\t\t\t\t\tif (preferencesRenderer) {\n\t\t\t\t\t\tconst associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();\n\t\t\t\t\t\tif (associatedPreferencesModel) {\n\t\t\t\t\t\t\tassociatedPreferencesModel.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpreferencesRenderer.setAssociatedPreferencesModel(associatedPreferencesEditorModel);\n\t\t\t\t\t}\n\t\t\t\t\treturn preferencesRenderer;\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate disposePreferencesRenderer(): void {\n\t\tif (this.preferencesRendererCreationPromise) {\n\t\t\tthis.preferencesRendererCreationPromise.then(preferencesRenderer => {\n\t\t\t\tif (preferencesRenderer) {\n\t\t\t\t\tconst associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();\n\t\t\t\t\tif (associatedPreferencesModel) {\n\t\t\t\t\t\tassociatedPreferencesModel.dispose();\n\t\t\t\t\t}\n\t\t\t\t\tpreferencesRenderer.preferencesModel.dispose();\n\t\t\t\t\tpreferencesRenderer.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.preferencesRendererCreationPromise = Promise.resolve(null);\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis.disposePreferencesRenderer();\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null;\n\tabstract getId(): string;\n}\n\nclass DefaultSettingsEditorContribution extends AbstractSettingsEditorContribution implements ISettingsEditorContribution {\n\n\tstatic readonly ID: string = 'editor.contrib.defaultsettings';\n\n\tgetId(): string {\n\t\treturn DefaultSettingsEditorContribution.ID;\n\t}\n\n\tprotected _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null {\n\t\treturn this.preferencesService.createPreferencesEditorModel(this.editor.getModel()!.uri)\n\t\t\t.then<any>(editorModel => {\n\t\t\t\tif (editorModel instanceof DefaultSettingsEditorModel && this.editor.getModel()) {\n\t\t\t\t\tconst preferencesRenderer = this.instantiationService.createInstance(DefaultSettingsRenderer, this.editor, editorModel);\n\t\t\t\t\tpreferencesRenderer.render();\n\t\t\t\t\treturn preferencesRenderer;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n\nclass SettingsEditorContribution extends AbstractSettingsEditorContribution implements ISettingsEditorContribution {\n\n\tstatic readonly ID: string = 'editor.contrib.settings';\n\n\tconstructor(editor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IPreferencesService preferencesService: IPreferencesService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(editor, instantiationService, preferencesService, workspaceContextService);\n\t\tthis._register(this.workspaceContextService.onDidChangeWorkbenchState(() => this._onModelChanged()));\n\t}\n\n\tgetId(): string {\n\t\treturn SettingsEditorContribution.ID;\n\t}\n\n\tprotected _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null {\n\t\tif (this.isSettingsModel()) {\n\t\t\treturn this.preferencesService.createPreferencesEditorModel(this.editor.getModel()!.uri)\n\t\t\t\t.then<any>(settingsModel => {\n\t\t\t\t\tif (settingsModel instanceof SettingsEditorModel && this.editor.getModel()) {\n\t\t\t\t\t\tswitch (settingsModel.configurationTarget) {\n\t\t\t\t\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\t\t\t\t\treturn this.instantiationService.createInstance(UserSettingsRenderer, this.editor, settingsModel);\n\t\t\t\t\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\t\t\treturn this.instantiationService.createInstance(WorkspaceSettingsRenderer, this.editor, settingsModel);\n\t\t\t\t\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\t\t\t\t\treturn this.instantiationService.createInstance(FolderSettingsRenderer, this.editor, settingsModel);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t})\n\t\t\t\t.then(preferencesRenderer => {\n\t\t\t\t\tif (preferencesRenderer) {\n\t\t\t\t\t\tpreferencesRenderer.render();\n\t\t\t\t\t}\n\t\t\t\t\treturn preferencesRenderer;\n\t\t\t\t});\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate isSettingsModel(): boolean {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.preferencesService.userSettingsResource && this.preferencesService.userSettingsResource.toString() === model.uri.toString()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.preferencesService.workspaceSettingsResource && this.preferencesService.workspaceSettingsResource.toString() === model.uri.toString()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (const folder of this.workspaceContextService.getWorkspace().folders) {\n\t\t\tconst folderSettingsResource = this.preferencesService.getFolderSettingsResource(folder.uri);\n\t\t\tif (folderSettingsResource && folderSettingsResource.toString() === model.uri.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nregisterEditorContribution(SettingsEditorContribution);\n"]}]}