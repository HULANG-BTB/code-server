{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/commands/common/commandService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/commands/common/commandService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/commands/common/commands\", \"vs/workbench/services/extensions/common/extensions\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/platform/log/common/log\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, instantiation_1, commands_1, extensions_1, event_1, lifecycle_1, log_1, extensions_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let CommandService = class CommandService extends lifecycle_1.Disposable {\n        constructor(_instantiationService, _extensionService, _logService) {\n            super();\n            this._instantiationService = _instantiationService;\n            this._extensionService = _extensionService;\n            this._logService = _logService;\n            this._extensionHostIsReady = false;\n            this._onWillExecuteCommand = this._register(new event_1.Emitter());\n            this.onWillExecuteCommand = this._onWillExecuteCommand.event;\n            this._extensionService.whenInstalledExtensionsRegistered().then(value => this._extensionHostIsReady = value);\n        }\n        executeCommand(id, ...args) {\n            this._logService.trace('CommandService#executeCommand', id);\n            // we always send an activation event, but\n            // we don't wait for it when the extension\n            // host didn't yet start and the command is already registered\n            const activation = this._extensionService.activateByEvent(`onCommand:${id}`);\n            const commandIsRegistered = !!commands_1.CommandsRegistry.getCommand(id);\n            if (!this._extensionHostIsReady && commandIsRegistered) {\n                return this._tryExecuteCommand(id, args);\n            }\n            else {\n                let waitFor = activation;\n                if (!commandIsRegistered) {\n                    waitFor = Promise.race([\n                        // race activation events against command registration\n                        Promise.all([activation, this._extensionService.activateByEvent(`*`)]),\n                        event_1.Event.toPromise(event_1.Event.filter(commands_1.CommandsRegistry.onDidRegisterCommand, e => e === id)),\n                    ]);\n                }\n                return waitFor.then(_ => this._tryExecuteCommand(id, args));\n            }\n        }\n        _tryExecuteCommand(id, args) {\n            const command = commands_1.CommandsRegistry.getCommand(id);\n            if (!command) {\n                return Promise.reject(new Error(`command '${id}' not found`));\n            }\n            try {\n                this._onWillExecuteCommand.fire({ commandId: id });\n                const result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler, ...args]);\n                return Promise.resolve(result);\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n    };\n    CommandService = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, extensions_1.IExtensionService),\n        __param(2, log_1.ILogService)\n    ], CommandService);\n    exports.CommandService = CommandService;\n    extensions_2.registerSingleton(commands_1.ICommandService, CommandService, true);\n});\n",null]}