{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDebugService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDebugService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar abstractDebugAdapter_1 = require(\"vs/workbench/contrib/debug/common/abstractDebugAdapter\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar MainThreadDebugService = /** @class */ (function () {\n    function MainThreadDebugService(extHostContext, debugService) {\n        var _this = this;\n        this.debugService = debugService;\n        this._debugAdaptersHandleCounter = 1;\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostDebugService);\n        this._toDispose = [];\n        this._toDispose.push(debugService.onDidNewSession(function (session) {\n            _this._proxy.$acceptDebugSessionStarted(_this.getSessionDto(session));\n        }));\n        // Need to start listening early to new session events because a custom event can come while a session is initialising\n        this._toDispose.push(debugService.onWillNewSession(function (session) {\n            _this._toDispose.push(session.onDidCustomEvent(function (event) { return _this._proxy.$acceptDebugSessionCustomEvent(_this.getSessionDto(session), event); }));\n        }));\n        this._toDispose.push(debugService.onDidEndSession(function (session) {\n            _this._proxy.$acceptDebugSessionTerminated(_this.getSessionDto(session));\n            _this._sessions.delete(session.getId());\n        }));\n        this._toDispose.push(debugService.getViewModel().onDidFocusSession(function (session) {\n            _this._proxy.$acceptDebugSessionActiveChanged(_this.getSessionDto(session));\n        }));\n        this._debugAdapters = new Map();\n        this._debugConfigurationProviders = new Map();\n        this._debugAdapterDescriptorFactories = new Map();\n        this._debugAdapterTrackerFactories = new Map();\n        this._sessions = new Set();\n    }\n    MainThreadDebugService.prototype.dispose = function () {\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n    };\n    // interface IDebugAdapterProvider\n    MainThreadDebugService.prototype.createDebugAdapter = function (session) {\n        var handle = this._debugAdaptersHandleCounter++;\n        var da = new ExtensionHostDebugAdapter(this, handle, this._proxy, session);\n        this._debugAdapters.set(handle, da);\n        return da;\n    };\n    MainThreadDebugService.prototype.substituteVariables = function (folder, config) {\n        return Promise.resolve(this._proxy.$substituteVariables(folder ? folder.uri : undefined, config));\n    };\n    MainThreadDebugService.prototype.runInTerminal = function (args, config) {\n        return Promise.resolve(this._proxy.$runInTerminal(args, config));\n    };\n    // RPC methods (MainThreadDebugServiceShape)\n    MainThreadDebugService.prototype.$registerDebugTypes = function (debugTypes) {\n        this._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterFactory(debugTypes, this));\n    };\n    MainThreadDebugService.prototype.$startBreakpointEvents = function () {\n        var _this = this;\n        if (!this._breakpointEventsActive) {\n            this._breakpointEventsActive = true;\n            // set up a handler to send more\n            this._toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function (e) {\n                // Ignore session only breakpoint events since they should only reflect in the UI\n                if (e && !e.sessionOnly) {\n                    var delta = {};\n                    if (e.added) {\n                        delta.added = _this.convertToDto(e.added);\n                    }\n                    if (e.removed) {\n                        delta.removed = e.removed.map(function (x) { return x.getId(); });\n                    }\n                    if (e.changed) {\n                        delta.changed = _this.convertToDto(e.changed);\n                    }\n                    if (delta.added || delta.removed || delta.changed) {\n                        _this._proxy.$acceptBreakpointsDelta(delta);\n                    }\n                }\n            }));\n            // send all breakpoints\n            var bps = this.debugService.getModel().getBreakpoints();\n            var fbps = this.debugService.getModel().getFunctionBreakpoints();\n            if (bps.length > 0 || fbps.length > 0) {\n                this._proxy.$acceptBreakpointsDelta({\n                    added: this.convertToDto(bps).concat(this.convertToDto(fbps))\n                });\n            }\n        }\n    };\n    MainThreadDebugService.prototype.$registerBreakpoints = function (DTOs) {\n        for (var _i = 0, DTOs_1 = DTOs; _i < DTOs_1.length; _i++) {\n            var dto = DTOs_1[_i];\n            if (dto.type === 'sourceMulti') {\n                var rawbps = dto.lines.map(function (l) {\n                    return ({\n                        id: l.id,\n                        enabled: l.enabled,\n                        lineNumber: l.line + 1,\n                        column: l.character > 0 ? l.character + 1 : undefined,\n                        condition: l.condition,\n                        hitCondition: l.hitCondition,\n                        logMessage: l.logMessage\n                    });\n                });\n                this.debugService.addBreakpoints(uri_1.URI.revive(dto.uri), rawbps, 'extension');\n            }\n            else if (dto.type === 'function') {\n                this.debugService.addFunctionBreakpoint(dto.functionName, dto.id);\n            }\n        }\n        return Promise.resolve();\n    };\n    MainThreadDebugService.prototype.$unregisterBreakpoints = function (breakpointIds, functionBreakpointIds) {\n        var _this = this;\n        breakpointIds.forEach(function (id) { return _this.debugService.removeBreakpoints(id); });\n        functionBreakpointIds.forEach(function (id) { return _this.debugService.removeFunctionBreakpoints(id); });\n        return Promise.resolve();\n    };\n    MainThreadDebugService.prototype.$registerDebugConfigurationProvider = function (debugType, hasProvide, hasResolve, hasProvideDebugAdapter, handle) {\n        var _this = this;\n        var provider = {\n            type: debugType\n        };\n        if (hasProvide) {\n            provider.provideDebugConfigurations = function (folder) {\n                return _this._proxy.$provideDebugConfigurations(handle, folder);\n            };\n        }\n        if (hasResolve) {\n            provider.resolveDebugConfiguration = function (folder, config) {\n                return _this._proxy.$resolveDebugConfiguration(handle, folder, config);\n            };\n        }\n        if (hasProvideDebugAdapter) {\n            console.info('DebugConfigurationProvider.debugAdapterExecutable is deprecated and will be removed soon; please use DebugAdapterDescriptorFactory.createDebugAdapterDescriptor instead.');\n            provider.debugAdapterExecutable = function (folder) {\n                return _this._proxy.$legacyDebugAdapterExecutable(handle, folder);\n            };\n        }\n        this._debugConfigurationProviders.set(handle, provider);\n        this._toDispose.push(this.debugService.getConfigurationManager().registerDebugConfigurationProvider(provider));\n        return Promise.resolve(undefined);\n    };\n    MainThreadDebugService.prototype.$unregisterDebugConfigurationProvider = function (handle) {\n        var provider = this._debugConfigurationProviders.get(handle);\n        if (provider) {\n            this._debugConfigurationProviders.delete(handle);\n            this.debugService.getConfigurationManager().unregisterDebugConfigurationProvider(provider);\n        }\n    };\n    MainThreadDebugService.prototype.$registerDebugAdapterDescriptorFactory = function (debugType, handle) {\n        var _this = this;\n        var provider = {\n            type: debugType,\n            createDebugAdapterDescriptor: function (session) {\n                return Promise.resolve(_this._proxy.$provideDebugAdapter(handle, _this.getSessionDto(session)));\n            }\n        };\n        this._debugAdapterDescriptorFactories.set(handle, provider);\n        this._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterDescriptorFactory(provider));\n        return Promise.resolve(undefined);\n    };\n    MainThreadDebugService.prototype.$unregisterDebugAdapterDescriptorFactory = function (handle) {\n        var provider = this._debugAdapterDescriptorFactories.get(handle);\n        if (provider) {\n            this._debugAdapterDescriptorFactories.delete(handle);\n            this.debugService.getConfigurationManager().unregisterDebugAdapterDescriptorFactory(provider);\n        }\n    };\n    MainThreadDebugService.prototype.$registerDebugAdapterTrackerFactory = function (debugType, handle) {\n        var factory = {\n            type: debugType,\n        };\n        this._debugAdapterTrackerFactories.set(handle, factory);\n        this._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterTrackerFactory(factory));\n        return Promise.resolve(undefined);\n    };\n    MainThreadDebugService.prototype.$unregisterDebugAdapterTrackerFactory = function (handle) {\n        var factory = this._debugAdapterTrackerFactories.get(handle);\n        if (factory) {\n            this._debugAdapterTrackerFactories.delete(handle);\n            this.debugService.getConfigurationManager().unregisterDebugAdapterTrackerFactory(factory);\n        }\n    };\n    MainThreadDebugService.prototype.getSession = function (sessionId) {\n        if (sessionId) {\n            return this.debugService.getModel().getSession(sessionId, true);\n        }\n        return undefined;\n    };\n    MainThreadDebugService.prototype.$startDebugging = function (_folderUri, nameOrConfiguration, parentSessionID) {\n        var folderUri = _folderUri ? uri_1.URI.revive(_folderUri) : undefined;\n        var launch = this.debugService.getConfigurationManager().getLaunch(folderUri);\n        return this.debugService.startDebugging(launch, nameOrConfiguration, false, this.getSession(parentSessionID)).then(function (success) {\n            return success;\n        }, function (err) {\n            return Promise.reject(new Error(err && err.message ? err.message : 'cannot start debugging'));\n        });\n    };\n    MainThreadDebugService.prototype.$customDebugAdapterRequest = function (sessionId, request, args) {\n        var session = this.debugService.getModel().getSession(sessionId, true);\n        if (session) {\n            return session.customRequest(request, args).then(function (response) {\n                if (response && response.success) {\n                    return response.body;\n                }\n                else {\n                    return Promise.reject(new Error(response ? response.message : 'custom request failed'));\n                }\n            });\n        }\n        return Promise.reject(new Error('debug session not found'));\n    };\n    MainThreadDebugService.prototype.$appendDebugConsole = function (value) {\n        // Use warning as severity to get the orange color for messages coming from the debug extension\n        var session = this.debugService.getViewModel().focusedSession;\n        if (session) {\n            session.appendToRepl(value, severity_1.default.Warning);\n        }\n    };\n    MainThreadDebugService.prototype.$acceptDAMessage = function (handle, message) {\n        this.getDebugAdapter(handle).acceptMessage(debugUtils_1.convertToVSCPaths(message, false));\n    };\n    MainThreadDebugService.prototype.$acceptDAError = function (handle, name, message, stack) {\n        this.getDebugAdapter(handle).fireError(handle, new Error(name + \": \" + message + \"\\n\" + stack));\n    };\n    MainThreadDebugService.prototype.$acceptDAExit = function (handle, code, signal) {\n        this.getDebugAdapter(handle).fireExit(handle, code, signal);\n    };\n    MainThreadDebugService.prototype.getDebugAdapter = function (handle) {\n        var adapter = this._debugAdapters.get(handle);\n        if (!adapter) {\n            throw new Error('Invalid debug adapter');\n        }\n        return adapter;\n    };\n    // dto helpers\n    MainThreadDebugService.prototype.$sessionCached = function (sessionID) {\n        // remember that the EH has cached the session and we do not have to send it again\n        this._sessions.add(sessionID);\n    };\n    MainThreadDebugService.prototype.getSessionDto = function (session) {\n        if (session) {\n            var sessionID = session.getId();\n            if (this._sessions.has(sessionID)) {\n                return sessionID;\n            }\n            else {\n                // this._sessions.add(sessionID); \t// #69534: see $sessionCached above\n                return {\n                    id: sessionID,\n                    type: session.configuration.type,\n                    name: session.configuration.name,\n                    folderUri: session.root ? session.root.uri : undefined,\n                    configuration: session.configuration\n                };\n            }\n        }\n        return undefined;\n    };\n    MainThreadDebugService.prototype.convertToDto = function (bps) {\n        return bps.map(function (bp) {\n            if ('name' in bp) {\n                var fbp = bp;\n                return {\n                    type: 'function',\n                    id: fbp.getId(),\n                    enabled: fbp.enabled,\n                    condition: fbp.condition,\n                    hitCondition: fbp.hitCondition,\n                    logMessage: fbp.logMessage,\n                    functionName: fbp.name\n                };\n            }\n            else {\n                var sbp = bp;\n                return {\n                    type: 'source',\n                    id: sbp.getId(),\n                    enabled: sbp.enabled,\n                    condition: sbp.condition,\n                    hitCondition: sbp.hitCondition,\n                    logMessage: sbp.logMessage,\n                    uri: sbp.uri,\n                    line: sbp.lineNumber > 0 ? sbp.lineNumber - 1 : 0,\n                    character: (typeof sbp.column === 'number' && sbp.column > 0) ? sbp.column - 1 : 0,\n                };\n            }\n        });\n    };\n    MainThreadDebugService = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadDebugService),\n        tslib_1.__param(1, debug_1.IDebugService)\n    ], MainThreadDebugService);\n    return MainThreadDebugService;\n}());\nexports.MainThreadDebugService = MainThreadDebugService;\n/**\n * DebugAdapter that communicates via extension protocol with another debug adapter.\n */\nvar ExtensionHostDebugAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionHostDebugAdapter, _super);\n    function ExtensionHostDebugAdapter(_ds, _handle, _proxy, _session) {\n        var _this = _super.call(this) || this;\n        _this._ds = _ds;\n        _this._handle = _handle;\n        _this._proxy = _proxy;\n        _this._session = _session;\n        return _this;\n    }\n    ExtensionHostDebugAdapter.prototype.fireError = function (handle, err) {\n        this._onError.fire(err);\n    };\n    ExtensionHostDebugAdapter.prototype.fireExit = function (handle, code, signal) {\n        this._onExit.fire(code);\n    };\n    ExtensionHostDebugAdapter.prototype.startSession = function () {\n        return Promise.resolve(this._proxy.$startDASession(this._handle, this._ds.getSessionDto(this._session)));\n    };\n    ExtensionHostDebugAdapter.prototype.sendMessage = function (message) {\n        this._proxy.$sendDAMessage(this._handle, debugUtils_1.convertToDAPaths(message, true));\n    };\n    ExtensionHostDebugAdapter.prototype.stopSession = function () {\n        return Promise.resolve(this._proxy.$stopDASession(this._handle));\n    };\n    return ExtensionHostDebugAdapter;\n}(abstractDebugAdapter_1.AbstractDebugAdapter));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDebugService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDebugService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IDebugService, IConfig, IDebugConfigurationProvider, IBreakpoint, IFunctionBreakpoint, IBreakpointData, ITerminalSettings, IDebugAdapter, IDebugAdapterDescriptorFactory, IDebugSession, IDebugAdapterFactory, IDebugAdapterTrackerFactory } from 'vs/workbench/contrib/debug/common/debug';\nimport {\n\tExtHostContext, ExtHostDebugServiceShape, MainThreadDebugServiceShape, DebugSessionUUID, MainContext,\n\tIExtHostContext, IBreakpointsDeltaDto, ISourceMultiBreakpointDto, ISourceBreakpointDto, IFunctionBreakpointDto, IDebugSessionDto\n} from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport severity from 'vs/base/common/severity';\nimport { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { convertToVSCPaths, convertToDAPaths } from 'vs/workbench/contrib/debug/common/debugUtils';\n\n@extHostNamedCustomer(MainContext.MainThreadDebugService)\nexport class MainThreadDebugService implements MainThreadDebugServiceShape, IDebugAdapterFactory {\n\n\tprivate readonly _proxy: ExtHostDebugServiceShape;\n\tprivate _toDispose: IDisposable[];\n\tprivate _breakpointEventsActive: boolean;\n\tprivate readonly _debugAdapters: Map<number, ExtensionHostDebugAdapter>;\n\tprivate _debugAdaptersHandleCounter = 1;\n\tprivate readonly _debugConfigurationProviders: Map<number, IDebugConfigurationProvider>;\n\tprivate readonly _debugAdapterDescriptorFactories: Map<number, IDebugAdapterDescriptorFactory>;\n\tprivate readonly _debugAdapterTrackerFactories: Map<number, IDebugAdapterTrackerFactory>;\n\tprivate readonly _sessions: Set<DebugSessionUUID>;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IDebugService private readonly debugService: IDebugService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDebugService);\n\t\tthis._toDispose = [];\n\t\tthis._toDispose.push(debugService.onDidNewSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionStarted(this.getSessionDto(session));\n\t\t}));\n\t\t// Need to start listening early to new session events because a custom event can come while a session is initialising\n\t\tthis._toDispose.push(debugService.onWillNewSession(session => {\n\t\t\tthis._toDispose.push(session.onDidCustomEvent(event => this._proxy.$acceptDebugSessionCustomEvent(this.getSessionDto(session), event)));\n\t\t}));\n\t\tthis._toDispose.push(debugService.onDidEndSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionTerminated(this.getSessionDto(session));\n\t\t\tthis._sessions.delete(session.getId());\n\t\t}));\n\t\tthis._toDispose.push(debugService.getViewModel().onDidFocusSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionActiveChanged(this.getSessionDto(session));\n\t\t}));\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugConfigurationProviders = new Map();\n\t\tthis._debugAdapterDescriptorFactories = new Map();\n\t\tthis._debugAdapterTrackerFactories = new Map();\n\t\tthis._sessions = new Set();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\t// interface IDebugAdapterProvider\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter {\n\t\tconst handle = this._debugAdaptersHandleCounter++;\n\t\tconst da = new ExtensionHostDebugAdapter(this, handle, this._proxy, session);\n\t\tthis._debugAdapters.set(handle, da);\n\t\treturn da;\n\t}\n\n\tsubstituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\treturn Promise.resolve(this._proxy.$substituteVariables(folder ? folder.uri : undefined, config));\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, config: ITerminalSettings): Promise<number | undefined> {\n\t\treturn Promise.resolve(this._proxy.$runInTerminal(args, config));\n\t}\n\n\t// RPC methods (MainThreadDebugServiceShape)\n\n\tpublic $registerDebugTypes(debugTypes: string[]) {\n\t\tthis._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterFactory(debugTypes, this));\n\t}\n\n\tpublic $startBreakpointEvents(): void {\n\n\t\tif (!this._breakpointEventsActive) {\n\t\t\tthis._breakpointEventsActive = true;\n\n\t\t\t// set up a handler to send more\n\t\t\tthis._toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\t\t// Ignore session only breakpoint events since they should only reflect in the UI\n\t\t\t\tif (e && !e.sessionOnly) {\n\t\t\t\t\tconst delta: IBreakpointsDeltaDto = {};\n\t\t\t\t\tif (e.added) {\n\t\t\t\t\t\tdelta.added = this.convertToDto(e.added);\n\t\t\t\t\t}\n\t\t\t\t\tif (e.removed) {\n\t\t\t\t\t\tdelta.removed = e.removed.map(x => x.getId());\n\t\t\t\t\t}\n\t\t\t\t\tif (e.changed) {\n\t\t\t\t\t\tdelta.changed = this.convertToDto(e.changed);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (delta.added || delta.removed || delta.changed) {\n\t\t\t\t\t\tthis._proxy.$acceptBreakpointsDelta(delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// send all breakpoints\n\t\t\tconst bps = this.debugService.getModel().getBreakpoints();\n\t\t\tconst fbps = this.debugService.getModel().getFunctionBreakpoints();\n\t\t\tif (bps.length > 0 || fbps.length > 0) {\n\t\t\t\tthis._proxy.$acceptBreakpointsDelta({\n\t\t\t\t\tadded: this.convertToDto(bps).concat(this.convertToDto(fbps))\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $registerBreakpoints(DTOs: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto>): Promise<void> {\n\n\t\tfor (let dto of DTOs) {\n\t\t\tif (dto.type === 'sourceMulti') {\n\t\t\t\tconst rawbps = dto.lines.map(l =>\n\t\t\t\t\t<IBreakpointData>{\n\t\t\t\t\t\tid: l.id,\n\t\t\t\t\t\tenabled: l.enabled,\n\t\t\t\t\t\tlineNumber: l.line + 1,\n\t\t\t\t\t\tcolumn: l.character > 0 ? l.character + 1 : undefined, // a column value of 0 results in an omitted column attribute; see #46784\n\t\t\t\t\t\tcondition: l.condition,\n\t\t\t\t\t\thitCondition: l.hitCondition,\n\t\t\t\t\t\tlogMessage: l.logMessage\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.debugService.addBreakpoints(uri.revive(dto.uri), rawbps, 'extension');\n\t\t\t} else if (dto.type === 'function') {\n\t\t\t\tthis.debugService.addFunctionBreakpoint(dto.functionName, dto.id);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $unregisterBreakpoints(breakpointIds: string[], functionBreakpointIds: string[]): Promise<void> {\n\t\tbreakpointIds.forEach(id => this.debugService.removeBreakpoints(id));\n\t\tfunctionBreakpointIds.forEach(id => this.debugService.removeFunctionBreakpoints(id));\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $registerDebugConfigurationProvider(debugType: string, hasProvide: boolean, hasResolve: boolean, hasProvideDebugAdapter: boolean, handle: number): Promise<void> {\n\n\t\tconst provider = <IDebugConfigurationProvider>{\n\t\t\ttype: debugType\n\t\t};\n\t\tif (hasProvide) {\n\t\t\tprovider.provideDebugConfigurations = (folder) => {\n\t\t\t\treturn this._proxy.$provideDebugConfigurations(handle, folder);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve) {\n\t\t\tprovider.resolveDebugConfiguration = (folder, config) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfiguration(handle, folder, config);\n\t\t\t};\n\t\t}\n\t\tif (hasProvideDebugAdapter) {\n\t\t\tconsole.info('DebugConfigurationProvider.debugAdapterExecutable is deprecated and will be removed soon; please use DebugAdapterDescriptorFactory.createDebugAdapterDescriptor instead.');\n\t\t\tprovider.debugAdapterExecutable = (folder) => {\n\t\t\t\treturn this._proxy.$legacyDebugAdapterExecutable(handle, folder);\n\t\t\t};\n\t\t}\n\t\tthis._debugConfigurationProviders.set(handle, provider);\n\t\tthis._toDispose.push(this.debugService.getConfigurationManager().registerDebugConfigurationProvider(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugConfigurationProvider(handle: number): void {\n\t\tconst provider = this._debugConfigurationProviders.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugConfigurationProviders.delete(handle);\n\t\t\tthis.debugService.getConfigurationManager().unregisterDebugConfigurationProvider(provider);\n\t\t}\n\t}\n\n\tpublic $registerDebugAdapterDescriptorFactory(debugType: string, handle: number): Promise<void> {\n\n\t\tconst provider = <IDebugAdapterDescriptorFactory>{\n\t\t\ttype: debugType,\n\t\t\tcreateDebugAdapterDescriptor: session => {\n\t\t\t\treturn Promise.resolve(this._proxy.$provideDebugAdapter(handle, this.getSessionDto(session)));\n\t\t\t}\n\t\t};\n\t\tthis._debugAdapterDescriptorFactories.set(handle, provider);\n\t\tthis._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterDescriptorFactory(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugAdapterDescriptorFactory(handle: number): void {\n\t\tconst provider = this._debugAdapterDescriptorFactories.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugAdapterDescriptorFactories.delete(handle);\n\t\t\tthis.debugService.getConfigurationManager().unregisterDebugAdapterDescriptorFactory(provider);\n\t\t}\n\t}\n\n\tpublic $registerDebugAdapterTrackerFactory(debugType: string, handle: number) {\n\t\tconst factory = <IDebugAdapterTrackerFactory>{\n\t\t\ttype: debugType,\n\t\t};\n\t\tthis._debugAdapterTrackerFactories.set(handle, factory);\n\t\tthis._toDispose.push(this.debugService.getConfigurationManager().registerDebugAdapterTrackerFactory(factory));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugAdapterTrackerFactory(handle: number) {\n\t\tconst factory = this._debugAdapterTrackerFactories.get(handle);\n\t\tif (factory) {\n\t\t\tthis._debugAdapterTrackerFactories.delete(handle);\n\t\t\tthis.debugService.getConfigurationManager().unregisterDebugAdapterTrackerFactory(factory);\n\t\t}\n\t}\n\n\tprivate getSession(sessionId: DebugSessionUUID | undefined): IDebugSession | undefined {\n\t\tif (sessionId) {\n\t\t\treturn this.debugService.getModel().getSession(sessionId, true);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $startDebugging(_folderUri: uri | undefined, nameOrConfiguration: string | IConfig, parentSessionID: DebugSessionUUID | undefined): Promise<boolean> {\n\t\tconst folderUri = _folderUri ? uri.revive(_folderUri) : undefined;\n\t\tconst launch = this.debugService.getConfigurationManager().getLaunch(folderUri);\n\t\treturn this.debugService.startDebugging(launch, nameOrConfiguration, false, this.getSession(parentSessionID)).then(success => {\n\t\t\treturn success;\n\t\t}, err => {\n\t\t\treturn Promise.reject(new Error(err && err.message ? err.message : 'cannot start debugging'));\n\t\t});\n\t}\n\n\tpublic $customDebugAdapterRequest(sessionId: DebugSessionUUID, request: string, args: any): Promise<any> {\n\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn session.customRequest(request, args).then(response => {\n\t\t\t\tif (response && response.success) {\n\t\t\t\t\treturn response.body;\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(new Error(response ? response.message : 'custom request failed'));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('debug session not found'));\n\t}\n\n\tpublic $appendDebugConsole(value: string): void {\n\t\t// Use warning as severity to get the orange color for messages coming from the debug extension\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tif (session) {\n\t\t\tsession.appendToRepl(value, severity.Warning);\n\t\t}\n\t}\n\n\tpublic $acceptDAMessage(handle: number, message: DebugProtocol.ProtocolMessage) {\n\t\tthis.getDebugAdapter(handle).acceptMessage(convertToVSCPaths(message, false));\n\t}\n\n\n\tpublic $acceptDAError(handle: number, name: string, message: string, stack: string) {\n\t\tthis.getDebugAdapter(handle).fireError(handle, new Error(`${name}: ${message}\\n${stack}`));\n\t}\n\n\tpublic $acceptDAExit(handle: number, code: number, signal: string) {\n\t\tthis.getDebugAdapter(handle).fireExit(handle, code, signal);\n\t}\n\n\tprivate getDebugAdapter(handle: number): ExtensionHostDebugAdapter {\n\t\tconst adapter = this._debugAdapters.get(handle);\n\t\tif (!adapter) {\n\t\t\tthrow new Error('Invalid debug adapter');\n\t\t}\n\t\treturn adapter;\n\t}\n\n\t// dto helpers\n\n\tpublic $sessionCached(sessionID: string) {\n\t\t// remember that the EH has cached the session and we do not have to send it again\n\t\tthis._sessions.add(sessionID);\n\t}\n\n\n\tgetSessionDto(session: undefined): undefined;\n\tgetSessionDto(session: IDebugSession): IDebugSessionDto;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined {\n\t\tif (session) {\n\t\t\tconst sessionID = <DebugSessionUUID>session.getId();\n\t\t\tif (this._sessions.has(sessionID)) {\n\t\t\t\treturn sessionID;\n\t\t\t} else {\n\t\t\t\t// this._sessions.add(sessionID); \t// #69534: see $sessionCached above\n\t\t\t\treturn {\n\t\t\t\t\tid: sessionID,\n\t\t\t\t\ttype: session.configuration.type,\n\t\t\t\t\tname: session.configuration.name,\n\t\t\t\t\tfolderUri: session.root ? session.root.uri : undefined,\n\t\t\t\t\tconfiguration: session.configuration\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate convertToDto(bps: (ReadonlyArray<IBreakpoint | IFunctionBreakpoint>)): Array<ISourceBreakpointDto | IFunctionBreakpointDto> {\n\t\treturn bps.map(bp => {\n\t\t\tif ('name' in bp) {\n\t\t\t\tconst fbp = <IFunctionBreakpoint>bp;\n\t\t\t\treturn <IFunctionBreakpointDto>{\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tid: fbp.getId(),\n\t\t\t\t\tenabled: fbp.enabled,\n\t\t\t\t\tcondition: fbp.condition,\n\t\t\t\t\thitCondition: fbp.hitCondition,\n\t\t\t\t\tlogMessage: fbp.logMessage,\n\t\t\t\t\tfunctionName: fbp.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst sbp = <IBreakpoint>bp;\n\t\t\t\treturn <ISourceBreakpointDto>{\n\t\t\t\t\ttype: 'source',\n\t\t\t\t\tid: sbp.getId(),\n\t\t\t\t\tenabled: sbp.enabled,\n\t\t\t\t\tcondition: sbp.condition,\n\t\t\t\t\thitCondition: sbp.hitCondition,\n\t\t\t\t\tlogMessage: sbp.logMessage,\n\t\t\t\t\turi: sbp.uri,\n\t\t\t\t\tline: sbp.lineNumber > 0 ? sbp.lineNumber - 1 : 0,\n\t\t\t\t\tcharacter: (typeof sbp.column === 'number' && sbp.column > 0) ? sbp.column - 1 : 0,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * DebugAdapter that communicates via extension protocol with another debug adapter.\n */\nclass ExtensionHostDebugAdapter extends AbstractDebugAdapter {\n\n\tconstructor(private readonly _ds: MainThreadDebugService, private _handle: number, private _proxy: ExtHostDebugServiceShape, private _session: IDebugSession) {\n\t\tsuper();\n\t}\n\n\tpublic fireError(handle: number, err: Error) {\n\t\tthis._onError.fire(err);\n\t}\n\n\tpublic fireExit(handle: number, code: number, signal: string) {\n\t\tthis._onExit.fire(code);\n\t}\n\n\tpublic startSession(): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$startDASession(this._handle, this._ds.getSessionDto(this._session)));\n\t}\n\n\tpublic sendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis._proxy.$sendDAMessage(this._handle, convertToDAPaths(message, true));\n\t}\n\n\tpublic stopSession(): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$stopDASession(this._handle));\n\t}\n}\n"]}]}