{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const LANGUAGE_DEFAULT = 'en';\n    let _isWindows = false;\n    let _isMacintosh = false;\n    let _isLinux = false;\n    let _isNative = false;\n    let _isWeb = false;\n    let _locale = undefined;\n    let _language = LANGUAGE_DEFAULT;\n    let _translationsConfigFile = undefined;\n    const isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n    // OS detection\n    if (typeof navigator === 'object' && !isElectronRenderer) {\n        const userAgent = navigator.userAgent;\n        _isWindows = userAgent.indexOf('Windows') >= 0;\n        _isMacintosh = userAgent.indexOf('Macintosh') >= 0;\n        _isLinux = userAgent.indexOf('Linux') >= 0;\n        _isWeb = true;\n        _locale = navigator.language;\n        _language = _locale;\n    }\n    else if (typeof process === 'object') {\n        _isWindows = (process.platform === 'win32');\n        _isMacintosh = (process.platform === 'darwin');\n        _isLinux = (process.platform === 'linux');\n        _locale = LANGUAGE_DEFAULT;\n        _language = LANGUAGE_DEFAULT;\n        const rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\n        if (rawNlsConfig) {\n            try {\n                const nlsConfig = JSON.parse(rawNlsConfig);\n                const resolved = nlsConfig.availableLanguages['*'];\n                _locale = nlsConfig.locale;\n                // VSCode's default language is 'en'\n                _language = resolved ? resolved : LANGUAGE_DEFAULT;\n                _translationsConfigFile = nlsConfig._translationsConfigFile;\n            }\n            catch (e) {\n            }\n        }\n        _isNative = true;\n    }\n    var Platform;\n    (function (Platform) {\n        Platform[Platform[\"Web\"] = 0] = \"Web\";\n        Platform[Platform[\"Mac\"] = 1] = \"Mac\";\n        Platform[Platform[\"Linux\"] = 2] = \"Linux\";\n        Platform[Platform[\"Windows\"] = 3] = \"Windows\";\n    })(Platform = exports.Platform || (exports.Platform = {}));\n    function PlatformToString(platform) {\n        switch (platform) {\n            case Platform.Web: return 'Web';\n            case Platform.Mac: return 'Mac';\n            case Platform.Linux: return 'Linux';\n            case Platform.Windows: return 'Windows';\n        }\n    }\n    exports.PlatformToString = PlatformToString;\n    let _platform = Platform.Web;\n    if (_isNative) {\n        if (_isMacintosh) {\n            _platform = Platform.Mac;\n        }\n        else if (_isWindows) {\n            _platform = Platform.Windows;\n        }\n        else if (_isLinux) {\n            _platform = Platform.Linux;\n        }\n    }\n    exports.isWindows = _isWindows;\n    exports.isMacintosh = _isMacintosh;\n    exports.isLinux = _isLinux;\n    exports.isNative = _isNative;\n    exports.isWeb = _isWeb;\n    exports.platform = _platform;\n    function isRootUser() {\n        return _isNative && !_isWindows && (process.getuid() === 0);\n    }\n    exports.isRootUser = isRootUser;\n    /**\n     * The language used for the user interface. The format of\n     * the string is all lower case (e.g. zh-tw for Traditional\n     * Chinese)\n     */\n    exports.language = _language;\n    var Language;\n    (function (Language) {\n        function value() {\n            return exports.language;\n        }\n        Language.value = value;\n        function isDefaultVariant() {\n            if (exports.language.length === 2) {\n                return exports.language === 'en';\n            }\n            else if (exports.language.length >= 3) {\n                return exports.language[0] === 'e' && exports.language[1] === 'n' && exports.language[2] === '-';\n            }\n            else {\n                return false;\n            }\n        }\n        Language.isDefaultVariant = isDefaultVariant;\n        function isDefault() {\n            return exports.language === 'en';\n        }\n        Language.isDefault = isDefault;\n    })(Language = exports.Language || (exports.Language = {}));\n    /**\n     * The OS locale or the locale specified by --locale. The format of\n     * the string is all lower case (e.g. zh-tw for Traditional\n     * Chinese). The UI is not necessarily shown in the provided locale.\n     */\n    exports.locale = _locale;\n    /**\n     * The translatios that are available through language packs.\n     */\n    exports.translationsConfigFile = _translationsConfigFile;\n    const _globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\n    exports.globals = _globals;\n    let _setImmediate = null;\n    function setImmediate(callback) {\n        if (_setImmediate === null) {\n            if (exports.globals.setImmediate) {\n                _setImmediate = exports.globals.setImmediate.bind(exports.globals);\n            }\n            else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n                _setImmediate = process.nextTick.bind(process);\n            }\n            else {\n                _setImmediate = exports.globals.setTimeout.bind(exports.globals);\n            }\n        }\n        return _setImmediate(callback);\n    }\n    exports.setImmediate = setImmediate;\n    var OperatingSystem;\n    (function (OperatingSystem) {\n        OperatingSystem[OperatingSystem[\"Windows\"] = 1] = \"Windows\";\n        OperatingSystem[OperatingSystem[\"Macintosh\"] = 2] = \"Macintosh\";\n        OperatingSystem[OperatingSystem[\"Linux\"] = 3] = \"Linux\";\n    })(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));\n    exports.OS = (_isMacintosh ? OperatingSystem.Macintosh : (_isWindows ? OperatingSystem.Windows : OperatingSystem.Linux));\n});\n",null]}