{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/color.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/color.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/charCode\"], function (require, exports, charCode_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function roundFloat(number, decimalPoints) {\n        const decimal = Math.pow(10, decimalPoints);\n        return Math.round(number * decimal) / decimal;\n    }\n    class RGBA {\n        constructor(r, g, b, a = 1) {\n            this.r = Math.min(255, Math.max(0, r)) | 0;\n            this.g = Math.min(255, Math.max(0, g)) | 0;\n            this.b = Math.min(255, Math.max(0, b)) | 0;\n            this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n        }\n        static equals(a, b) {\n            return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n        }\n    }\n    exports.RGBA = RGBA;\n    class HSLA {\n        constructor(h, s, l, a) {\n            this.h = Math.max(Math.min(360, h), 0) | 0;\n            this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n            this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n            this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n        }\n        static equals(a, b) {\n            return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n        }\n        /**\n         * Converts an RGB color value to HSL. Conversion formula\n         * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n         * Assumes r, g, and b are contained in the set [0, 255] and\n         * returns h in the set [0, 360], s, and l in the set [0, 1].\n         */\n        static fromRGBA(rgba) {\n            const r = rgba.r / 255;\n            const g = rgba.g / 255;\n            const b = rgba.b / 255;\n            const a = rgba.a;\n            const max = Math.max(r, g, b);\n            const min = Math.min(r, g, b);\n            let h = 0;\n            let s = 0;\n            const l = (min + max) / 2;\n            const chroma = max - min;\n            if (chroma > 0) {\n                s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n                switch (max) {\n                    case r:\n                        h = (g - b) / chroma + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / chroma + 2;\n                        break;\n                    case b:\n                        h = (r - g) / chroma + 4;\n                        break;\n                }\n                h *= 60;\n                h = Math.round(h);\n            }\n            return new HSLA(h, s, l, a);\n        }\n        static _hue2rgb(p, q, t) {\n            if (t < 0) {\n                t += 1;\n            }\n            if (t > 1) {\n                t -= 1;\n            }\n            if (t < 1 / 6) {\n                return p + (q - p) * 6 * t;\n            }\n            if (t < 1 / 2) {\n                return q;\n            }\n            if (t < 2 / 3) {\n                return p + (q - p) * (2 / 3 - t) * 6;\n            }\n            return p;\n        }\n        /**\n         * Converts an HSL color value to RGB. Conversion formula\n         * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n         * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n         * returns r, g, and b in the set [0, 255].\n         */\n        static toRGBA(hsla) {\n            const h = hsla.h / 360;\n            const { s, l, a } = hsla;\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            }\n            else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = HSLA._hue2rgb(p, q, h + 1 / 3);\n                g = HSLA._hue2rgb(p, q, h);\n                b = HSLA._hue2rgb(p, q, h - 1 / 3);\n            }\n            return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n        }\n    }\n    exports.HSLA = HSLA;\n    class HSVA {\n        constructor(h, s, v, a) {\n            this.h = Math.max(Math.min(360, h), 0) | 0;\n            this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n            this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n            this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n        }\n        static equals(a, b) {\n            return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n        }\n        // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n        static fromRGBA(rgba) {\n            const r = rgba.r / 255;\n            const g = rgba.g / 255;\n            const b = rgba.b / 255;\n            const cmax = Math.max(r, g, b);\n            const cmin = Math.min(r, g, b);\n            const delta = cmax - cmin;\n            const s = cmax === 0 ? 0 : (delta / cmax);\n            let m;\n            if (delta === 0) {\n                m = 0;\n            }\n            else if (cmax === r) {\n                m = ((((g - b) / delta) % 6) + 6) % 6;\n            }\n            else if (cmax === g) {\n                m = ((b - r) / delta) + 2;\n            }\n            else {\n                m = ((r - g) / delta) + 4;\n            }\n            return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n        }\n        // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n        static toRGBA(hsva) {\n            const { h, s, v, a } = hsva;\n            const c = v * s;\n            const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n            const m = v - c;\n            let [r, g, b] = [0, 0, 0];\n            if (h < 60) {\n                r = c;\n                g = x;\n            }\n            else if (h < 120) {\n                r = x;\n                g = c;\n            }\n            else if (h < 180) {\n                g = c;\n                b = x;\n            }\n            else if (h < 240) {\n                g = x;\n                b = c;\n            }\n            else if (h < 300) {\n                r = x;\n                b = c;\n            }\n            else if (h < 360) {\n                r = c;\n                b = x;\n            }\n            r = Math.round((r + m) * 255);\n            g = Math.round((g + m) * 255);\n            b = Math.round((b + m) * 255);\n            return new RGBA(r, g, b, a);\n        }\n    }\n    exports.HSVA = HSVA;\n    class Color {\n        constructor(arg) {\n            if (!arg) {\n                throw new Error('Color needs a value');\n            }\n            else if (arg instanceof RGBA) {\n                this.rgba = arg;\n            }\n            else if (arg instanceof HSLA) {\n                this._hsla = arg;\n                this.rgba = HSLA.toRGBA(arg);\n            }\n            else if (arg instanceof HSVA) {\n                this._hsva = arg;\n                this.rgba = HSVA.toRGBA(arg);\n            }\n            else {\n                throw new Error('Invalid color ctor argument');\n            }\n        }\n        static fromHex(hex) {\n            return Color.Format.CSS.parseHex(hex) || Color.red;\n        }\n        get hsla() {\n            if (this._hsla) {\n                return this._hsla;\n            }\n            else {\n                return HSLA.fromRGBA(this.rgba);\n            }\n        }\n        get hsva() {\n            if (this._hsva) {\n                return this._hsva;\n            }\n            return HSVA.fromRGBA(this.rgba);\n        }\n        equals(other) {\n            return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n        }\n        /**\n         * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n         * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n         */\n        getRelativeLuminance() {\n            const R = Color._relativeLuminanceForComponent(this.rgba.r);\n            const G = Color._relativeLuminanceForComponent(this.rgba.g);\n            const B = Color._relativeLuminanceForComponent(this.rgba.b);\n            const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n            return roundFloat(luminance, 4);\n        }\n        static _relativeLuminanceForComponent(color) {\n            const c = color / 255;\n            return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\n        }\n        /**\n         * http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n         * Returns the contrast ration number in the set [1, 21].\n         */\n        getContrastRatio(another) {\n            const lum1 = this.getRelativeLuminance();\n            const lum2 = another.getRelativeLuminance();\n            return lum1 > lum2 ? (lum1 + 0.05) / (lum2 + 0.05) : (lum2 + 0.05) / (lum1 + 0.05);\n        }\n        /**\n         *\thttp://24ways.org/2010/calculating-color-contrast\n         *  Return 'true' if darker color otherwise 'false'\n         */\n        isDarker() {\n            const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n            return yiq < 128;\n        }\n        /**\n         *\thttp://24ways.org/2010/calculating-color-contrast\n         *  Return 'true' if lighter color otherwise 'false'\n         */\n        isLighter() {\n            const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n            return yiq >= 128;\n        }\n        isLighterThan(another) {\n            const lum1 = this.getRelativeLuminance();\n            const lum2 = another.getRelativeLuminance();\n            return lum1 > lum2;\n        }\n        isDarkerThan(another) {\n            const lum1 = this.getRelativeLuminance();\n            const lum2 = another.getRelativeLuminance();\n            return lum1 < lum2;\n        }\n        lighten(factor) {\n            return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n        }\n        darken(factor) {\n            return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n        }\n        transparent(factor) {\n            const { r, g, b, a } = this.rgba;\n            return new Color(new RGBA(r, g, b, a * factor));\n        }\n        isTransparent() {\n            return this.rgba.a === 0;\n        }\n        isOpaque() {\n            return this.rgba.a === 1;\n        }\n        opposite() {\n            return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n        }\n        blend(c) {\n            const rgba = c.rgba;\n            // Convert to 0..1 opacity\n            const thisA = this.rgba.a;\n            const colorA = rgba.a;\n            const a = thisA + colorA * (1 - thisA);\n            if (a < 1e-6) {\n                return Color.transparent;\n            }\n            const r = this.rgba.r * thisA / a + rgba.r * colorA * (1 - thisA) / a;\n            const g = this.rgba.g * thisA / a + rgba.g * colorA * (1 - thisA) / a;\n            const b = this.rgba.b * thisA / a + rgba.b * colorA * (1 - thisA) / a;\n            return new Color(new RGBA(r, g, b, a));\n        }\n        flatten(...backgrounds) {\n            const background = backgrounds.reduceRight((accumulator, color) => {\n                return Color._flatten(color, accumulator);\n            });\n            return Color._flatten(this, background);\n        }\n        static _flatten(foreground, background) {\n            const backgroundAlpha = 1 - foreground.rgba.a;\n            return new Color(new RGBA(backgroundAlpha * background.rgba.r + foreground.rgba.a * foreground.rgba.r, backgroundAlpha * background.rgba.g + foreground.rgba.a * foreground.rgba.g, backgroundAlpha * background.rgba.b + foreground.rgba.a * foreground.rgba.b));\n        }\n        toString() {\n            return '' + Color.Format.CSS.format(this);\n        }\n        static getLighterColor(of, relative, factor) {\n            if (of.isLighterThan(relative)) {\n                return of;\n            }\n            factor = factor ? factor : 0.5;\n            const lum1 = of.getRelativeLuminance();\n            const lum2 = relative.getRelativeLuminance();\n            factor = factor * (lum2 - lum1) / lum2;\n            return of.lighten(factor);\n        }\n        static getDarkerColor(of, relative, factor) {\n            if (of.isDarkerThan(relative)) {\n                return of;\n            }\n            factor = factor ? factor : 0.5;\n            const lum1 = of.getRelativeLuminance();\n            const lum2 = relative.getRelativeLuminance();\n            factor = factor * (lum1 - lum2) / lum1;\n            return of.darken(factor);\n        }\n    }\n    Color.white = new Color(new RGBA(255, 255, 255, 1));\n    Color.black = new Color(new RGBA(0, 0, 0, 1));\n    Color.red = new Color(new RGBA(255, 0, 0, 1));\n    Color.blue = new Color(new RGBA(0, 0, 255, 1));\n    Color.green = new Color(new RGBA(0, 255, 0, 1));\n    Color.cyan = new Color(new RGBA(0, 255, 255, 1));\n    Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));\n    Color.transparent = new Color(new RGBA(0, 0, 0, 0));\n    exports.Color = Color;\n    (function (Color) {\n        let Format;\n        (function (Format) {\n            let CSS;\n            (function (CSS) {\n                function formatRGB(color) {\n                    if (color.rgba.a === 1) {\n                        return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n                    }\n                    return Color.Format.CSS.formatRGBA(color);\n                }\n                CSS.formatRGB = formatRGB;\n                function formatRGBA(color) {\n                    return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\n                }\n                CSS.formatRGBA = formatRGBA;\n                function formatHSL(color) {\n                    if (color.hsla.a === 1) {\n                        return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n                    }\n                    return Color.Format.CSS.formatHSLA(color);\n                }\n                CSS.formatHSL = formatHSL;\n                function formatHSLA(color) {\n                    return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n                }\n                CSS.formatHSLA = formatHSLA;\n                function _toTwoDigitHex(n) {\n                    const r = n.toString(16);\n                    return r.length !== 2 ? '0' + r : r;\n                }\n                /**\n                 * Formats the color as #RRGGBB\n                 */\n                function formatHex(color) {\n                    return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n                }\n                CSS.formatHex = formatHex;\n                /**\n                 * Formats the color as #RRGGBBAA\n                 * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n                 */\n                function formatHexA(color, compact = false) {\n                    if (compact && color.rgba.a === 1) {\n                        return Color.Format.CSS.formatHex(color);\n                    }\n                    return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n                }\n                CSS.formatHexA = formatHexA;\n                /**\n                 * The default format will use HEX if opaque and RGBA otherwise.\n                 */\n                function format(color) {\n                    if (!color) {\n                        return null;\n                    }\n                    if (color.isOpaque()) {\n                        return Color.Format.CSS.formatHex(color);\n                    }\n                    return Color.Format.CSS.formatRGBA(color);\n                }\n                CSS.format = format;\n                /**\n                 * Converts an Hex color value to a Color.\n                 * returns r, g, and b are contained in the set [0, 255]\n                 * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n                 */\n                function parseHex(hex) {\n                    if (!hex) {\n                        // Invalid color\n                        return null;\n                    }\n                    const length = hex.length;\n                    if (length === 0) {\n                        // Invalid color\n                        return null;\n                    }\n                    if (hex.charCodeAt(0) !== charCode_1.CharCode.Hash) {\n                        // Does not begin with a #\n                        return null;\n                    }\n                    if (length === 7) {\n                        // #RRGGBB format\n                        const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                        const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                        const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                        return new Color(new RGBA(r, g, b, 1));\n                    }\n                    if (length === 9) {\n                        // #RRGGBBAA format\n                        const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                        const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                        const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                        const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n                        return new Color(new RGBA(r, g, b, a / 255));\n                    }\n                    if (length === 4) {\n                        // #RGB format\n                        const r = _parseHexDigit(hex.charCodeAt(1));\n                        const g = _parseHexDigit(hex.charCodeAt(2));\n                        const b = _parseHexDigit(hex.charCodeAt(3));\n                        return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n                    }\n                    if (length === 5) {\n                        // #RGBA format\n                        const r = _parseHexDigit(hex.charCodeAt(1));\n                        const g = _parseHexDigit(hex.charCodeAt(2));\n                        const b = _parseHexDigit(hex.charCodeAt(3));\n                        const a = _parseHexDigit(hex.charCodeAt(4));\n                        return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n                    }\n                    // Invalid color\n                    return null;\n                }\n                CSS.parseHex = parseHex;\n                function _parseHexDigit(charCode) {\n                    switch (charCode) {\n                        case charCode_1.CharCode.Digit0: return 0;\n                        case charCode_1.CharCode.Digit1: return 1;\n                        case charCode_1.CharCode.Digit2: return 2;\n                        case charCode_1.CharCode.Digit3: return 3;\n                        case charCode_1.CharCode.Digit4: return 4;\n                        case charCode_1.CharCode.Digit5: return 5;\n                        case charCode_1.CharCode.Digit6: return 6;\n                        case charCode_1.CharCode.Digit7: return 7;\n                        case charCode_1.CharCode.Digit8: return 8;\n                        case charCode_1.CharCode.Digit9: return 9;\n                        case charCode_1.CharCode.a: return 10;\n                        case charCode_1.CharCode.A: return 10;\n                        case charCode_1.CharCode.b: return 11;\n                        case charCode_1.CharCode.B: return 11;\n                        case charCode_1.CharCode.c: return 12;\n                        case charCode_1.CharCode.C: return 12;\n                        case charCode_1.CharCode.d: return 13;\n                        case charCode_1.CharCode.D: return 13;\n                        case charCode_1.CharCode.e: return 14;\n                        case charCode_1.CharCode.E: return 14;\n                        case charCode_1.CharCode.f: return 15;\n                        case charCode_1.CharCode.F: return 15;\n                    }\n                    return 0;\n                }\n            })(CSS = Format.CSS || (Format.CSS = {}));\n        })(Format = Color.Format || (Color.Format = {}));\n    })(Color = exports.Color || (exports.Color = {}));\n});\n",null]}