{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionTipsService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionTipsService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar glob_1 = require(\"vs/base/common/glob\");\nvar json = require(\"vs/base/common/json\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensionsActions_1 = require(\"vs/workbench/contrib/extensions/electron-browser/extensionsActions\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar os = require(\"os\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar mime_1 = require(\"vs/base/common/mime\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar workspaceStats_1 = require(\"vs/workbench/contrib/stats/node/workspaceStats\");\nvar request_1 = require(\"vs/platform/request/node/request\");\nvar request_2 = require(\"vs/base/node/request\");\nvar types_1 = require(\"vs/base/common/types\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar event_1 = require(\"vs/base/common/event\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar experimentService_1 = require(\"vs/workbench/contrib/experiments/node/experimentService\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar extensions_3 = require(\"vs/platform/extensions/common/extensions\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar milliSecondsInADay = 1000 * 60 * 60 * 24;\nvar choiceNever = nls_1.localize('neverShowAgain', \"Don't Show Again\");\nvar searchMarketplace = nls_1.localize('searchMarketplace', \"Search Marketplace\");\nvar processedFileExtensions = [];\nfunction caseInsensitiveGet(obj, key) {\n    if (!obj) {\n        return undefined;\n    }\n    for (var _key in obj) {\n        if (Object.hasOwnProperty.call(obj, _key) && _key.toLowerCase() === key.toLowerCase()) {\n            return obj[_key];\n        }\n    }\n    return undefined;\n}\nvar ExtensionTipsService = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionTipsService, _super);\n    function ExtensionTipsService(_galleryService, _modelService, storageService, extensionsService, instantiationService, fileService, contextService, configurationService, telemetryService, environmentService, extensionService, requestService, viewletService, notificationService, extensionManagementService, extensionWorkbenchService, experimentService) {\n        var _this = _super.call(this) || this;\n        _this._galleryService = _galleryService;\n        _this._modelService = _modelService;\n        _this.storageService = storageService;\n        _this.extensionsService = extensionsService;\n        _this.instantiationService = instantiationService;\n        _this.fileService = fileService;\n        _this.contextService = contextService;\n        _this.configurationService = configurationService;\n        _this.telemetryService = telemetryService;\n        _this.environmentService = environmentService;\n        _this.extensionService = extensionService;\n        _this.requestService = requestService;\n        _this.viewletService = viewletService;\n        _this.notificationService = notificationService;\n        _this.extensionManagementService = extensionManagementService;\n        _this.extensionWorkbenchService = extensionWorkbenchService;\n        _this.experimentService = experimentService;\n        _this._fileBasedRecommendations = Object.create(null);\n        _this._exeBasedRecommendations = Object.create(null);\n        _this._availableRecommendations = Object.create(null);\n        _this._allWorkspaceRecommendedExtensions = [];\n        _this._dynamicWorkspaceRecommendations = [];\n        _this._experimentalRecommendations = Object.create(null);\n        _this._allIgnoredRecommendations = [];\n        _this._globallyIgnoredRecommendations = [];\n        _this._workspaceIgnoredRecommendations = [];\n        _this._disposables = [];\n        _this.proactiveRecommendationsFetched = false;\n        _this._onRecommendationChange = new event_1.Emitter();\n        _this.onRecommendationChange = _this._onRecommendationChange.event;\n        if (!_this.isEnabled()) {\n            return _this;\n        }\n        if (product_1.default.extensionsGallery && product_1.default.extensionsGallery.recommendationsUrl) {\n            _this._extensionsRecommendationsUrl = product_1.default.extensionsGallery.recommendationsUrl;\n        }\n        _this.sessionSeed = +new Date();\n        var globallyIgnored = JSON.parse(_this.storageService.get('extensionsAssistant/ignored_recommendations', storage_1.StorageScope.GLOBAL, '[]'));\n        _this._globallyIgnoredRecommendations = globallyIgnored.map(function (id) { return id.toLowerCase(); });\n        _this.fetchCachedDynamicWorkspaceRecommendations();\n        _this.fetchFileBasedRecommendations();\n        _this.fetchExperimentalRecommendations();\n        if (!_this.configurationService.getValue(extensions_1.ShowRecommendationsOnlyOnDemandKey)) {\n            _this.fetchProactiveRecommendations(true);\n        }\n        _this.loadWorkspaceConfigPromise = _this.getWorkspaceRecommendations().then(function () {\n            _this.promptWorkspaceRecommendations();\n            _this._modelService.onModelAdded(_this.promptFiletypeBasedRecommendations, _this, _this._disposables);\n            _this._modelService.getModels().forEach(function (model) { return _this.promptFiletypeBasedRecommendations(model); });\n        });\n        _this._register(_this.contextService.onDidChangeWorkspaceFolders(function (e) { return _this.onWorkspaceFoldersChanged(e); }));\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) {\n            if (!_this.proactiveRecommendationsFetched && !_this.configurationService.getValue(extensions_1.ShowRecommendationsOnlyOnDemandKey)) {\n                _this.fetchProactiveRecommendations();\n            }\n        }));\n        _this._register(_this.extensionManagementService.onDidInstallExtension(function (e) {\n            if (e.gallery && e.operation === extensionManagement_1.InstallOperation.Install) {\n                var extRecommendations = _this.getAllRecommendationsWithReason() || {};\n                var recommendationReason = extRecommendations[e.gallery.identifier.id.toLowerCase()];\n                if (recommendationReason) {\n                    /* __GDPR__\n                        \"extensionGallery:install:recommendations\" : {\n                            \"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                            \"${include}\": [\n                                \"${GalleryExtensionTelemetryData}\"\n                            ]\n                        }\n                    */\n                    _this.telemetryService.publicLog('extensionGallery:install:recommendations', objects_1.assign(e.gallery.telemetryData, { recommendationReason: recommendationReason.reasonId }));\n                }\n            }\n        }));\n        return _this;\n    }\n    ExtensionTipsService.prototype.isEnabled = function () {\n        return this._galleryService.isEnabled() && !this.environmentService.extensionDevelopmentLocationURI;\n    };\n    ExtensionTipsService.prototype.getAllRecommendationsWithReason = function () {\n        var output = Object.create(null);\n        if (!this.proactiveRecommendationsFetched) {\n            return output;\n        }\n        collections_1.forEach(this._experimentalRecommendations, function (entry) { return output[entry.key.toLowerCase()] = {\n            reasonId: extensionManagement_1.ExtensionRecommendationReason.Experimental,\n            reasonText: entry.value\n        }; });\n        if (this.contextService.getWorkspace().folders && this.contextService.getWorkspace().folders.length === 1) {\n            var currentRepo_1 = this.contextService.getWorkspace().folders[0].name;\n            this._dynamicWorkspaceRecommendations.forEach(function (id) { return output[id.toLowerCase()] = {\n                reasonId: extensionManagement_1.ExtensionRecommendationReason.DynamicWorkspace,\n                reasonText: nls_1.localize('dynamicWorkspaceRecommendation', \"This extension may interest you because it's popular among users of the {0} repository.\", currentRepo_1)\n            }; });\n        }\n        collections_1.forEach(this._exeBasedRecommendations, function (entry) { return output[entry.key.toLowerCase()] = {\n            reasonId: extensionManagement_1.ExtensionRecommendationReason.Executable,\n            reasonText: nls_1.localize('exeBasedRecommendation', \"This extension is recommended because you have {0} installed.\", entry.value)\n        }; });\n        collections_1.forEach(this._fileBasedRecommendations, function (entry) { return output[entry.key.toLowerCase()] = {\n            reasonId: extensionManagement_1.ExtensionRecommendationReason.File,\n            reasonText: nls_1.localize('fileBasedRecommendation', \"This extension is recommended based on the files you recently opened.\")\n        }; });\n        this._allWorkspaceRecommendedExtensions.forEach(function (_a) {\n            var extensionId = _a.extensionId;\n            return output[extensionId.toLowerCase()] = {\n                reasonId: extensionManagement_1.ExtensionRecommendationReason.Workspace,\n                reasonText: nls_1.localize('workspaceRecommendation', \"This extension is recommended by users of the current workspace.\")\n            };\n        });\n        for (var _i = 0, _a = this._allIgnoredRecommendations; _i < _a.length; _i++) {\n            var id = _a[_i];\n            delete output[id];\n        }\n        return output;\n    };\n    ExtensionTipsService.prototype.getAllIgnoredRecommendations = function () {\n        return {\n            global: this._globallyIgnoredRecommendations,\n            workspace: this._workspaceIgnoredRecommendations\n        };\n    };\n    ExtensionTipsService.prototype.toggleIgnoredRecommendation = function (extensionId, shouldIgnore) {\n        var lowerId = extensionId.toLowerCase();\n        if (shouldIgnore) {\n            var reason = this.getAllRecommendationsWithReason()[lowerId];\n            if (reason && reason.reasonId) {\n                /* __GDPR__\n                    \"extensionsRecommendations:ignoreRecommendation\" : {\n                        \"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                        \"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                this.telemetryService.publicLog('extensionsRecommendations:ignoreRecommendation', { id: extensionId, recommendationReason: reason.reasonId });\n            }\n        }\n        this._globallyIgnoredRecommendations = shouldIgnore ?\n            arrays_1.distinct(this._globallyIgnoredRecommendations.concat([lowerId]).map(function (id) { return id.toLowerCase(); })) :\n            this._globallyIgnoredRecommendations.filter(function (id) { return id !== lowerId; });\n        this.storageService.store('extensionsAssistant/ignored_recommendations', JSON.stringify(this._globallyIgnoredRecommendations), storage_1.StorageScope.GLOBAL);\n        this._allIgnoredRecommendations = arrays_1.distinct(this._globallyIgnoredRecommendations.concat(this._workspaceIgnoredRecommendations));\n        this._onRecommendationChange.fire({ extensionId: extensionId, isRecommended: !shouldIgnore });\n    };\n    ExtensionTipsService.prototype.getKeymapRecommendations = function () {\n        var _this = this;\n        return (product_1.default.keymapExtensionTips || [])\n            .filter(function (extensionId) { return _this.isExtensionAllowedToBeRecommended(extensionId); })\n            .map(function (extensionId) { return ({ extensionId: extensionId, sources: ['application'] }); });\n    };\n    //#region workspaceRecommendations\n    ExtensionTipsService.prototype.getWorkspaceRecommendations = function () {\n        var _this = this;\n        if (!this.isEnabled()) {\n            return Promise.resolve([]);\n        }\n        return this.fetchWorkspaceRecommendations()\n            .then(function () { return _this._allWorkspaceRecommendedExtensions.filter(function (rec) { return _this.isExtensionAllowedToBeRecommended(rec.extensionId); }); });\n    };\n    /**\n     * Parse all extensions.json files, fetch workspace recommendations, filter out invalid and unwanted ones\n     */\n    ExtensionTipsService.prototype.fetchWorkspaceRecommendations = function () {\n        var _this = this;\n        if (!this.isEnabled) {\n            return Promise.resolve(undefined);\n        }\n        return this.fetchExtensionRecommendationContents()\n            .then(function (result) { return _this.validateExtensions(result.map(function (_a) {\n            var contents = _a.contents;\n            return contents;\n        }))\n            .then(function (_a) {\n            var invalidExtensions = _a.invalidExtensions, message = _a.message;\n            if (invalidExtensions.length > 0 && _this.notificationService) {\n                _this.notificationService.warn(\"The below \" + invalidExtensions.length + \" extension(s) in workspace recommendations have issues:\\n\" + message);\n            }\n            var seenUnWantedRecommendations = {};\n            _this._allWorkspaceRecommendedExtensions = [];\n            _this._workspaceIgnoredRecommendations = [];\n            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n                var contentsBySource = result_1[_i];\n                if (contentsBySource.contents.unwantedRecommendations) {\n                    for (var _b = 0, _c = contentsBySource.contents.unwantedRecommendations; _b < _c.length; _b++) {\n                        var r = _c[_b];\n                        var unwantedRecommendation = r.toLowerCase();\n                        if (!seenUnWantedRecommendations[unwantedRecommendation] && invalidExtensions.indexOf(unwantedRecommendation) === -1) {\n                            _this._workspaceIgnoredRecommendations.push(unwantedRecommendation);\n                            seenUnWantedRecommendations[unwantedRecommendation] = true;\n                        }\n                    }\n                }\n                if (contentsBySource.contents.recommendations) {\n                    var _loop_1 = function (r) {\n                        var extensionId = r.toLowerCase();\n                        if (invalidExtensions.indexOf(extensionId) === -1) {\n                            var recommendation = _this._allWorkspaceRecommendedExtensions.filter(function (r) { return r.extensionId === extensionId; })[0];\n                            if (!recommendation) {\n                                recommendation = { extensionId: extensionId, sources: [] };\n                                _this._allWorkspaceRecommendedExtensions.push(recommendation);\n                            }\n                            if (recommendation.sources.indexOf(contentsBySource.source) === -1) {\n                                recommendation.sources.push(contentsBySource.source);\n                            }\n                        }\n                    };\n                    for (var _d = 0, _e = contentsBySource.contents.recommendations; _d < _e.length; _d++) {\n                        var r = _e[_d];\n                        _loop_1(r);\n                    }\n                }\n            }\n            _this._allIgnoredRecommendations = arrays_1.distinct(_this._globallyIgnoredRecommendations.concat(_this._workspaceIgnoredRecommendations));\n        }); });\n    };\n    /**\n     * Parse all extensions.json files, fetch workspace recommendations\n     */\n    ExtensionTipsService.prototype.fetchExtensionRecommendationContents = function () {\n        var _this = this;\n        var workspace = this.contextService.getWorkspace();\n        return Promise.all([\n            this.resolveWorkspaceExtensionConfig(workspace).then(function (contents) { return contents ? { contents: contents, source: workspace } : null; })\n        ].concat(workspace.folders.map(function (workspaceFolder) { return _this.resolveWorkspaceFolderExtensionConfig(workspaceFolder).then(function (contents) { return contents ? { contents: contents, source: workspaceFolder } : null; }); }))).then(function (contents) { return arrays_1.coalesce(contents); });\n    };\n    /**\n     * Parse the extensions.json file for given workspace and return the recommendations\n     */\n    ExtensionTipsService.prototype.resolveWorkspaceExtensionConfig = function (workspace) {\n        if (!workspace.configuration) {\n            return Promise.resolve(null);\n        }\n        return Promise.resolve(this.fileService.resolveContent(workspace.configuration)\n            .then(function (content) { return (json.parse(content.value)['extensions']); }, function (err) { return null; }));\n    };\n    /**\n     * Parse the extensions.json files for given workspace folder and return the recommendations\n     */\n    ExtensionTipsService.prototype.resolveWorkspaceFolderExtensionConfig = function (workspaceFolder) {\n        var _this = this;\n        var extensionsJsonUri = workspaceFolder.toResource(extensions_1.EXTENSIONS_CONFIG);\n        return Promise.resolve(this.fileService.resolveFile(extensionsJsonUri)\n            .then(function () { return _this.fileService.resolveContent(extensionsJsonUri); })\n            .then(function (content) { return json.parse(content.value); }, function (err) { return null; }));\n    };\n    /**\n     * Validate the extensions.json file contents using regex and querying the gallery\n     */\n    ExtensionTipsService.prototype.validateExtensions = function (contents) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var extensionsContent, regEx, invalidExtensions, message, regexFilter, filteredWanted, validRecommendations_1, e_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        extensionsContent = {\n                            recommendations: arrays_1.distinct(arrays_1.flatten(contents.map(function (content) { return content.recommendations || []; }))),\n                            unwantedRecommendations: arrays_1.distinct(arrays_1.flatten(contents.map(function (content) { return content.unwantedRecommendations || []; })))\n                        };\n                        regEx = new RegExp(extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN);\n                        invalidExtensions = [];\n                        message = '';\n                        regexFilter = function (ids) {\n                            return ids.filter(function (element, position) {\n                                if (ids.indexOf(element) !== position) {\n                                    // This is a duplicate entry, it doesn't hurt anybody\n                                    // but it shouldn't be sent in the gallery query\n                                    return false;\n                                }\n                                else if (!regEx.test(element)) {\n                                    invalidExtensions.push(element.toLowerCase());\n                                    message += element + \" (bad format) Expected: <provider>.<name>\\n\";\n                                    return false;\n                                }\n                                return true;\n                            });\n                        };\n                        filteredWanted = regexFilter(extensionsContent.recommendations || []).map(function (x) { return x.toLowerCase(); });\n                        if (!filteredWanted.length) return [3 /*break*/, 4];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._galleryService.query({ names: filteredWanted, pageSize: filteredWanted.length }, cancellation_1.CancellationToken.None)];\n                    case 2:\n                        validRecommendations_1 = (_a.sent()).firstPage\n                            .map(function (extension) { return extension.identifier.id.toLowerCase(); });\n                        if (validRecommendations_1.length !== filteredWanted.length) {\n                            filteredWanted.forEach(function (element) {\n                                if (validRecommendations_1.indexOf(element.toLowerCase()) === -1) {\n                                    invalidExtensions.push(element.toLowerCase());\n                                    message += element + \" (not found in marketplace)\\n\";\n                                }\n                            });\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        console.warn('Error querying extensions gallery', e_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/, { invalidExtensions: invalidExtensions, message: message }];\n                }\n            });\n        });\n    };\n    ExtensionTipsService.prototype.onWorkspaceFoldersChanged = function (event) {\n        var _this = this;\n        if (event.added.length) {\n            var oldWorkspaceRecommended_1 = this._allWorkspaceRecommendedExtensions;\n            this.getWorkspaceRecommendations()\n                .then(function (currentWorkspaceRecommended) {\n                // Suggest only if at least one of the newly added recommendations was not suggested before\n                if (currentWorkspaceRecommended.some(function (current) { return oldWorkspaceRecommended_1.every(function (old) { return current.extensionId !== old.extensionId; }); })) {\n                    _this.promptWorkspaceRecommendations();\n                }\n            });\n        }\n        this._dynamicWorkspaceRecommendations = [];\n    };\n    /**\n     * Prompt the user to install workspace recommendations if there are any not already installed\n     */\n    ExtensionTipsService.prototype.promptWorkspaceRecommendations = function () {\n        var _this = this;\n        var storageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\n        var config = this.configurationService.getValue(extensions_1.ConfigurationKey);\n        var filteredRecs = this._allWorkspaceRecommendedExtensions.filter(function (rec) { return _this.isExtensionAllowedToBeRecommended(rec.extensionId); });\n        if (filteredRecs.length === 0\n            || config.ignoreRecommendations\n            || config.showRecommendationsOnlyOnDemand\n            || this.storageService.getBoolean(storageKey, storage_1.StorageScope.WORKSPACE, false)) {\n            return;\n        }\n        this.extensionsService.getInstalled(extensions_3.ExtensionType.User).then(function (local) {\n            var recommendations = filteredRecs.filter(function (_a) {\n                var extensionId = _a.extensionId;\n                return local.every(function (local) { return !extensionManagementUtil_1.areSameExtensions({ id: extensionId }, local.identifier); });\n            });\n            if (!recommendations.length) {\n                return Promise.resolve(undefined);\n            }\n            return new Promise(function (c) {\n                _this.notificationService.prompt(severity_1.default.Info, nls_1.localize('workspaceRecommended', \"This workspace has extension recommendations.\"), [{\n                        label: nls_1.localize('installAll', \"Install All\"),\n                        run: function () {\n                            /* __GDPR__\n                            \"extensionWorkspaceRecommendations:popup\" : {\n                                \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                            }\n                            */\n                            _this.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'install' });\n                            var installAllAction = _this.instantiationService.createInstance(extensionsActions_1.InstallWorkspaceRecommendedExtensionsAction, extensionsActions_1.InstallWorkspaceRecommendedExtensionsAction.ID, nls_1.localize('installAll', \"Install All\"), recommendations);\n                            installAllAction.run();\n                            installAllAction.dispose();\n                            c(undefined);\n                        }\n                    }, {\n                        label: nls_1.localize('showRecommendations', \"Show Recommendations\"),\n                        run: function () {\n                            /* __GDPR__\n                                \"extensionWorkspaceRecommendations:popup\" : {\n                                    \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                                }\n                            */\n                            _this.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'show' });\n                            var showAction = _this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, nls_1.localize('showRecommendations', \"Show Recommendations\"));\n                            showAction.run();\n                            showAction.dispose();\n                            c(undefined);\n                        }\n                    }, {\n                        label: choiceNever,\n                        isSecondary: true,\n                        run: function () {\n                            /* __GDPR__\n                                \"extensionWorkspaceRecommendations:popup\" : {\n                                    \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                                }\n                            */\n                            _this.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'neverShowAgain' });\n                            _this.storageService.store(storageKey, true, storage_1.StorageScope.WORKSPACE);\n                            c(undefined);\n                        }\n                    }], {\n                    sticky: true,\n                    onCancel: function () {\n                        /* __GDPR__\n                            \"extensionWorkspaceRecommendations:popup\" : {\n                                \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                            }\n                        */\n                        _this.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'cancelled' });\n                        c(undefined);\n                    }\n                });\n            });\n        });\n    };\n    //#endregion\n    //#region fileBasedRecommendations\n    ExtensionTipsService.prototype.getFileBasedRecommendations = function () {\n        var _this = this;\n        return Object.keys(this._fileBasedRecommendations)\n            .sort(function (a, b) {\n            if (_this._fileBasedRecommendations[a].recommendedTime === _this._fileBasedRecommendations[b].recommendedTime) {\n                if (!product_1.default.extensionImportantTips || caseInsensitiveGet(product_1.default.extensionImportantTips, a)) {\n                    return -1;\n                }\n                if (caseInsensitiveGet(product_1.default.extensionImportantTips, b)) {\n                    return 1;\n                }\n            }\n            return _this._fileBasedRecommendations[a].recommendedTime > _this._fileBasedRecommendations[b].recommendedTime ? -1 : 1;\n        })\n            .filter(function (extensionId) { return _this.isExtensionAllowedToBeRecommended(extensionId); })\n            .map(function (extensionId) { return ({ extensionId: extensionId, sources: _this._fileBasedRecommendations[extensionId].sources }); });\n    };\n    /**\n     * Parse all file based recommendations from product.extensionTips\n     * Retire existing recommendations if they are older than a week or are not part of product.extensionTips anymore\n     */\n    ExtensionTipsService.prototype.fetchFileBasedRecommendations = function () {\n        var _this = this;\n        var extensionTips = product_1.default.extensionTips;\n        if (!extensionTips) {\n            return;\n        }\n        // group ids by pattern, like {**/*.md} -> [ext.foo1, ext.bar2]\n        this._availableRecommendations = Object.create(null);\n        collections_1.forEach(extensionTips, function (entry) {\n            var id = entry.key, pattern = entry.value;\n            var ids = _this._availableRecommendations[pattern];\n            if (!ids) {\n                _this._availableRecommendations[pattern] = [id.toLowerCase()];\n            }\n            else {\n                ids.push(id.toLowerCase());\n            }\n        });\n        collections_1.forEach(product_1.default.extensionImportantTips, function (entry) {\n            var id = entry.key, value = entry.value;\n            var pattern = value.pattern;\n            var ids = _this._availableRecommendations[pattern];\n            if (!ids) {\n                _this._availableRecommendations[pattern] = [id.toLowerCase()];\n            }\n            else {\n                ids.push(id.toLowerCase());\n            }\n        });\n        var allRecommendations = arrays_1.flatten((Object.keys(this._availableRecommendations).map(function (key) { return _this._availableRecommendations[key]; })));\n        // retrieve ids of previous recommendations\n        var storedRecommendationsJson = JSON.parse(this.storageService.get('extensionsAssistant/recommendations', storage_1.StorageScope.GLOBAL, '[]'));\n        if (Array.isArray(storedRecommendationsJson)) {\n            for (var _i = 0, _a = storedRecommendationsJson; _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (allRecommendations.indexOf(id) > -1) {\n                    this._fileBasedRecommendations[id.toLowerCase()] = { recommendedTime: Date.now(), sources: ['cached'] };\n                }\n            }\n        }\n        else {\n            var now_1 = Date.now();\n            collections_1.forEach(storedRecommendationsJson, function (entry) {\n                if (typeof entry.value === 'number') {\n                    var diff = (now_1 - entry.value) / milliSecondsInADay;\n                    if (diff <= 7 && allRecommendations.indexOf(entry.key) > -1) {\n                        _this._fileBasedRecommendations[entry.key.toLowerCase()] = { recommendedTime: entry.value, sources: ['cached'] };\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Prompt the user to either install the recommended extension for the file type in the current editor model\n     * or prompt to search the marketplace if it has extensions that can support the file type\n     */\n    ExtensionTipsService.prototype.promptFiletypeBasedRecommendations = function (model) {\n        var _this = this;\n        var hasSuggestion = false;\n        var uri = model.uri;\n        if (!uri || !this.fileService.canHandleResource(uri)) {\n            return;\n        }\n        var fileExtension = resources_1.extname(uri);\n        if (fileExtension) {\n            if (processedFileExtensions.indexOf(fileExtension) > -1) {\n                return;\n            }\n            processedFileExtensions.push(fileExtension);\n        }\n        // re-schedule this bit of the operation to be off\n        // the critical path - in case glob-match is slow\n        setImmediate(function () {\n            var recommendationsToSuggest = [];\n            var now = Date.now();\n            collections_1.forEach(_this._availableRecommendations, function (entry) {\n                var pattern = entry.key, ids = entry.value;\n                if (glob_1.match(pattern, uri.path)) {\n                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {\n                        var id = ids_1[_i];\n                        if (caseInsensitiveGet(product_1.default.extensionImportantTips, id)) {\n                            recommendationsToSuggest.push(id);\n                        }\n                        var filedBasedRecommendation = _this._fileBasedRecommendations[id.toLowerCase()] || { recommendedTime: now, sources: [] };\n                        filedBasedRecommendation.recommendedTime = now;\n                        if (!filedBasedRecommendation.sources.some(function (s) { return s instanceof uri_1.URI && s.toString() === uri.toString(); })) {\n                            filedBasedRecommendation.sources.push(uri);\n                        }\n                        _this._fileBasedRecommendations[id.toLowerCase()] = filedBasedRecommendation;\n                    }\n                }\n            });\n            _this.storageService.store('extensionsAssistant/recommendations', JSON.stringify(Object.keys(_this._fileBasedRecommendations).reduce(function (result, key) { result[key] = _this._fileBasedRecommendations[key].recommendedTime; return result; }, {})), storage_1.StorageScope.GLOBAL);\n            var config = _this.configurationService.getValue(extensions_1.ConfigurationKey);\n            if (config.ignoreRecommendations || config.showRecommendationsOnlyOnDemand) {\n                return;\n            }\n            var importantRecommendationsIgnoreList = JSON.parse(_this.storageService.get('extensionsAssistant/importantRecommendationsIgnore', storage_1.StorageScope.GLOBAL, '[]'));\n            recommendationsToSuggest = recommendationsToSuggest.filter(function (id) { return importantRecommendationsIgnoreList.indexOf(id) === -1 && _this.isExtensionAllowedToBeRecommended(id); });\n            var importantTipsPromise = recommendationsToSuggest.length === 0 ? Promise.resolve(null) : _this.extensionWorkbenchService.queryLocal().then(function (local) {\n                var localExtensions = local.map(function (e) { return e.identifier; });\n                recommendationsToSuggest = recommendationsToSuggest.filter(function (id) { return localExtensions.every(function (local) { return !extensionManagementUtil_1.areSameExtensions(local, { id: id }); }); });\n                if (!recommendationsToSuggest.length) {\n                    return;\n                }\n                var id = recommendationsToSuggest[0];\n                var entry = caseInsensitiveGet(product_1.default.extensionImportantTips, id);\n                if (!entry) {\n                    return;\n                }\n                var name = entry['name'];\n                // Indicates we have a suggested extension via the whitelist\n                hasSuggestion = true;\n                var message = nls_1.localize('reallyRecommended2', \"The '{0}' extension is recommended for this file type.\", name);\n                // Temporary fix for the only extension pack we recommend. See https://github.com/Microsoft/vscode/issues/35364\n                if (id === 'vscjava.vscode-java-pack') {\n                    message = nls_1.localize('reallyRecommendedExtensionPack', \"The '{0}' extension pack is recommended for this file type.\", name);\n                }\n                var setIgnoreRecommendationsConfig = function (configVal) {\n                    _this.configurationService.updateValue('extensions.ignoreRecommendations', configVal, configuration_1.ConfigurationTarget.USER);\n                    if (configVal) {\n                        var ignoreWorkspaceRecommendationsStorageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\n                        _this.storageService.store(ignoreWorkspaceRecommendationsStorageKey, true, storage_1.StorageScope.WORKSPACE);\n                    }\n                };\n                _this.notificationService.prompt(severity_1.default.Info, message, [{\n                        label: nls_1.localize('install', 'Install'),\n                        run: function () {\n                            /* __GDPR__\n                            \"extensionRecommendations:popup\" : {\n                                \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                \"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                            }\n                            */\n                            _this.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'install', extensionId: name });\n                            _this.instantiationService.createInstance(extensionsActions_1.InstallRecommendedExtensionAction, id).run();\n                        }\n                    }, {\n                        label: nls_1.localize('showRecommendations', \"Show Recommendations\"),\n                        run: function () {\n                            /* __GDPR__\n                                \"extensionRecommendations:popup\" : {\n                                    \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                    \"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                                }\n                            */\n                            _this.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'show', extensionId: name });\n                            var recommendationsAction = _this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, nls_1.localize('showRecommendations', \"Show Recommendations\"));\n                            recommendationsAction.run();\n                            recommendationsAction.dispose();\n                        }\n                    }, {\n                        label: choiceNever,\n                        isSecondary: true,\n                        run: function () {\n                            importantRecommendationsIgnoreList.push(id);\n                            _this.storageService.store('extensionsAssistant/importantRecommendationsIgnore', JSON.stringify(importantRecommendationsIgnoreList), storage_1.StorageScope.GLOBAL);\n                            /* __GDPR__\n                                \"extensionRecommendations:popup\" : {\n                                    \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                    \"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                                }\n                            */\n                            _this.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'neverShowAgain', extensionId: name });\n                            _this.notificationService.prompt(severity_1.default.Info, nls_1.localize('ignoreExtensionRecommendations', \"Do you want to ignore all extension recommendations?\"), [{\n                                    label: nls_1.localize('ignoreAll', \"Yes, Ignore All\"),\n                                    run: function () { return setIgnoreRecommendationsConfig(true); }\n                                }, {\n                                    label: nls_1.localize('no', \"No\"),\n                                    run: function () { return setIgnoreRecommendationsConfig(false); }\n                                }]);\n                        }\n                    }], {\n                    sticky: true,\n                    onCancel: function () {\n                        /* __GDPR__\n                            \"extensionRecommendations:popup\" : {\n                                \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                \"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                            }\n                        */\n                        _this.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'cancelled', extensionId: name });\n                    }\n                });\n            });\n            var mimeTypesPromise = _this.extensionService.whenInstalledExtensionsRegistered()\n                .then(function () {\n                return mime_1.guessMimeTypes(uri.fsPath);\n            });\n            Promise.all([importantTipsPromise, mimeTypesPromise]).then(function (result) {\n                var fileExtensionSuggestionIgnoreList = JSON.parse(_this.storageService.get('extensionsAssistant/fileExtensionsSuggestionIgnore', storage_1.StorageScope.GLOBAL, '[]'));\n                var mimeTypes = result[1];\n                if (fileExtension) {\n                    fileExtension = fileExtension.substr(1); // Strip the dot\n                }\n                if (hasSuggestion ||\n                    !fileExtension ||\n                    mimeTypes.length !== 1 ||\n                    mimeTypes[0] !== mime_1.MIME_UNKNOWN ||\n                    fileExtensionSuggestionIgnoreList.indexOf(fileExtension) > -1) {\n                    return;\n                }\n                var lookup = product_1.default.extensionKeywords || {};\n                var keywords = lookup[fileExtension] || [];\n                _this._galleryService.query({ text: \"tag:\\\"__ext_\" + fileExtension + \"\\\" \" + keywords.map(function (tag) { return \"tag:\\\"\" + tag + \"\\\"\"; }) }, cancellation_1.CancellationToken.None).then(function (pager) {\n                    if (!pager || !pager.firstPage || !pager.firstPage.length) {\n                        return;\n                    }\n                    _this.notificationService.prompt(severity_1.default.Info, nls_1.localize('showLanguageExtensions', \"The Marketplace has extensions that can help with '.{0}' files\", fileExtension), [{\n                            label: searchMarketplace,\n                            run: function () {\n                                /* __GDPR__\n                                    \"fileExtensionSuggestion:popup\" : {\n                                        \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                        \"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                                    }\n                                */\n                                _this.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'ok', fileExtension: fileExtension });\n                                _this.viewletService.openViewlet('workbench.view.extensions', true)\n                                    .then(function (viewlet) { return viewlet; })\n                                    .then(function (viewlet) {\n                                    viewlet.search(\"ext:\" + fileExtension);\n                                    viewlet.focus();\n                                });\n                            }\n                        }, {\n                            label: nls_1.localize('dontShowAgainExtension', \"Don't Show Again for '.{0}' files\", fileExtension),\n                            run: function () {\n                                fileExtensionSuggestionIgnoreList.push(fileExtension);\n                                _this.storageService.store('extensionsAssistant/fileExtensionsSuggestionIgnore', JSON.stringify(fileExtensionSuggestionIgnoreList), storage_1.StorageScope.GLOBAL);\n                                /* __GDPR__\n                                    \"fileExtensionSuggestion:popup\" : {\n                                        \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                        \"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                                    }\n                                */\n                                _this.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'neverShowAgain', fileExtension: fileExtension });\n                            }\n                        }], {\n                        sticky: true,\n                        onCancel: function () {\n                            /* __GDPR__\n                                \"fileExtensionSuggestion:popup\" : {\n                                    \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                    \"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                                }\n                            */\n                            _this.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'cancelled', fileExtension: fileExtension });\n                        }\n                    });\n                });\n            });\n        });\n    };\n    //#endregion\n    //#region otherRecommendations\n    ExtensionTipsService.prototype.getOtherRecommendations = function () {\n        var _this = this;\n        return this.fetchProactiveRecommendations().then(function () {\n            var others = arrays_1.distinct(Object.keys(_this._exeBasedRecommendations).concat(_this._dynamicWorkspaceRecommendations, Object.keys(_this._experimentalRecommendations))).filter(function (extensionId) { return _this.isExtensionAllowedToBeRecommended(extensionId); });\n            arrays_1.shuffle(others, _this.sessionSeed);\n            return others.map(function (extensionId) {\n                var sources = [];\n                if (_this._exeBasedRecommendations[extensionId]) {\n                    sources.push('executable');\n                }\n                if (_this._dynamicWorkspaceRecommendations.indexOf(extensionId) !== -1) {\n                    sources.push('dynamic');\n                }\n                return { extensionId: extensionId, sources: sources };\n            });\n        });\n    };\n    ExtensionTipsService.prototype.fetchProactiveRecommendations = function (calledDuringStartup) {\n        var _this = this;\n        var fetchPromise = Promise.resolve(undefined);\n        if (!this.proactiveRecommendationsFetched) {\n            this.proactiveRecommendationsFetched = true;\n            // Executable based recommendations carry out a lot of file stats, so run them after 10 secs\n            // So that the startup is not affected\n            fetchPromise = new Promise(function (c, e) {\n                setTimeout(function () {\n                    Promise.all([_this.fetchExecutableRecommendations(), _this.fetchDynamicWorkspaceRecommendations()]).then(function () { return c(undefined); });\n                }, calledDuringStartup ? 10000 : 0);\n            });\n        }\n        return fetchPromise;\n    };\n    /**\n     * If user has any of the tools listed in product.exeBasedExtensionTips, fetch corresponding recommendations\n     */\n    ExtensionTipsService.prototype.fetchExecutableRecommendations = function () {\n        var _this = this;\n        var homeDir = os.homedir();\n        var foundExecutables = new Set();\n        var findExecutable = function (exeName, path) {\n            return pfs.fileExists(path).then(function (exists) {\n                if (exists && !foundExecutables.has(exeName)) {\n                    foundExecutables.add(exeName);\n                    (product_1.default.exeBasedExtensionTips[exeName]['recommendations'] || [])\n                        .forEach(function (extensionId) {\n                        if (product_1.default.exeBasedExtensionTips[exeName]['friendlyName']) {\n                            _this._exeBasedRecommendations[extensionId.toLowerCase()] = product_1.default.exeBasedExtensionTips[exeName]['friendlyName'];\n                        }\n                    });\n                }\n            });\n        };\n        var promises = [];\n        // Loop through recommended extensions\n        collections_1.forEach(product_1.default.exeBasedExtensionTips, function (entry) {\n            if (typeof entry.value !== 'object' || !Array.isArray(entry.value['recommendations'])) {\n                return;\n            }\n            var exeName = entry.key;\n            if (process.platform === 'win32') {\n                var windowsPath = entry.value['windowsPath'];\n                if (!windowsPath || typeof windowsPath !== 'string') {\n                    return;\n                }\n                windowsPath = windowsPath.replace('%USERPROFILE%', process.env['USERPROFILE'])\n                    .replace('%ProgramFiles(x86)%', process.env['ProgramFiles(x86)'])\n                    .replace('%ProgramFiles%', process.env['ProgramFiles'])\n                    .replace('%APPDATA%', process.env['APPDATA']);\n                promises.push(findExecutable(exeName, windowsPath));\n            }\n            else {\n                promises.push(findExecutable(exeName, path_1.join('/usr/local/bin', exeName)));\n                promises.push(findExecutable(exeName, path_1.join(homeDir, exeName)));\n            }\n        });\n        return Promise.all(promises).then(function () { return undefined; });\n    };\n    /**\n     * Fetch extensions used by others on the same workspace as recommendations from cache\n     */\n    ExtensionTipsService.prototype.fetchCachedDynamicWorkspaceRecommendations = function () {\n        if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.FOLDER) {\n            return;\n        }\n        var storageKey = 'extensionsAssistant/dynamicWorkspaceRecommendations';\n        var storedRecommendationsJson = {};\n        try {\n            storedRecommendationsJson = JSON.parse(this.storageService.get(storageKey, storage_1.StorageScope.WORKSPACE, '{}'));\n        }\n        catch (e) {\n            this.storageService.remove(storageKey, storage_1.StorageScope.WORKSPACE);\n        }\n        if (Array.isArray(storedRecommendationsJson['recommendations'])\n            && types_1.isNumber(storedRecommendationsJson['timestamp'])\n            && storedRecommendationsJson['timestamp'] > 0\n            && (Date.now() - storedRecommendationsJson['timestamp']) / milliSecondsInADay < 14) {\n            this._dynamicWorkspaceRecommendations = storedRecommendationsJson['recommendations'];\n            /* __GDPR__\n                \"dynamicWorkspaceRecommendations\" : {\n                    \"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"cache\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            this.telemetryService.publicLog('dynamicWorkspaceRecommendations', { count: this._dynamicWorkspaceRecommendations.length, cache: 1 });\n        }\n    };\n    /**\n     * Fetch extensions used by others on the same workspace as recommendations from recommendation service\n     */\n    ExtensionTipsService.prototype.fetchDynamicWorkspaceRecommendations = function () {\n        var _this = this;\n        if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.FOLDER\n            || !this.fileService.canHandleResource(this.contextService.getWorkspace().folders[0].uri)\n            || this._dynamicWorkspaceRecommendations.length\n            || !this._extensionsRecommendationsUrl) {\n            return Promise.resolve(undefined);\n        }\n        var storageKey = 'extensionsAssistant/dynamicWorkspaceRecommendations';\n        var workspaceUri = this.contextService.getWorkspace().folders[0].uri;\n        return Promise.all([workspaceStats_1.getHashedRemotesFromUri(workspaceUri, this.fileService, false), workspaceStats_1.getHashedRemotesFromUri(workspaceUri, this.fileService, true)]).then(function (_a) {\n            var hashedRemotes1 = _a[0], hashedRemotes2 = _a[1];\n            var hashedRemotes = (hashedRemotes1 || []).concat(hashedRemotes2 || []);\n            if (!hashedRemotes.length) {\n                return undefined;\n            }\n            return _this.requestService.request({ type: 'GET', url: _this._extensionsRecommendationsUrl }, cancellation_1.CancellationToken.None).then(function (context) {\n                if (context.res.statusCode !== 200) {\n                    return Promise.resolve(undefined);\n                }\n                return request_2.asJson(context).then(function (result) {\n                    if (!result) {\n                        return;\n                    }\n                    var allRecommendations = Array.isArray(result['workspaceRecommendations']) ? result['workspaceRecommendations'] : [];\n                    if (!allRecommendations.length) {\n                        return;\n                    }\n                    var foundRemote = false;\n                    for (var i = 0; i < hashedRemotes.length && !foundRemote; i++) {\n                        for (var j = 0; j < allRecommendations.length && !foundRemote; j++) {\n                            if (Array.isArray(allRecommendations[j].remoteSet) && allRecommendations[j].remoteSet.indexOf(hashedRemotes[i]) > -1) {\n                                foundRemote = true;\n                                _this._dynamicWorkspaceRecommendations = allRecommendations[j].recommendations.filter(function (id) { return _this.isExtensionAllowedToBeRecommended(id); }) || [];\n                                _this.storageService.store(storageKey, JSON.stringify({\n                                    recommendations: _this._dynamicWorkspaceRecommendations,\n                                    timestamp: Date.now()\n                                }), storage_1.StorageScope.WORKSPACE);\n                                /* __GDPR__\n                                    \"dynamicWorkspaceRecommendations\" : {\n                                        \"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                        \"cache\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                                    }\n                                */\n                                _this.telemetryService.publicLog('dynamicWorkspaceRecommendations', { count: _this._dynamicWorkspaceRecommendations.length, cache: 0 });\n                            }\n                        }\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * Fetch extension recommendations from currently running experiments\n     */\n    ExtensionTipsService.prototype.fetchExperimentalRecommendations = function () {\n        var _this = this;\n        this.experimentService.getExperimentsByType(experimentService_1.ExperimentActionType.AddToRecommendations).then(function (experiments) {\n            (experiments || []).forEach(function (experiment) {\n                var action = experiment.action;\n                if (action && experiment.state === experimentService_1.ExperimentState.Run && action.properties && Array.isArray(action.properties.recommendations) && action.properties.recommendationReason) {\n                    action.properties.recommendations.forEach(function (id) {\n                        _this._experimentalRecommendations[id] = action.properties.recommendationReason;\n                    });\n                }\n            });\n        });\n    };\n    //#endregion\n    ExtensionTipsService.prototype.isExtensionAllowedToBeRecommended = function (id) {\n        return this._allIgnoredRecommendations.indexOf(id.toLowerCase()) === -1;\n    };\n    ExtensionTipsService.prototype.dispose = function () {\n        this._disposables = lifecycle_1.dispose(this._disposables);\n    };\n    ExtensionTipsService = tslib_1.__decorate([\n        tslib_1.__param(0, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, files_1.IFileService),\n        tslib_1.__param(6, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, telemetry_1.ITelemetryService),\n        tslib_1.__param(9, environment_1.IEnvironmentService),\n        tslib_1.__param(10, extensions_2.IExtensionService),\n        tslib_1.__param(11, request_1.IRequestService),\n        tslib_1.__param(12, viewlet_1.IViewletService),\n        tslib_1.__param(13, notification_1.INotificationService),\n        tslib_1.__param(14, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(15, extensions_1.IExtensionsWorkbenchService),\n        tslib_1.__param(16, experimentService_1.IExperimentService)\n    ], ExtensionTipsService);\n    return ExtensionTipsService;\n}(lifecycle_1.Disposable));\nexports.ExtensionTipsService = ExtensionTipsService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionTipsService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionTipsService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { join } from 'vs/base/common/path';\nimport { forEach } from 'vs/base/common/collections';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { match } from 'vs/base/common/glob';\nimport * as json from 'vs/base/common/json';\nimport {\n\tIExtensionManagementService, IExtensionGalleryService, IExtensionTipsService, ExtensionRecommendationReason, EXTENSION_IDENTIFIER_PATTERN,\n\tIExtensionsConfigContent, RecommendationChangeNotification, IExtensionRecommendation, ExtensionRecommendationSource, InstallOperation\n} from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport product from 'vs/platform/product/node/product';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ShowRecommendedExtensionsAction, InstallWorkspaceRecommendedExtensionsAction, InstallRecommendedExtensionAction } from 'vs/workbench/contrib/extensions/electron-browser/extensionsActions';\nimport Severity from 'vs/base/common/severity';\nimport { IWorkspaceContextService, IWorkspaceFolder, IWorkspace, IWorkspaceFoldersChangeEvent, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IExtensionsConfiguration, ConfigurationKey, ShowRecommendationsOnlyOnDemandKey, IExtensionsViewlet, IExtensionsWorkbenchService, EXTENSIONS_CONFIG } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as os from 'os';\nimport { flatten, distinct, shuffle, coalesce } from 'vs/base/common/arrays';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { guessMimeTypes, MIME_UNKNOWN } from 'vs/base/common/mime';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { getHashedRemotesFromUri } from 'vs/workbench/contrib/stats/node/workspaceStats';\nimport { IRequestService } from 'vs/platform/request/node/request';\nimport { asJson } from 'vs/base/node/request';\nimport { isNumber } from 'vs/base/common/types';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { assign } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExperimentService, ExperimentActionType, ExperimentState } from 'vs/workbench/contrib/experiments/node/experimentService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { extname } from 'vs/base/common/resources';\n\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\nconst choiceNever = localize('neverShowAgain', \"Don't Show Again\");\nconst searchMarketplace = localize('searchMarketplace', \"Search Marketplace\");\nconst processedFileExtensions: string[] = [];\n\ninterface IDynamicWorkspaceRecommendations {\n\tremoteSet: string[];\n\trecommendations: string[];\n}\n\nfunction caseInsensitiveGet<T>(obj: { [key: string]: T }, key: string): T | undefined {\n\tif (!obj) {\n\t\treturn undefined;\n\t}\n\tfor (const _key in obj) {\n\t\tif (Object.hasOwnProperty.call(obj, _key) && _key.toLowerCase() === key.toLowerCase()) {\n\t\t\treturn obj[_key];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport class ExtensionTipsService extends Disposable implements IExtensionTipsService {\n\n\t_serviceBrand: any;\n\n\tprivate _fileBasedRecommendations: { [id: string]: { recommendedTime: number, sources: ExtensionRecommendationSource[] }; } = Object.create(null);\n\tprivate _exeBasedRecommendations: { [id: string]: string; } = Object.create(null);\n\tprivate _availableRecommendations: { [pattern: string]: string[] } = Object.create(null);\n\tprivate _allWorkspaceRecommendedExtensions: IExtensionRecommendation[] = [];\n\tprivate _dynamicWorkspaceRecommendations: string[] = [];\n\tprivate _experimentalRecommendations: { [id: string]: string } = Object.create(null);\n\tprivate _allIgnoredRecommendations: string[] = [];\n\tprivate _globallyIgnoredRecommendations: string[] = [];\n\tprivate _workspaceIgnoredRecommendations: string[] = [];\n\tprivate _extensionsRecommendationsUrl: string;\n\tprivate _disposables: IDisposable[] = [];\n\tpublic loadWorkspaceConfigPromise: Promise<void>;\n\tprivate proactiveRecommendationsFetched: boolean = false;\n\n\tprivate readonly _onRecommendationChange = new Emitter<RecommendationChangeNotification>();\n\tonRecommendationChange: Event<RecommendationChangeNotification> = this._onRecommendationChange.event;\n\tprivate sessionSeed: number;\n\n\tconstructor(\n\t\t@IExtensionGalleryService private readonly _galleryService: IExtensionGalleryService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService private readonly extensionsService: IExtensionManagementService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionsWorkbenchService private readonly extensionWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IExperimentService private readonly experimentService: IExperimentService,\n\t) {\n\t\tsuper();\n\n\t\tif (!this.isEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (product.extensionsGallery && product.extensionsGallery.recommendationsUrl) {\n\t\t\tthis._extensionsRecommendationsUrl = product.extensionsGallery.recommendationsUrl;\n\t\t}\n\n\t\tthis.sessionSeed = +new Date();\n\n\t\tlet globallyIgnored = <string[]>JSON.parse(this.storageService.get('extensionsAssistant/ignored_recommendations', StorageScope.GLOBAL, '[]'));\n\t\tthis._globallyIgnoredRecommendations = globallyIgnored.map(id => id.toLowerCase());\n\n\t\tthis.fetchCachedDynamicWorkspaceRecommendations();\n\t\tthis.fetchFileBasedRecommendations();\n\t\tthis.fetchExperimentalRecommendations();\n\t\tif (!this.configurationService.getValue<boolean>(ShowRecommendationsOnlyOnDemandKey)) {\n\t\t\tthis.fetchProactiveRecommendations(true);\n\t\t}\n\n\t\tthis.loadWorkspaceConfigPromise = this.getWorkspaceRecommendations().then(() => {\n\t\t\tthis.promptWorkspaceRecommendations();\n\t\t\tthis._modelService.onModelAdded(this.promptFiletypeBasedRecommendations, this, this._disposables);\n\t\t\tthis._modelService.getModels().forEach(model => this.promptFiletypeBasedRecommendations(model));\n\t\t});\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onWorkspaceFoldersChanged(e)));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (!this.proactiveRecommendationsFetched && !this.configurationService.getValue<boolean>(ShowRecommendationsOnlyOnDemandKey)) {\n\t\t\t\tthis.fetchProactiveRecommendations();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.extensionManagementService.onDidInstallExtension(e => {\n\t\t\tif (e.gallery && e.operation === InstallOperation.Install) {\n\t\t\t\tconst extRecommendations = this.getAllRecommendationsWithReason() || {};\n\t\t\t\tconst recommendationReason = extRecommendations[e.gallery.identifier.id.toLowerCase()];\n\t\t\t\tif (recommendationReason) {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"extensionGallery:install:recommendations\" : {\n\t\t\t\t\t\t\t\"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tthis.telemetryService.publicLog('extensionGallery:install:recommendations', assign(e.gallery.telemetryData, { recommendationReason: recommendationReason.reasonId }));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate isEnabled(): boolean {\n\t\treturn this._galleryService.isEnabled() && !this.environmentService.extensionDevelopmentLocationURI;\n\t}\n\n\tgetAllRecommendationsWithReason(): { [id: string]: { reasonId: ExtensionRecommendationReason, reasonText: string }; } {\n\t\tlet output: { [id: string]: { reasonId: ExtensionRecommendationReason, reasonText: string }; } = Object.create(null);\n\n\t\tif (!this.proactiveRecommendationsFetched) {\n\t\t\treturn output;\n\t\t}\n\n\t\tforEach(this._experimentalRecommendations, entry => output[entry.key.toLowerCase()] = {\n\t\t\treasonId: ExtensionRecommendationReason.Experimental,\n\t\t\treasonText: entry.value\n\t\t});\n\n\t\tif (this.contextService.getWorkspace().folders && this.contextService.getWorkspace().folders.length === 1) {\n\t\t\tconst currentRepo = this.contextService.getWorkspace().folders[0].name;\n\n\t\t\tthis._dynamicWorkspaceRecommendations.forEach(id => output[id.toLowerCase()] = {\n\t\t\t\treasonId: ExtensionRecommendationReason.DynamicWorkspace,\n\t\t\t\treasonText: localize('dynamicWorkspaceRecommendation', \"This extension may interest you because it's popular among users of the {0} repository.\", currentRepo)\n\t\t\t});\n\t\t}\n\n\t\tforEach(this._exeBasedRecommendations, entry => output[entry.key.toLowerCase()] = {\n\t\t\treasonId: ExtensionRecommendationReason.Executable,\n\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because you have {0} installed.\", entry.value)\n\t\t});\n\n\t\tforEach(this._fileBasedRecommendations, entry => output[entry.key.toLowerCase()] = {\n\t\t\treasonId: ExtensionRecommendationReason.File,\n\t\t\treasonText: localize('fileBasedRecommendation', \"This extension is recommended based on the files you recently opened.\")\n\t\t});\n\n\t\tthis._allWorkspaceRecommendedExtensions.forEach(({ extensionId }) => output[extensionId.toLowerCase()] = {\n\t\t\treasonId: ExtensionRecommendationReason.Workspace,\n\t\t\treasonText: localize('workspaceRecommendation', \"This extension is recommended by users of the current workspace.\")\n\t\t});\n\n\t\tfor (const id of this._allIgnoredRecommendations) {\n\t\t\tdelete output[id];\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tgetAllIgnoredRecommendations(): { global: string[], workspace: string[] } {\n\t\treturn {\n\t\t\tglobal: this._globallyIgnoredRecommendations,\n\t\t\tworkspace: this._workspaceIgnoredRecommendations\n\t\t};\n\t}\n\n\ttoggleIgnoredRecommendation(extensionId: string, shouldIgnore: boolean) {\n\t\tconst lowerId = extensionId.toLowerCase();\n\t\tif (shouldIgnore) {\n\t\t\tconst reason = this.getAllRecommendationsWithReason()[lowerId];\n\t\t\tif (reason && reason.reasonId) {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"extensionsRecommendations:ignoreRecommendation\" : {\n\t\t\t\t\t\t\"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('extensionsRecommendations:ignoreRecommendation', { id: extensionId, recommendationReason: reason.reasonId });\n\t\t\t}\n\t\t}\n\n\t\tthis._globallyIgnoredRecommendations = shouldIgnore ?\n\t\t\tdistinct([...this._globallyIgnoredRecommendations, lowerId].map(id => id.toLowerCase())) :\n\t\t\tthis._globallyIgnoredRecommendations.filter(id => id !== lowerId);\n\n\t\tthis.storageService.store('extensionsAssistant/ignored_recommendations', JSON.stringify(this._globallyIgnoredRecommendations), StorageScope.GLOBAL);\n\t\tthis._allIgnoredRecommendations = distinct([...this._globallyIgnoredRecommendations, ...this._workspaceIgnoredRecommendations]);\n\n\t\tthis._onRecommendationChange.fire({ extensionId: extensionId, isRecommended: !shouldIgnore });\n\t}\n\n\tgetKeymapRecommendations(): IExtensionRecommendation[] {\n\t\treturn (product.keymapExtensionTips || [])\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId))\n\t\t\t.map(extensionId => (<IExtensionRecommendation>{ extensionId, sources: ['application'] }));\n\t}\n\n\t//#region workspaceRecommendations\n\n\tgetWorkspaceRecommendations(): Promise<IExtensionRecommendation[]> {\n\t\tif (!this.isEnabled()) { return Promise.resolve([]); }\n\t\treturn this.fetchWorkspaceRecommendations()\n\t\t\t.then(() => this._allWorkspaceRecommendedExtensions.filter(rec => this.isExtensionAllowedToBeRecommended(rec.extensionId)));\n\t}\n\n\t/**\n\t * Parse all extensions.json files, fetch workspace recommendations, filter out invalid and unwanted ones\n\t */\n\tprivate fetchWorkspaceRecommendations(): Promise<void> {\n\n\t\tif (!this.isEnabled) { return Promise.resolve(undefined); }\n\n\t\treturn this.fetchExtensionRecommendationContents()\n\t\t\t.then(result => this.validateExtensions(result.map(({ contents }) => contents))\n\t\t\t\t.then(({ invalidExtensions, message }) => {\n\n\t\t\t\t\tif (invalidExtensions.length > 0 && this.notificationService) {\n\t\t\t\t\t\tthis.notificationService.warn(`The below ${invalidExtensions.length} extension(s) in workspace recommendations have issues:\\n${message}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst seenUnWantedRecommendations: { [id: string]: boolean } = {};\n\n\t\t\t\t\tthis._allWorkspaceRecommendedExtensions = [];\n\t\t\t\t\tthis._workspaceIgnoredRecommendations = [];\n\n\t\t\t\t\tfor (const contentsBySource of result) {\n\t\t\t\t\t\tif (contentsBySource.contents.unwantedRecommendations) {\n\t\t\t\t\t\t\tfor (const r of contentsBySource.contents.unwantedRecommendations) {\n\t\t\t\t\t\t\t\tconst unwantedRecommendation = r.toLowerCase();\n\t\t\t\t\t\t\t\tif (!seenUnWantedRecommendations[unwantedRecommendation] && invalidExtensions.indexOf(unwantedRecommendation) === -1) {\n\t\t\t\t\t\t\t\t\tthis._workspaceIgnoredRecommendations.push(unwantedRecommendation);\n\t\t\t\t\t\t\t\t\tseenUnWantedRecommendations[unwantedRecommendation] = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (contentsBySource.contents.recommendations) {\n\t\t\t\t\t\t\tfor (const r of contentsBySource.contents.recommendations) {\n\t\t\t\t\t\t\t\tconst extensionId = r.toLowerCase();\n\t\t\t\t\t\t\t\tif (invalidExtensions.indexOf(extensionId) === -1) {\n\t\t\t\t\t\t\t\t\tlet recommendation = this._allWorkspaceRecommendedExtensions.filter(r => r.extensionId === extensionId)[0];\n\t\t\t\t\t\t\t\t\tif (!recommendation) {\n\t\t\t\t\t\t\t\t\t\trecommendation = { extensionId, sources: [] };\n\t\t\t\t\t\t\t\t\t\tthis._allWorkspaceRecommendedExtensions.push(recommendation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (recommendation.sources.indexOf(contentsBySource.source) === -1) {\n\t\t\t\t\t\t\t\t\t\trecommendation.sources.push(contentsBySource.source);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._allIgnoredRecommendations = distinct([...this._globallyIgnoredRecommendations, ...this._workspaceIgnoredRecommendations]);\n\t\t\t\t}));\n\t}\n\n\t/**\n\t * Parse all extensions.json files, fetch workspace recommendations\n\t */\n\tprivate fetchExtensionRecommendationContents(): Promise<{ contents: IExtensionsConfigContent, source: ExtensionRecommendationSource }[]> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn Promise.all<{ contents: IExtensionsConfigContent, source: ExtensionRecommendationSource } | null>([\n\t\t\tthis.resolveWorkspaceExtensionConfig(workspace).then(contents => contents ? { contents, source: workspace } : null),\n\t\t\t...workspace.folders.map(workspaceFolder => this.resolveWorkspaceFolderExtensionConfig(workspaceFolder).then(contents => contents ? { contents, source: workspaceFolder } : null))\n\t\t]).then(contents => coalesce(contents));\n\t}\n\n\t/**\n\t * Parse the extensions.json file for given workspace and return the recommendations\n\t */\n\tprivate resolveWorkspaceExtensionConfig(workspace: IWorkspace): Promise<IExtensionsConfigContent | null> {\n\t\tif (!workspace.configuration) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn Promise.resolve(this.fileService.resolveContent(workspace.configuration)\n\t\t\t.then(content => <IExtensionsConfigContent>(json.parse(content.value)['extensions']), err => null));\n\t}\n\n\t/**\n\t * Parse the extensions.json files for given workspace folder and return the recommendations\n\t */\n\tprivate resolveWorkspaceFolderExtensionConfig(workspaceFolder: IWorkspaceFolder): Promise<IExtensionsConfigContent | null> {\n\t\tconst extensionsJsonUri = workspaceFolder.toResource(EXTENSIONS_CONFIG);\n\n\t\treturn Promise.resolve(this.fileService.resolveFile(extensionsJsonUri)\n\t\t\t.then(() => this.fileService.resolveContent(extensionsJsonUri))\n\t\t\t.then(content => <IExtensionsConfigContent>json.parse(content.value), err => null));\n\t}\n\n\t/**\n\t * Validate the extensions.json file contents using regex and querying the gallery\n\t */\n\tprivate async validateExtensions(contents: IExtensionsConfigContent[]): Promise<{ invalidExtensions: string[], message: string }> {\n\t\tconst extensionsContent: IExtensionsConfigContent = {\n\t\t\trecommendations: distinct(flatten(contents.map(content => content.recommendations || []))),\n\t\t\tunwantedRecommendations: distinct(flatten(contents.map(content => content.unwantedRecommendations || [])))\n\t\t};\n\n\t\tconst regEx = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\n\n\t\tconst invalidExtensions: string[] = [];\n\t\tlet message = '';\n\n\t\tconst regexFilter = (ids: string[]) => {\n\t\t\treturn ids.filter((element, position) => {\n\t\t\t\tif (ids.indexOf(element) !== position) {\n\t\t\t\t\t// This is a duplicate entry, it doesn't hurt anybody\n\t\t\t\t\t// but it shouldn't be sent in the gallery query\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (!regEx.test(element)) {\n\t\t\t\t\tinvalidExtensions.push(element.toLowerCase());\n\t\t\t\t\tmessage += `${element} (bad format) Expected: <provider>.<name>\\n`;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t};\n\n\t\tconst filteredWanted = regexFilter(extensionsContent.recommendations || []).map(x => x.toLowerCase());\n\n\t\tif (filteredWanted.length) {\n\t\t\ttry {\n\t\t\t\tlet validRecommendations = (await this._galleryService.query({ names: filteredWanted, pageSize: filteredWanted.length }, CancellationToken.None)).firstPage\n\t\t\t\t\t.map(extension => extension.identifier.id.toLowerCase());\n\n\t\t\t\tif (validRecommendations.length !== filteredWanted.length) {\n\t\t\t\t\tfilteredWanted.forEach(element => {\n\t\t\t\t\t\tif (validRecommendations.indexOf(element.toLowerCase()) === -1) {\n\t\t\t\t\t\t\tinvalidExtensions.push(element.toLowerCase());\n\t\t\t\t\t\t\tmessage += `${element} (not found in marketplace)\\n`;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn('Error querying extensions gallery', e);\n\t\t\t}\n\t\t}\n\t\treturn { invalidExtensions, message };\n\t}\n\n\tprivate onWorkspaceFoldersChanged(event: IWorkspaceFoldersChangeEvent): void {\n\t\tif (event.added.length) {\n\t\t\tconst oldWorkspaceRecommended = this._allWorkspaceRecommendedExtensions;\n\t\t\tthis.getWorkspaceRecommendations()\n\t\t\t\t.then(currentWorkspaceRecommended => {\n\t\t\t\t\t// Suggest only if at least one of the newly added recommendations was not suggested before\n\t\t\t\t\tif (currentWorkspaceRecommended.some(current => oldWorkspaceRecommended.every(old => current.extensionId !== old.extensionId))) {\n\t\t\t\t\t\tthis.promptWorkspaceRecommendations();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\tthis._dynamicWorkspaceRecommendations = [];\n\t}\n\n\t/**\n\t * Prompt the user to install workspace recommendations if there are any not already installed\n\t */\n\tprivate promptWorkspaceRecommendations(): void {\n\t\tconst storageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\n\t\tconst config = this.configurationService.getValue<IExtensionsConfiguration>(ConfigurationKey);\n\t\tconst filteredRecs = this._allWorkspaceRecommendedExtensions.filter(rec => this.isExtensionAllowedToBeRecommended(rec.extensionId));\n\n\t\tif (filteredRecs.length === 0\n\t\t\t|| config.ignoreRecommendations\n\t\t\t|| config.showRecommendationsOnlyOnDemand\n\t\t\t|| this.storageService.getBoolean(storageKey, StorageScope.WORKSPACE, false)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.extensionsService.getInstalled(ExtensionType.User).then(local => {\n\t\t\tconst recommendations = filteredRecs.filter(({ extensionId }) => local.every(local => !areSameExtensions({ id: extensionId }, local.identifier)));\n\n\t\t\tif (!recommendations.length) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\treturn new Promise<void>(c => {\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tlocalize('workspaceRecommended', \"This workspace has extension recommendations.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('installAll', \"Install All\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\"extensionWorkspaceRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'install' });\n\n\t\t\t\t\t\t\tconst installAllAction = this.instantiationService.createInstance(InstallWorkspaceRecommendedExtensionsAction, InstallWorkspaceRecommendedExtensionsAction.ID, localize('installAll', \"Install All\"), recommendations);\n\t\t\t\t\t\t\tinstallAllAction.run();\n\t\t\t\t\t\t\tinstallAllAction.dispose();\n\n\t\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('showRecommendations', \"Show Recommendations\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionWorkspaceRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'show' });\n\n\t\t\t\t\t\t\tconst showAction = this.instantiationService.createInstance(ShowRecommendedExtensionsAction, ShowRecommendedExtensionsAction.ID, localize('showRecommendations', \"Show Recommendations\"));\n\t\t\t\t\t\t\tshowAction.run();\n\t\t\t\t\t\t\tshowAction.dispose();\n\n\t\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: choiceNever,\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionWorkspaceRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'neverShowAgain' });\n\t\t\t\t\t\t\tthis.storageService.store(storageKey, true, StorageScope.WORKSPACE);\n\n\t\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionWorkspaceRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionWorkspaceRecommendations:popup', { userReaction: 'cancelled' });\n\n\t\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region fileBasedRecommendations\n\n\tgetFileBasedRecommendations(): IExtensionRecommendation[] {\n\t\treturn Object.keys(this._fileBasedRecommendations)\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (this._fileBasedRecommendations[a].recommendedTime === this._fileBasedRecommendations[b].recommendedTime) {\n\t\t\t\t\tif (!product.extensionImportantTips || caseInsensitiveGet(product.extensionImportantTips, a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (caseInsensitiveGet(product.extensionImportantTips, b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this._fileBasedRecommendations[a].recommendedTime > this._fileBasedRecommendations[b].recommendedTime ? -1 : 1;\n\t\t\t})\n\t\t\t.filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId))\n\t\t\t.map(extensionId => (<IExtensionRecommendation>{ extensionId, sources: this._fileBasedRecommendations[extensionId].sources }));\n\t}\n\n\t/**\n\t * Parse all file based recommendations from product.extensionTips\n\t * Retire existing recommendations if they are older than a week or are not part of product.extensionTips anymore\n\t */\n\tprivate fetchFileBasedRecommendations() {\n\t\tconst extensionTips = product.extensionTips;\n\t\tif (!extensionTips) {\n\t\t\treturn;\n\t\t}\n\n\t\t// group ids by pattern, like {**/*.md} -> [ext.foo1, ext.bar2]\n\t\tthis._availableRecommendations = Object.create(null);\n\t\tforEach(extensionTips, entry => {\n\t\t\tlet { key: id, value: pattern } = entry;\n\t\t\tlet ids = this._availableRecommendations[pattern];\n\t\t\tif (!ids) {\n\t\t\t\tthis._availableRecommendations[pattern] = [id.toLowerCase()];\n\t\t\t} else {\n\t\t\t\tids.push(id.toLowerCase());\n\t\t\t}\n\t\t});\n\n\t\tforEach(product.extensionImportantTips, entry => {\n\t\t\tlet { key: id, value } = entry;\n\t\t\tconst { pattern } = value;\n\t\t\tlet ids = this._availableRecommendations[pattern];\n\t\t\tif (!ids) {\n\t\t\t\tthis._availableRecommendations[pattern] = [id.toLowerCase()];\n\t\t\t} else {\n\t\t\t\tids.push(id.toLowerCase());\n\t\t\t}\n\t\t});\n\n\t\tconst allRecommendations: string[] = flatten((Object.keys(this._availableRecommendations).map(key => this._availableRecommendations[key])));\n\n\t\t// retrieve ids of previous recommendations\n\t\tconst storedRecommendationsJson = JSON.parse(this.storageService.get('extensionsAssistant/recommendations', StorageScope.GLOBAL, '[]'));\n\n\t\tif (Array.isArray<string>(storedRecommendationsJson)) {\n\t\t\tfor (let id of <string[]>storedRecommendationsJson) {\n\t\t\t\tif (allRecommendations.indexOf(id) > -1) {\n\t\t\t\t\tthis._fileBasedRecommendations[id.toLowerCase()] = { recommendedTime: Date.now(), sources: ['cached'] };\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst now = Date.now();\n\t\t\tforEach(storedRecommendationsJson, entry => {\n\t\t\t\tif (typeof entry.value === 'number') {\n\t\t\t\t\tconst diff = (now - entry.value) / milliSecondsInADay;\n\t\t\t\t\tif (diff <= 7 && allRecommendations.indexOf(entry.key) > -1) {\n\t\t\t\t\t\tthis._fileBasedRecommendations[entry.key.toLowerCase()] = { recommendedTime: entry.value, sources: ['cached'] };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Prompt the user to either install the recommended extension for the file type in the current editor model\n\t * or prompt to search the marketplace if it has extensions that can support the file type\n\t */\n\tprivate promptFiletypeBasedRecommendations(model: ITextModel): void {\n\t\tlet hasSuggestion = false;\n\n\t\tconst uri = model.uri;\n\t\tif (!uri || !this.fileService.canHandleResource(uri)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fileExtension = extname(uri);\n\t\tif (fileExtension) {\n\t\t\tif (processedFileExtensions.indexOf(fileExtension) > -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprocessedFileExtensions.push(fileExtension);\n\t\t}\n\n\t\t// re-schedule this bit of the operation to be off\n\t\t// the critical path - in case glob-match is slow\n\t\tsetImmediate(() => {\n\n\t\t\tlet recommendationsToSuggest: string[] = [];\n\t\t\tconst now = Date.now();\n\t\t\tforEach(this._availableRecommendations, entry => {\n\t\t\t\tlet { key: pattern, value: ids } = entry;\n\t\t\t\tif (match(pattern, uri.path)) {\n\t\t\t\t\tfor (let id of ids) {\n\t\t\t\t\t\tif (caseInsensitiveGet(product.extensionImportantTips, id)) {\n\t\t\t\t\t\t\trecommendationsToSuggest.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst filedBasedRecommendation = this._fileBasedRecommendations[id.toLowerCase()] || { recommendedTime: now, sources: [] };\n\t\t\t\t\t\tfiledBasedRecommendation.recommendedTime = now;\n\t\t\t\t\t\tif (!filedBasedRecommendation.sources.some(s => s instanceof URI && s.toString() === uri.toString())) {\n\t\t\t\t\t\t\tfiledBasedRecommendation.sources.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._fileBasedRecommendations[id.toLowerCase()] = filedBasedRecommendation;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.storageService.store(\n\t\t\t\t'extensionsAssistant/recommendations',\n\t\t\t\tJSON.stringify(Object.keys(this._fileBasedRecommendations).reduce((result, key) => { result[key] = this._fileBasedRecommendations[key].recommendedTime; return result; }, {})),\n\t\t\t\tStorageScope.GLOBAL\n\t\t\t);\n\n\t\t\tconst config = this.configurationService.getValue<IExtensionsConfiguration>(ConfigurationKey);\n\t\t\tif (config.ignoreRecommendations || config.showRecommendationsOnlyOnDemand) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst importantRecommendationsIgnoreList = <string[]>JSON.parse(this.storageService.get('extensionsAssistant/importantRecommendationsIgnore', StorageScope.GLOBAL, '[]'));\n\t\t\trecommendationsToSuggest = recommendationsToSuggest.filter(id => importantRecommendationsIgnoreList.indexOf(id) === -1 && this.isExtensionAllowedToBeRecommended(id));\n\n\t\t\tconst importantTipsPromise = recommendationsToSuggest.length === 0 ? Promise.resolve(null) : this.extensionWorkbenchService.queryLocal().then(local => {\n\t\t\t\tconst localExtensions = local.map(e => e.identifier);\n\t\t\t\trecommendationsToSuggest = recommendationsToSuggest.filter(id => localExtensions.every(local => !areSameExtensions(local, { id })));\n\t\t\t\tif (!recommendationsToSuggest.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst id = recommendationsToSuggest[0];\n\t\t\t\tconst entry = caseInsensitiveGet(product.extensionImportantTips, id);\n\t\t\t\tif (!entry) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst name = entry['name'];\n\n\t\t\t\t// Indicates we have a suggested extension via the whitelist\n\t\t\t\thasSuggestion = true;\n\n\t\t\t\tlet message = localize('reallyRecommended2', \"The '{0}' extension is recommended for this file type.\", name);\n\t\t\t\t// Temporary fix for the only extension pack we recommend. See https://github.com/Microsoft/vscode/issues/35364\n\t\t\t\tif (id === 'vscjava.vscode-java-pack') {\n\t\t\t\t\tmessage = localize('reallyRecommendedExtensionPack', \"The '{0}' extension pack is recommended for this file type.\", name);\n\t\t\t\t}\n\n\t\t\t\tconst setIgnoreRecommendationsConfig = (configVal: boolean) => {\n\t\t\t\t\tthis.configurationService.updateValue('extensions.ignoreRecommendations', configVal, ConfigurationTarget.USER);\n\t\t\t\t\tif (configVal) {\n\t\t\t\t\t\tconst ignoreWorkspaceRecommendationsStorageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\n\t\t\t\t\t\tthis.storageService.store(ignoreWorkspaceRecommendationsStorageKey, true, StorageScope.WORKSPACE);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.notificationService.prompt(Severity.Info, message,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('install', 'Install'),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\"extensionRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'install', extensionId: name });\n\t\t\t\t\t\t\tthis.instantiationService.createInstance(InstallRecommendedExtensionAction, id).run();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('showRecommendations', \"Show Recommendations\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'show', extensionId: name });\n\n\t\t\t\t\t\t\tconst recommendationsAction = this.instantiationService.createInstance(ShowRecommendedExtensionsAction, ShowRecommendedExtensionsAction.ID, localize('showRecommendations', \"Show Recommendations\"));\n\t\t\t\t\t\t\trecommendationsAction.run();\n\t\t\t\t\t\t\trecommendationsAction.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: choiceNever,\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\timportantRecommendationsIgnoreList.push(id);\n\t\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\t\t'extensionsAssistant/importantRecommendationsIgnore',\n\t\t\t\t\t\t\t\tJSON.stringify(importantRecommendationsIgnoreList),\n\t\t\t\t\t\t\t\tStorageScope.GLOBAL\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'neverShowAgain', extensionId: name });\n\t\t\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\t\t\tlocalize('ignoreExtensionRecommendations', \"Do you want to ignore all extension recommendations?\"),\n\t\t\t\t\t\t\t\t[{\n\t\t\t\t\t\t\t\t\tlabel: localize('ignoreAll', \"Yes, Ignore All\"),\n\t\t\t\t\t\t\t\t\trun: () => setIgnoreRecommendationsConfig(true)\n\t\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\t\t\t\t\t\trun: () => setIgnoreRecommendationsConfig(false)\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\"extensionRecommendations:popup\" : {\n\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tthis.telemetryService.publicLog('extensionRecommendations:popup', { userReaction: 'cancelled', extensionId: name });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tconst mimeTypesPromise = this.extensionService.whenInstalledExtensionsRegistered()\n\t\t\t\t.then(() => {\n\t\t\t\t\treturn guessMimeTypes(uri.fsPath);\n\t\t\t\t});\n\n\t\t\tPromise.all([importantTipsPromise, mimeTypesPromise]).then(result => {\n\n\t\t\t\tconst fileExtensionSuggestionIgnoreList = <string[]>JSON.parse(this.storageService.get\n\t\t\t\t\t('extensionsAssistant/fileExtensionsSuggestionIgnore', StorageScope.GLOBAL, '[]'));\n\t\t\t\tconst mimeTypes = result[1];\n\n\t\t\t\tif (fileExtension) {\n\t\t\t\t\tfileExtension = fileExtension.substr(1); // Strip the dot\n\t\t\t\t}\n\n\t\t\t\tif (hasSuggestion ||\n\t\t\t\t\t!fileExtension ||\n\t\t\t\t\tmimeTypes.length !== 1 ||\n\t\t\t\t\tmimeTypes[0] !== MIME_UNKNOWN ||\n\t\t\t\t\tfileExtensionSuggestionIgnoreList.indexOf(fileExtension) > -1\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst lookup = product.extensionKeywords || {};\n\t\t\t\tconst keywords = lookup[fileExtension] || [];\n\t\t\t\tthis._galleryService.query({ text: `tag:\"__ext_${fileExtension}\" ${keywords.map(tag => `tag:\"${tag}\"`)}` }, CancellationToken.None).then(pager => {\n\t\t\t\t\tif (!pager || !pager.firstPage || !pager.firstPage.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tlocalize('showLanguageExtensions', \"The Marketplace has extensions that can help with '.{0}' files\", fileExtension),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: searchMarketplace,\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\t\"fileExtensionSuggestion:popup\" : {\n\t\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\t\"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tthis.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'ok', fileExtension: fileExtension });\n\t\t\t\t\t\t\t\tthis.viewletService.openViewlet('workbench.view.extensions', true)\n\t\t\t\t\t\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\t\t\t\t\tviewlet.search(`ext:${fileExtension}`);\n\t\t\t\t\t\t\t\t\t\tviewlet.focus();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tlabel: localize('dontShowAgainExtension', \"Don't Show Again for '.{0}' files\", fileExtension),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tfileExtensionSuggestionIgnoreList.push(fileExtension);\n\t\t\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\t\t\t'extensionsAssistant/fileExtensionsSuggestionIgnore',\n\t\t\t\t\t\t\t\t\tJSON.stringify(fileExtensionSuggestionIgnoreList),\n\t\t\t\t\t\t\t\t\tStorageScope.GLOBAL\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\t\"fileExtensionSuggestion:popup\" : {\n\t\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\t\"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tthis.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'neverShowAgain', fileExtension: fileExtension });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\t\"fileExtensionSuggestion:popup\" : {\n\t\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\t\"fileExtension\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tthis.telemetryService.publicLog('fileExtensionSuggestion:popup', { userReaction: 'cancelled', fileExtension: fileExtension });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region otherRecommendations\n\n\tgetOtherRecommendations(): Promise<IExtensionRecommendation[]> {\n\t\treturn this.fetchProactiveRecommendations().then(() => {\n\t\t\tconst others = distinct([\n\t\t\t\t...Object.keys(this._exeBasedRecommendations),\n\t\t\t\t...this._dynamicWorkspaceRecommendations,\n\t\t\t\t...Object.keys(this._experimentalRecommendations),\n\t\t\t]).filter(extensionId => this.isExtensionAllowedToBeRecommended(extensionId));\n\t\t\tshuffle(others, this.sessionSeed);\n\t\t\treturn others.map(extensionId => {\n\t\t\t\tconst sources: ExtensionRecommendationSource[] = [];\n\t\t\t\tif (this._exeBasedRecommendations[extensionId]) {\n\t\t\t\t\tsources.push('executable');\n\t\t\t\t}\n\t\t\t\tif (this._dynamicWorkspaceRecommendations.indexOf(extensionId) !== -1) {\n\t\t\t\t\tsources.push('dynamic');\n\t\t\t\t}\n\t\t\t\treturn (<IExtensionRecommendation>{ extensionId, sources });\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate fetchProactiveRecommendations(calledDuringStartup?: boolean): Promise<void> {\n\t\tlet fetchPromise = Promise.resolve(undefined);\n\t\tif (!this.proactiveRecommendationsFetched) {\n\t\t\tthis.proactiveRecommendationsFetched = true;\n\n\t\t\t// Executable based recommendations carry out a lot of file stats, so run them after 10 secs\n\t\t\t// So that the startup is not affected\n\n\t\t\tfetchPromise = new Promise((c, e) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tPromise.all([this.fetchExecutableRecommendations(), this.fetchDynamicWorkspaceRecommendations()]).then(() => c(undefined));\n\t\t\t\t}, calledDuringStartup ? 10000 : 0);\n\t\t\t});\n\n\t\t}\n\t\treturn fetchPromise;\n\t}\n\n\t/**\n\t * If user has any of the tools listed in product.exeBasedExtensionTips, fetch corresponding recommendations\n\t */\n\tprivate fetchExecutableRecommendations(): Promise<void> {\n\t\tconst homeDir = os.homedir();\n\t\tlet foundExecutables: Set<string> = new Set<string>();\n\n\t\tlet findExecutable = (exeName: string, path: string) => {\n\t\t\treturn pfs.fileExists(path).then(exists => {\n\t\t\t\tif (exists && !foundExecutables.has(exeName)) {\n\t\t\t\t\tfoundExecutables.add(exeName);\n\t\t\t\t\t(product.exeBasedExtensionTips[exeName]['recommendations'] || [])\n\t\t\t\t\t\t.forEach(extensionId => {\n\t\t\t\t\t\t\tif (product.exeBasedExtensionTips[exeName]['friendlyName']) {\n\t\t\t\t\t\t\t\tthis._exeBasedRecommendations[extensionId.toLowerCase()] = product.exeBasedExtensionTips[exeName]['friendlyName'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tlet promises: Promise<void>[] = [];\n\t\t// Loop through recommended extensions\n\t\tforEach(product.exeBasedExtensionTips, entry => {\n\t\t\tif (typeof entry.value !== 'object' || !Array.isArray(entry.value['recommendations'])) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet exeName = entry.key;\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tlet windowsPath = entry.value['windowsPath'];\n\t\t\t\tif (!windowsPath || typeof windowsPath !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twindowsPath = windowsPath.replace('%USERPROFILE%', process.env['USERPROFILE']!)\n\t\t\t\t\t.replace('%ProgramFiles(x86)%', process.env['ProgramFiles(x86)']!)\n\t\t\t\t\t.replace('%ProgramFiles%', process.env['ProgramFiles']!)\n\t\t\t\t\t.replace('%APPDATA%', process.env['APPDATA']!);\n\t\t\t\tpromises.push(findExecutable(exeName, windowsPath));\n\t\t\t} else {\n\t\t\t\tpromises.push(findExecutable(exeName, join('/usr/local/bin', exeName)));\n\t\t\t\tpromises.push(findExecutable(exeName, join(homeDir, exeName)));\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.all(promises).then(() => undefined);\n\t}\n\n\t/**\n\t * Fetch extensions used by others on the same workspace as recommendations from cache\n\t */\n\tprivate fetchCachedDynamicWorkspaceRecommendations() {\n\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.FOLDER) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst storageKey = 'extensionsAssistant/dynamicWorkspaceRecommendations';\n\t\tlet storedRecommendationsJson = {};\n\t\ttry {\n\t\t\tstoredRecommendationsJson = JSON.parse(this.storageService.get(storageKey, StorageScope.WORKSPACE, '{}'));\n\t\t} catch (e) {\n\t\t\tthis.storageService.remove(storageKey, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tif (Array.isArray(storedRecommendationsJson['recommendations'])\n\t\t\t&& isNumber(storedRecommendationsJson['timestamp'])\n\t\t\t&& storedRecommendationsJson['timestamp'] > 0\n\t\t\t&& (Date.now() - storedRecommendationsJson['timestamp']) / milliSecondsInADay < 14) {\n\t\t\tthis._dynamicWorkspaceRecommendations = storedRecommendationsJson['recommendations'];\n\t\t\t/* __GDPR__\n\t\t\t\t\"dynamicWorkspaceRecommendations\" : {\n\t\t\t\t\t\"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\"cache\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('dynamicWorkspaceRecommendations', { count: this._dynamicWorkspaceRecommendations.length, cache: 1 });\n\t\t}\n\t}\n\n\t/**\n\t * Fetch extensions used by others on the same workspace as recommendations from recommendation service\n\t */\n\tprivate fetchDynamicWorkspaceRecommendations(): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.FOLDER\n\t\t\t|| !this.fileService.canHandleResource(this.contextService.getWorkspace().folders[0].uri)\n\t\t\t|| this._dynamicWorkspaceRecommendations.length\n\t\t\t|| !this._extensionsRecommendationsUrl) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst storageKey = 'extensionsAssistant/dynamicWorkspaceRecommendations';\n\t\tconst workspaceUri = this.contextService.getWorkspace().folders[0].uri;\n\t\treturn Promise.all([getHashedRemotesFromUri(workspaceUri, this.fileService, false), getHashedRemotesFromUri(workspaceUri, this.fileService, true)]).then(([hashedRemotes1, hashedRemotes2]) => {\n\t\t\tconst hashedRemotes = (hashedRemotes1 || []).concat(hashedRemotes2 || []);\n\t\t\tif (!hashedRemotes.length) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn this.requestService.request({ type: 'GET', url: this._extensionsRecommendationsUrl }, CancellationToken.None).then(context => {\n\t\t\t\tif (context.res.statusCode !== 200) {\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t\treturn asJson(context).then((result) => {\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst allRecommendations: IDynamicWorkspaceRecommendations[] = Array.isArray(result['workspaceRecommendations']) ? result['workspaceRecommendations'] : [];\n\t\t\t\t\tif (!allRecommendations.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet foundRemote = false;\n\t\t\t\t\tfor (let i = 0; i < hashedRemotes.length && !foundRemote; i++) {\n\t\t\t\t\t\tfor (let j = 0; j < allRecommendations.length && !foundRemote; j++) {\n\t\t\t\t\t\t\tif (Array.isArray(allRecommendations[j].remoteSet) && allRecommendations[j].remoteSet.indexOf(hashedRemotes[i]) > -1) {\n\t\t\t\t\t\t\t\tfoundRemote = true;\n\t\t\t\t\t\t\t\tthis._dynamicWorkspaceRecommendations = allRecommendations[j].recommendations.filter(id => this.isExtensionAllowedToBeRecommended(id)) || [];\n\t\t\t\t\t\t\t\tthis.storageService.store(storageKey, JSON.stringify({\n\t\t\t\t\t\t\t\t\trecommendations: this._dynamicWorkspaceRecommendations,\n\t\t\t\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t\t\t\t}), StorageScope.WORKSPACE);\n\t\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\t\"dynamicWorkspaceRecommendations\" : {\n\t\t\t\t\t\t\t\t\t\t\"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\t\"cache\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tthis.telemetryService.publicLog('dynamicWorkspaceRecommendations', { count: this._dynamicWorkspaceRecommendations.length, cache: 0 });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Fetch extension recommendations from currently running experiments\n\t */\n\tprivate fetchExperimentalRecommendations() {\n\t\tthis.experimentService.getExperimentsByType(ExperimentActionType.AddToRecommendations).then(experiments => {\n\t\t\t(experiments || []).forEach(experiment => {\n\t\t\t\tconst action = experiment.action;\n\t\t\t\tif (action && experiment.state === ExperimentState.Run && action.properties && Array.isArray(action.properties.recommendations) && action.properties.recommendationReason) {\n\t\t\t\t\taction.properties.recommendations.forEach((id: string) => {\n\t\t\t\t\t\tthis._experimentalRecommendations[id] = action.properties.recommendationReason;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t//#endregion\n\n\tprivate isExtensionAllowedToBeRecommended(id: string): boolean {\n\t\treturn this._allIgnoredRecommendations.indexOf(id.toLowerCase()) === -1;\n\t}\n\n\tdispose() {\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n}\n"]}]}