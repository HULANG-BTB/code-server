{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPicker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPicker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/editorpicker\");\nvar nls = require(\"vs/nls\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar getIconClasses_1 = require(\"vs/editor/common/services/getIconClasses\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar quickOpenScorer_1 = require(\"vs/base/parts/quickopen/common/quickOpenScorer\");\nvar EditorPickerEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorPickerEntry, _super);\n    function EditorPickerEntry(editor, _group, modeService, modelService) {\n        var _this = _super.call(this) || this;\n        _this.editor = editor;\n        _this._group = _group;\n        _this.modeService = modeService;\n        _this.modelService = modelService;\n        return _this;\n    }\n    EditorPickerEntry.prototype.getLabelOptions = function () {\n        return {\n            extraClasses: getIconClasses_1.getIconClasses(this.modelService, this.modeService, this.getResource() || undefined),\n            italic: !this._group.isPinned(this.editor)\n        };\n    };\n    EditorPickerEntry.prototype.getLabel = function () {\n        return this.editor.getName();\n    };\n    EditorPickerEntry.prototype.getIcon = function () {\n        return this.editor.isDirty() ? 'dirty' : '';\n    };\n    Object.defineProperty(EditorPickerEntry.prototype, \"group\", {\n        get: function () {\n            return this._group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorPickerEntry.prototype.getResource = function () {\n        return editor_1.toResource(this.editor, { supportSideBySide: true });\n    };\n    EditorPickerEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, editor group picker\", this.getLabel());\n    };\n    EditorPickerEntry.prototype.getDescription = function () {\n        return this.editor.getDescription();\n    };\n    EditorPickerEntry.prototype.run = function (mode, context) {\n        if (mode === quickOpen_1.Mode.OPEN) {\n            return this.runOpen(context);\n        }\n        return _super.prototype.run.call(this, mode, context);\n    };\n    EditorPickerEntry.prototype.runOpen = function (context) {\n        this._group.openEditor(this.editor);\n        return true;\n    };\n    EditorPickerEntry = tslib_1.__decorate([\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, modelService_1.IModelService)\n    ], EditorPickerEntry);\n    return EditorPickerEntry;\n}(quickOpenModel_1.QuickOpenEntryGroup));\nexports.EditorPickerEntry = EditorPickerEntry;\nvar BaseEditorPicker = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseEditorPicker, _super);\n    function BaseEditorPicker(instantiationService, editorService, editorGroupService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.editorService = editorService;\n        _this.editorGroupService = editorGroupService;\n        _this.scorerCache = Object.create(null);\n        return _this;\n    }\n    BaseEditorPicker.prototype.getResults = function (searchValue, token) {\n        var _this = this;\n        var editorEntries = this.getEditorEntries();\n        if (!editorEntries.length) {\n            return Promise.resolve(null);\n        }\n        // Prepare search for scoring\n        var query = quickOpenScorer_1.prepareQuery(searchValue);\n        var entries = editorEntries.filter(function (e) {\n            if (!query.value) {\n                return true;\n            }\n            var itemScore = quickOpenScorer_1.scoreItem(e, query, true, quickOpenModel_1.QuickOpenItemAccessor, _this.scorerCache);\n            if (!itemScore.score) {\n                return false;\n            }\n            e.setHighlights(itemScore.labelMatch || [], itemScore.descriptionMatch);\n            return true;\n        });\n        // Sorting\n        if (query.value) {\n            var groups_1 = this.editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n            entries.sort(function (e1, e2) {\n                if (e1.group !== e2.group) {\n                    return groups_1.indexOf(e1.group) - groups_1.indexOf(e2.group); // older groups first\n                }\n                return quickOpenScorer_1.compareItemsByScore(e1, e2, query, true, quickOpenModel_1.QuickOpenItemAccessor, _this.scorerCache);\n            });\n        }\n        // Grouping (for more than one group)\n        if (this.editorGroupService.count > 1) {\n            var lastGroup_1;\n            entries.forEach(function (e) {\n                if (!lastGroup_1 || lastGroup_1 !== e.group) {\n                    e.setGroupLabel(e.group.label);\n                    e.setShowBorder(!!lastGroup_1);\n                    lastGroup_1 = e.group;\n                }\n            });\n        }\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(entries));\n    };\n    BaseEditorPicker.prototype.onClose = function (canceled) {\n        this.scorerCache = Object.create(null);\n    };\n    BaseEditorPicker = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, editorGroupsService_1.IEditorGroupsService)\n    ], BaseEditorPicker);\n    return BaseEditorPicker;\n}(quickopen_1.QuickOpenHandler));\nexports.BaseEditorPicker = BaseEditorPicker;\nvar ActiveEditorGroupPicker = /** @class */ (function (_super) {\n    tslib_1.__extends(ActiveEditorGroupPicker, _super);\n    function ActiveEditorGroupPicker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ActiveEditorGroupPicker.prototype.getEditorEntries = function () {\n        var _this = this;\n        return this.group.getEditors(editorGroupsService_1.EditorsOrder.MOST_RECENTLY_ACTIVE).map(function (editor, index) { return _this.instantiationService.createInstance(EditorPickerEntry, editor, _this.group); });\n    };\n    Object.defineProperty(ActiveEditorGroupPicker.prototype, \"group\", {\n        get: function () {\n            return this.editorGroupService.activeGroup;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ActiveEditorGroupPicker.prototype.getEmptyLabel = function (searchString) {\n        if (searchString) {\n            return nls.localize('noResultsFoundInGroup', \"No matching opened editor found in group\");\n        }\n        return nls.localize('noOpenedEditors', \"List of opened editors is currently empty in group\");\n    };\n    ActiveEditorGroupPicker.prototype.getAutoFocus = function (searchValue, context) {\n        if (searchValue || !context.quickNavigateConfiguration) {\n            return {\n                autoFocusFirstEntry: true\n            };\n        }\n        var isShiftNavigate = (context.quickNavigateConfiguration && context.quickNavigateConfiguration.keybindings.some(function (k) {\n            var _a = k.getParts(), firstPart = _a[0], chordPart = _a[1];\n            if (chordPart) {\n                return false;\n            }\n            return firstPart.shiftKey;\n        }));\n        if (isShiftNavigate) {\n            return {\n                autoFocusLastEntry: true\n            };\n        }\n        var editors = this.group.count;\n        return {\n            autoFocusFirstEntry: editors === 1,\n            autoFocusSecondEntry: editors > 1\n        };\n    };\n    ActiveEditorGroupPicker.ID = 'workbench.picker.activeEditors';\n    return ActiveEditorGroupPicker;\n}(BaseEditorPicker));\nexports.ActiveEditorGroupPicker = ActiveEditorGroupPicker;\nvar AllEditorsPicker = /** @class */ (function (_super) {\n    tslib_1.__extends(AllEditorsPicker, _super);\n    function AllEditorsPicker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AllEditorsPicker.prototype.getEditorEntries = function () {\n        var _this = this;\n        var entries = [];\n        this.editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE).forEach(function (group) {\n            group.editors.forEach(function (editor) {\n                entries.push(_this.instantiationService.createInstance(EditorPickerEntry, editor, group));\n            });\n        });\n        return entries;\n    };\n    AllEditorsPicker.prototype.getEmptyLabel = function (searchString) {\n        if (searchString) {\n            return nls.localize('noResultsFound', \"No matching opened editor found\");\n        }\n        return nls.localize('noOpenedEditorsAllGroups', \"List of opened editors is currently empty\");\n    };\n    AllEditorsPicker.prototype.getAutoFocus = function (searchValue, context) {\n        if (searchValue) {\n            return {\n                autoFocusFirstEntry: true\n            };\n        }\n        return _super.prototype.getAutoFocus.call(this, searchValue, context);\n    };\n    AllEditorsPicker.ID = 'workbench.picker.editors';\n    return AllEditorsPicker;\n}(BaseEditorPicker));\nexports.AllEditorsPicker = AllEditorsPicker;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPicker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorPicker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/editorpicker';\nimport * as nls from 'vs/nls';\nimport { IIconLabelValueOptions } from 'vs/base/browser/ui/iconLabel/iconLabel';\nimport { IAutoFocus, Mode, IEntryRunContext, IQuickNavigateConfiguration, IModel } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenModel, QuickOpenEntry, QuickOpenEntryGroup, QuickOpenItemAccessor } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { QuickOpenHandler } from 'vs/workbench/browser/quickopen';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService, IEditorGroup, EditorsOrder, GroupsOrder } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { EditorInput, toResource } from 'vs/workbench/common/editor';\nimport { compareItemsByScore, scoreItem, ScorerCache, prepareQuery } from 'vs/base/parts/quickopen/common/quickOpenScorer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class EditorPickerEntry extends QuickOpenEntryGroup {\n\n\tconstructor(\n\t\tprivate editor: EditorInput,\n\t\tprivate _group: IEditorGroup,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tgetLabelOptions(): IIconLabelValueOptions {\n\t\treturn {\n\t\t\textraClasses: getIconClasses(this.modelService, this.modeService, this.getResource() || undefined),\n\t\t\titalic: !this._group.isPinned(this.editor)\n\t\t};\n\t}\n\n\tgetLabel() {\n\t\treturn this.editor.getName();\n\t}\n\n\tgetIcon(): string {\n\t\treturn this.editor.isDirty() ? 'dirty' : '';\n\t}\n\n\tget group(): IEditorGroup {\n\t\treturn this._group;\n\t}\n\n\tgetResource() {\n\t\treturn toResource(this.editor, { supportSideBySide: true });\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, editor group picker\", this.getLabel());\n\t}\n\n\tgetDescription() {\n\t\treturn this.editor.getDescription();\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\treturn this.runOpen(context);\n\t\t}\n\n\t\treturn super.run(mode, context);\n\t}\n\n\tprivate runOpen(context: IEntryRunContext): boolean {\n\t\tthis._group.openEditor(this.editor);\n\n\t\treturn true;\n\t}\n}\n\nexport abstract class BaseEditorPicker extends QuickOpenHandler {\n\tprivate scorerCache: ScorerCache;\n\n\tconstructor(\n\t\t@IInstantiationService protected instantiationService: IInstantiationService,\n\t\t@IEditorService protected editorService: IEditorService,\n\t\t@IEditorGroupsService protected editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper();\n\n\t\tthis.scorerCache = Object.create(null);\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel | null> {\n\t\tconst editorEntries = this.getEditorEntries();\n\t\tif (!editorEntries.length) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\t// Prepare search for scoring\n\t\tconst query = prepareQuery(searchValue);\n\n\t\tconst entries = editorEntries.filter(e => {\n\t\t\tif (!query.value) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst itemScore = scoreItem(e, query, true, QuickOpenItemAccessor, this.scorerCache);\n\t\t\tif (!itemScore.score) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\te.setHighlights(itemScore.labelMatch || [], itemScore.descriptionMatch);\n\n\t\t\treturn true;\n\t\t});\n\n\t\t// Sorting\n\t\tif (query.value) {\n\t\t\tconst groups = this.editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t\tentries.sort((e1, e2) => {\n\t\t\t\tif (e1.group !== e2.group) {\n\t\t\t\t\treturn groups.indexOf(e1.group) - groups.indexOf(e2.group); // older groups first\n\t\t\t\t}\n\n\t\t\t\treturn compareItemsByScore(e1, e2, query, true, QuickOpenItemAccessor, this.scorerCache);\n\t\t\t});\n\t\t}\n\n\t\t// Grouping (for more than one group)\n\t\tif (this.editorGroupService.count > 1) {\n\t\t\tlet lastGroup: IEditorGroup;\n\t\t\tentries.forEach(e => {\n\t\t\t\tif (!lastGroup || lastGroup !== e.group) {\n\t\t\t\t\te.setGroupLabel(e.group.label);\n\t\t\t\t\te.setShowBorder(!!lastGroup);\n\t\t\t\t\tlastGroup = e.group;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(new QuickOpenModel(entries));\n\t}\n\n\tonClose(canceled: boolean): void {\n\t\tthis.scorerCache = Object.create(null);\n\t}\n\n\tprotected abstract getEditorEntries(): EditorPickerEntry[];\n}\n\nexport class ActiveEditorGroupPicker extends BaseEditorPicker {\n\n\tstatic readonly ID = 'workbench.picker.activeEditors';\n\n\tprotected getEditorEntries(): EditorPickerEntry[] {\n\t\treturn this.group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).map((editor, index) => this.instantiationService.createInstance(EditorPickerEntry, editor, this.group));\n\t}\n\n\tprivate get group(): IEditorGroup {\n\t\treturn this.editorGroupService.activeGroup;\n\t}\n\n\tgetEmptyLabel(searchString: string): string {\n\t\tif (searchString) {\n\t\t\treturn nls.localize('noResultsFoundInGroup', \"No matching opened editor found in group\");\n\t\t}\n\n\t\treturn nls.localize('noOpenedEditors', \"List of opened editors is currently empty in group\");\n\t}\n\n\tgetAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\tif (searchValue || !context.quickNavigateConfiguration) {\n\t\t\treturn {\n\t\t\t\tautoFocusFirstEntry: true\n\t\t\t};\n\t\t}\n\n\t\tconst isShiftNavigate = (context.quickNavigateConfiguration && context.quickNavigateConfiguration.keybindings.some(k => {\n\t\t\tconst [firstPart, chordPart] = k.getParts();\n\t\t\tif (chordPart) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn firstPart.shiftKey;\n\t\t}));\n\n\t\tif (isShiftNavigate) {\n\t\t\treturn {\n\t\t\t\tautoFocusLastEntry: true\n\t\t\t};\n\t\t}\n\n\t\tconst editors = this.group.count;\n\t\treturn {\n\t\t\tautoFocusFirstEntry: editors === 1,\n\t\t\tautoFocusSecondEntry: editors > 1\n\t\t};\n\t}\n}\n\nexport class AllEditorsPicker extends BaseEditorPicker {\n\n\tstatic readonly ID = 'workbench.picker.editors';\n\n\tprotected getEditorEntries(): EditorPickerEntry[] {\n\t\tconst entries: EditorPickerEntry[] = [];\n\n\t\tthis.editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE).forEach(group => {\n\t\t\tgroup.editors.forEach(editor => {\n\t\t\t\tentries.push(this.instantiationService.createInstance(EditorPickerEntry, editor, group));\n\t\t\t});\n\t\t});\n\n\t\treturn entries;\n\t}\n\n\tgetEmptyLabel(searchString: string): string {\n\t\tif (searchString) {\n\t\t\treturn nls.localize('noResultsFound', \"No matching opened editor found\");\n\t\t}\n\n\t\treturn nls.localize('noOpenedEditorsAllGroups', \"List of opened editors is currently empty\");\n\t}\n\n\tgetAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\tif (searchValue) {\n\t\t\treturn {\n\t\t\t\tautoFocusFirstEntry: true\n\t\t\t};\n\t\t}\n\n\t\treturn super.getAutoFocus(searchValue, context);\n\t}\n}\n"]}]}