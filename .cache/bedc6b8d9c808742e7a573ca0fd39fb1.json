{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configuration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configuration.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar objects = require(\"vs/base/common/objects\");\nvar types = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nexports.IConfigurationService = instantiation_1.createDecorator('configurationService');\nfunction isConfigurationOverrides(thing) {\n    return thing\n        && typeof thing === 'object'\n        && (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')\n        && (!thing.resource || thing.resource instanceof uri_1.URI);\n}\nexports.isConfigurationOverrides = isConfigurationOverrides;\nvar ConfigurationTarget;\n(function (ConfigurationTarget) {\n    ConfigurationTarget[ConfigurationTarget[\"USER\"] = 1] = \"USER\";\n    ConfigurationTarget[ConfigurationTarget[\"USER_LOCAL\"] = 2] = \"USER_LOCAL\";\n    ConfigurationTarget[ConfigurationTarget[\"USER_REMOTE\"] = 3] = \"USER_REMOTE\";\n    ConfigurationTarget[ConfigurationTarget[\"WORKSPACE\"] = 4] = \"WORKSPACE\";\n    ConfigurationTarget[ConfigurationTarget[\"WORKSPACE_FOLDER\"] = 5] = \"WORKSPACE_FOLDER\";\n    ConfigurationTarget[ConfigurationTarget[\"DEFAULT\"] = 6] = \"DEFAULT\";\n    ConfigurationTarget[ConfigurationTarget[\"MEMORY\"] = 7] = \"MEMORY\";\n})(ConfigurationTarget = exports.ConfigurationTarget || (exports.ConfigurationTarget = {}));\nfunction ConfigurationTargetToString(configurationTarget) {\n    switch (configurationTarget) {\n        case ConfigurationTarget.USER: return 'USER';\n        case ConfigurationTarget.USER_LOCAL: return 'USER_LOCAL';\n        case ConfigurationTarget.USER_REMOTE: return 'USER_REMOTE';\n        case ConfigurationTarget.WORKSPACE: return 'WORKSPACE';\n        case ConfigurationTarget.WORKSPACE_FOLDER: return 'WORKSPACE_FOLDER';\n        case ConfigurationTarget.DEFAULT: return 'DEFAULT';\n        case ConfigurationTarget.MEMORY: return 'MEMORY';\n    }\n}\nexports.ConfigurationTargetToString = ConfigurationTargetToString;\nfunction compare(from, to) {\n    var added = to.keys.filter(function (key) { return from.keys.indexOf(key) === -1; });\n    var removed = from.keys.filter(function (key) { return to.keys.indexOf(key) === -1; });\n    var updated = [];\n    for (var _i = 0, _a = from.keys; _i < _a.length; _i++) {\n        var key = _a[_i];\n        var value1 = getConfigurationValue(from.contents, key);\n        var value2 = getConfigurationValue(to.contents, key);\n        if (!objects.equals(value1, value2)) {\n            updated.push(key);\n        }\n    }\n    return { added: added, removed: removed, updated: updated };\n}\nexports.compare = compare;\nfunction toOverrides(raw, conflictReporter) {\n    var overrides = [];\n    var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n    for (var _i = 0, _a = Object.keys(raw); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key)) {\n            var overrideRaw = {};\n            for (var keyInOverrideRaw in raw[key]) {\n                if (configurationProperties[keyInOverrideRaw] && configurationProperties[keyInOverrideRaw].overridable) {\n                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n                }\n            }\n            overrides.push({\n                identifiers: [overrideIdentifierFromKey(key).trim()],\n                contents: toValuesTree(overrideRaw, conflictReporter)\n            });\n        }\n    }\n    return overrides;\n}\nexports.toOverrides = toOverrides;\nfunction toValuesTree(properties, conflictReporter) {\n    var root = Object.create(null);\n    for (var key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexports.toValuesTree = toValuesTree;\nfunction addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    var segments = key.split('.');\n    var last = segments.pop();\n    var curr = settingsTreeRoot;\n    for (var i = 0; i < segments.length; i++) {\n        var s = segments[i];\n        var obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                break;\n            default:\n                conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object') {\n        curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\n    }\n    else {\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\n    }\n}\nexports.addToValueTree = addToValueTree;\nfunction removeFromValueTree(valueTree, key) {\n    var segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nexports.removeFromValueTree = removeFromValueTree;\nfunction doRemoveFromValueTree(valueTree, segments) {\n    var first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        var value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nfunction getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        var current = config;\n        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n            var component = path_1[_i];\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    var path = settingPath.split('.');\n    var result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexports.getConfigurationValue = getConfigurationValue;\nfunction merge(base, add, overwrite) {\n    Object.keys(add).forEach(function (key) {\n        if (key in base) {\n            if (types.isObject(base[key]) && types.isObject(add[key])) {\n                merge(base[key], add[key], overwrite);\n            }\n            else if (overwrite) {\n                base[key] = add[key];\n            }\n        }\n        else {\n            base[key] = add[key];\n        }\n    });\n}\nexports.merge = merge;\nfunction getConfigurationKeys() {\n    var properties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n    return Object.keys(properties);\n}\nexports.getConfigurationKeys = getConfigurationKeys;\nfunction getDefaultValues() {\n    var valueTreeRoot = Object.create(null);\n    var properties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n    for (var key in properties) {\n        var value = properties[key].default;\n        addToValueTree(valueTreeRoot, key, value, function (message) { return console.error(\"Conflict in default settings: \" + message); });\n    }\n    return valueTreeRoot;\n}\nexports.getDefaultValues = getDefaultValues;\nfunction overrideIdentifierFromKey(key) {\n    return key.substring(1, key.length - 1);\n}\nexports.overrideIdentifierFromKey = overrideIdentifierFromKey;\nfunction keyFromOverrideIdentifier(overrideIdentifier) {\n    return \"[\" + overrideIdentifier + \"]\";\n}\nexports.keyFromOverrideIdentifier = keyFromOverrideIdentifier;\nfunction getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\n    var setting = configurationService.inspect(currentSettingName);\n    var legacySetting = configurationService.inspect(legacySettingName);\n    if (typeof setting.user !== 'undefined' || typeof setting.workspace !== 'undefined' || typeof setting.workspaceFolder !== 'undefined') {\n        return setting.value;\n    }\n    else if (typeof legacySetting.user !== 'undefined' || typeof legacySetting.workspace !== 'undefined' || typeof legacySetting.workspaceFolder !== 'undefined') {\n        return legacySetting.value;\n    }\n    else {\n        return setting.default;\n    }\n}\nexports.getMigratedSettingValue = getMigratedSettingValue;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configuration.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configuration.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gDAAkD;AAClD,4CAA8C;AAC9C,0CAAyC;AAEzC,iEAAgE;AAEhE,gFAAiF;AACjF,gGAAuI;AAG1H,QAAA,qBAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;AAEpG,SAAgB,wBAAwB,CAAC,KAAU;IAClD,OAAO,KAAK;WACR,OAAO,KAAK,KAAK,QAAQ;WACzB,CAAC,CAAC,KAAK,CAAC,kBAAkB,IAAI,OAAO,KAAK,CAAC,kBAAkB,KAAK,QAAQ,CAAC;WAC3E,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,YAAY,SAAG,CAAC,CAAC;AACxD,CAAC;AALD,4DAKC;AAOD,IAAkB,mBAQjB;AARD,WAAkB,mBAAmB;IACpC,6DAAQ,CAAA;IACR,yEAAU,CAAA;IACV,2EAAW,CAAA;IACX,uEAAS,CAAA;IACT,qFAAgB,CAAA;IAChB,mEAAO,CAAA;IACP,iEAAM,CAAA;AACP,CAAC,EARiB,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAQpC;AACD,SAAgB,2BAA2B,CAAC,mBAAwC;IACnF,QAAQ,mBAAmB,EAAE;QAC5B,KAAK,mBAAmB,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC;QAC7C,KAAK,mBAAmB,CAAC,UAAU,CAAC,CAAC,OAAO,YAAY,CAAC;QACzD,KAAK,mBAAmB,CAAC,WAAW,CAAC,CAAC,OAAO,aAAa,CAAC;QAC3D,KAAK,mBAAmB,CAAC,SAAS,CAAC,CAAC,OAAO,WAAW,CAAC;QACvD,KAAK,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,OAAO,kBAAkB,CAAC;QACrE,KAAK,mBAAmB,CAAC,OAAO,CAAC,CAAC,OAAO,SAAS,CAAC;QACnD,KAAK,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,QAAQ,CAAC;KACjD;AACF,CAAC;AAVD,kEAUC;AAkFD,SAAgB,OAAO,CAAC,IAAyB,EAAE,EAAuB;IACzE,IAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACnE,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;IACrE,IAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,KAAkB,UAAS,EAAT,KAAA,IAAI,CAAC,IAAI,EAAT,cAAS,EAAT,IAAS,EAAE;QAAxB,IAAM,GAAG,SAAA;QACb,IAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACzD,IAAM,MAAM,GAAG,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;KACD;IAED,OAAO,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AACpC,CAAC;AAdD,0BAcC;AAED,SAAgB,WAAW,CAAC,GAAQ,EAAE,gBAA2C;IAChF,IAAM,SAAS,GAAiB,EAAE,CAAC;IACnC,IAAM,uBAAuB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC;IAC3H,KAAkB,UAAgB,EAAhB,KAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;QAA/B,IAAM,GAAG,SAAA;QACb,IAAI,iDAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACxC,IAAM,WAAW,GAAG,EAAE,CAAC;YACvB,KAAK,IAAM,gBAAgB,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;gBACxC,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE;oBACvG,WAAW,CAAC,gBAAgB,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC;iBAC3D;aACD;YACD,SAAS,CAAC,IAAI,CAAC;gBACd,WAAW,EAAE,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;gBACpD,QAAQ,EAAE,YAAY,CAAC,WAAW,EAAE,gBAAgB,CAAC;aACrD,CAAC,CAAC;SACH;KACD;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AAlBD,kCAkBC;AAED,SAAgB,YAAY,CAAC,UAA2C,EAAE,gBAA2C;IACpH,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEjC,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;QAC3B,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;KAC7D;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AARD,oCAQC;AAED,SAAgB,cAAc,CAAC,gBAAqB,EAAE,GAAW,EAAE,KAAU,EAAE,gBAA2C;IACzH,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAG,CAAC;IAE7B,IAAI,IAAI,GAAG,gBAAgB,CAAC;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACzC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,QAAQ,OAAO,GAAG,EAAE;YACnB,KAAK,WAAW;gBACf,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpC,MAAM;YACP,KAAK,QAAQ;gBACZ,MAAM;YACP;gBACC,gBAAgB,CAAC,cAAY,GAAG,YAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,YAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAG,CAAC,CAAC;gBACvG,OAAO;SACR;QACD,IAAI,GAAG,GAAG,CAAC;KACX;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,8DAA8D;KAClF;SAAM;QACN,gBAAgB,CAAC,cAAY,GAAG,YAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,YAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;KACxF;AACF,CAAC;AA1BD,wCA0BC;AAED,SAAgB,mBAAmB,CAAC,SAAc,EAAE,GAAW;IAC9D,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC5C,CAAC;AAHD,kDAGC;AAED,SAAS,qBAAqB,CAAC,SAAc,EAAE,QAAkB;IAChE,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAG,CAAC;IAChC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1B,uBAAuB;QACvB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO;KACP;IAED,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QACjD,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACvD,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;aACxB;SACD;KACD;AACF,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CAAI,MAAW,EAAE,WAAmB,EAAE,YAAgB;IAC1F,SAAS,aAAa,CAAC,MAAW,EAAE,IAAc;QACjD,IAAI,OAAO,GAAG,MAAM,CAAC;QACrB,KAAwB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAAzB,IAAM,SAAS,aAAA;YACnB,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpD,OAAO,SAAS,CAAC;aACjB;YACD,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;SAC7B;QACD,OAAU,OAAO,CAAC;IACnB,CAAC;IAED,IAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAE3C,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC;AAC9D,CAAC;AAhBD,sDAgBC;AAED,SAAgB,KAAK,CAAC,IAAS,EAAE,GAAQ,EAAE,SAAkB;IAC5D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;QAC3B,IAAI,GAAG,IAAI,IAAI,EAAE;YAChB,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC1D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;aACtC;iBAAM,IAAI,SAAS,EAAE;gBACrB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;aACrB;SACD;aAAM;YACN,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACrB;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAZD,sBAYC;AAED,SAAgB,oBAAoB;IACnC,IAAM,UAAU,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC;IAC9G,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC;AAHD,oDAGC;AAED,SAAgB,gBAAgB;IAC/B,IAAM,aAAa,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/C,IAAM,UAAU,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC,0BAA0B,EAAE,CAAC;IAE9G,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;QAC3B,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;QACpC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,mCAAiC,OAAS,CAAC,EAAzD,CAAyD,CAAC,CAAC;KAChH;IAED,OAAO,aAAa,CAAC;AACtB,CAAC;AAVD,4CAUC;AAED,SAAgB,yBAAyB,CAAC,GAAW;IACpD,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACzC,CAAC;AAFD,8DAEC;AAED,SAAgB,yBAAyB,CAAC,kBAA0B;IACnE,OAAO,MAAI,kBAAkB,MAAG,CAAC;AAClC,CAAC;AAFD,8DAEC;AAED,SAAgB,uBAAuB,CAAI,oBAA2C,EAAE,kBAA0B,EAAE,iBAAyB;IAC5I,IAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAI,kBAAkB,CAAC,CAAC;IACpE,IAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAI,iBAAiB,CAAC,CAAC;IAEzE,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,eAAe,KAAK,WAAW,EAAE;QACtI,OAAO,OAAO,CAAC,KAAK,CAAC;KACrB;SAAM,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,aAAa,CAAC,SAAS,KAAK,WAAW,IAAI,OAAO,aAAa,CAAC,eAAe,KAAK,WAAW,EAAE;QAC/J,OAAO,aAAa,CAAC,KAAK,CAAC;KAC3B;SAAM;QACN,OAAO,OAAO,CAAC,OAAO,CAAC;KACvB;AACF,CAAC;AAXD,0DAWC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from 'vs/base/common/objects';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationRegistry, Extensions, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ResourceMap } from 'vs/base/common/map';\n\nexport const IConfigurationService = createDecorator<IConfigurationService>('configurationService');\n\nexport function isConfigurationOverrides(thing: any): thing is IConfigurationOverrides {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')\n\t\t&& (!thing.resource || thing.resource instanceof URI);\n}\n\nexport interface IConfigurationOverrides {\n\toverrideIdentifier?: string | null;\n\tresource?: URI | null;\n}\n\nexport const enum ConfigurationTarget {\n\tUSER = 1,\n\tUSER_LOCAL,\n\tUSER_REMOTE,\n\tWORKSPACE,\n\tWORKSPACE_FOLDER,\n\tDEFAULT,\n\tMEMORY\n}\nexport function ConfigurationTargetToString(configurationTarget: ConfigurationTarget) {\n\tswitch (configurationTarget) {\n\t\tcase ConfigurationTarget.USER: return 'USER';\n\t\tcase ConfigurationTarget.USER_LOCAL: return 'USER_LOCAL';\n\t\tcase ConfigurationTarget.USER_REMOTE: return 'USER_REMOTE';\n\t\tcase ConfigurationTarget.WORKSPACE: return 'WORKSPACE';\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: return 'WORKSPACE_FOLDER';\n\t\tcase ConfigurationTarget.DEFAULT: return 'DEFAULT';\n\t\tcase ConfigurationTarget.MEMORY: return 'MEMORY';\n\t}\n}\n\nexport interface IConfigurationChangeEvent {\n\n\tsource: ConfigurationTarget;\n\taffectedKeys: string[];\n\taffectsConfiguration(configuration: string, resource?: URI): boolean;\n\n\t// Following data is used for telemetry\n\tsourceConfig: any;\n\n\t// Following data is used for Extension host configuration event\n\tchangedConfiguration: IConfigurationModel;\n\tchangedConfigurationByResource: ResourceMap<IConfigurationModel>;\n}\n\nexport interface IConfigurationService {\n\t_serviceBrand: any;\n\n\tonDidChangeConfiguration: Event<IConfigurationChangeEvent>;\n\n\tgetConfigurationData(): IConfigurationData | null;\n\n\t/**\n\t * Fetches the value of the section for the given overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param section - Section of the configuraion. Can be `null` or `undefined`.\n\t * @param overrides - Overrides that has to be applied while fetching\n\t *\n\t */\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError?: boolean): Promise<void>;\n\n\treloadConfiguration(folder?: IWorkspaceFolder): Promise<void>;\n\n\tinspect<T>(key: string, overrides?: IConfigurationOverrides): {\n\t\tdefault: T,\n\t\tuser: T,\n\t\tuserLocal?: T,\n\t\tuserRemote?: T,\n\t\tworkspace?: T,\n\t\tworkspaceFolder?: T,\n\t\tmemory?: T,\n\t\tvalue: T,\n\t};\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t\tmemory?: string[];\n\t};\n}\n\nexport interface IConfigurationModel {\n\tcontents: any;\n\tkeys: string[];\n\toverrides: IOverrides[];\n}\n\nexport interface IOverrides {\n\tcontents: any;\n\tidentifiers: string[];\n}\n\nexport interface IConfigurationData {\n\tdefaults: IConfigurationModel;\n\tuser: IConfigurationModel;\n\tworkspace: IConfigurationModel;\n\tfolders: { [folder: string]: IConfigurationModel };\n\tisComplete: boolean;\n}\n\nexport function compare(from: IConfigurationModel, to: IConfigurationModel): { added: string[], removed: string[], updated: string[] } {\n\tconst added = to.keys.filter(key => from.keys.indexOf(key) === -1);\n\tconst removed = from.keys.filter(key => to.keys.indexOf(key) === -1);\n\tconst updated: string[] = [];\n\n\tfor (const key of from.keys) {\n\t\tconst value1 = getConfigurationValue(from.contents, key);\n\t\tconst value2 = getConfigurationValue(to.contents, key);\n\t\tif (!objects.equals(value1, value2)) {\n\t\t\tupdated.push(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function toOverrides(raw: any, conflictReporter: (message: string) => void): IOverrides[] {\n\tconst overrides: IOverrides[] = [];\n\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\tfor (const key of Object.keys(raw)) {\n\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\tconst overrideRaw = {};\n\t\t\tfor (const keyInOverrideRaw in raw[key]) {\n\t\t\t\tif (configurationProperties[keyInOverrideRaw] && configurationProperties[keyInOverrideRaw].overridable) {\n\t\t\t\t\toverrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n\t\t\t\t}\n\t\t\t}\n\t\t\toverrides.push({\n\t\t\t\tidentifiers: [overrideIdentifierFromKey(key).trim()],\n\t\t\t\tcontents: toValuesTree(overrideRaw, conflictReporter)\n\t\t\t});\n\t\t}\n\t}\n\treturn overrides;\n}\n\nexport function toValuesTree(properties: { [qualifiedKey: string]: any }, conflictReporter: (message: string) => void): any {\n\tconst root = Object.create(null);\n\n\tfor (let key in properties) {\n\t\taddToValueTree(root, key, properties[key], conflictReporter);\n\t}\n\n\treturn root;\n}\n\nexport function addToValueTree(settingsTreeRoot: any, key: string, value: any, conflictReporter: (message: string) => void): void {\n\tconst segments = key.split('.');\n\tconst last = segments.pop()!;\n\n\tlet curr = settingsTreeRoot;\n\tfor (let i = 0; i < segments.length; i++) {\n\t\tlet s = segments[i];\n\t\tlet obj = curr[s];\n\t\tswitch (typeof obj) {\n\t\t\tcase 'undefined':\n\t\t\t\tobj = curr[s] = Object.create(null);\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n\t\t\t\treturn;\n\t\t}\n\t\tcurr = obj;\n\t}\n\n\tif (typeof curr === 'object') {\n\t\tcurr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\n\t} else {\n\t\tconflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n\t}\n}\n\nexport function removeFromValueTree(valueTree: any, key: string): void {\n\tconst segments = key.split('.');\n\tdoRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree: any, segments: string[]): void {\n\tconst first = segments.shift()!;\n\tif (segments.length === 0) {\n\t\t// Reached last segment\n\t\tdelete valueTree[first];\n\t\treturn;\n\t}\n\n\tif (Object.keys(valueTree).indexOf(first) !== -1) {\n\t\tconst value = valueTree[first];\n\t\tif (typeof value === 'object' && !Array.isArray(value)) {\n\t\t\tdoRemoveFromValueTree(value, segments);\n\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\tdelete valueTree[first];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (const component of path) {\n\t\t\tif (typeof current !== 'object' || current === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcurrent = current[component];\n\t\t}\n\t\treturn <T>current;\n\t}\n\n\tconst path = settingPath.split('.');\n\tconst result = accessSetting(config, path);\n\n\treturn typeof result === 'undefined' ? defaultValue : result;\n}\n\nexport function merge(base: any, add: any, overwrite: boolean): void {\n\tObject.keys(add).forEach(key => {\n\t\tif (key in base) {\n\t\t\tif (types.isObject(base[key]) && types.isObject(add[key])) {\n\t\t\t\tmerge(base[key], add[key], overwrite);\n\t\t\t} else if (overwrite) {\n\t\t\t\tbase[key] = add[key];\n\t\t\t}\n\t\t} else {\n\t\t\tbase[key] = add[key];\n\t\t}\n\t});\n}\n\nexport function getConfigurationKeys(): string[] {\n\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\treturn Object.keys(properties);\n}\n\nexport function getDefaultValues(): any {\n\tconst valueTreeRoot: any = Object.create(null);\n\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\tfor (let key in properties) {\n\t\tlet value = properties[key].default;\n\t\taddToValueTree(valueTreeRoot, key, value, message => console.error(`Conflict in default settings: ${message}`));\n\t}\n\n\treturn valueTreeRoot;\n}\n\nexport function overrideIdentifierFromKey(key: string): string {\n\treturn key.substring(1, key.length - 1);\n}\n\nexport function keyFromOverrideIdentifier(overrideIdentifier: string): string {\n\treturn `[${overrideIdentifier}]`;\n}\n\nexport function getMigratedSettingValue<T>(configurationService: IConfigurationService, currentSettingName: string, legacySettingName: string): T {\n\tconst setting = configurationService.inspect<T>(currentSettingName);\n\tconst legacySetting = configurationService.inspect<T>(legacySettingName);\n\n\tif (typeof setting.user !== 'undefined' || typeof setting.workspace !== 'undefined' || typeof setting.workspaceFolder !== 'undefined') {\n\t\treturn setting.value;\n\t} else if (typeof legacySetting.user !== 'undefined' || typeof legacySetting.workspace !== 'undefined' || typeof legacySetting.workspaceFolder !== 'undefined') {\n\t\treturn legacySetting.value;\n\t} else {\n\t\treturn setting.default;\n\t}\n}\n"]}]}