{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmMenus.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmMenus.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/scmViewlet\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar menuItemActionItem_1 = require(\"vs/platform/actions/browser/menuItemActionItem\");\nvar scmUtil_1 = require(\"./scmUtil\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nfunction actionEquals(a, b) {\n    return a.id === b.id;\n}\nfunction getSCMResourceContextKey(resource) {\n    return scmUtil_1.isSCMResource(resource) ? resource.resourceGroup.id : resource.id;\n}\nexports.getSCMResourceContextKey = getSCMResourceContextKey;\nvar SCMMenus = /** @class */ (function () {\n    function SCMMenus(provider, contextKeyService, menuService, contextMenuService) {\n        this.menuService = menuService;\n        this.contextMenuService = contextMenuService;\n        this.titleActions = [];\n        this.titleSecondaryActions = [];\n        this._onDidChangeTitle = new event_1.Emitter();\n        this.onDidChangeTitle = this._onDidChangeTitle.event;\n        this.resourceGroupMenuEntries = [];\n        this.resourceGroupMenus = new Map();\n        this.disposables = [];\n        this.contextKeyService = contextKeyService.createScoped();\n        var scmProviderKey = this.contextKeyService.createKey('scmProvider', undefined);\n        if (provider) {\n            scmProviderKey.set(provider.contextValue);\n            this.onDidSpliceGroups({ start: 0, deleteCount: 0, toInsert: provider.groups.elements });\n            provider.groups.onDidSplice(this.onDidSpliceGroups, this, this.disposables);\n        }\n        else {\n            scmProviderKey.set('');\n        }\n        this.titleMenu = this.menuService.createMenu(actions_1.MenuId.SCMTitle, this.contextKeyService);\n        this.disposables.push(this.titleMenu);\n        this.titleMenu.onDidChange(this.updateTitleActions, this, this.disposables);\n        this.updateTitleActions();\n    }\n    SCMMenus.prototype.updateTitleActions = function () {\n        var primary = [];\n        var secondary = [];\n        menuItemActionItem_1.fillInActionBarActions(this.titleMenu, { shouldForwardArgs: true }, { primary: primary, secondary: secondary });\n        if (arrays_1.equals(primary, this.titleActions, actionEquals) && arrays_1.equals(secondary, this.titleSecondaryActions, actionEquals)) {\n            return;\n        }\n        this.titleActions = primary;\n        this.titleSecondaryActions = secondary;\n        this._onDidChangeTitle.fire();\n    };\n    SCMMenus.prototype.getTitleActions = function () {\n        return this.titleActions;\n    };\n    SCMMenus.prototype.getTitleSecondaryActions = function () {\n        return this.titleSecondaryActions;\n    };\n    SCMMenus.prototype.getResourceGroupContextActions = function (group) {\n        return this.getActions(actions_1.MenuId.SCMResourceGroupContext, group).secondary;\n    };\n    SCMMenus.prototype.getResourceContextActions = function (resource) {\n        return this.getActions(actions_1.MenuId.SCMResourceContext, resource).secondary;\n    };\n    SCMMenus.prototype.getActions = function (menuId, resource) {\n        var contextKeyService = this.contextKeyService.createScoped();\n        contextKeyService.createKey('scmResourceGroup', getSCMResourceContextKey(resource));\n        var menu = this.menuService.createMenu(menuId, contextKeyService);\n        var primary = [];\n        var secondary = [];\n        var result = { primary: primary, secondary: secondary };\n        menuItemActionItem_1.fillInContextMenuActions(menu, { shouldForwardArgs: true }, result, this.contextMenuService, function (g) { return /^inline/.test(g); });\n        menu.dispose();\n        contextKeyService.dispose();\n        return result;\n    };\n    SCMMenus.prototype.getResourceGroupMenu = function (group) {\n        if (!this.resourceGroupMenus.has(group)) {\n            throw new Error('SCM Resource Group menu not found');\n        }\n        return this.resourceGroupMenus.get(group).resourceGroupMenu;\n    };\n    SCMMenus.prototype.getResourceMenu = function (group) {\n        if (!this.resourceGroupMenus.has(group)) {\n            throw new Error('SCM Resource Group menu not found');\n        }\n        return this.resourceGroupMenus.get(group).resourceMenu;\n    };\n    SCMMenus.prototype.onDidSpliceGroups = function (_a) {\n        var _this = this;\n        var start = _a.start, deleteCount = _a.deleteCount, toInsert = _a.toInsert;\n        var _b;\n        var menuEntriesToInsert = toInsert.map(function (group) {\n            var contextKeyService = _this.contextKeyService.createScoped();\n            contextKeyService.createKey('scmProvider', group.provider.contextValue);\n            contextKeyService.createKey('scmResourceGroup', getSCMResourceContextKey(group));\n            var resourceGroupMenu = _this.menuService.createMenu(actions_1.MenuId.SCMResourceGroupContext, contextKeyService);\n            var resourceMenu = _this.menuService.createMenu(actions_1.MenuId.SCMResourceContext, contextKeyService);\n            _this.resourceGroupMenus.set(group, { resourceGroupMenu: resourceGroupMenu, resourceMenu: resourceMenu });\n            return {\n                group: group,\n                dispose: function () {\n                    contextKeyService.dispose();\n                    resourceGroupMenu.dispose();\n                    resourceMenu.dispose();\n                }\n            };\n        });\n        var deleted = (_b = this.resourceGroupMenuEntries).splice.apply(_b, [start, deleteCount].concat(menuEntriesToInsert));\n        for (var _i = 0, deleted_1 = deleted; _i < deleted_1.length; _i++) {\n            var entry = deleted_1[_i];\n            this.resourceGroupMenus.delete(entry.group);\n            entry.dispose();\n        }\n    };\n    SCMMenus.prototype.dispose = function () {\n        lifecycle_1.dispose(this.disposables);\n        lifecycle_1.dispose(this.resourceGroupMenuEntries);\n        this.resourceGroupMenus.clear();\n    };\n    SCMMenus = tslib_1.__decorate([\n        tslib_1.__param(1, contextkey_1.IContextKeyService),\n        tslib_1.__param(2, actions_1.IMenuService),\n        tslib_1.__param(3, contextView_1.IContextMenuService)\n    ], SCMMenus);\n    return SCMMenus;\n}());\nexports.SCMMenus = SCMMenus;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmMenus.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmMenus.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/scmViewlet';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IMenuService, MenuId, IMenu } from 'vs/platform/actions/common/actions';\nimport { IAction } from 'vs/base/common/actions';\nimport { fillInContextMenuActions, fillInActionBarActions } from 'vs/platform/actions/browser/menuItemActionItem';\nimport { ISCMProvider, ISCMResource, ISCMResourceGroup } from 'vs/workbench/contrib/scm/common/scm';\nimport { isSCMResource } from './scmUtil';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { equals } from 'vs/base/common/arrays';\nimport { ISplice } from 'vs/base/common/sequence';\n\nfunction actionEquals(a: IAction, b: IAction): boolean {\n\treturn a.id === b.id;\n}\n\ninterface ISCMResourceGroupMenuEntry extends IDisposable {\n\treadonly group: ISCMResourceGroup;\n}\n\ninterface ISCMMenus {\n\treadonly resourceGroupMenu: IMenu;\n\treadonly resourceMenu: IMenu;\n}\n\nexport function getSCMResourceContextKey(resource: ISCMResourceGroup | ISCMResource): string {\n\treturn isSCMResource(resource) ? resource.resourceGroup.id : resource.id;\n}\n\nexport class SCMMenus implements IDisposable {\n\n\tprivate contextKeyService: IContextKeyService;\n\tprivate titleMenu: IMenu;\n\tprivate titleActions: IAction[] = [];\n\tprivate titleSecondaryActions: IAction[] = [];\n\n\tprivate readonly _onDidChangeTitle = new Emitter<void>();\n\treadonly onDidChangeTitle: Event<void> = this._onDidChangeTitle.event;\n\n\tprivate readonly resourceGroupMenuEntries: ISCMResourceGroupMenuEntry[] = [];\n\tprivate readonly resourceGroupMenus = new Map<ISCMResourceGroup, ISCMMenus>();\n\n\tprivate readonly disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\tprovider: ISCMProvider | undefined,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tthis.contextKeyService = contextKeyService.createScoped();\n\t\tconst scmProviderKey = this.contextKeyService.createKey<string | undefined>('scmProvider', undefined);\n\n\t\tif (provider) {\n\t\t\tscmProviderKey.set(provider.contextValue);\n\t\t\tthis.onDidSpliceGroups({ start: 0, deleteCount: 0, toInsert: provider.groups.elements });\n\t\t\tprovider.groups.onDidSplice(this.onDidSpliceGroups, this, this.disposables);\n\t\t} else {\n\t\t\tscmProviderKey.set('');\n\t\t}\n\n\t\tthis.titleMenu = this.menuService.createMenu(MenuId.SCMTitle, this.contextKeyService);\n\t\tthis.disposables.push(this.titleMenu);\n\n\t\tthis.titleMenu.onDidChange(this.updateTitleActions, this, this.disposables);\n\t\tthis.updateTitleActions();\n\t}\n\n\tprivate updateTitleActions(): void {\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\n\t\tfillInActionBarActions(this.titleMenu, { shouldForwardArgs: true }, { primary, secondary });\n\n\t\tif (equals(primary, this.titleActions, actionEquals) && equals(secondary, this.titleSecondaryActions, actionEquals)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.titleActions = primary;\n\t\tthis.titleSecondaryActions = secondary;\n\n\t\tthis._onDidChangeTitle.fire();\n\t}\n\n\tgetTitleActions(): IAction[] {\n\t\treturn this.titleActions;\n\t}\n\n\tgetTitleSecondaryActions(): IAction[] {\n\t\treturn this.titleSecondaryActions;\n\t}\n\n\tgetResourceGroupContextActions(group: ISCMResourceGroup): IAction[] {\n\t\treturn this.getActions(MenuId.SCMResourceGroupContext, group).secondary;\n\t}\n\n\tgetResourceContextActions(resource: ISCMResource): IAction[] {\n\t\treturn this.getActions(MenuId.SCMResourceContext, resource).secondary;\n\t}\n\n\tprivate getActions(menuId: MenuId, resource: ISCMResourceGroup | ISCMResource): { primary: IAction[]; secondary: IAction[]; } {\n\t\tconst contextKeyService = this.contextKeyService.createScoped();\n\t\tcontextKeyService.createKey('scmResourceGroup', getSCMResourceContextKey(resource));\n\n\t\tconst menu = this.menuService.createMenu(menuId, contextKeyService);\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\t\tconst result = { primary, secondary };\n\t\tfillInContextMenuActions(menu, { shouldForwardArgs: true }, result, this.contextMenuService, g => /^inline/.test(g));\n\n\t\tmenu.dispose();\n\t\tcontextKeyService.dispose();\n\n\t\treturn result;\n\t}\n\n\tgetResourceGroupMenu(group: ISCMResourceGroup): IMenu {\n\t\tif (!this.resourceGroupMenus.has(group)) {\n\t\t\tthrow new Error('SCM Resource Group menu not found');\n\t\t}\n\n\t\treturn this.resourceGroupMenus.get(group)!.resourceGroupMenu;\n\t}\n\n\tgetResourceMenu(group: ISCMResourceGroup): IMenu {\n\t\tif (!this.resourceGroupMenus.has(group)) {\n\t\t\tthrow new Error('SCM Resource Group menu not found');\n\t\t}\n\n\t\treturn this.resourceGroupMenus.get(group)!.resourceMenu;\n\t}\n\n\tprivate onDidSpliceGroups({ start, deleteCount, toInsert }: ISplice<ISCMResourceGroup>): void {\n\t\tconst menuEntriesToInsert = toInsert.map<ISCMResourceGroupMenuEntry>(group => {\n\t\t\tconst contextKeyService = this.contextKeyService.createScoped();\n\t\t\tcontextKeyService.createKey('scmProvider', group.provider.contextValue);\n\t\t\tcontextKeyService.createKey('scmResourceGroup', getSCMResourceContextKey(group));\n\n\t\t\tconst resourceGroupMenu = this.menuService.createMenu(MenuId.SCMResourceGroupContext, contextKeyService);\n\t\t\tconst resourceMenu = this.menuService.createMenu(MenuId.SCMResourceContext, contextKeyService);\n\n\t\t\tthis.resourceGroupMenus.set(group, { resourceGroupMenu, resourceMenu });\n\n\t\t\treturn {\n\t\t\t\tgroup,\n\t\t\t\tdispose() {\n\t\t\t\t\tcontextKeyService.dispose();\n\t\t\t\t\tresourceGroupMenu.dispose();\n\t\t\t\t\tresourceMenu.dispose();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tconst deleted = this.resourceGroupMenuEntries.splice(start, deleteCount, ...menuEntriesToInsert);\n\n\t\tfor (const entry of deleted) {\n\t\t\tthis.resourceGroupMenus.delete(entry.group);\n\t\t\tentry.dispose();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t\tdispose(this.resourceGroupMenuEntries);\n\t\tthis.resourceGroupMenus.clear();\n\t}\n}\n"]}]}