{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/linesOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/linesOperations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar coreCommands_1 = require(\"vs/editor/browser/controller/coreCommands\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar replaceCommand_1 = require(\"vs/editor/common/commands/replaceCommand\");\nvar trimTrailingWhitespaceCommand_1 = require(\"vs/editor/common/commands/trimTrailingWhitespaceCommand\");\nvar cursorTypeOperations_1 = require(\"vs/editor/common/controller/cursorTypeOperations\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar copyLinesCommand_1 = require(\"vs/editor/contrib/linesOperations/copyLinesCommand\");\nvar moveLinesCommand_1 = require(\"vs/editor/contrib/linesOperations/moveLinesCommand\");\nvar sortLinesCommand_1 = require(\"vs/editor/contrib/linesOperations/sortLinesCommand\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\n// copy lines\nvar AbstractCopyLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractCopyLinesAction, _super);\n    function AbstractCopyLinesAction(down, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.down = down;\n        return _this;\n    }\n    AbstractCopyLinesAction.prototype.run = function (_accessor, editor) {\n        var commands = [];\n        var selections = editor.getSelections() || [];\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n            commands.push(new copyLinesCommand_1.CopyLinesCommand(selection, this.down));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return AbstractCopyLinesAction;\n}(editorExtensions_1.EditorAction));\nvar CopyLinesUpAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyLinesUpAction, _super);\n    function CopyLinesUpAction() {\n        return _super.call(this, false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow,\n                linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        }) || this;\n    }\n    return CopyLinesUpAction;\n}(AbstractCopyLinesAction));\nvar CopyLinesDownAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyLinesDownAction, _super);\n    function CopyLinesDownAction() {\n        return _super.call(this, true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow,\n                linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        }) || this;\n    }\n    return CopyLinesDownAction;\n}(AbstractCopyLinesAction));\n// move lines\nvar AbstractMoveLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractMoveLinesAction, _super);\n    function AbstractMoveLinesAction(down, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.down = down;\n        return _this;\n    }\n    AbstractMoveLinesAction.prototype.run = function (_accessor, editor) {\n        var commands = [];\n        var selections = editor.getSelections() || [];\n        var autoIndent = editor.getConfiguration().autoIndent;\n        for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\n            var selection = selections_2[_i];\n            commands.push(new moveLinesCommand_1.MoveLinesCommand(selection, this.down, autoIndent));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return AbstractMoveLinesAction;\n}(editorExtensions_1.EditorAction));\nvar MoveLinesUpAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveLinesUpAction, _super);\n    function MoveLinesUpAction() {\n        return _super.call(this, false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow,\n                linux: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        }) || this;\n    }\n    return MoveLinesUpAction;\n}(AbstractMoveLinesAction));\nvar MoveLinesDownAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveLinesDownAction, _super);\n    function MoveLinesDownAction() {\n        return _super.call(this, true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow,\n                linux: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        }) || this;\n    }\n    return MoveLinesDownAction;\n}(AbstractMoveLinesAction));\nvar AbstractSortLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractSortLinesAction, _super);\n    function AbstractSortLinesAction(descending, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.descending = descending;\n        return _this;\n    }\n    AbstractSortLinesAction.prototype.run = function (_accessor, editor) {\n        var selections = editor.getSelections() || [];\n        for (var _i = 0, selections_3 = selections; _i < selections_3.length; _i++) {\n            var selection = selections_3[_i];\n            if (!sortLinesCommand_1.SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        var commands = [];\n        for (var i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new sortLinesCommand_1.SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return AbstractSortLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.AbstractSortLinesAction = AbstractSortLinesAction;\nvar SortLinesAscendingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SortLinesAscendingAction, _super);\n    function SortLinesAscendingAction() {\n        return _super.call(this, false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return SortLinesAscendingAction;\n}(AbstractSortLinesAction));\nexports.SortLinesAscendingAction = SortLinesAscendingAction;\nvar SortLinesDescendingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SortLinesDescendingAction, _super);\n    function SortLinesDescendingAction() {\n        return _super.call(this, true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return SortLinesDescendingAction;\n}(AbstractSortLinesAction));\nexports.SortLinesDescendingAction = SortLinesDescendingAction;\nvar TrimTrailingWhitespaceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TrimTrailingWhitespaceAction, _super);\n    function TrimTrailingWhitespaceAction() {\n        return _super.call(this, {\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    TrimTrailingWhitespaceAction.prototype.run = function (_accessor, editor, args) {\n        var cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(function (s) { return new position_1.Position(s.positionLineNumber, s.positionColumn); });\n        }\n        var selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        var command = new trimTrailingWhitespaceCommand_1.TrimTrailingWhitespaceCommand(selection, cursors);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    };\n    TrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\n    return TrimTrailingWhitespaceAction;\n}(editorExtensions_1.EditorAction));\nexports.TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction;\nvar DeleteLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteLinesAction, _super);\n    function DeleteLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_K,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DeleteLinesAction.prototype.run = function (_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var ops = this._getLinesToRemove(editor);\n        var model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        var linesDeleted = 0;\n        var edits = [];\n        var cursorState = [];\n        for (var i = 0, len = ops.length; i < len; i++) {\n            var op = ops[i];\n            var startLineNumber = op.startLineNumber;\n            var endLineNumber = op.endLineNumber;\n            var startColumn = 1;\n            var endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(editOperation_1.EditOperation.replace(new selection_1.Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new selection_1.Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    };\n    DeleteLinesAction.prototype._getLinesToRemove = function (editor) {\n        // Construct delete operations\n        var operations = editor.getSelections().map(function (s) {\n            var endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort(function (a, b) {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        var mergedOperations = [];\n        var previousOperation = operations[0];\n        for (var i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    };\n    return DeleteLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.DeleteLinesAction = DeleteLinesAction;\nvar IndentLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentLinesAction, _super);\n    function IndentLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    IndentLinesAction.prototype.run = function (_accessor, editor) {\n        var cursors = editor._getCursors();\n        if (!cursors) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.indent(cursors.context.config, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    };\n    return IndentLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.IndentLinesAction = IndentLinesAction;\nvar OutdentLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OutdentLinesAction, _super);\n    function OutdentLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    OutdentLinesAction.prototype.run = function (_accessor, editor) {\n        coreCommands_1.CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    };\n    return OutdentLinesAction;\n}(editorExtensions_1.EditorAction));\nvar InsertLineBeforeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertLineBeforeAction, _super);\n    function InsertLineBeforeAction() {\n        return _super.call(this, {\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Enter,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    InsertLineBeforeAction.prototype.run = function (_accessor, editor) {\n        var cursors = editor._getCursors();\n        if (!cursors) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.lineInsertBefore(cursors.context.config, editor.getModel(), editor.getSelections()));\n    };\n    return InsertLineBeforeAction;\n}(editorExtensions_1.EditorAction));\nexports.InsertLineBeforeAction = InsertLineBeforeAction;\nvar InsertLineAfterAction = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertLineAfterAction, _super);\n    function InsertLineAfterAction() {\n        return _super.call(this, {\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Enter,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    InsertLineAfterAction.prototype.run = function (_accessor, editor) {\n        var cursors = editor._getCursors();\n        if (!cursors) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, cursorTypeOperations_1.TypeOperations.lineInsertAfter(cursors.context.config, editor.getModel(), editor.getSelections()));\n    };\n    return InsertLineAfterAction;\n}(editorExtensions_1.EditorAction));\nexports.InsertLineAfterAction = InsertLineAfterAction;\nvar AbstractDeleteAllToBoundaryAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractDeleteAllToBoundaryAction, _super);\n    function AbstractDeleteAllToBoundaryAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AbstractDeleteAllToBoundaryAction.prototype.run = function (_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var primaryCursor = editor.getSelection();\n        var rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        var effectiveRanges = [];\n        for (var i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            var range = rangesToDelete[i];\n            var nextRange = rangesToDelete[i + 1];\n            if (range_1.Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = range_1.Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        var endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        var edits = effectiveRanges.map(function (range) {\n            return editOperation_1.EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    };\n    return AbstractDeleteAllToBoundaryAction;\n}(editorExtensions_1.EditorAction));\nexports.AbstractDeleteAllToBoundaryAction = AbstractDeleteAllToBoundaryAction;\nvar DeleteAllLeftAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteAllLeftAction, _super);\n    function DeleteAllLeftAction() {\n        return _super.call(this, {\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DeleteAllLeftAction.prototype._getEndCursorState = function (primaryCursor, rangesToDelete) {\n        var endPrimaryCursor = null;\n        var endCursorState = [];\n        var deletedLines = 0;\n        rangesToDelete.forEach(function (range) {\n            var endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                var newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new selection_1.Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new selection_1.Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    };\n    DeleteAllLeftAction.prototype._getRangesToDelete = function (editor) {\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        var rangesToDelete = selections;\n        var model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(range_1.Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(function (selection) {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    var deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    var deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n                    return new range_1.Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new range_1.Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return selection;\n            }\n        });\n        return rangesToDelete;\n    };\n    return DeleteAllLeftAction;\n}(AbstractDeleteAllToBoundaryAction));\nexports.DeleteAllLeftAction = DeleteAllLeftAction;\nvar DeleteAllRightAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteAllRightAction, _super);\n    function DeleteAllRightAction() {\n        return _super.call(this, {\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_K, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Delete] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DeleteAllRightAction.prototype._getEndCursorState = function (primaryCursor, rangesToDelete) {\n        var endPrimaryCursor = null;\n        var endCursorState = [];\n        for (var i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            var range = rangesToDelete[i];\n            var endCursor = new selection_1.Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    };\n    DeleteAllRightAction.prototype._getRangesToDelete = function (editor) {\n        var model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        var rangesToDelete = selections.map(function (sel) {\n            if (sel.isEmpty()) {\n                var maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new range_1.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new range_1.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(range_1.Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    };\n    return DeleteAllRightAction;\n}(AbstractDeleteAllToBoundaryAction));\nexports.DeleteAllRightAction = DeleteAllRightAction;\nvar JoinLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(JoinLinesAction, _super);\n    function JoinLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_J },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    JoinLinesAction.prototype.run = function (_accessor, editor) {\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        var primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(range_1.Range.compareRangesUsingStarts);\n        var reducedSelections = [];\n        var lastSelection = selections.reduce(function (previousValue, currentValue) {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new selection_1.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new selection_1.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        var model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        var edits = [];\n        var endCursorState = [];\n        var endPrimaryCursor = primaryCursor;\n        var lineOffset = 0;\n        for (var i = 0, len = reducedSelections.length; i < len; i++) {\n            var selection = reducedSelections[i];\n            var startLineNumber = selection.startLineNumber;\n            var startColumn = 1;\n            var columnDeltaOffset = 0;\n            var endLineNumber = void 0, endColumn = void 0;\n            var selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                var position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            var trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (var i_1 = startLineNumber + 1; i_1 <= endLineNumber; i_1++) {\n                var lineText = model.getLineContent(i_1);\n                var firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i_1);\n                if (firstNonWhitespaceIdx >= 1) {\n                    var insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    var lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            var deleteSelection = new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                var resultSelection = void 0;\n                if (selection.isEmpty()) {\n                    edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new selection_1.Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new selection_1.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new selection_1.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (range_1.Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    };\n    return JoinLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.JoinLinesAction = JoinLinesAction;\nvar TransposeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TransposeAction, _super);\n    function TransposeAction() {\n        return _super.call(this, {\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n            alias: 'Transpose characters around the cursor',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    TransposeAction.prototype.run = function (_accessor, editor) {\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        var model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        var commands = [];\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            var cursor = selection.getStartPosition();\n            var maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                var deleteSelection = new range_1.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new replaceCommand_1.ReplaceCommand(new selection_1.Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                var deleteSelection = new range_1.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(deleteSelection, chars, new selection_1.Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return TransposeAction;\n}(editorExtensions_1.EditorAction));\nexports.TransposeAction = TransposeAction;\nvar AbstractCaseAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractCaseAction, _super);\n    function AbstractCaseAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AbstractCaseAction.prototype.run = function (_accessor, editor) {\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        var model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        var commands = [];\n        for (var i = 0, len = selections.length; i < len; i++) {\n            var selection = selections[i];\n            if (selection.isEmpty()) {\n                var cursor = selection.getStartPosition();\n                var word = model.getWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                var wordRange = new range_1.Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                var text = model.getValueInRange(wordRange);\n                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(wordRange, this._modifyText(text), new selection_1.Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));\n            }\n            else {\n                var text = model.getValueInRange(selection);\n                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(selection, this._modifyText(text), selection));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return AbstractCaseAction;\n}(editorExtensions_1.EditorAction));\nexports.AbstractCaseAction = AbstractCaseAction;\nvar UpperCaseAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UpperCaseAction, _super);\n    function UpperCaseAction() {\n        return _super.call(this, {\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    UpperCaseAction.prototype._modifyText = function (text) {\n        return text.toLocaleUpperCase();\n    };\n    return UpperCaseAction;\n}(AbstractCaseAction));\nexports.UpperCaseAction = UpperCaseAction;\nvar LowerCaseAction = /** @class */ (function (_super) {\n    tslib_1.__extends(LowerCaseAction, _super);\n    function LowerCaseAction() {\n        return _super.call(this, {\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    LowerCaseAction.prototype._modifyText = function (text) {\n        return text.toLocaleLowerCase();\n    };\n    return LowerCaseAction;\n}(AbstractCaseAction));\nexports.LowerCaseAction = LowerCaseAction;\neditorExtensions_1.registerEditorAction(CopyLinesUpAction);\neditorExtensions_1.registerEditorAction(CopyLinesDownAction);\neditorExtensions_1.registerEditorAction(MoveLinesUpAction);\neditorExtensions_1.registerEditorAction(MoveLinesDownAction);\neditorExtensions_1.registerEditorAction(SortLinesAscendingAction);\neditorExtensions_1.registerEditorAction(SortLinesDescendingAction);\neditorExtensions_1.registerEditorAction(TrimTrailingWhitespaceAction);\neditorExtensions_1.registerEditorAction(DeleteLinesAction);\neditorExtensions_1.registerEditorAction(IndentLinesAction);\neditorExtensions_1.registerEditorAction(OutdentLinesAction);\neditorExtensions_1.registerEditorAction(InsertLineBeforeAction);\neditorExtensions_1.registerEditorAction(InsertLineAfterAction);\neditorExtensions_1.registerEditorAction(DeleteAllLeftAction);\neditorExtensions_1.registerEditorAction(DeleteAllRightAction);\neditorExtensions_1.registerEditorAction(JoinLinesAction);\neditorExtensions_1.registerEditorAction(TransposeAction);\neditorExtensions_1.registerEditorAction(UpperCaseAction);\neditorExtensions_1.registerEditorAction(LowerCaseAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/linesOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/linesOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { CoreEditingCommands } from 'vs/editor/browser/controller/coreCommands';\nimport { ICodeEditor, IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection } from 'vs/editor/common/commands/replaceCommand';\nimport { TrimTrailingWhitespaceCommand } from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport { TypeOperations } from 'vs/editor/common/controller/cursorTypeOperations';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { CopyLinesCommand } from 'vs/editor/contrib/linesOperations/copyLinesCommand';\nimport { MoveLinesCommand } from 'vs/editor/contrib/linesOperations/moveLinesCommand';\nimport { SortLinesCommand } from 'vs/editor/contrib/linesOperations/sortLinesCommand';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\n// copy lines\n\nabstract class AbstractCopyLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections() || [];\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new CopyLinesCommand(selection, this.down));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.copyLinesUpAction',\n\t\t\tlabel: nls.localize('lines.copyUp', \"Copy Line Up\"),\n\t\t\talias: 'Copy Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.copyLinesDownAction',\n\t\t\tlabel: nls.localize('lines.copyDown', \"Copy Line Down\"),\n\t\t\talias: 'Copy Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n}\n\n// move lines\n\nabstract class AbstractMoveLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\n\t\tlet commands: ICommand[] = [];\n\t\tlet selections = editor.getSelections() || [];\n\t\tlet autoIndent = editor.getConfiguration().autoIndent;\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new MoveLinesCommand(selection, this.down, autoIndent));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.moveLinesUpAction',\n\t\t\tlabel: nls.localize('lines.moveUp', \"Move Line Up\"),\n\t\t\talias: 'Move Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n\t\t\t\torder: 3\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.moveLinesDownAction',\n\t\t\tlabel: nls.localize('lines.moveDown', \"Move Line Down\"),\n\t\t\talias: 'Move Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n\t\t\t\torder: 4\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport abstract class AbstractSortLinesAction extends EditorAction {\n\tprivate readonly descending: boolean;\n\n\tconstructor(descending: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.descending = descending;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections() || [];\n\n\t\tfor (const selection of selections) {\n\t\t\tif (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new SortLinesCommand(selections[i], this.descending);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.sortLinesAscending',\n\t\t\tlabel: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n\t\t\talias: 'Sort Lines Ascending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.sortLinesDescending',\n\t\t\tlabel: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n\t\t\talias: 'Sort Lines Descending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.trimTrailingWhitespace';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TrimTrailingWhitespaceAction.ID,\n\t\t\tlabel: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n\t\t\talias: 'Trim Trailing Whitespace',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_X),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\n\t\tlet cursors: Position[] = [];\n\t\tif (args.reason === 'auto-save') {\n\t\t\t// See https://github.com/editorconfig/editorconfig-vscode/issues/47\n\t\t\t// It is very convenient for the editor config extension to invoke this action.\n\t\t\t// So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n\t\t\tcursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n\t\t}\n\n\t\tlet selection = editor.getSelection();\n\t\tif (selection === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet command = new TrimTrailingWhitespaceCommand(selection, cursors);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// delete lines\n\ninterface IDeleteLinesOperation {\n\tstartLineNumber: number;\n\tselectionStartColumn: number;\n\tendLineNumber: number;\n\tpositionColumn: number;\n}\n\nexport class DeleteLinesAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.deleteLines',\n\t\t\tlabel: nls.localize('lines.delete', \"Delete Line\"),\n\t\t\talias: 'Delete Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_K,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet ops = this._getLinesToRemove(editor);\n\n\t\tlet model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\t// Model is empty\n\t\t\treturn;\n\t\t}\n\n\t\tlet linesDeleted = 0;\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\t\tlet cursorState: Selection[] = [];\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tlet startLineNumber = op.startLineNumber;\n\t\t\tlet endLineNumber = op.endLineNumber;\n\n\t\t\tlet startColumn = 1;\n\t\t\tlet endColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\tif (endLineNumber < model.getLineCount()) {\n\t\t\t\tendLineNumber += 1;\n\t\t\t\tendColumn = 1;\n\t\t\t} else if (startLineNumber > 1) {\n\t\t\t\tstartLineNumber -= 1;\n\t\t\t\tstartColumn = model.getLineMaxColumn(startLineNumber);\n\t\t\t}\n\n\t\t\tedits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n\t\t\tcursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n\t\t\tlinesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, cursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprivate _getLinesToRemove(editor: IActiveCodeEditor): IDeleteLinesOperation[] {\n\t\t// Construct delete operations\n\t\tlet operations: IDeleteLinesOperation[] = editor.getSelections().map((s) => {\n\n\t\t\tlet endLineNumber = s.endLineNumber;\n\t\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\t\tendLineNumber -= 1;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\tselectionStartColumn: s.selectionStartColumn,\n\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\tpositionColumn: s.positionColumn\n\t\t\t};\n\t\t});\n\n\t\t// Sort delete operations\n\t\toperations.sort((a, b) => {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t});\n\n\t\t// Merge delete operations which are adjacent or overlapping\n\t\tlet mergedOperations: IDeleteLinesOperation[] = [];\n\t\tlet previousOperation = operations[0];\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tif (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n\t\t\t\t// Merge current operations into the previous one\n\t\t\t\tpreviousOperation.endLineNumber = operations[i].endLineNumber;\n\t\t\t} else {\n\t\t\t\t// Push previous operation\n\t\t\t\tmergedOperations.push(previousOperation);\n\t\t\t\tpreviousOperation = operations[i];\n\t\t\t}\n\t\t}\n\t\t// Push the last operation\n\t\tmergedOperations.push(previousOperation);\n\n\t\treturn mergedOperations;\n\t}\n}\n\nexport class IndentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.indentLines',\n\t\t\tlabel: nls.localize('lines.indent', \"Indent Line\"),\n\t\t\talias: 'Indent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_CLOSE_SQUARE_BRACKET,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst cursors = editor._getCursors();\n\t\tif (!cursors) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.indent(cursors.context.config, editor.getModel(), editor.getSelections()));\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass OutdentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.outdentLines',\n\t\t\tlabel: nls.localize('lines.outdent', \"Outdent Line\"),\n\t\t\talias: 'Outdent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_OPEN_SQUARE_BRACKET,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tCoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n\t}\n}\n\nexport class InsertLineBeforeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineBefore',\n\t\t\tlabel: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n\t\t\talias: 'Insert Line Above',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst cursors = editor._getCursors();\n\t\tif (!cursors) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.lineInsertBefore(cursors.context.config, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport class InsertLineAfterAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineAfter',\n\t\t\tlabel: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n\t\t\talias: 'Insert Line Below',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst cursors = editor._getCursors();\n\t\tif (!cursors) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.lineInsertAfter(cursors.context.config, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport abstract class AbstractDeleteAllToBoundaryAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst primaryCursor = editor.getSelection();\n\n\t\tlet rangesToDelete = this._getRangesToDelete(editor);\n\t\t// merge overlapping selections\n\t\tlet effectiveRanges: Range[] = [];\n\n\t\tfor (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n\t\t\tlet range = rangesToDelete[i];\n\t\t\tlet nextRange = rangesToDelete[i + 1];\n\n\t\t\tif (Range.intersectRanges(range, nextRange) === null) {\n\t\t\t\teffectiveRanges.push(range);\n\t\t\t} else {\n\t\t\t\trangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n\t\t\t}\n\t\t}\n\n\t\teffectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n\n\t\tlet endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = effectiveRanges.map(range => {\n\t\t\treturn EditOperation.replace(range, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t */\n\tprotected abstract _getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[];\n\n\tprotected abstract _getRangesToDelete(editor: IActiveCodeEditor): Range[];\n}\n\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllLeft',\n\t\t\tlabel: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n\t\t\talias: 'Delete All Left',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\t_getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tlet endCursorState: Selection[] = [];\n\t\tlet deletedLines = 0;\n\n\t\trangesToDelete.forEach(range => {\n\t\t\tlet endCursor;\n\t\t\tif (range.endColumn === 1 && deletedLines > 0) {\n\t\t\t\tlet newStartLine = range.startLineNumber - deletedLines;\n\t\t\t\tendCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n\t\t\t} else {\n\t\t\t\tendCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n\t\t\t}\n\n\t\t\tdeletedLines += range.endLineNumber - range.startLineNumber;\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t});\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\t_getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections;\n\t\tlet model = editor.getModel();\n\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\trangesToDelete = rangesToDelete.map(selection => {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (selection.startColumn === 1) {\n\t\t\t\t\tlet deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n\t\t\t\t\tlet deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n\t\t\t\t\treturn new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t});\n\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllRight',\n\t\t\tlabel: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n\t\t\talias: 'Delete All Right',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_K, secondary: [KeyMod.CtrlCmd | KeyCode.Delete] },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\t_getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tlet endCursorState: Selection[] = [];\n\t\tfor (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n\t\t\tlet range = rangesToDelete[i];\n\t\t\tlet endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t}\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\t_getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet selections = editor.getSelections();\n\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections.map((sel) => {\n\t\t\tif (sel.isEmpty()) {\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n\n\t\t\t\tif (sel.startColumn === maxColumn) {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sel;\n\t\t});\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class JoinLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.joinLines',\n\t\t\tlabel: nls.localize('lines.joinLines', \"Join Lines\"),\n\t\t\talias: 'Join Lines',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KEY_J },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet primaryCursor = editor.getSelection();\n\t\tif (primaryCursor === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\t\tlet reducedSelections: Selection[] = [];\n\n\t\tlet lastSelection = selections.reduce((previousValue, currentValue) => {\n\t\t\tif (previousValue.isEmpty()) {\n\t\t\t\tif (previousValue.endLineNumber === currentValue.startLineNumber) {\n\t\t\t\t\tif (primaryCursor!.equalsSelection(previousValue)) {\n\t\t\t\t\t\tprimaryCursor = currentValue;\n\t\t\t\t\t}\n\t\t\t\t\treturn currentValue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treducedSelections.push(lastSelection);\n\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\t\tlet endCursorState: Selection[] = [];\n\t\tlet endPrimaryCursor = primaryCursor;\n\t\tlet lineOffset = 0;\n\n\t\tfor (let i = 0, len = reducedSelections.length; i < len; i++) {\n\t\t\tlet selection = reducedSelections[i];\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet startColumn = 1;\n\t\t\tlet columnDeltaOffset = 0;\n\t\t\tlet endLineNumber: number,\n\t\t\t\tendColumn: number;\n\n\t\t\tlet selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n\n\t\t\tif (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\tlet position = selection.getStartPosition();\n\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\tendLineNumber = startLineNumber + 1;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t\t} else {\n\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tendLineNumber = selection.endLineNumber;\n\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t}\n\n\t\t\tlet trimmedLinesContent = model.getLineContent(startLineNumber);\n\n\t\t\tfor (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n\t\t\t\tlet lineText = model.getLineContent(i);\n\t\t\t\tlet firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n\n\t\t\t\tif (firstNonWhitespaceIdx >= 1) {\n\t\t\t\t\tlet insertSpace = true;\n\t\t\t\t\tif (trimmedLinesContent === '') {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n\t\t\t\t\t\ttrimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t\ttrimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n\t\t\t\t\t}\n\n\t\t\t\t\tlet lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n\n\t\t\t\t\ttrimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n\n\t\t\t\t\tif (insertSpace) {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcolumnDeltaOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\n\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\tlet resultSelection: Selection;\n\n\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\tresultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n\t\t\t\t} else {\n\t\t\t\t\tif (selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.endLineNumber - lineOffset, selection.endColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n\t\t\t\t\tendPrimaryCursor = resultSelection;\n\t\t\t\t} else {\n\t\t\t\t\tendCursorState.push(resultSelection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n\t\t}\n\n\t\tendCursorState.unshift(endPrimaryCursor);\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TransposeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transpose',\n\t\t\tlabel: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n\t\t\talias: 'Transpose characters around the cursor',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tlet selection = selections[i];\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet cursor = selection.getStartPosition();\n\t\t\tlet maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n\n\t\t\tif (cursor.column >= maxColumn) {\n\t\t\t\tif (cursor.lineNumber === model.getLineCount()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// The cursor is at the end of current line and current line is not empty\n\t\t\t\t// then we transpose the character before the cursor and the line break if there is any following line.\n\t\t\t\tlet deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n\t\t\t\tlet chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\n\t\t\t\tcommands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n\t\t\t} else {\n\t\t\t\tlet deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n\t\t\t\tlet chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\t\t\t\tcommands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,\n\t\t\t\t\tnew Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport abstract class AbstractCaseAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tlet selection = selections[i];\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tlet cursor = selection.getStartPosition();\n\t\t\t\tlet word = model.getWordAtPosition(cursor);\n\n\t\t\t\tif (!word) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n\t\t\t\tlet text = model.getValueInRange(wordRange);\n\t\t\t\tcommands.push(new ReplaceCommandThatPreservesSelection(wordRange, this._modifyText(text),\n\t\t\t\t\tnew Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));\n\n\t\t\t} else {\n\t\t\t\tlet text = model.getValueInRange(selection);\n\t\t\t\tcommands.push(new ReplaceCommandThatPreservesSelection(selection, this._modifyText(text), selection));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _modifyText(text: string): string;\n}\n\nexport class UpperCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToUppercase',\n\t\t\tlabel: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n\t\t\talias: 'Transform to Uppercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string): string {\n\t\treturn text.toLocaleUpperCase();\n\t}\n}\n\nexport class LowerCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToLowercase',\n\t\t\tlabel: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n\t\t\talias: 'Transform to Lowercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string): string {\n\t\treturn text.toLocaleLowerCase();\n\t}\n}\n\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\n"]}]}