{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar viewsViewlet_1 = require(\"vs/workbench/browser/parts/views/viewsViewlet\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar search_1 = require(\"vs/workbench/services/search/common/search\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar SearchViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(SearchViewlet, _super);\n    function SearchViewlet(layoutService, telemetryService, contextService, storageService, configurationService, instantiationService, themeService, contextMenuService, extensionService) {\n        var _this = _super.call(this, search_1.VIEWLET_ID, search_1.VIEWLET_ID + \".state\", true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) || this;\n        _this.contextService = contextService;\n        _this.storageService = storageService;\n        _this.instantiationService = instantiationService;\n        return _this;\n    }\n    SearchViewlet.prototype.getTitle = function () {\n        return platform_1.Registry.as(viewlet_1.Extensions.Viewlets).getViewlet(this.getId()).name;\n    };\n    SearchViewlet.prototype.getSearchView = function () {\n        var view = _super.prototype.getView.call(this, search_1.VIEW_ID);\n        return view ? view : undefined;\n    };\n    SearchViewlet = tslib_1.__decorate([\n        tslib_1.__param(0, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, contextView_1.IContextMenuService),\n        tslib_1.__param(8, extensions_1.IExtensionService)\n    ], SearchViewlet);\n    return SearchViewlet;\n}(viewsViewlet_1.ViewContainerViewlet));\nexports.SearchViewlet = SearchViewlet;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchViewlet.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,gFAAuF;AACvF,8EAAqF;AACrF,oFAA6F;AAC7F,oEAA2E;AAC3E,oEAAkF;AAClF,8DAAqE;AACrE,gFAAuF;AACvF,sEAAsE;AACtE,2EAAkF;AAClF,iFAAuF;AACvF,qEAAiF;AAEjF,iEAAgE;AAChE,wDAA2E;AAE3E;IAAmC,yCAAoB;IAEtD,uBAC0B,aAAsC,EAC5C,gBAAmC,EAClB,cAAwC,EACjD,cAA+B,EACnC,oBAA2C,EACjC,oBAA2C,EAC7D,YAA2B,EACrB,kBAAuC,EACzC,gBAAmC;QATvD,YAWC,kBAAM,mBAAU,EAAK,mBAAU,WAAQ,EAAE,IAAI,EAAE,oBAAoB,EAAE,aAAa,EAAE,gBAAgB,EAAE,cAAc,EAAE,oBAAoB,EAAE,YAAY,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,cAAc,CAAC,SAC/M;QAToC,oBAAc,GAAd,cAAc,CAA0B;QACjD,oBAAc,GAAd,cAAc,CAAiB;QAEzB,0BAAoB,GAApB,oBAAoB,CAAuB;;IAM7E,CAAC;IAED,gCAAQ,GAAR;QACC,OAAO,mBAAQ,CAAC,EAAE,CAAkB,oBAAU,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC;IACxF,CAAC;IAED,qCAAa,GAAb;QACC,IAAM,IAAI,GAAG,iBAAM,OAAO,YAAC,gBAAO,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;IAC9C,CAAC;IAvBW,aAAa;QAGvB,mBAAA,uCAAuB,CAAA;QACvB,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,oCAAwB,CAAA;QACxB,mBAAA,yBAAe,CAAA;QACf,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,4BAAa,CAAA;QACb,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,8BAAiB,CAAA;OAXP,aAAa,CAwBzB;IAAD,oBAAC;CAAA,AAxBD,CAAmC,mCAAoB,GAwBtD;AAxBY,sCAAa","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ViewContainerViewlet } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { VIEWLET_ID, VIEW_ID } from 'vs/workbench/services/search/common/search';\nimport { SearchView } from 'vs/workbench/contrib/search/browser/searchView';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ViewletRegistry, Extensions } from 'vs/workbench/browser/viewlet';\n\nexport class SearchViewlet extends ViewContainerViewlet {\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService protected contextService: IWorkspaceContextService,\n\t\t@IStorageService protected storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tsuper(VIEWLET_ID, `${VIEWLET_ID}.state`, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\t}\n\n\tgetTitle(): string {\n\t\treturn Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlet(this.getId()).name;\n\t}\n\n\tgetSearchView(): SearchView | undefined {\n\t\tconst view = super.getView(VIEW_ID);\n\t\treturn view ? view as SearchView : undefined;\n\t}\n}"]}]}