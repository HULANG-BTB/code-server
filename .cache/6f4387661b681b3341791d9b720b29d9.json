{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/quickOpen/quickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/quickOpen/quickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/uri\", \"vs/editor/common/core/range\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/modes\", \"vs/editor/common/services/modelService\", \"vs/base/common/cancellation\", \"vs/editor/common/services/resolverService\"], function (require, exports, errors_1, uri_1, range_1, editorExtensions_1, modes_1, modelService_1, cancellation_1, resolverService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getDocumentSymbols(model, flat, token) {\n        let roots = [];\n        let promises = modes_1.DocumentSymbolProviderRegistry.all(model).map(support => {\n            return Promise.resolve(support.provideDocumentSymbols(model, token)).then(result => {\n                if (Array.isArray(result)) {\n                    roots.push(...result);\n                }\n            }, err => {\n                errors_1.onUnexpectedExternalError(err);\n            });\n        });\n        return Promise.all(promises).then(() => {\n            let flatEntries = [];\n            if (token.isCancellationRequested) {\n                return flatEntries;\n            }\n            if (flat) {\n                flatten(flatEntries, roots, '');\n            }\n            else {\n                flatEntries = roots;\n            }\n            flatEntries.sort(compareEntriesUsingStart);\n            return flatEntries;\n        });\n    }\n    exports.getDocumentSymbols = getDocumentSymbols;\n    function compareEntriesUsingStart(a, b) {\n        return range_1.Range.compareRangesUsingStarts(a.range, b.range);\n    }\n    function flatten(bucket, entries, overrideContainerLabel) {\n        for (let entry of entries) {\n            bucket.push({\n                kind: entry.kind,\n                name: entry.name,\n                detail: entry.detail,\n                containerName: entry.containerName || overrideContainerLabel,\n                range: entry.range,\n                selectionRange: entry.selectionRange,\n                children: undefined,\n            });\n            if (entry.children) {\n                flatten(bucket, entry.children, entry.name);\n            }\n        }\n    }\n    editorExtensions_1.registerLanguageCommand('_executeDocumentSymbolProvider', function (accessor, args) {\n        const { resource } = args;\n        if (!(resource instanceof uri_1.URI)) {\n            throw errors_1.illegalArgument('resource');\n        }\n        const model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (model) {\n            return getDocumentSymbols(model, false, cancellation_1.CancellationToken.None);\n        }\n        return accessor.get(resolverService_1.ITextModelService).createModelReference(resource).then(reference => {\n            return new Promise((resolve, reject) => {\n                try {\n                    const result = getDocumentSymbols(reference.object.textEditorModel, false, cancellation_1.CancellationToken.None);\n                    resolve(result);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }).finally(() => {\n                reference.dispose();\n            });\n        });\n    });\n});\n",null]}