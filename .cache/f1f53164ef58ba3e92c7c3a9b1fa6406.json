{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar Cache = /** @class */ (function () {\n    function Cache(task) {\n        this.task = task;\n        this.result = null;\n    }\n    Cache.prototype.get = function () {\n        var _this = this;\n        if (this.result) {\n            return this.result;\n        }\n        var cts = new cancellation_1.CancellationTokenSource();\n        var promise = this.task(cts.token);\n        promise.finally(function () { return cts.dispose(); });\n        this.result = {\n            promise: promise,\n            dispose: function () {\n                _this.result = null;\n                cts.cancel();\n                cts.dispose();\n            }\n        };\n        return this.result;\n    };\n    return Cache;\n}());\nexports.Cache = Cache;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4DAAyF;AAOzF;IAGC,eAAoB,IAA2C;QAA3C,SAAI,GAAJ,IAAI,CAAuC;QADvD,WAAM,GAA0B,IAAI,CAAC;IACsB,CAAC;IAEpE,mBAAG,GAAH;QAAA,iBAmBC;QAlBA,IAAI,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,IAAI,CAAC,MAAM,CAAC;SACnB;QAED,IAAM,GAAG,GAAG,IAAI,sCAAuB,EAAE,CAAC;QAC1C,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,CAAC,OAAO,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,EAAE,EAAb,CAAa,CAAC,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG;YACb,OAAO,SAAA;YACP,OAAO,EAAE;gBACR,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,GAAG,CAAC,MAAM,EAAE,CAAC;gBACb,GAAG,CAAC,OAAO,EAAE,CAAC;YACf,CAAC;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IACF,YAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,sBAAK","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\n\nexport interface CacheResult<T> {\n\tpromise: Promise<T>;\n\tdispose(): void;\n}\n\nexport class Cache<T> {\n\n\tprivate result: CacheResult<T> | null = null;\n\tconstructor(private task: (ct: CancellationToken) => Promise<T>) { }\n\n\tget(): CacheResult<T> {\n\t\tif (this.result) {\n\t\t\treturn this.result;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst promise = this.task(cts.token);\n\t\tpromise.finally(() => cts.dispose());\n\n\t\tthis.result = {\n\t\t\tpromise,\n\t\t\tdispose: () => {\n\t\t\t\tthis.result = null;\n\t\t\t\tcts.cancel();\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t};\n\n\t\treturn this.result;\n\t}\n}\n"]}]}