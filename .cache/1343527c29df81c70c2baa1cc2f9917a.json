{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/platform/log/common/log\"], function (require, exports, path, log_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function createSpdLogService(processName, logLevel, logsFolder) {\n        // Do not crash if spdlog cannot be loaded\n        try {\n            const _spdlog = require.__$__nodeRequire('spdlog');\n            _spdlog.setAsyncMode(8192, 500);\n            const logfilePath = path.join(logsFolder, `${processName}.log`);\n            const logger = new _spdlog.RotatingLogger(processName, logfilePath, 1024 * 1024 * 5, 6);\n            logger.setLevel(0);\n            return new SpdLogService(logger, logLevel);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return new log_1.NullLogService();\n    }\n    exports.createSpdLogService = createSpdLogService;\n    function createRotatingLogger(name, filename, filesize, filecount) {\n        const _spdlog = require.__$__nodeRequire('spdlog');\n        return _spdlog.createRotatingLogger(name, filename, filesize, filecount);\n    }\n    exports.createRotatingLogger = createRotatingLogger;\n    class SpdLogService extends log_1.AbstractLogService {\n        constructor(logger, level = log_1.LogLevel.Error) {\n            super();\n            this.logger = logger;\n            this.setLevel(level);\n        }\n        trace() {\n            if (this.getLevel() <= log_1.LogLevel.Trace) {\n                this.logger.trace(this.format(arguments));\n            }\n        }\n        debug() {\n            if (this.getLevel() <= log_1.LogLevel.Debug) {\n                this.logger.debug(this.format(arguments));\n            }\n        }\n        info() {\n            if (this.getLevel() <= log_1.LogLevel.Info) {\n                this.logger.info(this.format(arguments));\n            }\n        }\n        warn() {\n            if (this.getLevel() <= log_1.LogLevel.Warning) {\n                this.logger.warn(this.format(arguments));\n            }\n        }\n        error() {\n            if (this.getLevel() <= log_1.LogLevel.Error) {\n                const arg = arguments[0];\n                if (arg instanceof Error) {\n                    const array = Array.prototype.slice.call(arguments);\n                    array[0] = arg.stack;\n                    this.logger.error(this.format(array));\n                }\n                else {\n                    this.logger.error(this.format(arguments));\n                }\n            }\n        }\n        critical() {\n            if (this.getLevel() <= log_1.LogLevel.Critical) {\n                this.logger.critical(this.format(arguments));\n            }\n        }\n        dispose() {\n            this.logger.drop();\n        }\n        format(args) {\n            let result = '';\n            for (let i = 0; i < args.length; i++) {\n                let a = args[i];\n                if (typeof a === 'object') {\n                    try {\n                        a = JSON.stringify(a);\n                    }\n                    catch (e) { }\n                }\n                result += (i > 0 ? ' ' : '') + a;\n            }\n            return result;\n        }\n    }\n});\n",null]}