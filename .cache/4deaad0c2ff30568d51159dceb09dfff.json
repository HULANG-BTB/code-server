{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/getHover.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/getHover.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/modes\"], function (require, exports, arrays_1, cancellation_1, errors_1, editorExtensions_1, modes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getHover(model, position, token) {\n        const supports = modes_1.HoverProviderRegistry.ordered(model);\n        const promises = supports.map(support => {\n            return Promise.resolve(support.provideHover(model, position, token)).then(hover => {\n                return hover && isValid(hover) ? hover : undefined;\n            }, err => {\n                errors_1.onUnexpectedExternalError(err);\n                return undefined;\n            });\n        });\n        return Promise.all(promises).then(arrays_1.coalesce);\n    }\n    exports.getHover = getHover;\n    editorExtensions_1.registerDefaultLanguageCommand('_executeHoverProvider', (model, position) => getHover(model, position, cancellation_1.CancellationToken.None));\n    function isValid(result) {\n        const hasRange = (typeof result.range !== 'undefined');\n        const hasHtmlContent = typeof result.contents !== 'undefined' && result.contents && result.contents.length > 0;\n        return hasRange && hasHtmlContent;\n    }\n});\n",null]}