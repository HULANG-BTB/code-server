{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ProxyIdentifier = /** @class */ (function () {\n    function ProxyIdentifier(isMain, sid) {\n        this.isMain = isMain;\n        this.sid = sid;\n        this.nid = (++ProxyIdentifier.count);\n    }\n    ProxyIdentifier.count = 0;\n    return ProxyIdentifier;\n}());\nexports.ProxyIdentifier = ProxyIdentifier;\nvar identifiers = [];\nfunction createMainContextProxyIdentifier(identifier) {\n    var result = new ProxyIdentifier(true, identifier);\n    identifiers[result.nid] = result;\n    return result;\n}\nexports.createMainContextProxyIdentifier = createMainContextProxyIdentifier;\nfunction createExtHostContextProxyIdentifier(identifier) {\n    var result = new ProxyIdentifier(false, identifier);\n    identifiers[result.nid] = result;\n    return result;\n}\nexports.createExtHostContextProxyIdentifier = createExtHostContextProxyIdentifier;\nfunction getStringIdentifierForProxy(nid) {\n    return identifiers[nid].sid;\n}\nexports.getStringIdentifierForProxy = getStringIdentifierForProxy;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAmBhG;IASC,yBAAY,MAAe,EAAE,GAAW;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAZa,qBAAK,GAAG,CAAC,CAAC;IAazB,sBAAC;CAAA,AAdD,IAcC;AAdY,0CAAe;AAgB5B,IAAM,WAAW,GAA2B,EAAE,CAAC;AAE/C,SAAgB,gCAAgC,CAAI,UAAkB;IACrE,IAAM,MAAM,GAAG,IAAI,eAAe,CAAI,IAAI,EAAE,UAAU,CAAC,CAAC;IACxD,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IACjC,OAAO,MAAM,CAAC;AACf,CAAC;AAJD,4EAIC;AAED,SAAgB,mCAAmC,CAAI,UAAkB;IACxE,IAAM,MAAM,GAAG,IAAI,eAAe,CAAI,KAAK,EAAE,UAAU,CAAC,CAAC;IACzD,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IACjC,OAAO,MAAM,CAAC;AACf,CAAC;AAJD,kFAIC;AAED,SAAgB,2BAA2B,CAAC,GAAW;IACtD,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAC7B,CAAC;AAFD,kEAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IRPCProtocol {\n\t/**\n\t * Returns a proxy to an object addressable/named in the extension host process or in the renderer process.\n\t */\n\tgetProxy<T>(identifier: ProxyIdentifier<T>): T;\n\n\t/**\n\t * Register manually created instance.\n\t */\n\tset<T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R;\n\n\t/**\n\t * Assert these identifiers are already registered via `.set`.\n\t */\n\tassertRegistered(identifiers: ProxyIdentifier<any>[]): void;\n}\n\nexport class ProxyIdentifier<T> {\n\tpublic static count = 0;\n\t_proxyIdentifierBrand: void;\n\t_suppressCompilerUnusedWarning: T;\n\n\tpublic readonly isMain: boolean;\n\tpublic readonly sid: string;\n\tpublic readonly nid: number;\n\n\tconstructor(isMain: boolean, sid: string) {\n\t\tthis.isMain = isMain;\n\t\tthis.sid = sid;\n\t\tthis.nid = (++ProxyIdentifier.count);\n\t}\n}\n\nconst identifiers: ProxyIdentifier<any>[] = [];\n\nexport function createMainContextProxyIdentifier<T>(identifier: string): ProxyIdentifier<T> {\n\tconst result = new ProxyIdentifier<T>(true, identifier);\n\tidentifiers[result.nid] = result;\n\treturn result;\n}\n\nexport function createExtHostContextProxyIdentifier<T>(identifier: string): ProxyIdentifier<T> {\n\tconst result = new ProxyIdentifier<T>(false, identifier);\n\tidentifiers[result.nid] = result;\n\treturn result;\n}\n\nexport function getStringIdentifierForProxy(nid: number): string {\n\treturn identifiers[nid].sid;\n}\n"]}]}