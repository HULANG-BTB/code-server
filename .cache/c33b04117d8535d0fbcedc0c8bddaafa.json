{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/node/ports.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/ports.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"net\"], function (require, exports, net) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * @returns Returns a random port between 1025 and 65535.\n     */\n    function randomPort() {\n        const min = 1025;\n        const max = 65535;\n        return min + Math.floor((max - min) * Math.random());\n    }\n    exports.randomPort = randomPort;\n    /**\n     * Given a start point and a max number of retries, will find a port that\n     * is openable. Will return 0 in case no free port can be found.\n     */\n    function findFreePort(startPort, giveUpAfter, timeout) {\n        let done = false;\n        return new Promise(resolve => {\n            const timeoutHandle = setTimeout(() => {\n                if (!done) {\n                    done = true;\n                    return resolve(0);\n                }\n            }, timeout);\n            doFindFreePort(startPort, giveUpAfter, (port) => {\n                if (!done) {\n                    done = true;\n                    clearTimeout(timeoutHandle);\n                    return resolve(port);\n                }\n            });\n        });\n    }\n    exports.findFreePort = findFreePort;\n    function doFindFreePort(startPort, giveUpAfter, clb) {\n        if (giveUpAfter === 0) {\n            return clb(0);\n        }\n        const client = new net.Socket();\n        // If we can connect to the port it means the port is already taken so we continue searching\n        client.once('connect', () => {\n            dispose(client);\n            return doFindFreePort(startPort + 1, giveUpAfter - 1, clb);\n        });\n        client.once('data', () => {\n            // this listener is required since node.js 8.x\n        });\n        client.once('error', (err) => {\n            dispose(client);\n            // If we receive any non ECONNREFUSED error, it means the port is used but we cannot connect\n            if (err.code !== 'ECONNREFUSED') {\n                return doFindFreePort(startPort + 1, giveUpAfter - 1, clb);\n            }\n            // Otherwise it means the port is free to use!\n            return clb(startPort);\n        });\n        client.connect(startPort, '127.0.0.1');\n    }\n    function dispose(socket) {\n        try {\n            socket.removeAllListeners('connect');\n            socket.removeAllListeners('error');\n            socket.end();\n            socket.destroy();\n            socket.unref();\n        }\n        catch (error) {\n            console.error(error); // otherwise this error would get lost in the callback chain\n        }\n    }\n});\n",null]}