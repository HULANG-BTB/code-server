{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensionManagement/node/multiExtensionManagement.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensionManagement/node/multiExtensionManagement.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/node/extensionManagementUtil\");\nvar extensionManagementUtil_2 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar nls_1 = require(\"vs/nls\");\nvar extensionsUtil_1 = require(\"vs/workbench/services/extensions/node/extensionsUtil\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar MultiExtensionManagementService = /** @class */ (function (_super) {\n    tslib_1.__extends(MultiExtensionManagementService, _super);\n    function MultiExtensionManagementService(extensionManagementServerService, extensionGalleryService, configurationService, remoteAgentService) {\n        var _this = _super.call(this) || this;\n        _this.extensionManagementServerService = extensionManagementServerService;\n        _this.extensionGalleryService = extensionGalleryService;\n        _this.configurationService = configurationService;\n        _this.remoteAgentService = remoteAgentService;\n        _this.servers = _this.extensionManagementServerService.remoteExtensionManagementServer ? [_this.extensionManagementServerService.localExtensionManagementServer, _this.extensionManagementServerService.remoteExtensionManagementServer] : [_this.extensionManagementServerService.localExtensionManagementServer];\n        _this.onInstallExtension = _this._register(_this.servers.reduce(function (emitter, server) { emitter.add(server.extensionManagementService.onInstallExtension); return emitter; }, new event_1.EventMultiplexer())).event;\n        _this.onDidInstallExtension = _this._register(_this.servers.reduce(function (emitter, server) { emitter.add(server.extensionManagementService.onDidInstallExtension); return emitter; }, new event_1.EventMultiplexer())).event;\n        _this.onUninstallExtension = _this._register(_this.servers.reduce(function (emitter, server) { emitter.add(server.extensionManagementService.onUninstallExtension); return emitter; }, new event_1.EventMultiplexer())).event;\n        _this.onDidUninstallExtension = _this._register(_this.servers.reduce(function (emitter, server) { emitter.add(server.extensionManagementService.onDidUninstallExtension); return emitter; }, new event_1.EventMultiplexer())).event;\n        return _this;\n    }\n    MultiExtensionManagementService.prototype.getInstalled = function (type) {\n        return Promise.all(this.servers.map(function (_a) {\n            var extensionManagementService = _a.extensionManagementService;\n            return extensionManagementService.getInstalled(type);\n        }))\n            .then(function (result) { return arrays_1.flatten(result); });\n    };\n    MultiExtensionManagementService.prototype.uninstall = function (extension, force) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var server, syncExtensions;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.extensionManagementServerService.remoteExtensionManagementServer) return [3 /*break*/, 2];\n                        server = this.getServer(extension);\n                        if (!server) {\n                            return [2 /*return*/, Promise.reject(\"Invalid location \" + extension.location.toString())];\n                        }\n                        return [4 /*yield*/, this.hasToSyncExtensions()];\n                    case 1:\n                        syncExtensions = _a.sent();\n                        if (syncExtensions || extensions_1.isLanguagePackExtension(extension.manifest)) {\n                            return [2 /*return*/, this.uninstallEverywhere(extension, force)];\n                        }\n                        return [2 /*return*/, this.uninstallInServer(extension, server, force)];\n                    case 2: return [2 /*return*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.uninstall(extension, force)];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.uninstallEverywhere = function (extension, force) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var server, promise, anotherServer, installed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        server = this.getServer(extension);\n                        if (!server) {\n                            return [2 /*return*/, Promise.reject(\"Invalid location \" + extension.location.toString())];\n                        }\n                        promise = server.extensionManagementService.uninstall(extension);\n                        anotherServer = server === this.extensionManagementServerService.localExtensionManagementServer ? this.extensionManagementServerService.remoteExtensionManagementServer : this.extensionManagementServerService.localExtensionManagementServer;\n                        return [4 /*yield*/, anotherServer.extensionManagementService.getInstalled(extensions_1.ExtensionType.User)];\n                    case 1:\n                        installed = _a.sent();\n                        extension = installed.filter(function (i) { return extensionManagementUtil_2.areSameExtensions(i.identifier, extension.identifier); })[0];\n                        if (!extension) return [3 /*break*/, 3];\n                        return [4 /*yield*/, anotherServer.extensionManagementService.uninstall(extension)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.uninstallInServer = function (extension, server, force) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var installedExtensions, dependentNonUIExtensions;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(server === this.extensionManagementServerService.localExtensionManagementServer)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getInstalled(extensions_1.ExtensionType.User)];\n                    case 1:\n                        installedExtensions = _a.sent();\n                        dependentNonUIExtensions = installedExtensions.filter(function (i) { return !extensionsUtil_1.isUIExtension(i.manifest, _this.configurationService)\n                            && i.manifest.extensionDependencies && i.manifest.extensionDependencies.some(function (id) { return extensionManagementUtil_2.areSameExtensions({ id: id }, extension.identifier); }); });\n                        if (dependentNonUIExtensions.length) {\n                            return [2 /*return*/, Promise.reject(new Error(this.getDependentsErrorMessage(extension, dependentNonUIExtensions)))];\n                        }\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, server.extensionManagementService.uninstall(extension, force)];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.getDependentsErrorMessage = function (extension, dependents) {\n        if (dependents.length === 1) {\n            return nls_1.localize('singleDependentError', \"Cannot uninstall extension '{0}'. Extension '{1}' depends on this.\", extension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name);\n        }\n        if (dependents.length === 2) {\n            return nls_1.localize('twoDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.\", extension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n        }\n        return nls_1.localize('multipleDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.\", extension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n    };\n    MultiExtensionManagementService.prototype.reinstallFromGallery = function (extension) {\n        var server = this.getServer(extension);\n        if (server) {\n            return server.extensionManagementService.reinstallFromGallery(extension);\n        }\n        return Promise.reject(\"Invalid location \" + extension.location.toString());\n    };\n    MultiExtensionManagementService.prototype.updateMetadata = function (extension, metadata) {\n        var server = this.getServer(extension);\n        if (server) {\n            return server.extensionManagementService.updateMetadata(extension, metadata);\n        }\n        return Promise.reject(\"Invalid location \" + extension.location.toString());\n    };\n    MultiExtensionManagementService.prototype.zip = function (extension) {\n        throw new Error('Not Supported');\n    };\n    MultiExtensionManagementService.prototype.unzip = function (zipLocation, type) {\n        return Promise.all(this.servers.map(function (_a) {\n            var extensionManagementService = _a.extensionManagementService;\n            return extensionManagementService.unzip(zipLocation, type);\n        })).then(function (_a) {\n            var extensionIdentifier = _a[0];\n            return extensionIdentifier;\n        });\n    };\n    MultiExtensionManagementService.prototype.install = function (vsix) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var syncExtensions, manifest, extensionIdentifier, promise;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.extensionManagementServerService.remoteExtensionManagementServer) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.hasToSyncExtensions()];\n                    case 1:\n                        syncExtensions = _a.sent();\n                        return [4 /*yield*/, extensionManagementUtil_1.getManifest(vsix.fsPath)];\n                    case 2:\n                        manifest = _a.sent();\n                        if (!(syncExtensions || extensions_1.isLanguagePackExtension(manifest))) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(this.servers.map(function (server) { return server.extensionManagementService.install(vsix); }))];\n                    case 3:\n                        extensionIdentifier = (_a.sent())[0];\n                        return [2 /*return*/, extensionIdentifier];\n                    case 4:\n                        if (extensionsUtil_1.isUIExtension(manifest, this.configurationService)) {\n                            // Install only on local server\n                            return [2 /*return*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.install(vsix)];\n                        }\n                        promise = this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.install(vsix);\n                        // Install UI Dependencies on local server\n                        return [4 /*yield*/, this.installUIDependencies(manifest)];\n                    case 5:\n                        // Install UI Dependencies on local server\n                        _a.sent();\n                        return [2 /*return*/, promise];\n                    case 6: return [2 /*return*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.install(vsix)];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.installFromGallery = function (gallery) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _a, manifest, syncExtensions, promise;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.extensionManagementServerService.remoteExtensionManagementServer) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all([this.extensionGalleryService.getManifest(gallery, cancellation_1.CancellationToken.None), this.hasToSyncExtensions()])];\n                    case 1:\n                        _a = _b.sent(), manifest = _a[0], syncExtensions = _a[1];\n                        if (!manifest) return [3 /*break*/, 3];\n                        if (syncExtensions || extensions_1.isLanguagePackExtension(manifest)) {\n                            // Install on both servers\n                            return [2 /*return*/, Promise.all(this.servers.map(function (server) { return server.extensionManagementService.installFromGallery(gallery); })).then(function () { return undefined; })];\n                        }\n                        if (extensionsUtil_1.isUIExtension(manifest, this.configurationService)) {\n                            // Install only on local server\n                            return [2 /*return*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(gallery)];\n                        }\n                        promise = this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.installFromGallery(gallery);\n                        // Install UI Dependencies on local server\n                        return [4 /*yield*/, this.installUIDependencies(manifest)];\n                    case 2:\n                        // Install UI Dependencies on local server\n                        _b.sent();\n                        return [2 /*return*/, promise];\n                    case 3: return [2 /*return*/, Promise.reject(nls_1.localize('Manifest is not found', \"Installing Extension {0} failed: Manifest is not found.\", gallery.displayName || gallery.name))];\n                    case 4: return [2 /*return*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(gallery)];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.installUIDependencies = function (manifest) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var dependencies;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(manifest.extensionDependencies && manifest.extensionDependencies.length)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.extensionGalleryService.loadAllDependencies(manifest.extensionDependencies.map(function (id) { return ({ id: id }); }), cancellation_1.CancellationToken.None)];\n                    case 1:\n                        dependencies = _a.sent();\n                        if (!dependencies.length) return [3 /*break*/, 3];\n                        return [4 /*yield*/, Promise.all(dependencies.map(function (d) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var manifest;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.extensionGalleryService.getManifest(d, cancellation_1.CancellationToken.None)];\n                                        case 1:\n                                            manifest = _a.sent();\n                                            if (!(manifest && extensionsUtil_1.isUIExtension(manifest, this.configurationService))) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(d)];\n                                        case 2:\n                                            _a.sent();\n                                            _a.label = 3;\n                                        case 3: return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService.prototype.getExtensionsReport = function () {\n        return this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getExtensionsReport();\n    };\n    MultiExtensionManagementService.prototype.getServer = function (extension) {\n        return this.extensionManagementServerService.getExtensionManagementServer(extension.location);\n    };\n    MultiExtensionManagementService.prototype.hasToSyncExtensions = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var remoteEnv;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.extensionManagementServerService.remoteExtensionManagementServer) {\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.remoteAgentService.getEnvironment()];\n                    case 1:\n                        remoteEnv = _a.sent();\n                        if (!remoteEnv) {\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/, remoteEnv.syncExtensions];\n                }\n            });\n        });\n    };\n    MultiExtensionManagementService = tslib_1.__decorate([\n        tslib_1.__param(0, extensionManagement_1.IExtensionManagementServerService),\n        tslib_1.__param(1, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, remoteAgentService_1.IRemoteAgentService)\n    ], MultiExtensionManagementService);\n    return MultiExtensionManagementService;\n}(lifecycle_1.Disposable));\nexports.MultiExtensionManagementService = MultiExtensionManagementService;\nextensions_2.registerSingleton(extensionManagement_1.IExtensionManagementService, MultiExtensionManagementService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensionManagement/node/multiExtensionManagement.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensionManagement/node/multiExtensionManagement.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, EventMultiplexer } from 'vs/base/common/event';\nimport {\n\tIExtensionManagementService, ILocalExtension, IGalleryExtension, InstallExtensionEvent, DidInstallExtensionEvent, IExtensionIdentifier, DidUninstallExtensionEvent, IReportedExtension, IGalleryMetadata,\n\tIExtensionManagementServerService, IExtensionManagementServer, IExtensionGalleryService\n} from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { flatten } from 'vs/base/common/arrays';\nimport { ExtensionType, IExtensionManifest, isLanguagePackExtension } from 'vs/platform/extensions/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { getManifest } from 'vs/platform/extensionManagement/node/extensionManagementUtil';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { localize } from 'vs/nls';\nimport { isUIExtension } from 'vs/workbench/services/extensions/node/extensionsUtil';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class MultiExtensionManagementService extends Disposable implements IExtensionManagementService {\n\n\t_serviceBrand: any;\n\n\treadonly onInstallExtension: Event<InstallExtensionEvent>;\n\treadonly onDidInstallExtension: Event<DidInstallExtensionEvent>;\n\treadonly onUninstallExtension: Event<IExtensionIdentifier>;\n\treadonly onDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\n\tprivate readonly servers: IExtensionManagementServer[];\n\n\tconstructor(\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\t\tthis.servers = this.extensionManagementServerService.remoteExtensionManagementServer ? [this.extensionManagementServerService.localExtensionManagementServer, this.extensionManagementServerService.remoteExtensionManagementServer] : [this.extensionManagementServerService.localExtensionManagementServer];\n\n\t\tthis.onInstallExtension = this._register(this.servers.reduce((emitter: EventMultiplexer<InstallExtensionEvent>, server) => { emitter.add(server.extensionManagementService.onInstallExtension); return emitter; }, new EventMultiplexer<InstallExtensionEvent>())).event;\n\t\tthis.onDidInstallExtension = this._register(this.servers.reduce((emitter: EventMultiplexer<DidInstallExtensionEvent>, server) => { emitter.add(server.extensionManagementService.onDidInstallExtension); return emitter; }, new EventMultiplexer<DidInstallExtensionEvent>())).event;\n\t\tthis.onUninstallExtension = this._register(this.servers.reduce((emitter: EventMultiplexer<IExtensionIdentifier>, server) => { emitter.add(server.extensionManagementService.onUninstallExtension); return emitter; }, new EventMultiplexer<IExtensionIdentifier>())).event;\n\t\tthis.onDidUninstallExtension = this._register(this.servers.reduce((emitter: EventMultiplexer<DidUninstallExtensionEvent>, server) => { emitter.add(server.extensionManagementService.onDidUninstallExtension); return emitter; }, new EventMultiplexer<DidUninstallExtensionEvent>())).event;\n\t}\n\n\tgetInstalled(type?: ExtensionType): Promise<ILocalExtension[]> {\n\t\treturn Promise.all(this.servers.map(({ extensionManagementService }) => extensionManagementService.getInstalled(type)))\n\t\t\t.then(result => flatten(result));\n\t}\n\n\tasync uninstall(extension: ILocalExtension, force?: boolean): Promise<void> {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tconst server = this.getServer(extension);\n\t\t\tif (!server) {\n\t\t\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t\t\t}\n\t\t\tconst syncExtensions = await this.hasToSyncExtensions();\n\t\t\tif (syncExtensions || isLanguagePackExtension(extension.manifest)) {\n\t\t\t\treturn this.uninstallEverywhere(extension, force);\n\t\t\t}\n\t\t\treturn this.uninstallInServer(extension, server, force);\n\t\t}\n\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.uninstall(extension, force);\n\t}\n\n\tprivate async uninstallEverywhere(extension: ILocalExtension, force?: boolean): Promise<void> {\n\t\tconst server = this.getServer(extension);\n\t\tif (!server) {\n\t\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t\t}\n\t\tconst promise = server.extensionManagementService.uninstall(extension);\n\t\tconst anotherServer: IExtensionManagementServer = server === this.extensionManagementServerService.localExtensionManagementServer ? this.extensionManagementServerService.remoteExtensionManagementServer! : this.extensionManagementServerService.localExtensionManagementServer;\n\t\tconst installed = await anotherServer.extensionManagementService.getInstalled(ExtensionType.User);\n\t\textension = installed.filter(i => areSameExtensions(i.identifier, extension.identifier))[0];\n\t\tif (extension) {\n\t\t\tawait anotherServer.extensionManagementService.uninstall(extension);\n\t\t}\n\t\treturn promise;\n\t}\n\n\tprivate async uninstallInServer(extension: ILocalExtension, server: IExtensionManagementServer, force?: boolean): Promise<void> {\n\t\tif (server === this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\tconst installedExtensions = await this.extensionManagementServerService.remoteExtensionManagementServer!.extensionManagementService.getInstalled(ExtensionType.User);\n\t\t\tconst dependentNonUIExtensions = installedExtensions.filter(i => !isUIExtension(i.manifest, this.configurationService)\n\t\t\t\t&& i.manifest.extensionDependencies && i.manifest.extensionDependencies.some(id => areSameExtensions({ id }, extension.identifier)));\n\t\t\tif (dependentNonUIExtensions.length) {\n\t\t\t\treturn Promise.reject(new Error(this.getDependentsErrorMessage(extension, dependentNonUIExtensions)));\n\t\t\t}\n\t\t}\n\t\treturn server.extensionManagementService.uninstall(extension, force);\n\t}\n\n\tprivate getDependentsErrorMessage(extension: ILocalExtension, dependents: ILocalExtension[]): string {\n\t\tif (dependents.length === 1) {\n\t\t\treturn localize('singleDependentError', \"Cannot uninstall extension '{0}'. Extension '{1}' depends on this.\",\n\t\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name);\n\t\t}\n\t\tif (dependents.length === 2) {\n\t\t\treturn localize('twoDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.\",\n\t\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n\t\t}\n\t\treturn localize('multipleDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.\",\n\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n\n\t}\n\n\treinstallFromGallery(extension: ILocalExtension): Promise<void> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\treturn server.extensionManagementService.reinstallFromGallery(extension);\n\t\t}\n\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t}\n\n\tupdateMetadata(extension: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\treturn server.extensionManagementService.updateMetadata(extension, metadata);\n\t\t}\n\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t}\n\n\tzip(extension: ILocalExtension): Promise<URI> {\n\t\tthrow new Error('Not Supported');\n\t}\n\n\tunzip(zipLocation: URI, type: ExtensionType): Promise<IExtensionIdentifier> {\n\t\treturn Promise.all(this.servers.map(({ extensionManagementService }) => extensionManagementService.unzip(zipLocation, type))).then(([extensionIdentifier]) => extensionIdentifier);\n\t}\n\n\tasync install(vsix: URI): Promise<IExtensionIdentifier> {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tconst syncExtensions = await this.hasToSyncExtensions();\n\t\t\tconst manifest = await getManifest(vsix.fsPath);\n\t\t\tif (syncExtensions || isLanguagePackExtension(manifest)) {\n\t\t\t\t// Install on both servers\n\t\t\t\tconst [extensionIdentifier] = await Promise.all(this.servers.map(server => server.extensionManagementService.install(vsix)));\n\t\t\t\treturn extensionIdentifier;\n\t\t\t}\n\t\t\tif (isUIExtension(manifest, this.configurationService)) {\n\t\t\t\t// Install only on local server\n\t\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.install(vsix);\n\t\t\t}\n\t\t\t// Install only on remote server\n\t\t\tconst promise = this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.install(vsix);\n\t\t\t// Install UI Dependencies on local server\n\t\t\tawait this.installUIDependencies(manifest);\n\t\t\treturn promise;\n\t\t}\n\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.install(vsix);\n\t}\n\n\tasync installFromGallery(gallery: IGalleryExtension): Promise<void> {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tconst [manifest, syncExtensions] = await Promise.all([this.extensionGalleryService.getManifest(gallery, CancellationToken.None), this.hasToSyncExtensions()]);\n\t\t\tif (manifest) {\n\t\t\t\tif (syncExtensions || isLanguagePackExtension(manifest)) {\n\t\t\t\t\t// Install on both servers\n\t\t\t\t\treturn Promise.all(this.servers.map(server => server.extensionManagementService.installFromGallery(gallery))).then(() => undefined);\n\t\t\t\t}\n\t\t\t\tif (isUIExtension(manifest, this.configurationService)) {\n\t\t\t\t\t// Install only on local server\n\t\t\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(gallery);\n\t\t\t\t}\n\t\t\t\t// Install only on remote server\n\t\t\t\tconst promise = this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.installFromGallery(gallery);\n\t\t\t\t// Install UI Dependencies on local server\n\t\t\t\tawait this.installUIDependencies(manifest);\n\t\t\t\treturn promise;\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(localize('Manifest is not found', \"Installing Extension {0} failed: Manifest is not found.\", gallery.displayName || gallery.name));\n\t\t\t}\n\t\t}\n\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(gallery);\n\t}\n\n\tprivate async installUIDependencies(manifest: IExtensionManifest): Promise<void> {\n\t\tif (manifest.extensionDependencies && manifest.extensionDependencies.length) {\n\t\t\tconst dependencies = await this.extensionGalleryService.loadAllDependencies(manifest.extensionDependencies.map(id => ({ id })), CancellationToken.None);\n\t\t\tif (dependencies.length) {\n\t\t\t\tawait Promise.all(dependencies.map(async d => {\n\t\t\t\t\tconst manifest = await this.extensionGalleryService.getManifest(d, CancellationToken.None);\n\t\t\t\t\tif (manifest && isUIExtension(manifest, this.configurationService)) {\n\t\t\t\t\t\tawait this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromGallery(d);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\tgetExtensionsReport(): Promise<IReportedExtension[]> {\n\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getExtensionsReport();\n\t}\n\n\tprivate getServer(extension: ILocalExtension): IExtensionManagementServer | null {\n\t\treturn this.extensionManagementServerService.getExtensionManagementServer(extension.location);\n\t}\n\n\tprivate async hasToSyncExtensions(): Promise<boolean> {\n\t\tif (!this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn false;\n\t\t}\n\t\tconst remoteEnv = await this.remoteAgentService.getEnvironment();\n\t\tif (!remoteEnv) {\n\t\t\treturn false;\n\t\t}\n\t\treturn remoteEnv.syncExtensions;\n\t}\n}\n\nregisterSingleton(IExtensionManagementService, MultiExtensionManagementService);"]}]}