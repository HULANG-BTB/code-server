{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/async\", \"vs/editor/common/services/modelService\", \"vs/editor/common/modes\", \"vs/platform/workspace/common/workspace\", \"vs/workbench/contrib/output/common/output\", \"vs/editor/common/services/webWorker\", \"vs/base/common/lifecycle\"], function (require, exports, async_1, modelService_1, modes_1, workspace_1, output_1, webWorker_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let OutputLinkProvider = class OutputLinkProvider {\n        constructor(contextService, modelService) {\n            this.contextService = contextService;\n            this.modelService = modelService;\n            this.disposeWorkerScheduler = new async_1.RunOnceScheduler(() => this.disposeWorker(), OutputLinkProvider.DISPOSE_WORKER_TIME);\n            this.registerListeners();\n            this.updateLinkProviderWorker();\n        }\n        registerListeners() {\n            this.contextService.onDidChangeWorkspaceFolders(() => this.updateLinkProviderWorker());\n        }\n        updateLinkProviderWorker() {\n            // Setup link provider depending on folders being opened or not\n            const folders = this.contextService.getWorkspace().folders;\n            if (folders.length > 0) {\n                if (!this.linkProviderRegistration) {\n                    this.linkProviderRegistration = modes_1.LinkProviderRegistry.register([{ language: output_1.OUTPUT_MODE_ID, scheme: '*' }, { language: output_1.LOG_MODE_ID, scheme: '*' }], {\n                        provideLinks: (model, token) => {\n                            return this.provideLinks(model.uri);\n                        }\n                    });\n                }\n            }\n            else {\n                this.linkProviderRegistration = lifecycle_1.dispose(this.linkProviderRegistration);\n            }\n            // Dispose worker to recreate with folders on next provideLinks request\n            this.disposeWorker();\n            this.disposeWorkerScheduler.cancel();\n        }\n        getOrCreateWorker() {\n            this.disposeWorkerScheduler.schedule();\n            if (!this.worker) {\n                const createData = {\n                    workspaceFolders: this.contextService.getWorkspace().folders.map(folder => folder.uri.toString())\n                };\n                this.worker = webWorker_1.createWebWorker(this.modelService, {\n                    moduleId: 'vs/workbench/contrib/output/common/outputLinkComputer',\n                    createData,\n                    label: 'outputLinkComputer'\n                });\n            }\n            return this.worker;\n        }\n        provideLinks(modelUri) {\n            return Promise.resolve([]);\n            return this.getOrCreateWorker().withSyncedResources([modelUri]).then(linkComputer => {\n                return linkComputer.computeLinks(modelUri.toString());\n            });\n        }\n        disposeWorker() {\n            if (this.worker) {\n                this.worker.dispose();\n                this.worker = undefined;\n            }\n        }\n    };\n    OutputLinkProvider.DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n    OutputLinkProvider = __decorate([\n        __param(0, workspace_1.IWorkspaceContextService),\n        __param(1, modelService_1.IModelService)\n    ], OutputLinkProvider);\n    exports.OutputLinkProvider = OutputLinkProvider;\n});\n",null]}