{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/controller/cursorCommon\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\"], function (require, exports, cursorCommon_1, position_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ColumnSelection {\n        static _columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n            let lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n            let reversed = (fromLineNumber > toLineNumber);\n            let isRTL = (fromVisibleColumn > toVisibleColumn);\n            let isLTR = (fromVisibleColumn < toVisibleColumn);\n            let result = [];\n            // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n            for (let i = 0; i < lineCount; i++) {\n                let lineNumber = fromLineNumber + (reversed ? -i : i);\n                let startColumn = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n                let endColumn = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n                let visibleStartColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, startColumn));\n                let visibleEndColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, endColumn));\n                // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n                if (isLTR) {\n                    if (visibleStartColumn > toVisibleColumn) {\n                        continue;\n                    }\n                    if (visibleEndColumn < fromVisibleColumn) {\n                        continue;\n                    }\n                }\n                if (isRTL) {\n                    if (visibleEndColumn > fromVisibleColumn) {\n                        continue;\n                    }\n                    if (visibleStartColumn < toVisibleColumn) {\n                        continue;\n                    }\n                }\n                result.push(new cursorCommon_1.SingleCursorState(new range_1.Range(lineNumber, startColumn, lineNumber, startColumn), 0, new position_1.Position(lineNumber, endColumn), 0));\n            }\n            return {\n                viewStates: result,\n                reversed: reversed,\n                toLineNumber: toLineNumber,\n                toVisualColumn: toVisibleColumn\n            };\n        }\n        static columnSelect(config, model, fromViewSelection, toViewLineNumber, toViewVisualColumn) {\n            const fromViewPosition = new position_1.Position(fromViewSelection.selectionStartLineNumber, fromViewSelection.selectionStartColumn);\n            const fromViewVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, fromViewPosition);\n            return ColumnSelection._columnSelect(config, model, fromViewPosition.lineNumber, fromViewVisibleColumn, toViewLineNumber, toViewVisualColumn);\n        }\n        static columnSelectLeft(config, model, cursor, toViewLineNumber, toViewVisualColumn) {\n            if (toViewVisualColumn > 1) {\n                toViewVisualColumn--;\n            }\n            return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n        }\n        static columnSelectRight(config, model, cursor, toViewLineNumber, toViewVisualColumn) {\n            let maxVisualViewColumn = 0;\n            let minViewLineNumber = Math.min(cursor.position.lineNumber, toViewLineNumber);\n            let maxViewLineNumber = Math.max(cursor.position.lineNumber, toViewLineNumber);\n            for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n                let lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n                let lineMaxVisualViewColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, lineMaxViewColumn));\n                maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n            }\n            if (toViewVisualColumn < maxVisualViewColumn) {\n                toViewVisualColumn++;\n            }\n            return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n        }\n        static columnSelectUp(config, model, cursor, isPaged, toViewLineNumber, toViewVisualColumn) {\n            let linesCount = isPaged ? config.pageSize : 1;\n            toViewLineNumber -= linesCount;\n            if (toViewLineNumber < 1) {\n                toViewLineNumber = 1;\n            }\n            return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n        }\n        static columnSelectDown(config, model, cursor, isPaged, toViewLineNumber, toViewVisualColumn) {\n            let linesCount = isPaged ? config.pageSize : 1;\n            toViewLineNumber += linesCount;\n            if (toViewLineNumber > model.getLineCount()) {\n                toViewLineNumber = model.getLineCount();\n            }\n            return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n        }\n    }\n    exports.ColumnSelection = ColumnSelection;\n});\n",null]}