{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textDiffEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textDiffEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar objects = require(\"vs/base/common/objects\");\nvar types = require(\"vs/base/common/types\");\nvar textEditor_1 = require(\"vs/workbench/browser/parts/editor/textEditor\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar diffEditorInput_1 = require(\"vs/workbench/common/editor/diffEditorInput\");\nvar diffNavigator_1 = require(\"vs/editor/browser/widget/diffNavigator\");\nvar diffEditorWidget_1 = require(\"vs/editor/browser/widget/diffEditorWidget\");\nvar textDiffEditorModel_1 = require(\"vs/workbench/common/editor/textDiffEditorModel\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar event_1 = require(\"vs/base/common/event\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar baseEditor_1 = require(\"vs/workbench/browser/parts/editor/baseEditor\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\n/**\n * The text editor that leverages the diff text editor for the editing experience.\n */\nvar TextDiffEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(TextDiffEditor, _super);\n    function TextDiffEditor(telemetryService, instantiationService, storageService, configurationService, editorService, themeService, editorGroupService, textFileService, windowService) {\n        var _this = _super.call(this, TextDiffEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService) || this;\n        _this.diffNavigatorDisposables = [];\n        return _this;\n    }\n    TextDiffEditor.prototype.getEditorMemento = function (editorGroupService, key, limit) {\n        if (limit === void 0) { limit = 10; }\n        return new baseEditor_1.EditorMemento(this.getId(), key, Object.create(null), limit, editorGroupService); // do not persist in storage as diff editors are never persisted\n    };\n    TextDiffEditor.prototype.getTitle = function () {\n        if (this.input) {\n            return this.input.getName();\n        }\n        return nls.localize('textDiffEditor', \"Text Diff Editor\");\n    };\n    TextDiffEditor.prototype.createEditorControl = function (parent, configuration) {\n        return this.instantiationService.createInstance(diffEditorWidget_1.DiffEditorWidget, parent, configuration);\n    };\n    TextDiffEditor.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        // Dispose previous diff navigator\n        this.diffNavigatorDisposables = lifecycle_1.dispose(this.diffNavigatorDisposables);\n        // Remember view settings if input changes\n        this.saveTextDiffEditorViewState(this.input);\n        // Set input and resolve\n        return _super.prototype.setInput.call(this, input, options, token).then(function () {\n            return input.resolve().then(function (resolvedModel) {\n                // Check for cancellation\n                if (token.isCancellationRequested) {\n                    return undefined;\n                }\n                // Assert Model Instance\n                if (!(resolvedModel instanceof textDiffEditorModel_1.TextDiffEditorModel) && _this.openAsBinary(input, options)) {\n                    return undefined;\n                }\n                // Set Editor Model\n                var diffEditor = _this.getControl();\n                var resolvedDiffEditorModel = resolvedModel;\n                diffEditor.setModel(resolvedDiffEditorModel.textDiffEditorModel);\n                // Apply Options from TextOptions\n                var optionsGotApplied = false;\n                if (options && types.isFunction(options.apply)) {\n                    optionsGotApplied = options.apply(diffEditor, editorCommon_1.ScrollType.Immediate);\n                }\n                // Otherwise restore View State\n                var hasPreviousViewState = false;\n                if (!optionsGotApplied) {\n                    hasPreviousViewState = _this.restoreTextDiffEditorViewState(input);\n                }\n                // Diff navigator\n                _this.diffNavigator = new diffNavigator_1.DiffNavigator(diffEditor, {\n                    alwaysRevealFirst: !optionsGotApplied && !hasPreviousViewState // only reveal first change if we had no options or viewstate\n                });\n                _this.diffNavigatorDisposables.push(_this.diffNavigator);\n                // Readonly flag\n                diffEditor.updateOptions({ readOnly: resolvedDiffEditorModel.isReadonly() });\n                return undefined;\n            }, function (error) {\n                // In case we tried to open a file and the response indicates that this is not a text file, fallback to binary diff.\n                if (_this.isFileBinaryError(error) && _this.openAsBinary(input, options)) {\n                    return null;\n                }\n                // Otherwise make sure the error bubbles up\n                return Promise.reject(error);\n            });\n        });\n    };\n    TextDiffEditor.prototype.setOptions = function (options) {\n        var textOptions = options;\n        if (textOptions && types.isFunction(textOptions.apply)) {\n            textOptions.apply(this.getControl(), editorCommon_1.ScrollType.Smooth);\n        }\n    };\n    TextDiffEditor.prototype.restoreTextDiffEditorViewState = function (input) {\n        if (input instanceof diffEditorInput_1.DiffEditorInput) {\n            var resource = this.toDiffEditorViewStateResource(input);\n            if (resource) {\n                var viewState = this.loadTextEditorViewState(resource);\n                if (viewState) {\n                    this.getControl().restoreViewState(viewState);\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    TextDiffEditor.prototype.openAsBinary = function (input, options) {\n        if (input instanceof diffEditorInput_1.DiffEditorInput) {\n            var originalInput = input.originalInput;\n            var modifiedInput = input.modifiedInput;\n            var binaryDiffInput = new diffEditorInput_1.DiffEditorInput(input.getName(), input.getDescription(), originalInput, modifiedInput, true);\n            // Forward binary flag to input if supported\n            var fileInputFactory = platform_1.Registry.as(editor_1.Extensions.EditorInputFactories).getFileInputFactory();\n            if (fileInputFactory.isFileInput(originalInput)) {\n                originalInput.setForceOpenAsBinary();\n            }\n            if (fileInputFactory.isFileInput(modifiedInput)) {\n                modifiedInput.setForceOpenAsBinary();\n            }\n            this.editorService.openEditor(binaryDiffInput, options, this.group);\n            return true;\n        }\n        return false;\n    };\n    TextDiffEditor.prototype.computeConfiguration = function (configuration) {\n        var editorConfiguration = _super.prototype.computeConfiguration.call(this, configuration);\n        // Handle diff editor specially by merging in diffEditor configuration\n        if (types.isObject(configuration.diffEditor)) {\n            objects.mixin(editorConfiguration, configuration.diffEditor);\n        }\n        return editorConfiguration;\n    };\n    TextDiffEditor.prototype.getConfigurationOverrides = function () {\n        var options = _super.prototype.getConfigurationOverrides.call(this);\n        options.readOnly = this.isReadOnly();\n        options.lineDecorationsWidth = '2ch';\n        return options;\n    };\n    TextDiffEditor.prototype.getAriaLabel = function () {\n        var ariaLabel;\n        var inputName = this.input && this.input.getName();\n        if (this.isReadOnly()) {\n            ariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text compare editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text compare editor.\");\n        }\n        else {\n            ariaLabel = inputName ? nls.localize('editableEditorWithInputAriaLabel', \"{0}. Text file compare editor.\", inputName) : nls.localize('editableEditorAriaLabel', \"Text file compare editor.\");\n        }\n        return ariaLabel;\n    };\n    TextDiffEditor.prototype.isReadOnly = function () {\n        var input = this.input;\n        if (input instanceof diffEditorInput_1.DiffEditorInput) {\n            var modifiedInput = input.modifiedInput;\n            return modifiedInput instanceof resourceEditorInput_1.ResourceEditorInput;\n        }\n        return false;\n    };\n    TextDiffEditor.prototype.isFileBinaryError = function (error) {\n        var _this = this;\n        if (types.isArray(error)) {\n            var errors = error;\n            return errors.some(function (e) { return _this.isFileBinaryError(e); });\n        }\n        return error.fileOperationResult === files_1.FileOperationResult.FILE_IS_BINARY;\n    };\n    TextDiffEditor.prototype.clearInput = function () {\n        // Dispose previous diff navigator\n        this.diffNavigatorDisposables = lifecycle_1.dispose(this.diffNavigatorDisposables);\n        // Keep editor view state in settings to restore when coming back\n        this.saveTextDiffEditorViewState(this.input);\n        // Clear Model\n        this.getControl().setModel(null);\n        // Pass to super\n        _super.prototype.clearInput.call(this);\n    };\n    TextDiffEditor.prototype.getDiffNavigator = function () {\n        return this.diffNavigator;\n    };\n    TextDiffEditor.prototype.getControl = function () {\n        return _super.prototype.getControl.call(this);\n    };\n    TextDiffEditor.prototype.loadTextEditorViewState = function (resource) {\n        return _super.prototype.loadTextEditorViewState.call(this, resource); // overridden for text diff editor support\n    };\n    TextDiffEditor.prototype.saveTextDiffEditorViewState = function (input) {\n        var _this = this;\n        if (!(input instanceof diffEditorInput_1.DiffEditorInput)) {\n            return; // only supported for diff editor inputs\n        }\n        var resource = this.toDiffEditorViewStateResource(input);\n        if (!resource) {\n            return; // unable to retrieve input resource\n        }\n        // Clear view state if input is disposed\n        if (input.isDisposed()) {\n            _super.prototype.clearTextEditorViewState.call(this, [resource]);\n        }\n        // Otherwise save it\n        else {\n            _super.prototype.saveTextEditorViewState.call(this, resource);\n            // Make sure to clean up when the input gets disposed\n            event_1.Event.once(input.onDispose)(function () {\n                _super.prototype.clearTextEditorViewState.call(_this, [resource]);\n            });\n        }\n    };\n    TextDiffEditor.prototype.retrieveTextEditorViewState = function (resource) {\n        return this.retrieveTextDiffEditorViewState(resource); // overridden for text diff editor support\n    };\n    TextDiffEditor.prototype.retrieveTextDiffEditorViewState = function (resource) {\n        var control = this.getControl();\n        var model = control.getModel();\n        if (!model || !model.modified || !model.original) {\n            return null; // view state always needs a model\n        }\n        var modelUri = this.toDiffEditorViewStateResource(model);\n        if (!modelUri) {\n            return null; // model URI is needed to make sure we save the view state correctly\n        }\n        if (modelUri.toString() !== resource.toString()) {\n            return null; // prevent saving view state for a model that is not the expected one\n        }\n        return control.saveViewState();\n    };\n    TextDiffEditor.prototype.toDiffEditorViewStateResource = function (modelOrInput) {\n        var original;\n        var modified;\n        if (modelOrInput instanceof diffEditorInput_1.DiffEditorInput) {\n            original = modelOrInput.originalInput.getResource();\n            modified = modelOrInput.modifiedInput.getResource();\n        }\n        else {\n            original = modelOrInput.original.uri;\n            modified = modelOrInput.modified.uri;\n        }\n        if (!original || !modified) {\n            return null;\n        }\n        // create a URI that is the Base64 concatenation of original + modified resource\n        return uri_1.URI.from({ scheme: 'diff', path: \"\" + btoa(original.toString()) + btoa(modified.toString()) });\n    };\n    TextDiffEditor.prototype.dispose = function () {\n        this.diffNavigatorDisposables = lifecycle_1.dispose(this.diffNavigatorDisposables);\n        _super.prototype.dispose.call(this);\n    };\n    TextDiffEditor.ID = editor_1.TEXT_DIFF_EDITOR_ID;\n    TextDiffEditor = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, textfiles_1.ITextFileService),\n        tslib_1.__param(8, windows_1.IWindowService)\n    ], TextDiffEditor);\n    return TextDiffEditor;\n}(textEditor_1.BaseTextEditor));\nexports.TextDiffEditor = TextDiffEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textDiffEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textDiffEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as objects from 'vs/base/common/objects';\nimport * as types from 'vs/base/common/types';\nimport { IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IDiffEditorOptions, IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { BaseTextEditor, IEditorConfiguration } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { TextEditorOptions, EditorInput, EditorOptions, TEXT_DIFF_EDITOR_ID, IEditorInputFactoryRegistry, Extensions as EditorInputExtensions, ITextDiffEditor, IEditorMemento } from 'vs/workbench/common/editor';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { DiffNavigator } from 'vs/editor/browser/widget/diffNavigator';\nimport { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditorWidget';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\nimport { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ScrollType, IDiffEditorViewState, IDiffEditorModel } from 'vs/editor/common/editorCommon';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { EditorMemento } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\n\n/**\n * The text editor that leverages the diff text editor for the editing experience.\n */\nexport class TextDiffEditor extends BaseTextEditor implements ITextDiffEditor {\n\n\tstatic readonly ID = TEXT_DIFF_EDITOR_ID;\n\n\tprivate diffNavigator: DiffNavigator;\n\tprivate diffNavigatorDisposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(TextDiffEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, textFileService, editorService, editorGroupService, windowService);\n\t}\n\n\tprotected getEditorMemento<T>(editorGroupService: IEditorGroupsService, key: string, limit: number = 10): IEditorMemento<T> {\n\t\treturn new EditorMemento(this.getId(), key, Object.create(null), limit, editorGroupService); // do not persist in storage as diff editors are never persisted\n\t}\n\n\tgetTitle(): string | null {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn nls.localize('textDiffEditor', \"Text Diff Editor\");\n\t}\n\n\tcreateEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): IDiffEditor {\n\t\treturn this.instantiationService.createInstance(DiffEditorWidget, parent, configuration);\n\t}\n\n\tsetInput(input: EditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\n\t\t// Dispose previous diff navigator\n\t\tthis.diffNavigatorDisposables = dispose(this.diffNavigatorDisposables);\n\n\t\t// Remember view settings if input changes\n\t\tthis.saveTextDiffEditorViewState(this.input);\n\n\t\t// Set input and resolve\n\t\treturn super.setInput(input, options, token).then(() => {\n\t\t\treturn input.resolve().then(resolvedModel => {\n\n\t\t\t\t// Check for cancellation\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Assert Model Instance\n\t\t\t\tif (!(resolvedModel instanceof TextDiffEditorModel) && this.openAsBinary(input, options)) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Set Editor Model\n\t\t\t\tconst diffEditor = this.getControl();\n\t\t\t\tconst resolvedDiffEditorModel = <TextDiffEditorModel>resolvedModel;\n\t\t\t\tdiffEditor.setModel(resolvedDiffEditorModel.textDiffEditorModel);\n\n\t\t\t\t// Apply Options from TextOptions\n\t\t\t\tlet optionsGotApplied = false;\n\t\t\t\tif (options && types.isFunction((<TextEditorOptions>options).apply)) {\n\t\t\t\t\toptionsGotApplied = (<TextEditorOptions>options).apply(diffEditor, ScrollType.Immediate);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise restore View State\n\t\t\t\tlet hasPreviousViewState = false;\n\t\t\t\tif (!optionsGotApplied) {\n\t\t\t\t\thasPreviousViewState = this.restoreTextDiffEditorViewState(input);\n\t\t\t\t}\n\n\t\t\t\t// Diff navigator\n\t\t\t\tthis.diffNavigator = new DiffNavigator(diffEditor, {\n\t\t\t\t\talwaysRevealFirst: !optionsGotApplied && !hasPreviousViewState // only reveal first change if we had no options or viewstate\n\t\t\t\t});\n\t\t\t\tthis.diffNavigatorDisposables.push(this.diffNavigator);\n\n\t\t\t\t// Readonly flag\n\t\t\t\tdiffEditor.updateOptions({ readOnly: resolvedDiffEditorModel.isReadonly() });\n\t\t\t\treturn undefined;\n\t\t\t}, error => {\n\n\t\t\t\t// In case we tried to open a file and the response indicates that this is not a text file, fallback to binary diff.\n\t\t\t\tif (this.isFileBinaryError(error) && this.openAsBinary(input, options)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise make sure the error bubbles up\n\t\t\t\treturn Promise.reject(error);\n\t\t\t});\n\t\t});\n\t}\n\n\tsetOptions(options: EditorOptions): void {\n\t\tconst textOptions = <TextEditorOptions>options;\n\t\tif (textOptions && types.isFunction(textOptions.apply)) {\n\t\t\ttextOptions.apply(this.getControl(), ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprivate restoreTextDiffEditorViewState(input: EditorInput): boolean {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tconst resource = this.toDiffEditorViewStateResource(input);\n\t\t\tif (resource) {\n\t\t\t\tconst viewState = this.loadTextEditorViewState(resource);\n\t\t\t\tif (viewState) {\n\t\t\t\t\tthis.getControl().restoreViewState(viewState);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate openAsBinary(input: EditorInput, options: EditorOptions): boolean {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tconst originalInput = input.originalInput;\n\t\t\tconst modifiedInput = input.modifiedInput;\n\n\t\t\tconst binaryDiffInput = new DiffEditorInput(input.getName(), input.getDescription(), originalInput, modifiedInput, true);\n\n\t\t\t// Forward binary flag to input if supported\n\t\t\tconst fileInputFactory = Registry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).getFileInputFactory();\n\t\t\tif (fileInputFactory.isFileInput(originalInput)) {\n\t\t\t\toriginalInput.setForceOpenAsBinary();\n\t\t\t}\n\n\t\t\tif (fileInputFactory.isFileInput(modifiedInput)) {\n\t\t\t\tmodifiedInput.setForceOpenAsBinary();\n\t\t\t}\n\n\t\t\tthis.editorService.openEditor(binaryDiffInput, options, this.group);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions {\n\t\tconst editorConfiguration = super.computeConfiguration(configuration);\n\n\t\t// Handle diff editor specially by merging in diffEditor configuration\n\t\tif (types.isObject(configuration.diffEditor)) {\n\t\t\tobjects.mixin(editorConfiguration, configuration.diffEditor);\n\t\t}\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprotected getConfigurationOverrides(): ICodeEditorOptions {\n\t\tconst options: IDiffEditorOptions = super.getConfigurationOverrides();\n\n\t\toptions.readOnly = this.isReadOnly();\n\t\toptions.lineDecorationsWidth = '2ch';\n\n\t\treturn options;\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\tlet ariaLabel: string;\n\t\tconst inputName = this.input && this.input.getName();\n\t\tif (this.isReadOnly()) {\n\t\t\tariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', \"{0}. Readonly text compare editor.\", inputName) : nls.localize('readonlyEditorAriaLabel', \"Readonly text compare editor.\");\n\t\t} else {\n\t\t\tariaLabel = inputName ? nls.localize('editableEditorWithInputAriaLabel', \"{0}. Text file compare editor.\", inputName) : nls.localize('editableEditorAriaLabel', \"Text file compare editor.\");\n\t\t}\n\n\t\treturn ariaLabel;\n\t}\n\n\tprivate isReadOnly(): boolean {\n\t\tconst input = this.input;\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tconst modifiedInput = input.modifiedInput;\n\n\t\t\treturn modifiedInput instanceof ResourceEditorInput;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate isFileBinaryError(error: Error[]): boolean;\n\tprivate isFileBinaryError(error: Error): boolean;\n\tprivate isFileBinaryError(error: any): boolean {\n\t\tif (types.isArray(error)) {\n\t\t\tconst errors = <Error[]>error;\n\t\t\treturn errors.some(e => this.isFileBinaryError(e));\n\t\t}\n\n\t\treturn (<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY;\n\t}\n\n\tclearInput(): void {\n\n\t\t// Dispose previous diff navigator\n\t\tthis.diffNavigatorDisposables = dispose(this.diffNavigatorDisposables);\n\n\t\t// Keep editor view state in settings to restore when coming back\n\t\tthis.saveTextDiffEditorViewState(this.input);\n\n\t\t// Clear Model\n\t\tthis.getControl().setModel(null);\n\n\t\t// Pass to super\n\t\tsuper.clearInput();\n\t}\n\n\tgetDiffNavigator(): DiffNavigator {\n\t\treturn this.diffNavigator;\n\t}\n\n\tgetControl(): IDiffEditor {\n\t\treturn super.getControl() as IDiffEditor;\n\t}\n\n\tprotected loadTextEditorViewState(resource: URI): IDiffEditorViewState {\n\t\treturn super.loadTextEditorViewState(resource) as IDiffEditorViewState;  // overridden for text diff editor support\n\t}\n\n\tprivate saveTextDiffEditorViewState(input: EditorInput | null): void {\n\t\tif (!(input instanceof DiffEditorInput)) {\n\t\t\treturn; // only supported for diff editor inputs\n\t\t}\n\n\t\tconst resource = this.toDiffEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // unable to retrieve input resource\n\t\t}\n\n\t\t// Clear view state if input is disposed\n\t\tif (input.isDisposed()) {\n\t\t\tsuper.clearTextEditorViewState([resource]);\n\t\t}\n\n\t\t// Otherwise save it\n\t\telse {\n\t\t\tsuper.saveTextEditorViewState(resource);\n\n\t\t\t// Make sure to clean up when the input gets disposed\n\t\t\tEvent.once(input.onDispose)(() => {\n\t\t\t\tsuper.clearTextEditorViewState([resource]);\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected retrieveTextEditorViewState(resource: URI): IDiffEditorViewState | null {\n\t\treturn this.retrieveTextDiffEditorViewState(resource); // overridden for text diff editor support\n\t}\n\n\tprivate retrieveTextDiffEditorViewState(resource: URI): IDiffEditorViewState | null {\n\t\tconst control = this.getControl();\n\t\tconst model = control.getModel();\n\t\tif (!model || !model.modified || !model.original) {\n\t\t\treturn null; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = this.toDiffEditorViewStateResource(model);\n\t\tif (!modelUri) {\n\t\t\treturn null; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (modelUri.toString() !== resource.toString()) {\n\t\t\treturn null; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn control.saveViewState();\n\t}\n\n\tprivate toDiffEditorViewStateResource(modelOrInput: IDiffEditorModel | DiffEditorInput): URI | null {\n\t\tlet original: URI | null;\n\t\tlet modified: URI | null;\n\n\t\tif (modelOrInput instanceof DiffEditorInput) {\n\t\t\toriginal = modelOrInput.originalInput.getResource();\n\t\t\tmodified = modelOrInput.modifiedInput.getResource();\n\t\t} else {\n\t\t\toriginal = modelOrInput.original.uri;\n\t\t\tmodified = modelOrInput.modified.uri;\n\t\t}\n\n\t\tif (!original || !modified) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// create a URI that is the Base64 concatenation of original + modified resource\n\t\treturn URI.from({ scheme: 'diff', path: `${btoa(original.toString())}${btoa(modified.toString())}` });\n\t}\n\n\tdispose(): void {\n\t\tthis.diffNavigatorDisposables = dispose(this.diffNavigatorDisposables);\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}