{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/environment/common/environment.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/environment/common/environment.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IEnvironmentService = instantiation_1.createDecorator('environmentService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/environment/common/environment.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/environment/common/environment.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAqEpE,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface ParsedArgs {\n\t[arg: string]: any;\n\t_: string[];\n\t'folder-uri'?: string | string[];\n\t'file-uri'?: string | string[];\n\t_urls?: string[];\n\thelp?: boolean;\n\tversion?: boolean;\n\tstatus?: boolean;\n\twait?: boolean;\n\twaitMarkerFilePath?: string;\n\tdiff?: boolean;\n\tadd?: boolean;\n\tgoto?: boolean;\n\t'new-window'?: boolean;\n\t'unity-launch'?: boolean; // Always open a new window, except if opening the first window or opening a file or folder as part of the launch.\n\t'reuse-window'?: boolean;\n\tlocale?: string;\n\t'user-data-dir'?: string;\n\t'prof-startup'?: string;\n\t'prof-startup-prefix'?: string;\n\t'prof-append-timers'?: string;\n\t'prof-modules'?: string;\n\tverbose?: boolean;\n\ttrace?: boolean;\n\t'trace-category-filter'?: string;\n\t'trace-options'?: string;\n\tlog?: string;\n\tlogExtensionHostCommunication?: boolean;\n\t'extensions-dir'?: string;\n\t'builtin-extensions-dir'?: string;\n\textensionDevelopmentPath?: string; // either a local path or a URI\n\textensionTestsPath?: string; // either a local path or a URI\n\t'inspect-extensions'?: string;\n\t'inspect-brk-extensions'?: string;\n\tdebugId?: string;\n\t'inspect-search'?: string;\n\t'inspect-brk-search'?: string;\n\t'disable-extensions'?: boolean;\n\t'disable-extension'?: string | string[];\n\t'list-extensions'?: boolean;\n\t'show-versions'?: boolean;\n\t'install-extension'?: string | string[];\n\t'uninstall-extension'?: string | string[];\n\t'enable-proposed-api'?: string | string[];\n\t'open-url'?: boolean;\n\t'skip-getting-started'?: boolean;\n\t'skip-release-notes'?: boolean;\n\t'sticky-quickopen'?: boolean;\n\t'disable-restore-windows'?: boolean;\n\t'disable-telemetry'?: boolean;\n\t'export-default-configuration'?: string;\n\t'install-source'?: string;\n\t'disable-updates'?: string;\n\t'disable-crash-reporter'?: string;\n\t'skip-add-to-recently-opened'?: boolean;\n\t'max-memory'?: string;\n\t'file-write'?: boolean;\n\t'file-chmod'?: boolean;\n\t'upload-logs'?: string;\n\t'driver'?: string;\n\t'driver-verbose'?: boolean;\n\tremote?: string;\n\t'nodeless'?: boolean; // TODO@ben revisit electron5 nodeless support\n}\n\nexport const IEnvironmentService = createDecorator<IEnvironmentService>('environmentService');\n\nexport interface IDebugParams {\n\tport: number | null;\n\tbreak: boolean;\n}\n\nexport interface IExtensionHostDebugParams extends IDebugParams {\n\tdebugId?: string;\n}\n\nexport interface IEnvironmentService {\n\t_serviceBrand: any;\n\n\targs: ParsedArgs;\n\n\texecPath: string;\n\tcliPath: string;\n\tappRoot: string;\n\n\tuserHome: string;\n\tuserDataPath: string;\n\n\tappNameLong: string;\n\tappQuality?: string;\n\tappSettingsHome: string;\n\tappSettingsPath: string;\n\tappKeybindingsPath: string;\n\n\tsettingsSearchBuildId?: number;\n\tsettingsSearchUrl?: string;\n\n\tglobalStorageHome: string;\n\tworkspaceStorageHome: string;\n\n\tbackupHome: string;\n\tbackupWorkspacesPath: string;\n\n\tuntitledWorkspacesHome: URI;\n\n\tisExtensionDevelopment: boolean;\n\tdisableExtensions: boolean | string[];\n\tbuiltinExtensionsPath: string;\n\textensionsPath: string;\n\textensionDevelopmentLocationURI?: URI;\n\textensionTestsLocationURI?: URI;\n\n\tdebugExtensionHost: IExtensionHostDebugParams;\n\tdebugSearch: IDebugParams;\n\n\tlogExtensionHostCommunication: boolean;\n\n\tisBuilt: boolean;\n\twait: boolean;\n\tstatus: boolean;\n\n\t// logging\n\tlog?: string;\n\tlogsPath: string;\n\tverbose: boolean;\n\n\tskipGettingStarted: boolean | undefined;\n\tskipReleaseNotes: boolean | undefined;\n\n\tskipAddToRecentlyOpened: boolean;\n\n\tmainIPCHandle: string;\n\tsharedIPCHandle: string;\n\n\tnodeCachedDataDir?: string;\n\n\tinstallSourcePath: string;\n\tdisableUpdates: boolean;\n\tdisableCrashReporter: boolean;\n\n\tdriverHandle?: string;\n\tdriverVerbose: boolean;\n}\n"]}]}