{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar strings = require(\"vs/base/common/strings\");\nvar Severity;\n(function (Severity) {\n    Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n    Severity[Severity[\"Info\"] = 1] = \"Info\";\n    Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n    Severity[Severity[\"Error\"] = 3] = \"Error\";\n})(Severity || (Severity = {}));\n(function (Severity) {\n    var _error = 'error';\n    var _warning = 'warning';\n    var _warn = 'warn';\n    var _info = 'info';\n    var _displayStrings = Object.create(null);\n    _displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\n    _displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\n    _displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\n    /**\n     * Parses 'error', 'warning', 'warn', 'info' in call casings\n     * and falls back to ignore.\n     */\n    function fromValue(value) {\n        if (!value) {\n            return Severity.Ignore;\n        }\n        if (strings.equalsIgnoreCase(_error, value)) {\n            return Severity.Error;\n        }\n        if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n            return Severity.Warning;\n        }\n        if (strings.equalsIgnoreCase(_info, value)) {\n            return Severity.Info;\n        }\n        return Severity.Ignore;\n    }\n    Severity.fromValue = fromValue;\n})(Severity || (Severity = {}));\nexports.default = Severity;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/severity.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,gDAAkD;AAElD,IAAK,QAKJ;AALD,WAAK,QAAQ;IACZ,2CAAU,CAAA;IACV,uCAAQ,CAAA;IACR,6CAAW,CAAA;IACX,yCAAS,CAAA;AACV,CAAC,EALI,QAAQ,KAAR,QAAQ,QAKZ;AAED,WAAU,QAAQ;IAEjB,IAAM,MAAM,GAAG,OAAO,CAAC;IACvB,IAAM,QAAQ,GAAG,SAAS,CAAC;IAC3B,IAAM,KAAK,GAAG,MAAM,CAAC;IACrB,IAAM,KAAK,GAAG,MAAM,CAAC;IAErB,IAAM,eAAe,GAAiC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1E,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACrE,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IAC3E,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAElE;;;OAGG;IACH,SAAgB,SAAS,CAAC,KAAa;QACtC,IAAI,CAAC,KAAK,EAAE;YACX,OAAO,QAAQ,CAAC,MAAM,CAAC;SACvB;QAED,IAAI,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YAC5C,OAAO,QAAQ,CAAC,KAAK,CAAC;SACtB;QAED,IAAI,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;YACxF,OAAO,QAAQ,CAAC,OAAO,CAAC;SACxB;QAED,IAAI,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;YAC3C,OAAO,QAAQ,CAAC,IAAI,CAAC;SACrB;QACD,OAAO,QAAQ,CAAC,MAAM,CAAC;IACxB,CAAC;IAjBe,kBAAS,YAiBxB,CAAA;AACF,CAAC,EAlCS,QAAQ,KAAR,QAAQ,QAkCjB;AAED,kBAAe,QAAQ,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as strings from 'vs/base/common/strings';\n\nenum Severity {\n\tIgnore = 0,\n\tInfo = 1,\n\tWarning = 2,\n\tError = 3\n}\n\nnamespace Severity {\n\n\tconst _error = 'error';\n\tconst _warning = 'warning';\n\tconst _warn = 'warn';\n\tconst _info = 'info';\n\n\tconst _displayStrings: { [value: number]: string; } = Object.create(null);\n\t_displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\n\t_displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\n\t_displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\n\n\t/**\n\t * Parses 'error', 'warning', 'warn', 'info' in call casings\n\t * and falls back to ignore.\n\t */\n\texport function fromValue(value: string): Severity {\n\t\tif (!value) {\n\t\t\treturn Severity.Ignore;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_error, value)) {\n\t\t\treturn Severity.Error;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n\t\t\treturn Severity.Warning;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_info, value)) {\n\t\t\treturn Severity.Info;\n\t\t}\n\t\treturn Severity.Ignore;\n\t}\n}\n\nexport default Severity;\n"]}]}