{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar terminalCommands_1 = require(\"vs/workbench/contrib/terminal/common/terminalCommands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nfunction setupTerminalMenu() {\n    // View menu\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n        group: '4_panels',\n        command: {\n            id: terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE,\n            title: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\")\n        },\n        order: 3\n    });\n    // Manage\n    var createGroup = '1_create';\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n        group: createGroup,\n        command: {\n            id: terminalCommands_1.TERMINAL_COMMAND_ID.NEW,\n            title: nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, \"&&New Terminal\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n        group: createGroup,\n        command: {\n            id: terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT,\n            title: nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Split Terminal\"),\n            precondition: contextkey_1.ContextKeyExpr.has('terminalIsOpen')\n        },\n        order: 2\n    });\n    // Run\n    var runGroup = '2_run';\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n        group: runGroup,\n        command: {\n            id: terminalCommands_1.TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n            title: nls.localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, \"Run &&Active File\")\n        },\n        order: 3\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n        group: runGroup,\n        command: {\n            id: terminalCommands_1.TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n            title: nls.localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, \"Run &&Selected Text\")\n        },\n        order: 4\n    });\n}\nexports.setupTerminalMenu = setupTerminalMenu;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,8DAA0E;AAC1E,0FAA4F;AAC5F,uEAA0E;AAE1E,SAAgB,iBAAiB;IAEhC,YAAY;IAEZ,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;QACnD,KAAK,EAAE,UAAU;QACjB,OAAO,EAAE;YACR,EAAE,EAAE,sCAAmB,CAAC,MAAM;YAC9B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,4BAA4B,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,YAAY,CAAC;SAC5G;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC;IAEH,SAAS;IACT,IAAM,WAAW,GAAG,UAAU,CAAC;IAC/B,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;QACvD,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE;YACR,EAAE,EAAE,sCAAmB,CAAC,GAAG;YAC3B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,gBAAgB,CAAC;SACnG;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC;IACH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;QACvD,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE;YACR,EAAE,EAAE,sCAAmB,CAAC,KAAK;YAC7B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,kBAAkB,CAAC;YACvG,YAAY,EAAE,2BAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC;SAClD;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC;IAEH,MAAM;IACN,IAAM,QAAQ,GAAG,OAAO,CAAC;IACzB,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;QACvD,KAAK,EAAE,QAAQ;QACf,OAAO,EAAE;YACR,EAAE,EAAE,sCAAmB,CAAC,eAAe;YACvC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,mBAAmB,CAAC;SACxG;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC;IACH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,mBAAmB,EAAE;QACvD,KAAK,EAAE,QAAQ;QACf,OAAO,EAAE;YACR,EAAE,EAAE,sCAAmB,CAAC,iBAAiB;YACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,qBAAqB,CAAC;SAC5G;QACD,KAAK,EAAE,CAAC;KACR,CAAC,CAAC;AACJ,CAAC;AAnDD,8CAmDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { TERMINAL_COMMAND_ID } from 'vs/workbench/contrib/terminal/common/terminalCommands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nexport function setupTerminalMenu() {\n\n\t// View menu\n\n\tMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\t\tgroup: '4_panels',\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.TOGGLE,\n\t\t\ttitle: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\")\n\t\t},\n\t\torder: 3\n\t});\n\n\t// Manage\n\tconst createGroup = '1_create';\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: createGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.NEW,\n\t\t\ttitle: nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, \"&&New Terminal\")\n\t\t},\n\t\torder: 1\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: createGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.SPLIT,\n\t\t\ttitle: nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Split Terminal\"),\n\t\t\tprecondition: ContextKeyExpr.has('terminalIsOpen')\n\t\t},\n\t\torder: 2\n\t});\n\n\t// Run\n\tconst runGroup = '2_run';\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: runGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n\t\t\ttitle: nls.localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, \"Run &&Active File\")\n\t\t},\n\t\torder: 3\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\t\tgroup: runGroup,\n\t\tcommand: {\n\t\t\tid: TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n\t\t\ttitle: nls.localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, \"Run &&Selected Text\")\n\t\t},\n\t\torder: 4\n\t});\n}\n"]}]}