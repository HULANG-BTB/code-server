{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadUrls.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadUrls.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"../common/extHostCustomers\");\nvar url_1 = require(\"vs/platform/url/common/url\");\nvar inactiveExtensionUrlHandler_1 = require(\"vs/workbench/services/extensions/common/inactiveExtensionUrlHandler\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar ExtensionUrlHandler = /** @class */ (function () {\n    function ExtensionUrlHandler(proxy, handle, extensionId) {\n        this.proxy = proxy;\n        this.handle = handle;\n        this.extensionId = extensionId;\n    }\n    ExtensionUrlHandler.prototype.handleURL = function (uri) {\n        if (!extensions_1.ExtensionIdentifier.equals(this.extensionId, uri.authority)) {\n            return Promise.resolve(false);\n        }\n        return Promise.resolve(this.proxy.$handleExternalUri(this.handle, uri)).then(function () { return true; });\n    };\n    return ExtensionUrlHandler;\n}());\nvar MainThreadUrls = /** @class */ (function () {\n    function MainThreadUrls(context, urlService, inactiveExtensionUrlHandler) {\n        this.urlService = urlService;\n        this.inactiveExtensionUrlHandler = inactiveExtensionUrlHandler;\n        this.handlers = new Map();\n        this.proxy = context.getProxy(extHost_protocol_1.ExtHostContext.ExtHostUrls);\n    }\n    MainThreadUrls.prototype.$registerUriHandler = function (handle, extensionId) {\n        var handler = new ExtensionUrlHandler(this.proxy, handle, extensionId);\n        var disposable = this.urlService.registerHandler(handler);\n        this.handlers.set(handle, { extensionId: extensionId, disposable: disposable });\n        this.inactiveExtensionUrlHandler.registerExtensionHandler(extensionId, handler);\n        return Promise.resolve(undefined);\n    };\n    MainThreadUrls.prototype.$unregisterUriHandler = function (handle) {\n        var tuple = this.handlers.get(handle);\n        if (!tuple) {\n            return Promise.resolve(undefined);\n        }\n        var extensionId = tuple.extensionId, disposable = tuple.disposable;\n        this.inactiveExtensionUrlHandler.unregisterExtensionHandler(extensionId);\n        this.handlers.delete(handle);\n        disposable.dispose();\n        return Promise.resolve(undefined);\n    };\n    MainThreadUrls.prototype.dispose = function () {\n        this.handlers.forEach(function (_a) {\n            var disposable = _a.disposable;\n            return disposable.dispose();\n        });\n        this.handlers.clear();\n    };\n    MainThreadUrls = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadUrls),\n        tslib_1.__param(1, url_1.IURLService),\n        tslib_1.__param(2, inactiveExtensionUrlHandler_1.IExtensionUrlHandler)\n    ], MainThreadUrls);\n    return MainThreadUrls;\n}());\nexports.MainThreadUrls = MainThreadUrls;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadUrls.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadUrls.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,6EAA+I;AAC/I,+DAAkE;AAClE,kDAAsE;AAGtE,mHAA2G;AAC3G,uEAA+E;AAE/E;IAEC,6BACkB,KAAuB,EACvB,MAAc,EACtB,WAAgC;QAFxB,UAAK,GAAL,KAAK,CAAkB;QACvB,WAAM,GAAN,MAAM,CAAQ;QACtB,gBAAW,GAAX,WAAW,CAAqB;IACtC,CAAC;IAEL,uCAAS,GAAT,UAAU,GAAQ;QACjB,IAAI,CAAC,gCAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE;YACjE,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAC1F,CAAC;IACF,0BAAC;AAAD,CAAC,AAfD,IAeC;AAGD;IAKC,wBACC,OAAwB,EACM,UAAuB,EACd,2BAAiD;QAD1D,eAAU,GAAV,UAAU,CAAa;QACd,gCAA2B,GAA3B,2BAA2B,CAAsB;QALjF,aAAQ,GAAG,IAAI,GAAG,EAAyE,CAAC;QAOnG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,iCAAc,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED,4CAAmB,GAAnB,UAAoB,MAAc,EAAE,WAAgC;QACnE,IAAM,OAAO,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QACzE,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAE5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,2BAA2B,CAAC,wBAAwB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAEhF,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAED,8CAAqB,GAArB,UAAsB,MAAc;QACnC,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAExC,IAAI,CAAC,KAAK,EAAE;YACX,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAClC;QAEO,IAAA,+BAAW,EAAE,6BAAU,CAAW;QAE1C,IAAI,CAAC,2BAA2B,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7B,UAAU,CAAC,OAAO,EAAE,CAAC;QAErB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAED,gCAAO,GAAP;QACC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,EAAc;gBAAZ,0BAAU;YAAO,OAAA,UAAU,CAAC,OAAO,EAAE;QAApB,CAAoB,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IA1CW,cAAc;QAD1B,uCAAoB,CAAC,8BAAW,CAAC,cAAc,CAAC;QAQ9C,mBAAA,iBAAW,CAAA;QACX,mBAAA,kDAAoB,CAAA;OARV,cAAc,CA2C1B;IAAD,qBAAC;CAAA,AA3CD,IA2CC;AA3CY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostContext, IExtHostContext, MainContext, MainThreadUrlsShape, ExtHostUrlsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer } from '../common/extHostCustomers';\nimport { IURLService, IURLHandler } from 'vs/platform/url/common/url';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IExtensionUrlHandler } from 'vs/workbench/services/extensions/common/inactiveExtensionUrlHandler';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nclass ExtensionUrlHandler implements IURLHandler {\n\n\tconstructor(\n\t\tprivate readonly proxy: ExtHostUrlsShape,\n\t\tprivate readonly handle: number,\n\t\treadonly extensionId: ExtensionIdentifier\n\t) { }\n\n\thandleURL(uri: URI): Promise<boolean> {\n\t\tif (!ExtensionIdentifier.equals(this.extensionId, uri.authority)) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\treturn Promise.resolve(this.proxy.$handleExternalUri(this.handle, uri)).then(() => true);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUrls)\nexport class MainThreadUrls implements MainThreadUrlsShape {\n\n\tprivate readonly proxy: ExtHostUrlsShape;\n\tprivate handlers = new Map<number, { extensionId: ExtensionIdentifier, disposable: IDisposable }>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IExtensionUrlHandler private readonly inactiveExtensionUrlHandler: IExtensionUrlHandler\n\t) {\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUrls);\n\t}\n\n\t$registerUriHandler(handle: number, extensionId: ExtensionIdentifier): Promise<void> {\n\t\tconst handler = new ExtensionUrlHandler(this.proxy, handle, extensionId);\n\t\tconst disposable = this.urlService.registerHandler(handler);\n\n\t\tthis.handlers.set(handle, { extensionId, disposable });\n\t\tthis.inactiveExtensionUrlHandler.registerExtensionHandler(extensionId, handler);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$unregisterUriHandler(handle: number): Promise<void> {\n\t\tconst tuple = this.handlers.get(handle);\n\n\t\tif (!tuple) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst { extensionId, disposable } = tuple;\n\n\t\tthis.inactiveExtensionUrlHandler.unregisterExtensionHandler(extensionId);\n\t\tthis.handlers.delete(handle);\n\t\tdisposable.dispose();\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tdispose(): void {\n\t\tthis.handlers.forEach(({ disposable }) => disposable.dispose());\n\t\tthis.handlers.clear();\n\t}\n}\n"]}]}