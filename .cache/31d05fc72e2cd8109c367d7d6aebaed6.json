{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar storage_2 = require(\"vs/base/node/storage\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar nls_1 = require(\"vs/nls\");\nvar performance_1 = require(\"vs/base/common/performance\");\nvar path_1 = require(\"vs/base/common/path\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar StorageService = /** @class */ (function (_super) {\n    tslib_1.__extends(StorageService, _super);\n    function StorageService(globalStorageDatabase, logService, environmentService) {\n        var _this = _super.call(this) || this;\n        _this.logService = logService;\n        _this.environmentService = environmentService;\n        _this._onDidChangeStorage = _this._register(new event_1.Emitter());\n        _this._onWillSaveState = _this._register(new event_1.Emitter());\n        // Global Storage\n        _this.globalStorage = new storage_2.Storage(globalStorageDatabase);\n        _this._register(_this.globalStorage.onDidChangeStorage(function (key) { return _this.handleDidChangeStorage(key, storage_1.StorageScope.GLOBAL); }));\n        return _this;\n    }\n    Object.defineProperty(StorageService.prototype, \"onDidChangeStorage\", {\n        get: function () { return this._onDidChangeStorage.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StorageService.prototype, \"onWillSaveState\", {\n        get: function () { return this._onWillSaveState.event; },\n        enumerable: true,\n        configurable: true\n    });\n    StorageService.prototype.handleDidChangeStorage = function (key, scope) {\n        this._onDidChangeStorage.fire({ key: key, scope: scope });\n    };\n    StorageService.prototype.initialize = function (payload) {\n        if (!this.initializePromise) {\n            this.initializePromise = this.doInitialize(payload);\n        }\n        return this.initializePromise;\n    };\n    StorageService.prototype.doInitialize = function (payload) {\n        return Promise.all([\n            this.initializeGlobalStorage(),\n            this.initializeWorkspaceStorage(payload)\n        ]).then(function () { return undefined; });\n    };\n    StorageService.prototype.initializeGlobalStorage = function () {\n        return this.globalStorage.init();\n    };\n    StorageService.prototype.initializeWorkspaceStorage = function (payload) {\n        var _this = this;\n        // Prepare workspace storage folder for DB\n        return this.prepareWorkspaceStorageFolder(payload).then(function (result) {\n            var useInMemoryStorage = !!_this.environmentService.extensionTestsLocationURI; // no storage during extension tests!\n            // Create workspace storage and initalize\n            performance_1.mark('willInitWorkspaceStorage');\n            return _this.createWorkspaceStorage(useInMemoryStorage ? storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH : path_1.join(result.path, StorageService.WORKSPACE_STORAGE_NAME), result.wasCreated ? storage_2.StorageHint.STORAGE_DOES_NOT_EXIST : undefined).init().then(function () {\n                performance_1.mark('didInitWorkspaceStorage');\n            }, function (error) {\n                performance_1.mark('didInitWorkspaceStorage');\n                return Promise.reject(error);\n            });\n        }).then(undefined, function (error) {\n            errors_1.onUnexpectedError(error);\n            // Upon error, fallback to in-memory storage\n            return _this.createWorkspaceStorage(storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH).init();\n        });\n    };\n    StorageService.prototype.createWorkspaceStorage = function (workspaceStoragePath, hint) {\n        var _this = this;\n        // Logger for workspace storage\n        var workspaceLoggingOptions = {\n            logTrace: (this.logService.getLevel() === log_1.LogLevel.Trace) ? function (msg) { return _this.logService.trace(msg); } : undefined,\n            logError: function (error) { return _this.logService.error(error); }\n        };\n        // Dispose old (if any)\n        this.workspaceStorage = lifecycle_1.dispose(this.workspaceStorage);\n        this.workspaceStorageListener = lifecycle_1.dispose(this.workspaceStorageListener);\n        // Create new\n        this.workspaceStoragePath = workspaceStoragePath;\n        this.workspaceStorage = new storage_2.Storage(new storage_2.SQLiteStorageDatabase(workspaceStoragePath, { logging: workspaceLoggingOptions }), { hint: hint });\n        this.workspaceStorageListener = this.workspaceStorage.onDidChangeStorage(function (key) { return _this.handleDidChangeStorage(key, storage_1.StorageScope.WORKSPACE); });\n        return this.workspaceStorage;\n    };\n    StorageService.prototype.getWorkspaceStorageFolderPath = function (payload) {\n        return path_1.join(this.environmentService.workspaceStorageHome, payload.id); // workspace home + workspace id;\n    };\n    StorageService.prototype.prepareWorkspaceStorageFolder = function (payload) {\n        var _this = this;\n        var workspaceStorageFolderPath = this.getWorkspaceStorageFolderPath(payload);\n        return pfs_1.exists(workspaceStorageFolderPath).then(function (exists) {\n            if (exists) {\n                return { path: workspaceStorageFolderPath, wasCreated: false };\n            }\n            return pfs_1.mkdirp(workspaceStorageFolderPath).then(function () {\n                // Write metadata into folder\n                _this.ensureWorkspaceStorageFolderMeta(payload);\n                return { path: workspaceStorageFolderPath, wasCreated: true };\n            });\n        });\n    };\n    StorageService.prototype.ensureWorkspaceStorageFolderMeta = function (payload) {\n        var meta = undefined;\n        if (workspaces_1.isSingleFolderWorkspaceInitializationPayload(payload)) {\n            meta = { folder: payload.folder.toString() };\n        }\n        else if (workspaces_1.isWorkspaceIdentifier(payload)) {\n            meta = { configuration: payload.configPath };\n        }\n        if (meta) {\n            var workspaceStorageMetaPath_1 = path_1.join(this.getWorkspaceStorageFolderPath(payload), StorageService.WORKSPACE_META_NAME);\n            pfs_1.exists(workspaceStorageMetaPath_1).then(function (exists) {\n                if (exists) {\n                    return undefined; // already existing\n                }\n                return pfs_1.writeFile(workspaceStorageMetaPath_1, JSON.stringify(meta, undefined, 2));\n            }).then(undefined, function (error) { return errors_1.onUnexpectedError(error); });\n        }\n    };\n    StorageService.prototype.get = function (key, scope, fallbackValue) {\n        return this.getStorage(scope).get(key, fallbackValue);\n    };\n    StorageService.prototype.getBoolean = function (key, scope, fallbackValue) {\n        return this.getStorage(scope).getBoolean(key, fallbackValue);\n    };\n    StorageService.prototype.getNumber = function (key, scope, fallbackValue) {\n        return this.getStorage(scope).getNumber(key, fallbackValue);\n    };\n    StorageService.prototype.store = function (key, value, scope) {\n        this.getStorage(scope).set(key, value);\n    };\n    StorageService.prototype.remove = function (key, scope) {\n        this.getStorage(scope).delete(key);\n    };\n    StorageService.prototype.close = function () {\n        // Signal as event so that clients can still store data\n        this._onWillSaveState.fire({ reason: storage_1.WillSaveStateReason.SHUTDOWN });\n        // Do it\n        return Promise.all([\n            this.globalStorage.close(),\n            this.workspaceStorage.close()\n        ]).then(function () { return undefined; });\n    };\n    StorageService.prototype.getStorage = function (scope) {\n        return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage : this.workspaceStorage;\n    };\n    StorageService.prototype.getSize = function (scope) {\n        return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage.size : this.workspaceStorage.size;\n    };\n    StorageService.prototype.checkIntegrity = function (scope, full) {\n        return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage.checkIntegrity(full) : this.workspaceStorage.checkIntegrity(full);\n    };\n    StorageService.prototype.logStorage = function () {\n        var _this = this;\n        return Promise.all([\n            this.globalStorage.items,\n            this.workspaceStorage.items,\n            this.globalStorage.checkIntegrity(true /* full */),\n            this.workspaceStorage.checkIntegrity(true /* full */)\n        ]).then(function (result) {\n            var safeParse = function (value) {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (error) {\n                    return value;\n                }\n            };\n            var globalItems = new Map();\n            var globalItemsParsed = new Map();\n            result[0].forEach(function (value, key) {\n                globalItems.set(key, value);\n                globalItemsParsed.set(key, safeParse(value));\n            });\n            var workspaceItems = new Map();\n            var workspaceItemsParsed = new Map();\n            result[1].forEach(function (value, key) {\n                workspaceItems.set(key, value);\n                workspaceItemsParsed.set(key, safeParse(value));\n            });\n            console.group(\"Storage: Global (integrity: \" + result[2] + \", path: \" + _this.environmentService.globalStorageHome + \")\");\n            var globalValues = [];\n            globalItems.forEach(function (value, key) {\n                globalValues.push({ key: key, value: value });\n            });\n            console.table(globalValues);\n            console.groupEnd();\n            console.log(globalItemsParsed);\n            console.group(\"Storage: Workspace (integrity: \" + result[3] + \", load: \" + performance_1.getDuration('willInitWorkspaceStorage', 'didInitWorkspaceStorage') + \", path: \" + _this.workspaceStoragePath + \")\");\n            var workspaceValues = [];\n            workspaceItems.forEach(function (value, key) {\n                workspaceValues.push({ key: key, value: value });\n            });\n            console.table(workspaceValues);\n            console.groupEnd();\n            console.log(workspaceItemsParsed);\n        });\n    };\n    StorageService.prototype.migrate = function (toWorkspace) {\n        var _this = this;\n        if (this.workspaceStoragePath === storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH) {\n            return Promise.resolve(); // no migration needed if running in memory\n        }\n        // Close workspace DB to be able to copy\n        return this.workspaceStorage.close().then(function () {\n            // Prepare new workspace storage folder\n            return _this.prepareWorkspaceStorageFolder(toWorkspace).then(function (result) {\n                var newWorkspaceStoragePath = path_1.join(result.path, StorageService.WORKSPACE_STORAGE_NAME);\n                // Copy current storage over to new workspace storage\n                return pfs_1.copy(_this.workspaceStoragePath, newWorkspaceStoragePath).then(function () {\n                    // Recreate and init workspace storage\n                    return _this.createWorkspaceStorage(newWorkspaceStoragePath).init();\n                });\n            });\n        });\n    };\n    StorageService.WORKSPACE_STORAGE_NAME = 'state.vscdb';\n    StorageService.WORKSPACE_META_NAME = 'workspace.json';\n    StorageService = tslib_1.__decorate([\n        tslib_1.__param(1, log_1.ILogService),\n        tslib_1.__param(2, environment_1.IEnvironmentService)\n    ], StorageService);\n    return StorageService;\n}(lifecycle_1.Disposable));\nexports.StorageService = StorageService;\nvar LogStorageAction = /** @class */ (function (_super) {\n    tslib_1.__extends(LogStorageAction, _super);\n    function LogStorageAction(id, label, storageService, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.storageService = storageService;\n        _this.windowService = windowService;\n        return _this;\n    }\n    LogStorageAction.prototype.run = function () {\n        this.storageService.logStorage();\n        return this.windowService.openDevTools();\n    };\n    LogStorageAction.ID = 'workbench.action.logStorage';\n    LogStorageAction.LABEL = nls_1.localize({ key: 'logStorage', comment: ['A developer only action to log the contents of the storage for the current window.'] }, \"Log Storage Database Contents\");\n    LogStorageAction = tslib_1.__decorate([\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, windows_1.IWindowService)\n    ], LogStorageAction);\n    return LogStorageAction;\n}(actions_1.Action));\nexports.LogStorageAction = LogStorageAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { IWorkspaceStorageChangeEvent, IStorageService, StorageScope, IWillSaveStateEvent, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { Storage, ISQLiteStorageDatabaseLoggingOptions, IStorage, StorageHint, IStorageDatabase, SQLiteStorageDatabase } from 'vs/base/node/storage';\nimport { Action } from 'vs/base/common/actions';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { localize } from 'vs/nls';\nimport { mark, getDuration } from 'vs/base/common/performance';\nimport { join } from 'vs/base/common/path';\nimport { copy, exists, mkdirp, writeFile } from 'vs/base/node/pfs';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceInitializationPayload, isWorkspaceIdentifier, isSingleFolderWorkspaceInitializationPayload } from 'vs/platform/workspaces/common/workspaces';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nexport class StorageService extends Disposable implements IStorageService {\n\t_serviceBrand: any;\n\n\tprivate static WORKSPACE_STORAGE_NAME = 'state.vscdb';\n\tprivate static WORKSPACE_META_NAME = 'workspace.json';\n\n\tprivate readonly _onDidChangeStorage: Emitter<IWorkspaceStorageChangeEvent> = this._register(new Emitter<IWorkspaceStorageChangeEvent>());\n\tget onDidChangeStorage(): Event<IWorkspaceStorageChangeEvent> { return this._onDidChangeStorage.event; }\n\n\tprivate readonly _onWillSaveState: Emitter<IWillSaveStateEvent> = this._register(new Emitter<IWillSaveStateEvent>());\n\tget onWillSaveState(): Event<IWillSaveStateEvent> { return this._onWillSaveState.event; }\n\n\tprivate globalStorage: IStorage;\n\n\tprivate workspaceStoragePath: string;\n\tprivate workspaceStorage: IStorage;\n\tprivate workspaceStorageListener: IDisposable;\n\n\tprivate initializePromise: Promise<void>;\n\n\tconstructor(\n\t\tglobalStorageDatabase: IStorageDatabase,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\t// Global Storage\n\t\tthis.globalStorage = new Storage(globalStorageDatabase);\n\t\tthis._register(this.globalStorage.onDidChangeStorage(key => this.handleDidChangeStorage(key, StorageScope.GLOBAL)));\n\t}\n\n\tprivate handleDidChangeStorage(key: string, scope: StorageScope): void {\n\t\tthis._onDidChangeStorage.fire({ key, scope });\n\t}\n\n\tinitialize(payload: IWorkspaceInitializationPayload): Promise<void> {\n\t\tif (!this.initializePromise) {\n\t\t\tthis.initializePromise = this.doInitialize(payload);\n\t\t}\n\n\t\treturn this.initializePromise;\n\t}\n\n\tprivate doInitialize(payload: IWorkspaceInitializationPayload): Promise<void> {\n\t\treturn Promise.all([\n\t\t\tthis.initializeGlobalStorage(),\n\t\t\tthis.initializeWorkspaceStorage(payload)\n\t\t]).then(() => undefined);\n\t}\n\n\tprivate initializeGlobalStorage(): Promise<void> {\n\t\treturn this.globalStorage.init();\n\t}\n\n\tprivate initializeWorkspaceStorage(payload: IWorkspaceInitializationPayload): Promise<void> {\n\n\t\t// Prepare workspace storage folder for DB\n\t\treturn this.prepareWorkspaceStorageFolder(payload).then(result => {\n\t\t\tconst useInMemoryStorage = !!this.environmentService.extensionTestsLocationURI; // no storage during extension tests!\n\n\t\t\t// Create workspace storage and initalize\n\t\t\tmark('willInitWorkspaceStorage');\n\t\t\treturn this.createWorkspaceStorage(useInMemoryStorage ? SQLiteStorageDatabase.IN_MEMORY_PATH : join(result.path, StorageService.WORKSPACE_STORAGE_NAME), result.wasCreated ? StorageHint.STORAGE_DOES_NOT_EXIST : undefined).init().then(() => {\n\t\t\t\tmark('didInitWorkspaceStorage');\n\t\t\t}, error => {\n\t\t\t\tmark('didInitWorkspaceStorage');\n\n\t\t\t\treturn Promise.reject(error);\n\t\t\t});\n\t\t}).then(undefined, error => {\n\t\t\tonUnexpectedError(error);\n\n\t\t\t// Upon error, fallback to in-memory storage\n\t\t\treturn this.createWorkspaceStorage(SQLiteStorageDatabase.IN_MEMORY_PATH).init();\n\t\t});\n\t}\n\n\tprivate createWorkspaceStorage(workspaceStoragePath: string, hint?: StorageHint): IStorage {\n\n\t\t// Logger for workspace storage\n\t\tconst workspaceLoggingOptions: ISQLiteStorageDatabaseLoggingOptions = {\n\t\t\tlogTrace: (this.logService.getLevel() === LogLevel.Trace) ? msg => this.logService.trace(msg) : undefined,\n\t\t\tlogError: error => this.logService.error(error)\n\t\t};\n\n\t\t// Dispose old (if any)\n\t\tthis.workspaceStorage = dispose(this.workspaceStorage);\n\t\tthis.workspaceStorageListener = dispose(this.workspaceStorageListener);\n\n\t\t// Create new\n\t\tthis.workspaceStoragePath = workspaceStoragePath;\n\t\tthis.workspaceStorage = new Storage(new SQLiteStorageDatabase(workspaceStoragePath, { logging: workspaceLoggingOptions }), { hint });\n\t\tthis.workspaceStorageListener = this.workspaceStorage.onDidChangeStorage(key => this.handleDidChangeStorage(key, StorageScope.WORKSPACE));\n\n\t\treturn this.workspaceStorage;\n\t}\n\n\tprivate getWorkspaceStorageFolderPath(payload: IWorkspaceInitializationPayload): string {\n\t\treturn join(this.environmentService.workspaceStorageHome, payload.id); // workspace home + workspace id;\n\t}\n\n\tprivate prepareWorkspaceStorageFolder(payload: IWorkspaceInitializationPayload): Promise<{ path: string, wasCreated: boolean }> {\n\t\tconst workspaceStorageFolderPath = this.getWorkspaceStorageFolderPath(payload);\n\n\t\treturn exists(workspaceStorageFolderPath).then<{ path: string, wasCreated: boolean }>(exists => {\n\t\t\tif (exists) {\n\t\t\t\treturn { path: workspaceStorageFolderPath, wasCreated: false };\n\t\t\t}\n\n\t\t\treturn mkdirp(workspaceStorageFolderPath).then(() => {\n\n\t\t\t\t// Write metadata into folder\n\t\t\t\tthis.ensureWorkspaceStorageFolderMeta(payload);\n\n\t\t\t\treturn { path: workspaceStorageFolderPath, wasCreated: true };\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate ensureWorkspaceStorageFolderMeta(payload: IWorkspaceInitializationPayload): void {\n\t\tlet meta: object | undefined = undefined;\n\t\tif (isSingleFolderWorkspaceInitializationPayload(payload)) {\n\t\t\tmeta = { folder: payload.folder.toString() };\n\t\t} else if (isWorkspaceIdentifier(payload)) {\n\t\t\tmeta = { configuration: payload.configPath };\n\t\t}\n\n\t\tif (meta) {\n\t\t\tconst workspaceStorageMetaPath = join(this.getWorkspaceStorageFolderPath(payload), StorageService.WORKSPACE_META_NAME);\n\t\t\texists(workspaceStorageMetaPath).then(exists => {\n\t\t\t\tif (exists) {\n\t\t\t\t\treturn undefined; // already existing\n\t\t\t\t}\n\n\t\t\t\treturn writeFile(workspaceStorageMetaPath, JSON.stringify(meta, undefined, 2));\n\t\t\t}).then(undefined, error => onUnexpectedError(error));\n\t\t}\n\t}\n\n\tget(key: string, scope: StorageScope, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope): string | undefined;\n\tget(key: string, scope: StorageScope, fallbackValue?: string): string | undefined {\n\t\treturn this.getStorage(scope).get(key, fallbackValue);\n\t}\n\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope): boolean | undefined;\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined {\n\t\treturn this.getStorage(scope).getBoolean(key, fallbackValue);\n\t}\n\n\tgetNumber(key: string, scope: StorageScope, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope): number | undefined;\n\tgetNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined {\n\t\treturn this.getStorage(scope).getNumber(key, fallbackValue);\n\t}\n\n\tstore(key: string, value: string | boolean | number, scope: StorageScope): void {\n\t\tthis.getStorage(scope).set(key, value);\n\t}\n\n\tremove(key: string, scope: StorageScope): void {\n\t\tthis.getStorage(scope).delete(key);\n\t}\n\n\tclose(): Promise<void> {\n\n\t\t// Signal as event so that clients can still store data\n\t\tthis._onWillSaveState.fire({ reason: WillSaveStateReason.SHUTDOWN });\n\n\t\t// Do it\n\t\treturn Promise.all([\n\t\t\tthis.globalStorage.close(),\n\t\t\tthis.workspaceStorage.close()\n\t\t]).then(() => undefined);\n\t}\n\n\tprivate getStorage(scope: StorageScope): IStorage {\n\t\treturn scope === StorageScope.GLOBAL ? this.globalStorage : this.workspaceStorage;\n\t}\n\n\tgetSize(scope: StorageScope): number {\n\t\treturn scope === StorageScope.GLOBAL ? this.globalStorage.size : this.workspaceStorage.size;\n\t}\n\n\tcheckIntegrity(scope: StorageScope, full: boolean): Promise<string> {\n\t\treturn scope === StorageScope.GLOBAL ? this.globalStorage.checkIntegrity(full) : this.workspaceStorage.checkIntegrity(full);\n\t}\n\n\tlogStorage(): Promise<void> {\n\t\treturn Promise.all([\n\t\t\tthis.globalStorage.items,\n\t\t\tthis.workspaceStorage.items,\n\t\t\tthis.globalStorage.checkIntegrity(true /* full */),\n\t\t\tthis.workspaceStorage.checkIntegrity(true /* full */)\n\t\t]).then(result => {\n\t\t\tconst safeParse = (value: string) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn JSON.parse(value);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst globalItems = new Map<string, string>();\n\t\t\tconst globalItemsParsed = new Map<string, string>();\n\t\t\tresult[0].forEach((value, key) => {\n\t\t\t\tglobalItems.set(key, value);\n\t\t\t\tglobalItemsParsed.set(key, safeParse(value));\n\t\t\t});\n\n\t\t\tconst workspaceItems = new Map<string, string>();\n\t\t\tconst workspaceItemsParsed = new Map<string, string>();\n\t\t\tresult[1].forEach((value, key) => {\n\t\t\t\tworkspaceItems.set(key, value);\n\t\t\t\tworkspaceItemsParsed.set(key, safeParse(value));\n\t\t\t});\n\n\t\t\tconsole.group(`Storage: Global (integrity: ${result[2]}, path: ${this.environmentService.globalStorageHome})`);\n\t\t\tlet globalValues: { key: string, value: string }[] = [];\n\t\t\tglobalItems.forEach((value, key) => {\n\t\t\t\tglobalValues.push({ key, value });\n\t\t\t});\n\t\t\tconsole.table(globalValues);\n\t\t\tconsole.groupEnd();\n\n\t\t\tconsole.log(globalItemsParsed);\n\n\t\t\tconsole.group(`Storage: Workspace (integrity: ${result[3]}, load: ${getDuration('willInitWorkspaceStorage', 'didInitWorkspaceStorage')}, path: ${this.workspaceStoragePath})`);\n\t\t\tlet workspaceValues: { key: string, value: string }[] = [];\n\t\t\tworkspaceItems.forEach((value, key) => {\n\t\t\t\tworkspaceValues.push({ key, value });\n\t\t\t});\n\t\t\tconsole.table(workspaceValues);\n\t\t\tconsole.groupEnd();\n\n\t\t\tconsole.log(workspaceItemsParsed);\n\t\t});\n\t}\n\n\tmigrate(toWorkspace: IWorkspaceInitializationPayload): Promise<void> {\n\t\tif (this.workspaceStoragePath === SQLiteStorageDatabase.IN_MEMORY_PATH) {\n\t\t\treturn Promise.resolve(); // no migration needed if running in memory\n\t\t}\n\n\t\t// Close workspace DB to be able to copy\n\t\treturn this.workspaceStorage.close().then(() => {\n\n\t\t\t// Prepare new workspace storage folder\n\t\t\treturn this.prepareWorkspaceStorageFolder(toWorkspace).then(result => {\n\t\t\t\tconst newWorkspaceStoragePath = join(result.path, StorageService.WORKSPACE_STORAGE_NAME);\n\n\t\t\t\t// Copy current storage over to new workspace storage\n\t\t\t\treturn copy(this.workspaceStoragePath, newWorkspaceStoragePath).then(() => {\n\n\t\t\t\t\t// Recreate and init workspace storage\n\t\t\t\t\treturn this.createWorkspaceStorage(newWorkspaceStoragePath).init();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport class LogStorageAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.logStorage';\n\tstatic LABEL = localize({ key: 'logStorage', comment: ['A developer only action to log the contents of the storage for the current window.'] }, \"Log Storage Database Contents\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IStorageService private readonly storageService: StorageService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\tthis.storageService.logStorage();\n\n\t\treturn this.windowService.openDevTools();\n\t}\n}\n"]}]}