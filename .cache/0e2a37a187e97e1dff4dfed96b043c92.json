{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar languageFeatureRegistry_1 = require(\"vs/editor/common/modes/languageFeatureRegistry\");\nvar tokenizationRegistry_1 = require(\"vs/editor/common/modes/tokenizationRegistry\");\n/**\n * Open ended enum at runtime\n * @internal\n */\nvar LanguageId;\n(function (LanguageId) {\n    LanguageId[LanguageId[\"Null\"] = 0] = \"Null\";\n    LanguageId[LanguageId[\"PlainText\"] = 1] = \"PlainText\";\n})(LanguageId = exports.LanguageId || (exports.LanguageId = {}));\n/**\n * @internal\n */\nvar LanguageIdentifier = /** @class */ (function () {\n    function LanguageIdentifier(language, id) {\n        this.language = language;\n        this.id = id;\n    }\n    return LanguageIdentifier;\n}());\nexports.LanguageIdentifier = LanguageIdentifier;\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nvar FontStyle;\n(function (FontStyle) {\n    FontStyle[FontStyle[\"NotSet\"] = -1] = \"NotSet\";\n    FontStyle[FontStyle[\"None\"] = 0] = \"None\";\n    FontStyle[FontStyle[\"Italic\"] = 1] = \"Italic\";\n    FontStyle[FontStyle[\"Bold\"] = 2] = \"Bold\";\n    FontStyle[FontStyle[\"Underline\"] = 4] = \"Underline\";\n})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));\n/**\n * Open ended enum at runtime\n * @internal\n */\nvar ColorId;\n(function (ColorId) {\n    ColorId[ColorId[\"None\"] = 0] = \"None\";\n    ColorId[ColorId[\"DefaultForeground\"] = 1] = \"DefaultForeground\";\n    ColorId[ColorId[\"DefaultBackground\"] = 2] = \"DefaultBackground\";\n})(ColorId = exports.ColorId || (exports.ColorId = {}));\n/**\n * A standard token type. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nvar StandardTokenType;\n(function (StandardTokenType) {\n    StandardTokenType[StandardTokenType[\"Other\"] = 0] = \"Other\";\n    StandardTokenType[StandardTokenType[\"Comment\"] = 1] = \"Comment\";\n    StandardTokenType[StandardTokenType[\"String\"] = 2] = \"String\";\n    StandardTokenType[StandardTokenType[\"RegEx\"] = 4] = \"RegEx\";\n})(StandardTokenType = exports.StandardTokenType || (exports.StandardTokenType = {}));\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n * @internal\n */\nvar MetadataConsts;\n(function (MetadataConsts) {\n    MetadataConsts[MetadataConsts[\"LANGUAGEID_MASK\"] = 255] = \"LANGUAGEID_MASK\";\n    MetadataConsts[MetadataConsts[\"TOKEN_TYPE_MASK\"] = 1792] = \"TOKEN_TYPE_MASK\";\n    MetadataConsts[MetadataConsts[\"FONT_STYLE_MASK\"] = 14336] = \"FONT_STYLE_MASK\";\n    MetadataConsts[MetadataConsts[\"FOREGROUND_MASK\"] = 8372224] = \"FOREGROUND_MASK\";\n    MetadataConsts[MetadataConsts[\"BACKGROUND_MASK\"] = 4286578688] = \"BACKGROUND_MASK\";\n    MetadataConsts[MetadataConsts[\"LANGUAGEID_OFFSET\"] = 0] = \"LANGUAGEID_OFFSET\";\n    MetadataConsts[MetadataConsts[\"TOKEN_TYPE_OFFSET\"] = 8] = \"TOKEN_TYPE_OFFSET\";\n    MetadataConsts[MetadataConsts[\"FONT_STYLE_OFFSET\"] = 11] = \"FONT_STYLE_OFFSET\";\n    MetadataConsts[MetadataConsts[\"FOREGROUND_OFFSET\"] = 14] = \"FOREGROUND_OFFSET\";\n    MetadataConsts[MetadataConsts[\"BACKGROUND_OFFSET\"] = 23] = \"BACKGROUND_OFFSET\";\n})(MetadataConsts = exports.MetadataConsts || (exports.MetadataConsts = {}));\n/**\n * @internal\n */\nvar TokenMetadata = /** @class */ (function () {\n    function TokenMetadata() {\n    }\n    TokenMetadata.getLanguageId = function (metadata) {\n        return (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n    };\n    TokenMetadata.getTokenType = function (metadata) {\n        return (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n    };\n    TokenMetadata.getFontStyle = function (metadata) {\n        return (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n    };\n    TokenMetadata.getForeground = function (metadata) {\n        return (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n    };\n    TokenMetadata.getBackground = function (metadata) {\n        return (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n    };\n    TokenMetadata.getClassNameFromMetadata = function (metadata) {\n        var foreground = this.getForeground(metadata);\n        var className = 'mtk' + foreground;\n        var fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & FontStyle.Italic) {\n            className += ' mtki';\n        }\n        if (fontStyle & FontStyle.Bold) {\n            className += ' mtkb';\n        }\n        if (fontStyle & FontStyle.Underline) {\n            className += ' mtku';\n        }\n        return className;\n    };\n    TokenMetadata.getInlineStyleFromMetadata = function (metadata, colorMap) {\n        var foreground = this.getForeground(metadata);\n        var fontStyle = this.getFontStyle(metadata);\n        var result = \"color: \" + colorMap[foreground] + \";\";\n        if (fontStyle & FontStyle.Italic) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & FontStyle.Bold) {\n            result += 'font-weight: bold;';\n        }\n        if (fontStyle & FontStyle.Underline) {\n            result += 'text-decoration: underline;';\n        }\n        return result;\n    };\n    return TokenMetadata;\n}());\nexports.TokenMetadata = TokenMetadata;\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n    CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n    CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n    CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n    CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n    CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n    CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n    CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n    CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n    CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n    CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n    CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n    CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n    CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n    CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n    CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n    CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n    CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n    CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n    CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n    CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n    CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n    CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n    CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n    CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n    CompletionItemKind[CompletionItemKind[\"Snippet\"] = 25] = \"Snippet\";\n})(CompletionItemKind = exports.CompletionItemKind || (exports.CompletionItemKind = {}));\n/**\n * @internal\n */\nexports.completionKindToCssClass = (function () {\n    var data = Object.create(null);\n    data[CompletionItemKind.Method] = 'method';\n    data[CompletionItemKind.Function] = 'function';\n    data[CompletionItemKind.Constructor] = 'constructor';\n    data[CompletionItemKind.Field] = 'field';\n    data[CompletionItemKind.Variable] = 'variable';\n    data[CompletionItemKind.Class] = 'class';\n    data[CompletionItemKind.Struct] = 'struct';\n    data[CompletionItemKind.Interface] = 'interface';\n    data[CompletionItemKind.Module] = 'module';\n    data[CompletionItemKind.Property] = 'property';\n    data[CompletionItemKind.Event] = 'event';\n    data[CompletionItemKind.Operator] = 'operator';\n    data[CompletionItemKind.Unit] = 'unit';\n    data[CompletionItemKind.Value] = 'value';\n    data[CompletionItemKind.Constant] = 'constant';\n    data[CompletionItemKind.Enum] = 'enum';\n    data[CompletionItemKind.EnumMember] = 'enum-member';\n    data[CompletionItemKind.Keyword] = 'keyword';\n    data[CompletionItemKind.Snippet] = 'snippet';\n    data[CompletionItemKind.Text] = 'text';\n    data[CompletionItemKind.Color] = 'color';\n    data[CompletionItemKind.File] = 'file';\n    data[CompletionItemKind.Reference] = 'reference';\n    data[CompletionItemKind.Customcolor] = 'customcolor';\n    data[CompletionItemKind.Folder] = 'folder';\n    data[CompletionItemKind.TypeParameter] = 'type-parameter';\n    return function (kind) {\n        return data[kind] || 'property';\n    };\n})();\n/**\n * @internal\n */\nexports.completionKindFromString = (function () {\n    var data = Object.create(null);\n    data['method'] = CompletionItemKind.Method;\n    data['function'] = CompletionItemKind.Function;\n    data['constructor'] = CompletionItemKind.Constructor;\n    data['field'] = CompletionItemKind.Field;\n    data['variable'] = CompletionItemKind.Variable;\n    data['class'] = CompletionItemKind.Class;\n    data['struct'] = CompletionItemKind.Struct;\n    data['interface'] = CompletionItemKind.Interface;\n    data['module'] = CompletionItemKind.Module;\n    data['property'] = CompletionItemKind.Property;\n    data['event'] = CompletionItemKind.Event;\n    data['operator'] = CompletionItemKind.Operator;\n    data['unit'] = CompletionItemKind.Unit;\n    data['value'] = CompletionItemKind.Value;\n    data['constant'] = CompletionItemKind.Constant;\n    data['enum'] = CompletionItemKind.Enum;\n    data['enum-member'] = CompletionItemKind.EnumMember;\n    data['enumMember'] = CompletionItemKind.EnumMember;\n    data['keyword'] = CompletionItemKind.Keyword;\n    data['snippet'] = CompletionItemKind.Snippet;\n    data['text'] = CompletionItemKind.Text;\n    data['color'] = CompletionItemKind.Color;\n    data['file'] = CompletionItemKind.File;\n    data['reference'] = CompletionItemKind.Reference;\n    data['customcolor'] = CompletionItemKind.Customcolor;\n    data['folder'] = CompletionItemKind.Folder;\n    data['type-parameter'] = CompletionItemKind.TypeParameter;\n    data['typeParameter'] = CompletionItemKind.TypeParameter;\n    return function (value, strict) {\n        var res = data[value];\n        if (typeof res === 'undefined' && !strict) {\n            res = CompletionItemKind.Property;\n        }\n        return res;\n    };\n})();\nvar CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n    /**\n     * Adjust whitespace/indentation of multiline insert texts to\n     * match the current line indentation.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n    /**\n     * `insertText` is a snippet.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n})(CompletionItemInsertTextRule = exports.CompletionItemInsertTextRule || (exports.CompletionItemInsertTextRule = {}));\n/**\n * How a suggest provider was triggered.\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\n/**\n * @internal\n */\nvar CodeActionTrigger;\n(function (CodeActionTrigger) {\n    CodeActionTrigger[CodeActionTrigger[\"Automatic\"] = 1] = \"Automatic\";\n    CodeActionTrigger[CodeActionTrigger[\"Manual\"] = 2] = \"Manual\";\n})(CodeActionTrigger = exports.CodeActionTrigger || (exports.CodeActionTrigger = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind = exports.DocumentHighlightKind || (exports.DocumentHighlightKind = {}));\n/**\n * @internal\n */\nfunction isLocationLink(thing) {\n    return thing\n        && uri_1.URI.isUri(thing.uri)\n        && range_1.Range.isIRange(thing.range)\n        && (range_1.Range.isIRange(thing.originSelectionRange) || range_1.Range.isIRange(thing.targetSelectionRange));\n}\nexports.isLocationLink = isLocationLink;\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n    SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n    SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n    SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n    SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n    SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n    SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n    SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n    SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n    SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n    SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n    SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n    SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n    SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n    SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n    SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n    SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n    SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n    SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n    SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n    SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n    SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n    SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n    SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n    SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n    SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n    SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));\n/**\n * @internal\n */\nexports.symbolKindToCssClass = (function () {\n    var _fromMapping = Object.create(null);\n    _fromMapping[SymbolKind.File] = 'file';\n    _fromMapping[SymbolKind.Module] = 'module';\n    _fromMapping[SymbolKind.Namespace] = 'namespace';\n    _fromMapping[SymbolKind.Package] = 'package';\n    _fromMapping[SymbolKind.Class] = 'class';\n    _fromMapping[SymbolKind.Method] = 'method';\n    _fromMapping[SymbolKind.Property] = 'property';\n    _fromMapping[SymbolKind.Field] = 'field';\n    _fromMapping[SymbolKind.Constructor] = 'constructor';\n    _fromMapping[SymbolKind.Enum] = 'enum';\n    _fromMapping[SymbolKind.Interface] = 'interface';\n    _fromMapping[SymbolKind.Function] = 'function';\n    _fromMapping[SymbolKind.Variable] = 'variable';\n    _fromMapping[SymbolKind.Constant] = 'constant';\n    _fromMapping[SymbolKind.String] = 'string';\n    _fromMapping[SymbolKind.Number] = 'number';\n    _fromMapping[SymbolKind.Boolean] = 'boolean';\n    _fromMapping[SymbolKind.Array] = 'array';\n    _fromMapping[SymbolKind.Object] = 'object';\n    _fromMapping[SymbolKind.Key] = 'key';\n    _fromMapping[SymbolKind.Null] = 'null';\n    _fromMapping[SymbolKind.EnumMember] = 'enum-member';\n    _fromMapping[SymbolKind.Struct] = 'struct';\n    _fromMapping[SymbolKind.Event] = 'event';\n    _fromMapping[SymbolKind.Operator] = 'operator';\n    _fromMapping[SymbolKind.TypeParameter] = 'type-parameter';\n    return function toCssClassName(kind, inline) {\n        return \"symbol-icon \" + (inline ? 'inline' : 'block') + \" \" + (_fromMapping[kind] || 'property');\n    };\n})();\nvar FoldingRangeKind = /** @class */ (function () {\n    /**\n     * Creates a new [FoldingRangeKind](#FoldingRangeKind).\n     *\n     * @param value of the kind.\n     */\n    function FoldingRangeKind(value) {\n        this.value = value;\n    }\n    /**\n     * Kind for folding range representing a comment. The value of the kind is 'comment'.\n     */\n    FoldingRangeKind.Comment = new FoldingRangeKind('comment');\n    /**\n     * Kind for folding range representing a import. The value of the kind is 'imports'.\n     */\n    FoldingRangeKind.Imports = new FoldingRangeKind('imports');\n    /**\n     * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n     * The value of the kind is 'region'.\n     */\n    FoldingRangeKind.Region = new FoldingRangeKind('region');\n    return FoldingRangeKind;\n}());\nexports.FoldingRangeKind = FoldingRangeKind;\n/**\n * @internal\n */\nfunction isResourceFileEdit(thing) {\n    return types_1.isObject(thing) && (Boolean(thing.newUri) || Boolean(thing.oldUri));\n}\nexports.isResourceFileEdit = isResourceFileEdit;\n/**\n * @internal\n */\nfunction isResourceTextEdit(thing) {\n    return types_1.isObject(thing) && thing.resource && Array.isArray(thing.edits);\n}\nexports.isResourceTextEdit = isResourceTextEdit;\n/**\n * @internal\n */\nvar DraftMode;\n(function (DraftMode) {\n    DraftMode[DraftMode[\"NotSupported\"] = 0] = \"NotSupported\";\n    DraftMode[DraftMode[\"InDraft\"] = 1] = \"InDraft\";\n    DraftMode[DraftMode[\"NotInDraft\"] = 2] = \"NotInDraft\";\n})(DraftMode = exports.DraftMode || (exports.DraftMode = {}));\n/**\n * @internal\n */\nvar CommentThreadCollapsibleState;\n(function (CommentThreadCollapsibleState) {\n    /**\n     * Determines an item is collapsed\n     */\n    CommentThreadCollapsibleState[CommentThreadCollapsibleState[\"Collapsed\"] = 0] = \"Collapsed\";\n    /**\n     * Determines an item is expanded\n     */\n    CommentThreadCollapsibleState[CommentThreadCollapsibleState[\"Expanded\"] = 1] = \"Expanded\";\n})(CommentThreadCollapsibleState = exports.CommentThreadCollapsibleState || (exports.CommentThreadCollapsibleState = {}));\n// --- feature registries ------\n/**\n * @internal\n */\nexports.ReferenceProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.RenameProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.CompletionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.SignatureHelpProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.HoverProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DocumentSymbolProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DocumentHighlightProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DefinitionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DeclarationProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.ImplementationProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.TypeDefinitionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.CodeLensProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.CodeActionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DocumentFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.DocumentRangeFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.OnTypeFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.LinkProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.ColorProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.SelectionRangeRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.FoldingRangeProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n/**\n * @internal\n */\nexports.TokenizationRegistry = new tokenizationRegistry_1.TokenizationRegistryImpl();\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAOhG,8CAAgD;AAChD,0CAAwD;AAExD,qDAA4D;AAI5D,0FAAyF;AACzF,oFAAuF;AAIvF;;;GAGG;AACH,IAAkB,UAGjB;AAHD,WAAkB,UAAU;IAC3B,2CAAQ,CAAA;IACR,qDAAa,CAAA;AACd,CAAC,EAHiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAG3B;AAED;;GAEG;AACH;IAaC,4BAAY,QAAgB,EAAE,EAAc;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACd,CAAC;IACF,yBAAC;AAAD,CAAC,AAjBD,IAiBC;AAjBY,gDAAkB;AA+B/B;;;GAGG;AACH,IAAkB,SAMjB;AAND,WAAkB,SAAS;IAC1B,8CAAW,CAAA;IACX,yCAAQ,CAAA;IACR,6CAAU,CAAA;IACV,yCAAQ,CAAA;IACR,mDAAa,CAAA;AACd,CAAC,EANiB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAM1B;AAED;;;GAGG;AACH,IAAkB,OAIjB;AAJD,WAAkB,OAAO;IACxB,qCAAQ,CAAA;IACR,+DAAqB,CAAA;IACrB,+DAAqB,CAAA;AACtB,CAAC,EAJiB,OAAO,GAAP,eAAO,KAAP,eAAO,QAIxB;AAED;;;GAGG;AACH,IAAkB,iBAKjB;AALD,WAAkB,iBAAiB;IAClC,2DAAS,CAAA;IACT,+DAAW,CAAA;IACX,6DAAU,CAAA;IACV,2DAAS,CAAA;AACV,CAAC,EALiB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAKlC;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,IAAkB,cAYjB;AAZD,WAAkB,cAAc;IAC/B,2EAAoD,CAAA;IACpD,4EAAoD,CAAA;IACpD,6EAAoD,CAAA;IACpD,+EAAoD,CAAA;IACpD,kFAAoD,CAAA;IAEpD,6EAAqB,CAAA;IACrB,6EAAqB,CAAA;IACrB,8EAAsB,CAAA;IACtB,8EAAsB,CAAA;IACtB,8EAAsB,CAAA;AACvB,CAAC,EAZiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAY/B;AAED;;GAEG;AACH;IAAA;IAwDA,CAAC;IAtDc,2BAAa,GAA3B,UAA4B,QAAgB;QAC3C,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,CAAC,iBAAiB,CAAC;IACzF,CAAC;IAEa,0BAAY,GAA1B,UAA2B,QAAgB;QAC1C,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,CAAC,iBAAiB,CAAC;IACzF,CAAC;IAEa,0BAAY,GAA1B,UAA2B,QAAgB;QAC1C,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,CAAC,iBAAiB,CAAC;IACzF,CAAC;IAEa,2BAAa,GAA3B,UAA4B,QAAgB;QAC3C,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,CAAC,iBAAiB,CAAC;IACzF,CAAC;IAEa,2BAAa,GAA3B,UAA4B,QAAgB;QAC3C,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,cAAc,CAAC,iBAAiB,CAAC;IACzF,CAAC;IAEa,sCAAwB,GAAtC,UAAuC,QAAgB;QACtD,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,SAAS,GAAG,KAAK,GAAG,UAAU,CAAC;QAEnC,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE;YACjC,SAAS,IAAI,OAAO,CAAC;SACrB;QACD,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE;YAC/B,SAAS,IAAI,OAAO,CAAC;SACrB;QACD,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE;YACpC,SAAS,IAAI,OAAO,CAAC;SACrB;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAEa,wCAA0B,GAAxC,UAAyC,QAAgB,EAAE,QAAkB;QAC5E,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE9C,IAAI,MAAM,GAAG,YAAU,QAAQ,CAAC,UAAU,CAAC,MAAG,CAAC;QAC/C,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE;YACjC,MAAM,IAAI,qBAAqB,CAAC;SAChC;QACD,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE;YAC/B,MAAM,IAAI,oBAAoB,CAAC;SAC/B;QACD,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE;YACpC,MAAM,IAAI,6BAA6B,CAAC;SACxC;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IACF,oBAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,sCAAa;AAwH1B,IAAkB,kBA2BjB;AA3BD,WAAkB,kBAAkB;IACnC,+DAAM,CAAA;IACN,mEAAQ,CAAA;IACR,yEAAW,CAAA;IACX,6DAAK,CAAA;IACL,mEAAQ,CAAA;IACR,6DAAK,CAAA;IACL,+DAAM,CAAA;IACN,qEAAS,CAAA;IACT,+DAAM,CAAA;IACN,mEAAQ,CAAA;IACR,8DAAK,CAAA;IACL,oEAAQ,CAAA;IACR,4DAAI,CAAA;IACJ,8DAAK,CAAA;IACL,oEAAQ,CAAA;IACR,4DAAI,CAAA;IACJ,wEAAU,CAAA;IACV,kEAAO,CAAA;IACP,4DAAI,CAAA;IACJ,8DAAK,CAAA;IACL,4DAAI,CAAA;IACJ,sEAAS,CAAA;IACT,0EAAW,CAAA;IACX,gEAAM,CAAA;IACN,8EAAa,CAAA;IACb,kEAAO,CAAA;AACR,CAAC,EA3BiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QA2BnC;AAED;;GAEG;AACU,QAAA,wBAAwB,GAAG,CAAC;IACxC,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;IACrD,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IACjD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,aAAa,CAAC;IACpD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IAC7C,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IAC7C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IACjD,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;IACrD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,GAAG,gBAAgB,CAAC;IAE1D,OAAO,UAAU,IAAwB;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC;IACjC,CAAC,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AAEL;;GAEG;AACQ,QAAA,wBAAwB,GAG/B,CAAC;IACJ,IAAI,IAAI,GAAuC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnE,IAAI,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC3C,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,aAAa,CAAC,GAAQ,kBAAkB,CAAC,WAAW,CAAC;IAC1D,IAAI,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;IACzC,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;IACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC3C,IAAI,CAAC,WAAW,CAAC,GAAG,kBAAkB,CAAC,SAAS,CAAC;IACjD,IAAI,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC3C,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;IACzC,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;IACzC,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,aAAa,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC;IACpD,IAAI,CAAC,YAAY,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC;IACnD,IAAI,CAAC,SAAS,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAC7C,IAAI,CAAC,SAAS,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAC7C,IAAI,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;IACzC,IAAI,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,WAAW,CAAC,GAAG,kBAAkB,CAAC,SAAS,CAAC;IACjD,IAAI,CAAC,aAAa,CAAC,GAAG,kBAAkB,CAAC,WAAW,CAAC;IACrD,IAAI,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC3C,IAAI,CAAC,gBAAgB,CAAC,GAAG,kBAAkB,CAAC,aAAa,CAAC;IAC1D,IAAI,CAAC,eAAe,CAAC,GAAG,kBAAkB,CAAC,aAAa,CAAC;IAEzD,OAAO,UAAU,KAAa,EAAE,MAAa;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACtB,IAAI,OAAO,GAAG,KAAK,WAAW,IAAI,CAAC,MAAM,EAAE;YAC1C,GAAG,GAAG,kBAAkB,CAAC,QAAQ,CAAC;SAClC;QACD,OAAO,GAAG,CAAC;IACZ,CAAC,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AAEL,IAAkB,4BAWjB;AAXD,WAAkB,4BAA4B;IAC7C;;;OAGG;IACH,mGAAsB,CAAA;IAEtB;;OAEG;IACH,qGAAuB,CAAA;AACxB,CAAC,EAXiB,4BAA4B,GAA5B,oCAA4B,KAA5B,oCAA4B,QAW7C;AA0FD;;GAEG;AACH,IAAkB,qBAIjB;AAJD,WAAkB,qBAAqB;IACtC,qEAAU,CAAA;IACV,yFAAoB,CAAA;IACpB,uHAAmC,CAAA;AACpC,CAAC,EAJiB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAItC;AAsDD;;GAEG;AACH,IAAkB,iBAGjB;AAHD,WAAkB,iBAAiB;IAClC,mEAAa,CAAA;IACb,6DAAU,CAAA;AACX,CAAC,EAHiB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAGlC;AAoFD,IAAY,wBAIX;AAJD,WAAY,wBAAwB;IACnC,2EAAU,CAAA;IACV,+FAAoB,CAAA;IACpB,yFAAiB,CAAA;AAClB,CAAC,EAJW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAInC;AAwBD;;GAEG;AACH,IAAY,qBAaX;AAbD,WAAY,qBAAqB;IAChC;;OAEG;IACH,iEAAI,CAAA;IACJ;;OAEG;IACH,iEAAI,CAAA;IACJ;;OAEG;IACH,mEAAK,CAAA;AACN,CAAC,EAbW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAahC;AAuFD;;GAEG;AACH,SAAgB,cAAc,CAAC,KAAU;IACxC,OAAO,KAAK;WACR,SAAG,CAAC,KAAK,CAAE,KAAsB,CAAC,GAAG,CAAC;WACtC,aAAK,CAAC,QAAQ,CAAE,KAAsB,CAAC,KAAK,CAAC;WAC7C,CAAC,aAAK,CAAC,QAAQ,CAAE,KAAsB,CAAC,oBAAoB,CAAC,IAAI,aAAK,CAAC,QAAQ,CAAE,KAAsB,CAAC,oBAAoB,CAAC,CAAC,CAAC;AACpI,CAAC;AALD,wCAKC;AAkDD;;GAEG;AACH,IAAkB,UA2BjB;AA3BD,WAAkB,UAAU;IAC3B,2CAAQ,CAAA;IACR,+CAAU,CAAA;IACV,qDAAa,CAAA;IACb,iDAAW,CAAA;IACX,6CAAS,CAAA;IACT,+CAAU,CAAA;IACV,mDAAY,CAAA;IACZ,6CAAS,CAAA;IACT,yDAAe,CAAA;IACf,2CAAQ,CAAA;IACR,sDAAc,CAAA;IACd,oDAAa,CAAA;IACb,oDAAa,CAAA;IACb,oDAAa,CAAA;IACb,gDAAW,CAAA;IACX,gDAAW,CAAA;IACX,kDAAY,CAAA;IACZ,8CAAU,CAAA;IACV,gDAAW,CAAA;IACX,0CAAQ,CAAA;IACR,4CAAS,CAAA;IACT,wDAAe,CAAA;IACf,gDAAW,CAAA;IACX,8CAAU,CAAA;IACV,oDAAa,CAAA;IACb,8DAAkB,CAAA;AACnB,CAAC,EA3BiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA2B3B;AAGD;;GAEG;AACU,QAAA,oBAAoB,GAAG,CAAC;IAEpC,IAAM,YAAY,GAA4B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IACjD,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IAC7C,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;IACrD,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IACjD,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IAC7C,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACrC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,aAAa,CAAC;IACpD,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAC3C,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,gBAAgB,CAAC;IAE1D,OAAO,SAAS,cAAc,CAAC,IAAgB,EAAE,MAAgB;QAChE,OAAO,kBAAe,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,WAAI,YAAY,CAAC,IAAI,CAAC,IAAI,UAAU,CAAE,CAAC;IACzF,CAAC,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AAyPL;IAeC;;;;OAIG;IACH,0BAA0B,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IACvC,CAAC;IApBD;;OAEG;IACa,wBAAO,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAC1D;;OAEG;IACa,wBAAO,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAC1D;;;OAGG;IACa,uBAAM,GAAG,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IASzD,uBAAC;CAAA,AAtBD,IAsBC;AAtBY,4CAAgB;AAwB7B;;GAEG;AACH,SAAgB,kBAAkB,CAAC,KAAU;IAC5C,OAAO,gBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAoB,KAAM,CAAC,MAAM,CAAC,IAAI,OAAO,CAAoB,KAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AACpH,CAAC;AAFD,gDAEC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,KAAU;IAC5C,OAAO,gBAAQ,CAAC,KAAK,CAAC,IAAuB,KAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAoB,KAAM,CAAC,KAAK,CAAC,CAAC;AAChH,CAAC;AAFD,gDAEC;AAkDD;;GAEG;AACH,IAAY,SAIX;AAJD,WAAY,SAAS;IACpB,yDAAY,CAAA;IACZ,+CAAO,CAAA;IACP,qDAAU,CAAA;AACX,CAAC,EAJW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAIpB;AAED;;GAEG;AACH,IAAY,6BASX;AATD,WAAY,6BAA6B;IACxC;;OAEG;IACH,2FAAa,CAAA;IACb;;OAEG;IACH,yFAAY,CAAA;AACb,CAAC,EATW,6BAA6B,GAA7B,qCAA6B,KAA7B,qCAA6B,QASxC;AAkMD,gCAAgC;AAEhC;;GAEG;AACU,QAAA,yBAAyB,GAAG,IAAI,iDAAuB,EAAqB,CAAC;AAE1F;;GAEG;AACU,QAAA,sBAAsB,GAAG,IAAI,iDAAuB,EAAkB,CAAC;AAEpF;;GAEG;AACU,QAAA,0BAA0B,GAAG,IAAI,iDAAuB,EAA0B,CAAC;AAEhG;;GAEG;AACU,QAAA,6BAA6B,GAAG,IAAI,iDAAuB,EAAyB,CAAC;AAElG;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,iDAAuB,EAAiB,CAAC;AAElF;;GAEG;AACU,QAAA,8BAA8B,GAAG,IAAI,iDAAuB,EAA0B,CAAC;AAEpG;;GAEG;AACU,QAAA,iCAAiC,GAAG,IAAI,iDAAuB,EAA6B,CAAC;AAE1G;;GAEG;AACU,QAAA,0BAA0B,GAAG,IAAI,iDAAuB,EAAsB,CAAC;AAE5F;;GAEG;AACU,QAAA,2BAA2B,GAAG,IAAI,iDAAuB,EAAuB,CAAC;AAE9F;;GAEG;AACU,QAAA,8BAA8B,GAAG,IAAI,iDAAuB,EAA0B,CAAC;AAEpG;;GAEG;AACU,QAAA,8BAA8B,GAAG,IAAI,iDAAuB,EAA0B,CAAC;AAEpG;;GAEG;AACU,QAAA,wBAAwB,GAAG,IAAI,iDAAuB,EAAoB,CAAC;AAExF;;GAEG;AACU,QAAA,0BAA0B,GAAG,IAAI,iDAAuB,EAAsB,CAAC;AAE5F;;GAEG;AACU,QAAA,sCAAsC,GAAG,IAAI,iDAAuB,EAAkC,CAAC;AAEpH;;GAEG;AACU,QAAA,2CAA2C,GAAG,IAAI,iDAAuB,EAAuC,CAAC;AAE9H;;GAEG;AACU,QAAA,oCAAoC,GAAG,IAAI,iDAAuB,EAAgC,CAAC;AAEhH;;GAEG;AACU,QAAA,oBAAoB,GAAG,IAAI,iDAAuB,EAAgB,CAAC;AAEhF;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,iDAAuB,EAAyB,CAAC;AAE1F;;GAEG;AACU,QAAA,sBAAsB,GAAG,IAAI,iDAAuB,EAA0B,CAAC;AAE5F;;GAEG;AACU,QAAA,4BAA4B,GAAG,IAAI,iDAAuB,EAAwB,CAAC;AA4DhG;;GAEG;AACU,QAAA,oBAAoB,GAAG,IAAI,+CAAwB,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Color } from 'vs/base/common/color';\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { isObject } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport * as model from 'vs/editor/common/model';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/modes/languageFeatureRegistry';\nimport { TokenizationRegistryImpl } from 'vs/editor/common/modes/tokenizationRegistry';\nimport { IMarkerData } from 'vs/platform/markers/common/markers';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * @internal\n */\nexport class LanguageIdentifier {\n\n\t/**\n\t * A string identifier. Unique across languages. e.g. 'javascript'.\n\t */\n\tpublic readonly language: string;\n\n\t/**\n\t * A numeric identifier. Unique across languages. e.g. 5\n\t * Will vary at runtime based on registration order, etc.\n\t */\n\tpublic readonly id: LanguageId;\n\n\tconstructor(language: string, id: LanguageId) {\n\t\tthis.language = language;\n\t\tthis.id = id;\n\t}\n}\n\n/**\n * A mode. Will soon be obsolete.\n * @internal\n */\nexport interface IMode {\n\n\tgetId(): string;\n\n\tgetLanguageIdentifier(): LanguageIdentifier;\n\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4\n}\n\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 4\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n * @internal\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK = 0b00000000000000000000000011111111,\n\tTOKEN_TYPE_MASK = 0b00000000000000000000011100000000,\n\tFONT_STYLE_MASK = 0b00000000000000000011100000000000,\n\tFOREGROUND_MASK = 0b00000000011111111100000000000000,\n\tBACKGROUND_MASK = 0b11111111100000000000000000000000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 14,\n\tBACKGROUND_OFFSET = 23\n}\n\n/**\n * @internal\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tlet foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tlet fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tresult += 'text-decoration: underline;';\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\n\tgetInitialState(): IState;\n\n\t// add offsetDelta to each of the returned indices\n\ttokenize(line: string, state: IState, offsetDelta: number): TokenizationResult;\n\n\ttokenize2(line: string, state: IState, offsetDelta: number): TokenizationResult2;\n}\n\n/**\n * The state of the tokenizer between two lines.\n * It is useful to store flags such as in multiline comment, etc.\n * The model will clone the previous line's state and pass it in to tokenize the next line.\n */\nexport interface IState {\n\tclone(): IState;\n\tequals(other: IState): boolean;\n}\n\n/**\n * A provider result represents the values a provider, like the [`HoverProvider`](#HoverProvider),\n * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n * thenable.\n */\nexport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\tcontents: IMarkdownString[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange?: IRange;\n}\n\n/**\n * The hover provider interface defines the contract between extensions and\n * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface HoverProvider {\n\t/**\n\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideHover(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover>;\n}\n\nexport const enum CompletionItemKind {\n\tMethod,\n\tFunction,\n\tConstructor,\n\tField,\n\tVariable,\n\tClass,\n\tStruct,\n\tInterface,\n\tModule,\n\tProperty,\n\tEvent,\n\tOperator,\n\tUnit,\n\tValue,\n\tConstant,\n\tEnum,\n\tEnumMember,\n\tKeyword,\n\tText,\n\tColor,\n\tFile,\n\tReference,\n\tCustomcolor,\n\tFolder,\n\tTypeParameter,\n\tSnippet, // <- highest value (used for compare!)\n}\n\n/**\n * @internal\n */\nexport const completionKindToCssClass = (function () {\n\tlet data = Object.create(null);\n\tdata[CompletionItemKind.Method] = 'method';\n\tdata[CompletionItemKind.Function] = 'function';\n\tdata[CompletionItemKind.Constructor] = 'constructor';\n\tdata[CompletionItemKind.Field] = 'field';\n\tdata[CompletionItemKind.Variable] = 'variable';\n\tdata[CompletionItemKind.Class] = 'class';\n\tdata[CompletionItemKind.Struct] = 'struct';\n\tdata[CompletionItemKind.Interface] = 'interface';\n\tdata[CompletionItemKind.Module] = 'module';\n\tdata[CompletionItemKind.Property] = 'property';\n\tdata[CompletionItemKind.Event] = 'event';\n\tdata[CompletionItemKind.Operator] = 'operator';\n\tdata[CompletionItemKind.Unit] = 'unit';\n\tdata[CompletionItemKind.Value] = 'value';\n\tdata[CompletionItemKind.Constant] = 'constant';\n\tdata[CompletionItemKind.Enum] = 'enum';\n\tdata[CompletionItemKind.EnumMember] = 'enum-member';\n\tdata[CompletionItemKind.Keyword] = 'keyword';\n\tdata[CompletionItemKind.Snippet] = 'snippet';\n\tdata[CompletionItemKind.Text] = 'text';\n\tdata[CompletionItemKind.Color] = 'color';\n\tdata[CompletionItemKind.File] = 'file';\n\tdata[CompletionItemKind.Reference] = 'reference';\n\tdata[CompletionItemKind.Customcolor] = 'customcolor';\n\tdata[CompletionItemKind.Folder] = 'folder';\n\tdata[CompletionItemKind.TypeParameter] = 'type-parameter';\n\n\treturn function (kind: CompletionItemKind) {\n\t\treturn data[kind] || 'property';\n\t};\n})();\n\n/**\n * @internal\n */\nexport let completionKindFromString: {\n\t(value: string): CompletionItemKind;\n\t(value: string, strict: true): CompletionItemKind | undefined;\n} = (function () {\n\tlet data: Record<string, CompletionItemKind> = Object.create(null);\n\tdata['method'] = CompletionItemKind.Method;\n\tdata['function'] = CompletionItemKind.Function;\n\tdata['constructor'] = <any>CompletionItemKind.Constructor;\n\tdata['field'] = CompletionItemKind.Field;\n\tdata['variable'] = CompletionItemKind.Variable;\n\tdata['class'] = CompletionItemKind.Class;\n\tdata['struct'] = CompletionItemKind.Struct;\n\tdata['interface'] = CompletionItemKind.Interface;\n\tdata['module'] = CompletionItemKind.Module;\n\tdata['property'] = CompletionItemKind.Property;\n\tdata['event'] = CompletionItemKind.Event;\n\tdata['operator'] = CompletionItemKind.Operator;\n\tdata['unit'] = CompletionItemKind.Unit;\n\tdata['value'] = CompletionItemKind.Value;\n\tdata['constant'] = CompletionItemKind.Constant;\n\tdata['enum'] = CompletionItemKind.Enum;\n\tdata['enum-member'] = CompletionItemKind.EnumMember;\n\tdata['enumMember'] = CompletionItemKind.EnumMember;\n\tdata['keyword'] = CompletionItemKind.Keyword;\n\tdata['snippet'] = CompletionItemKind.Snippet;\n\tdata['text'] = CompletionItemKind.Text;\n\tdata['color'] = CompletionItemKind.Color;\n\tdata['file'] = CompletionItemKind.File;\n\tdata['reference'] = CompletionItemKind.Reference;\n\tdata['customcolor'] = CompletionItemKind.Customcolor;\n\tdata['folder'] = CompletionItemKind.Folder;\n\tdata['type-parameter'] = CompletionItemKind.TypeParameter;\n\tdata['typeParameter'] = CompletionItemKind.TypeParameter;\n\n\treturn function (value: string, strict?: true) {\n\t\tlet res = data[value];\n\t\tif (typeof res === 'undefined' && !strict) {\n\t\t\tres = CompletionItemKind.Property;\n\t\t}\n\t\treturn res;\n\t};\n})();\n\nexport const enum CompletionItemInsertTextRule {\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 0b001,\n\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 0b100,\n}\n\n/**\n * A completion item represents a text snippet that is\n * proposed to complete text that is being typed.\n */\nexport interface CompletionItem {\n\t/**\n\t * The label of this completion item. By default\n\t * this is also the text that is inserted when selecting\n\t * this completion.\n\t */\n\tlabel: string;\n\t/**\n\t * The kind of this completion item. Based on the kind\n\t * an icon is chosen by the editor.\n\t */\n\tkind: CompletionItemKind;\n\t/**\n\t * A human-readable string with additional information\n\t * about this item, like type or symbol information.\n\t */\n\tdetail?: string;\n\t/**\n\t * A human-readable string that represents a doc-comment.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * A string that should be used when comparing this item\n\t * with other items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.\n\t */\n\tsortText?: string;\n\t/**\n\t * A string that should be used when filtering a set of\n\t * completion items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.\n\t */\n\tfilterText?: string;\n\t/**\n\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t * that match best is selected.\n\t */\n\tpreselect?: boolean;\n\t/**\n\t * A string or snippet that should be inserted in a document when selecting\n\t * this completion.\n\t * is used.\n\t */\n\tinsertText: string;\n\t/**\n\t * Addition rules (as bitmask) that should be applied when inserting\n\t * this completion.\n\t */\n\tinsertTextRules?: CompletionItemInsertTextRule;\n\t/**\n\t * A range of text that should be replaced by this completion item.\n\t *\n\t * Defaults to a range from the start of the [current word](#TextDocument.getWordRangeAtPosition) to the\n\t * current position.\n\t *\n\t * *Note:* The range must be a [single line](#Range.isSingleLine) and it must\n\t * [contain](#Range.contains) the position at which completion has been [requested](#CompletionItemProvider.provideCompletionItems).\n\t */\n\trange: IRange;\n\t/**\n\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t * characters will be ignored.\n\t */\n\tcommitCharacters?: string[];\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\tadditionalTextEdits?: model.ISingleEditOperation[];\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\tcommand?: Command;\n}\n\nexport interface CompletionList {\n\tsuggestions: CompletionItem[];\n\tincomplete?: boolean;\n\tdispose?(): void;\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport const enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n/**\n * Contains additional information about the context in which\n * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.\n */\nexport interface CompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\ttriggerKind: CompletionTriggerKind;\n\t/**\n\t * Character that triggered the completion item provider.\n\t *\n\t * `undefined` if provider was not triggered by a character.\n\t */\n\ttriggerCharacter?: string;\n}\n/**\n * The completion item provider interface defines the contract between extensions and\n * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n *\n * When computing *complete* completion items is expensive, providers can optionally implement\n * the `resolveCompletionItem`-function. In that case it is enough to return completion\n * items with a [label](#CompletionItem.label) from the\n * [provideCompletionItems](#CompletionItemProvider.provideCompletionItems)-function. Subsequently,\n * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n * the item, like adding [doc-comment](#CompletionItem.documentation) or [details](#CompletionItem.detail).\n */\nexport interface CompletionItemProvider {\n\n\ttriggerCharacters?: string[];\n\t/**\n\t * Provide completion items for the given position and document.\n\t */\n\tprovideCompletionItems(model: model.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n\n\t/**\n\t * Given a completion item fill in more data, like [doc-comment](#CompletionItem.documentation)\n\t * or [details](#CompletionItem.detail).\n\t *\n\t * The editor will only resolve a completion item once.\n\t */\n\tresolveCompletionItem?(model: model.ITextModel, position: Position, item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n}\n\nexport interface CodeAction {\n\ttitle: string;\n\tcommand?: Command;\n\tedit?: WorkspaceEdit;\n\tdiagnostics?: IMarkerData[];\n\tkind?: string;\n\tisPreferred?: boolean;\n}\n\n/**\n * @internal\n */\nexport const enum CodeActionTrigger {\n\tAutomatic = 1,\n\tManual = 2,\n}\n\n/**\n * @internal\n */\nexport interface CodeActionContext {\n\tonly?: string;\n\ttrigger: CodeActionTrigger;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n * @internal\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeAction[]>;\n\n\t/**\n\t * Optional list of CodeActionKinds that this provider returns.\n\t */\n\tprovidedCodeActionKinds?: ReadonlyArray<string>;\n}\n\n/**\n * Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.\n */\nexport interface ParameterInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string | [number, number];\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n}\n/**\n * Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.\n */\nexport interface SignatureInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string;\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * The parameters of this signature.\n\t */\n\tparameters: ParameterInformation[];\n}\n/**\n * Signature help represents the signature of something\n * callable. There can be multiple signatures but only one\n * active and only one active parameter.\n */\nexport interface SignatureHelp {\n\t/**\n\t * One or more signatures.\n\t */\n\tsignatures: SignatureInformation[];\n\t/**\n\t * The active signature.\n\t */\n\tactiveSignature: number;\n\t/**\n\t * The active parameter of the active signature.\n\t */\n\tactiveParameter: number;\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3,\n}\n\nexport interface SignatureHelpContext {\n\treadonly triggerKind: SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: SignatureHelp;\n}\n\n/**\n * The signature help provider interface defines the contract between extensions and\n * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface SignatureHelpProvider {\n\n\treadonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n\treadonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n\n\t/**\n\t * Provide help for the signature at the given position and document.\n\t */\n\tprovideSignatureHelp(model: model.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelp>;\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite\n}\n/**\n * A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.\n */\nexport interface DocumentHighlight {\n\t/**\n\t * The range this highlight applies to.\n\t */\n\trange: IRange;\n\t/**\n\t * The highlight kind, default is [text](#DocumentHighlightKind.Text).\n\t */\n\tkind?: DocumentHighlightKind;\n}\n/**\n * The document highlight provider interface defines the contract between extensions and\n * the word-highlight-feature.\n */\nexport interface DocumentHighlightProvider {\n\t/**\n\t * Provide a set of document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t */\n\tprovideDocumentHighlights(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n}\n\n/**\n * Value-object that contains additional information when\n * requesting references.\n */\nexport interface ReferenceContext {\n\t/**\n\t * Include the declaration of the current symbol.\n\t */\n\tincludeDeclaration: boolean;\n}\n/**\n * The reference provider interface defines the contract between extensions and\n * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n */\nexport interface ReferenceProvider {\n\t/**\n\t * Provide a set of project-wide references for the given position and document.\n\t */\n\tprovideReferences(model: model.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n}\n\n/**\n * Represents a location inside a resource, such as a line\n * inside a text file.\n */\nexport interface Location {\n\t/**\n\t * The resource identifier of this location.\n\t */\n\turi: URI;\n\t/**\n\t * The document range of this locations.\n\t */\n\trange: IRange;\n}\n\nexport interface LocationLink {\n\t/**\n\t * A range to select where this link originates from.\n\t */\n\toriginSelectionRange?: IRange;\n\n\t/**\n\t * The target uri this link points to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The full range this link points to.\n\t */\n\trange: IRange;\n\n\t/**\n\t * A range to select this link points to. Must be contained\n\t * in `LocationLink.range`.\n\t */\n\ttargetSelectionRange?: IRange;\n}\n\n/**\n * @internal\n */\nexport function isLocationLink(thing: any): thing is LocationLink {\n\treturn thing\n\t\t&& URI.isUri((thing as LocationLink).uri)\n\t\t&& Range.isIRange((thing as LocationLink).range)\n\t\t&& (Range.isIRange((thing as LocationLink).originSelectionRange) || Range.isIRange((thing as LocationLink).targetSelectionRange));\n}\n\nexport type Definition = Location | Location[] | LocationLink[];\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DefinitionProvider {\n\t/**\n\t * Provide the definition of the symbol at the given position and document.\n\t */\n\tprovideDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DeclarationProvider {\n\t/**\n\t * Provide the declaration of the symbol at the given position and document.\n\t */\n\tprovideDeclaration(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The implementation provider interface defines the contract between extensions and\n * the go to implementation feature.\n */\nexport interface ImplementationProvider {\n\t/**\n\t * Provide the implementation of the symbol at the given position and document.\n\t */\n\tprovideImplementation(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The type definition provider interface defines the contract between extensions and\n * the go to type definition feature.\n */\nexport interface TypeDefinitionProvider {\n\t/**\n\t * Provide the type definition of the symbol at the given position and document.\n\t */\n\tprovideTypeDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * A symbol kind.\n */\nexport const enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\n\n/**\n * @internal\n */\nexport const symbolKindToCssClass = (function () {\n\n\tconst _fromMapping: { [n: number]: string } = Object.create(null);\n\t_fromMapping[SymbolKind.File] = 'file';\n\t_fromMapping[SymbolKind.Module] = 'module';\n\t_fromMapping[SymbolKind.Namespace] = 'namespace';\n\t_fromMapping[SymbolKind.Package] = 'package';\n\t_fromMapping[SymbolKind.Class] = 'class';\n\t_fromMapping[SymbolKind.Method] = 'method';\n\t_fromMapping[SymbolKind.Property] = 'property';\n\t_fromMapping[SymbolKind.Field] = 'field';\n\t_fromMapping[SymbolKind.Constructor] = 'constructor';\n\t_fromMapping[SymbolKind.Enum] = 'enum';\n\t_fromMapping[SymbolKind.Interface] = 'interface';\n\t_fromMapping[SymbolKind.Function] = 'function';\n\t_fromMapping[SymbolKind.Variable] = 'variable';\n\t_fromMapping[SymbolKind.Constant] = 'constant';\n\t_fromMapping[SymbolKind.String] = 'string';\n\t_fromMapping[SymbolKind.Number] = 'number';\n\t_fromMapping[SymbolKind.Boolean] = 'boolean';\n\t_fromMapping[SymbolKind.Array] = 'array';\n\t_fromMapping[SymbolKind.Object] = 'object';\n\t_fromMapping[SymbolKind.Key] = 'key';\n\t_fromMapping[SymbolKind.Null] = 'null';\n\t_fromMapping[SymbolKind.EnumMember] = 'enum-member';\n\t_fromMapping[SymbolKind.Struct] = 'struct';\n\t_fromMapping[SymbolKind.Event] = 'event';\n\t_fromMapping[SymbolKind.Operator] = 'operator';\n\t_fromMapping[SymbolKind.TypeParameter] = 'type-parameter';\n\n\treturn function toCssClassName(kind: SymbolKind, inline?: boolean): string {\n\t\treturn `symbol-icon ${inline ? 'inline' : 'block'} ${_fromMapping[kind] || 'property'}`;\n\t};\n})();\n\nexport interface DocumentSymbol {\n\tname: string;\n\tdetail: string;\n\tkind: SymbolKind;\n\tcontainerName?: string;\n\trange: IRange;\n\tselectionRange: IRange;\n\tchildren?: DocumentSymbol[];\n}\n\n/**\n * The document symbol provider interface defines the contract between extensions and\n * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_goto-symbol)-feature.\n */\nexport interface DocumentSymbolProvider {\n\n\tdisplayName?: string;\n\n\t/**\n\t * Provide symbol information for the given document.\n\t */\n\tprovideDocumentSymbols(model: model.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n}\n\nexport type TextEdit = { range: IRange; text: string; eol?: model.EndOfLineSequence; };\n\n/**\n * Interface used to format a model\n */\nexport interface FormattingOptions {\n\t/**\n\t * Size of a tab in spaces.\n\t */\n\ttabSize: number;\n\t/**\n\t * Prefer spaces over tabs.\n\t */\n\tinsertSpaces: boolean;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentFormattingEditProvider {\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a whole document.\n\t */\n\tprovideDocumentFormattingEdits(model: model.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentRangeFormattingEditProvider {\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a range in a document.\n\t *\n\t * The given range is a hint and providers can decide to format a smaller\n\t * or larger range. Often this is done by adjusting the start and end\n\t * of the range to full syntax nodes.\n\t */\n\tprovideDocumentRangeFormattingEdits(model: model.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface OnTypeFormattingEditProvider {\n\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\tautoFormatTriggerCharacters: string[];\n\n\t/**\n\t * Provide formatting edits after a character has been typed.\n\t *\n\t * The given position and character should hint to the provider\n\t * what range the position to expand to, like find the matching `{`\n\t * when `}` has been entered.\n\t */\n\tprovideOnTypeFormattingEdits(model: model.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange: IRange;\n}\n\n/**\n * A link inside the editor.\n */\nexport interface ILink {\n\trange: IRange;\n\turl?: URI | string;\n}\n/**\n * A provider of links.\n */\nexport interface LinkProvider {\n\tprovideLinks(model: model.ITextModel, token: CancellationToken): ProviderResult<ILink[]>;\n\tresolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n}\n\n/**\n * A color in RGBA format.\n */\nexport interface IColor {\n\n\t/**\n\t * The red component in the range [0-1].\n\t */\n\treadonly red: number;\n\n\t/**\n\t * The green component in the range [0-1].\n\t */\n\treadonly green: number;\n\n\t/**\n\t * The blue component in the range [0-1].\n\t */\n\treadonly blue: number;\n\n\t/**\n\t * The alpha component in the range [0-1].\n\t */\n\treadonly alpha: number;\n}\n\n/**\n * String representations for a color\n */\nexport interface IColorPresentation {\n\t/**\n\t * The label of this color presentation. It will be shown on the color\n\t * picker header. By default this is also the text that is inserted when selecting\n\t * this color presentation.\n\t */\n\tlabel: string;\n\t/**\n\t * An [edit](#TextEdit) which is applied to a document when selecting\n\t * this presentation for the color.\n\t */\n\ttextEdit?: TextEdit;\n\t/**\n\t * An optional array of additional [text edits](#TextEdit) that are applied when\n\t * selecting this color presentation.\n\t */\n\tadditionalTextEdits?: TextEdit[];\n}\n\n/**\n * A color range is a range in a text model which represents a color.\n */\nexport interface IColorInformation {\n\n\t/**\n\t * The range within the model.\n\t */\n\trange: IRange;\n\n\t/**\n\t * The color represented in this range.\n\t */\n\tcolor: IColor;\n}\n\n/**\n * A provider of colors for editor models.\n */\nexport interface DocumentColorProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideDocumentColors(model: model.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n\t/**\n\t * Provide the string representations for a color.\n\t */\n\tprovideColorPresentations(model: model.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n}\n\nexport interface SelectionRange {\n\tkind: string;\n\trange: IRange;\n}\n\nexport interface SelectionRangeProvider {\n\t/**\n\t * Provide ranges that should be selected from the given position.\n\t */\n\tprovideSelectionRanges(model: model.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n}\n\nexport interface FoldingContext {\n}\n/**\n * A provider of colors for editor models.\n */\nexport interface FoldingRangeProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideFoldingRanges(model: model.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n}\n\nexport interface FoldingRange {\n\n\t/**\n\t * The one-based start line of the range to fold. The folded area starts after the line's last character.\n\t */\n\tstart: number;\n\n\t/**\n\t * The one-based end line of the range to fold. The folded area ends with the line's last character.\n\t */\n\tend: number;\n\n\t/**\n\t * Describes the [Kind](#FoldingRangeKind) of the folding range such as [Comment](#FoldingRangeKind.Comment) or\n\t * [Region](#FoldingRangeKind.Region). The kind is used to categorize folding ranges and used by commands\n\t * like 'Fold all comments'. See\n\t * [FoldingRangeKind](#FoldingRangeKind) for an enumeration of standardized kinds.\n\t */\n\tkind?: FoldingRangeKind;\n}\nexport class FoldingRangeKind {\n\t/**\n\t * Kind for folding range representing a comment. The value of the kind is 'comment'.\n\t */\n\tstatic readonly Comment = new FoldingRangeKind('comment');\n\t/**\n\t * Kind for folding range representing a import. The value of the kind is 'imports'.\n\t */\n\tstatic readonly Imports = new FoldingRangeKind('imports');\n\t/**\n\t * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n\t * The value of the kind is 'region'.\n\t */\n\tstatic readonly Region = new FoldingRangeKind('region');\n\n\t/**\n\t * Creates a new [FoldingRangeKind](#FoldingRangeKind).\n\t *\n\t * @param value of the kind.\n\t */\n\tpublic constructor(public value: string) {\n\t}\n}\n\n/**\n * @internal\n */\nexport function isResourceFileEdit(thing: any): thing is ResourceFileEdit {\n\treturn isObject(thing) && (Boolean((<ResourceFileEdit>thing).newUri) || Boolean((<ResourceFileEdit>thing).oldUri));\n}\n\n/**\n * @internal\n */\nexport function isResourceTextEdit(thing: any): thing is ResourceTextEdit {\n\treturn isObject(thing) && (<ResourceTextEdit>thing).resource && Array.isArray((<ResourceTextEdit>thing).edits);\n}\n\nexport interface ResourceFileEdit {\n\toldUri: URI;\n\tnewUri: URI;\n\toptions: { overwrite?: boolean, ignoreIfNotExists?: boolean, ignoreIfExists?: boolean, recursive?: boolean };\n}\n\nexport interface ResourceTextEdit {\n\tresource: URI;\n\tmodelVersionId?: number;\n\tedits: TextEdit[];\n}\n\nexport interface WorkspaceEdit {\n\tedits: Array<ResourceTextEdit | ResourceFileEdit>;\n}\n\nexport interface Rejection {\n\trejectReason?: string;\n}\nexport interface RenameLocation {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface RenameProvider {\n\tprovideRenameEdits(model: model.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n\tresolveRenameLocation?(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n}\n\n\nexport interface Command {\n\tid: string;\n\ttitle: string;\n\ttooltip?: string;\n\targuments?: any[];\n}\n\n/**\n * @internal\n */\nexport interface CommentInfo {\n\textensionId?: string;\n\tthreads: CommentThread[];\n\tcommentingRanges?: (IRange[] | CommentingRanges);\n\treply?: Command;\n\tdraftMode?: DraftMode;\n}\n\n/**\n * @internal\n */\nexport enum DraftMode {\n\tNotSupported,\n\tInDraft,\n\tNotInDraft\n}\n\n/**\n * @internal\n */\nexport enum CommentThreadCollapsibleState {\n\t/**\n\t * Determines an item is collapsed\n\t */\n\tCollapsed = 0,\n\t/**\n\t * Determines an item is expanded\n\t */\n\tExpanded = 1\n}\n\n\n\n/**\n * @internal\n */\nexport interface CommentWidget {\n\tcommentThread: CommentThread;\n\tcomment?: Comment;\n\tinput: string;\n\tonDidChangeInput: Event<string>;\n}\n\n/**\n * @internal\n */\nexport interface CommentInput {\n\tvalue: string;\n\turi: URI;\n}\n\n/**\n * @internal\n */\nexport interface CommentThread2 {\n\tcommentThreadHandle: number;\n\textensionId?: string;\n\tthreadId: string | null;\n\tresource: string | null;\n\trange: IRange;\n\tlabel: string;\n\tcomments: Comment[];\n\tonDidChangeComments: Event<Comment[]>;\n\tcollapsibleState?: CommentThreadCollapsibleState;\n\tinput?: CommentInput;\n\tonDidChangeInput: Event<CommentInput | undefined>;\n\tacceptInputCommand?: Command;\n\tadditionalCommands: Command[];\n\tdeleteCommand?: Command;\n\tonDidChangeAcceptInputCommand: Event<Command>;\n\tonDidChangeAdditionalCommands: Event<Command[]>;\n\tonDidChangeRange: Event<IRange>;\n\tonDidChangeLabel: Event<string>;\n\tonDidChangeCollasibleState: Event<CommentThreadCollapsibleState>;\n}\n\n/**\n * @internal\n */\n\nexport interface CommentingRanges {\n\treadonly resource: URI;\n\tranges: IRange[];\n\tnewCommentThreadCommand?: Command;\n\tnewCommentThreadCallback?: (uri: UriComponents, range: IRange) => Promise<void>;\n}\n\n/**\n * @internal\n */\nexport interface CommentThread {\n\textensionId?: string;\n\tthreadId: string | null;\n\tresource: string | null;\n\trange: IRange;\n\tcomments: Comment[];\n\tcollapsibleState?: CommentThreadCollapsibleState;\n\treply?: Command;\n}\n\n/**\n * @internal\n */\nexport interface NewCommentAction {\n\tranges: IRange[];\n\tactions: Command[];\n}\n\n/**\n * @internal\n */\nexport interface CommentReaction {\n\treadonly label?: string;\n\treadonly iconPath?: UriComponents;\n\treadonly count?: number;\n\treadonly hasReacted?: boolean;\n\treadonly canEdit?: boolean;\n}\n\n/**\n * @internal\n */\nexport interface Comment {\n\treadonly commentId: string;\n\treadonly body: IMarkdownString;\n\treadonly userName: string;\n\treadonly userIconPath?: string;\n\treadonly canEdit?: boolean;\n\treadonly canDelete?: boolean;\n\treadonly selectCommand?: Command;\n\treadonly editCommand?: Command;\n\treadonly deleteCommand?: Command;\n\treadonly isDraft?: boolean;\n\treadonly commentReactions?: CommentReaction[];\n\treadonly label?: string;\n}\n\n/**\n * @internal\n */\nexport interface CommentThreadChangedEvent {\n\t/**\n\t * Added comment threads.\n\t */\n\treadonly added: (CommentThread | CommentThread2)[];\n\n\t/**\n\t * Removed comment threads.\n\t */\n\treadonly removed: (CommentThread | CommentThread2)[];\n\n\t/**\n\t * Changed comment threads.\n\t */\n\treadonly changed: (CommentThread | CommentThread2)[];\n\n\t/**\n\t * changed draft mode.\n\t */\n\treadonly draftMode?: DraftMode;\n}\n\n/**\n * @internal\n */\nexport interface DocumentCommentProvider {\n\tprovideDocumentComments(resource: URI, token: CancellationToken): Promise<CommentInfo | null>;\n\tcreateNewCommentThread(resource: URI, range: Range, text: string, token: CancellationToken): Promise<CommentThread | null>;\n\treplyToCommentThread(resource: URI, range: Range, thread: CommentThread, text: string, token: CancellationToken): Promise<CommentThread | null>;\n\teditComment(resource: URI, comment: Comment, text: string, token: CancellationToken): Promise<void>;\n\tdeleteComment(resource: URI, comment: Comment, token: CancellationToken): Promise<void>;\n\tstartDraft?(resource: URI, token: CancellationToken): Promise<void>;\n\tdeleteDraft?(resource: URI, token: CancellationToken): Promise<void>;\n\tfinishDraft?(resource: URI, token: CancellationToken): Promise<void>;\n\n\tstartDraftLabel?: string;\n\tdeleteDraftLabel?: string;\n\tfinishDraftLabel?: string;\n\n\taddReaction?(resource: URI, comment: Comment, reaction: CommentReaction, token: CancellationToken): Promise<void>;\n\tdeleteReaction?(resource: URI, comment: Comment, reaction: CommentReaction, token: CancellationToken): Promise<void>;\n\treactionGroup?: CommentReaction[];\n\n\tonDidChangeCommentThreads?(): Event<CommentThreadChangedEvent>;\n}\n\n/**\n * @internal\n */\nexport interface WorkspaceCommentProvider {\n\tprovideWorkspaceComments(token: CancellationToken): Promise<CommentThread[]>;\n\tonDidChangeCommentThreads(): Event<CommentThreadChangedEvent>;\n}\n\n/**\n * @internal\n */\nexport interface IWebviewOptions {\n\treadonly enableScripts?: boolean;\n\treadonly enableCommandUris?: boolean;\n\treadonly localResourceRoots?: ReadonlyArray<URI>;\n\treadonly portMapping?: ReadonlyArray<{ port: number, resolvedPort: number }>;\n}\n\n/**\n * @internal\n */\nexport interface IWebviewPanelOptions {\n\treadonly enableFindWidget?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n}\n\nexport interface ICodeLensSymbol {\n\trange: IRange;\n\tid?: string;\n\tcommand?: Command;\n}\nexport interface CodeLensProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeLenses(model: model.ITextModel, token: CancellationToken): ProviderResult<ICodeLensSymbol[]>;\n\tresolveCodeLens?(model: model.ITextModel, codeLens: ICodeLensSymbol, token: CancellationToken): ProviderResult<ICodeLensSymbol>;\n}\n\n// --- feature registries ------\n\n/**\n * @internal\n */\nexport const ReferenceProviderRegistry = new LanguageFeatureRegistry<ReferenceProvider>();\n\n/**\n * @internal\n */\nexport const RenameProviderRegistry = new LanguageFeatureRegistry<RenameProvider>();\n\n/**\n * @internal\n */\nexport const CompletionProviderRegistry = new LanguageFeatureRegistry<CompletionItemProvider>();\n\n/**\n * @internal\n */\nexport const SignatureHelpProviderRegistry = new LanguageFeatureRegistry<SignatureHelpProvider>();\n\n/**\n * @internal\n */\nexport const HoverProviderRegistry = new LanguageFeatureRegistry<HoverProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSymbolProviderRegistry = new LanguageFeatureRegistry<DocumentSymbolProvider>();\n\n/**\n * @internal\n */\nexport const DocumentHighlightProviderRegistry = new LanguageFeatureRegistry<DocumentHighlightProvider>();\n\n/**\n * @internal\n */\nexport const DefinitionProviderRegistry = new LanguageFeatureRegistry<DefinitionProvider>();\n\n/**\n * @internal\n */\nexport const DeclarationProviderRegistry = new LanguageFeatureRegistry<DeclarationProvider>();\n\n/**\n * @internal\n */\nexport const ImplementationProviderRegistry = new LanguageFeatureRegistry<ImplementationProvider>();\n\n/**\n * @internal\n */\nexport const TypeDefinitionProviderRegistry = new LanguageFeatureRegistry<TypeDefinitionProvider>();\n\n/**\n * @internal\n */\nexport const CodeLensProviderRegistry = new LanguageFeatureRegistry<CodeLensProvider>();\n\n/**\n * @internal\n */\nexport const CodeActionProviderRegistry = new LanguageFeatureRegistry<CodeActionProvider>();\n\n/**\n * @internal\n */\nexport const DocumentFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentRangeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const OnTypeFormattingEditProviderRegistry = new LanguageFeatureRegistry<OnTypeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const LinkProviderRegistry = new LanguageFeatureRegistry<LinkProvider>();\n\n/**\n * @internal\n */\nexport const ColorProviderRegistry = new LanguageFeatureRegistry<DocumentColorProvider>();\n\n/**\n * @internal\n */\nexport const SelectionRangeRegistry = new LanguageFeatureRegistry<SelectionRangeProvider>();\n\n/**\n * @internal\n */\nexport const FoldingRangeProviderRegistry = new LanguageFeatureRegistry<FoldingRangeProvider>();\n\n/**\n * @internal\n */\nexport interface ITokenizationSupportChangedEvent {\n\tchangedLanguages: string[];\n\tchangedColorMap: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationRegistry {\n\n\t/**\n\t * An event triggered when:\n\t *  - a tokenization support is registered, unregistered or changed.\n\t *  - the color map is changed.\n\t */\n\tonDidChange: Event<ITokenizationSupportChangedEvent>;\n\n\t/**\n\t * Fire a change event for a language.\n\t * This is useful for languages that embed other languages.\n\t */\n\tfire(languages: string[]): void;\n\n\t/**\n\t * Register a tokenization support.\n\t */\n\tregister(language: string, support: ITokenizationSupport): IDisposable;\n\n\t/**\n\t * Register a promise for a tokenization support.\n\t */\n\tregisterPromise(language: string, promise: Thenable<ITokenizationSupport>): IDisposable;\n\n\t/**\n\t * Get the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tget(language: string): ITokenizationSupport | null;\n\n\t/**\n\t * Get the promise of a tokenization support for a language.\n\t * `null` is returned if no support is available and no promise for the support has been registered yet.\n\t */\n\tgetPromise(language: string): Thenable<ITokenizationSupport> | null;\n\n\t/**\n\t * Set the new color map that all tokens will use in their ColorId binary encoded bits for foreground and background.\n\t */\n\tsetColorMap(colorMap: Color[]): void;\n\n\tgetColorMap(): Color[] | null;\n\n\tgetDefaultBackground(): Color | null;\n}\n\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n"]}]}