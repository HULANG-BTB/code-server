{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/performance.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/actions/common/actions\", \"vs/platform/commands/common/commands\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/registry/common/platform\", \"vs/workbench/common/contributions\", \"vs/workbench/common/editor\", \"vs/workbench/contrib/performance/electron-browser/perfviewEditor\", \"vs/workbench/services/editor/common/editorService\", \"./startupProfiler\", \"./startupTimings\"], function (require, exports, nls_1, actions_1, commands_1, instantiation_1, lifecycle_1, platform_1, contributions_1, editor_1, perfviewEditor_1, editorService_1, startupProfiler_1, startupTimings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // -- startup performance view\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(perfviewEditor_1.PerfviewContrib, lifecycle_1.LifecyclePhase.Ready);\n    platform_1.Registry.as(editor_1.Extensions.EditorInputFactories).registerEditorInputFactory(perfviewEditor_1.PerfviewInput.Id, class {\n        serialize() {\n            return '';\n        }\n        deserialize(instantiationService) {\n            return instantiationService.createInstance(perfviewEditor_1.PerfviewInput);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand('perfview.show', accessor => {\n        const editorService = accessor.get(editorService_1.IEditorService);\n        const instaService = accessor.get(instantiation_1.IInstantiationService);\n        return editorService.openEditor(instaService.createInstance(perfviewEditor_1.PerfviewInput));\n    });\n    actions_1.MenuRegistry.addCommand({\n        id: 'perfview.show',\n        category: nls_1.localize('show.cat', \"Developer\"),\n        title: nls_1.localize('show.label', \"Startup Performance\")\n    });\n    // -- startup profiler\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(startupProfiler_1.StartupProfiler, lifecycle_1.LifecyclePhase.Restored);\n    // -- startup timings\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(startupTimings_1.StartupTimings, lifecycle_1.LifecyclePhase.Eventually);\n});\n",null]}