{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/overviewZoneManager.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/overviewZoneManager.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Constants;\n    (function (Constants) {\n        Constants[Constants[\"MINIMUM_HEIGHT\"] = 4] = \"MINIMUM_HEIGHT\";\n    })(Constants || (Constants = {}));\n    class ColorZone {\n        constructor(from, to, colorId) {\n            this.from = from | 0;\n            this.to = to | 0;\n            this.colorId = colorId | 0;\n        }\n        static compare(a, b) {\n            if (a.colorId === b.colorId) {\n                if (a.from === b.from) {\n                    return a.to - b.to;\n                }\n                return a.from - b.from;\n            }\n            return a.colorId - b.colorId;\n        }\n    }\n    exports.ColorZone = ColorZone;\n    /**\n     * A zone in the overview ruler\n     */\n    class OverviewRulerZone {\n        constructor(startLineNumber, endLineNumber, color) {\n            this.startLineNumber = startLineNumber;\n            this.endLineNumber = endLineNumber;\n            this.color = color;\n            this._colorZone = null;\n        }\n        static compare(a, b) {\n            if (a.color === b.color) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.color < b.color ? -1 : 1;\n        }\n        setColorZone(colorZone) {\n            this._colorZone = colorZone;\n        }\n        getColorZones() {\n            return this._colorZone;\n        }\n    }\n    exports.OverviewRulerZone = OverviewRulerZone;\n    class OverviewZoneManager {\n        constructor(getVerticalOffsetForLine) {\n            this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n            this._zones = [];\n            this._colorZonesInvalid = false;\n            this._lineHeight = 0;\n            this._domWidth = 0;\n            this._domHeight = 0;\n            this._outerHeight = 0;\n            this._pixelRatio = 1;\n            this._lastAssignedId = 0;\n            this._color2Id = Object.create(null);\n            this._id2Color = [];\n        }\n        getId2Color() {\n            return this._id2Color;\n        }\n        setZones(newZones) {\n            this._zones = newZones;\n            this._zones.sort(OverviewRulerZone.compare);\n        }\n        setLineHeight(lineHeight) {\n            if (this._lineHeight === lineHeight) {\n                return false;\n            }\n            this._lineHeight = lineHeight;\n            this._colorZonesInvalid = true;\n            return true;\n        }\n        setPixelRatio(pixelRatio) {\n            this._pixelRatio = pixelRatio;\n            this._colorZonesInvalid = true;\n        }\n        getDOMWidth() {\n            return this._domWidth;\n        }\n        getCanvasWidth() {\n            return this._domWidth * this._pixelRatio;\n        }\n        setDOMWidth(width) {\n            if (this._domWidth === width) {\n                return false;\n            }\n            this._domWidth = width;\n            this._colorZonesInvalid = true;\n            return true;\n        }\n        getDOMHeight() {\n            return this._domHeight;\n        }\n        getCanvasHeight() {\n            return this._domHeight * this._pixelRatio;\n        }\n        setDOMHeight(height) {\n            if (this._domHeight === height) {\n                return false;\n            }\n            this._domHeight = height;\n            this._colorZonesInvalid = true;\n            return true;\n        }\n        getOuterHeight() {\n            return this._outerHeight;\n        }\n        setOuterHeight(outerHeight) {\n            if (this._outerHeight === outerHeight) {\n                return false;\n            }\n            this._outerHeight = outerHeight;\n            this._colorZonesInvalid = true;\n            return true;\n        }\n        resolveColorZones() {\n            const colorZonesInvalid = this._colorZonesInvalid;\n            const lineHeight = Math.floor(this._lineHeight); // @perf\n            const totalHeight = Math.floor(this.getCanvasHeight()); // @perf\n            const outerHeight = Math.floor(this._outerHeight); // @perf\n            const heightRatio = totalHeight / outerHeight;\n            const halfMinimumHeight = Math.floor(Constants.MINIMUM_HEIGHT * this._pixelRatio / 2);\n            let allColorZones = [];\n            for (let i = 0, len = this._zones.length; i < len; i++) {\n                const zone = this._zones[i];\n                if (!colorZonesInvalid) {\n                    const colorZone = zone.getColorZones();\n                    if (colorZone) {\n                        allColorZones.push(colorZone);\n                        continue;\n                    }\n                }\n                const y1 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.startLineNumber)));\n                const y2 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight));\n                let ycenter = Math.floor((y1 + y2) / 2);\n                let halfHeight = (y2 - ycenter);\n                if (halfHeight < halfMinimumHeight) {\n                    halfHeight = halfMinimumHeight;\n                }\n                if (ycenter - halfHeight < 0) {\n                    ycenter = halfHeight;\n                }\n                if (ycenter + halfHeight > totalHeight) {\n                    ycenter = totalHeight - halfHeight;\n                }\n                const color = zone.color;\n                let colorId = this._color2Id[color];\n                if (!colorId) {\n                    colorId = (++this._lastAssignedId);\n                    this._color2Id[color] = colorId;\n                    this._id2Color[colorId] = color;\n                }\n                const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n                zone.setColorZone(colorZone);\n                allColorZones.push(colorZone);\n            }\n            this._colorZonesInvalid = false;\n            allColorZones.sort(ColorZone.compare);\n            return allColorZones;\n        }\n    }\n    exports.OverviewZoneManager = OverviewZoneManager;\n});\n",null]}