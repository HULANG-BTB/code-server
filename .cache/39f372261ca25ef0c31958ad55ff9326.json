{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/download/node/downloadIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/base/common/path\", \"fs\", \"vs/base/common/event\", \"vs/base/node/pfs\", \"os\", \"vs/base/common/uuid\"], function (require, exports, uri_1, path, fs, event_1, pfs_1, os_1, uuid_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function upload(uri) {\n        const stream = new event_1.Emitter();\n        const readstream = fs.createReadStream(uri.fsPath);\n        readstream.on('data', data => stream.fire(data));\n        readstream.on('error', error => stream.fire(error.toString()));\n        readstream.on('close', () => stream.fire(undefined));\n        return stream.event;\n    }\n    class DownloadServiceChannel {\n        constructor() { }\n        listen(_, event, arg) {\n            switch (event) {\n                case 'upload': return event_1.Event.buffer(upload(uri_1.URI.revive(arg)));\n            }\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command) {\n            throw new Error(`Call not found: ${command}`);\n        }\n    }\n    exports.DownloadServiceChannel = DownloadServiceChannel;\n    class DownloadServiceChannelClient {\n        constructor(channel, getUriTransformer) {\n            this.channel = channel;\n            this.getUriTransformer = getUriTransformer;\n        }\n        download(from, to = path.join(os_1.tmpdir(), uuid_1.generateUuid())) {\n            from = this.getUriTransformer().transformOutgoingURI(from);\n            const dirName = path.dirname(to);\n            let out;\n            return new Promise((c, e) => {\n                return pfs_1.mkdirp(dirName)\n                    .then(() => {\n                    out = fs.createWriteStream(to);\n                    out.once('close', () => c(to));\n                    out.once('error', e);\n                    const uploadStream = this.channel.listen('upload', from);\n                    const disposable = uploadStream(result => {\n                        if (result === undefined) {\n                            disposable.dispose();\n                            out.end(() => c(to));\n                        }\n                        else if (Buffer.isBuffer(result)) {\n                            out.write(result);\n                        }\n                        else if (typeof result === 'string') {\n                            disposable.dispose();\n                            out.end(() => e(result));\n                        }\n                    });\n                });\n            });\n        }\n    }\n    exports.DownloadServiceChannelClient = DownloadServiceChannelClient;\n});\n",null]}