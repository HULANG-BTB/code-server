{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsList.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsList.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/common/lifecycle\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/event\", \"vs/base/browser/event\", \"vs/workbench/contrib/extensions/common/extensions\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActions\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/workbench/contrib/extensions/electron-browser/extensionsWidgets\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/notification/common/notification\"], function (require, exports, dom_1, lifecycle_1, actionbar_1, instantiation_1, event_1, event_2, extensions_1, extensionsActions_1, extensionManagementUtil_1, extensionsWidgets_1, extensions_2, extensionManagement_1, notification_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Delegate {\n        getHeight() { return 62; }\n        getTemplateId() { return 'extension'; }\n    }\n    exports.Delegate = Delegate;\n    const actionOptions = { icon: true, label: true, tabOnlyOnFocus: true };\n    let Renderer = class Renderer {\n        constructor(extensionViewState, instantiationService, notificationService, extensionsWorkbenchService, extensionService, extensionManagementServerService) {\n            this.extensionViewState = extensionViewState;\n            this.instantiationService = instantiationService;\n            this.notificationService = notificationService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.extensionService = extensionService;\n            this.extensionManagementServerService = extensionManagementServerService;\n        }\n        get templateId() { return 'extension'; }\n        renderTemplate(root) {\n            const recommendationWidget = this.instantiationService.createInstance(extensionsWidgets_1.RecommendationWidget, root);\n            const element = dom_1.append(root, dom_1.$('.extension'));\n            const iconContainer = dom_1.append(element, dom_1.$('.icon-container'));\n            const icon = dom_1.append(iconContainer, dom_1.$('img.icon'));\n            const badgeWidget = this.instantiationService.createInstance(extensionsWidgets_1.RemoteBadgeWidget, iconContainer);\n            const details = dom_1.append(element, dom_1.$('.details'));\n            const headerContainer = dom_1.append(details, dom_1.$('.header-container'));\n            const header = dom_1.append(headerContainer, dom_1.$('.header'));\n            const name = dom_1.append(header, dom_1.$('span.name'));\n            const version = dom_1.append(header, dom_1.$('span.version'));\n            const installCount = dom_1.append(header, dom_1.$('span.install-count'));\n            const ratings = dom_1.append(header, dom_1.$('span.ratings'));\n            const description = dom_1.append(details, dom_1.$('.description.ellipsis'));\n            const footer = dom_1.append(details, dom_1.$('.footer'));\n            const author = dom_1.append(footer, dom_1.$('.author.ellipsis'));\n            const actionbar = new actionbar_1.ActionBar(footer, {\n                animated: false,\n                actionItemProvider: (action) => {\n                    if (action.id === extensionsActions_1.ManageExtensionAction.ID) {\n                        return action.createActionItem();\n                    }\n                    return new extensionsActions_1.ExtensionActionItem(null, action, actionOptions);\n                }\n            });\n            actionbar.onDidRun(({ error }) => error && this.notificationService.error(error));\n            const widgets = [\n                recommendationWidget,\n                badgeWidget,\n                this.instantiationService.createInstance(extensionsWidgets_1.Label, version, (e) => e.version),\n                this.instantiationService.createInstance(extensionsWidgets_1.InstallCountWidget, installCount, true),\n                this.instantiationService.createInstance(extensionsWidgets_1.RatingsWidget, ratings, true)\n            ];\n            const actions = [\n                this.instantiationService.createInstance(extensionsActions_1.StatusLabelAction),\n                this.instantiationService.createInstance(extensionsActions_1.UpdateAction),\n                this.instantiationService.createInstance(extensionsActions_1.ReloadAction),\n                this.instantiationService.createInstance(extensionsActions_1.InstallAction),\n                this.instantiationService.createInstance(extensionsActions_1.MaliciousStatusLabelAction, false),\n                this.instantiationService.createInstance(extensionsActions_1.ManageExtensionAction)\n            ];\n            const extensionContainers = this.instantiationService.createInstance(extensions_1.ExtensionContainers, [...actions, ...widgets]);\n            actionbar.push(actions, actionOptions);\n            const disposables = [...actions, ...widgets, actionbar, extensionContainers];\n            return {\n                root, element, icon, name, installCount, ratings, author, description, disposables, actionbar,\n                extensionDisposables: [],\n                set extension(extension) {\n                    extensionContainers.extension = extension;\n                }\n            };\n        }\n        renderPlaceholder(index, data) {\n            dom_1.addClass(data.element, 'loading');\n            data.root.removeAttribute('aria-label');\n            data.extensionDisposables = lifecycle_1.dispose(data.extensionDisposables);\n            data.icon.src = '';\n            data.name.textContent = '';\n            data.author.textContent = '';\n            data.description.textContent = '';\n            data.installCount.style.display = 'none';\n            data.ratings.style.display = 'none';\n            data.extension = null;\n        }\n        renderElement(extension, index, data) {\n            dom_1.removeClass(data.element, 'loading');\n            data.extensionDisposables = lifecycle_1.dispose(data.extensionDisposables);\n            const updateEnablement = () => __awaiter(this, void 0, void 0, function* () {\n                const runningExtensions = yield this.extensionService.getExtensions();\n                const installed = this.extensionsWorkbenchService.local.filter(e => extensionManagementUtil_1.areSameExtensions(e.identifier, extension.identifier))[0];\n                if (installed && installed.local) {\n                    const installedExtensionServer = this.extensionManagementServerService.getExtensionManagementServer(installed.local.location);\n                    const isSameExtensionRunning = runningExtensions.some(e => {\n                        if (!extensionManagementUtil_1.areSameExtensions({ id: e.identifier.value }, extension.identifier)) {\n                            return false;\n                        }\n                        const runningExtensionServer = this.extensionManagementServerService.getExtensionManagementServer(e.extensionLocation);\n                        if (!installedExtensionServer || !runningExtensionServer) {\n                            return false;\n                        }\n                        return installedExtensionServer.authority === runningExtensionServer.authority;\n                    });\n                    dom_1.toggleClass(data.root, 'disabled', !isSameExtensionRunning);\n                }\n                else {\n                    dom_1.removeClass(data.root, 'disabled');\n                }\n            });\n            updateEnablement();\n            this.extensionService.onDidChangeExtensions(() => updateEnablement(), this, data.extensionDisposables);\n            const onError = event_1.Event.once(event_2.domEvent(data.icon, 'error'));\n            onError(() => data.icon.src = extension.iconUrlFallback, null, data.extensionDisposables);\n            data.icon.src = extension.iconUrl;\n            if (!data.icon.complete) {\n                data.icon.style.visibility = 'hidden';\n                data.icon.onload = () => data.icon.style.visibility = 'inherit';\n            }\n            else {\n                data.icon.style.visibility = 'inherit';\n            }\n            data.name.textContent = extension.displayName;\n            data.author.textContent = extension.publisherDisplayName;\n            data.description.textContent = extension.description;\n            data.installCount.style.display = '';\n            data.ratings.style.display = '';\n            data.extension = extension;\n            if (extension.gallery && extension.gallery.properties && extension.gallery.properties.localizedLanguages && extension.gallery.properties.localizedLanguages.length) {\n                data.description.textContent = extension.gallery.properties.localizedLanguages.map(name => name[0].toLocaleUpperCase() + name.slice(1)).join(', ');\n            }\n            this.extensionViewState.onFocus(e => {\n                if (extensionManagementUtil_1.areSameExtensions(extension.identifier, e.identifier)) {\n                    data.actionbar.items.forEach(item => item.setFocus(true));\n                }\n            }, this, data.extensionDisposables);\n            this.extensionViewState.onBlur(e => {\n                if (extensionManagementUtil_1.areSameExtensions(extension.identifier, e.identifier)) {\n                    data.actionbar.items.forEach(item => item.setFocus(false));\n                }\n            }, this, data.extensionDisposables);\n        }\n        disposeTemplate(data) {\n            data.disposables = lifecycle_1.dispose(data.disposables);\n        }\n    };\n    Renderer = __decorate([\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, notification_1.INotificationService),\n        __param(3, extensions_1.IExtensionsWorkbenchService),\n        __param(4, extensions_2.IExtensionService),\n        __param(5, extensionManagement_1.IExtensionManagementServerService)\n    ], Renderer);\n    exports.Renderer = Renderer;\n});\n",null]}