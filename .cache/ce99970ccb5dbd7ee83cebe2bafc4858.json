{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar env = require(\"vs/base/common/platform\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar paths = require(\"vs/base/common/path\");\nvar externalTerminal_1 = require(\"vs/workbench/contrib/externalTerminal/common/externalTerminal\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar externalTerminal_2 = require(\"vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal\");\nvar externalTerminalService_1 = require(\"vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar resources_1 = require(\"vs/workbench/common/resources\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar files_2 = require(\"vs/workbench/contrib/files/browser/files\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar network_1 = require(\"vs/base/common/network\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nif (env.isWindows) {\n    extensions_1.registerSingleton(externalTerminal_1.IExternalTerminalService, externalTerminalService_1.WindowsExternalTerminalService, true);\n}\nelse if (env.isMacintosh) {\n    extensions_1.registerSingleton(externalTerminal_1.IExternalTerminalService, externalTerminalService_1.MacExternalTerminalService, true);\n}\nelse if (env.isLinux) {\n    extensions_1.registerSingleton(externalTerminal_1.IExternalTerminalService, externalTerminalService_1.LinuxExternalTerminalService, true);\n}\nexternalTerminal_2.getDefaultTerminalLinuxReady().then(function (defaultTerminalLinux) {\n    var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\n    configurationRegistry.registerConfiguration({\n        id: 'externalTerminal',\n        order: 100,\n        title: nls.localize('terminalConfigurationTitle', \"External Terminal\"),\n        type: 'object',\n        properties: {\n            'terminal.explorerKind': {\n                type: 'string',\n                enum: [\n                    'integrated',\n                    'external'\n                ],\n                enumDescriptions: [\n                    nls.localize('terminal.explorerKind.integrated', \"Use VS Code's integrated terminal.\"),\n                    nls.localize('terminal.explorerKind.external', \"Use the configured external terminal.\")\n                ],\n                description: nls.localize('explorer.openInTerminalKind', \"Customizes what kind of terminal to launch.\"),\n                default: 'integrated'\n            },\n            'terminal.external.windowsExec': {\n                type: 'string',\n                description: nls.localize('terminal.external.windowsExec', \"Customizes which terminal to run on Windows.\"),\n                default: externalTerminal_2.getDefaultTerminalWindows(),\n                scope: configurationRegistry_1.ConfigurationScope.APPLICATION\n            },\n            'terminal.external.osxExec': {\n                type: 'string',\n                description: nls.localize('terminal.external.osxExec', \"Customizes which terminal application to run on macOS.\"),\n                default: externalTerminal_2.DEFAULT_TERMINAL_OSX,\n                scope: configurationRegistry_1.ConfigurationScope.APPLICATION\n            },\n            'terminal.external.linuxExec': {\n                type: 'string',\n                description: nls.localize('terminal.external.linuxExec', \"Customizes which terminal to run on Linux.\"),\n                default: defaultTerminalLinux,\n                scope: configurationRegistry_1.ConfigurationScope.APPLICATION\n            }\n        }\n    });\n});\nvar OPEN_IN_TERMINAL_COMMAND_ID = 'openInTerminal';\ncommands_1.CommandsRegistry.registerCommand({\n    id: OPEN_IN_TERMINAL_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var configurationService = accessor.get(configuration_1.IConfigurationService);\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var fileService = accessor.get(files_1.IFileService);\n        var integratedTerminalService = accessor.get(terminal_1.ITerminalService);\n        var terminalService = accessor.get(externalTerminal_1.IExternalTerminalService);\n        var resources = files_2.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), editorService);\n        return fileService.resolveFiles(resources.map(function (r) { return ({ resource: r }); })).then(function (stats) {\n            var directoriesToOpen = arrays_1.distinct(stats.filter(function (data) { return data.success; }).map(function (_a) {\n                var stat = _a.stat;\n                return stat.isDirectory ? stat.resource.fsPath : paths.dirname(stat.resource.fsPath);\n            }));\n            return directoriesToOpen.map(function (dir) {\n                if (configurationService.getValue().terminal.explorerKind === 'integrated') {\n                    var instance = integratedTerminalService.createTerminal({ cwd: dir }, true);\n                    if (instance && (resources.length === 1 || !resource || dir === resource.fsPath || dir === paths.dirname(resource.fsPath))) {\n                        integratedTerminalService.setActiveInstance(instance);\n                        integratedTerminalService.showPanel(true);\n                    }\n                }\n                else {\n                    terminalService.openTerminal(dir);\n                }\n            });\n        });\n    }\n});\nvar OPEN_NATIVE_CONSOLE_COMMAND_ID = 'workbench.action.terminal.openNativeConsole';\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_C,\n    when: terminal_1.KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    handler: function (accessor) {\n        var historyService = accessor.get(history_1.IHistoryService);\n        var terminalService = accessor.get(externalTerminal_1.IExternalTerminalService);\n        var root = historyService.getLastActiveWorkspaceRoot(network_1.Schemas.file);\n        if (root) {\n            terminalService.openTerminal(root.fsPath);\n        }\n        else {\n            // Opens current file's folder, if no folder is open in editor\n            var activeFile = historyService.getLastActiveFile(network_1.Schemas.file);\n            if (activeFile) {\n                terminalService.openTerminal(paths.dirname(activeFile.fsPath));\n            }\n        }\n    }\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n    command: {\n        id: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n        title: { value: nls.localize('globalConsoleAction', \"Open New Terminal\"), original: 'Open New Terminal' }\n    }\n});\nvar openConsoleCommand = {\n    id: OPEN_IN_TERMINAL_COMMAND_ID,\n    title: nls.localize('scopedConsoleAction', \"Open in Terminal\")\n};\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.OpenEditorsContext, {\n    group: 'navigation',\n    order: 30,\n    command: openConsoleCommand,\n    when: resources_1.ResourceContextKey.Scheme.isEqualTo(network_1.Schemas.file)\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.ExplorerContext, {\n    group: 'navigation',\n    order: 30,\n    command: openConsoleCommand,\n    when: resources_1.ResourceContextKey.Scheme.isEqualTo(network_1.Schemas.file)\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,6CAA+C;AAC/C,iEAAgE;AAChE,gFAAuF;AACvF,0EAAgF;AAChF,2CAA6C;AAE7C,kGAAyI;AACzI,8DAA0E;AAC1E,oDAA0D;AAC1D,gGAAgI;AAChI,0EAAwJ;AACxJ,4GAAwK;AACxK,0HAA0L;AAC1L,wEAA+E;AAC/E,2DAAmE;AACnE,yFAA0G;AAC1G,wDAA8D;AAC9D,oEAAoE;AACpE,kEAAqF;AACrF,iEAAwE;AACxE,kDAAiD;AACjD,gDAAiD;AACjD,mFAAmF;AAEnF,IAAI,GAAG,CAAC,SAAS,EAAE;IAClB,8BAAiB,CAAC,2CAAwB,EAAE,wDAA8B,EAAE,IAAI,CAAC,CAAC;CAClF;KAAM,IAAI,GAAG,CAAC,WAAW,EAAE;IAC3B,8BAAiB,CAAC,2CAAwB,EAAE,oDAA0B,EAAE,IAAI,CAAC,CAAC;CAC9E;KAAM,IAAI,GAAG,CAAC,OAAO,EAAE;IACvB,8BAAiB,CAAC,2CAAwB,EAAE,sDAA4B,EAAE,IAAI,CAAC,CAAC;CAChF;AAED,+CAA4B,EAAE,CAAC,IAAI,CAAC,UAAA,oBAAoB;IACvD,IAAI,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC;IAC1F,qBAAqB,CAAC,qBAAqB,CAAC;QAC3C,EAAE,EAAE,kBAAkB;QACtB,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,4BAA4B,EAAE,mBAAmB,CAAC;QACtE,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACX,uBAAuB,EAAE;gBACxB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE;oBACL,YAAY;oBACZ,UAAU;iBACV;gBACD,gBAAgB,EAAE;oBACjB,GAAG,CAAC,QAAQ,CAAC,kCAAkC,EAAE,oCAAoC,CAAC;oBACtF,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,uCAAuC,CAAC;iBACvF;gBACD,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,6CAA6C,CAAC;gBACvG,OAAO,EAAE,YAAY;aACrB;YACD,+BAA+B,EAAE;gBAChC,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,8CAA8C,CAAC;gBAC1G,OAAO,EAAE,4CAAyB,EAAE;gBACpC,KAAK,EAAE,0CAAkB,CAAC,WAAW;aACrC;YACD,2BAA2B,EAAE;gBAC5B,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,2BAA2B,EAAE,wDAAwD,CAAC;gBAChH,OAAO,EAAE,uCAAoB;gBAC7B,KAAK,EAAE,0CAAkB,CAAC,WAAW;aACrC;YACD,6BAA6B,EAAE;gBAC9B,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,4CAA4C,CAAC;gBACtG,OAAO,EAAE,oBAAoB;gBAC7B,KAAK,EAAE,0CAAkB,CAAC,WAAW;aACrC;SACD;KACD,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAM,2BAA2B,GAAG,gBAAgB,CAAC;AACrD,2BAAgB,CAAC,eAAe,CAAC;IAChC,EAAE,EAAE,2BAA2B;IAC/B,OAAO,EAAE,UAAC,QAAQ,EAAE,QAAa;QAChC,IAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,qCAAqB,CAAC,CAAC;QACjE,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAc,CAAC,CAAC;QACnD,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;QAC/C,IAAM,yBAAyB,GAAG,QAAQ,CAAC,GAAG,CAAC,2BAA0B,CAAC,CAAC;QAC3E,IAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,2CAAwB,CAAC,CAAC;QAC/D,IAAM,SAAS,GAAG,iCAAyB,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,EAAE,aAAa,CAAC,CAAC;QAEjG,OAAO,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAjB,CAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YAChF,IAAM,iBAAiB,GAAG,iBAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,EAAZ,CAAY,CAAC,CAAC,GAAG,CAAC,UAAC,EAAQ;oBAAN,cAAI;gBAAO,OAAA,IAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAhF,CAAgF,CAAC,CAAC,CAAC;YAC3K,OAAO,iBAAiB,CAAC,GAAG,CAAC,UAAA,GAAG;gBAC/B,IAAI,oBAAoB,CAAC,QAAQ,EAAkC,CAAC,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAE;oBAC3G,IAAM,QAAQ,GAAG,yBAAyB,CAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC;oBAC9E,IAAI,QAAQ,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,IAAI,GAAG,KAAK,QAAQ,CAAC,MAAM,IAAI,GAAG,KAAK,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;wBAC3H,yBAAyB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;wBACtD,yBAAyB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;qBAC1C;iBACD;qBAAM;oBACN,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBAClC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAC,CAAC;AAEH,IAAM,8BAA8B,GAAG,6CAA6C,CAAC;AACrF,yCAAmB,CAAC,gCAAgC,CAAC;IACpD,EAAE,EAAE,8BAA8B;IAClC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK;IACtD,IAAI,EAAE,kDAAuC;IAC7C,MAAM,EAAE,sCAAgB,CAAC,gBAAgB;IACzC,OAAO,EAAE,UAAC,QAAQ;QACjB,IAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAe,CAAC,CAAC;QACrD,IAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,2CAAwB,CAAC,CAAC;QAC/D,IAAM,IAAI,GAAG,cAAc,CAAC,0BAA0B,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,IAAI,EAAE;YACT,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC1C;aAAM;YACN,8DAA8D;YAC9D,IAAM,UAAU,GAAG,cAAc,CAAC,iBAAiB,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;YAClE,IAAI,UAAU,EAAE;gBACf,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/D;SACD;IACF,CAAC;CACD,CAAC,CAAC;AAEH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,cAAc,EAAE;IAClD,OAAO,EAAE;QACR,EAAE,EAAE,8BAA8B;QAClC,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE;KACzG;CACD,CAAC,CAAC;AAEH,IAAM,kBAAkB,GAAG;IAC1B,EAAE,EAAE,2BAA2B;IAC/B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,kBAAkB,CAAC;CAC9D,CAAC;AACF,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,kBAAkB,EAAE;IACtD,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,EAAE;IACT,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,8BAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAO,CAAC,IAAI,CAAC;CACvD,CAAC,CAAC;AAEH,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;IACnD,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,EAAE;IACT,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,8BAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAO,CAAC,IAAI,CAAC;CACvD,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as env from 'vs/base/common/platform';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport * as paths from 'vs/base/common/path';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IExternalTerminalConfiguration, IExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Extensions, IConfigurationRegistry, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ITerminalService as IIntegratedTerminalService, KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { getDefaultTerminalWindows, getDefaultTerminalLinuxReady, DEFAULT_TERMINAL_OSX } from 'vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal';\nimport { WindowsExternalTerminalService, MacExternalTerminalService, LinuxExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { getMultiSelectedResources } from 'vs/workbench/contrib/files/browser/files';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { Schemas } from 'vs/base/common/network';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nif (env.isWindows) {\n\tregisterSingleton(IExternalTerminalService, WindowsExternalTerminalService, true);\n} else if (env.isMacintosh) {\n\tregisterSingleton(IExternalTerminalService, MacExternalTerminalService, true);\n} else if (env.isLinux) {\n\tregisterSingleton(IExternalTerminalService, LinuxExternalTerminalService, true);\n}\n\ngetDefaultTerminalLinuxReady().then(defaultTerminalLinux => {\n\tlet configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tconfigurationRegistry.registerConfiguration({\n\t\tid: 'externalTerminal',\n\t\torder: 100,\n\t\ttitle: nls.localize('terminalConfigurationTitle', \"External Terminal\"),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'terminal.explorerKind': {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: [\n\t\t\t\t\t'integrated',\n\t\t\t\t\t'external'\n\t\t\t\t],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tnls.localize('terminal.explorerKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\tnls.localize('terminal.explorerKind.external', \"Use the configured external terminal.\")\n\t\t\t\t],\n\t\t\t\tdescription: nls.localize('explorer.openInTerminalKind', \"Customizes what kind of terminal to launch.\"),\n\t\t\t\tdefault: 'integrated'\n\t\t\t},\n\t\t\t'terminal.external.windowsExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.windowsExec', \"Customizes which terminal to run on Windows.\"),\n\t\t\t\tdefault: getDefaultTerminalWindows(),\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t},\n\t\t\t'terminal.external.osxExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.osxExec', \"Customizes which terminal application to run on macOS.\"),\n\t\t\t\tdefault: DEFAULT_TERMINAL_OSX,\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t},\n\t\t\t'terminal.external.linuxExec': {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('terminal.external.linuxExec', \"Customizes which terminal to run on Linux.\"),\n\t\t\t\tdefault: defaultTerminalLinux,\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t}\n\t\t}\n\t});\n});\n\nconst OPEN_IN_TERMINAL_COMMAND_ID = 'openInTerminal';\nCommandsRegistry.registerCommand({\n\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\thandler: (accessor, resource: uri) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst integratedTerminalService = accessor.get(IIntegratedTerminalService);\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService);\n\n\t\treturn fileService.resolveFiles(resources.map(r => ({ resource: r }))).then(stats => {\n\t\t\tconst directoriesToOpen = distinct(stats.filter(data => data.success).map(({ stat }) => stat!.isDirectory ? stat!.resource.fsPath : paths.dirname(stat!.resource.fsPath)));\n\t\t\treturn directoriesToOpen.map(dir => {\n\t\t\t\tif (configurationService.getValue<IExternalTerminalConfiguration>().terminal.explorerKind === 'integrated') {\n\t\t\t\t\tconst instance = integratedTerminalService.createTerminal({ cwd: dir }, true);\n\t\t\t\t\tif (instance && (resources.length === 1 || !resource || dir === resource.fsPath || dir === paths.dirname(resource.fsPath))) {\n\t\t\t\t\t\tintegratedTerminalService.setActiveInstance(instance);\n\t\t\t\t\t\tintegratedTerminalService.showPanel(true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tterminalService.openTerminal(dir);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n});\n\nconst OPEN_NATIVE_CONSOLE_COMMAND_ID = 'workbench.action.terminal.openNativeConsole';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_C,\n\twhen: KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\thandler: (accessor) => {\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst root = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tif (root) {\n\t\t\tterminalService.openTerminal(root.fsPath);\n\t\t} else {\n\t\t\t// Opens current file's folder, if no folder is open in editor\n\t\t\tconst activeFile = historyService.getLastActiveFile(Schemas.file);\n\t\t\tif (activeFile) {\n\t\t\t\tterminalService.openTerminal(paths.dirname(activeFile.fsPath));\n\t\t\t}\n\t\t}\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\t\ttitle: { value: nls.localize('globalConsoleAction', \"Open New Terminal\"), original: 'Open New Terminal' }\n\t}\n});\n\nconst openConsoleCommand = {\n\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\ttitle: nls.localize('scopedConsoleAction', \"Open in Terminal\")\n};\nMenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {\n\tgroup: 'navigation',\n\torder: 30,\n\tcommand: openConsoleCommand,\n\twhen: ResourceContextKey.Scheme.isEqualTo(Schemas.file)\n});\n\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n\tgroup: 'navigation',\n\torder: 30,\n\tcommand: openConsoleCommand,\n\twhen: ResourceContextKey.Scheme.isEqualTo(Schemas.file)\n});\n"]}]}